(lp0
(dp1
S'description'
p2
S''
p3
sS'subblocks'
p4
(lp5
(dp6
S'description'
p7
g3
sS'subblocks'
p8
(lp9
(dp10
S'description'
p11
g3
sS'subblocks'
p12
NsS'parameters'
p13
(lp14
(dp15
S'description'
p16
S'The block id where this object lives.\n'
p17
sS'cpp_type'
p18
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p19
sS'default'
p20
g3
sS'name'
p21
S'block'
p22
sS'required'
p23
I00
sS'group_name'
p24
Nsa(dp25
S'description'
p26
S'A string representing the Moose Object that will be built by this Action\n'
p27
sS'cpp_type'
p28
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29
sS'default'
p30
g3
sS'name'
p31
S'type'
p32
sS'required'
p33
I01
sS'group_name'
p34
NsasS'name'
p35
S'/Adaptivity/Indicators/*'
p36
sa(dp37
S'description'
p38
g3
sS'subblocks'
p39
NsS'parameters'
p40
(lp41
(dp42
S'description'
p43
S'block ID or name where the object works\n'
p44
sS'cpp_type'
p45
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p46
sS'default'
p47
S'ANY_BLOCK_ID'
p48
sS'name'
p49
S'block'
p50
sS'required'
p51
I00
sS'group_name'
p52
Nsa(dp53
S'description'
p54
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55
sS'cpp_type'
p56
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p57
sS'default'
p58
g3
sS'name'
p59
S'control_tags'
p60
sS'required'
p61
I00
sS'group_name'
p62
S'Advanced'
p63
sa(dp64
S'description'
p65
S'Set the enabled status of the MooseObject.\n'
p66
sS'cpp_type'
p67
S'bool'
p68
sS'default'
p69
S'1'
p70
sS'name'
p71
S'enable'
p72
sS'required'
p73
I00
sS'group_name'
p74
S'Advanced'
p75
sa(dp76
S'description'
p77
S'The analytic solution to compare against\n'
p78
sS'cpp_type'
p79
S'FunctionName'
p80
sS'default'
p81
g3
sS'name'
p82
S'function'
p83
sS'required'
p84
I01
sS'group_name'
p85
Nsa(dp86
S'description'
p87
S'Determines whether this object is calculated using an implicit or explicit form\n'
p88
sS'cpp_type'
p89
S'bool'
p90
sS'default'
p91
S'1'
p92
sS'name'
p93
S'implicit'
p94
sS'required'
p95
I00
sS'group_name'
p96
S'Advanced'
p97
sa(dp98
S'description'
p99
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p100
sS'cpp_type'
p101
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p102
sS'default'
p103
g3
sS'name'
p104
S'outputs'
p105
sS'required'
p106
I00
sS'group_name'
p107
S'Advanced'
p108
sa(dp109
S'description'
p110
g3
sS'cpp_type'
p111
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p112
sS'default'
p113
S'AnalyticalIndicator'
p114
sS'name'
p115
S'type'
p116
sS'required'
p117
I00
sS'group_name'
p118
Nsa(dp119
S'description'
p120
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121
sS'cpp_type'
p122
S'bool'
p123
sS'default'
p124
S'0'
p125
sS'name'
p126
S'use_displaced_mesh'
p127
sS'required'
p128
I00
sS'group_name'
p129
S'Advanced'
p130
sa(dp131
S'description'
p132
S'The name of the variable that this Indicator operates on\n'
p133
sS'cpp_type'
p134
S'VariableName'
p135
sS'default'
p136
g3
sS'name'
p137
S'variable'
p138
sS'required'
p139
I01
sS'group_name'
p140
NsasS'name'
p141
S'/Adaptivity/Indicators/AnalyticalIndicator'
p142
sa(dp143
S'description'
p144
g3
sS'subblocks'
p145
NsS'parameters'
p146
(lp147
(dp148
S'description'
p149
S'The list of block ids (SubdomainID) that this object will be applied\n'
p150
sS'cpp_type'
p151
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p152
sS'default'
p153
g3
sS'name'
p154
S'block'
p155
sS'required'
p156
I00
sS'group_name'
p157
Nsa(dp158
S'description'
p159
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p160
sS'cpp_type'
p161
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p162
sS'default'
p163
g3
sS'name'
p164
S'control_tags'
p165
sS'required'
p166
I00
sS'group_name'
p167
S'Advanced'
p168
sa(dp169
S'description'
p170
S'Set the enabled status of the MooseObject.\n'
p171
sS'cpp_type'
p172
S'bool'
p173
sS'default'
p174
S'1'
p175
sS'name'
p176
S'enable'
p177
sS'required'
p178
I00
sS'group_name'
p179
S'Advanced'
p180
sa(dp181
S'description'
p182
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p183
sS'cpp_type'
p184
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p185
sS'default'
p186
g3
sS'name'
p187
S'outputs'
p188
sS'required'
p189
I00
sS'group_name'
p190
S'Advanced'
p191
sa(dp192
S'description'
p193
S'Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n'
p194
sS'cpp_type'
p195
S'bool'
p196
sS'default'
p197
S'0'
p198
sS'name'
p199
S'scale_by_flux_faces'
p200
sS'required'
p201
I00
sS'group_name'
p202
Nsa(dp203
S'description'
p204
g3
sS'cpp_type'
p205
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p206
sS'default'
p207
S'GradientJumpIndicator'
p208
sS'name'
p209
S'type'
p210
sS'required'
p211
I00
sS'group_name'
p212
Nsa(dp213
S'description'
p214
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p215
sS'cpp_type'
p216
S'bool'
p217
sS'default'
p218
S'0'
p219
sS'name'
p220
S'use_displaced_mesh'
p221
sS'required'
p222
I00
sS'group_name'
p223
S'Advanced'
p224
sa(dp225
S'description'
p226
S'The name of the variable that this side indicator applies to\n'
p227
sS'cpp_type'
p228
S'VariableName'
p229
sS'default'
p230
g3
sS'name'
p231
S'variable'
p232
sS'required'
p233
I01
sS'group_name'
p234
NsasS'name'
p235
S'/Adaptivity/Indicators/GradientJumpIndicator'
p236
sa(dp237
S'description'
p238
g3
sS'subblocks'
p239
NsS'parameters'
p240
(lp241
(dp242
S'description'
p243
S'The list of block ids (SubdomainID) that this object will be applied\n'
p244
sS'cpp_type'
p245
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p246
sS'default'
p247
g3
sS'name'
p248
S'block'
p249
sS'required'
p250
I00
sS'group_name'
p251
Nsa(dp252
S'description'
p253
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p254
sS'cpp_type'
p255
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p256
sS'default'
p257
g3
sS'name'
p258
S'control_tags'
p259
sS'required'
p260
I00
sS'group_name'
p261
S'Advanced'
p262
sa(dp263
S'description'
p264
S'Set the enabled status of the MooseObject.\n'
p265
sS'cpp_type'
p266
S'bool'
p267
sS'default'
p268
S'1'
p269
sS'name'
p270
S'enable'
p271
sS'required'
p272
I00
sS'group_name'
p273
S'Advanced'
p274
sa(dp275
S'description'
p276
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p277
sS'cpp_type'
p278
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p279
sS'default'
p280
g3
sS'name'
p281
S'outputs'
p282
sS'required'
p283
I00
sS'group_name'
p284
S'Advanced'
p285
sa(dp286
S'description'
p287
S'Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n'
p288
sS'cpp_type'
p289
S'bool'
p290
sS'default'
p291
S'0'
p292
sS'name'
p293
S'scale_by_flux_faces'
p294
sS'required'
p295
I00
sS'group_name'
p296
Nsa(dp297
S'description'
p298
g3
sS'cpp_type'
p299
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p300
sS'default'
p301
S'LaplacianJumpIndicator'
p302
sS'name'
p303
S'type'
p304
sS'required'
p305
I00
sS'group_name'
p306
Nsa(dp307
S'description'
p308
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p309
sS'cpp_type'
p310
S'bool'
p311
sS'default'
p312
S'0'
p313
sS'name'
p314
S'use_displaced_mesh'
p315
sS'required'
p316
I00
sS'group_name'
p317
S'Advanced'
p318
sa(dp319
S'description'
p320
S'The name of the variable that this side indicator applies to\n'
p321
sS'cpp_type'
p322
S'VariableName'
p323
sS'default'
p324
g3
sS'name'
p325
S'variable'
p326
sS'required'
p327
I01
sS'group_name'
p328
NsasS'name'
p329
S'/Adaptivity/Indicators/LaplacianJumpIndicator'
p330
sasS'parameters'
p331
NsS'name'
p332
S'/Adaptivity/Indicators'
p333
sa(dp334
S'description'
p335
g3
sS'subblocks'
p336
(lp337
(dp338
S'description'
p339
g3
sS'subblocks'
p340
NsS'parameters'
p341
(lp342
(dp343
S'description'
p344
S'The block id where this object lives.\n'
p345
sS'cpp_type'
p346
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p347
sS'default'
p348
g3
sS'name'
p349
S'block'
p350
sS'required'
p351
I00
sS'group_name'
p352
Nsa(dp353
S'description'
p354
S'A string representing the Moose Object that will be built by this Action\n'
p355
sS'cpp_type'
p356
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p357
sS'default'
p358
g3
sS'name'
p359
S'type'
p360
sS'required'
p361
I01
sS'group_name'
p362
NsasS'name'
p363
S'/Adaptivity/Markers/*'
p364
sa(dp365
S'description'
p366
S"Marks the region inside and outside of a 'box' domain for refinement or coarsening.\n"
p367
sS'subblocks'
p368
NsS'parameters'
p369
(lp370
(dp371
S'description'
p372
S'The list of block ids (SubdomainID) that this object will be applied\n'
p373
sS'cpp_type'
p374
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p375
sS'default'
p376
g3
sS'name'
p377
S'block'
p378
sS'required'
p379
I00
sS'group_name'
p380
Nsa(dp381
S'description'
p382
S'The bottom left point (in x,y,z with spaces in-between).\n'
p383
sS'cpp_type'
p384
S'libMesh::VectorValue<double>'
p385
sS'default'
p386
g3
sS'name'
p387
S'bottom_left'
p388
sS'required'
p389
I01
sS'group_name'
p390
Nsa(dp391
S'description'
p392
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p393
sS'cpp_type'
p394
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p395
sS'default'
p396
g3
sS'name'
p397
S'control_tags'
p398
sS'required'
p399
I00
sS'group_name'
p400
S'Advanced'
p401
sa(dp402
S'description'
p403
S'Set the enabled status of the MooseObject.\n'
p404
sS'cpp_type'
p405
S'bool'
p406
sS'default'
p407
S'1'
p408
sS'name'
p409
S'enable'
p410
sS'required'
p411
I00
sS'group_name'
p412
S'Advanced'
p413
sa(dp414
S'name'
p415
S'inside'
p416
sS'cpp_type'
p417
S'MooseEnum'
p418
sS'default'
p419
g3
sS'description'
p420
S'How to mark elements inside the box.\n'
p421
sS'required'
p422
I01
sS'options'
p423
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p424
sS'group_name'
p425
Nsa(dp426
S'description'
p427
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p428
sS'cpp_type'
p429
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p430
sS'default'
p431
g3
sS'name'
p432
S'outputs'
p433
sS'required'
p434
I00
sS'group_name'
p435
S'Advanced'
p436
sa(dp437
S'name'
p438
S'outside'
p439
sS'cpp_type'
p440
S'MooseEnum'
p441
sS'default'
p442
g3
sS'description'
p443
S'How to mark elements outside the box.\n'
p444
sS'required'
p445
I01
sS'options'
p446
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p447
sS'group_name'
p448
Nsa(dp449
S'description'
p450
S'The bottom left point (in x,y,z with spaces in-between).\n'
p451
sS'cpp_type'
p452
S'libMesh::VectorValue<double>'
p453
sS'default'
p454
g3
sS'name'
p455
S'top_right'
p456
sS'required'
p457
I01
sS'group_name'
p458
Nsa(dp459
S'description'
p460
g3
sS'cpp_type'
p461
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p462
sS'default'
p463
S'BoxMarker'
p464
sS'name'
p465
S'type'
p466
sS'required'
p467
I00
sS'group_name'
p468
Nsa(dp469
S'description'
p470
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p471
sS'cpp_type'
p472
S'bool'
p473
sS'default'
p474
S'0'
p475
sS'name'
p476
S'use_displaced_mesh'
p477
sS'required'
p478
I00
sS'group_name'
p479
S'Advanced'
p480
sasS'name'
p481
S'/Adaptivity/Markers/BoxMarker'
p482
sa(dp483
S'description'
p484
S'A marker that converts many markers into a single marker by considering the maximum value of the listed markers (i.e., refinement takes precedent).\n'
p485
sS'subblocks'
p486
NsS'parameters'
p487
(lp488
(dp489
S'description'
p490
S'The list of block ids (SubdomainID) that this object will be applied\n'
p491
sS'cpp_type'
p492
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p493
sS'default'
p494
g3
sS'name'
p495
S'block'
p496
sS'required'
p497
I00
sS'group_name'
p498
Nsa(dp499
S'description'
p500
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p501
sS'cpp_type'
p502
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p503
sS'default'
p504
g3
sS'name'
p505
S'control_tags'
p506
sS'required'
p507
I00
sS'group_name'
p508
S'Advanced'
p509
sa(dp510
S'description'
p511
S'Set the enabled status of the MooseObject.\n'
p512
sS'cpp_type'
p513
S'bool'
p514
sS'default'
p515
S'1'
p516
sS'name'
p517
S'enable'
p518
sS'required'
p519
I00
sS'group_name'
p520
S'Advanced'
p521
sa(dp522
S'description'
p523
S'A list of marker names to combine into a single marker.\n'
p524
sS'cpp_type'
p525
S'std::__1::vector<MarkerName, std::__1::allocator<MarkerName> >'
p526
sS'default'
p527
g3
sS'name'
p528
S'markers'
p529
sS'required'
p530
I01
sS'group_name'
p531
Nsa(dp532
S'description'
p533
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p534
sS'cpp_type'
p535
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p536
sS'default'
p537
g3
sS'name'
p538
S'outputs'
p539
sS'required'
p540
I00
sS'group_name'
p541
S'Advanced'
p542
sa(dp543
S'description'
p544
g3
sS'cpp_type'
p545
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p546
sS'default'
p547
S'ComboMarker'
p548
sS'name'
p549
S'type'
p550
sS'required'
p551
I00
sS'group_name'
p552
Nsa(dp553
S'description'
p554
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p555
sS'cpp_type'
p556
S'bool'
p557
sS'default'
p558
S'0'
p559
sS'name'
p560
S'use_displaced_mesh'
p561
sS'required'
p562
I00
sS'group_name'
p563
S'Advanced'
p564
sasS'name'
p565
S'/Adaptivity/Markers/ComboMarker'
p566
sa(dp567
S'description'
p568
S'Marks elements for refinement or coarsening based on the fraction of the total error from the supplied indicator.\n'
p569
sS'subblocks'
p570
NsS'parameters'
p571
(lp572
(dp573
S'description'
p574
S'The list of block ids (SubdomainID) that this object will be applied\n'
p575
sS'cpp_type'
p576
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p577
sS'default'
p578
g3
sS'name'
p579
S'block'
p580
sS'required'
p581
I00
sS'group_name'
p582
Nsa(dp583
S'description'
p584
S'Elements within this percentage of the min error will be coarsened.  Must be between 0 and 1!\n'
p585
sS'cpp_type'
p586
S'double'
p587
sS'default'
p588
S'0'
p589
sS'name'
p590
S'coarsen'
p591
sS'required'
p592
I00
sS'group_name'
p593
Nsa(dp594
S'description'
p595
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p596
sS'cpp_type'
p597
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p598
sS'default'
p599
g3
sS'name'
p600
S'control_tags'
p601
sS'required'
p602
I00
sS'group_name'
p603
S'Advanced'
p604
sa(dp605
S'description'
p606
S'Set the enabled status of the MooseObject.\n'
p607
sS'cpp_type'
p608
S'bool'
p609
sS'default'
p610
S'1'
p611
sS'name'
p612
S'enable'
p613
sS'required'
p614
I00
sS'group_name'
p615
S'Advanced'
p616
sa(dp617
S'description'
p618
S'The name of the Indicator that this Marker uses.\n'
p619
sS'cpp_type'
p620
S'IndicatorName'
p621
sS'default'
p622
g3
sS'name'
p623
S'indicator'
p624
sS'required'
p625
I01
sS'group_name'
p626
Nsa(dp627
S'description'
p628
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p629
sS'cpp_type'
p630
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p631
sS'default'
p632
g3
sS'name'
p633
S'outputs'
p634
sS'required'
p635
I00
sS'group_name'
p636
S'Advanced'
p637
sa(dp638
S'description'
p639
S'Elements within this percentage of the max error will be refined.  Must be between 0 and 1!\n'
p640
sS'cpp_type'
p641
S'double'
p642
sS'default'
p643
S'0'
p644
sS'name'
p645
S'refine'
p646
sS'required'
p647
I00
sS'group_name'
p648
Nsa(dp649
S'description'
p650
g3
sS'cpp_type'
p651
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p652
sS'default'
p653
S'ErrorFractionMarker'
p654
sS'name'
p655
S'type'
p656
sS'required'
p657
I00
sS'group_name'
p658
Nsa(dp659
S'description'
p660
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p661
sS'cpp_type'
p662
S'bool'
p663
sS'default'
p664
S'0'
p665
sS'name'
p666
S'use_displaced_mesh'
p667
sS'required'
p668
I00
sS'group_name'
p669
S'Advanced'
p670
sasS'name'
p671
S'/Adaptivity/Markers/ErrorFractionMarker'
p672
sa(dp673
S'description'
p674
S'Coarsen or refine elements based on an absolute tolerance allowed from the supplied indicator.\n'
p675
sS'subblocks'
p676
NsS'parameters'
p677
(lp678
(dp679
S'description'
p680
S'The list of block ids (SubdomainID) that this object will be applied\n'
p681
sS'cpp_type'
p682
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p683
sS'default'
p684
g3
sS'name'
p685
S'block'
p686
sS'required'
p687
I00
sS'group_name'
p688
Nsa(dp689
S'description'
p690
S'Elements with error less than this will be coarsened.\n'
p691
sS'cpp_type'
p692
S'double'
p693
sS'default'
p694
S'0'
p695
sS'name'
p696
S'coarsen'
p697
sS'required'
p698
I00
sS'group_name'
p699
Nsa(dp700
S'description'
p701
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p702
sS'cpp_type'
p703
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p704
sS'default'
p705
g3
sS'name'
p706
S'control_tags'
p707
sS'required'
p708
I00
sS'group_name'
p709
S'Advanced'
p710
sa(dp711
S'description'
p712
S'Set the enabled status of the MooseObject.\n'
p713
sS'cpp_type'
p714
S'bool'
p715
sS'default'
p716
S'1'
p717
sS'name'
p718
S'enable'
p719
sS'required'
p720
I00
sS'group_name'
p721
S'Advanced'
p722
sa(dp723
S'description'
p724
S'The name of the Indicator that this Marker uses.\n'
p725
sS'cpp_type'
p726
S'IndicatorName'
p727
sS'default'
p728
g3
sS'name'
p729
S'indicator'
p730
sS'required'
p731
I01
sS'group_name'
p732
Nsa(dp733
S'description'
p734
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p735
sS'cpp_type'
p736
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p737
sS'default'
p738
g3
sS'name'
p739
S'outputs'
p740
sS'required'
p741
I00
sS'group_name'
p742
S'Advanced'
p743
sa(dp744
S'description'
p745
S'Elements with error more than this will be refined.\n'
p746
sS'cpp_type'
p747
S'double'
p748
sS'default'
p749
S'1.79769e+308'
p750
sS'name'
p751
S'refine'
p752
sS'required'
p753
I00
sS'group_name'
p754
Nsa(dp755
S'description'
p756
g3
sS'cpp_type'
p757
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p758
sS'default'
p759
S'ErrorToleranceMarker'
p760
sS'name'
p761
S'type'
p762
sS'required'
p763
I00
sS'group_name'
p764
Nsa(dp765
S'description'
p766
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p767
sS'cpp_type'
p768
S'bool'
p769
sS'default'
p770
S'0'
p771
sS'name'
p772
S'use_displaced_mesh'
p773
sS'required'
p774
I00
sS'group_name'
p775
S'Advanced'
p776
sasS'name'
p777
S'/Adaptivity/Markers/ErrorToleranceMarker'
p778
sa(dp779
S'description'
p780
S'Marks inside and outside a box that can have arbitrary orientation and center point.\n'
p781
sS'subblocks'
p782
NsS'parameters'
p783
(lp784
(dp785
S'description'
p786
S'The list of block ids (SubdomainID) that this object will be applied\n'
p787
sS'cpp_type'
p788
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p789
sS'default'
p790
g3
sS'name'
p791
S'block'
p792
sS'required'
p793
I00
sS'group_name'
p794
Nsa(dp795
S'description'
p796
S"The center (many people spell this 'center') of the box.\n"
p797
sS'cpp_type'
p798
S'libMesh::Point'
p799
sS'default'
p800
g3
sS'name'
p801
S'center'
p802
sS'required'
p803
I01
sS'group_name'
p804
Nsa(dp805
S'description'
p806
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p807
sS'cpp_type'
p808
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p809
sS'default'
p810
g3
sS'name'
p811
S'control_tags'
p812
sS'required'
p813
I00
sS'group_name'
p814
S'Advanced'
p815
sa(dp816
S'description'
p817
S'Set the enabled status of the MooseObject.\n'
p818
sS'cpp_type'
p819
S'bool'
p820
sS'default'
p821
S'1'
p822
sS'name'
p823
S'enable'
p824
sS'required'
p825
I00
sS'group_name'
p826
S'Advanced'
p827
sa(dp828
S'description'
p829
S'The height of the box\n'
p830
sS'cpp_type'
p831
S'double'
p832
sS'default'
p833
g3
sS'name'
p834
S'height'
p835
sS'required'
p836
I01
sS'group_name'
p837
Nsa(dp838
S'name'
p839
S'inside'
p840
sS'cpp_type'
p841
S'MooseEnum'
p842
sS'default'
p843
g3
sS'description'
p844
S'How to mark elements inside the box.\n'
p845
sS'required'
p846
I01
sS'options'
p847
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p848
sS'group_name'
p849
Nsa(dp850
S'description'
p851
S'The length of the box\n'
p852
sS'cpp_type'
p853
S'double'
p854
sS'default'
p855
g3
sS'name'
p856
S'length'
p857
sS'required'
p858
I01
sS'group_name'
p859
Nsa(dp860
S'description'
p861
S'The direction along which the length is oriented (must be perpendicular to width_direction).\n'
p862
sS'cpp_type'
p863
S'libMesh::VectorValue<double>'
p864
sS'default'
p865
g3
sS'name'
p866
S'length_direction'
p867
sS'required'
p868
I01
sS'group_name'
p869
Nsa(dp870
S'description'
p871
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p872
sS'cpp_type'
p873
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p874
sS'default'
p875
g3
sS'name'
p876
S'outputs'
p877
sS'required'
p878
I00
sS'group_name'
p879
S'Advanced'
p880
sa(dp881
S'name'
p882
S'outside'
p883
sS'cpp_type'
p884
S'MooseEnum'
p885
sS'default'
p886
g3
sS'description'
p887
S'How to mark elements outside the box.\n'
p888
sS'required'
p889
I01
sS'options'
p890
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p891
sS'group_name'
p892
Nsa(dp893
S'description'
p894
g3
sS'cpp_type'
p895
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p896
sS'default'
p897
S'OrientedBoxMarker'
p898
sS'name'
p899
S'type'
p900
sS'required'
p901
I00
sS'group_name'
p902
Nsa(dp903
S'description'
p904
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p905
sS'cpp_type'
p906
S'bool'
p907
sS'default'
p908
S'0'
p909
sS'name'
p910
S'use_displaced_mesh'
p911
sS'required'
p912
I00
sS'group_name'
p913
S'Advanced'
p914
sa(dp915
S'description'
p916
S'The width of the box\n'
p917
sS'cpp_type'
p918
S'double'
p919
sS'default'
p920
g3
sS'name'
p921
S'width'
p922
sS'required'
p923
I01
sS'group_name'
p924
Nsa(dp925
S'description'
p926
S'The direction along which the width is oriented.\n'
p927
sS'cpp_type'
p928
S'libMesh::VectorValue<double>'
p929
sS'default'
p930
g3
sS'name'
p931
S'width_direction'
p932
sS'required'
p933
I01
sS'group_name'
p934
NsasS'name'
p935
S'/Adaptivity/Markers/OrientedBoxMarker'
p936
sa(dp937
S'description'
p938
S'Uniformly mark all elements for refinement or coarsening.\n'
p939
sS'subblocks'
p940
NsS'parameters'
p941
(lp942
(dp943
S'description'
p944
S'The list of block ids (SubdomainID) that this object will be applied\n'
p945
sS'cpp_type'
p946
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p947
sS'default'
p948
g3
sS'name'
p949
S'block'
p950
sS'required'
p951
I00
sS'group_name'
p952
Nsa(dp953
S'description'
p954
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p955
sS'cpp_type'
p956
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p957
sS'default'
p958
g3
sS'name'
p959
S'control_tags'
p960
sS'required'
p961
I00
sS'group_name'
p962
S'Advanced'
p963
sa(dp964
S'description'
p965
S'Set the enabled status of the MooseObject.\n'
p966
sS'cpp_type'
p967
S'bool'
p968
sS'default'
p969
S'1'
p970
sS'name'
p971
S'enable'
p972
sS'required'
p973
I00
sS'group_name'
p974
S'Advanced'
p975
sa(dp976
S'name'
p977
S'mark'
p978
sS'cpp_type'
p979
S'MooseEnum'
p980
sS'default'
p981
g3
sS'description'
p982
S'How to mark elements.\n'
p983
sS'required'
p984
I01
sS'options'
p985
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p986
sS'group_name'
p987
Nsa(dp988
S'description'
p989
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p990
sS'cpp_type'
p991
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p992
sS'default'
p993
g3
sS'name'
p994
S'outputs'
p995
sS'required'
p996
I00
sS'group_name'
p997
S'Advanced'
p998
sa(dp999
S'description'
p1000
g3
sS'cpp_type'
p1001
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1002
sS'default'
p1003
S'UniformMarker'
p1004
sS'name'
p1005
S'type'
p1006
sS'required'
p1007
I00
sS'group_name'
p1008
Nsa(dp1009
S'description'
p1010
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1011
sS'cpp_type'
p1012
S'bool'
p1013
sS'default'
p1014
S'0'
p1015
sS'name'
p1016
S'use_displaced_mesh'
p1017
sS'required'
p1018
I00
sS'group_name'
p1019
S'Advanced'
p1020
sasS'name'
p1021
S'/Adaptivity/Markers/UniformMarker'
p1022
sa(dp1023
S'description'
p1024
S'Mark elements for adaptivity based on the supplied upper and lower bounds and the specified variable.\n'
p1025
sS'subblocks'
p1026
NsS'parameters'
p1027
(lp1028
(dp1029
S'description'
p1030
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1031
sS'cpp_type'
p1032
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1033
sS'default'
p1034
g3
sS'name'
p1035
S'block'
p1036
sS'required'
p1037
I00
sS'group_name'
p1038
Nsa(dp1039
S'description'
p1040
S'A buffer zone value added to both ends of the range where a third_state marker can be returned.\n'
p1041
sS'cpp_type'
p1042
S'double'
p1043
sS'default'
p1044
S'0'
p1045
sS'name'
p1046
S'buffer_size'
p1047
sS'required'
p1048
I00
sS'group_name'
p1049
Nsa(dp1050
S'description'
p1051
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1052
sS'cpp_type'
p1053
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p1054
sS'default'
p1055
g3
sS'name'
p1056
S'control_tags'
p1057
sS'required'
p1058
I00
sS'group_name'
p1059
S'Advanced'
p1060
sa(dp1061
S'description'
p1062
S'Set the enabled status of the MooseObject.\n'
p1063
sS'cpp_type'
p1064
S'bool'
p1065
sS'default'
p1066
S'1'
p1067
sS'name'
p1068
S'enable'
p1069
sS'required'
p1070
I00
sS'group_name'
p1071
S'Advanced'
p1072
sa(dp1073
S'description'
p1074
S'If this is true then values inside the range will be coarsened, and values outside the range will be refined.\n'
p1075
sS'cpp_type'
p1076
S'bool'
p1077
sS'default'
p1078
S'0'
p1079
sS'name'
p1080
S'invert'
p1081
sS'required'
p1082
I00
sS'group_name'
p1083
Nsa(dp1084
S'description'
p1085
S'The lower bound value for the range.\n'
p1086
sS'cpp_type'
p1087
S'double'
p1088
sS'default'
p1089
g3
sS'name'
p1090
S'lower_bound'
p1091
sS'required'
p1092
I01
sS'group_name'
p1093
Nsa(dp1094
S'description'
p1095
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p1096
sS'cpp_type'
p1097
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p1098
sS'default'
p1099
g3
sS'name'
p1100
S'outputs'
p1101
sS'required'
p1102
I00
sS'group_name'
p1103
S'Advanced'
p1104
sa(dp1105
S'name'
p1106
S'third_state'
p1107
sS'cpp_type'
p1108
S'MooseEnum'
p1109
sS'default'
p1110
S'DONT_MARK'
p1111
sS'description'
p1112
S'The Marker state to apply to values in the buffer zone (both ends of the range).\n'
p1113
sS'required'
p1114
I00
sS'options'
p1115
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p1116
sS'group_name'
p1117
Nsa(dp1118
S'description'
p1119
g3
sS'cpp_type'
p1120
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1121
sS'default'
p1122
S'ValueRangeMarker'
p1123
sS'name'
p1124
S'type'
p1125
sS'required'
p1126
I00
sS'group_name'
p1127
Nsa(dp1128
S'description'
p1129
S'The upper bound value for the range.\n'
p1130
sS'cpp_type'
p1131
S'double'
p1132
sS'default'
p1133
g3
sS'name'
p1134
S'upper_bound'
p1135
sS'required'
p1136
I01
sS'group_name'
p1137
Nsa(dp1138
S'description'
p1139
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1140
sS'cpp_type'
p1141
S'bool'
p1142
sS'default'
p1143
S'0'
p1144
sS'name'
p1145
S'use_displaced_mesh'
p1146
sS'required'
p1147
I00
sS'group_name'
p1148
S'Advanced'
p1149
sa(dp1150
S'description'
p1151
S'The variable whose values are used in this marker.\n'
p1152
sS'cpp_type'
p1153
S'std::vector<VariableName>'
p1154
sS'default'
p1155
g3
sS'name'
p1156
S'variable'
p1157
sS'required'
p1158
I01
sS'group_name'
p1159
NsasS'name'
p1160
S'/Adaptivity/Markers/ValueRangeMarker'
p1161
sa(dp1162
S'description'
p1163
S'The the refinement state based on a threshold value compared to the specified variable.\n'
p1164
sS'subblocks'
p1165
NsS'parameters'
p1166
(lp1167
(dp1168
S'description'
p1169
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1170
sS'cpp_type'
p1171
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1172
sS'default'
p1173
g3
sS'name'
p1174
S'block'
p1175
sS'required'
p1176
I00
sS'group_name'
p1177
Nsa(dp1178
S'description'
p1179
S'The threshold value for coarsening.  Elements with variable values beyond this will be marked for coarsening.\n'
p1180
sS'cpp_type'
p1181
S'double'
p1182
sS'default'
p1183
g3
sS'name'
p1184
S'coarsen'
p1185
sS'required'
p1186
I00
sS'group_name'
p1187
Nsa(dp1188
S'description'
p1189
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1190
sS'cpp_type'
p1191
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p1192
sS'default'
p1193
g3
sS'name'
p1194
S'control_tags'
p1195
sS'required'
p1196
I00
sS'group_name'
p1197
S'Advanced'
p1198
sa(dp1199
S'description'
p1200
S'Set the enabled status of the MooseObject.\n'
p1201
sS'cpp_type'
p1202
S'bool'
p1203
sS'default'
p1204
S'1'
p1205
sS'name'
p1206
S'enable'
p1207
sS'required'
p1208
I00
sS'group_name'
p1209
S'Advanced'
p1210
sa(dp1211
S'description'
p1212
S"If this is true then values _below_ 'refine' will be refined and _above_ 'coarsen' will be coarsened.\n"
p1213
sS'cpp_type'
p1214
S'bool'
p1215
sS'default'
p1216
S'0'
p1217
sS'name'
p1218
S'invert'
p1219
sS'required'
p1220
I00
sS'group_name'
p1221
Nsa(dp1222
S'description'
p1223
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p1224
sS'cpp_type'
p1225
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p1226
sS'default'
p1227
g3
sS'name'
p1228
S'outputs'
p1229
sS'required'
p1230
I00
sS'group_name'
p1231
S'Advanced'
p1232
sa(dp1233
S'description'
p1234
S'The threshold value for refinement.  Elements with variable values beyond this will be marked for refinement.\n'
p1235
sS'cpp_type'
p1236
S'double'
p1237
sS'default'
p1238
g3
sS'name'
p1239
S'refine'
p1240
sS'required'
p1241
I00
sS'group_name'
p1242
Nsa(dp1243
S'name'
p1244
S'third_state'
p1245
sS'cpp_type'
p1246
S'MooseEnum'
p1247
sS'default'
p1248
S'DONT_MARK'
p1249
sS'description'
p1250
S'The Marker state to apply to values falling in-between the coarsen and refine thresholds.\n'
p1251
sS'required'
p1252
I00
sS'options'
p1253
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p1254
sS'group_name'
p1255
Nsa(dp1256
S'description'
p1257
g3
sS'cpp_type'
p1258
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1259
sS'default'
p1260
S'ValueThresholdMarker'
p1261
sS'name'
p1262
S'type'
p1263
sS'required'
p1264
I00
sS'group_name'
p1265
Nsa(dp1266
S'description'
p1267
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1268
sS'cpp_type'
p1269
S'bool'
p1270
sS'default'
p1271
S'0'
p1272
sS'name'
p1273
S'use_displaced_mesh'
p1274
sS'required'
p1275
I00
sS'group_name'
p1276
S'Advanced'
p1277
sa(dp1278
S'description'
p1279
S"The values of this variable will be compared to 'refine' and 'coarsen' to see what should be done with the element\n"
p1280
sS'cpp_type'
p1281
S'std::vector<VariableName>'
p1282
sS'default'
p1283
g3
sS'name'
p1284
S'variable'
p1285
sS'required'
p1286
I01
sS'group_name'
p1287
NsasS'name'
p1288
S'/Adaptivity/Markers/ValueThresholdMarker'
p1289
sasS'parameters'
p1290
NsS'name'
p1291
S'/Adaptivity/Markers'
p1292
sasS'parameters'
p1293
(lp1294
(dp1295
S'description'
p1296
S'The number of adaptive steps to use when on each timestep during a Transient simulation.\n'
p1297
sS'cpp_type'
p1298
S'unsigned int'
p1299
sS'default'
p1300
S'1'
p1301
sS'name'
p1302
S'cycles_per_step'
p1303
sS'required'
p1304
I00
sS'group_name'
p1305
Nsa(dp1306
S'description'
p1307
S'The name of the Marker to use to adapt the mesh during initial refinement.\n'
p1308
sS'cpp_type'
p1309
S'MarkerName'
p1310
sS'default'
p1311
g3
sS'name'
p1312
S'initial_marker'
p1313
sS'required'
p1314
I00
sS'group_name'
p1315
Nsa(dp1316
S'description'
p1317
S'The number of adaptive steps to do based on the initial condition.\n'
p1318
sS'cpp_type'
p1319
S'unsigned int'
p1320
sS'default'
p1321
S'0'
p1322
sS'name'
p1323
S'initial_steps'
p1324
sS'required'
p1325
I00
sS'group_name'
p1326
Nsa(dp1327
S'description'
p1328
S'The name of the Marker to use to actually adapt the mesh.\n'
p1329
sS'cpp_type'
p1330
S'MarkerName'
p1331
sS'default'
p1332
g3
sS'name'
p1333
S'marker'
p1334
sS'required'
p1335
I00
sS'group_name'
p1336
Nsa(dp1337
S'description'
p1338
S'Maximum number of times a single element can be refined. If 0 then infinite.\n'
p1339
sS'cpp_type'
p1340
S'unsigned int'
p1341
sS'default'
p1342
S'0'
p1343
sS'name'
p1344
S'max_h_level'
p1345
sS'required'
p1346
I00
sS'group_name'
p1347
Nsa(dp1348
S'description'
p1349
S'Recompute markers during adaptivity cycles\n'
p1350
sS'cpp_type'
p1351
S'bool'
p1352
sS'default'
p1353
S'0'
p1354
sS'name'
p1355
S'recompute_markers_during_cycles'
p1356
sS'required'
p1357
I00
sS'group_name'
p1358
Nsa(dp1359
S'description'
p1360
S'The time that adaptivity will be active after.\n'
p1361
sS'cpp_type'
p1362
S'double'
p1363
sS'default'
p1364
S'-1.79769e+308'
p1365
sS'name'
p1366
S'start_time'
p1367
sS'required'
p1368
I00
sS'group_name'
p1369
Nsa(dp1370
S'description'
p1371
S'The number of adaptive steps to use when doing a Steady simulation.\n'
p1372
sS'cpp_type'
p1373
S'unsigned int'
p1374
sS'default'
p1375
S'0'
p1376
sS'name'
p1377
S'steps'
p1378
sS'required'
p1379
I00
sS'group_name'
p1380
Nsa(dp1381
S'description'
p1382
S'The time after which adaptivity will no longer be active.\n'
p1383
sS'cpp_type'
p1384
S'double'
p1385
sS'default'
p1386
S'1.79769e+308'
p1387
sS'name'
p1388
S'stop_time'
p1389
sS'required'
p1390
I00
sS'group_name'
p1391
NsasS'name'
p1392
S'/Adaptivity'
p1393
sa(dp1394
S'description'
p1395
g3
sS'subblocks'
p1396
(lp1397
(dp1398
S'description'
p1399
g3
sS'subblocks'
p1400
NsS'parameters'
p1401
(lp1402
(dp1403
S'description'
p1404
S'A string representing the Moose Object that will be built by this Action\n'
p1405
sS'cpp_type'
p1406
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1407
sS'default'
p1408
g3
sS'name'
p1409
S'type'
p1410
sS'required'
p1411
I01
sS'group_name'
p1412
NsasS'name'
p1413
S'/AuxKernels/*'
p1414
sa(dp1415
S'description'
p1416
g3
sS'subblocks'
p1417
NsS'parameters'
p1418
(lp1419
(dp1420
S'description'
p1421
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1422
sS'cpp_type'
p1423
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1424
sS'default'
p1425
g3
sS'name'
p1426
S'block'
p1427
sS'required'
p1428
I00
sS'group_name'
p1429
Nsa(dp1430
S'description'
p1431
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1432
sS'cpp_type'
p1433
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p1434
sS'default'
p1435
g3
sS'name'
p1436
S'boundary'
p1437
sS'required'
p1438
I00
sS'group_name'
p1439
Nsa(dp1440
S'description'
p1441
S'The variable to be bounded\n'
p1442
sS'cpp_type'
p1443
S'std::vector<VariableName>'
p1444
sS'default'
p1445
g3
sS'name'
p1446
S'bounded_variable'
p1447
sS'required'
p1448
I01
sS'group_name'
p1449
Nsa(dp1450
S'description'
p1451
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1452
sS'cpp_type'
p1453
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p1454
sS'default'
p1455
g3
sS'name'
p1456
S'control_tags'
p1457
sS'required'
p1458
I00
sS'group_name'
p1459
S'Advanced'
p1460
sa(dp1461
S'description'
p1462
S'Set the enabled status of the MooseObject.\n'
p1463
sS'cpp_type'
p1464
S'bool'
p1465
sS'default'
p1466
S'1'
p1467
sS'name'
p1468
S'enable'
p1469
sS'required'
p1470
I00
sS'group_name'
p1471
S'Advanced'
p1472
sa(dp1473
S'name'
p1474
S'execute_on'
p1475
sS'cpp_type'
p1476
S'MultiMooseEnum'
p1477
sS'default'
p1478
S'LINEAR'
p1479
sS'description'
p1480
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1481
sS'required'
p1482
I00
sS'options'
p1483
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1484
sS'group_name'
p1485
Nsa(dp1486
S'description'
p1487
S'The lower bound for the variable\n'
p1488
sS'cpp_type'
p1489
S'double'
p1490
sS'default'
p1491
g3
sS'name'
p1492
S'lower'
p1493
sS'required'
p1494
I00
sS'group_name'
p1495
Nsa(dp1496
S'description'
p1497
S'The seed for the master random number generator\n'
p1498
sS'cpp_type'
p1499
S'unsigned int'
p1500
sS'default'
p1501
S'0'
p1502
sS'name'
p1503
S'seed'
p1504
sS'required'
p1505
I00
sS'group_name'
p1506
S'Advanced'
p1507
sa(dp1508
S'description'
p1509
g3
sS'cpp_type'
p1510
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1511
sS'default'
p1512
S'BoundsAux'
p1513
sS'name'
p1514
S'type'
p1515
sS'required'
p1516
I00
sS'group_name'
p1517
Nsa(dp1518
S'description'
p1519
S'The upper bound for the variable\n'
p1520
sS'cpp_type'
p1521
S'double'
p1522
sS'default'
p1523
g3
sS'name'
p1524
S'upper'
p1525
sS'required'
p1526
I00
sS'group_name'
p1527
Nsa(dp1528
S'description'
p1529
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1530
sS'cpp_type'
p1531
S'bool'
p1532
sS'default'
p1533
S'0'
p1534
sS'name'
p1535
S'use_displaced_mesh'
p1536
sS'required'
p1537
I00
sS'group_name'
p1538
S'Advanced'
p1539
sa(dp1540
S'description'
p1541
S'The name of the variable that this object applies to\n'
p1542
sS'cpp_type'
p1543
S'AuxVariableName'
p1544
sS'default'
p1545
g3
sS'name'
p1546
S'variable'
p1547
sS'required'
p1548
I01
sS'group_name'
p1549
NsasS'name'
p1550
S'/AuxKernels/BoundsAux'
p1551
sa(dp1552
S'description'
p1553
g3
sS'subblocks'
p1554
NsS'parameters'
p1555
(lp1556
(dp1557
S'description'
p1558
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1559
sS'cpp_type'
p1560
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1561
sS'default'
p1562
g3
sS'name'
p1563
S'block'
p1564
sS'required'
p1565
I00
sS'group_name'
p1566
Nsa(dp1567
S'description'
p1568
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1569
sS'cpp_type'
p1570
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p1571
sS'default'
p1572
g3
sS'name'
p1573
S'boundary'
p1574
sS'required'
p1575
I00
sS'group_name'
p1576
Nsa(dp1577
S'description'
p1578
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1579
sS'cpp_type'
p1580
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p1581
sS'default'
p1582
g3
sS'name'
p1583
S'control_tags'
p1584
sS'required'
p1585
I00
sS'group_name'
p1586
S'Advanced'
p1587
sa(dp1588
S'description'
p1589
S'Set the enabled status of the MooseObject.\n'
p1590
sS'cpp_type'
p1591
S'bool'
p1592
sS'default'
p1593
S'1'
p1594
sS'name'
p1595
S'enable'
p1596
sS'required'
p1597
I00
sS'group_name'
p1598
S'Advanced'
p1599
sa(dp1600
S'name'
p1601
S'execute_on'
p1602
sS'cpp_type'
p1603
S'MultiMooseEnum'
p1604
sS'default'
p1605
S'LINEAR'
p1606
sS'description'
p1607
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1608
sS'required'
p1609
I00
sS'options'
p1610
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1611
sS'group_name'
p1612
Nsa(dp1613
S'description'
p1614
S'The seed for the master random number generator\n'
p1615
sS'cpp_type'
p1616
S'unsigned int'
p1617
sS'default'
p1618
S'0'
p1619
sS'name'
p1620
S'seed'
p1621
sS'required'
p1622
I00
sS'group_name'
p1623
S'Advanced'
p1624
sa(dp1625
S'description'
p1626
g3
sS'cpp_type'
p1627
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1628
sS'default'
p1629
S'ConstantAux'
p1630
sS'name'
p1631
S'type'
p1632
sS'required'
p1633
I00
sS'group_name'
p1634
Nsa(dp1635
S'description'
p1636
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1637
sS'cpp_type'
p1638
S'bool'
p1639
sS'default'
p1640
S'0'
p1641
sS'name'
p1642
S'use_displaced_mesh'
p1643
sS'required'
p1644
I00
sS'group_name'
p1645
S'Advanced'
p1646
sa(dp1647
S'description'
p1648
S'Some constant value that can be read from the input file\n'
p1649
sS'cpp_type'
p1650
S'double'
p1651
sS'default'
p1652
S'0'
p1653
sS'name'
p1654
S'value'
p1655
sS'required'
p1656
I00
sS'group_name'
p1657
Nsa(dp1658
S'description'
p1659
S'The name of the variable that this object applies to\n'
p1660
sS'cpp_type'
p1661
S'AuxVariableName'
p1662
sS'default'
p1663
g3
sS'name'
p1664
S'variable'
p1665
sS'required'
p1666
I01
sS'group_name'
p1667
NsasS'name'
p1668
S'/AuxKernels/ConstantAux'
p1669
sa(dp1670
S'description'
p1671
g3
sS'subblocks'
p1672
NsS'parameters'
p1673
(lp1674
(dp1675
S'description'
p1676
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1677
sS'cpp_type'
p1678
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1679
sS'default'
p1680
g3
sS'name'
p1681
S'block'
p1682
sS'required'
p1683
I00
sS'group_name'
p1684
Nsa(dp1685
S'description'
p1686
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1687
sS'cpp_type'
p1688
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p1689
sS'default'
p1690
g3
sS'name'
p1691
S'boundary'
p1692
sS'required'
p1693
I00
sS'group_name'
p1694
Nsa(dp1695
S'description'
p1696
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1697
sS'cpp_type'
p1698
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p1699
sS'default'
p1700
g3
sS'name'
p1701
S'control_tags'
p1702
sS'required'
p1703
I00
sS'group_name'
p1704
S'Advanced'
p1705
sa(dp1706
S'description'
p1707
S'The variable that is being debugged.\n'
p1708
sS'cpp_type'
p1709
S'NonlinearVariableName'
p1710
sS'default'
p1711
g3
sS'name'
p1712
S'debug_variable'
p1713
sS'required'
p1714
I01
sS'group_name'
p1715
Nsa(dp1716
S'description'
p1717
S'Set the enabled status of the MooseObject.\n'
p1718
sS'cpp_type'
p1719
S'bool'
p1720
sS'default'
p1721
S'1'
p1722
sS'name'
p1723
S'enable'
p1724
sS'required'
p1725
I00
sS'group_name'
p1726
S'Advanced'
p1727
sa(dp1728
S'name'
p1729
S'execute_on'
p1730
sS'cpp_type'
p1731
S'MultiMooseEnum'
p1732
sS'default'
p1733
S'LINEAR'
p1734
sS'description'
p1735
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1736
sS'required'
p1737
I00
sS'options'
p1738
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1739
sS'group_name'
p1740
Nsa(dp1741
S'description'
p1742
S'The seed for the master random number generator\n'
p1743
sS'cpp_type'
p1744
S'unsigned int'
p1745
sS'default'
p1746
S'0'
p1747
sS'name'
p1748
S'seed'
p1749
sS'required'
p1750
I00
sS'group_name'
p1751
S'Advanced'
p1752
sa(dp1753
S'description'
p1754
g3
sS'cpp_type'
p1755
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1756
sS'default'
p1757
S'DebugResidualAux'
p1758
sS'name'
p1759
S'type'
p1760
sS'required'
p1761
I00
sS'group_name'
p1762
Nsa(dp1763
S'description'
p1764
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1765
sS'cpp_type'
p1766
S'bool'
p1767
sS'default'
p1768
S'0'
p1769
sS'name'
p1770
S'use_displaced_mesh'
p1771
sS'required'
p1772
I00
sS'group_name'
p1773
S'Advanced'
p1774
sa(dp1775
S'description'
p1776
S'The name of the variable that this object applies to\n'
p1777
sS'cpp_type'
p1778
S'AuxVariableName'
p1779
sS'default'
p1780
g3
sS'name'
p1781
S'variable'
p1782
sS'required'
p1783
I01
sS'group_name'
p1784
NsasS'name'
p1785
S'/AuxKernels/DebugResidualAux'
p1786
sa(dp1787
S'description'
p1788
g3
sS'subblocks'
p1789
NsS'parameters'
p1790
(lp1791
(dp1792
S'description'
p1793
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1794
sS'cpp_type'
p1795
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1796
sS'default'
p1797
g3
sS'name'
p1798
S'block'
p1799
sS'required'
p1800
I00
sS'group_name'
p1801
Nsa(dp1802
S'description'
p1803
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1804
sS'cpp_type'
p1805
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p1806
sS'default'
p1807
g3
sS'name'
p1808
S'boundary'
p1809
sS'required'
p1810
I00
sS'group_name'
p1811
Nsa(dp1812
S'description'
p1813
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1814
sS'cpp_type'
p1815
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p1816
sS'default'
p1817
g3
sS'name'
p1818
S'control_tags'
p1819
sS'required'
p1820
I00
sS'group_name'
p1821
S'Advanced'
p1822
sa(dp1823
S'description'
p1824
S'The variable to compute the norm of.\n'
p1825
sS'cpp_type'
p1826
S'std::vector<VariableName>'
p1827
sS'default'
p1828
g3
sS'name'
p1829
S'coupled_variable'
p1830
sS'required'
p1831
I01
sS'group_name'
p1832
Nsa(dp1833
S'description'
p1834
S'Set the enabled status of the MooseObject.\n'
p1835
sS'cpp_type'
p1836
S'bool'
p1837
sS'default'
p1838
S'1'
p1839
sS'name'
p1840
S'enable'
p1841
sS'required'
p1842
I00
sS'group_name'
p1843
S'Advanced'
p1844
sa(dp1845
S'name'
p1846
S'execute_on'
p1847
sS'cpp_type'
p1848
S'MultiMooseEnum'
p1849
sS'default'
p1850
S'LINEAR'
p1851
sS'description'
p1852
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1853
sS'required'
p1854
I00
sS'options'
p1855
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1856
sS'group_name'
p1857
Nsa(dp1858
S'description'
p1859
S'Function representing the exact solution\n'
p1860
sS'cpp_type'
p1861
S'FunctionName'
p1862
sS'default'
p1863
g3
sS'name'
p1864
S'function'
p1865
sS'required'
p1866
I01
sS'group_name'
p1867
Nsa(dp1868
S'description'
p1869
S'The exponent used in the norm.\n'
p1870
sS'cpp_type'
p1871
S'double'
p1872
sS'default'
p1873
S'2'
p1874
sS'name'
p1875
S'p'
p1876
sS'required'
p1877
I00
sS'group_name'
p1878
Nsa(dp1879
S'description'
p1880
S'The seed for the master random number generator\n'
p1881
sS'cpp_type'
p1882
S'unsigned int'
p1883
sS'default'
p1884
S'0'
p1885
sS'name'
p1886
S'seed'
p1887
sS'required'
p1888
I00
sS'group_name'
p1889
S'Advanced'
p1890
sa(dp1891
S'description'
p1892
g3
sS'cpp_type'
p1893
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1894
sS'default'
p1895
S'ElementH1ErrorFunctionAux'
p1896
sS'name'
p1897
S'type'
p1898
sS'required'
p1899
I00
sS'group_name'
p1900
Nsa(dp1901
S'description'
p1902
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1903
sS'cpp_type'
p1904
S'bool'
p1905
sS'default'
p1906
S'0'
p1907
sS'name'
p1908
S'use_displaced_mesh'
p1909
sS'required'
p1910
I00
sS'group_name'
p1911
S'Advanced'
p1912
sa(dp1913
S'description'
p1914
S'The name of the variable that this object applies to\n'
p1915
sS'cpp_type'
p1916
S'AuxVariableName'
p1917
sS'default'
p1918
g3
sS'name'
p1919
S'variable'
p1920
sS'required'
p1921
I01
sS'group_name'
p1922
NsasS'name'
p1923
S'/AuxKernels/ElementH1ErrorFunctionAux'
p1924
sa(dp1925
S'description'
p1926
g3
sS'subblocks'
p1927
NsS'parameters'
p1928
(lp1929
(dp1930
S'description'
p1931
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1932
sS'cpp_type'
p1933
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1934
sS'default'
p1935
g3
sS'name'
p1936
S'block'
p1937
sS'required'
p1938
I00
sS'group_name'
p1939
Nsa(dp1940
S'description'
p1941
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1942
sS'cpp_type'
p1943
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p1944
sS'default'
p1945
g3
sS'name'
p1946
S'boundary'
p1947
sS'required'
p1948
I00
sS'group_name'
p1949
Nsa(dp1950
S'description'
p1951
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1952
sS'cpp_type'
p1953
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p1954
sS'default'
p1955
g3
sS'name'
p1956
S'control_tags'
p1957
sS'required'
p1958
I00
sS'group_name'
p1959
S'Advanced'
p1960
sa(dp1961
S'description'
p1962
S'The variable to compute the norm of.\n'
p1963
sS'cpp_type'
p1964
S'std::vector<VariableName>'
p1965
sS'default'
p1966
g3
sS'name'
p1967
S'coupled_variable'
p1968
sS'required'
p1969
I01
sS'group_name'
p1970
Nsa(dp1971
S'description'
p1972
S'Set the enabled status of the MooseObject.\n'
p1973
sS'cpp_type'
p1974
S'bool'
p1975
sS'default'
p1976
S'1'
p1977
sS'name'
p1978
S'enable'
p1979
sS'required'
p1980
I00
sS'group_name'
p1981
S'Advanced'
p1982
sa(dp1983
S'name'
p1984
S'execute_on'
p1985
sS'cpp_type'
p1986
S'MultiMooseEnum'
p1987
sS'default'
p1988
S'LINEAR'
p1989
sS'description'
p1990
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1991
sS'required'
p1992
I00
sS'options'
p1993
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1994
sS'group_name'
p1995
Nsa(dp1996
S'description'
p1997
S'Function representing the exact solution\n'
p1998
sS'cpp_type'
p1999
S'FunctionName'
p2000
sS'default'
p2001
g3
sS'name'
p2002
S'function'
p2003
sS'required'
p2004
I01
sS'group_name'
p2005
Nsa(dp2006
S'description'
p2007
S'The exponent used in the norm.\n'
p2008
sS'cpp_type'
p2009
S'double'
p2010
sS'default'
p2011
S'2'
p2012
sS'name'
p2013
S'p'
p2014
sS'required'
p2015
I00
sS'group_name'
p2016
Nsa(dp2017
S'description'
p2018
S'The seed for the master random number generator\n'
p2019
sS'cpp_type'
p2020
S'unsigned int'
p2021
sS'default'
p2022
S'0'
p2023
sS'name'
p2024
S'seed'
p2025
sS'required'
p2026
I00
sS'group_name'
p2027
S'Advanced'
p2028
sa(dp2029
S'description'
p2030
g3
sS'cpp_type'
p2031
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2032
sS'default'
p2033
S'ElementL2ErrorFunctionAux'
p2034
sS'name'
p2035
S'type'
p2036
sS'required'
p2037
I00
sS'group_name'
p2038
Nsa(dp2039
S'description'
p2040
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2041
sS'cpp_type'
p2042
S'bool'
p2043
sS'default'
p2044
S'0'
p2045
sS'name'
p2046
S'use_displaced_mesh'
p2047
sS'required'
p2048
I00
sS'group_name'
p2049
S'Advanced'
p2050
sa(dp2051
S'description'
p2052
S'The name of the variable that this object applies to\n'
p2053
sS'cpp_type'
p2054
S'AuxVariableName'
p2055
sS'default'
p2056
g3
sS'name'
p2057
S'variable'
p2058
sS'required'
p2059
I01
sS'group_name'
p2060
NsasS'name'
p2061
S'/AuxKernels/ElementL2ErrorFunctionAux'
p2062
sa(dp2063
S'description'
p2064
S'Compute the element size using Elem::hmin() or Elem::hmax() from libMesh.\n'
p2065
sS'subblocks'
p2066
NsS'parameters'
p2067
(lp2068
(dp2069
S'description'
p2070
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2071
sS'cpp_type'
p2072
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2073
sS'default'
p2074
g3
sS'name'
p2075
S'block'
p2076
sS'required'
p2077
I00
sS'group_name'
p2078
Nsa(dp2079
S'description'
p2080
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2081
sS'cpp_type'
p2082
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2083
sS'default'
p2084
g3
sS'name'
p2085
S'boundary'
p2086
sS'required'
p2087
I00
sS'group_name'
p2088
Nsa(dp2089
S'description'
p2090
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2091
sS'cpp_type'
p2092
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p2093
sS'default'
p2094
g3
sS'name'
p2095
S'control_tags'
p2096
sS'required'
p2097
I00
sS'group_name'
p2098
S'Advanced'
p2099
sa(dp2100
S'description'
p2101
S'Set the enabled status of the MooseObject.\n'
p2102
sS'cpp_type'
p2103
S'bool'
p2104
sS'default'
p2105
S'1'
p2106
sS'name'
p2107
S'enable'
p2108
sS'required'
p2109
I00
sS'group_name'
p2110
S'Advanced'
p2111
sa(dp2112
S'name'
p2113
S'execute_on'
p2114
sS'cpp_type'
p2115
S'MultiMooseEnum'
p2116
sS'default'
p2117
S'LINEAR'
p2118
sS'description'
p2119
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2120
sS'required'
p2121
I00
sS'options'
p2122
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2123
sS'group_name'
p2124
Nsa(dp2125
S'name'
p2126
S'method'
p2127
sS'cpp_type'
p2128
S'MooseEnum'
p2129
sS'default'
p2130
g3
sS'description'
p2131
S"The size calculation to perform ('min' or 'max').\n"
p2132
sS'required'
p2133
I01
sS'options'
p2134
S'min max'
p2135
sS'group_name'
p2136
Nsa(dp2137
S'description'
p2138
S'The seed for the master random number generator\n'
p2139
sS'cpp_type'
p2140
S'unsigned int'
p2141
sS'default'
p2142
S'0'
p2143
sS'name'
p2144
S'seed'
p2145
sS'required'
p2146
I00
sS'group_name'
p2147
S'Advanced'
p2148
sa(dp2149
S'description'
p2150
g3
sS'cpp_type'
p2151
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2152
sS'default'
p2153
S'ElementLengthAux'
p2154
sS'name'
p2155
S'type'
p2156
sS'required'
p2157
I00
sS'group_name'
p2158
Nsa(dp2159
S'description'
p2160
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2161
sS'cpp_type'
p2162
S'bool'
p2163
sS'default'
p2164
S'0'
p2165
sS'name'
p2166
S'use_displaced_mesh'
p2167
sS'required'
p2168
I00
sS'group_name'
p2169
S'Advanced'
p2170
sa(dp2171
S'description'
p2172
S'The name of the variable that this object applies to\n'
p2173
sS'cpp_type'
p2174
S'AuxVariableName'
p2175
sS'default'
p2176
g3
sS'name'
p2177
S'variable'
p2178
sS'required'
p2179
I01
sS'group_name'
p2180
NsasS'name'
p2181
S'/AuxKernels/ElementLengthAux'
p2182
sa(dp2183
S'description'
p2184
g3
sS'subblocks'
p2185
NsS'parameters'
p2186
(lp2187
(dp2188
S'description'
p2189
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2190
sS'cpp_type'
p2191
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2192
sS'default'
p2193
g3
sS'name'
p2194
S'block'
p2195
sS'required'
p2196
I00
sS'group_name'
p2197
Nsa(dp2198
S'description'
p2199
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2200
sS'cpp_type'
p2201
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2202
sS'default'
p2203
g3
sS'name'
p2204
S'boundary'
p2205
sS'required'
p2206
I00
sS'group_name'
p2207
Nsa(dp2208
S'description'
p2209
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2210
sS'cpp_type'
p2211
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p2212
sS'default'
p2213
g3
sS'name'
p2214
S'control_tags'
p2215
sS'required'
p2216
I00
sS'group_name'
p2217
S'Advanced'
p2218
sa(dp2219
S'description'
p2220
S'The variable to compute the norm of.\n'
p2221
sS'cpp_type'
p2222
S'std::vector<VariableName>'
p2223
sS'default'
p2224
g3
sS'name'
p2225
S'coupled_variable'
p2226
sS'required'
p2227
I01
sS'group_name'
p2228
Nsa(dp2229
S'description'
p2230
S'Set the enabled status of the MooseObject.\n'
p2231
sS'cpp_type'
p2232
S'bool'
p2233
sS'default'
p2234
S'1'
p2235
sS'name'
p2236
S'enable'
p2237
sS'required'
p2238
I00
sS'group_name'
p2239
S'Advanced'
p2240
sa(dp2241
S'name'
p2242
S'execute_on'
p2243
sS'cpp_type'
p2244
S'MultiMooseEnum'
p2245
sS'default'
p2246
S'LINEAR'
p2247
sS'description'
p2248
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2249
sS'required'
p2250
I00
sS'options'
p2251
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2252
sS'group_name'
p2253
Nsa(dp2254
S'description'
p2255
S'The exponent used in the norm.\n'
p2256
sS'cpp_type'
p2257
S'double'
p2258
sS'default'
p2259
S'2'
p2260
sS'name'
p2261
S'p'
p2262
sS'required'
p2263
I00
sS'group_name'
p2264
Nsa(dp2265
S'description'
p2266
S'The seed for the master random number generator\n'
p2267
sS'cpp_type'
p2268
S'unsigned int'
p2269
sS'default'
p2270
S'0'
p2271
sS'name'
p2272
S'seed'
p2273
sS'required'
p2274
I00
sS'group_name'
p2275
S'Advanced'
p2276
sa(dp2277
S'description'
p2278
g3
sS'cpp_type'
p2279
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2280
sS'default'
p2281
S'ElementLpNormAux'
p2282
sS'name'
p2283
S'type'
p2284
sS'required'
p2285
I00
sS'group_name'
p2286
Nsa(dp2287
S'description'
p2288
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2289
sS'cpp_type'
p2290
S'bool'
p2291
sS'default'
p2292
S'0'
p2293
sS'name'
p2294
S'use_displaced_mesh'
p2295
sS'required'
p2296
I00
sS'group_name'
p2297
S'Advanced'
p2298
sa(dp2299
S'description'
p2300
S'The name of the variable that this object applies to\n'
p2301
sS'cpp_type'
p2302
S'AuxVariableName'
p2303
sS'default'
p2304
g3
sS'name'
p2305
S'variable'
p2306
sS'required'
p2307
I01
sS'group_name'
p2308
NsasS'name'
p2309
S'/AuxKernels/ElementLpNormAux'
p2310
sa(dp2311
S'description'
p2312
g3
sS'subblocks'
p2313
NsS'parameters'
p2314
(lp2315
(dp2316
S'description'
p2317
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2318
sS'cpp_type'
p2319
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2320
sS'default'
p2321
g3
sS'name'
p2322
S'block'
p2323
sS'required'
p2324
I00
sS'group_name'
p2325
Nsa(dp2326
S'description'
p2327
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2328
sS'cpp_type'
p2329
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2330
sS'default'
p2331
g3
sS'name'
p2332
S'boundary'
p2333
sS'required'
p2334
I00
sS'group_name'
p2335
Nsa(dp2336
S'description'
p2337
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2338
sS'cpp_type'
p2339
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p2340
sS'default'
p2341
g3
sS'name'
p2342
S'control_tags'
p2343
sS'required'
p2344
I00
sS'group_name'
p2345
S'Advanced'
p2346
sa(dp2347
S'description'
p2348
S'Set the enabled status of the MooseObject.\n'
p2349
sS'cpp_type'
p2350
S'bool'
p2351
sS'default'
p2352
S'1'
p2353
sS'name'
p2354
S'enable'
p2355
sS'required'
p2356
I00
sS'group_name'
p2357
S'Advanced'
p2358
sa(dp2359
S'name'
p2360
S'execute_on'
p2361
sS'cpp_type'
p2362
S'MultiMooseEnum'
p2363
sS'default'
p2364
S'LINEAR'
p2365
sS'description'
p2366
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2367
sS'required'
p2368
I00
sS'options'
p2369
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2370
sS'group_name'
p2371
Nsa(dp2372
S'description'
p2373
S'The function to use as the value\n'
p2374
sS'cpp_type'
p2375
S'FunctionName'
p2376
sS'default'
p2377
g3
sS'name'
p2378
S'function'
p2379
sS'required'
p2380
I01
sS'group_name'
p2381
Nsa(dp2382
S'description'
p2383
S'The seed for the master random number generator\n'
p2384
sS'cpp_type'
p2385
S'unsigned int'
p2386
sS'default'
p2387
S'0'
p2388
sS'name'
p2389
S'seed'
p2390
sS'required'
p2391
I00
sS'group_name'
p2392
S'Advanced'
p2393
sa(dp2394
S'description'
p2395
g3
sS'cpp_type'
p2396
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2397
sS'default'
p2398
S'FunctionAux'
p2399
sS'name'
p2400
S'type'
p2401
sS'required'
p2402
I00
sS'group_name'
p2403
Nsa(dp2404
S'description'
p2405
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2406
sS'cpp_type'
p2407
S'bool'
p2408
sS'default'
p2409
S'0'
p2410
sS'name'
p2411
S'use_displaced_mesh'
p2412
sS'required'
p2413
I00
sS'group_name'
p2414
S'Advanced'
p2415
sa(dp2416
S'description'
p2417
S'The name of the variable that this object applies to\n'
p2418
sS'cpp_type'
p2419
S'AuxVariableName'
p2420
sS'default'
p2421
g3
sS'name'
p2422
S'variable'
p2423
sS'required'
p2424
I01
sS'group_name'
p2425
NsasS'name'
p2426
S'/AuxKernels/FunctionAux'
p2427
sa(dp2428
S'description'
p2429
g3
sS'subblocks'
p2430
NsS'parameters'
p2431
(lp2432
(dp2433
S'description'
p2434
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2435
sS'cpp_type'
p2436
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2437
sS'default'
p2438
g3
sS'name'
p2439
S'block'
p2440
sS'required'
p2441
I00
sS'group_name'
p2442
Nsa(dp2443
S'description'
p2444
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2445
sS'cpp_type'
p2446
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2447
sS'default'
p2448
g3
sS'name'
p2449
S'boundary'
p2450
sS'required'
p2451
I00
sS'group_name'
p2452
Nsa(dp2453
S'description'
p2454
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2455
sS'cpp_type'
p2456
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p2457
sS'default'
p2458
g3
sS'name'
p2459
S'control_tags'
p2460
sS'required'
p2461
I00
sS'group_name'
p2462
S'Advanced'
p2463
sa(dp2464
S'description'
p2465
S'Set the enabled status of the MooseObject.\n'
p2466
sS'cpp_type'
p2467
S'bool'
p2468
sS'default'
p2469
S'1'
p2470
sS'name'
p2471
S'enable'
p2472
sS'required'
p2473
I00
sS'group_name'
p2474
S'Advanced'
p2475
sa(dp2476
S'name'
p2477
S'execute_on'
p2478
sS'cpp_type'
p2479
S'MultiMooseEnum'
p2480
sS'default'
p2481
S'LINEAR'
p2482
sS'description'
p2483
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2484
sS'required'
p2485
I00
sS'options'
p2486
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2487
sS'group_name'
p2488
Nsa(dp2489
S'description'
p2490
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p2491
sS'cpp_type'
p2492
S'double'
p2493
sS'default'
p2494
g3
sS'name'
p2495
S'normal_smoothing_distance'
p2496
sS'required'
p2497
I00
sS'group_name'
p2498
Nsa(dp2499
S'description'
p2500
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p2501
sS'cpp_type'
p2502
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2503
sS'default'
p2504
g3
sS'name'
p2505
S'normal_smoothing_method'
p2506
sS'required'
p2507
I00
sS'group_name'
p2508
Nsa(dp2509
S'name'
p2510
S'order'
p2511
sS'cpp_type'
p2512
S'MooseEnum'
p2513
sS'default'
p2514
S'FIRST'
p2515
sS'description'
p2516
S'The finite element order\n'
p2517
sS'required'
p2518
I00
sS'options'
p2519
S'FIRST SECOND THIRD FOURTH'
p2520
sS'group_name'
p2521
Nsa(dp2522
S'description'
p2523
S'The boundary on the other side of a gap.\n'
p2524
sS'cpp_type'
p2525
S'BoundaryName'
p2526
sS'default'
p2527
g3
sS'name'
p2528
S'paired_boundary'
p2529
sS'required'
p2530
I01
sS'group_name'
p2531
Nsa(dp2532
S'description'
p2533
S'The variable to get the value of.\n'
p2534
sS'cpp_type'
p2535
S'VariableName'
p2536
sS'default'
p2537
g3
sS'name'
p2538
S'paired_variable'
p2539
sS'required'
p2540
I01
sS'group_name'
p2541
Nsa(dp2542
S'description'
p2543
S'The seed for the master random number generator\n'
p2544
sS'cpp_type'
p2545
S'unsigned int'
p2546
sS'default'
p2547
S'0'
p2548
sS'name'
p2549
S'seed'
p2550
sS'required'
p2551
I00
sS'group_name'
p2552
S'Advanced'
p2553
sa(dp2554
S'description'
p2555
S'Tangential distance to extend edges of contact surfaces\n'
p2556
sS'cpp_type'
p2557
S'double'
p2558
sS'default'
p2559
g3
sS'name'
p2560
S'tangential_tolerance'
p2561
sS'required'
p2562
I00
sS'group_name'
p2563
Nsa(dp2564
S'description'
p2565
g3
sS'cpp_type'
p2566
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2567
sS'default'
p2568
S'GapValueAux'
p2569
sS'name'
p2570
S'type'
p2571
sS'required'
p2572
I00
sS'group_name'
p2573
Nsa(dp2574
S'description'
p2575
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2576
sS'cpp_type'
p2577
S'bool'
p2578
sS'default'
p2579
S'1'
p2580
sS'name'
p2581
S'use_displaced_mesh'
p2582
sS'required'
p2583
I00
sS'group_name'
p2584
S'Advanced'
p2585
sa(dp2586
S'description'
p2587
S'The name of the variable that this object applies to\n'
p2588
sS'cpp_type'
p2589
S'AuxVariableName'
p2590
sS'default'
p2591
g3
sS'name'
p2592
S'variable'
p2593
sS'required'
p2594
I01
sS'group_name'
p2595
Nsa(dp2596
S'description'
p2597
S'Whether to output warning messages concerning nodes not being found\n'
p2598
sS'cpp_type'
p2599
S'bool'
p2600
sS'default'
p2601
S'0'
p2602
sS'name'
p2603
S'warnings'
p2604
sS'required'
p2605
I00
sS'group_name'
p2606
NsasS'name'
p2607
S'/AuxKernels/GapValueAux'
p2608
sa(dp2609
S'description'
p2610
g3
sS'subblocks'
p2611
NsS'parameters'
p2612
(lp2613
(dp2614
S'description'
p2615
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2616
sS'cpp_type'
p2617
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2618
sS'default'
p2619
g3
sS'name'
p2620
S'block'
p2621
sS'required'
p2622
I00
sS'group_name'
p2623
Nsa(dp2624
S'description'
p2625
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2626
sS'cpp_type'
p2627
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2628
sS'default'
p2629
g3
sS'name'
p2630
S'boundary'
p2631
sS'required'
p2632
I00
sS'group_name'
p2633
Nsa(dp2634
S'description'
p2635
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2636
sS'cpp_type'
p2637
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p2638
sS'default'
p2639
g3
sS'name'
p2640
S'control_tags'
p2641
sS'required'
p2642
I00
sS'group_name'
p2643
S'Advanced'
p2644
sa(dp2645
S'description'
p2646
S'Set the enabled status of the MooseObject.\n'
p2647
sS'cpp_type'
p2648
S'bool'
p2649
sS'default'
p2650
S'1'
p2651
sS'name'
p2652
S'enable'
p2653
sS'required'
p2654
I00
sS'group_name'
p2655
S'Advanced'
p2656
sa(dp2657
S'name'
p2658
S'execute_on'
p2659
sS'cpp_type'
p2660
S'MultiMooseEnum'
p2661
sS'default'
p2662
S'LINEAR'
p2663
sS'description'
p2664
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2665
sS'required'
p2666
I00
sS'options'
p2667
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2668
sS'group_name'
p2669
Nsa(dp2670
S'description'
p2671
S'The factor by which to multiply your material property for visualization\n'
p2672
sS'cpp_type'
p2673
S'double'
p2674
sS'default'
p2675
S'1'
p2676
sS'name'
p2677
S'factor'
p2678
sS'required'
p2679
I00
sS'group_name'
p2680
Nsa(dp2681
S'description'
p2682
S'The offset to add to your material property for visualization\n'
p2683
sS'cpp_type'
p2684
S'double'
p2685
sS'default'
p2686
S'0'
p2687
sS'name'
p2688
S'offset'
p2689
sS'required'
p2690
I00
sS'group_name'
p2691
Nsa(dp2692
S'description'
p2693
S'The scalar material property name\n'
p2694
sS'cpp_type'
p2695
S'MaterialPropertyName'
p2696
sS'default'
p2697
g3
sS'name'
p2698
S'property'
p2699
sS'required'
p2700
I01
sS'group_name'
p2701
Nsa(dp2702
S'description'
p2703
S'The seed for the master random number generator\n'
p2704
sS'cpp_type'
p2705
S'unsigned int'
p2706
sS'default'
p2707
S'0'
p2708
sS'name'
p2709
S'seed'
p2710
sS'required'
p2711
I00
sS'group_name'
p2712
S'Advanced'
p2713
sa(dp2714
S'description'
p2715
g3
sS'cpp_type'
p2716
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2717
sS'default'
p2718
S'MaterialRealAux'
p2719
sS'name'
p2720
S'type'
p2721
sS'required'
p2722
I00
sS'group_name'
p2723
Nsa(dp2724
S'description'
p2725
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2726
sS'cpp_type'
p2727
S'bool'
p2728
sS'default'
p2729
S'0'
p2730
sS'name'
p2731
S'use_displaced_mesh'
p2732
sS'required'
p2733
I00
sS'group_name'
p2734
S'Advanced'
p2735
sa(dp2736
S'description'
p2737
S'The name of the variable that this object applies to\n'
p2738
sS'cpp_type'
p2739
S'AuxVariableName'
p2740
sS'default'
p2741
g3
sS'name'
p2742
S'variable'
p2743
sS'required'
p2744
I01
sS'group_name'
p2745
NsasS'name'
p2746
S'/AuxKernels/MaterialRealAux'
p2747
sa(dp2748
S'description'
p2749
g3
sS'subblocks'
p2750
NsS'parameters'
p2751
(lp2752
(dp2753
S'description'
p2754
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2755
sS'cpp_type'
p2756
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2757
sS'default'
p2758
g3
sS'name'
p2759
S'block'
p2760
sS'required'
p2761
I00
sS'group_name'
p2762
Nsa(dp2763
S'description'
p2764
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2765
sS'cpp_type'
p2766
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2767
sS'default'
p2768
g3
sS'name'
p2769
S'boundary'
p2770
sS'required'
p2771
I00
sS'group_name'
p2772
Nsa(dp2773
S'description'
p2774
S'The column component to consider for this kernel\n'
p2775
sS'cpp_type'
p2776
S'unsigned int'
p2777
sS'default'
p2778
S'0'
p2779
sS'name'
p2780
S'column'
p2781
sS'required'
p2782
I00
sS'group_name'
p2783
Nsa(dp2784
S'description'
p2785
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2786
sS'cpp_type'
p2787
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p2788
sS'default'
p2789
g3
sS'name'
p2790
S'control_tags'
p2791
sS'required'
p2792
I00
sS'group_name'
p2793
S'Advanced'
p2794
sa(dp2795
S'description'
p2796
S'Set the enabled status of the MooseObject.\n'
p2797
sS'cpp_type'
p2798
S'bool'
p2799
sS'default'
p2800
S'1'
p2801
sS'name'
p2802
S'enable'
p2803
sS'required'
p2804
I00
sS'group_name'
p2805
S'Advanced'
p2806
sa(dp2807
S'name'
p2808
S'execute_on'
p2809
sS'cpp_type'
p2810
S'MultiMooseEnum'
p2811
sS'default'
p2812
S'LINEAR'
p2813
sS'description'
p2814
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2815
sS'required'
p2816
I00
sS'options'
p2817
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2818
sS'group_name'
p2819
Nsa(dp2820
S'description'
p2821
S'The factor by which to multiply your material property for visualization\n'
p2822
sS'cpp_type'
p2823
S'double'
p2824
sS'default'
p2825
S'1'
p2826
sS'name'
p2827
S'factor'
p2828
sS'required'
p2829
I00
sS'group_name'
p2830
Nsa(dp2831
S'description'
p2832
S'The offset to add to your material property for visualization\n'
p2833
sS'cpp_type'
p2834
S'double'
p2835
sS'default'
p2836
S'0'
p2837
sS'name'
p2838
S'offset'
p2839
sS'required'
p2840
I00
sS'group_name'
p2841
Nsa(dp2842
S'description'
p2843
S'The scalar material property name\n'
p2844
sS'cpp_type'
p2845
S'MaterialPropertyName'
p2846
sS'default'
p2847
g3
sS'name'
p2848
S'property'
p2849
sS'required'
p2850
I01
sS'group_name'
p2851
Nsa(dp2852
S'description'
p2853
S'The row component to consider for this kernel\n'
p2854
sS'cpp_type'
p2855
S'unsigned int'
p2856
sS'default'
p2857
S'0'
p2858
sS'name'
p2859
S'row'
p2860
sS'required'
p2861
I00
sS'group_name'
p2862
Nsa(dp2863
S'description'
p2864
S'The seed for the master random number generator\n'
p2865
sS'cpp_type'
p2866
S'unsigned int'
p2867
sS'default'
p2868
S'0'
p2869
sS'name'
p2870
S'seed'
p2871
sS'required'
p2872
I00
sS'group_name'
p2873
S'Advanced'
p2874
sa(dp2875
S'description'
p2876
g3
sS'cpp_type'
p2877
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2878
sS'default'
p2879
S'MaterialRealDenseMatrixAux'
p2880
sS'name'
p2881
S'type'
p2882
sS'required'
p2883
I00
sS'group_name'
p2884
Nsa(dp2885
S'description'
p2886
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2887
sS'cpp_type'
p2888
S'bool'
p2889
sS'default'
p2890
S'0'
p2891
sS'name'
p2892
S'use_displaced_mesh'
p2893
sS'required'
p2894
I00
sS'group_name'
p2895
S'Advanced'
p2896
sa(dp2897
S'description'
p2898
S'The name of the variable that this object applies to\n'
p2899
sS'cpp_type'
p2900
S'AuxVariableName'
p2901
sS'default'
p2902
g3
sS'name'
p2903
S'variable'
p2904
sS'required'
p2905
I01
sS'group_name'
p2906
NsasS'name'
p2907
S'/AuxKernels/MaterialRealDenseMatrixAux'
p2908
sa(dp2909
S'description'
p2910
g3
sS'subblocks'
p2911
NsS'parameters'
p2912
(lp2913
(dp2914
S'description'
p2915
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2916
sS'cpp_type'
p2917
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2918
sS'default'
p2919
g3
sS'name'
p2920
S'block'
p2921
sS'required'
p2922
I00
sS'group_name'
p2923
Nsa(dp2924
S'description'
p2925
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2926
sS'cpp_type'
p2927
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2928
sS'default'
p2929
g3
sS'name'
p2930
S'boundary'
p2931
sS'required'
p2932
I00
sS'group_name'
p2933
Nsa(dp2934
S'description'
p2935
S'The column component to consider for this kernel\n'
p2936
sS'cpp_type'
p2937
S'unsigned int'
p2938
sS'default'
p2939
S'0'
p2940
sS'name'
p2941
S'column'
p2942
sS'required'
p2943
I00
sS'group_name'
p2944
Nsa(dp2945
S'description'
p2946
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2947
sS'cpp_type'
p2948
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p2949
sS'default'
p2950
g3
sS'name'
p2951
S'control_tags'
p2952
sS'required'
p2953
I00
sS'group_name'
p2954
S'Advanced'
p2955
sa(dp2956
S'description'
p2957
S'Set the enabled status of the MooseObject.\n'
p2958
sS'cpp_type'
p2959
S'bool'
p2960
sS'default'
p2961
S'1'
p2962
sS'name'
p2963
S'enable'
p2964
sS'required'
p2965
I00
sS'group_name'
p2966
S'Advanced'
p2967
sa(dp2968
S'name'
p2969
S'execute_on'
p2970
sS'cpp_type'
p2971
S'MultiMooseEnum'
p2972
sS'default'
p2973
S'LINEAR'
p2974
sS'description'
p2975
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2976
sS'required'
p2977
I00
sS'options'
p2978
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2979
sS'group_name'
p2980
Nsa(dp2981
S'description'
p2982
S'The factor by which to multiply your material property for visualization\n'
p2983
sS'cpp_type'
p2984
S'double'
p2985
sS'default'
p2986
S'1'
p2987
sS'name'
p2988
S'factor'
p2989
sS'required'
p2990
I00
sS'group_name'
p2991
Nsa(dp2992
S'description'
p2993
S'The offset to add to your material property for visualization\n'
p2994
sS'cpp_type'
p2995
S'double'
p2996
sS'default'
p2997
S'0'
p2998
sS'name'
p2999
S'offset'
p3000
sS'required'
p3001
I00
sS'group_name'
p3002
Nsa(dp3003
S'description'
p3004
S'The scalar material property name\n'
p3005
sS'cpp_type'
p3006
S'MaterialPropertyName'
p3007
sS'default'
p3008
g3
sS'name'
p3009
S'property'
p3010
sS'required'
p3011
I01
sS'group_name'
p3012
Nsa(dp3013
S'description'
p3014
S'The row component to consider for this kernel\n'
p3015
sS'cpp_type'
p3016
S'unsigned int'
p3017
sS'default'
p3018
S'0'
p3019
sS'name'
p3020
S'row'
p3021
sS'required'
p3022
I00
sS'group_name'
p3023
Nsa(dp3024
S'description'
p3025
S'The seed for the master random number generator\n'
p3026
sS'cpp_type'
p3027
S'unsigned int'
p3028
sS'default'
p3029
S'0'
p3030
sS'name'
p3031
S'seed'
p3032
sS'required'
p3033
I00
sS'group_name'
p3034
S'Advanced'
p3035
sa(dp3036
S'description'
p3037
g3
sS'cpp_type'
p3038
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3039
sS'default'
p3040
S'MaterialRealTensorValueAux'
p3041
sS'name'
p3042
S'type'
p3043
sS'required'
p3044
I00
sS'group_name'
p3045
Nsa(dp3046
S'description'
p3047
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3048
sS'cpp_type'
p3049
S'bool'
p3050
sS'default'
p3051
S'0'
p3052
sS'name'
p3053
S'use_displaced_mesh'
p3054
sS'required'
p3055
I00
sS'group_name'
p3056
S'Advanced'
p3057
sa(dp3058
S'description'
p3059
S'The name of the variable that this object applies to\n'
p3060
sS'cpp_type'
p3061
S'AuxVariableName'
p3062
sS'default'
p3063
g3
sS'name'
p3064
S'variable'
p3065
sS'required'
p3066
I01
sS'group_name'
p3067
NsasS'name'
p3068
S'/AuxKernels/MaterialRealTensorValueAux'
p3069
sa(dp3070
S'description'
p3071
g3
sS'subblocks'
p3072
NsS'parameters'
p3073
(lp3074
(dp3075
S'description'
p3076
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3077
sS'cpp_type'
p3078
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3079
sS'default'
p3080
g3
sS'name'
p3081
S'block'
p3082
sS'required'
p3083
I00
sS'group_name'
p3084
Nsa(dp3085
S'description'
p3086
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3087
sS'cpp_type'
p3088
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3089
sS'default'
p3090
g3
sS'name'
p3091
S'boundary'
p3092
sS'required'
p3093
I00
sS'group_name'
p3094
Nsa(dp3095
S'description'
p3096
S'The vector component to consider for this kernel\n'
p3097
sS'cpp_type'
p3098
S'unsigned int'
p3099
sS'default'
p3100
S'0'
p3101
sS'name'
p3102
S'component'
p3103
sS'required'
p3104
I00
sS'group_name'
p3105
Nsa(dp3106
S'description'
p3107
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3108
sS'cpp_type'
p3109
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3110
sS'default'
p3111
g3
sS'name'
p3112
S'control_tags'
p3113
sS'required'
p3114
I00
sS'group_name'
p3115
S'Advanced'
p3116
sa(dp3117
S'description'
p3118
S'Set the enabled status of the MooseObject.\n'
p3119
sS'cpp_type'
p3120
S'bool'
p3121
sS'default'
p3122
S'1'
p3123
sS'name'
p3124
S'enable'
p3125
sS'required'
p3126
I00
sS'group_name'
p3127
S'Advanced'
p3128
sa(dp3129
S'name'
p3130
S'execute_on'
p3131
sS'cpp_type'
p3132
S'MultiMooseEnum'
p3133
sS'default'
p3134
S'LINEAR'
p3135
sS'description'
p3136
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3137
sS'required'
p3138
I00
sS'options'
p3139
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3140
sS'group_name'
p3141
Nsa(dp3142
S'description'
p3143
S'The factor by which to multiply your material property for visualization\n'
p3144
sS'cpp_type'
p3145
S'double'
p3146
sS'default'
p3147
S'1'
p3148
sS'name'
p3149
S'factor'
p3150
sS'required'
p3151
I00
sS'group_name'
p3152
Nsa(dp3153
S'description'
p3154
S'The offset to add to your material property for visualization\n'
p3155
sS'cpp_type'
p3156
S'double'
p3157
sS'default'
p3158
S'0'
p3159
sS'name'
p3160
S'offset'
p3161
sS'required'
p3162
I00
sS'group_name'
p3163
Nsa(dp3164
S'description'
p3165
S'The scalar material property name\n'
p3166
sS'cpp_type'
p3167
S'MaterialPropertyName'
p3168
sS'default'
p3169
g3
sS'name'
p3170
S'property'
p3171
sS'required'
p3172
I01
sS'group_name'
p3173
Nsa(dp3174
S'description'
p3175
S'The seed for the master random number generator\n'
p3176
sS'cpp_type'
p3177
S'unsigned int'
p3178
sS'default'
p3179
S'0'
p3180
sS'name'
p3181
S'seed'
p3182
sS'required'
p3183
I00
sS'group_name'
p3184
S'Advanced'
p3185
sa(dp3186
S'description'
p3187
g3
sS'cpp_type'
p3188
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3189
sS'default'
p3190
S'MaterialRealVectorValueAux'
p3191
sS'name'
p3192
S'type'
p3193
sS'required'
p3194
I00
sS'group_name'
p3195
Nsa(dp3196
S'description'
p3197
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3198
sS'cpp_type'
p3199
S'bool'
p3200
sS'default'
p3201
S'0'
p3202
sS'name'
p3203
S'use_displaced_mesh'
p3204
sS'required'
p3205
I00
sS'group_name'
p3206
S'Advanced'
p3207
sa(dp3208
S'description'
p3209
S'The name of the variable that this object applies to\n'
p3210
sS'cpp_type'
p3211
S'AuxVariableName'
p3212
sS'default'
p3213
g3
sS'name'
p3214
S'variable'
p3215
sS'required'
p3216
I01
sS'group_name'
p3217
NsasS'name'
p3218
S'/AuxKernels/MaterialRealVectorValueAux'
p3219
sa(dp3220
S'description'
p3221
S'Extracts a component of a material type std::vector<Real> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n'
p3222
sS'subblocks'
p3223
NsS'parameters'
p3224
(lp3225
(dp3226
S'description'
p3227
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3228
sS'cpp_type'
p3229
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3230
sS'default'
p3231
g3
sS'name'
p3232
S'block'
p3233
sS'required'
p3234
I00
sS'group_name'
p3235
Nsa(dp3236
S'description'
p3237
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3238
sS'cpp_type'
p3239
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3240
sS'default'
p3241
g3
sS'name'
p3242
S'boundary'
p3243
sS'required'
p3244
I00
sS'group_name'
p3245
Nsa(dp3246
S'description'
p3247
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3248
sS'cpp_type'
p3249
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3250
sS'default'
p3251
g3
sS'name'
p3252
S'control_tags'
p3253
sS'required'
p3254
I00
sS'group_name'
p3255
S'Advanced'
p3256
sa(dp3257
S'description'
p3258
S'Set the enabled status of the MooseObject.\n'
p3259
sS'cpp_type'
p3260
S'bool'
p3261
sS'default'
p3262
S'1'
p3263
sS'name'
p3264
S'enable'
p3265
sS'required'
p3266
I00
sS'group_name'
p3267
S'Advanced'
p3268
sa(dp3269
S'name'
p3270
S'execute_on'
p3271
sS'cpp_type'
p3272
S'MultiMooseEnum'
p3273
sS'default'
p3274
S'LINEAR'
p3275
sS'description'
p3276
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3277
sS'required'
p3278
I00
sS'options'
p3279
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3280
sS'group_name'
p3281
Nsa(dp3282
S'description'
p3283
S'The factor by which to multiply your material property for visualization\n'
p3284
sS'cpp_type'
p3285
S'double'
p3286
sS'default'
p3287
S'1'
p3288
sS'name'
p3289
S'factor'
p3290
sS'required'
p3291
I00
sS'group_name'
p3292
Nsa(dp3293
S'description'
p3294
S'The index to consider for this kernel\n'
p3295
sS'cpp_type'
p3296
S'unsigned int'
p3297
sS'default'
p3298
S'0'
p3299
sS'name'
p3300
S'index'
p3301
sS'required'
p3302
I00
sS'group_name'
p3303
Nsa(dp3304
S'description'
p3305
S'The offset to add to your material property for visualization\n'
p3306
sS'cpp_type'
p3307
S'double'
p3308
sS'default'
p3309
S'0'
p3310
sS'name'
p3311
S'offset'
p3312
sS'required'
p3313
I00
sS'group_name'
p3314
Nsa(dp3315
S'description'
p3316
S'The scalar material property name\n'
p3317
sS'cpp_type'
p3318
S'MaterialPropertyName'
p3319
sS'default'
p3320
g3
sS'name'
p3321
S'property'
p3322
sS'required'
p3323
I01
sS'group_name'
p3324
Nsa(dp3325
S'description'
p3326
S'The seed for the master random number generator\n'
p3327
sS'cpp_type'
p3328
S'unsigned int'
p3329
sS'default'
p3330
S'0'
p3331
sS'name'
p3332
S'seed'
p3333
sS'required'
p3334
I00
sS'group_name'
p3335
S'Advanced'
p3336
sa(dp3337
S'description'
p3338
S'Evaluate the std::vector<Real> at this quadpoint.  This only needs to be used if you are interested in a particular quadpoint in each element: otherwise do not include this parameter in your input file\n'
p3339
sS'cpp_type'
p3340
S'unsigned int'
p3341
sS'default'
p3342
g3
sS'name'
p3343
S'selected_qp'
p3344
sS'required'
p3345
I00
sS'group_name'
p3346
S'Advanced'
p3347
sa(dp3348
S'description'
p3349
g3
sS'cpp_type'
p3350
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3351
sS'default'
p3352
S'MaterialStdVectorAux'
p3353
sS'name'
p3354
S'type'
p3355
sS'required'
p3356
I00
sS'group_name'
p3357
Nsa(dp3358
S'description'
p3359
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3360
sS'cpp_type'
p3361
S'bool'
p3362
sS'default'
p3363
S'0'
p3364
sS'name'
p3365
S'use_displaced_mesh'
p3366
sS'required'
p3367
I00
sS'group_name'
p3368
S'Advanced'
p3369
sa(dp3370
S'description'
p3371
S'The name of the variable that this object applies to\n'
p3372
sS'cpp_type'
p3373
S'AuxVariableName'
p3374
sS'default'
p3375
g3
sS'name'
p3376
S'variable'
p3377
sS'required'
p3378
I01
sS'group_name'
p3379
NsasS'name'
p3380
S'/AuxKernels/MaterialStdVectorAux'
p3381
sa(dp3382
S'description'
p3383
S"Extracts a component of a material's std::vector<RealGradient> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n"
p3384
sS'subblocks'
p3385
NsS'parameters'
p3386
(lp3387
(dp3388
S'description'
p3389
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3390
sS'cpp_type'
p3391
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3392
sS'default'
p3393
g3
sS'name'
p3394
S'block'
p3395
sS'required'
p3396
I00
sS'group_name'
p3397
Nsa(dp3398
S'description'
p3399
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3400
sS'cpp_type'
p3401
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3402
sS'default'
p3403
g3
sS'name'
p3404
S'boundary'
p3405
sS'required'
p3406
I00
sS'group_name'
p3407
Nsa(dp3408
S'description'
p3409
S'The gradient component to be extracted for this kernel\n'
p3410
sS'cpp_type'
p3411
S'unsigned int'
p3412
sS'default'
p3413
S'0'
p3414
sS'name'
p3415
S'component'
p3416
sS'required'
p3417
I00
sS'group_name'
p3418
Nsa(dp3419
S'description'
p3420
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3421
sS'cpp_type'
p3422
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3423
sS'default'
p3424
g3
sS'name'
p3425
S'control_tags'
p3426
sS'required'
p3427
I00
sS'group_name'
p3428
S'Advanced'
p3429
sa(dp3430
S'description'
p3431
S'Set the enabled status of the MooseObject.\n'
p3432
sS'cpp_type'
p3433
S'bool'
p3434
sS'default'
p3435
S'1'
p3436
sS'name'
p3437
S'enable'
p3438
sS'required'
p3439
I00
sS'group_name'
p3440
S'Advanced'
p3441
sa(dp3442
S'name'
p3443
S'execute_on'
p3444
sS'cpp_type'
p3445
S'MultiMooseEnum'
p3446
sS'default'
p3447
S'LINEAR'
p3448
sS'description'
p3449
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3450
sS'required'
p3451
I00
sS'options'
p3452
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3453
sS'group_name'
p3454
Nsa(dp3455
S'description'
p3456
S'The factor by which to multiply your material property for visualization\n'
p3457
sS'cpp_type'
p3458
S'double'
p3459
sS'default'
p3460
S'1'
p3461
sS'name'
p3462
S'factor'
p3463
sS'required'
p3464
I00
sS'group_name'
p3465
Nsa(dp3466
S'description'
p3467
S'The index to consider for this kernel\n'
p3468
sS'cpp_type'
p3469
S'unsigned int'
p3470
sS'default'
p3471
S'0'
p3472
sS'name'
p3473
S'index'
p3474
sS'required'
p3475
I00
sS'group_name'
p3476
Nsa(dp3477
S'description'
p3478
S'The offset to add to your material property for visualization\n'
p3479
sS'cpp_type'
p3480
S'double'
p3481
sS'default'
p3482
S'0'
p3483
sS'name'
p3484
S'offset'
p3485
sS'required'
p3486
I00
sS'group_name'
p3487
Nsa(dp3488
S'description'
p3489
S'The scalar material property name\n'
p3490
sS'cpp_type'
p3491
S'MaterialPropertyName'
p3492
sS'default'
p3493
g3
sS'name'
p3494
S'property'
p3495
sS'required'
p3496
I01
sS'group_name'
p3497
Nsa(dp3498
S'description'
p3499
S'The seed for the master random number generator\n'
p3500
sS'cpp_type'
p3501
S'unsigned int'
p3502
sS'default'
p3503
S'0'
p3504
sS'name'
p3505
S'seed'
p3506
sS'required'
p3507
I00
sS'group_name'
p3508
S'Advanced'
p3509
sa(dp3510
S'description'
p3511
g3
sS'cpp_type'
p3512
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3513
sS'default'
p3514
S'MaterialStdVectorRealGradientAux'
p3515
sS'name'
p3516
S'type'
p3517
sS'required'
p3518
I00
sS'group_name'
p3519
Nsa(dp3520
S'description'
p3521
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3522
sS'cpp_type'
p3523
S'bool'
p3524
sS'default'
p3525
S'0'
p3526
sS'name'
p3527
S'use_displaced_mesh'
p3528
sS'required'
p3529
I00
sS'group_name'
p3530
S'Advanced'
p3531
sa(dp3532
S'description'
p3533
S'The name of the variable that this object applies to\n'
p3534
sS'cpp_type'
p3535
S'AuxVariableName'
p3536
sS'default'
p3537
g3
sS'name'
p3538
S'variable'
p3539
sS'required'
p3540
I01
sS'group_name'
p3541
NsasS'name'
p3542
S'/AuxKernels/MaterialStdVectorRealGradientAux'
p3543
sa(dp3544
S'description'
p3545
g3
sS'subblocks'
p3546
NsS'parameters'
p3547
(lp3548
(dp3549
S'description'
p3550
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3551
sS'cpp_type'
p3552
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3553
sS'default'
p3554
g3
sS'name'
p3555
S'block'
p3556
sS'required'
p3557
I00
sS'group_name'
p3558
Nsa(dp3559
S'description'
p3560
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3561
sS'cpp_type'
p3562
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3563
sS'default'
p3564
g3
sS'name'
p3565
S'boundary'
p3566
sS'required'
p3567
I00
sS'group_name'
p3568
Nsa(dp3569
S'description'
p3570
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3571
sS'cpp_type'
p3572
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3573
sS'default'
p3574
g3
sS'name'
p3575
S'control_tags'
p3576
sS'required'
p3577
I00
sS'group_name'
p3578
S'Advanced'
p3579
sa(dp3580
S'description'
p3581
S'Set the enabled status of the MooseObject.\n'
p3582
sS'cpp_type'
p3583
S'bool'
p3584
sS'default'
p3585
S'1'
p3586
sS'name'
p3587
S'enable'
p3588
sS'required'
p3589
I00
sS'group_name'
p3590
S'Advanced'
p3591
sa(dp3592
S'name'
p3593
S'execute_on'
p3594
sS'cpp_type'
p3595
S'MultiMooseEnum'
p3596
sS'default'
p3597
S'LINEAR'
p3598
sS'description'
p3599
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3600
sS'required'
p3601
I00
sS'options'
p3602
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3603
sS'group_name'
p3604
Nsa(dp3605
S'description'
p3606
S'The boundary to find the distance to.\n'
p3607
sS'cpp_type'
p3608
S'BoundaryName'
p3609
sS'default'
p3610
g3
sS'name'
p3611
S'paired_boundary'
p3612
sS'required'
p3613
I01
sS'group_name'
p3614
Nsa(dp3615
S'description'
p3616
S'The seed for the master random number generator\n'
p3617
sS'cpp_type'
p3618
S'unsigned int'
p3619
sS'default'
p3620
S'0'
p3621
sS'name'
p3622
S'seed'
p3623
sS'required'
p3624
I00
sS'group_name'
p3625
S'Advanced'
p3626
sa(dp3627
S'description'
p3628
g3
sS'cpp_type'
p3629
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3630
sS'default'
p3631
S'NearestNodeDistanceAux'
p3632
sS'name'
p3633
S'type'
p3634
sS'required'
p3635
I00
sS'group_name'
p3636
Nsa(dp3637
S'description'
p3638
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3639
sS'cpp_type'
p3640
S'bool'
p3641
sS'default'
p3642
S'1'
p3643
sS'name'
p3644
S'use_displaced_mesh'
p3645
sS'required'
p3646
I00
sS'group_name'
p3647
S'Advanced'
p3648
sa(dp3649
S'description'
p3650
S'The name of the variable that this object applies to\n'
p3651
sS'cpp_type'
p3652
S'AuxVariableName'
p3653
sS'default'
p3654
g3
sS'name'
p3655
S'variable'
p3656
sS'required'
p3657
I01
sS'group_name'
p3658
NsasS'name'
p3659
S'/AuxKernels/NearestNodeDistanceAux'
p3660
sa(dp3661
S'description'
p3662
g3
sS'subblocks'
p3663
NsS'parameters'
p3664
(lp3665
(dp3666
S'description'
p3667
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3668
sS'cpp_type'
p3669
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3670
sS'default'
p3671
g3
sS'name'
p3672
S'block'
p3673
sS'required'
p3674
I00
sS'group_name'
p3675
Nsa(dp3676
S'description'
p3677
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3678
sS'cpp_type'
p3679
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3680
sS'default'
p3681
g3
sS'name'
p3682
S'boundary'
p3683
sS'required'
p3684
I00
sS'group_name'
p3685
Nsa(dp3686
S'description'
p3687
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3688
sS'cpp_type'
p3689
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3690
sS'default'
p3691
g3
sS'name'
p3692
S'control_tags'
p3693
sS'required'
p3694
I00
sS'group_name'
p3695
S'Advanced'
p3696
sa(dp3697
S'description'
p3698
S'Set the enabled status of the MooseObject.\n'
p3699
sS'cpp_type'
p3700
S'bool'
p3701
sS'default'
p3702
S'1'
p3703
sS'name'
p3704
S'enable'
p3705
sS'required'
p3706
I00
sS'group_name'
p3707
S'Advanced'
p3708
sa(dp3709
S'name'
p3710
S'execute_on'
p3711
sS'cpp_type'
p3712
S'MultiMooseEnum'
p3713
sS'default'
p3714
S'LINEAR'
p3715
sS'description'
p3716
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3717
sS'required'
p3718
I00
sS'options'
p3719
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3720
sS'group_name'
p3721
Nsa(dp3722
S'description'
p3723
S'The boundary to get the value from.\n'
p3724
sS'cpp_type'
p3725
S'BoundaryName'
p3726
sS'default'
p3727
g3
sS'name'
p3728
S'paired_boundary'
p3729
sS'required'
p3730
I01
sS'group_name'
p3731
Nsa(dp3732
S'description'
p3733
S'The variable to get the value of.\n'
p3734
sS'cpp_type'
p3735
S'std::vector<VariableName>'
p3736
sS'default'
p3737
g3
sS'name'
p3738
S'paired_variable'
p3739
sS'required'
p3740
I01
sS'group_name'
p3741
Nsa(dp3742
S'description'
p3743
S'The seed for the master random number generator\n'
p3744
sS'cpp_type'
p3745
S'unsigned int'
p3746
sS'default'
p3747
S'0'
p3748
sS'name'
p3749
S'seed'
p3750
sS'required'
p3751
I00
sS'group_name'
p3752
S'Advanced'
p3753
sa(dp3754
S'description'
p3755
g3
sS'cpp_type'
p3756
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3757
sS'default'
p3758
S'NearestNodeValueAux'
p3759
sS'name'
p3760
S'type'
p3761
sS'required'
p3762
I00
sS'group_name'
p3763
Nsa(dp3764
S'description'
p3765
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3766
sS'cpp_type'
p3767
S'bool'
p3768
sS'default'
p3769
S'1'
p3770
sS'name'
p3771
S'use_displaced_mesh'
p3772
sS'required'
p3773
I00
sS'group_name'
p3774
S'Advanced'
p3775
sa(dp3776
S'description'
p3777
S'The name of the variable that this object applies to\n'
p3778
sS'cpp_type'
p3779
S'AuxVariableName'
p3780
sS'default'
p3781
g3
sS'name'
p3782
S'variable'
p3783
sS'required'
p3784
I01
sS'group_name'
p3785
NsasS'name'
p3786
S'/AuxKernels/NearestNodeValueAux'
p3787
sa(dp3788
S'description'
p3789
g3
sS'subblocks'
p3790
NsS'parameters'
p3791
(lp3792
(dp3793
S'description'
p3794
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3795
sS'cpp_type'
p3796
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3797
sS'default'
p3798
g3
sS'name'
p3799
S'block'
p3800
sS'required'
p3801
I00
sS'group_name'
p3802
Nsa(dp3803
S'description'
p3804
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3805
sS'cpp_type'
p3806
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3807
sS'default'
p3808
g3
sS'name'
p3809
S'boundary'
p3810
sS'required'
p3811
I00
sS'group_name'
p3812
Nsa(dp3813
S'description'
p3814
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3815
sS'cpp_type'
p3816
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3817
sS'default'
p3818
g3
sS'name'
p3819
S'control_tags'
p3820
sS'required'
p3821
I00
sS'group_name'
p3822
S'Advanced'
p3823
sa(dp3824
S'description'
p3825
S'Set the enabled status of the MooseObject.\n'
p3826
sS'cpp_type'
p3827
S'bool'
p3828
sS'default'
p3829
S'1'
p3830
sS'name'
p3831
S'enable'
p3832
sS'required'
p3833
I00
sS'group_name'
p3834
S'Advanced'
p3835
sa(dp3836
S'name'
p3837
S'execute_on'
p3838
sS'cpp_type'
p3839
S'MultiMooseEnum'
p3840
sS'default'
p3841
S'LINEAR'
p3842
sS'description'
p3843
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3844
sS'required'
p3845
I00
sS'options'
p3846
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3847
sS'group_name'
p3848
Nsa(dp3849
S'description'
p3850
S'The normalization factor\n'
p3851
sS'cpp_type'
p3852
S'double'
p3853
sS'default'
p3854
S'1'
p3855
sS'name'
p3856
S'normal_factor'
p3857
sS'required'
p3858
I00
sS'group_name'
p3859
Nsa(dp3860
S'description'
p3861
S'The postprocessor on the source\n'
p3862
sS'cpp_type'
p3863
S'PostprocessorName'
p3864
sS'default'
p3865
g3
sS'name'
p3866
S'normalization'
p3867
sS'required'
p3868
I01
sS'group_name'
p3869
Nsa(dp3870
S'description'
p3871
S'The seed for the master random number generator\n'
p3872
sS'cpp_type'
p3873
S'unsigned int'
p3874
sS'default'
p3875
S'0'
p3876
sS'name'
p3877
S'seed'
p3878
sS'required'
p3879
I00
sS'group_name'
p3880
S'Advanced'
p3881
sa(dp3882
S'description'
p3883
S'The variable to be normalized\n'
p3884
sS'cpp_type'
p3885
S'std::vector<VariableName>'
p3886
sS'default'
p3887
g3
sS'name'
p3888
S'source_variable'
p3889
sS'required'
p3890
I01
sS'group_name'
p3891
Nsa(dp3892
S'description'
p3893
g3
sS'cpp_type'
p3894
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3895
sS'default'
p3896
S'NormalizationAux'
p3897
sS'name'
p3898
S'type'
p3899
sS'required'
p3900
I00
sS'group_name'
p3901
Nsa(dp3902
S'description'
p3903
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3904
sS'cpp_type'
p3905
S'bool'
p3906
sS'default'
p3907
S'0'
p3908
sS'name'
p3909
S'use_displaced_mesh'
p3910
sS'required'
p3911
I00
sS'group_name'
p3912
S'Advanced'
p3913
sa(dp3914
S'description'
p3915
S'The name of the variable that this object applies to\n'
p3916
sS'cpp_type'
p3917
S'AuxVariableName'
p3918
sS'default'
p3919
g3
sS'name'
p3920
S'variable'
p3921
sS'required'
p3922
I01
sS'group_name'
p3923
NsasS'name'
p3924
S'/AuxKernels/NormalizationAux'
p3925
sa(dp3926
S'description'
p3927
S'Parsed function AuxKernel.\n'
p3928
sS'subblocks'
p3929
NsS'parameters'
p3930
(lp3931
(dp3932
S'description'
p3933
S'coupled variables\n'
p3934
sS'cpp_type'
p3935
S'std::vector<VariableName>'
p3936
sS'default'
p3937
g3
sS'name'
p3938
S'args'
p3939
sS'required'
p3940
I00
sS'group_name'
p3941
Nsa(dp3942
S'description'
p3943
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3944
sS'cpp_type'
p3945
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3946
sS'default'
p3947
g3
sS'name'
p3948
S'block'
p3949
sS'required'
p3950
I00
sS'group_name'
p3951
Nsa(dp3952
S'description'
p3953
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3954
sS'cpp_type'
p3955
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3956
sS'default'
p3957
g3
sS'name'
p3958
S'boundary'
p3959
sS'required'
p3960
I00
sS'group_name'
p3961
Nsa(dp3962
S'description'
p3963
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p3964
sS'cpp_type'
p3965
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3966
sS'default'
p3967
g3
sS'name'
p3968
S'constant_expressions'
p3969
sS'required'
p3970
I00
sS'group_name'
p3971
Nsa(dp3972
S'description'
p3973
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p3974
sS'cpp_type'
p3975
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3976
sS'default'
p3977
g3
sS'name'
p3978
S'constant_names'
p3979
sS'required'
p3980
I00
sS'group_name'
p3981
Nsa(dp3982
S'description'
p3983
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3984
sS'cpp_type'
p3985
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3986
sS'default'
p3987
g3
sS'name'
p3988
S'control_tags'
p3989
sS'required'
p3990
I00
sS'group_name'
p3991
S'Advanced'
p3992
sa(dp3993
S'description'
p3994
S'Disable the function parser algebraic optimizer\n'
p3995
sS'cpp_type'
p3996
S'bool'
p3997
sS'default'
p3998
S'0'
p3999
sS'name'
p4000
S'disable_fpoptimizer'
p4001
sS'required'
p4002
I00
sS'group_name'
p4003
S'Advanced'
p4004
sa(dp4005
S'description'
p4006
S'Set the enabled status of the MooseObject.\n'
p4007
sS'cpp_type'
p4008
S'bool'
p4009
sS'default'
p4010
S'1'
p4011
sS'name'
p4012
S'enable'
p4013
sS'required'
p4014
I00
sS'group_name'
p4015
S'Advanced'
p4016
sa(dp4017
S'description'
p4018
S'Enable cacheing of function derivatives for faster startup time\n'
p4019
sS'cpp_type'
p4020
S'bool'
p4021
sS'default'
p4022
S'1'
p4023
sS'name'
p4024
S'enable_ad_cache'
p4025
sS'required'
p4026
I00
sS'group_name'
p4027
S'Advanced'
p4028
sa(dp4029
S'description'
p4030
S'Enable automatic immediate optimization of derivatives\n'
p4031
sS'cpp_type'
p4032
S'bool'
p4033
sS'default'
p4034
S'1'
p4035
sS'name'
p4036
S'enable_auto_optimize'
p4037
sS'required'
p4038
I00
sS'group_name'
p4039
S'Advanced'
p4040
sa(dp4041
S'description'
p4042
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p4043
sS'cpp_type'
p4044
S'bool'
p4045
sS'default'
p4046
S'1'
p4047
sS'name'
p4048
S'enable_jit'
p4049
sS'required'
p4050
I00
sS'group_name'
p4051
S'Advanced'
p4052
sa(dp4053
S'name'
p4054
S'execute_on'
p4055
sS'cpp_type'
p4056
S'MultiMooseEnum'
p4057
sS'default'
p4058
S'LINEAR'
p4059
sS'description'
p4060
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4061
sS'required'
p4062
I00
sS'options'
p4063
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4064
sS'group_name'
p4065
Nsa(dp4066
S'description'
p4067
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p4068
sS'cpp_type'
p4069
S'bool'
p4070
sS'default'
p4071
S'0'
p4072
sS'name'
p4073
S'fail_on_evalerror'
p4074
sS'required'
p4075
I00
sS'group_name'
p4076
S'Advanced'
p4077
sa(dp4078
S'description'
p4079
S'function expression\n'
p4080
sS'cpp_type'
p4081
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4082
sS'default'
p4083
g3
sS'name'
p4084
S'function'
p4085
sS'required'
p4086
I01
sS'group_name'
p4087
Nsa(dp4088
S'description'
p4089
S'The seed for the master random number generator\n'
p4090
sS'cpp_type'
p4091
S'unsigned int'
p4092
sS'default'
p4093
S'0'
p4094
sS'name'
p4095
S'seed'
p4096
sS'required'
p4097
I00
sS'group_name'
p4098
S'Advanced'
p4099
sa(dp4100
S'description'
p4101
g3
sS'cpp_type'
p4102
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4103
sS'default'
p4104
S'ParsedAux'
p4105
sS'name'
p4106
S'type'
p4107
sS'required'
p4108
I00
sS'group_name'
p4109
Nsa(dp4110
S'description'
p4111
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4112
sS'cpp_type'
p4113
S'bool'
p4114
sS'default'
p4115
S'0'
p4116
sS'name'
p4117
S'use_displaced_mesh'
p4118
sS'required'
p4119
I00
sS'group_name'
p4120
S'Advanced'
p4121
sa(dp4122
S'description'
p4123
S'The name of the variable that this object applies to\n'
p4124
sS'cpp_type'
p4125
S'AuxVariableName'
p4126
sS'default'
p4127
g3
sS'name'
p4128
S'variable'
p4129
sS'required'
p4130
I01
sS'group_name'
p4131
NsasS'name'
p4132
S'/AuxKernels/ParsedAux'
p4133
sa(dp4134
S'description'
p4135
g3
sS'subblocks'
p4136
NsS'parameters'
p4137
(lp4138
(dp4139
S'description'
p4140
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4141
sS'cpp_type'
p4142
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4143
sS'default'
p4144
g3
sS'name'
p4145
S'block'
p4146
sS'required'
p4147
I00
sS'group_name'
p4148
Nsa(dp4149
S'description'
p4150
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4151
sS'cpp_type'
p4152
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4153
sS'default'
p4154
g3
sS'name'
p4155
S'boundary'
p4156
sS'required'
p4157
I00
sS'group_name'
p4158
Nsa(dp4159
S'description'
p4160
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4161
sS'cpp_type'
p4162
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p4163
sS'default'
p4164
g3
sS'name'
p4165
S'control_tags'
p4166
sS'required'
p4167
I00
sS'group_name'
p4168
S'Advanced'
p4169
sa(dp4170
S'description'
p4171
S'Set the enabled status of the MooseObject.\n'
p4172
sS'cpp_type'
p4173
S'bool'
p4174
sS'default'
p4175
S'1'
p4176
sS'name'
p4177
S'enable'
p4178
sS'required'
p4179
I00
sS'group_name'
p4180
S'Advanced'
p4181
sa(dp4182
S'name'
p4183
S'execute_on'
p4184
sS'cpp_type'
p4185
S'MultiMooseEnum'
p4186
sS'default'
p4187
S'LINEAR'
p4188
sS'description'
p4189
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4190
sS'required'
p4191
I00
sS'options'
p4192
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4193
sS'group_name'
p4194
Nsa(dp4195
S'description'
p4196
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p4197
sS'cpp_type'
p4198
S'double'
p4199
sS'default'
p4200
g3
sS'name'
p4201
S'normal_smoothing_distance'
p4202
sS'required'
p4203
I00
sS'group_name'
p4204
Nsa(dp4205
S'description'
p4206
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p4207
sS'cpp_type'
p4208
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4209
sS'default'
p4210
g3
sS'name'
p4211
S'normal_smoothing_method'
p4212
sS'required'
p4213
I00
sS'group_name'
p4214
Nsa(dp4215
S'name'
p4216
S'order'
p4217
sS'cpp_type'
p4218
S'MooseEnum'
p4219
sS'default'
p4220
S'FIRST'
p4221
sS'description'
p4222
S'The finite element order\n'
p4223
sS'required'
p4224
I00
sS'options'
p4225
S'FIRST SECOND THIRD FOURTH'
p4226
sS'group_name'
p4227
Nsa(dp4228
S'description'
p4229
S'The boundary to be penetrated\n'
p4230
sS'cpp_type'
p4231
S'BoundaryName'
p4232
sS'default'
p4233
g3
sS'name'
p4234
S'paired_boundary'
p4235
sS'required'
p4236
I01
sS'group_name'
p4237
Nsa(dp4238
S'name'
p4239
S'quantity'
p4240
sS'cpp_type'
p4241
S'MooseEnum'
p4242
sS'default'
p4243
S'distance'
p4244
sS'description'
p4245
S'The quantity to recover from the available penetration information\n'
p4246
sS'required'
p4247
I00
sS'options'
p4248
S'distance tangential_distance normal_x normal_y normal_z closest_point_x closest_point_y closest_point_z element_id side incremental_slip_magnitude incremental_slip_x incremental_slip_y incremental_slip_z accumulated_slip force_x force_y force_z normal_force_magnitude normal_force_x normal_force_y normal_force_z tangential_force_magnitude tangential_force_x tangential_force_y tangential_force_z frictional_energy lagrange_multiplier mechanical_status'
p4249
sS'group_name'
p4250
Nsa(dp4251
S'description'
p4252
S'The seed for the master random number generator\n'
p4253
sS'cpp_type'
p4254
S'unsigned int'
p4255
sS'default'
p4256
S'0'
p4257
sS'name'
p4258
S'seed'
p4259
sS'required'
p4260
I00
sS'group_name'
p4261
S'Advanced'
p4262
sa(dp4263
S'description'
p4264
S'Tangential distance to extend edges of contact surfaces\n'
p4265
sS'cpp_type'
p4266
S'double'
p4267
sS'default'
p4268
g3
sS'name'
p4269
S'tangential_tolerance'
p4270
sS'required'
p4271
I00
sS'group_name'
p4272
Nsa(dp4273
S'description'
p4274
g3
sS'cpp_type'
p4275
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4276
sS'default'
p4277
S'PenetrationAux'
p4278
sS'name'
p4279
S'type'
p4280
sS'required'
p4281
I00
sS'group_name'
p4282
Nsa(dp4283
S'description'
p4284
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4285
sS'cpp_type'
p4286
S'bool'
p4287
sS'default'
p4288
S'1'
p4289
sS'name'
p4290
S'use_displaced_mesh'
p4291
sS'required'
p4292
I00
sS'group_name'
p4293
S'Advanced'
p4294
sa(dp4295
S'description'
p4296
S'The name of the variable that this object applies to\n'
p4297
sS'cpp_type'
p4298
S'AuxVariableName'
p4299
sS'default'
p4300
g3
sS'name'
p4301
S'variable'
p4302
sS'required'
p4303
I01
sS'group_name'
p4304
NsasS'name'
p4305
S'/AuxKernels/PenetrationAux'
p4306
sa(dp4307
S'description'
p4308
g3
sS'subblocks'
p4309
NsS'parameters'
p4310
(lp4311
(dp4312
S'description'
p4313
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4314
sS'cpp_type'
p4315
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4316
sS'default'
p4317
g3
sS'name'
p4318
S'block'
p4319
sS'required'
p4320
I00
sS'group_name'
p4321
Nsa(dp4322
S'description'
p4323
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4324
sS'cpp_type'
p4325
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4326
sS'default'
p4327
g3
sS'name'
p4328
S'boundary'
p4329
sS'required'
p4330
I00
sS'group_name'
p4331
Nsa(dp4332
S'description'
p4333
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4334
sS'cpp_type'
p4335
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p4336
sS'default'
p4337
g3
sS'name'
p4338
S'control_tags'
p4339
sS'required'
p4340
I00
sS'group_name'
p4341
S'Advanced'
p4342
sa(dp4343
S'description'
p4344
S'Set the enabled status of the MooseObject.\n'
p4345
sS'cpp_type'
p4346
S'bool'
p4347
sS'default'
p4348
S'1'
p4349
sS'name'
p4350
S'enable'
p4351
sS'required'
p4352
I00
sS'group_name'
p4353
S'Advanced'
p4354
sa(dp4355
S'name'
p4356
S'execute_on'
p4357
sS'cpp_type'
p4358
S'MultiMooseEnum'
p4359
sS'default'
p4360
S'LINEAR'
p4361
sS'description'
p4362
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4363
sS'required'
p4364
I00
sS'options'
p4365
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4366
sS'group_name'
p4367
Nsa(dp4368
S'description'
p4369
S'The seed for the master random number generator\n'
p4370
sS'cpp_type'
p4371
S'unsigned int'
p4372
sS'default'
p4373
S'0'
p4374
sS'name'
p4375
S'seed'
p4376
sS'required'
p4377
I00
sS'group_name'
p4378
S'Advanced'
p4379
sa(dp4380
S'description'
p4381
g3
sS'cpp_type'
p4382
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4383
sS'default'
p4384
S'ProcessorIDAux'
p4385
sS'name'
p4386
S'type'
p4387
sS'required'
p4388
I00
sS'group_name'
p4389
Nsa(dp4390
S'description'
p4391
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4392
sS'cpp_type'
p4393
S'bool'
p4394
sS'default'
p4395
S'0'
p4396
sS'name'
p4397
S'use_displaced_mesh'
p4398
sS'required'
p4399
I00
sS'group_name'
p4400
S'Advanced'
p4401
sa(dp4402
S'description'
p4403
S'The name of the variable that this object applies to\n'
p4404
sS'cpp_type'
p4405
S'AuxVariableName'
p4406
sS'default'
p4407
g3
sS'name'
p4408
S'variable'
p4409
sS'required'
p4410
I01
sS'group_name'
p4411
NsasS'name'
p4412
S'/AuxKernels/ProcessorIDAux'
p4413
sa(dp4414
S'description'
p4415
g3
sS'subblocks'
p4416
NsS'parameters'
p4417
(lp4418
(dp4419
S'description'
p4420
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4421
sS'cpp_type'
p4422
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4423
sS'default'
p4424
g3
sS'name'
p4425
S'block'
p4426
sS'required'
p4427
I00
sS'group_name'
p4428
Nsa(dp4429
S'description'
p4430
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4431
sS'cpp_type'
p4432
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4433
sS'default'
p4434
g3
sS'name'
p4435
S'boundary'
p4436
sS'required'
p4437
I00
sS'group_name'
p4438
Nsa(dp4439
S'description'
p4440
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4441
sS'cpp_type'
p4442
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p4443
sS'default'
p4444
g3
sS'name'
p4445
S'control_tags'
p4446
sS'required'
p4447
I00
sS'group_name'
p4448
S'Advanced'
p4449
sa(dp4450
S'description'
p4451
S'The downstairs of the quotient variable\n'
p4452
sS'cpp_type'
p4453
S'std::vector<VariableName>'
p4454
sS'default'
p4455
g3
sS'name'
p4456
S'denominator'
p4457
sS'required'
p4458
I00
sS'group_name'
p4459
Nsa(dp4460
S'description'
p4461
S'Set the enabled status of the MooseObject.\n'
p4462
sS'cpp_type'
p4463
S'bool'
p4464
sS'default'
p4465
S'1'
p4466
sS'name'
p4467
S'enable'
p4468
sS'required'
p4469
I00
sS'group_name'
p4470
S'Advanced'
p4471
sa(dp4472
S'name'
p4473
S'execute_on'
p4474
sS'cpp_type'
p4475
S'MultiMooseEnum'
p4476
sS'default'
p4477
S'LINEAR'
p4478
sS'description'
p4479
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4480
sS'required'
p4481
I00
sS'options'
p4482
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4483
sS'group_name'
p4484
Nsa(dp4485
S'description'
p4486
S'The upstairs of the quotient variable\n'
p4487
sS'cpp_type'
p4488
S'std::vector<VariableName>'
p4489
sS'default'
p4490
g3
sS'name'
p4491
S'numerator'
p4492
sS'required'
p4493
I00
sS'group_name'
p4494
Nsa(dp4495
S'description'
p4496
S'The seed for the master random number generator\n'
p4497
sS'cpp_type'
p4498
S'unsigned int'
p4499
sS'default'
p4500
S'0'
p4501
sS'name'
p4502
S'seed'
p4503
sS'required'
p4504
I00
sS'group_name'
p4505
S'Advanced'
p4506
sa(dp4507
S'description'
p4508
g3
sS'cpp_type'
p4509
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4510
sS'default'
p4511
S'QuotientAux'
p4512
sS'name'
p4513
S'type'
p4514
sS'required'
p4515
I00
sS'group_name'
p4516
Nsa(dp4517
S'description'
p4518
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4519
sS'cpp_type'
p4520
S'bool'
p4521
sS'default'
p4522
S'0'
p4523
sS'name'
p4524
S'use_displaced_mesh'
p4525
sS'required'
p4526
I00
sS'group_name'
p4527
S'Advanced'
p4528
sa(dp4529
S'description'
p4530
S'The name of the variable that this object applies to\n'
p4531
sS'cpp_type'
p4532
S'AuxVariableName'
p4533
sS'default'
p4534
g3
sS'name'
p4535
S'variable'
p4536
sS'required'
p4537
I01
sS'group_name'
p4538
NsasS'name'
p4539
S'/AuxKernels/QuotientAux'
p4540
sa(dp4541
S'description'
p4542
g3
sS'subblocks'
p4543
NsS'parameters'
p4544
(lp4545
(dp4546
S'description'
p4547
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4548
sS'cpp_type'
p4549
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4550
sS'default'
p4551
g3
sS'name'
p4552
S'block'
p4553
sS'required'
p4554
I00
sS'group_name'
p4555
Nsa(dp4556
S'description'
p4557
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4558
sS'cpp_type'
p4559
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4560
sS'default'
p4561
g3
sS'name'
p4562
S'boundary'
p4563
sS'required'
p4564
I00
sS'group_name'
p4565
Nsa(dp4566
S'description'
p4567
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4568
sS'cpp_type'
p4569
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p4570
sS'default'
p4571
g3
sS'name'
p4572
S'control_tags'
p4573
sS'required'
p4574
I00
sS'group_name'
p4575
S'Advanced'
p4576
sa(dp4577
S'description'
p4578
S'Set the enabled status of the MooseObject.\n'
p4579
sS'cpp_type'
p4580
S'bool'
p4581
sS'default'
p4582
S'1'
p4583
sS'name'
p4584
S'enable'
p4585
sS'required'
p4586
I00
sS'group_name'
p4587
S'Advanced'
p4588
sa(dp4589
S'name'
p4590
S'execute_on'
p4591
sS'cpp_type'
p4592
S'MultiMooseEnum'
p4593
sS'default'
p4594
S'LINEAR'
p4595
sS'description'
p4596
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4597
sS'required'
p4598
I00
sS'options'
p4599
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4600
sS'group_name'
p4601
Nsa(dp4602
S'description'
p4603
S'The seed for the master random number generator\n'
p4604
sS'cpp_type'
p4605
S'unsigned int'
p4606
sS'default'
p4607
S'0'
p4608
sS'name'
p4609
S'seed'
p4610
sS'required'
p4611
I00
sS'group_name'
p4612
S'Advanced'
p4613
sa(dp4614
S'description'
p4615
g3
sS'cpp_type'
p4616
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4617
sS'default'
p4618
S'SelfAux'
p4619
sS'name'
p4620
S'type'
p4621
sS'required'
p4622
I00
sS'group_name'
p4623
Nsa(dp4624
S'description'
p4625
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4626
sS'cpp_type'
p4627
S'bool'
p4628
sS'default'
p4629
S'0'
p4630
sS'name'
p4631
S'use_displaced_mesh'
p4632
sS'required'
p4633
I00
sS'group_name'
p4634
S'Advanced'
p4635
sa(dp4636
S'description'
p4637
S'The name of the variable that this object applies to\n'
p4638
sS'cpp_type'
p4639
S'AuxVariableName'
p4640
sS'default'
p4641
g3
sS'name'
p4642
S'variable'
p4643
sS'required'
p4644
I01
sS'group_name'
p4645
NsasS'name'
p4646
S'/AuxKernels/SelfAux'
p4647
sa(dp4648
S'description'
p4649
g3
sS'subblocks'
p4650
NsS'parameters'
p4651
(lp4652
(dp4653
S'description'
p4654
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p4655
sS'cpp_type'
p4656
S'double'
p4657
sS'default'
p4658
S'0'
p4659
sS'name'
p4660
S'add_factor'
p4661
sS'required'
p4662
I00
sS'group_name'
p4663
Nsa(dp4664
S'description'
p4665
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4666
sS'cpp_type'
p4667
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4668
sS'default'
p4669
g3
sS'name'
p4670
S'block'
p4671
sS'required'
p4672
I00
sS'group_name'
p4673
Nsa(dp4674
S'description'
p4675
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4676
sS'cpp_type'
p4677
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4678
sS'default'
p4679
g3
sS'name'
p4680
S'boundary'
p4681
sS'required'
p4682
I00
sS'group_name'
p4683
Nsa(dp4684
S'description'
p4685
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4686
sS'cpp_type'
p4687
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p4688
sS'default'
p4689
g3
sS'name'
p4690
S'control_tags'
p4691
sS'required'
p4692
I00
sS'group_name'
p4693
S'Advanced'
p4694
sa(dp4695
S'description'
p4696
S'If true the meshes must be the same and then the values are simply copied over.\n'
p4697
sS'cpp_type'
p4698
S'bool'
p4699
sS'default'
p4700
S'0'
p4701
sS'name'
p4702
S'direct'
p4703
sS'required'
p4704
I00
sS'group_name'
p4705
Nsa(dp4706
S'description'
p4707
S'Set the enabled status of the MooseObject.\n'
p4708
sS'cpp_type'
p4709
S'bool'
p4710
sS'default'
p4711
S'1'
p4712
sS'name'
p4713
S'enable'
p4714
sS'required'
p4715
I00
sS'group_name'
p4716
S'Advanced'
p4717
sa(dp4718
S'name'
p4719
S'execute_on'
p4720
sS'cpp_type'
p4721
S'MultiMooseEnum'
p4722
sS'default'
p4723
S'LINEAR'
p4724
sS'description'
p4725
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4726
sS'required'
p4727
I00
sS'options'
p4728
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4729
sS'group_name'
p4730
Nsa(dp4731
S'description'
p4732
S'The name of the variable to extract from the file\n'
p4733
sS'cpp_type'
p4734
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4735
sS'default'
p4736
g3
sS'name'
p4737
S'from_variable'
p4738
sS'required'
p4739
I00
sS'group_name'
p4740
Nsa(dp4741
S'description'
p4742
S"Scale factor (a)  to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p4743
sS'cpp_type'
p4744
S'double'
p4745
sS'default'
p4746
S'1'
p4747
sS'name'
p4748
S'scale_factor'
p4749
sS'required'
p4750
I00
sS'group_name'
p4751
Nsa(dp4752
S'description'
p4753
S'The seed for the master random number generator\n'
p4754
sS'cpp_type'
p4755
S'unsigned int'
p4756
sS'default'
p4757
S'0'
p4758
sS'name'
p4759
S'seed'
p4760
sS'required'
p4761
I00
sS'group_name'
p4762
S'Advanced'
p4763
sa(dp4764
S'description'
p4765
S'The name of the SolutionUserObject\n'
p4766
sS'cpp_type'
p4767
S'UserObjectName'
p4768
sS'default'
p4769
g3
sS'name'
p4770
S'solution'
p4771
sS'required'
p4772
I01
sS'group_name'
p4773
Nsa(dp4774
S'description'
p4775
g3
sS'cpp_type'
p4776
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4777
sS'default'
p4778
S'SolutionAux'
p4779
sS'name'
p4780
S'type'
p4781
sS'required'
p4782
I00
sS'group_name'
p4783
Nsa(dp4784
S'description'
p4785
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4786
sS'cpp_type'
p4787
S'bool'
p4788
sS'default'
p4789
S'0'
p4790
sS'name'
p4791
S'use_displaced_mesh'
p4792
sS'required'
p4793
I00
sS'group_name'
p4794
S'Advanced'
p4795
sa(dp4796
S'description'
p4797
S'The name of the variable that this object applies to\n'
p4798
sS'cpp_type'
p4799
S'AuxVariableName'
p4800
sS'default'
p4801
g3
sS'name'
p4802
S'variable'
p4803
sS'required'
p4804
I01
sS'group_name'
p4805
NsasS'name'
p4806
S'/AuxKernels/SolutionAux'
p4807
sa(dp4808
S'description'
p4809
g3
sS'subblocks'
p4810
NsS'parameters'
p4811
(lp4812
(dp4813
S'description'
p4814
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4815
sS'cpp_type'
p4816
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4817
sS'default'
p4818
g3
sS'name'
p4819
S'block'
p4820
sS'required'
p4821
I00
sS'group_name'
p4822
Nsa(dp4823
S'description'
p4824
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4825
sS'cpp_type'
p4826
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4827
sS'default'
p4828
g3
sS'name'
p4829
S'boundary'
p4830
sS'required'
p4831
I00
sS'group_name'
p4832
Nsa(dp4833
S'description'
p4834
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4835
sS'cpp_type'
p4836
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p4837
sS'default'
p4838
g3
sS'name'
p4839
S'control_tags'
p4840
sS'required'
p4841
I00
sS'group_name'
p4842
S'Advanced'
p4843
sa(dp4844
S'description'
p4845
S'Set the enabled status of the MooseObject.\n'
p4846
sS'cpp_type'
p4847
S'bool'
p4848
sS'default'
p4849
S'1'
p4850
sS'name'
p4851
S'enable'
p4852
sS'required'
p4853
I00
sS'group_name'
p4854
S'Advanced'
p4855
sa(dp4856
S'name'
p4857
S'execute_on'
p4858
sS'cpp_type'
p4859
S'MultiMooseEnum'
p4860
sS'default'
p4861
S'LINEAR'
p4862
sS'description'
p4863
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4864
sS'required'
p4865
I00
sS'options'
p4866
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4867
sS'group_name'
p4868
Nsa(dp4869
S'description'
p4870
S'The seed for the master random number generator\n'
p4871
sS'cpp_type'
p4872
S'unsigned int'
p4873
sS'default'
p4874
S'0'
p4875
sS'name'
p4876
S'seed'
p4877
sS'required'
p4878
I00
sS'group_name'
p4879
S'Advanced'
p4880
sa(dp4881
S'description'
p4882
g3
sS'cpp_type'
p4883
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4884
sS'default'
p4885
S'SpatialUserObjectAux'
p4886
sS'name'
p4887
S'type'
p4888
sS'required'
p4889
I00
sS'group_name'
p4890
Nsa(dp4891
S'description'
p4892
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4893
sS'cpp_type'
p4894
S'bool'
p4895
sS'default'
p4896
S'0'
p4897
sS'name'
p4898
S'use_displaced_mesh'
p4899
sS'required'
p4900
I00
sS'group_name'
p4901
S'Advanced'
p4902
sa(dp4903
S'description'
p4904
S'The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n'
p4905
sS'cpp_type'
p4906
S'UserObjectName'
p4907
sS'default'
p4908
g3
sS'name'
p4909
S'user_object'
p4910
sS'required'
p4911
I01
sS'group_name'
p4912
Nsa(dp4913
S'description'
p4914
S'The name of the variable that this object applies to\n'
p4915
sS'cpp_type'
p4916
S'AuxVariableName'
p4917
sS'default'
p4918
g3
sS'name'
p4919
S'variable'
p4920
sS'required'
p4921
I01
sS'group_name'
p4922
NsasS'name'
p4923
S'/AuxKernels/SpatialUserObjectAux'
p4924
sa(dp4925
S'description'
p4926
g3
sS'subblocks'
p4927
NsS'parameters'
p4928
(lp4929
(dp4930
S'description'
p4931
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4932
sS'cpp_type'
p4933
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4934
sS'default'
p4935
g3
sS'name'
p4936
S'block'
p4937
sS'required'
p4938
I00
sS'group_name'
p4939
Nsa(dp4940
S'description'
p4941
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4942
sS'cpp_type'
p4943
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4944
sS'default'
p4945
g3
sS'name'
p4946
S'boundary'
p4947
sS'required'
p4948
I00
sS'group_name'
p4949
Nsa(dp4950
S'name'
p4951
S'component'
p4952
sS'cpp_type'
p4953
S'MooseEnum'
p4954
sS'default'
p4955
g3
sS'description'
p4956
S'The gradient component to compute\n'
p4957
sS'required'
p4958
I00
sS'options'
p4959
S'x y z'
p4960
sS'group_name'
p4961
Nsa(dp4962
S'description'
p4963
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4964
sS'cpp_type'
p4965
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p4966
sS'default'
p4967
g3
sS'name'
p4968
S'control_tags'
p4969
sS'required'
p4970
I00
sS'group_name'
p4971
S'Advanced'
p4972
sa(dp4973
S'description'
p4974
S'Set the enabled status of the MooseObject.\n'
p4975
sS'cpp_type'
p4976
S'bool'
p4977
sS'default'
p4978
S'1'
p4979
sS'name'
p4980
S'enable'
p4981
sS'required'
p4982
I00
sS'group_name'
p4983
S'Advanced'
p4984
sa(dp4985
S'name'
p4986
S'execute_on'
p4987
sS'cpp_type'
p4988
S'MultiMooseEnum'
p4989
sS'default'
p4990
S'LINEAR'
p4991
sS'description'
p4992
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4993
sS'required'
p4994
I00
sS'options'
p4995
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4996
sS'group_name'
p4997
Nsa(dp4998
S'description'
p4999
S'The variable from which to compute the gradient component\n'
p5000
sS'cpp_type'
p5001
S'std::vector<VariableName>'
p5002
sS'default'
p5003
g3
sS'name'
p5004
S'gradient_variable'
p5005
sS'required'
p5006
I01
sS'group_name'
p5007
Nsa(dp5008
S'description'
p5009
S'The seed for the master random number generator\n'
p5010
sS'cpp_type'
p5011
S'unsigned int'
p5012
sS'default'
p5013
S'0'
p5014
sS'name'
p5015
S'seed'
p5016
sS'required'
p5017
I00
sS'group_name'
p5018
S'Advanced'
p5019
sa(dp5020
S'description'
p5021
g3
sS'cpp_type'
p5022
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5023
sS'default'
p5024
S'VariableGradientComponent'
p5025
sS'name'
p5026
S'type'
p5027
sS'required'
p5028
I00
sS'group_name'
p5029
Nsa(dp5030
S'description'
p5031
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5032
sS'cpp_type'
p5033
S'bool'
p5034
sS'default'
p5035
S'0'
p5036
sS'name'
p5037
S'use_displaced_mesh'
p5038
sS'required'
p5039
I00
sS'group_name'
p5040
S'Advanced'
p5041
sa(dp5042
S'description'
p5043
S'The name of the variable that this object applies to\n'
p5044
sS'cpp_type'
p5045
S'AuxVariableName'
p5046
sS'default'
p5047
g3
sS'name'
p5048
S'variable'
p5049
sS'required'
p5050
I01
sS'group_name'
p5051
NsasS'name'
p5052
S'/AuxKernels/VariableGradientComponent'
p5053
sa(dp5054
S'description'
p5055
g3
sS'subblocks'
p5056
NsS'parameters'
p5057
(lp5058
(dp5059
S'description'
p5060
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5061
sS'cpp_type'
p5062
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p5063
sS'default'
p5064
g3
sS'name'
p5065
S'block'
p5066
sS'required'
p5067
I00
sS'group_name'
p5068
Nsa(dp5069
S'description'
p5070
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5071
sS'cpp_type'
p5072
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p5073
sS'default'
p5074
g3
sS'name'
p5075
S'boundary'
p5076
sS'required'
p5077
I00
sS'group_name'
p5078
Nsa(dp5079
S'description'
p5080
S'A simple coefficient\n'
p5081
sS'cpp_type'
p5082
S'double'
p5083
sS'default'
p5084
S'1'
p5085
sS'name'
p5086
S'coefficient'
p5087
sS'required'
p5088
I00
sS'group_name'
p5089
Nsa(dp5090
S'description'
p5091
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5092
sS'cpp_type'
p5093
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5094
sS'default'
p5095
g3
sS'name'
p5096
S'control_tags'
p5097
sS'required'
p5098
I00
sS'group_name'
p5099
S'Advanced'
p5100
sa(dp5101
S'description'
p5102
S'Set the enabled status of the MooseObject.\n'
p5103
sS'cpp_type'
p5104
S'bool'
p5105
sS'default'
p5106
S'1'
p5107
sS'name'
p5108
S'enable'
p5109
sS'required'
p5110
I00
sS'group_name'
p5111
S'Advanced'
p5112
sa(dp5113
S'name'
p5114
S'execute_on'
p5115
sS'cpp_type'
p5116
S'MultiMooseEnum'
p5117
sS'default'
p5118
S'LINEAR'
p5119
sS'description'
p5120
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5121
sS'required'
p5122
I00
sS'options'
p5123
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5124
sS'group_name'
p5125
Nsa(dp5126
S'description'
p5127
S'The order of global truncation error: midpoint=1, trapazoidal=2, Simpson=3\n'
p5128
sS'cpp_type'
p5129
S'unsigned int'
p5130
sS'default'
p5131
S'2'
p5132
sS'name'
p5133
S'order'
p5134
sS'required'
p5135
I00
sS'group_name'
p5136
Nsa(dp5137
S'description'
p5138
S'The seed for the master random number generator\n'
p5139
sS'cpp_type'
p5140
S'unsigned int'
p5141
sS'default'
p5142
S'0'
p5143
sS'name'
p5144
S'seed'
p5145
sS'required'
p5146
I00
sS'group_name'
p5147
S'Advanced'
p5148
sa(dp5149
S'description'
p5150
g3
sS'cpp_type'
p5151
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5152
sS'default'
p5153
S'VariableTimeIntegrationAux'
p5154
sS'name'
p5155
S'type'
p5156
sS'required'
p5157
I00
sS'group_name'
p5158
Nsa(dp5159
S'description'
p5160
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5161
sS'cpp_type'
p5162
S'bool'
p5163
sS'default'
p5164
S'0'
p5165
sS'name'
p5166
S'use_displaced_mesh'
p5167
sS'required'
p5168
I00
sS'group_name'
p5169
S'Advanced'
p5170
sa(dp5171
S'description'
p5172
S'The name of the variable that this object applies to\n'
p5173
sS'cpp_type'
p5174
S'AuxVariableName'
p5175
sS'default'
p5176
g3
sS'name'
p5177
S'variable'
p5178
sS'required'
p5179
I01
sS'group_name'
p5180
Nsa(dp5181
S'description'
p5182
S'The variable to be integrated\n'
p5183
sS'cpp_type'
p5184
S'std::vector<VariableName>'
p5185
sS'default'
p5186
g3
sS'name'
p5187
S'variable_to_integrate'
p5188
sS'required'
p5189
I01
sS'group_name'
p5190
NsasS'name'
p5191
S'/AuxKernels/VariableTimeIntegrationAux'
p5192
sa(dp5193
S'description'
p5194
g3
sS'subblocks'
p5195
NsS'parameters'
p5196
(lp5197
(dp5198
S'description'
p5199
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5200
sS'cpp_type'
p5201
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p5202
sS'default'
p5203
g3
sS'name'
p5204
S'block'
p5205
sS'required'
p5206
I00
sS'group_name'
p5207
Nsa(dp5208
S'description'
p5209
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5210
sS'cpp_type'
p5211
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p5212
sS'default'
p5213
g3
sS'name'
p5214
S'boundary'
p5215
sS'required'
p5216
I00
sS'group_name'
p5217
Nsa(dp5218
S'description'
p5219
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5220
sS'cpp_type'
p5221
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5222
sS'default'
p5223
g3
sS'name'
p5224
S'control_tags'
p5225
sS'required'
p5226
I00
sS'group_name'
p5227
S'Advanced'
p5228
sa(dp5229
S'description'
p5230
S'Set the enabled status of the MooseObject.\n'
p5231
sS'cpp_type'
p5232
S'bool'
p5233
sS'default'
p5234
S'1'
p5235
sS'name'
p5236
S'enable'
p5237
sS'required'
p5238
I00
sS'group_name'
p5239
S'Advanced'
p5240
sa(dp5241
S'name'
p5242
S'execute_on'
p5243
sS'cpp_type'
p5244
S'MultiMooseEnum'
p5245
sS'default'
p5246
S'LINEAR'
p5247
sS'description'
p5248
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5249
sS'required'
p5250
I00
sS'options'
p5251
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5252
sS'group_name'
p5253
Nsa(dp5254
S'description'
p5255
S'The seed for the master random number generator\n'
p5256
sS'cpp_type'
p5257
S'unsigned int'
p5258
sS'default'
p5259
S'0'
p5260
sS'name'
p5261
S'seed'
p5262
sS'required'
p5263
I00
sS'group_name'
p5264
S'Advanced'
p5265
sa(dp5266
S'description'
p5267
g3
sS'cpp_type'
p5268
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5269
sS'default'
p5270
S'VectorMagnitudeAux'
p5271
sS'name'
p5272
S'type'
p5273
sS'required'
p5274
I00
sS'group_name'
p5275
Nsa(dp5276
S'description'
p5277
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5278
sS'cpp_type'
p5279
S'bool'
p5280
sS'default'
p5281
S'0'
p5282
sS'name'
p5283
S'use_displaced_mesh'
p5284
sS'required'
p5285
I00
sS'group_name'
p5286
S'Advanced'
p5287
sa(dp5288
S'description'
p5289
S'The name of the variable that this object applies to\n'
p5290
sS'cpp_type'
p5291
S'AuxVariableName'
p5292
sS'default'
p5293
g3
sS'name'
p5294
S'variable'
p5295
sS'required'
p5296
I01
sS'group_name'
p5297
Nsa(dp5298
S'description'
p5299
S'x-component of the vector\n'
p5300
sS'cpp_type'
p5301
S'std::vector<VariableName>'
p5302
sS'default'
p5303
g3
sS'name'
p5304
S'x'
p5305
sS'required'
p5306
I01
sS'group_name'
p5307
Nsa(dp5308
S'description'
p5309
S'y-component of the vector\n'
p5310
sS'cpp_type'
p5311
S'std::vector<VariableName>'
p5312
sS'default'
p5313
g3
sS'name'
p5314
S'y'
p5315
sS'required'
p5316
I00
sS'group_name'
p5317
Nsa(dp5318
S'description'
p5319
S'z-component of the vector\n'
p5320
sS'cpp_type'
p5321
S'std::vector<VariableName>'
p5322
sS'default'
p5323
g3
sS'name'
p5324
S'z'
p5325
sS'required'
p5326
I00
sS'group_name'
p5327
NsasS'name'
p5328
S'/AuxKernels/VectorMagnitudeAux'
p5329
sasS'parameters'
p5330
NsS'name'
p5331
S'/AuxKernels'
p5332
sa(dp5333
S'description'
p5334
g3
sS'subblocks'
p5335
(lp5336
(dp5337
S'description'
p5338
g3
sS'subblocks'
p5339
NsS'parameters'
p5340
(lp5341
(dp5342
S'description'
p5343
S'A string representing the Moose Object that will be built by this Action\n'
p5344
sS'cpp_type'
p5345
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5346
sS'default'
p5347
g3
sS'name'
p5348
S'type'
p5349
sS'required'
p5350
I01
sS'group_name'
p5351
NsasS'name'
p5352
S'/AuxScalarKernels/*'
p5353
sa(dp5354
S'description'
p5355
g3
sS'subblocks'
p5356
NsS'parameters'
p5357
(lp5358
(dp5359
S'description'
p5360
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5361
sS'cpp_type'
p5362
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5363
sS'default'
p5364
g3
sS'name'
p5365
S'control_tags'
p5366
sS'required'
p5367
I00
sS'group_name'
p5368
S'Advanced'
p5369
sa(dp5370
S'description'
p5371
S'Set the enabled status of the MooseObject.\n'
p5372
sS'cpp_type'
p5373
S'bool'
p5374
sS'default'
p5375
S'1'
p5376
sS'name'
p5377
S'enable'
p5378
sS'required'
p5379
I00
sS'group_name'
p5380
S'Advanced'
p5381
sa(dp5382
S'name'
p5383
S'execute_on'
p5384
sS'cpp_type'
p5385
S'MultiMooseEnum'
p5386
sS'default'
p5387
S'LINEAR'
p5388
sS'description'
p5389
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5390
sS'required'
p5391
I00
sS'options'
p5392
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5393
sS'group_name'
p5394
Nsa(dp5395
S'description'
p5396
g3
sS'cpp_type'
p5397
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5398
sS'default'
p5399
S'ConstantScalarAux'
p5400
sS'name'
p5401
S'type'
p5402
sS'required'
p5403
I00
sS'group_name'
p5404
Nsa(dp5405
S'description'
p5406
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5407
sS'cpp_type'
p5408
S'bool'
p5409
sS'default'
p5410
S'0'
p5411
sS'name'
p5412
S'use_displaced_mesh'
p5413
sS'required'
p5414
I00
sS'group_name'
p5415
S'Advanced'
p5416
sa(dp5417
S'description'
p5418
S'The value to be set to the scalar variable.\n'
p5419
sS'cpp_type'
p5420
S'double'
p5421
sS'default'
p5422
g3
sS'name'
p5423
S'value'
p5424
sS'required'
p5425
I01
sS'group_name'
p5426
Nsa(dp5427
S'description'
p5428
S'The name of the variable that this kernel operates on\n'
p5429
sS'cpp_type'
p5430
S'AuxVariableName'
p5431
sS'default'
p5432
g3
sS'name'
p5433
S'variable'
p5434
sS'required'
p5435
I01
sS'group_name'
p5436
NsasS'name'
p5437
S'/AuxScalarKernels/ConstantScalarAux'
p5438
sa(dp5439
S'description'
p5440
g3
sS'subblocks'
p5441
NsS'parameters'
p5442
(lp5443
(dp5444
S'description'
p5445
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5446
sS'cpp_type'
p5447
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5448
sS'default'
p5449
g3
sS'name'
p5450
S'control_tags'
p5451
sS'required'
p5452
I00
sS'group_name'
p5453
S'Advanced'
p5454
sa(dp5455
S'description'
p5456
S'Set the enabled status of the MooseObject.\n'
p5457
sS'cpp_type'
p5458
S'bool'
p5459
sS'default'
p5460
S'1'
p5461
sS'name'
p5462
S'enable'
p5463
sS'required'
p5464
I00
sS'group_name'
p5465
S'Advanced'
p5466
sa(dp5467
S'name'
p5468
S'execute_on'
p5469
sS'cpp_type'
p5470
S'MultiMooseEnum'
p5471
sS'default'
p5472
S'LINEAR'
p5473
sS'description'
p5474
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5475
sS'required'
p5476
I00
sS'options'
p5477
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5478
sS'group_name'
p5479
Nsa(dp5480
S'description'
p5481
S'The functions to set the scalar variable components.\n'
p5482
sS'cpp_type'
p5483
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p5484
sS'default'
p5485
g3
sS'name'
p5486
S'function'
p5487
sS'required'
p5488
I01
sS'group_name'
p5489
Nsa(dp5490
S'description'
p5491
g3
sS'cpp_type'
p5492
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5493
sS'default'
p5494
S'FunctionScalarAux'
p5495
sS'name'
p5496
S'type'
p5497
sS'required'
p5498
I00
sS'group_name'
p5499
Nsa(dp5500
S'description'
p5501
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5502
sS'cpp_type'
p5503
S'bool'
p5504
sS'default'
p5505
S'0'
p5506
sS'name'
p5507
S'use_displaced_mesh'
p5508
sS'required'
p5509
I00
sS'group_name'
p5510
S'Advanced'
p5511
sa(dp5512
S'description'
p5513
S'The name of the variable that this kernel operates on\n'
p5514
sS'cpp_type'
p5515
S'AuxVariableName'
p5516
sS'default'
p5517
g3
sS'name'
p5518
S'variable'
p5519
sS'required'
p5520
I01
sS'group_name'
p5521
NsasS'name'
p5522
S'/AuxScalarKernels/FunctionScalarAux'
p5523
sa(dp5524
S'description'
p5525
g3
sS'subblocks'
p5526
NsS'parameters'
p5527
(lp5528
(dp5529
S'description'
p5530
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5531
sS'cpp_type'
p5532
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5533
sS'default'
p5534
g3
sS'name'
p5535
S'control_tags'
p5536
sS'required'
p5537
I00
sS'group_name'
p5538
S'Advanced'
p5539
sa(dp5540
S'description'
p5541
S'The downstairs of the quotient variable\n'
p5542
sS'cpp_type'
p5543
S'std::vector<VariableName>'
p5544
sS'default'
p5545
g3
sS'name'
p5546
S'denominator'
p5547
sS'required'
p5548
I00
sS'group_name'
p5549
Nsa(dp5550
S'description'
p5551
S'Set the enabled status of the MooseObject.\n'
p5552
sS'cpp_type'
p5553
S'bool'
p5554
sS'default'
p5555
S'1'
p5556
sS'name'
p5557
S'enable'
p5558
sS'required'
p5559
I00
sS'group_name'
p5560
S'Advanced'
p5561
sa(dp5562
S'name'
p5563
S'execute_on'
p5564
sS'cpp_type'
p5565
S'MultiMooseEnum'
p5566
sS'default'
p5567
S'LINEAR'
p5568
sS'description'
p5569
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5570
sS'required'
p5571
I00
sS'options'
p5572
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5573
sS'group_name'
p5574
Nsa(dp5575
S'description'
p5576
S'The upstairs of the quotient variable\n'
p5577
sS'cpp_type'
p5578
S'std::vector<VariableName>'
p5579
sS'default'
p5580
g3
sS'name'
p5581
S'numerator'
p5582
sS'required'
p5583
I00
sS'group_name'
p5584
Nsa(dp5585
S'description'
p5586
g3
sS'cpp_type'
p5587
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5588
sS'default'
p5589
S'QuotientScalarAux'
p5590
sS'name'
p5591
S'type'
p5592
sS'required'
p5593
I00
sS'group_name'
p5594
Nsa(dp5595
S'description'
p5596
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5597
sS'cpp_type'
p5598
S'bool'
p5599
sS'default'
p5600
S'0'
p5601
sS'name'
p5602
S'use_displaced_mesh'
p5603
sS'required'
p5604
I00
sS'group_name'
p5605
S'Advanced'
p5606
sa(dp5607
S'description'
p5608
S'The name of the variable that this kernel operates on\n'
p5609
sS'cpp_type'
p5610
S'AuxVariableName'
p5611
sS'default'
p5612
g3
sS'name'
p5613
S'variable'
p5614
sS'required'
p5615
I01
sS'group_name'
p5616
NsasS'name'
p5617
S'/AuxScalarKernels/QuotientScalarAux'
p5618
sasS'parameters'
p5619
NsS'name'
p5620
S'/AuxScalarKernels'
p5621
sa(dp5622
S'description'
p5623
g3
sS'subblocks'
p5624
(lp5625
(dp5626
S'description'
p5627
g3
sS'subblocks'
p5628
(lp5629
(dp5630
S'description'
p5631
g3
sS'subblocks'
p5632
(lp5633
(dp5634
S'description'
p5635
g3
sS'subblocks'
p5636
(lp5637
(dp5638
S'description'
p5639
g3
sS'subblocks'
p5640
NsS'parameters'
p5641
(lp5642
(dp5643
S'description'
p5644
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5645
sS'cpp_type'
p5646
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p5647
sS'default'
p5648
g3
sS'name'
p5649
S'block'
p5650
sS'required'
p5651
I00
sS'group_name'
p5652
Nsa(dp5653
S'description'
p5654
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5655
sS'cpp_type'
p5656
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p5657
sS'default'
p5658
g3
sS'name'
p5659
S'boundary'
p5660
sS'required'
p5661
I00
sS'group_name'
p5662
Nsa(dp5663
S'description'
p5664
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5665
sS'cpp_type'
p5666
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5667
sS'default'
p5668
g3
sS'name'
p5669
S'control_tags'
p5670
sS'required'
p5671
I00
sS'group_name'
p5672
S'Advanced'
p5673
sa(dp5674
S'description'
p5675
S'Set the enabled status of the MooseObject.\n'
p5676
sS'cpp_type'
p5677
S'bool'
p5678
sS'default'
p5679
S'1'
p5680
sS'name'
p5681
S'enable'
p5682
sS'required'
p5683
I00
sS'group_name'
p5684
S'Advanced'
p5685
sa(dp5686
S'description'
p5687
S'The value of the variable inside the box\n'
p5688
sS'cpp_type'
p5689
S'double'
p5690
sS'default'
p5691
S'0'
p5692
sS'name'
p5693
S'inside'
p5694
sS'required'
p5695
I00
sS'group_name'
p5696
Nsa(dp5697
S'description'
p5698
S'The value of the variable outside the box\n'
p5699
sS'cpp_type'
p5700
S'double'
p5701
sS'default'
p5702
S'0'
p5703
sS'name'
p5704
S'outside'
p5705
sS'required'
p5706
I00
sS'group_name'
p5707
Nsa(dp5708
S'description'
p5709
g3
sS'cpp_type'
p5710
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5711
sS'default'
p5712
S'BoundingBoxIC'
p5713
sS'name'
p5714
S'type'
p5715
sS'required'
p5716
I00
sS'group_name'
p5717
Nsa(dp5718
S'description'
p5719
S'The variable this initial condition is supposed to provide values for.\n'
p5720
sS'cpp_type'
p5721
S'VariableName'
p5722
sS'default'
p5723
g3
sS'name'
p5724
S'variable'
p5725
sS'required'
p5726
I01
sS'group_name'
p5727
Nsa(dp5728
S'description'
p5729
S'The x coordinate of the lower left-hand corner of the box\n'
p5730
sS'cpp_type'
p5731
S'double'
p5732
sS'default'
p5733
g3
sS'name'
p5734
S'x1'
p5735
sS'required'
p5736
I01
sS'group_name'
p5737
Nsa(dp5738
S'description'
p5739
S'The x coordinate of the upper right-hand corner of the box\n'
p5740
sS'cpp_type'
p5741
S'double'
p5742
sS'default'
p5743
g3
sS'name'
p5744
S'x2'
p5745
sS'required'
p5746
I01
sS'group_name'
p5747
Nsa(dp5748
S'description'
p5749
S'The y coordinate of the lower left-hand corner of the box\n'
p5750
sS'cpp_type'
p5751
S'double'
p5752
sS'default'
p5753
g3
sS'name'
p5754
S'y1'
p5755
sS'required'
p5756
I01
sS'group_name'
p5757
Nsa(dp5758
S'description'
p5759
S'The y coordinate of the upper right-hand corner of the box\n'
p5760
sS'cpp_type'
p5761
S'double'
p5762
sS'default'
p5763
g3
sS'name'
p5764
S'y2'
p5765
sS'required'
p5766
I01
sS'group_name'
p5767
Nsa(dp5768
S'description'
p5769
S'The z coordinate of the lower left-hand corner of the box\n'
p5770
sS'cpp_type'
p5771
S'double'
p5772
sS'default'
p5773
S'0'
p5774
sS'name'
p5775
S'z1'
p5776
sS'required'
p5777
I00
sS'group_name'
p5778
Nsa(dp5779
S'description'
p5780
S'The z coordinate of the upper right-hand corner of the box\n'
p5781
sS'cpp_type'
p5782
S'double'
p5783
sS'default'
p5784
S'0'
p5785
sS'name'
p5786
S'z2'
p5787
sS'required'
p5788
I00
sS'group_name'
p5789
NsasS'name'
p5790
S'/AuxVariables/*/InitialCondition/<type>/BoundingBoxIC'
p5791
sa(dp5792
S'description'
p5793
g3
sS'subblocks'
p5794
NsS'parameters'
p5795
(lp5796
(dp5797
S'description'
p5798
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5799
sS'cpp_type'
p5800
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p5801
sS'default'
p5802
g3
sS'name'
p5803
S'block'
p5804
sS'required'
p5805
I00
sS'group_name'
p5806
Nsa(dp5807
S'description'
p5808
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5809
sS'cpp_type'
p5810
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p5811
sS'default'
p5812
g3
sS'name'
p5813
S'boundary'
p5814
sS'required'
p5815
I00
sS'group_name'
p5816
Nsa(dp5817
S'description'
p5818
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5819
sS'cpp_type'
p5820
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5821
sS'default'
p5822
g3
sS'name'
p5823
S'control_tags'
p5824
sS'required'
p5825
I00
sS'group_name'
p5826
S'Advanced'
p5827
sa(dp5828
S'description'
p5829
S'Set the enabled status of the MooseObject.\n'
p5830
sS'cpp_type'
p5831
S'bool'
p5832
sS'default'
p5833
S'1'
p5834
sS'name'
p5835
S'enable'
p5836
sS'required'
p5837
I00
sS'group_name'
p5838
S'Advanced'
p5839
sa(dp5840
S'description'
p5841
g3
sS'cpp_type'
p5842
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5843
sS'default'
p5844
S'ConstantIC'
p5845
sS'name'
p5846
S'type'
p5847
sS'required'
p5848
I00
sS'group_name'
p5849
Nsa(dp5850
S'description'
p5851
S'The value to be set in IC\n'
p5852
sS'cpp_type'
p5853
S'double'
p5854
sS'default'
p5855
g3
sS'name'
p5856
S'value'
p5857
sS'required'
p5858
I01
sS'group_name'
p5859
Nsa(dp5860
S'description'
p5861
S'The variable this initial condition is supposed to provide values for.\n'
p5862
sS'cpp_type'
p5863
S'VariableName'
p5864
sS'default'
p5865
g3
sS'name'
p5866
S'variable'
p5867
sS'required'
p5868
I01
sS'group_name'
p5869
NsasS'name'
p5870
S'/AuxVariables/*/InitialCondition/<type>/ConstantIC'
p5871
sa(dp5872
S'description'
p5873
g3
sS'subblocks'
p5874
NsS'parameters'
p5875
(lp5876
(dp5877
S'description'
p5878
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5879
sS'cpp_type'
p5880
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p5881
sS'default'
p5882
g3
sS'name'
p5883
S'block'
p5884
sS'required'
p5885
I00
sS'group_name'
p5886
Nsa(dp5887
S'description'
p5888
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5889
sS'cpp_type'
p5890
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p5891
sS'default'
p5892
g3
sS'name'
p5893
S'boundary'
p5894
sS'required'
p5895
I00
sS'group_name'
p5896
Nsa(dp5897
S'description'
p5898
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5899
sS'cpp_type'
p5900
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5901
sS'default'
p5902
g3
sS'name'
p5903
S'control_tags'
p5904
sS'required'
p5905
I00
sS'group_name'
p5906
S'Advanced'
p5907
sa(dp5908
S'description'
p5909
S'Set the enabled status of the MooseObject.\n'
p5910
sS'cpp_type'
p5911
S'bool'
p5912
sS'default'
p5913
S'1'
p5914
sS'name'
p5915
S'enable'
p5916
sS'required'
p5917
I00
sS'group_name'
p5918
S'Advanced'
p5919
sa(dp5920
S'description'
p5921
S'The initial condition function.\n'
p5922
sS'cpp_type'
p5923
S'FunctionName'
p5924
sS'default'
p5925
g3
sS'name'
p5926
S'function'
p5927
sS'required'
p5928
I01
sS'group_name'
p5929
Nsa(dp5930
S'description'
p5931
g3
sS'cpp_type'
p5932
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5933
sS'default'
p5934
S'FunctionIC'
p5935
sS'name'
p5936
S'type'
p5937
sS'required'
p5938
I00
sS'group_name'
p5939
Nsa(dp5940
S'description'
p5941
S'The variable this initial condition is supposed to provide values for.\n'
p5942
sS'cpp_type'
p5943
S'VariableName'
p5944
sS'default'
p5945
g3
sS'name'
p5946
S'variable'
p5947
sS'required'
p5948
I01
sS'group_name'
p5949
NsasS'name'
p5950
S'/AuxVariables/*/InitialCondition/<type>/FunctionIC'
p5951
sa(dp5952
S'description'
p5953
g3
sS'subblocks'
p5954
NsS'parameters'
p5955
(lp5956
(dp5957
S'description'
p5958
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5959
sS'cpp_type'
p5960
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5961
sS'default'
p5962
g3
sS'name'
p5963
S'control_tags'
p5964
sS'required'
p5965
I00
sS'group_name'
p5966
S'Advanced'
p5967
sa(dp5968
S'description'
p5969
S'Set the enabled status of the MooseObject.\n'
p5970
sS'cpp_type'
p5971
S'bool'
p5972
sS'default'
p5973
S'1'
p5974
sS'name'
p5975
S'enable'
p5976
sS'required'
p5977
I00
sS'group_name'
p5978
S'Advanced'
p5979
sa(dp5980
S'description'
p5981
S'The initial condition function.\n'
p5982
sS'cpp_type'
p5983
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p5984
sS'default'
p5985
g3
sS'name'
p5986
S'function'
p5987
sS'required'
p5988
I01
sS'group_name'
p5989
Nsa(dp5990
S'description'
p5991
g3
sS'cpp_type'
p5992
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5993
sS'default'
p5994
S'FunctionScalarIC'
p5995
sS'name'
p5996
S'type'
p5997
sS'required'
p5998
I00
sS'group_name'
p5999
Nsa(dp6000
S'description'
p6001
S'The variable this initial condition is supposed to provide values for.\n'
p6002
sS'cpp_type'
p6003
S'VariableName'
p6004
sS'default'
p6005
g3
sS'name'
p6006
S'variable'
p6007
sS'required'
p6008
I00
sS'group_name'
p6009
NsasS'name'
p6010
S'/AuxVariables/*/InitialCondition/<type>/FunctionScalarIC'
p6011
sa(dp6012
S'description'
p6013
g3
sS'subblocks'
p6014
NsS'parameters'
p6015
(lp6016
(dp6017
S'description'
p6018
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6019
sS'cpp_type'
p6020
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p6021
sS'default'
p6022
g3
sS'name'
p6023
S'block'
p6024
sS'required'
p6025
I00
sS'group_name'
p6026
Nsa(dp6027
S'description'
p6028
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6029
sS'cpp_type'
p6030
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6031
sS'default'
p6032
g3
sS'name'
p6033
S'boundary'
p6034
sS'required'
p6035
I00
sS'group_name'
p6036
Nsa(dp6037
S'description'
p6038
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6039
sS'cpp_type'
p6040
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6041
sS'default'
p6042
g3
sS'name'
p6043
S'control_tags'
p6044
sS'required'
p6045
I00
sS'group_name'
p6046
S'Advanced'
p6047
sa(dp6048
S'description'
p6049
S'Set the enabled status of the MooseObject.\n'
p6050
sS'cpp_type'
p6051
S'bool'
p6052
sS'default'
p6053
S'1'
p6054
sS'name'
p6055
S'enable'
p6056
sS'required'
p6057
I00
sS'group_name'
p6058
S'Advanced'
p6059
sa(dp6060
S'description'
p6061
S'Upper bound of the randomly generated values\n'
p6062
sS'cpp_type'
p6063
S'double'
p6064
sS'default'
p6065
S'1'
p6066
sS'name'
p6067
S'max'
p6068
sS'required'
p6069
I00
sS'group_name'
p6070
Nsa(dp6071
S'description'
p6072
S'Lower bound of the randomly generated values\n'
p6073
sS'cpp_type'
p6074
S'double'
p6075
sS'default'
p6076
S'0'
p6077
sS'name'
p6078
S'min'
p6079
sS'required'
p6080
I00
sS'group_name'
p6081
Nsa(dp6082
S'description'
p6083
S'Seed value for the random number generator\n'
p6084
sS'cpp_type'
p6085
S'unsigned int'
p6086
sS'default'
p6087
S'0'
p6088
sS'name'
p6089
S'seed'
p6090
sS'required'
p6091
I00
sS'group_name'
p6092
Nsa(dp6093
S'description'
p6094
g3
sS'cpp_type'
p6095
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6096
sS'default'
p6097
S'RandomIC'
p6098
sS'name'
p6099
S'type'
p6100
sS'required'
p6101
I00
sS'group_name'
p6102
Nsa(dp6103
S'description'
p6104
S'The variable this initial condition is supposed to provide values for.\n'
p6105
sS'cpp_type'
p6106
S'VariableName'
p6107
sS'default'
p6108
g3
sS'name'
p6109
S'variable'
p6110
sS'required'
p6111
I01
sS'group_name'
p6112
NsasS'name'
p6113
S'/AuxVariables/*/InitialCondition/<type>/RandomIC'
p6114
sa(dp6115
S'description'
p6116
g3
sS'subblocks'
p6117
NsS'parameters'
p6118
(lp6119
(dp6120
S'description'
p6121
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6122
sS'cpp_type'
p6123
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6124
sS'default'
p6125
g3
sS'name'
p6126
S'control_tags'
p6127
sS'required'
p6128
I00
sS'group_name'
p6129
S'Advanced'
p6130
sa(dp6131
S'description'
p6132
S'Set the enabled status of the MooseObject.\n'
p6133
sS'cpp_type'
p6134
S'bool'
p6135
sS'default'
p6136
S'1'
p6137
sS'name'
p6138
S'enable'
p6139
sS'required'
p6140
I00
sS'group_name'
p6141
S'Advanced'
p6142
sa(dp6143
S'description'
p6144
g3
sS'cpp_type'
p6145
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6146
sS'default'
p6147
S'ScalarComponentIC'
p6148
sS'name'
p6149
S'type'
p6150
sS'required'
p6151
I00
sS'group_name'
p6152
Nsa(dp6153
S'description'
p6154
S'Initial values to initialize the scalar variable.\n'
p6155
sS'cpp_type'
p6156
S'std::__1::vector<double, std::__1::allocator<double> >'
p6157
sS'default'
p6158
g3
sS'name'
p6159
S'values'
p6160
sS'required'
p6161
I01
sS'group_name'
p6162
Nsa(dp6163
S'description'
p6164
S'The variable this initial condition is supposed to provide values for.\n'
p6165
sS'cpp_type'
p6166
S'VariableName'
p6167
sS'default'
p6168
g3
sS'name'
p6169
S'variable'
p6170
sS'required'
p6171
I00
sS'group_name'
p6172
NsasS'name'
p6173
S'/AuxVariables/*/InitialCondition/<type>/ScalarComponentIC'
p6174
sa(dp6175
S'description'
p6176
g3
sS'subblocks'
p6177
NsS'parameters'
p6178
(lp6179
(dp6180
S'description'
p6181
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6182
sS'cpp_type'
p6183
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6184
sS'default'
p6185
g3
sS'name'
p6186
S'control_tags'
p6187
sS'required'
p6188
I00
sS'group_name'
p6189
S'Advanced'
p6190
sa(dp6191
S'description'
p6192
S'Set the enabled status of the MooseObject.\n'
p6193
sS'cpp_type'
p6194
S'bool'
p6195
sS'default'
p6196
S'1'
p6197
sS'name'
p6198
S'enable'
p6199
sS'required'
p6200
I00
sS'group_name'
p6201
S'Advanced'
p6202
sa(dp6203
S'description'
p6204
g3
sS'cpp_type'
p6205
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6206
sS'default'
p6207
S'ScalarConstantIC'
p6208
sS'name'
p6209
S'type'
p6210
sS'required'
p6211
I00
sS'group_name'
p6212
Nsa(dp6213
S'description'
p6214
g3
sS'cpp_type'
p6215
S'double'
p6216
sS'default'
p6217
S'0'
p6218
sS'name'
p6219
S'value'
p6220
sS'required'
p6221
I00
sS'group_name'
p6222
Nsa(dp6223
S'description'
p6224
S'The variable this initial condition is supposed to provide values for.\n'
p6225
sS'cpp_type'
p6226
S'VariableName'
p6227
sS'default'
p6228
g3
sS'name'
p6229
S'variable'
p6230
sS'required'
p6231
I00
sS'group_name'
p6232
NsasS'name'
p6233
S'/AuxVariables/*/InitialCondition/<type>/ScalarConstantIC'
p6234
sasS'parameters'
p6235
NsS'name'
p6236
S'/AuxVariables/*/InitialCondition/<type>'
p6237
sasS'parameters'
p6238
(lp6239
(dp6240
S'description'
p6241
S'A string representing the Moose Object that will be built by this Action\n'
p6242
sS'cpp_type'
p6243
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6244
sS'default'
p6245
g3
sS'name'
p6246
S'type'
p6247
sS'required'
p6248
I01
sS'group_name'
p6249
NsasS'name'
p6250
S'/AuxVariables/*/InitialCondition'
p6251
sasS'parameters'
p6252
(lp6253
(dp6254
S'description'
p6255
S'The block id where this variable lives\n'
p6256
sS'cpp_type'
p6257
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p6258
sS'default'
p6259
g3
sS'name'
p6260
S'block'
p6261
sS'required'
p6262
I00
sS'group_name'
p6263
Nsa(dp6264
S'name'
p6265
S'family'
p6266
sS'cpp_type'
p6267
S'MooseEnum'
p6268
sS'default'
p6269
S'LAGRANGE'
p6270
sS'description'
p6271
S'Specifies the family of FE shape functions to use for this variable\n'
p6272
sS'required'
p6273
I00
sS'options'
p6274
S'LAGRANGE MONOMIAL SCALAR'
p6275
sS'group_name'
p6276
Nsa(dp6277
S'description'
p6278
S'Specifies the initial condition for this variable\n'
p6279
sS'cpp_type'
p6280
S'double'
p6281
sS'default'
p6282
g3
sS'name'
p6283
S'initial_condition'
p6284
sS'required'
p6285
I00
sS'group_name'
p6286
Nsa(dp6287
S'name'
p6288
S'order'
p6289
sS'cpp_type'
p6290
S'MooseEnum'
p6291
sS'default'
p6292
S'FIRST'
p6293
sS'description'
p6294
S'Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n'
p6295
sS'required'
p6296
I00
sS'options'
p6297
S'CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH'
p6298
sS'group_name'
p6299
Nsa(dp6300
S'description'
p6301
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p6302
sS'cpp_type'
p6303
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p6304
sS'default'
p6305
g3
sS'name'
p6306
S'outputs'
p6307
sS'required'
p6308
I00
sS'group_name'
p6309
S'Advanced'
p6310
sa(dp6311
S'description'
p6312
S'Gives the timestep (or "LATEST") for which to read a solution from a file for a given variable. (Default: LATEST)\n'
p6313
sS'cpp_type'
p6314
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6315
sS'default'
p6316
S'LATEST'
p6317
sS'name'
p6318
S'initial_from_file_timestep'
p6319
sS'required'
p6320
I00
sS'group_name'
p6321
S'Initial From File'
p6322
sa(dp6323
S'description'
p6324
S'Gives the name of a variable for which to read an initial condition from a mesh file\n'
p6325
sS'cpp_type'
p6326
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6327
sS'default'
p6328
g3
sS'name'
p6329
S'initial_from_file_var'
p6330
sS'required'
p6331
I00
sS'group_name'
p6332
S'Initial From File'
p6333
sasS'name'
p6334
S'/AuxVariables/*'
p6335
sasS'parameters'
p6336
NsS'name'
p6337
S'/AuxVariables'
p6338
sa(dp6339
S'description'
p6340
g3
sS'subblocks'
p6341
(lp6342
(dp6343
S'description'
p6344
g3
sS'subblocks'
p6345
NsS'parameters'
p6346
(lp6347
(dp6348
S'description'
p6349
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6350
sS'cpp_type'
p6351
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6352
sS'default'
p6353
g3
sS'name'
p6354
S'boundary'
p6355
sS'required'
p6356
I01
sS'group_name'
p6357
Nsa(dp6358
S'description'
p6359
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6360
sS'cpp_type'
p6361
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6362
sS'default'
p6363
g3
sS'name'
p6364
S'control_tags'
p6365
sS'required'
p6366
I00
sS'group_name'
p6367
S'Advanced'
p6368
sa(dp6369
S'description'
p6370
S'Set the enabled status of the MooseObject.\n'
p6371
sS'cpp_type'
p6372
S'bool'
p6373
sS'default'
p6374
S'1'
p6375
sS'name'
p6376
S'enable'
p6377
sS'required'
p6378
I00
sS'group_name'
p6379
S'Advanced'
p6380
sa(dp6381
S'description'
p6382
S'Determines whether this object is calculated using an implicit or explicit form\n'
p6383
sS'cpp_type'
p6384
S'bool'
p6385
sS'default'
p6386
S'1'
p6387
sS'name'
p6388
S'implicit'
p6389
sS'required'
p6390
I00
sS'group_name'
p6391
S'Advanced'
p6392
sa(dp6393
S'description'
p6394
S'A string representing the Moose Object that will be built by this Action\n'
p6395
sS'cpp_type'
p6396
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6397
sS'default'
p6398
g3
sS'name'
p6399
S'type'
p6400
sS'required'
p6401
I01
sS'group_name'
p6402
Nsa(dp6403
S'description'
p6404
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6405
sS'cpp_type'
p6406
S'bool'
p6407
sS'default'
p6408
S'0'
p6409
sS'name'
p6410
S'use_displaced_mesh'
p6411
sS'required'
p6412
I00
sS'group_name'
p6413
S'Advanced'
p6414
sa(dp6415
S'description'
p6416
S'The name of the variable that this boundary condition applies to\n'
p6417
sS'cpp_type'
p6418
S'NonlinearVariableName'
p6419
sS'default'
p6420
g3
sS'name'
p6421
S'variable'
p6422
sS'required'
p6423
I01
sS'group_name'
p6424
NsasS'name'
p6425
S'/BCs/*'
p6426
sa(dp6427
S'description'
p6428
g3
sS'subblocks'
p6429
NsS'parameters'
p6430
(lp6431
(dp6432
S'description'
p6433
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6434
sS'cpp_type'
p6435
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6436
sS'default'
p6437
g3
sS'name'
p6438
S'boundary'
p6439
sS'required'
p6440
I01
sS'group_name'
p6441
Nsa(dp6442
S'description'
p6443
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6444
sS'cpp_type'
p6445
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6446
sS'default'
p6447
g3
sS'name'
p6448
S'control_tags'
p6449
sS'required'
p6450
I00
sS'group_name'
p6451
S'Advanced'
p6452
sa(dp6453
S'description'
p6454
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6455
sS'cpp_type'
p6456
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6457
sS'default'
p6458
g3
sS'name'
p6459
S'diag_save_in'
p6460
sS'required'
p6461
I00
sS'group_name'
p6462
S'Advanced'
p6463
sa(dp6464
S'description'
p6465
g3
sS'cpp_type'
p6466
S'double'
p6467
sS'default'
p6468
S'0'
p6469
sS'name'
p6470
S'duration'
p6471
sS'required'
p6472
I00
sS'group_name'
p6473
Nsa(dp6474
S'description'
p6475
S'Set the enabled status of the MooseObject.\n'
p6476
sS'cpp_type'
p6477
S'bool'
p6478
sS'default'
p6479
S'1'
p6480
sS'name'
p6481
S'enable'
p6482
sS'required'
p6483
I00
sS'group_name'
p6484
S'Advanced'
p6485
sa(dp6486
S'description'
p6487
g3
sS'cpp_type'
p6488
S'double'
p6489
sS'default'
p6490
S'500'
p6491
sS'name'
p6492
S'final'
p6493
sS'required'
p6494
I00
sS'group_name'
p6495
Nsa(dp6496
S'description'
p6497
S'Determines whether this object is calculated using an implicit or explicit form\n'
p6498
sS'cpp_type'
p6499
S'bool'
p6500
sS'default'
p6501
S'1'
p6502
sS'name'
p6503
S'implicit'
p6504
sS'required'
p6505
I00
sS'group_name'
p6506
S'Advanced'
p6507
sa(dp6508
S'description'
p6509
g3
sS'cpp_type'
p6510
S'double'
p6511
sS'default'
p6512
S'500'
p6513
sS'name'
p6514
S'initial'
p6515
sS'required'
p6516
I00
sS'group_name'
p6517
Nsa(dp6518
S'description'
p6519
g3
sS'cpp_type'
p6520
S'double'
p6521
sS'default'
p6522
S'7500'
p6523
sS'name'
p6524
S'rate'
p6525
sS'required'
p6526
I00
sS'group_name'
p6527
Nsa(dp6528
S'description'
p6529
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6530
sS'cpp_type'
p6531
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6532
sS'default'
p6533
g3
sS'name'
p6534
S'save_in'
p6535
sS'required'
p6536
I00
sS'group_name'
p6537
S'Advanced'
p6538
sa(dp6539
S'description'
p6540
S'The seed for the master random number generator\n'
p6541
sS'cpp_type'
p6542
S'unsigned int'
p6543
sS'default'
p6544
S'0'
p6545
sS'name'
p6546
S'seed'
p6547
sS'required'
p6548
I00
sS'group_name'
p6549
S'Advanced'
p6550
sa(dp6551
S'description'
p6552
g3
sS'cpp_type'
p6553
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6554
sS'default'
p6555
S'ConvectiveFluxBC'
p6556
sS'name'
p6557
S'type'
p6558
sS'required'
p6559
I00
sS'group_name'
p6560
Nsa(dp6561
S'description'
p6562
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6563
sS'cpp_type'
p6564
S'bool'
p6565
sS'default'
p6566
S'0'
p6567
sS'name'
p6568
S'use_displaced_mesh'
p6569
sS'required'
p6570
I00
sS'group_name'
p6571
S'Advanced'
p6572
sa(dp6573
S'description'
p6574
S'The name of the variable that this boundary condition applies to\n'
p6575
sS'cpp_type'
p6576
S'NonlinearVariableName'
p6577
sS'default'
p6578
g3
sS'name'
p6579
S'variable'
p6580
sS'required'
p6581
I01
sS'group_name'
p6582
NsasS'name'
p6583
S'/BCs/ConvectiveFluxBC'
p6584
sa(dp6585
S'description'
p6586
g3
sS'subblocks'
p6587
NsS'parameters'
p6588
(lp6589
(dp6590
S'description'
p6591
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6592
sS'cpp_type'
p6593
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6594
sS'default'
p6595
g3
sS'name'
p6596
S'boundary'
p6597
sS'required'
p6598
I01
sS'group_name'
p6599
Nsa(dp6600
S'description'
p6601
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6602
sS'cpp_type'
p6603
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6604
sS'default'
p6605
g3
sS'name'
p6606
S'control_tags'
p6607
sS'required'
p6608
I00
sS'group_name'
p6609
S'Advanced'
p6610
sa(dp6611
S'description'
p6612
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6613
sS'cpp_type'
p6614
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6615
sS'default'
p6616
g3
sS'name'
p6617
S'diag_save_in'
p6618
sS'required'
p6619
I00
sS'group_name'
p6620
S'Advanced'
p6621
sa(dp6622
S'description'
p6623
S'The diffusion (or thermal conductivity or viscosity) coefficient.\n'
p6624
sS'cpp_type'
p6625
S'MaterialPropertyName'
p6626
sS'default'
p6627
S'1'
p6628
sS'name'
p6629
S'diff'
p6630
sS'required'
p6631
I00
sS'group_name'
p6632
Nsa(dp6633
S'description'
p6634
S'Set the enabled status of the MooseObject.\n'
p6635
sS'cpp_type'
p6636
S'bool'
p6637
sS'default'
p6638
S'1'
p6639
sS'name'
p6640
S'enable'
p6641
sS'required'
p6642
I00
sS'group_name'
p6643
S'Advanced'
p6644
sa(dp6645
S'description'
p6646
S'Epsilon\n'
p6647
sS'cpp_type'
p6648
S'double'
p6649
sS'default'
p6650
g3
sS'name'
p6651
S'epsilon'
p6652
sS'required'
p6653
I01
sS'group_name'
p6654
Nsa(dp6655
S'description'
p6656
S'The forcing function.\n'
p6657
sS'cpp_type'
p6658
S'FunctionName'
p6659
sS'default'
p6660
g3
sS'name'
p6661
S'function'
p6662
sS'required'
p6663
I01
sS'group_name'
p6664
Nsa(dp6665
S'description'
p6666
S'Determines whether this object is calculated using an implicit or explicit form\n'
p6667
sS'cpp_type'
p6668
S'bool'
p6669
sS'default'
p6670
S'1'
p6671
sS'name'
p6672
S'implicit'
p6673
sS'required'
p6674
I00
sS'group_name'
p6675
S'Advanced'
p6676
sa(dp6677
S'description'
p6678
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6679
sS'cpp_type'
p6680
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6681
sS'default'
p6682
g3
sS'name'
p6683
S'save_in'
p6684
sS'required'
p6685
I00
sS'group_name'
p6686
S'Advanced'
p6687
sa(dp6688
S'description'
p6689
S'The seed for the master random number generator\n'
p6690
sS'cpp_type'
p6691
S'unsigned int'
p6692
sS'default'
p6693
S'0'
p6694
sS'name'
p6695
S'seed'
p6696
sS'required'
p6697
I00
sS'group_name'
p6698
S'Advanced'
p6699
sa(dp6700
S'description'
p6701
S'Sigma\n'
p6702
sS'cpp_type'
p6703
S'double'
p6704
sS'default'
p6705
g3
sS'name'
p6706
S'sigma'
p6707
sS'required'
p6708
I01
sS'group_name'
p6709
Nsa(dp6710
S'description'
p6711
g3
sS'cpp_type'
p6712
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6713
sS'default'
p6714
S'DGFunctionDiffusionDirichletBC'
p6715
sS'name'
p6716
S'type'
p6717
sS'required'
p6718
I00
sS'group_name'
p6719
Nsa(dp6720
S'description'
p6721
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6722
sS'cpp_type'
p6723
S'bool'
p6724
sS'default'
p6725
S'0'
p6726
sS'name'
p6727
S'use_displaced_mesh'
p6728
sS'required'
p6729
I00
sS'group_name'
p6730
S'Advanced'
p6731
sa(dp6732
S'description'
p6733
S'The value the variable should have on the boundary\n'
p6734
sS'cpp_type'
p6735
S'double'
p6736
sS'default'
p6737
S'0'
p6738
sS'name'
p6739
S'value'
p6740
sS'required'
p6741
I00
sS'group_name'
p6742
Nsa(dp6743
S'description'
p6744
S'The name of the variable that this boundary condition applies to\n'
p6745
sS'cpp_type'
p6746
S'NonlinearVariableName'
p6747
sS'default'
p6748
g3
sS'name'
p6749
S'variable'
p6750
sS'required'
p6751
I01
sS'group_name'
p6752
NsasS'name'
p6753
S'/BCs/DGFunctionDiffusionDirichletBC'
p6754
sa(dp6755
S'description'
p6756
g3
sS'subblocks'
p6757
NsS'parameters'
p6758
(lp6759
(dp6760
S'description'
p6761
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6762
sS'cpp_type'
p6763
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6764
sS'default'
p6765
g3
sS'name'
p6766
S'boundary'
p6767
sS'required'
p6768
I01
sS'group_name'
p6769
Nsa(dp6770
S'description'
p6771
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6772
sS'cpp_type'
p6773
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6774
sS'default'
p6775
g3
sS'name'
p6776
S'control_tags'
p6777
sS'required'
p6778
I00
sS'group_name'
p6779
S'Advanced'
p6780
sa(dp6781
S'description'
p6782
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6783
sS'cpp_type'
p6784
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6785
sS'default'
p6786
g3
sS'name'
p6787
S'diag_save_in'
p6788
sS'required'
p6789
I00
sS'group_name'
p6790
S'Advanced'
p6791
sa(dp6792
S'description'
p6793
S'Set the enabled status of the MooseObject.\n'
p6794
sS'cpp_type'
p6795
S'bool'
p6796
sS'default'
p6797
S'1'
p6798
sS'name'
p6799
S'enable'
p6800
sS'required'
p6801
I00
sS'group_name'
p6802
S'Advanced'
p6803
sa(dp6804
S'description'
p6805
S'Determines whether this object is calculated using an implicit or explicit form\n'
p6806
sS'cpp_type'
p6807
S'bool'
p6808
sS'default'
p6809
S'1'
p6810
sS'name'
p6811
S'implicit'
p6812
sS'required'
p6813
I00
sS'group_name'
p6814
S'Advanced'
p6815
sa(dp6816
S'description'
p6817
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6818
sS'cpp_type'
p6819
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6820
sS'default'
p6821
g3
sS'name'
p6822
S'save_in'
p6823
sS'required'
p6824
I00
sS'group_name'
p6825
S'Advanced'
p6826
sa(dp6827
S'description'
p6828
S'The seed for the master random number generator\n'
p6829
sS'cpp_type'
p6830
S'unsigned int'
p6831
sS'default'
p6832
S'0'
p6833
sS'name'
p6834
S'seed'
p6835
sS'required'
p6836
I00
sS'group_name'
p6837
S'Advanced'
p6838
sa(dp6839
S'description'
p6840
g3
sS'cpp_type'
p6841
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6842
sS'default'
p6843
S'DiffusionFluxBC'
p6844
sS'name'
p6845
S'type'
p6846
sS'required'
p6847
I00
sS'group_name'
p6848
Nsa(dp6849
S'description'
p6850
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6851
sS'cpp_type'
p6852
S'bool'
p6853
sS'default'
p6854
S'0'
p6855
sS'name'
p6856
S'use_displaced_mesh'
p6857
sS'required'
p6858
I00
sS'group_name'
p6859
S'Advanced'
p6860
sa(dp6861
S'description'
p6862
S'The name of the variable that this boundary condition applies to\n'
p6863
sS'cpp_type'
p6864
S'NonlinearVariableName'
p6865
sS'default'
p6866
g3
sS'name'
p6867
S'variable'
p6868
sS'required'
p6869
I01
sS'group_name'
p6870
NsasS'name'
p6871
S'/BCs/DiffusionFluxBC'
p6872
sa(dp6873
S'description'
p6874
g3
sS'subblocks'
p6875
NsS'parameters'
p6876
(lp6877
(dp6878
S'description'
p6879
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6880
sS'cpp_type'
p6881
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6882
sS'default'
p6883
g3
sS'name'
p6884
S'boundary'
p6885
sS'required'
p6886
I01
sS'group_name'
p6887
Nsa(dp6888
S'description'
p6889
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6890
sS'cpp_type'
p6891
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6892
sS'default'
p6893
g3
sS'name'
p6894
S'control_tags'
p6895
sS'required'
p6896
I00
sS'group_name'
p6897
S'Advanced'
p6898
sa(dp6899
S'description'
p6900
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6901
sS'cpp_type'
p6902
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6903
sS'default'
p6904
g3
sS'name'
p6905
S'diag_save_in'
p6906
sS'required'
p6907
I00
sS'group_name'
p6908
Nsa(dp6909
S'description'
p6910
S'Set the enabled status of the MooseObject.\n'
p6911
sS'cpp_type'
p6912
S'bool'
p6913
sS'default'
p6914
S'1'
p6915
sS'name'
p6916
S'enable'
p6917
sS'required'
p6918
I00
sS'group_name'
p6919
S'Advanced'
p6920
sa(dp6921
S'description'
p6922
S'Determines whether this object is calculated using an implicit or explicit form\n'
p6923
sS'cpp_type'
p6924
S'bool'
p6925
sS'default'
p6926
S'1'
p6927
sS'name'
p6928
S'implicit'
p6929
sS'required'
p6930
I00
sS'group_name'
p6931
S'Advanced'
p6932
sa(dp6933
S'description'
p6934
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6935
sS'cpp_type'
p6936
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6937
sS'default'
p6938
g3
sS'name'
p6939
S'save_in'
p6940
sS'required'
p6941
I00
sS'group_name'
p6942
Nsa(dp6943
S'description'
p6944
S'The seed for the master random number generator\n'
p6945
sS'cpp_type'
p6946
S'unsigned int'
p6947
sS'default'
p6948
S'0'
p6949
sS'name'
p6950
S'seed'
p6951
sS'required'
p6952
I00
sS'group_name'
p6953
S'Advanced'
p6954
sa(dp6955
S'description'
p6956
g3
sS'cpp_type'
p6957
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6958
sS'default'
p6959
S'DirichletBC'
p6960
sS'name'
p6961
S'type'
p6962
sS'required'
p6963
I00
sS'group_name'
p6964
Nsa(dp6965
S'description'
p6966
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6967
sS'cpp_type'
p6968
S'bool'
p6969
sS'default'
p6970
S'0'
p6971
sS'name'
p6972
S'use_displaced_mesh'
p6973
sS'required'
p6974
I00
sS'group_name'
p6975
S'Advanced'
p6976
sa(dp6977
S'description'
p6978
S'Value of the BC\n'
p6979
sS'cpp_type'
p6980
S'double'
p6981
sS'default'
p6982
g3
sS'name'
p6983
S'value'
p6984
sS'required'
p6985
I01
sS'group_name'
p6986
Nsa(dp6987
S'description'
p6988
S'The name of the variable that this boundary condition applies to\n'
p6989
sS'cpp_type'
p6990
S'NonlinearVariableName'
p6991
sS'default'
p6992
g3
sS'name'
p6993
S'variable'
p6994
sS'required'
p6995
I01
sS'group_name'
p6996
NsasS'name'
p6997
S'/BCs/DirichletBC'
p6998
sa(dp6999
S'description'
p7000
g3
sS'subblocks'
p7001
NsS'parameters'
p7002
(lp7003
(dp7004
S'description'
p7005
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7006
sS'cpp_type'
p7007
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7008
sS'default'
p7009
g3
sS'name'
p7010
S'boundary'
p7011
sS'required'
p7012
I01
sS'group_name'
p7013
Nsa(dp7014
S'description'
p7015
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7016
sS'cpp_type'
p7017
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7018
sS'default'
p7019
g3
sS'name'
p7020
S'control_tags'
p7021
sS'required'
p7022
I00
sS'group_name'
p7023
S'Advanced'
p7024
sa(dp7025
S'description'
p7026
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7027
sS'cpp_type'
p7028
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7029
sS'default'
p7030
g3
sS'name'
p7031
S'diag_save_in'
p7032
sS'required'
p7033
I00
sS'group_name'
p7034
Nsa(dp7035
S'description'
p7036
S'Set the enabled status of the MooseObject.\n'
p7037
sS'cpp_type'
p7038
S'bool'
p7039
sS'default'
p7040
S'1'
p7041
sS'name'
p7042
S'enable'
p7043
sS'required'
p7044
I00
sS'group_name'
p7045
S'Advanced'
p7046
sa(dp7047
S'description'
p7048
S'The forcing function.\n'
p7049
sS'cpp_type'
p7050
S'FunctionName'
p7051
sS'default'
p7052
g3
sS'name'
p7053
S'function'
p7054
sS'required'
p7055
I01
sS'group_name'
p7056
Nsa(dp7057
S'description'
p7058
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7059
sS'cpp_type'
p7060
S'bool'
p7061
sS'default'
p7062
S'1'
p7063
sS'name'
p7064
S'implicit'
p7065
sS'required'
p7066
I00
sS'group_name'
p7067
S'Advanced'
p7068
sa(dp7069
S'description'
p7070
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7071
sS'cpp_type'
p7072
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7073
sS'default'
p7074
g3
sS'name'
p7075
S'save_in'
p7076
sS'required'
p7077
I00
sS'group_name'
p7078
Nsa(dp7079
S'description'
p7080
S'The seed for the master random number generator\n'
p7081
sS'cpp_type'
p7082
S'unsigned int'
p7083
sS'default'
p7084
S'0'
p7085
sS'name'
p7086
S'seed'
p7087
sS'required'
p7088
I00
sS'group_name'
p7089
S'Advanced'
p7090
sa(dp7091
S'description'
p7092
g3
sS'cpp_type'
p7093
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7094
sS'default'
p7095
S'FunctionDirichletBC'
p7096
sS'name'
p7097
S'type'
p7098
sS'required'
p7099
I00
sS'group_name'
p7100
Nsa(dp7101
S'description'
p7102
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7103
sS'cpp_type'
p7104
S'bool'
p7105
sS'default'
p7106
S'0'
p7107
sS'name'
p7108
S'use_displaced_mesh'
p7109
sS'required'
p7110
I00
sS'group_name'
p7111
S'Advanced'
p7112
sa(dp7113
S'description'
p7114
S'The name of the variable that this boundary condition applies to\n'
p7115
sS'cpp_type'
p7116
S'NonlinearVariableName'
p7117
sS'default'
p7118
g3
sS'name'
p7119
S'variable'
p7120
sS'required'
p7121
I01
sS'group_name'
p7122
NsasS'name'
p7123
S'/BCs/FunctionDirichletBC'
p7124
sa(dp7125
S'description'
p7126
g3
sS'subblocks'
p7127
NsS'parameters'
p7128
(lp7129
(dp7130
S'description'
p7131
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7132
sS'cpp_type'
p7133
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7134
sS'default'
p7135
g3
sS'name'
p7136
S'boundary'
p7137
sS'required'
p7138
I01
sS'group_name'
p7139
Nsa(dp7140
S'description'
p7141
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7142
sS'cpp_type'
p7143
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7144
sS'default'
p7145
g3
sS'name'
p7146
S'control_tags'
p7147
sS'required'
p7148
I00
sS'group_name'
p7149
S'Advanced'
p7150
sa(dp7151
S'description'
p7152
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7153
sS'cpp_type'
p7154
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7155
sS'default'
p7156
g3
sS'name'
p7157
S'diag_save_in'
p7158
sS'required'
p7159
I00
sS'group_name'
p7160
S'Advanced'
p7161
sa(dp7162
S'description'
p7163
S'Set the enabled status of the MooseObject.\n'
p7164
sS'cpp_type'
p7165
S'bool'
p7166
sS'default'
p7167
S'1'
p7168
sS'name'
p7169
S'enable'
p7170
sS'required'
p7171
I00
sS'group_name'
p7172
S'Advanced'
p7173
sa(dp7174
S'description'
p7175
S'The function.\n'
p7176
sS'cpp_type'
p7177
S'FunctionName'
p7178
sS'default'
p7179
g3
sS'name'
p7180
S'function'
p7181
sS'required'
p7182
I01
sS'group_name'
p7183
Nsa(dp7184
S'description'
p7185
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7186
sS'cpp_type'
p7187
S'bool'
p7188
sS'default'
p7189
S'1'
p7190
sS'name'
p7191
S'implicit'
p7192
sS'required'
p7193
I00
sS'group_name'
p7194
S'Advanced'
p7195
sa(dp7196
S'description'
p7197
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7198
sS'cpp_type'
p7199
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7200
sS'default'
p7201
g3
sS'name'
p7202
S'save_in'
p7203
sS'required'
p7204
I00
sS'group_name'
p7205
S'Advanced'
p7206
sa(dp7207
S'description'
p7208
S'The seed for the master random number generator\n'
p7209
sS'cpp_type'
p7210
S'unsigned int'
p7211
sS'default'
p7212
S'0'
p7213
sS'name'
p7214
S'seed'
p7215
sS'required'
p7216
I00
sS'group_name'
p7217
S'Advanced'
p7218
sa(dp7219
S'description'
p7220
g3
sS'cpp_type'
p7221
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7222
sS'default'
p7223
S'FunctionNeumannBC'
p7224
sS'name'
p7225
S'type'
p7226
sS'required'
p7227
I00
sS'group_name'
p7228
Nsa(dp7229
S'description'
p7230
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7231
sS'cpp_type'
p7232
S'bool'
p7233
sS'default'
p7234
S'0'
p7235
sS'name'
p7236
S'use_displaced_mesh'
p7237
sS'required'
p7238
I00
sS'group_name'
p7239
S'Advanced'
p7240
sa(dp7241
S'description'
p7242
S'The name of the variable that this boundary condition applies to\n'
p7243
sS'cpp_type'
p7244
S'NonlinearVariableName'
p7245
sS'default'
p7246
g3
sS'name'
p7247
S'variable'
p7248
sS'required'
p7249
I01
sS'group_name'
p7250
NsasS'name'
p7251
S'/BCs/FunctionNeumannBC'
p7252
sa(dp7253
S'description'
p7254
g3
sS'subblocks'
p7255
NsS'parameters'
p7256
(lp7257
(dp7258
S'description'
p7259
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7260
sS'cpp_type'
p7261
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7262
sS'default'
p7263
g3
sS'name'
p7264
S'boundary'
p7265
sS'required'
p7266
I01
sS'group_name'
p7267
Nsa(dp7268
S'description'
p7269
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7270
sS'cpp_type'
p7271
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7272
sS'default'
p7273
g3
sS'name'
p7274
S'control_tags'
p7275
sS'required'
p7276
I00
sS'group_name'
p7277
S'Advanced'
p7278
sa(dp7279
S'description'
p7280
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7281
sS'cpp_type'
p7282
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7283
sS'default'
p7284
g3
sS'name'
p7285
S'diag_save_in'
p7286
sS'required'
p7287
I00
sS'group_name'
p7288
S'Advanced'
p7289
sa(dp7290
S'description'
p7291
S'Set the enabled status of the MooseObject.\n'
p7292
sS'cpp_type'
p7293
S'bool'
p7294
sS'default'
p7295
S'1'
p7296
sS'name'
p7297
S'enable'
p7298
sS'required'
p7299
I00
sS'group_name'
p7300
S'Advanced'
p7301
sa(dp7302
S'description'
p7303
S'Forcing function\n'
p7304
sS'cpp_type'
p7305
S'FunctionName'
p7306
sS'default'
p7307
g3
sS'name'
p7308
S'function'
p7309
sS'required'
p7310
I01
sS'group_name'
p7311
Nsa(dp7312
S'description'
p7313
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7314
sS'cpp_type'
p7315
S'bool'
p7316
sS'default'
p7317
S'1'
p7318
sS'name'
p7319
S'implicit'
p7320
sS'required'
p7321
I00
sS'group_name'
p7322
S'Advanced'
p7323
sa(dp7324
S'description'
p7325
S'Penalty scalar\n'
p7326
sS'cpp_type'
p7327
S'double'
p7328
sS'default'
p7329
g3
sS'name'
p7330
S'penalty'
p7331
sS'required'
p7332
I01
sS'group_name'
p7333
Nsa(dp7334
S'description'
p7335
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7336
sS'cpp_type'
p7337
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7338
sS'default'
p7339
g3
sS'name'
p7340
S'save_in'
p7341
sS'required'
p7342
I00
sS'group_name'
p7343
S'Advanced'
p7344
sa(dp7345
S'description'
p7346
S'The seed for the master random number generator\n'
p7347
sS'cpp_type'
p7348
S'unsigned int'
p7349
sS'default'
p7350
S'0'
p7351
sS'name'
p7352
S'seed'
p7353
sS'required'
p7354
I00
sS'group_name'
p7355
S'Advanced'
p7356
sa(dp7357
S'description'
p7358
g3
sS'cpp_type'
p7359
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7360
sS'default'
p7361
S'FunctionPenaltyDirichletBC'
p7362
sS'name'
p7363
S'type'
p7364
sS'required'
p7365
I00
sS'group_name'
p7366
Nsa(dp7367
S'description'
p7368
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7369
sS'cpp_type'
p7370
S'bool'
p7371
sS'default'
p7372
S'0'
p7373
sS'name'
p7374
S'use_displaced_mesh'
p7375
sS'required'
p7376
I00
sS'group_name'
p7377
S'Advanced'
p7378
sa(dp7379
S'description'
p7380
S'The name of the variable that this boundary condition applies to\n'
p7381
sS'cpp_type'
p7382
S'NonlinearVariableName'
p7383
sS'default'
p7384
g3
sS'name'
p7385
S'variable'
p7386
sS'required'
p7387
I01
sS'group_name'
p7388
NsasS'name'
p7389
S'/BCs/FunctionPenaltyDirichletBC'
p7390
sa(dp7391
S'description'
p7392
g3
sS'subblocks'
p7393
NsS'parameters'
p7394
(lp7395
(dp7396
S'description'
p7397
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7398
sS'cpp_type'
p7399
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7400
sS'default'
p7401
g3
sS'name'
p7402
S'boundary'
p7403
sS'required'
p7404
I01
sS'group_name'
p7405
Nsa(dp7406
S'description'
p7407
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7408
sS'cpp_type'
p7409
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7410
sS'default'
p7411
g3
sS'name'
p7412
S'control_tags'
p7413
sS'required'
p7414
I00
sS'group_name'
p7415
S'Advanced'
p7416
sa(dp7417
S'description'
p7418
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7419
sS'cpp_type'
p7420
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7421
sS'default'
p7422
g3
sS'name'
p7423
S'diag_save_in'
p7424
sS'required'
p7425
I00
sS'group_name'
p7426
Nsa(dp7427
S'description'
p7428
S'Set the enabled status of the MooseObject.\n'
p7429
sS'cpp_type'
p7430
S'bool'
p7431
sS'default'
p7432
S'1'
p7433
sS'name'
p7434
S'enable'
p7435
sS'required'
p7436
I00
sS'group_name'
p7437
S'Advanced'
p7438
sa(dp7439
S'description'
p7440
S'The forcing function.\n'
p7441
sS'cpp_type'
p7442
S'FunctionName'
p7443
sS'default'
p7444
g3
sS'name'
p7445
S'function'
p7446
sS'required'
p7447
I01
sS'group_name'
p7448
Nsa(dp7449
S'description'
p7450
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7451
sS'cpp_type'
p7452
S'bool'
p7453
sS'default'
p7454
S'1'
p7455
sS'name'
p7456
S'implicit'
p7457
sS'required'
p7458
I00
sS'group_name'
p7459
S'Advanced'
p7460
sa(dp7461
S'description'
p7462
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7463
sS'cpp_type'
p7464
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7465
sS'default'
p7466
g3
sS'name'
p7467
S'save_in'
p7468
sS'required'
p7469
I00
sS'group_name'
p7470
Nsa(dp7471
S'description'
p7472
S'The seed for the master random number generator\n'
p7473
sS'cpp_type'
p7474
S'unsigned int'
p7475
sS'default'
p7476
S'0'
p7477
sS'name'
p7478
S'seed'
p7479
sS'required'
p7480
I00
sS'group_name'
p7481
S'Advanced'
p7482
sa(dp7483
S'description'
p7484
g3
sS'cpp_type'
p7485
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7486
sS'default'
p7487
S'FunctionPresetBC'
p7488
sS'name'
p7489
S'type'
p7490
sS'required'
p7491
I00
sS'group_name'
p7492
Nsa(dp7493
S'description'
p7494
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7495
sS'cpp_type'
p7496
S'bool'
p7497
sS'default'
p7498
S'0'
p7499
sS'name'
p7500
S'use_displaced_mesh'
p7501
sS'required'
p7502
I00
sS'group_name'
p7503
S'Advanced'
p7504
sa(dp7505
S'description'
p7506
S'The name of the variable that this boundary condition applies to\n'
p7507
sS'cpp_type'
p7508
S'NonlinearVariableName'
p7509
sS'default'
p7510
g3
sS'name'
p7511
S'variable'
p7512
sS'required'
p7513
I01
sS'group_name'
p7514
NsasS'name'
p7515
S'/BCs/FunctionPresetBC'
p7516
sa(dp7517
S'description'
p7518
g3
sS'subblocks'
p7519
NsS'parameters'
p7520
(lp7521
(dp7522
S'description'
p7523
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7524
sS'cpp_type'
p7525
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7526
sS'default'
p7527
g3
sS'name'
p7528
S'boundary'
p7529
sS'required'
p7530
I01
sS'group_name'
p7531
Nsa(dp7532
S'description'
p7533
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7534
sS'cpp_type'
p7535
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7536
sS'default'
p7537
g3
sS'name'
p7538
S'control_tags'
p7539
sS'required'
p7540
I00
sS'group_name'
p7541
S'Advanced'
p7542
sa(dp7543
S'description'
p7544
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7545
sS'cpp_type'
p7546
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7547
sS'default'
p7548
g3
sS'name'
p7549
S'diag_save_in'
p7550
sS'required'
p7551
I00
sS'group_name'
p7552
Nsa(dp7553
S'description'
p7554
S'Set the enabled status of the MooseObject.\n'
p7555
sS'cpp_type'
p7556
S'bool'
p7557
sS'default'
p7558
S'1'
p7559
sS'name'
p7560
S'enable'
p7561
sS'required'
p7562
I00
sS'group_name'
p7563
S'Advanced'
p7564
sa(dp7565
S'description'
p7566
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7567
sS'cpp_type'
p7568
S'bool'
p7569
sS'default'
p7570
S'1'
p7571
sS'name'
p7572
S'implicit'
p7573
sS'required'
p7574
I00
sS'group_name'
p7575
S'Advanced'
p7576
sa(dp7577
S'description'
p7578
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7579
sS'cpp_type'
p7580
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7581
sS'default'
p7582
g3
sS'name'
p7583
S'save_in'
p7584
sS'required'
p7585
I00
sS'group_name'
p7586
Nsa(dp7587
S'description'
p7588
S'The seed for the master random number generator\n'
p7589
sS'cpp_type'
p7590
S'unsigned int'
p7591
sS'default'
p7592
S'0'
p7593
sS'name'
p7594
S'seed'
p7595
sS'required'
p7596
I00
sS'group_name'
p7597
S'Advanced'
p7598
sa(dp7599
S'description'
p7600
g3
sS'cpp_type'
p7601
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7602
sS'default'
p7603
S'MatchedValueBC'
p7604
sS'name'
p7605
S'type'
p7606
sS'required'
p7607
I00
sS'group_name'
p7608
Nsa(dp7609
S'description'
p7610
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7611
sS'cpp_type'
p7612
S'bool'
p7613
sS'default'
p7614
S'0'
p7615
sS'name'
p7616
S'use_displaced_mesh'
p7617
sS'required'
p7618
I00
sS'group_name'
p7619
S'Advanced'
p7620
sa(dp7621
S'description'
p7622
S'The variable whose value we are to match.\n'
p7623
sS'cpp_type'
p7624
S'std::vector<VariableName>'
p7625
sS'default'
p7626
g3
sS'name'
p7627
S'v'
p7628
sS'required'
p7629
I01
sS'group_name'
p7630
Nsa(dp7631
S'description'
p7632
S'The name of the variable that this boundary condition applies to\n'
p7633
sS'cpp_type'
p7634
S'NonlinearVariableName'
p7635
sS'default'
p7636
g3
sS'name'
p7637
S'variable'
p7638
sS'required'
p7639
I01
sS'group_name'
p7640
NsasS'name'
p7641
S'/BCs/MatchedValueBC'
p7642
sa(dp7643
S'description'
p7644
g3
sS'subblocks'
p7645
NsS'parameters'
p7646
(lp7647
(dp7648
S'description'
p7649
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7650
sS'cpp_type'
p7651
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7652
sS'default'
p7653
g3
sS'name'
p7654
S'boundary'
p7655
sS'required'
p7656
I01
sS'group_name'
p7657
Nsa(dp7658
S'description'
p7659
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7660
sS'cpp_type'
p7661
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7662
sS'default'
p7663
g3
sS'name'
p7664
S'control_tags'
p7665
sS'required'
p7666
I00
sS'group_name'
p7667
S'Advanced'
p7668
sa(dp7669
S'description'
p7670
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7671
sS'cpp_type'
p7672
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7673
sS'default'
p7674
g3
sS'name'
p7675
S'diag_save_in'
p7676
sS'required'
p7677
I00
sS'group_name'
p7678
S'Advanced'
p7679
sa(dp7680
S'description'
p7681
S'Set the enabled status of the MooseObject.\n'
p7682
sS'cpp_type'
p7683
S'bool'
p7684
sS'default'
p7685
S'1'
p7686
sS'name'
p7687
S'enable'
p7688
sS'required'
p7689
I00
sS'group_name'
p7690
S'Advanced'
p7691
sa(dp7692
S'description'
p7693
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7694
sS'cpp_type'
p7695
S'bool'
p7696
sS'default'
p7697
S'1'
p7698
sS'name'
p7699
S'implicit'
p7700
sS'required'
p7701
I00
sS'group_name'
p7702
S'Advanced'
p7703
sa(dp7704
S'description'
p7705
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7706
sS'cpp_type'
p7707
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7708
sS'default'
p7709
g3
sS'name'
p7710
S'save_in'
p7711
sS'required'
p7712
I00
sS'group_name'
p7713
S'Advanced'
p7714
sa(dp7715
S'description'
p7716
S'The seed for the master random number generator\n'
p7717
sS'cpp_type'
p7718
S'unsigned int'
p7719
sS'default'
p7720
S'0'
p7721
sS'name'
p7722
S'seed'
p7723
sS'required'
p7724
I00
sS'group_name'
p7725
S'Advanced'
p7726
sa(dp7727
S'description'
p7728
g3
sS'cpp_type'
p7729
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7730
sS'default'
p7731
S'NeumannBC'
p7732
sS'name'
p7733
S'type'
p7734
sS'required'
p7735
I00
sS'group_name'
p7736
Nsa(dp7737
S'description'
p7738
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7739
sS'cpp_type'
p7740
S'bool'
p7741
sS'default'
p7742
S'0'
p7743
sS'name'
p7744
S'use_displaced_mesh'
p7745
sS'required'
p7746
I00
sS'group_name'
p7747
S'Advanced'
p7748
sa(dp7749
S'description'
p7750
S'The value of the gradient on the boundary.\n'
p7751
sS'cpp_type'
p7752
S'double'
p7753
sS'default'
p7754
S'0'
p7755
sS'name'
p7756
S'value'
p7757
sS'required'
p7758
I00
sS'group_name'
p7759
Nsa(dp7760
S'description'
p7761
S'The name of the variable that this boundary condition applies to\n'
p7762
sS'cpp_type'
p7763
S'NonlinearVariableName'
p7764
sS'default'
p7765
g3
sS'name'
p7766
S'variable'
p7767
sS'required'
p7768
I01
sS'group_name'
p7769
NsasS'name'
p7770
S'/BCs/NeumannBC'
p7771
sa(dp7772
S'description'
p7773
g3
sS'subblocks'
p7774
NsS'parameters'
p7775
(lp7776
(dp7777
S'description'
p7778
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7779
sS'cpp_type'
p7780
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7781
sS'default'
p7782
g3
sS'name'
p7783
S'boundary'
p7784
sS'required'
p7785
I01
sS'group_name'
p7786
Nsa(dp7787
S'description'
p7788
S'Component of the Lagrange multiplier\n'
p7789
sS'cpp_type'
p7790
S'unsigned int'
p7791
sS'default'
p7792
g3
sS'name'
p7793
S'component'
p7794
sS'required'
p7795
I01
sS'group_name'
p7796
Nsa(dp7797
S'description'
p7798
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7799
sS'cpp_type'
p7800
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7801
sS'default'
p7802
g3
sS'name'
p7803
S'control_tags'
p7804
sS'required'
p7805
I00
sS'group_name'
p7806
S'Advanced'
p7807
sa(dp7808
S'description'
p7809
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7810
sS'cpp_type'
p7811
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7812
sS'default'
p7813
g3
sS'name'
p7814
S'diag_save_in'
p7815
sS'required'
p7816
I00
sS'group_name'
p7817
S'Advanced'
p7818
sa(dp7819
S'description'
p7820
S'Set the enabled status of the MooseObject.\n'
p7821
sS'cpp_type'
p7822
S'bool'
p7823
sS'default'
p7824
S'1'
p7825
sS'name'
p7826
S'enable'
p7827
sS'required'
p7828
I00
sS'group_name'
p7829
S'Advanced'
p7830
sa(dp7831
S'description'
p7832
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7833
sS'cpp_type'
p7834
S'bool'
p7835
sS'default'
p7836
S'1'
p7837
sS'name'
p7838
S'implicit'
p7839
sS'required'
p7840
I00
sS'group_name'
p7841
S'Advanced'
p7842
sa(dp7843
S'description'
p7844
S'Lagrange multiplier\n'
p7845
sS'cpp_type'
p7846
S'std::vector<VariableName>'
p7847
sS'default'
p7848
g3
sS'name'
p7849
S'lambda'
p7850
sS'required'
p7851
I01
sS'group_name'
p7852
Nsa(dp7853
S'description'
p7854
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7855
sS'cpp_type'
p7856
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7857
sS'default'
p7858
g3
sS'name'
p7859
S'save_in'
p7860
sS'required'
p7861
I00
sS'group_name'
p7862
S'Advanced'
p7863
sa(dp7864
S'description'
p7865
S'The seed for the master random number generator\n'
p7866
sS'cpp_type'
p7867
S'unsigned int'
p7868
sS'default'
p7869
S'0'
p7870
sS'name'
p7871
S'seed'
p7872
sS'required'
p7873
I00
sS'group_name'
p7874
S'Advanced'
p7875
sa(dp7876
S'description'
p7877
g3
sS'cpp_type'
p7878
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7879
sS'default'
p7880
S'OneDEqualValueConstraintBC'
p7881
sS'name'
p7882
S'type'
p7883
sS'required'
p7884
I00
sS'group_name'
p7885
Nsa(dp7886
S'description'
p7887
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7888
sS'cpp_type'
p7889
S'bool'
p7890
sS'default'
p7891
S'0'
p7892
sS'name'
p7893
S'use_displaced_mesh'
p7894
sS'required'
p7895
I00
sS'group_name'
p7896
S'Advanced'
p7897
sa(dp7898
S'description'
p7899
S'The name of the variable that this boundary condition applies to\n'
p7900
sS'cpp_type'
p7901
S'NonlinearVariableName'
p7902
sS'default'
p7903
g3
sS'name'
p7904
S'variable'
p7905
sS'required'
p7906
I01
sS'group_name'
p7907
Nsa(dp7908
S'description'
p7909
S'Variation of the constraint g wrt this surface (+1 or -1). Note: g = value1 - value2 = 0 \n'
p7910
sS'cpp_type'
p7911
S'double'
p7912
sS'default'
p7913
g3
sS'name'
p7914
S'vg'
p7915
sS'required'
p7916
I01
sS'group_name'
p7917
NsasS'name'
p7918
S'/BCs/OneDEqualValueConstraintBC'
p7919
sa(dp7920
S'description'
p7921
g3
sS'subblocks'
p7922
NsS'parameters'
p7923
(lp7924
(dp7925
S'description'
p7926
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7927
sS'cpp_type'
p7928
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7929
sS'default'
p7930
g3
sS'name'
p7931
S'boundary'
p7932
sS'required'
p7933
I01
sS'group_name'
p7934
Nsa(dp7935
S'description'
p7936
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7937
sS'cpp_type'
p7938
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7939
sS'default'
p7940
g3
sS'name'
p7941
S'control_tags'
p7942
sS'required'
p7943
I00
sS'group_name'
p7944
S'Advanced'
p7945
sa(dp7946
S'description'
p7947
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7948
sS'cpp_type'
p7949
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7950
sS'default'
p7951
g3
sS'name'
p7952
S'diag_save_in'
p7953
sS'required'
p7954
I00
sS'group_name'
p7955
S'Advanced'
p7956
sa(dp7957
S'description'
p7958
S'Set the enabled status of the MooseObject.\n'
p7959
sS'cpp_type'
p7960
S'bool'
p7961
sS'default'
p7962
S'1'
p7963
sS'name'
p7964
S'enable'
p7965
sS'required'
p7966
I00
sS'group_name'
p7967
S'Advanced'
p7968
sa(dp7969
S'description'
p7970
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7971
sS'cpp_type'
p7972
S'bool'
p7973
sS'default'
p7974
S'1'
p7975
sS'name'
p7976
S'implicit'
p7977
sS'required'
p7978
I00
sS'group_name'
p7979
S'Advanced'
p7980
sa(dp7981
S'description'
p7982
S'Penalty scalar\n'
p7983
sS'cpp_type'
p7984
S'double'
p7985
sS'default'
p7986
g3
sS'name'
p7987
S'penalty'
p7988
sS'required'
p7989
I01
sS'group_name'
p7990
Nsa(dp7991
S'description'
p7992
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7993
sS'cpp_type'
p7994
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7995
sS'default'
p7996
g3
sS'name'
p7997
S'save_in'
p7998
sS'required'
p7999
I00
sS'group_name'
p8000
S'Advanced'
p8001
sa(dp8002
S'description'
p8003
S'The seed for the master random number generator\n'
p8004
sS'cpp_type'
p8005
S'unsigned int'
p8006
sS'default'
p8007
S'0'
p8008
sS'name'
p8009
S'seed'
p8010
sS'required'
p8011
I00
sS'group_name'
p8012
S'Advanced'
p8013
sa(dp8014
S'description'
p8015
g3
sS'cpp_type'
p8016
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8017
sS'default'
p8018
S'PenaltyDirichletBC'
p8019
sS'name'
p8020
S'type'
p8021
sS'required'
p8022
I00
sS'group_name'
p8023
Nsa(dp8024
S'description'
p8025
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8026
sS'cpp_type'
p8027
S'bool'
p8028
sS'default'
p8029
S'0'
p8030
sS'name'
p8031
S'use_displaced_mesh'
p8032
sS'required'
p8033
I00
sS'group_name'
p8034
S'Advanced'
p8035
sa(dp8036
S'description'
p8037
S'Boundary value of the variable\n'
p8038
sS'cpp_type'
p8039
S'double'
p8040
sS'default'
p8041
S'0'
p8042
sS'name'
p8043
S'value'
p8044
sS'required'
p8045
I00
sS'group_name'
p8046
Nsa(dp8047
S'description'
p8048
S'The name of the variable that this boundary condition applies to\n'
p8049
sS'cpp_type'
p8050
S'NonlinearVariableName'
p8051
sS'default'
p8052
g3
sS'name'
p8053
S'variable'
p8054
sS'required'
p8055
I01
sS'group_name'
p8056
NsasS'name'
p8057
S'/BCs/PenaltyDirichletBC'
p8058
sa(dp8059
S'description'
p8060
g3
sS'subblocks'
p8061
(lp8062
(dp8063
S'description'
p8064
g3
sS'subblocks'
p8065
NsS'parameters'
p8066
(lp8067
(dp8068
S'description'
p8069
S'If using a generated mesh, you can specifiy just the dimension(s) you want to mark as periodic\n'
p8070
sS'cpp_type'
p8071
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8072
sS'default'
p8073
g3
sS'name'
p8074
S'auto_direction'
p8075
sS'required'
p8076
I00
sS'group_name'
p8077
Nsa(dp8078
S'description'
p8079
S'Functions that specify the inverse transformation\n'
p8080
sS'cpp_type'
p8081
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8082
sS'default'
p8083
g3
sS'name'
p8084
S'inv_transform_func'
p8085
sS'required'
p8086
I00
sS'group_name'
p8087
Nsa(dp8088
S'description'
p8089
S'Boundary ID associated with the primary boundary.\n'
p8090
sS'cpp_type'
p8091
S'BoundaryName'
p8092
sS'default'
p8093
g3
sS'name'
p8094
S'primary'
p8095
sS'required'
p8096
I00
sS'group_name'
p8097
Nsa(dp8098
S'description'
p8099
S'Boundary ID associated with the secondary boundary.\n'
p8100
sS'cpp_type'
p8101
S'BoundaryName'
p8102
sS'default'
p8103
g3
sS'name'
p8104
S'secondary'
p8105
sS'required'
p8106
I00
sS'group_name'
p8107
Nsa(dp8108
S'description'
p8109
S'Functions that specify the transformation\n'
p8110
sS'cpp_type'
p8111
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8112
sS'default'
p8113
g3
sS'name'
p8114
S'transform_func'
p8115
sS'required'
p8116
I00
sS'group_name'
p8117
Nsa(dp8118
S'description'
p8119
S'Vector that translates coordinates on the primary boundary to coordinates on the secondary boundary.\n'
p8120
sS'cpp_type'
p8121
S'libMesh::VectorValue<double>'
p8122
sS'default'
p8123
g3
sS'name'
p8124
S'translation'
p8125
sS'required'
p8126
I00
sS'group_name'
p8127
Nsa(dp8128
S'description'
p8129
S'Variable for the periodic boundary\n'
p8130
sS'cpp_type'
p8131
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p8132
sS'default'
p8133
g3
sS'name'
p8134
S'variable'
p8135
sS'required'
p8136
I00
sS'group_name'
p8137
NsasS'name'
p8138
S'/BCs/Periodic/*'
p8139
sasS'parameters'
p8140
NsS'name'
p8141
S'/BCs/Periodic'
p8142
sa(dp8143
S'description'
p8144
g3
sS'subblocks'
p8145
NsS'parameters'
p8146
(lp8147
(dp8148
S'description'
p8149
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8150
sS'cpp_type'
p8151
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8152
sS'default'
p8153
g3
sS'name'
p8154
S'boundary'
p8155
sS'required'
p8156
I01
sS'group_name'
p8157
Nsa(dp8158
S'description'
p8159
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8160
sS'cpp_type'
p8161
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8162
sS'default'
p8163
g3
sS'name'
p8164
S'control_tags'
p8165
sS'required'
p8166
I00
sS'group_name'
p8167
S'Advanced'
p8168
sa(dp8169
S'description'
p8170
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8171
sS'cpp_type'
p8172
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8173
sS'default'
p8174
g3
sS'name'
p8175
S'diag_save_in'
p8176
sS'required'
p8177
I00
sS'group_name'
p8178
Nsa(dp8179
S'description'
p8180
S'Set the enabled status of the MooseObject.\n'
p8181
sS'cpp_type'
p8182
S'bool'
p8183
sS'default'
p8184
S'1'
p8185
sS'name'
p8186
S'enable'
p8187
sS'required'
p8188
I00
sS'group_name'
p8189
S'Advanced'
p8190
sa(dp8191
S'description'
p8192
S'Determines whether this object is calculated using an implicit or explicit form\n'
p8193
sS'cpp_type'
p8194
S'bool'
p8195
sS'default'
p8196
S'1'
p8197
sS'name'
p8198
S'implicit'
p8199
sS'required'
p8200
I00
sS'group_name'
p8201
S'Advanced'
p8202
sa(dp8203
S'description'
p8204
S'The postprocessor to set the value to on the boundary.\n'
p8205
sS'cpp_type'
p8206
S'PostprocessorName'
p8207
sS'default'
p8208
g3
sS'name'
p8209
S'postprocessor'
p8210
sS'required'
p8211
I01
sS'group_name'
p8212
Nsa(dp8213
S'description'
p8214
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8215
sS'cpp_type'
p8216
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8217
sS'default'
p8218
g3
sS'name'
p8219
S'save_in'
p8220
sS'required'
p8221
I00
sS'group_name'
p8222
Nsa(dp8223
S'description'
p8224
S'The seed for the master random number generator\n'
p8225
sS'cpp_type'
p8226
S'unsigned int'
p8227
sS'default'
p8228
S'0'
p8229
sS'name'
p8230
S'seed'
p8231
sS'required'
p8232
I00
sS'group_name'
p8233
S'Advanced'
p8234
sa(dp8235
S'description'
p8236
g3
sS'cpp_type'
p8237
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8238
sS'default'
p8239
S'PostprocessorDirichletBC'
p8240
sS'name'
p8241
S'type'
p8242
sS'required'
p8243
I00
sS'group_name'
p8244
Nsa(dp8245
S'description'
p8246
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8247
sS'cpp_type'
p8248
S'bool'
p8249
sS'default'
p8250
S'0'
p8251
sS'name'
p8252
S'use_displaced_mesh'
p8253
sS'required'
p8254
I00
sS'group_name'
p8255
S'Advanced'
p8256
sa(dp8257
S'description'
p8258
S'The name of the variable that this boundary condition applies to\n'
p8259
sS'cpp_type'
p8260
S'NonlinearVariableName'
p8261
sS'default'
p8262
g3
sS'name'
p8263
S'variable'
p8264
sS'required'
p8265
I01
sS'group_name'
p8266
NsasS'name'
p8267
S'/BCs/PostprocessorDirichletBC'
p8268
sa(dp8269
S'description'
p8270
g3
sS'subblocks'
p8271
NsS'parameters'
p8272
(lp8273
(dp8274
S'description'
p8275
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8276
sS'cpp_type'
p8277
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8278
sS'default'
p8279
g3
sS'name'
p8280
S'boundary'
p8281
sS'required'
p8282
I01
sS'group_name'
p8283
Nsa(dp8284
S'description'
p8285
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8286
sS'cpp_type'
p8287
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8288
sS'default'
p8289
g3
sS'name'
p8290
S'control_tags'
p8291
sS'required'
p8292
I00
sS'group_name'
p8293
S'Advanced'
p8294
sa(dp8295
S'description'
p8296
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8297
sS'cpp_type'
p8298
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8299
sS'default'
p8300
g3
sS'name'
p8301
S'diag_save_in'
p8302
sS'required'
p8303
I00
sS'group_name'
p8304
S'Advanced'
p8305
sa(dp8306
S'description'
p8307
S'Set the enabled status of the MooseObject.\n'
p8308
sS'cpp_type'
p8309
S'bool'
p8310
sS'default'
p8311
S'1'
p8312
sS'name'
p8313
S'enable'
p8314
sS'required'
p8315
I00
sS'group_name'
p8316
S'Advanced'
p8317
sa(dp8318
S'description'
p8319
S'Determines whether this object is calculated using an implicit or explicit form\n'
p8320
sS'cpp_type'
p8321
S'bool'
p8322
sS'default'
p8323
S'1'
p8324
sS'name'
p8325
S'implicit'
p8326
sS'required'
p8327
I00
sS'group_name'
p8328
S'Advanced'
p8329
sa(dp8330
S'description'
p8331
S'The postprocessor to use for value of the gradient on the boundary.\n'
p8332
sS'cpp_type'
p8333
S'PostprocessorName'
p8334
sS'default'
p8335
S'0'
p8336
sS'name'
p8337
S'postprocessor'
p8338
sS'required'
p8339
I00
sS'group_name'
p8340
Nsa(dp8341
S'description'
p8342
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8343
sS'cpp_type'
p8344
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8345
sS'default'
p8346
g3
sS'name'
p8347
S'save_in'
p8348
sS'required'
p8349
I00
sS'group_name'
p8350
S'Advanced'
p8351
sa(dp8352
S'description'
p8353
S'The seed for the master random number generator\n'
p8354
sS'cpp_type'
p8355
S'unsigned int'
p8356
sS'default'
p8357
S'0'
p8358
sS'name'
p8359
S'seed'
p8360
sS'required'
p8361
I00
sS'group_name'
p8362
S'Advanced'
p8363
sa(dp8364
S'description'
p8365
g3
sS'cpp_type'
p8366
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8367
sS'default'
p8368
S'PostprocessorNeumannBC'
p8369
sS'name'
p8370
S'type'
p8371
sS'required'
p8372
I00
sS'group_name'
p8373
Nsa(dp8374
S'description'
p8375
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8376
sS'cpp_type'
p8377
S'bool'
p8378
sS'default'
p8379
S'0'
p8380
sS'name'
p8381
S'use_displaced_mesh'
p8382
sS'required'
p8383
I00
sS'group_name'
p8384
S'Advanced'
p8385
sa(dp8386
S'description'
p8387
S'The name of the variable that this boundary condition applies to\n'
p8388
sS'cpp_type'
p8389
S'NonlinearVariableName'
p8390
sS'default'
p8391
g3
sS'name'
p8392
S'variable'
p8393
sS'required'
p8394
I01
sS'group_name'
p8395
NsasS'name'
p8396
S'/BCs/PostprocessorNeumannBC'
p8397
sa(dp8398
S'description'
p8399
g3
sS'subblocks'
p8400
NsS'parameters'
p8401
(lp8402
(dp8403
S'description'
p8404
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8405
sS'cpp_type'
p8406
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8407
sS'default'
p8408
g3
sS'name'
p8409
S'boundary'
p8410
sS'required'
p8411
I01
sS'group_name'
p8412
Nsa(dp8413
S'description'
p8414
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8415
sS'cpp_type'
p8416
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8417
sS'default'
p8418
g3
sS'name'
p8419
S'control_tags'
p8420
sS'required'
p8421
I00
sS'group_name'
p8422
S'Advanced'
p8423
sa(dp8424
S'description'
p8425
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8426
sS'cpp_type'
p8427
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8428
sS'default'
p8429
g3
sS'name'
p8430
S'diag_save_in'
p8431
sS'required'
p8432
I00
sS'group_name'
p8433
Nsa(dp8434
S'description'
p8435
S'Set the enabled status of the MooseObject.\n'
p8436
sS'cpp_type'
p8437
S'bool'
p8438
sS'default'
p8439
S'1'
p8440
sS'name'
p8441
S'enable'
p8442
sS'required'
p8443
I00
sS'group_name'
p8444
S'Advanced'
p8445
sa(dp8446
S'description'
p8447
S'Determines whether this object is calculated using an implicit or explicit form\n'
p8448
sS'cpp_type'
p8449
S'bool'
p8450
sS'default'
p8451
S'1'
p8452
sS'name'
p8453
S'implicit'
p8454
sS'required'
p8455
I00
sS'group_name'
p8456
S'Advanced'
p8457
sa(dp8458
S'description'
p8459
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8460
sS'cpp_type'
p8461
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8462
sS'default'
p8463
g3
sS'name'
p8464
S'save_in'
p8465
sS'required'
p8466
I00
sS'group_name'
p8467
Nsa(dp8468
S'description'
p8469
S'The seed for the master random number generator\n'
p8470
sS'cpp_type'
p8471
S'unsigned int'
p8472
sS'default'
p8473
S'0'
p8474
sS'name'
p8475
S'seed'
p8476
sS'required'
p8477
I00
sS'group_name'
p8478
S'Advanced'
p8479
sa(dp8480
S'description'
p8481
g3
sS'cpp_type'
p8482
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8483
sS'default'
p8484
S'PresetBC'
p8485
sS'name'
p8486
S'type'
p8487
sS'required'
p8488
I00
sS'group_name'
p8489
Nsa(dp8490
S'description'
p8491
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8492
sS'cpp_type'
p8493
S'bool'
p8494
sS'default'
p8495
S'0'
p8496
sS'name'
p8497
S'use_displaced_mesh'
p8498
sS'required'
p8499
I00
sS'group_name'
p8500
S'Advanced'
p8501
sa(dp8502
S'description'
p8503
S'Value of the BC\n'
p8504
sS'cpp_type'
p8505
S'double'
p8506
sS'default'
p8507
g3
sS'name'
p8508
S'value'
p8509
sS'required'
p8510
I01
sS'group_name'
p8511
Nsa(dp8512
S'description'
p8513
S'The name of the variable that this boundary condition applies to\n'
p8514
sS'cpp_type'
p8515
S'NonlinearVariableName'
p8516
sS'default'
p8517
g3
sS'name'
p8518
S'variable'
p8519
sS'required'
p8520
I01
sS'group_name'
p8521
NsasS'name'
p8522
S'/BCs/PresetBC'
p8523
sa(dp8524
S'description'
p8525
g3
sS'subblocks'
p8526
NsS'parameters'
p8527
(lp8528
(dp8529
S'description'
p8530
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8531
sS'cpp_type'
p8532
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8533
sS'default'
p8534
g3
sS'name'
p8535
S'boundary'
p8536
sS'required'
p8537
I01
sS'group_name'
p8538
Nsa(dp8539
S'description'
p8540
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8541
sS'cpp_type'
p8542
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8543
sS'default'
p8544
g3
sS'name'
p8545
S'control_tags'
p8546
sS'required'
p8547
I00
sS'group_name'
p8548
S'Advanced'
p8549
sa(dp8550
S'description'
p8551
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8552
sS'cpp_type'
p8553
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8554
sS'default'
p8555
g3
sS'name'
p8556
S'diag_save_in'
p8557
sS'required'
p8558
I00
sS'group_name'
p8559
Nsa(dp8560
S'description'
p8561
g3
sS'cpp_type'
p8562
S'double'
p8563
sS'default'
p8564
S'0'
p8565
sS'name'
p8566
S'duration'
p8567
sS'required'
p8568
I00
sS'group_name'
p8569
Nsa(dp8570
S'description'
p8571
S'Set the enabled status of the MooseObject.\n'
p8572
sS'cpp_type'
p8573
S'bool'
p8574
sS'default'
p8575
S'1'
p8576
sS'name'
p8577
S'enable'
p8578
sS'required'
p8579
I00
sS'group_name'
p8580
S'Advanced'
p8581
sa(dp8582
S'description'
p8583
g3
sS'cpp_type'
p8584
S'double'
p8585
sS'default'
p8586
S'0'
p8587
sS'name'
p8588
S'final'
p8589
sS'required'
p8590
I00
sS'group_name'
p8591
Nsa(dp8592
S'description'
p8593
S'Determines whether this object is calculated using an implicit or explicit form\n'
p8594
sS'cpp_type'
p8595
S'bool'
p8596
sS'default'
p8597
S'1'
p8598
sS'name'
p8599
S'implicit'
p8600
sS'required'
p8601
I00
sS'group_name'
p8602
S'Advanced'
p8603
sa(dp8604
S'description'
p8605
g3
sS'cpp_type'
p8606
S'double'
p8607
sS'default'
p8608
S'0'
p8609
sS'name'
p8610
S'initial'
p8611
sS'required'
p8612
I00
sS'group_name'
p8613
Nsa(dp8614
S'description'
p8615
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8616
sS'cpp_type'
p8617
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8618
sS'default'
p8619
g3
sS'name'
p8620
S'save_in'
p8621
sS'required'
p8622
I00
sS'group_name'
p8623
Nsa(dp8624
S'description'
p8625
S'The seed for the master random number generator\n'
p8626
sS'cpp_type'
p8627
S'unsigned int'
p8628
sS'default'
p8629
S'0'
p8630
sS'name'
p8631
S'seed'
p8632
sS'required'
p8633
I00
sS'group_name'
p8634
S'Advanced'
p8635
sa(dp8636
S'description'
p8637
g3
sS'cpp_type'
p8638
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8639
sS'default'
p8640
S'SinDirichletBC'
p8641
sS'name'
p8642
S'type'
p8643
sS'required'
p8644
I00
sS'group_name'
p8645
Nsa(dp8646
S'description'
p8647
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8648
sS'cpp_type'
p8649
S'bool'
p8650
sS'default'
p8651
S'0'
p8652
sS'name'
p8653
S'use_displaced_mesh'
p8654
sS'required'
p8655
I00
sS'group_name'
p8656
S'Advanced'
p8657
sa(dp8658
S'description'
p8659
S'The name of the variable that this boundary condition applies to\n'
p8660
sS'cpp_type'
p8661
S'NonlinearVariableName'
p8662
sS'default'
p8663
g3
sS'name'
p8664
S'variable'
p8665
sS'required'
p8666
I01
sS'group_name'
p8667
NsasS'name'
p8668
S'/BCs/SinDirichletBC'
p8669
sa(dp8670
S'description'
p8671
g3
sS'subblocks'
p8672
NsS'parameters'
p8673
(lp8674
(dp8675
S'description'
p8676
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8677
sS'cpp_type'
p8678
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8679
sS'default'
p8680
g3
sS'name'
p8681
S'boundary'
p8682
sS'required'
p8683
I01
sS'group_name'
p8684
Nsa(dp8685
S'description'
p8686
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8687
sS'cpp_type'
p8688
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8689
sS'default'
p8690
g3
sS'name'
p8691
S'control_tags'
p8692
sS'required'
p8693
I00
sS'group_name'
p8694
S'Advanced'
p8695
sa(dp8696
S'description'
p8697
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8698
sS'cpp_type'
p8699
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8700
sS'default'
p8701
g3
sS'name'
p8702
S'diag_save_in'
p8703
sS'required'
p8704
I00
sS'group_name'
p8705
S'Advanced'
p8706
sa(dp8707
S'description'
p8708
S'The duration of the ramp\n'
p8709
sS'cpp_type'
p8710
S'double'
p8711
sS'default'
p8712
S'0'
p8713
sS'name'
p8714
S'duration'
p8715
sS'required'
p8716
I00
sS'group_name'
p8717
Nsa(dp8718
S'description'
p8719
S'Set the enabled status of the MooseObject.\n'
p8720
sS'cpp_type'
p8721
S'bool'
p8722
sS'default'
p8723
S'1'
p8724
sS'name'
p8725
S'enable'
p8726
sS'required'
p8727
I00
sS'group_name'
p8728
S'Advanced'
p8729
sa(dp8730
S'description'
p8731
S'The final value of the gradient on the boundary\n'
p8732
sS'cpp_type'
p8733
S'double'
p8734
sS'default'
p8735
S'0'
p8736
sS'name'
p8737
S'final'
p8738
sS'required'
p8739
I00
sS'group_name'
p8740
Nsa(dp8741
S'description'
p8742
S'Determines whether this object is calculated using an implicit or explicit form\n'
p8743
sS'cpp_type'
p8744
S'bool'
p8745
sS'default'
p8746
S'1'
p8747
sS'name'
p8748
S'implicit'
p8749
sS'required'
p8750
I00
sS'group_name'
p8751
S'Advanced'
p8752
sa(dp8753
S'description'
p8754
S'The initial value of the gradient on the boundary\n'
p8755
sS'cpp_type'
p8756
S'double'
p8757
sS'default'
p8758
S'0'
p8759
sS'name'
p8760
S'initial'
p8761
sS'required'
p8762
I00
sS'group_name'
p8763
Nsa(dp8764
S'description'
p8765
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8766
sS'cpp_type'
p8767
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8768
sS'default'
p8769
g3
sS'name'
p8770
S'save_in'
p8771
sS'required'
p8772
I00
sS'group_name'
p8773
S'Advanced'
p8774
sa(dp8775
S'description'
p8776
S'The seed for the master random number generator\n'
p8777
sS'cpp_type'
p8778
S'unsigned int'
p8779
sS'default'
p8780
S'0'
p8781
sS'name'
p8782
S'seed'
p8783
sS'required'
p8784
I00
sS'group_name'
p8785
S'Advanced'
p8786
sa(dp8787
S'description'
p8788
g3
sS'cpp_type'
p8789
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8790
sS'default'
p8791
S'SinNeumannBC'
p8792
sS'name'
p8793
S'type'
p8794
sS'required'
p8795
I00
sS'group_name'
p8796
Nsa(dp8797
S'description'
p8798
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8799
sS'cpp_type'
p8800
S'bool'
p8801
sS'default'
p8802
S'0'
p8803
sS'name'
p8804
S'use_displaced_mesh'
p8805
sS'required'
p8806
I00
sS'group_name'
p8807
S'Advanced'
p8808
sa(dp8809
S'description'
p8810
S'The name of the variable that this boundary condition applies to\n'
p8811
sS'cpp_type'
p8812
S'NonlinearVariableName'
p8813
sS'default'
p8814
g3
sS'name'
p8815
S'variable'
p8816
sS'required'
p8817
I01
sS'group_name'
p8818
NsasS'name'
p8819
S'/BCs/SinNeumannBC'
p8820
sa(dp8821
S'description'
p8822
g3
sS'subblocks'
p8823
NsS'parameters'
p8824
(lp8825
(dp8826
S'description'
p8827
S'No idea.\n'
p8828
sS'cpp_type'
p8829
S'double'
p8830
sS'default'
p8831
S'1'
p8832
sS'name'
p8833
S'alpha'
p8834
sS'required'
p8835
I00
sS'group_name'
p8836
Nsa(dp8837
S'description'
p8838
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8839
sS'cpp_type'
p8840
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8841
sS'default'
p8842
g3
sS'name'
p8843
S'boundary'
p8844
sS'required'
p8845
I01
sS'group_name'
p8846
Nsa(dp8847
S'description'
p8848
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8849
sS'cpp_type'
p8850
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8851
sS'default'
p8852
g3
sS'name'
p8853
S'control_tags'
p8854
sS'required'
p8855
I00
sS'group_name'
p8856
S'Advanced'
p8857
sa(dp8858
S'description'
p8859
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8860
sS'cpp_type'
p8861
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8862
sS'default'
p8863
g3
sS'name'
p8864
S'diag_save_in'
p8865
sS'required'
p8866
I00
sS'group_name'
p8867
S'Advanced'
p8868
sa(dp8869
S'description'
p8870
S'Set the enabled status of the MooseObject.\n'
p8871
sS'cpp_type'
p8872
S'bool'
p8873
sS'default'
p8874
S'1'
p8875
sS'name'
p8876
S'enable'
p8877
sS'required'
p8878
I00
sS'group_name'
p8879
S'Advanced'
p8880
sa(dp8881
S'description'
p8882
S'Determines whether this object is calculated using an implicit or explicit form\n'
p8883
sS'cpp_type'
p8884
S'bool'
p8885
sS'default'
p8886
S'1'
p8887
sS'name'
p8888
S'implicit'
p8889
sS'required'
p8890
I00
sS'group_name'
p8891
S'Advanced'
p8892
sa(dp8893
S'description'
p8894
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8895
sS'cpp_type'
p8896
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8897
sS'default'
p8898
g3
sS'name'
p8899
S'save_in'
p8900
sS'required'
p8901
I00
sS'group_name'
p8902
S'Advanced'
p8903
sa(dp8904
S'description'
p8905
S'The seed for the master random number generator\n'
p8906
sS'cpp_type'
p8907
S'unsigned int'
p8908
sS'default'
p8909
S'0'
p8910
sS'name'
p8911
S'seed'
p8912
sS'required'
p8913
I00
sS'group_name'
p8914
S'Advanced'
p8915
sa(dp8916
S'description'
p8917
g3
sS'cpp_type'
p8918
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8919
sS'default'
p8920
S'VacuumBC'
p8921
sS'name'
p8922
S'type'
p8923
sS'required'
p8924
I00
sS'group_name'
p8925
Nsa(dp8926
S'description'
p8927
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8928
sS'cpp_type'
p8929
S'bool'
p8930
sS'default'
p8931
S'0'
p8932
sS'name'
p8933
S'use_displaced_mesh'
p8934
sS'required'
p8935
I00
sS'group_name'
p8936
S'Advanced'
p8937
sa(dp8938
S'description'
p8939
S'The name of the variable that this boundary condition applies to\n'
p8940
sS'cpp_type'
p8941
S'NonlinearVariableName'
p8942
sS'default'
p8943
g3
sS'name'
p8944
S'variable'
p8945
sS'required'
p8946
I01
sS'group_name'
p8947
NsasS'name'
p8948
S'/BCs/VacuumBC'
p8949
sa(dp8950
S'description'
p8951
g3
sS'subblocks'
p8952
NsS'parameters'
p8953
(lp8954
(dp8955
S'description'
p8956
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8957
sS'cpp_type'
p8958
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8959
sS'default'
p8960
g3
sS'name'
p8961
S'boundary'
p8962
sS'required'
p8963
I01
sS'group_name'
p8964
Nsa(dp8965
S'description'
p8966
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8967
sS'cpp_type'
p8968
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8969
sS'default'
p8970
g3
sS'name'
p8971
S'control_tags'
p8972
sS'required'
p8973
I00
sS'group_name'
p8974
S'Advanced'
p8975
sa(dp8976
S'description'
p8977
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8978
sS'cpp_type'
p8979
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8980
sS'default'
p8981
g3
sS'name'
p8982
S'diag_save_in'
p8983
sS'required'
p8984
I00
sS'group_name'
p8985
S'Advanced'
p8986
sa(dp8987
S'description'
p8988
S'Set the enabled status of the MooseObject.\n'
p8989
sS'cpp_type'
p8990
S'bool'
p8991
sS'default'
p8992
S'1'
p8993
sS'name'
p8994
S'enable'
p8995
sS'required'
p8996
I00
sS'group_name'
p8997
S'Advanced'
p8998
sa(dp8999
S'description'
p9000
S'Determines whether this object is calculated using an implicit or explicit form\n'
p9001
sS'cpp_type'
p9002
S'bool'
p9003
sS'default'
p9004
S'1'
p9005
sS'name'
p9006
S'implicit'
p9007
sS'required'
p9008
I00
sS'group_name'
p9009
S'Advanced'
p9010
sa(dp9011
S'description'
p9012
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p9013
sS'cpp_type'
p9014
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p9015
sS'default'
p9016
g3
sS'name'
p9017
S'save_in'
p9018
sS'required'
p9019
I00
sS'group_name'
p9020
S'Advanced'
p9021
sa(dp9022
S'description'
p9023
S'The seed for the master random number generator\n'
p9024
sS'cpp_type'
p9025
S'unsigned int'
p9026
sS'default'
p9027
S'0'
p9028
sS'name'
p9029
S'seed'
p9030
sS'required'
p9031
I00
sS'group_name'
p9032
S'Advanced'
p9033
sa(dp9034
S'description'
p9035
g3
sS'cpp_type'
p9036
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9037
sS'default'
p9038
S'VectorNeumannBC'
p9039
sS'name'
p9040
S'type'
p9041
sS'required'
p9042
I00
sS'group_name'
p9043
Nsa(dp9044
S'description'
p9045
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9046
sS'cpp_type'
p9047
S'bool'
p9048
sS'default'
p9049
S'0'
p9050
sS'name'
p9051
S'use_displaced_mesh'
p9052
sS'required'
p9053
I00
sS'group_name'
p9054
S'Advanced'
p9055
sa(dp9056
S'description'
p9057
S'The name of the variable that this boundary condition applies to\n'
p9058
sS'cpp_type'
p9059
S'NonlinearVariableName'
p9060
sS'default'
p9061
g3
sS'name'
p9062
S'variable'
p9063
sS'required'
p9064
I01
sS'group_name'
p9065
Nsa(dp9066
S'description'
p9067
S'vector this BC should act in\n'
p9068
sS'cpp_type'
p9069
S'libMesh::VectorValue<double>'
p9070
sS'default'
p9071
S'0 0 0'
p9072
sS'name'
p9073
S'vector_value'
p9074
sS'required'
p9075
I00
sS'group_name'
p9076
NsasS'name'
p9077
S'/BCs/VectorNeumannBC'
p9078
sa(dp9079
S'description'
p9080
g3
sS'subblocks'
p9081
NsS'parameters'
p9082
(lp9083
(dp9084
S'description'
p9085
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9086
sS'cpp_type'
p9087
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9088
sS'default'
p9089
g3
sS'name'
p9090
S'boundary'
p9091
sS'required'
p9092
I01
sS'group_name'
p9093
Nsa(dp9094
S'description'
p9095
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9096
sS'cpp_type'
p9097
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p9098
sS'default'
p9099
g3
sS'name'
p9100
S'control_tags'
p9101
sS'required'
p9102
I00
sS'group_name'
p9103
S'Advanced'
p9104
sa(dp9105
S'description'
p9106
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p9107
sS'cpp_type'
p9108
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p9109
sS'default'
p9110
g3
sS'name'
p9111
S'diag_save_in'
p9112
sS'required'
p9113
I00
sS'group_name'
p9114
S'Advanced'
p9115
sa(dp9116
S'description'
p9117
S'Set the enabled status of the MooseObject.\n'
p9118
sS'cpp_type'
p9119
S'bool'
p9120
sS'default'
p9121
S'1'
p9122
sS'name'
p9123
S'enable'
p9124
sS'required'
p9125
I00
sS'group_name'
p9126
S'Advanced'
p9127
sa(dp9128
S'description'
p9129
S'Determines whether this object is calculated using an implicit or explicit form\n'
p9130
sS'cpp_type'
p9131
S'bool'
p9132
sS'default'
p9133
S'1'
p9134
sS'name'
p9135
S'implicit'
p9136
sS'required'
p9137
I00
sS'group_name'
p9138
S'Advanced'
p9139
sa(dp9140
S'description'
p9141
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p9142
sS'cpp_type'
p9143
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p9144
sS'default'
p9145
g3
sS'name'
p9146
S'save_in'
p9147
sS'required'
p9148
I00
sS'group_name'
p9149
S'Advanced'
p9150
sa(dp9151
S'description'
p9152
S'The seed for the master random number generator\n'
p9153
sS'cpp_type'
p9154
S'unsigned int'
p9155
sS'default'
p9156
S'0'
p9157
sS'name'
p9158
S'seed'
p9159
sS'required'
p9160
I00
sS'group_name'
p9161
S'Advanced'
p9162
sa(dp9163
S'description'
p9164
g3
sS'cpp_type'
p9165
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9166
sS'default'
p9167
S'WeakGradientBC'
p9168
sS'name'
p9169
S'type'
p9170
sS'required'
p9171
I00
sS'group_name'
p9172
Nsa(dp9173
S'description'
p9174
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9175
sS'cpp_type'
p9176
S'bool'
p9177
sS'default'
p9178
S'0'
p9179
sS'name'
p9180
S'use_displaced_mesh'
p9181
sS'required'
p9182
I00
sS'group_name'
p9183
S'Advanced'
p9184
sa(dp9185
S'description'
p9186
S'The name of the variable that this boundary condition applies to\n'
p9187
sS'cpp_type'
p9188
S'NonlinearVariableName'
p9189
sS'default'
p9190
g3
sS'name'
p9191
S'variable'
p9192
sS'required'
p9193
I01
sS'group_name'
p9194
NsasS'name'
p9195
S'/BCs/WeakGradientBC'
p9196
sasS'parameters'
p9197
NsS'name'
p9198
S'/BCs'
p9199
sa(dp9200
S'description'
p9201
g3
sS'subblocks'
p9202
(lp9203
(dp9204
S'description'
p9205
g3
sS'subblocks'
p9206
NsS'parameters'
p9207
(lp9208
(dp9209
S'description'
p9210
S'A string representing the Moose Object that will be built by this Action\n'
p9211
sS'cpp_type'
p9212
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9213
sS'default'
p9214
g3
sS'name'
p9215
S'type'
p9216
sS'required'
p9217
I01
sS'group_name'
p9218
NsasS'name'
p9219
S'/Bounds/*'
p9220
sa(dp9221
S'description'
p9222
g3
sS'subblocks'
p9223
NsS'parameters'
p9224
(lp9225
(dp9226
S'description'
p9227
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9228
sS'cpp_type'
p9229
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9230
sS'default'
p9231
g3
sS'name'
p9232
S'block'
p9233
sS'required'
p9234
I00
sS'group_name'
p9235
Nsa(dp9236
S'description'
p9237
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9238
sS'cpp_type'
p9239
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9240
sS'default'
p9241
g3
sS'name'
p9242
S'boundary'
p9243
sS'required'
p9244
I00
sS'group_name'
p9245
Nsa(dp9246
S'description'
p9247
S'The variable to be bounded\n'
p9248
sS'cpp_type'
p9249
S'std::vector<VariableName>'
p9250
sS'default'
p9251
g3
sS'name'
p9252
S'bounded_variable'
p9253
sS'required'
p9254
I01
sS'group_name'
p9255
Nsa(dp9256
S'description'
p9257
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9258
sS'cpp_type'
p9259
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p9260
sS'default'
p9261
g3
sS'name'
p9262
S'control_tags'
p9263
sS'required'
p9264
I00
sS'group_name'
p9265
S'Advanced'
p9266
sa(dp9267
S'description'
p9268
S'Set the enabled status of the MooseObject.\n'
p9269
sS'cpp_type'
p9270
S'bool'
p9271
sS'default'
p9272
S'1'
p9273
sS'name'
p9274
S'enable'
p9275
sS'required'
p9276
I00
sS'group_name'
p9277
S'Advanced'
p9278
sa(dp9279
S'name'
p9280
S'execute_on'
p9281
sS'cpp_type'
p9282
S'MultiMooseEnum'
p9283
sS'default'
p9284
S'LINEAR'
p9285
sS'description'
p9286
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9287
sS'required'
p9288
I00
sS'options'
p9289
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9290
sS'group_name'
p9291
Nsa(dp9292
S'description'
p9293
S'The lower bound for the variable\n'
p9294
sS'cpp_type'
p9295
S'double'
p9296
sS'default'
p9297
g3
sS'name'
p9298
S'lower'
p9299
sS'required'
p9300
I00
sS'group_name'
p9301
Nsa(dp9302
S'description'
p9303
S'The seed for the master random number generator\n'
p9304
sS'cpp_type'
p9305
S'unsigned int'
p9306
sS'default'
p9307
S'0'
p9308
sS'name'
p9309
S'seed'
p9310
sS'required'
p9311
I00
sS'group_name'
p9312
S'Advanced'
p9313
sa(dp9314
S'description'
p9315
g3
sS'cpp_type'
p9316
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9317
sS'default'
p9318
S'BoundsAux'
p9319
sS'name'
p9320
S'type'
p9321
sS'required'
p9322
I00
sS'group_name'
p9323
Nsa(dp9324
S'description'
p9325
S'The upper bound for the variable\n'
p9326
sS'cpp_type'
p9327
S'double'
p9328
sS'default'
p9329
g3
sS'name'
p9330
S'upper'
p9331
sS'required'
p9332
I00
sS'group_name'
p9333
Nsa(dp9334
S'description'
p9335
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9336
sS'cpp_type'
p9337
S'bool'
p9338
sS'default'
p9339
S'0'
p9340
sS'name'
p9341
S'use_displaced_mesh'
p9342
sS'required'
p9343
I00
sS'group_name'
p9344
S'Advanced'
p9345
sa(dp9346
S'description'
p9347
S'The name of the variable that this object applies to\n'
p9348
sS'cpp_type'
p9349
S'AuxVariableName'
p9350
sS'default'
p9351
g3
sS'name'
p9352
S'variable'
p9353
sS'required'
p9354
I01
sS'group_name'
p9355
NsasS'name'
p9356
S'/Bounds/BoundsAux'
p9357
sa(dp9358
S'description'
p9359
g3
sS'subblocks'
p9360
NsS'parameters'
p9361
(lp9362
(dp9363
S'description'
p9364
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9365
sS'cpp_type'
p9366
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9367
sS'default'
p9368
g3
sS'name'
p9369
S'block'
p9370
sS'required'
p9371
I00
sS'group_name'
p9372
Nsa(dp9373
S'description'
p9374
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9375
sS'cpp_type'
p9376
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9377
sS'default'
p9378
g3
sS'name'
p9379
S'boundary'
p9380
sS'required'
p9381
I00
sS'group_name'
p9382
Nsa(dp9383
S'description'
p9384
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9385
sS'cpp_type'
p9386
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p9387
sS'default'
p9388
g3
sS'name'
p9389
S'control_tags'
p9390
sS'required'
p9391
I00
sS'group_name'
p9392
S'Advanced'
p9393
sa(dp9394
S'description'
p9395
S'Set the enabled status of the MooseObject.\n'
p9396
sS'cpp_type'
p9397
S'bool'
p9398
sS'default'
p9399
S'1'
p9400
sS'name'
p9401
S'enable'
p9402
sS'required'
p9403
I00
sS'group_name'
p9404
S'Advanced'
p9405
sa(dp9406
S'name'
p9407
S'execute_on'
p9408
sS'cpp_type'
p9409
S'MultiMooseEnum'
p9410
sS'default'
p9411
S'LINEAR'
p9412
sS'description'
p9413
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9414
sS'required'
p9415
I00
sS'options'
p9416
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9417
sS'group_name'
p9418
Nsa(dp9419
S'description'
p9420
S'The seed for the master random number generator\n'
p9421
sS'cpp_type'
p9422
S'unsigned int'
p9423
sS'default'
p9424
S'0'
p9425
sS'name'
p9426
S'seed'
p9427
sS'required'
p9428
I00
sS'group_name'
p9429
S'Advanced'
p9430
sa(dp9431
S'description'
p9432
g3
sS'cpp_type'
p9433
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9434
sS'default'
p9435
S'ConstantAux'
p9436
sS'name'
p9437
S'type'
p9438
sS'required'
p9439
I00
sS'group_name'
p9440
Nsa(dp9441
S'description'
p9442
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9443
sS'cpp_type'
p9444
S'bool'
p9445
sS'default'
p9446
S'0'
p9447
sS'name'
p9448
S'use_displaced_mesh'
p9449
sS'required'
p9450
I00
sS'group_name'
p9451
S'Advanced'
p9452
sa(dp9453
S'description'
p9454
S'Some constant value that can be read from the input file\n'
p9455
sS'cpp_type'
p9456
S'double'
p9457
sS'default'
p9458
S'0'
p9459
sS'name'
p9460
S'value'
p9461
sS'required'
p9462
I00
sS'group_name'
p9463
Nsa(dp9464
S'description'
p9465
S'The name of the variable that this object applies to\n'
p9466
sS'cpp_type'
p9467
S'AuxVariableName'
p9468
sS'default'
p9469
g3
sS'name'
p9470
S'variable'
p9471
sS'required'
p9472
I01
sS'group_name'
p9473
NsasS'name'
p9474
S'/Bounds/ConstantAux'
p9475
sa(dp9476
S'description'
p9477
g3
sS'subblocks'
p9478
NsS'parameters'
p9479
(lp9480
(dp9481
S'description'
p9482
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9483
sS'cpp_type'
p9484
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9485
sS'default'
p9486
g3
sS'name'
p9487
S'block'
p9488
sS'required'
p9489
I00
sS'group_name'
p9490
Nsa(dp9491
S'description'
p9492
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9493
sS'cpp_type'
p9494
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9495
sS'default'
p9496
g3
sS'name'
p9497
S'boundary'
p9498
sS'required'
p9499
I00
sS'group_name'
p9500
Nsa(dp9501
S'description'
p9502
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9503
sS'cpp_type'
p9504
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p9505
sS'default'
p9506
g3
sS'name'
p9507
S'control_tags'
p9508
sS'required'
p9509
I00
sS'group_name'
p9510
S'Advanced'
p9511
sa(dp9512
S'description'
p9513
S'The variable that is being debugged.\n'
p9514
sS'cpp_type'
p9515
S'NonlinearVariableName'
p9516
sS'default'
p9517
g3
sS'name'
p9518
S'debug_variable'
p9519
sS'required'
p9520
I01
sS'group_name'
p9521
Nsa(dp9522
S'description'
p9523
S'Set the enabled status of the MooseObject.\n'
p9524
sS'cpp_type'
p9525
S'bool'
p9526
sS'default'
p9527
S'1'
p9528
sS'name'
p9529
S'enable'
p9530
sS'required'
p9531
I00
sS'group_name'
p9532
S'Advanced'
p9533
sa(dp9534
S'name'
p9535
S'execute_on'
p9536
sS'cpp_type'
p9537
S'MultiMooseEnum'
p9538
sS'default'
p9539
S'LINEAR'
p9540
sS'description'
p9541
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9542
sS'required'
p9543
I00
sS'options'
p9544
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9545
sS'group_name'
p9546
Nsa(dp9547
S'description'
p9548
S'The seed for the master random number generator\n'
p9549
sS'cpp_type'
p9550
S'unsigned int'
p9551
sS'default'
p9552
S'0'
p9553
sS'name'
p9554
S'seed'
p9555
sS'required'
p9556
I00
sS'group_name'
p9557
S'Advanced'
p9558
sa(dp9559
S'description'
p9560
g3
sS'cpp_type'
p9561
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9562
sS'default'
p9563
S'DebugResidualAux'
p9564
sS'name'
p9565
S'type'
p9566
sS'required'
p9567
I00
sS'group_name'
p9568
Nsa(dp9569
S'description'
p9570
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9571
sS'cpp_type'
p9572
S'bool'
p9573
sS'default'
p9574
S'0'
p9575
sS'name'
p9576
S'use_displaced_mesh'
p9577
sS'required'
p9578
I00
sS'group_name'
p9579
S'Advanced'
p9580
sa(dp9581
S'description'
p9582
S'The name of the variable that this object applies to\n'
p9583
sS'cpp_type'
p9584
S'AuxVariableName'
p9585
sS'default'
p9586
g3
sS'name'
p9587
S'variable'
p9588
sS'required'
p9589
I01
sS'group_name'
p9590
NsasS'name'
p9591
S'/Bounds/DebugResidualAux'
p9592
sa(dp9593
S'description'
p9594
g3
sS'subblocks'
p9595
NsS'parameters'
p9596
(lp9597
(dp9598
S'description'
p9599
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9600
sS'cpp_type'
p9601
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9602
sS'default'
p9603
g3
sS'name'
p9604
S'block'
p9605
sS'required'
p9606
I00
sS'group_name'
p9607
Nsa(dp9608
S'description'
p9609
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9610
sS'cpp_type'
p9611
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9612
sS'default'
p9613
g3
sS'name'
p9614
S'boundary'
p9615
sS'required'
p9616
I00
sS'group_name'
p9617
Nsa(dp9618
S'description'
p9619
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9620
sS'cpp_type'
p9621
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p9622
sS'default'
p9623
g3
sS'name'
p9624
S'control_tags'
p9625
sS'required'
p9626
I00
sS'group_name'
p9627
S'Advanced'
p9628
sa(dp9629
S'description'
p9630
S'The variable to compute the norm of.\n'
p9631
sS'cpp_type'
p9632
S'std::vector<VariableName>'
p9633
sS'default'
p9634
g3
sS'name'
p9635
S'coupled_variable'
p9636
sS'required'
p9637
I01
sS'group_name'
p9638
Nsa(dp9639
S'description'
p9640
S'Set the enabled status of the MooseObject.\n'
p9641
sS'cpp_type'
p9642
S'bool'
p9643
sS'default'
p9644
S'1'
p9645
sS'name'
p9646
S'enable'
p9647
sS'required'
p9648
I00
sS'group_name'
p9649
S'Advanced'
p9650
sa(dp9651
S'name'
p9652
S'execute_on'
p9653
sS'cpp_type'
p9654
S'MultiMooseEnum'
p9655
sS'default'
p9656
S'LINEAR'
p9657
sS'description'
p9658
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9659
sS'required'
p9660
I00
sS'options'
p9661
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9662
sS'group_name'
p9663
Nsa(dp9664
S'description'
p9665
S'Function representing the exact solution\n'
p9666
sS'cpp_type'
p9667
S'FunctionName'
p9668
sS'default'
p9669
g3
sS'name'
p9670
S'function'
p9671
sS'required'
p9672
I01
sS'group_name'
p9673
Nsa(dp9674
S'description'
p9675
S'The exponent used in the norm.\n'
p9676
sS'cpp_type'
p9677
S'double'
p9678
sS'default'
p9679
S'2'
p9680
sS'name'
p9681
S'p'
p9682
sS'required'
p9683
I00
sS'group_name'
p9684
Nsa(dp9685
S'description'
p9686
S'The seed for the master random number generator\n'
p9687
sS'cpp_type'
p9688
S'unsigned int'
p9689
sS'default'
p9690
S'0'
p9691
sS'name'
p9692
S'seed'
p9693
sS'required'
p9694
I00
sS'group_name'
p9695
S'Advanced'
p9696
sa(dp9697
S'description'
p9698
g3
sS'cpp_type'
p9699
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9700
sS'default'
p9701
S'ElementH1ErrorFunctionAux'
p9702
sS'name'
p9703
S'type'
p9704
sS'required'
p9705
I00
sS'group_name'
p9706
Nsa(dp9707
S'description'
p9708
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9709
sS'cpp_type'
p9710
S'bool'
p9711
sS'default'
p9712
S'0'
p9713
sS'name'
p9714
S'use_displaced_mesh'
p9715
sS'required'
p9716
I00
sS'group_name'
p9717
S'Advanced'
p9718
sa(dp9719
S'description'
p9720
S'The name of the variable that this object applies to\n'
p9721
sS'cpp_type'
p9722
S'AuxVariableName'
p9723
sS'default'
p9724
g3
sS'name'
p9725
S'variable'
p9726
sS'required'
p9727
I01
sS'group_name'
p9728
NsasS'name'
p9729
S'/Bounds/ElementH1ErrorFunctionAux'
p9730
sa(dp9731
S'description'
p9732
g3
sS'subblocks'
p9733
NsS'parameters'
p9734
(lp9735
(dp9736
S'description'
p9737
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9738
sS'cpp_type'
p9739
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9740
sS'default'
p9741
g3
sS'name'
p9742
S'block'
p9743
sS'required'
p9744
I00
sS'group_name'
p9745
Nsa(dp9746
S'description'
p9747
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9748
sS'cpp_type'
p9749
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9750
sS'default'
p9751
g3
sS'name'
p9752
S'boundary'
p9753
sS'required'
p9754
I00
sS'group_name'
p9755
Nsa(dp9756
S'description'
p9757
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9758
sS'cpp_type'
p9759
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p9760
sS'default'
p9761
g3
sS'name'
p9762
S'control_tags'
p9763
sS'required'
p9764
I00
sS'group_name'
p9765
S'Advanced'
p9766
sa(dp9767
S'description'
p9768
S'The variable to compute the norm of.\n'
p9769
sS'cpp_type'
p9770
S'std::vector<VariableName>'
p9771
sS'default'
p9772
g3
sS'name'
p9773
S'coupled_variable'
p9774
sS'required'
p9775
I01
sS'group_name'
p9776
Nsa(dp9777
S'description'
p9778
S'Set the enabled status of the MooseObject.\n'
p9779
sS'cpp_type'
p9780
S'bool'
p9781
sS'default'
p9782
S'1'
p9783
sS'name'
p9784
S'enable'
p9785
sS'required'
p9786
I00
sS'group_name'
p9787
S'Advanced'
p9788
sa(dp9789
S'name'
p9790
S'execute_on'
p9791
sS'cpp_type'
p9792
S'MultiMooseEnum'
p9793
sS'default'
p9794
S'LINEAR'
p9795
sS'description'
p9796
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9797
sS'required'
p9798
I00
sS'options'
p9799
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9800
sS'group_name'
p9801
Nsa(dp9802
S'description'
p9803
S'Function representing the exact solution\n'
p9804
sS'cpp_type'
p9805
S'FunctionName'
p9806
sS'default'
p9807
g3
sS'name'
p9808
S'function'
p9809
sS'required'
p9810
I01
sS'group_name'
p9811
Nsa(dp9812
S'description'
p9813
S'The exponent used in the norm.\n'
p9814
sS'cpp_type'
p9815
S'double'
p9816
sS'default'
p9817
S'2'
p9818
sS'name'
p9819
S'p'
p9820
sS'required'
p9821
I00
sS'group_name'
p9822
Nsa(dp9823
S'description'
p9824
S'The seed for the master random number generator\n'
p9825
sS'cpp_type'
p9826
S'unsigned int'
p9827
sS'default'
p9828
S'0'
p9829
sS'name'
p9830
S'seed'
p9831
sS'required'
p9832
I00
sS'group_name'
p9833
S'Advanced'
p9834
sa(dp9835
S'description'
p9836
g3
sS'cpp_type'
p9837
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9838
sS'default'
p9839
S'ElementL2ErrorFunctionAux'
p9840
sS'name'
p9841
S'type'
p9842
sS'required'
p9843
I00
sS'group_name'
p9844
Nsa(dp9845
S'description'
p9846
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9847
sS'cpp_type'
p9848
S'bool'
p9849
sS'default'
p9850
S'0'
p9851
sS'name'
p9852
S'use_displaced_mesh'
p9853
sS'required'
p9854
I00
sS'group_name'
p9855
S'Advanced'
p9856
sa(dp9857
S'description'
p9858
S'The name of the variable that this object applies to\n'
p9859
sS'cpp_type'
p9860
S'AuxVariableName'
p9861
sS'default'
p9862
g3
sS'name'
p9863
S'variable'
p9864
sS'required'
p9865
I01
sS'group_name'
p9866
NsasS'name'
p9867
S'/Bounds/ElementL2ErrorFunctionAux'
p9868
sa(dp9869
S'description'
p9870
S'Compute the element size using Elem::hmin() or Elem::hmax() from libMesh.\n'
p9871
sS'subblocks'
p9872
NsS'parameters'
p9873
(lp9874
(dp9875
S'description'
p9876
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9877
sS'cpp_type'
p9878
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9879
sS'default'
p9880
g3
sS'name'
p9881
S'block'
p9882
sS'required'
p9883
I00
sS'group_name'
p9884
Nsa(dp9885
S'description'
p9886
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9887
sS'cpp_type'
p9888
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9889
sS'default'
p9890
g3
sS'name'
p9891
S'boundary'
p9892
sS'required'
p9893
I00
sS'group_name'
p9894
Nsa(dp9895
S'description'
p9896
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9897
sS'cpp_type'
p9898
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p9899
sS'default'
p9900
g3
sS'name'
p9901
S'control_tags'
p9902
sS'required'
p9903
I00
sS'group_name'
p9904
S'Advanced'
p9905
sa(dp9906
S'description'
p9907
S'Set the enabled status of the MooseObject.\n'
p9908
sS'cpp_type'
p9909
S'bool'
p9910
sS'default'
p9911
S'1'
p9912
sS'name'
p9913
S'enable'
p9914
sS'required'
p9915
I00
sS'group_name'
p9916
S'Advanced'
p9917
sa(dp9918
S'name'
p9919
S'execute_on'
p9920
sS'cpp_type'
p9921
S'MultiMooseEnum'
p9922
sS'default'
p9923
S'LINEAR'
p9924
sS'description'
p9925
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9926
sS'required'
p9927
I00
sS'options'
p9928
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9929
sS'group_name'
p9930
Nsa(dp9931
S'name'
p9932
S'method'
p9933
sS'cpp_type'
p9934
S'MooseEnum'
p9935
sS'default'
p9936
g3
sS'description'
p9937
S"The size calculation to perform ('min' or 'max').\n"
p9938
sS'required'
p9939
I01
sS'options'
p9940
S'min max'
p9941
sS'group_name'
p9942
Nsa(dp9943
S'description'
p9944
S'The seed for the master random number generator\n'
p9945
sS'cpp_type'
p9946
S'unsigned int'
p9947
sS'default'
p9948
S'0'
p9949
sS'name'
p9950
S'seed'
p9951
sS'required'
p9952
I00
sS'group_name'
p9953
S'Advanced'
p9954
sa(dp9955
S'description'
p9956
g3
sS'cpp_type'
p9957
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9958
sS'default'
p9959
S'ElementLengthAux'
p9960
sS'name'
p9961
S'type'
p9962
sS'required'
p9963
I00
sS'group_name'
p9964
Nsa(dp9965
S'description'
p9966
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9967
sS'cpp_type'
p9968
S'bool'
p9969
sS'default'
p9970
S'0'
p9971
sS'name'
p9972
S'use_displaced_mesh'
p9973
sS'required'
p9974
I00
sS'group_name'
p9975
S'Advanced'
p9976
sa(dp9977
S'description'
p9978
S'The name of the variable that this object applies to\n'
p9979
sS'cpp_type'
p9980
S'AuxVariableName'
p9981
sS'default'
p9982
g3
sS'name'
p9983
S'variable'
p9984
sS'required'
p9985
I01
sS'group_name'
p9986
NsasS'name'
p9987
S'/Bounds/ElementLengthAux'
p9988
sa(dp9989
S'description'
p9990
g3
sS'subblocks'
p9991
NsS'parameters'
p9992
(lp9993
(dp9994
S'description'
p9995
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9996
sS'cpp_type'
p9997
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9998
sS'default'
p9999
g3
sS'name'
p10000
S'block'
p10001
sS'required'
p10002
I00
sS'group_name'
p10003
Nsa(dp10004
S'description'
p10005
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10006
sS'cpp_type'
p10007
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10008
sS'default'
p10009
g3
sS'name'
p10010
S'boundary'
p10011
sS'required'
p10012
I00
sS'group_name'
p10013
Nsa(dp10014
S'description'
p10015
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10016
sS'cpp_type'
p10017
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p10018
sS'default'
p10019
g3
sS'name'
p10020
S'control_tags'
p10021
sS'required'
p10022
I00
sS'group_name'
p10023
S'Advanced'
p10024
sa(dp10025
S'description'
p10026
S'The variable to compute the norm of.\n'
p10027
sS'cpp_type'
p10028
S'std::vector<VariableName>'
p10029
sS'default'
p10030
g3
sS'name'
p10031
S'coupled_variable'
p10032
sS'required'
p10033
I01
sS'group_name'
p10034
Nsa(dp10035
S'description'
p10036
S'Set the enabled status of the MooseObject.\n'
p10037
sS'cpp_type'
p10038
S'bool'
p10039
sS'default'
p10040
S'1'
p10041
sS'name'
p10042
S'enable'
p10043
sS'required'
p10044
I00
sS'group_name'
p10045
S'Advanced'
p10046
sa(dp10047
S'name'
p10048
S'execute_on'
p10049
sS'cpp_type'
p10050
S'MultiMooseEnum'
p10051
sS'default'
p10052
S'LINEAR'
p10053
sS'description'
p10054
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10055
sS'required'
p10056
I00
sS'options'
p10057
S'none initial linear nonlinear timestep_end timestep_begin custom'
p10058
sS'group_name'
p10059
Nsa(dp10060
S'description'
p10061
S'The exponent used in the norm.\n'
p10062
sS'cpp_type'
p10063
S'double'
p10064
sS'default'
p10065
S'2'
p10066
sS'name'
p10067
S'p'
p10068
sS'required'
p10069
I00
sS'group_name'
p10070
Nsa(dp10071
S'description'
p10072
S'The seed for the master random number generator\n'
p10073
sS'cpp_type'
p10074
S'unsigned int'
p10075
sS'default'
p10076
S'0'
p10077
sS'name'
p10078
S'seed'
p10079
sS'required'
p10080
I00
sS'group_name'
p10081
S'Advanced'
p10082
sa(dp10083
S'description'
p10084
g3
sS'cpp_type'
p10085
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10086
sS'default'
p10087
S'ElementLpNormAux'
p10088
sS'name'
p10089
S'type'
p10090
sS'required'
p10091
I00
sS'group_name'
p10092
Nsa(dp10093
S'description'
p10094
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10095
sS'cpp_type'
p10096
S'bool'
p10097
sS'default'
p10098
S'0'
p10099
sS'name'
p10100
S'use_displaced_mesh'
p10101
sS'required'
p10102
I00
sS'group_name'
p10103
S'Advanced'
p10104
sa(dp10105
S'description'
p10106
S'The name of the variable that this object applies to\n'
p10107
sS'cpp_type'
p10108
S'AuxVariableName'
p10109
sS'default'
p10110
g3
sS'name'
p10111
S'variable'
p10112
sS'required'
p10113
I01
sS'group_name'
p10114
NsasS'name'
p10115
S'/Bounds/ElementLpNormAux'
p10116
sa(dp10117
S'description'
p10118
g3
sS'subblocks'
p10119
NsS'parameters'
p10120
(lp10121
(dp10122
S'description'
p10123
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10124
sS'cpp_type'
p10125
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10126
sS'default'
p10127
g3
sS'name'
p10128
S'block'
p10129
sS'required'
p10130
I00
sS'group_name'
p10131
Nsa(dp10132
S'description'
p10133
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10134
sS'cpp_type'
p10135
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10136
sS'default'
p10137
g3
sS'name'
p10138
S'boundary'
p10139
sS'required'
p10140
I00
sS'group_name'
p10141
Nsa(dp10142
S'description'
p10143
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10144
sS'cpp_type'
p10145
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p10146
sS'default'
p10147
g3
sS'name'
p10148
S'control_tags'
p10149
sS'required'
p10150
I00
sS'group_name'
p10151
S'Advanced'
p10152
sa(dp10153
S'description'
p10154
S'Set the enabled status of the MooseObject.\n'
p10155
sS'cpp_type'
p10156
S'bool'
p10157
sS'default'
p10158
S'1'
p10159
sS'name'
p10160
S'enable'
p10161
sS'required'
p10162
I00
sS'group_name'
p10163
S'Advanced'
p10164
sa(dp10165
S'name'
p10166
S'execute_on'
p10167
sS'cpp_type'
p10168
S'MultiMooseEnum'
p10169
sS'default'
p10170
S'LINEAR'
p10171
sS'description'
p10172
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10173
sS'required'
p10174
I00
sS'options'
p10175
S'none initial linear nonlinear timestep_end timestep_begin custom'
p10176
sS'group_name'
p10177
Nsa(dp10178
S'description'
p10179
S'The function to use as the value\n'
p10180
sS'cpp_type'
p10181
S'FunctionName'
p10182
sS'default'
p10183
g3
sS'name'
p10184
S'function'
p10185
sS'required'
p10186
I01
sS'group_name'
p10187
Nsa(dp10188
S'description'
p10189
S'The seed for the master random number generator\n'
p10190
sS'cpp_type'
p10191
S'unsigned int'
p10192
sS'default'
p10193
S'0'
p10194
sS'name'
p10195
S'seed'
p10196
sS'required'
p10197
I00
sS'group_name'
p10198
S'Advanced'
p10199
sa(dp10200
S'description'
p10201
g3
sS'cpp_type'
p10202
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10203
sS'default'
p10204
S'FunctionAux'
p10205
sS'name'
p10206
S'type'
p10207
sS'required'
p10208
I00
sS'group_name'
p10209
Nsa(dp10210
S'description'
p10211
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10212
sS'cpp_type'
p10213
S'bool'
p10214
sS'default'
p10215
S'0'
p10216
sS'name'
p10217
S'use_displaced_mesh'
p10218
sS'required'
p10219
I00
sS'group_name'
p10220
S'Advanced'
p10221
sa(dp10222
S'description'
p10223
S'The name of the variable that this object applies to\n'
p10224
sS'cpp_type'
p10225
S'AuxVariableName'
p10226
sS'default'
p10227
g3
sS'name'
p10228
S'variable'
p10229
sS'required'
p10230
I01
sS'group_name'
p10231
NsasS'name'
p10232
S'/Bounds/FunctionAux'
p10233
sa(dp10234
S'description'
p10235
g3
sS'subblocks'
p10236
NsS'parameters'
p10237
(lp10238
(dp10239
S'description'
p10240
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10241
sS'cpp_type'
p10242
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10243
sS'default'
p10244
g3
sS'name'
p10245
S'block'
p10246
sS'required'
p10247
I00
sS'group_name'
p10248
Nsa(dp10249
S'description'
p10250
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10251
sS'cpp_type'
p10252
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10253
sS'default'
p10254
g3
sS'name'
p10255
S'boundary'
p10256
sS'required'
p10257
I00
sS'group_name'
p10258
Nsa(dp10259
S'description'
p10260
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10261
sS'cpp_type'
p10262
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p10263
sS'default'
p10264
g3
sS'name'
p10265
S'control_tags'
p10266
sS'required'
p10267
I00
sS'group_name'
p10268
S'Advanced'
p10269
sa(dp10270
S'description'
p10271
S'Set the enabled status of the MooseObject.\n'
p10272
sS'cpp_type'
p10273
S'bool'
p10274
sS'default'
p10275
S'1'
p10276
sS'name'
p10277
S'enable'
p10278
sS'required'
p10279
I00
sS'group_name'
p10280
S'Advanced'
p10281
sa(dp10282
S'name'
p10283
S'execute_on'
p10284
sS'cpp_type'
p10285
S'MultiMooseEnum'
p10286
sS'default'
p10287
S'LINEAR'
p10288
sS'description'
p10289
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10290
sS'required'
p10291
I00
sS'options'
p10292
S'none initial linear nonlinear timestep_end timestep_begin custom'
p10293
sS'group_name'
p10294
Nsa(dp10295
S'description'
p10296
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p10297
sS'cpp_type'
p10298
S'double'
p10299
sS'default'
p10300
g3
sS'name'
p10301
S'normal_smoothing_distance'
p10302
sS'required'
p10303
I00
sS'group_name'
p10304
Nsa(dp10305
S'description'
p10306
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p10307
sS'cpp_type'
p10308
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10309
sS'default'
p10310
g3
sS'name'
p10311
S'normal_smoothing_method'
p10312
sS'required'
p10313
I00
sS'group_name'
p10314
Nsa(dp10315
S'name'
p10316
S'order'
p10317
sS'cpp_type'
p10318
S'MooseEnum'
p10319
sS'default'
p10320
S'FIRST'
p10321
sS'description'
p10322
S'The finite element order\n'
p10323
sS'required'
p10324
I00
sS'options'
p10325
S'FIRST SECOND THIRD FOURTH'
p10326
sS'group_name'
p10327
Nsa(dp10328
S'description'
p10329
S'The boundary on the other side of a gap.\n'
p10330
sS'cpp_type'
p10331
S'BoundaryName'
p10332
sS'default'
p10333
g3
sS'name'
p10334
S'paired_boundary'
p10335
sS'required'
p10336
I01
sS'group_name'
p10337
Nsa(dp10338
S'description'
p10339
S'The variable to get the value of.\n'
p10340
sS'cpp_type'
p10341
S'VariableName'
p10342
sS'default'
p10343
g3
sS'name'
p10344
S'paired_variable'
p10345
sS'required'
p10346
I01
sS'group_name'
p10347
Nsa(dp10348
S'description'
p10349
S'The seed for the master random number generator\n'
p10350
sS'cpp_type'
p10351
S'unsigned int'
p10352
sS'default'
p10353
S'0'
p10354
sS'name'
p10355
S'seed'
p10356
sS'required'
p10357
I00
sS'group_name'
p10358
S'Advanced'
p10359
sa(dp10360
S'description'
p10361
S'Tangential distance to extend edges of contact surfaces\n'
p10362
sS'cpp_type'
p10363
S'double'
p10364
sS'default'
p10365
g3
sS'name'
p10366
S'tangential_tolerance'
p10367
sS'required'
p10368
I00
sS'group_name'
p10369
Nsa(dp10370
S'description'
p10371
g3
sS'cpp_type'
p10372
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10373
sS'default'
p10374
S'GapValueAux'
p10375
sS'name'
p10376
S'type'
p10377
sS'required'
p10378
I00
sS'group_name'
p10379
Nsa(dp10380
S'description'
p10381
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10382
sS'cpp_type'
p10383
S'bool'
p10384
sS'default'
p10385
S'1'
p10386
sS'name'
p10387
S'use_displaced_mesh'
p10388
sS'required'
p10389
I00
sS'group_name'
p10390
S'Advanced'
p10391
sa(dp10392
S'description'
p10393
S'The name of the variable that this object applies to\n'
p10394
sS'cpp_type'
p10395
S'AuxVariableName'
p10396
sS'default'
p10397
g3
sS'name'
p10398
S'variable'
p10399
sS'required'
p10400
I01
sS'group_name'
p10401
Nsa(dp10402
S'description'
p10403
S'Whether to output warning messages concerning nodes not being found\n'
p10404
sS'cpp_type'
p10405
S'bool'
p10406
sS'default'
p10407
S'0'
p10408
sS'name'
p10409
S'warnings'
p10410
sS'required'
p10411
I00
sS'group_name'
p10412
NsasS'name'
p10413
S'/Bounds/GapValueAux'
p10414
sa(dp10415
S'description'
p10416
g3
sS'subblocks'
p10417
NsS'parameters'
p10418
(lp10419
(dp10420
S'description'
p10421
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10422
sS'cpp_type'
p10423
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10424
sS'default'
p10425
g3
sS'name'
p10426
S'block'
p10427
sS'required'
p10428
I00
sS'group_name'
p10429
Nsa(dp10430
S'description'
p10431
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10432
sS'cpp_type'
p10433
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10434
sS'default'
p10435
g3
sS'name'
p10436
S'boundary'
p10437
sS'required'
p10438
I00
sS'group_name'
p10439
Nsa(dp10440
S'description'
p10441
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10442
sS'cpp_type'
p10443
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p10444
sS'default'
p10445
g3
sS'name'
p10446
S'control_tags'
p10447
sS'required'
p10448
I00
sS'group_name'
p10449
S'Advanced'
p10450
sa(dp10451
S'description'
p10452
S'Set the enabled status of the MooseObject.\n'
p10453
sS'cpp_type'
p10454
S'bool'
p10455
sS'default'
p10456
S'1'
p10457
sS'name'
p10458
S'enable'
p10459
sS'required'
p10460
I00
sS'group_name'
p10461
S'Advanced'
p10462
sa(dp10463
S'name'
p10464
S'execute_on'
p10465
sS'cpp_type'
p10466
S'MultiMooseEnum'
p10467
sS'default'
p10468
S'LINEAR'
p10469
sS'description'
p10470
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10471
sS'required'
p10472
I00
sS'options'
p10473
S'none initial linear nonlinear timestep_end timestep_begin custom'
p10474
sS'group_name'
p10475
Nsa(dp10476
S'description'
p10477
S'The factor by which to multiply your material property for visualization\n'
p10478
sS'cpp_type'
p10479
S'double'
p10480
sS'default'
p10481
S'1'
p10482
sS'name'
p10483
S'factor'
p10484
sS'required'
p10485
I00
sS'group_name'
p10486
Nsa(dp10487
S'description'
p10488
S'The offset to add to your material property for visualization\n'
p10489
sS'cpp_type'
p10490
S'double'
p10491
sS'default'
p10492
S'0'
p10493
sS'name'
p10494
S'offset'
p10495
sS'required'
p10496
I00
sS'group_name'
p10497
Nsa(dp10498
S'description'
p10499
S'The scalar material property name\n'
p10500
sS'cpp_type'
p10501
S'MaterialPropertyName'
p10502
sS'default'
p10503
g3
sS'name'
p10504
S'property'
p10505
sS'required'
p10506
I01
sS'group_name'
p10507
Nsa(dp10508
S'description'
p10509
S'The seed for the master random number generator\n'
p10510
sS'cpp_type'
p10511
S'unsigned int'
p10512
sS'default'
p10513
S'0'
p10514
sS'name'
p10515
S'seed'
p10516
sS'required'
p10517
I00
sS'group_name'
p10518
S'Advanced'
p10519
sa(dp10520
S'description'
p10521
g3
sS'cpp_type'
p10522
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10523
sS'default'
p10524
S'MaterialRealAux'
p10525
sS'name'
p10526
S'type'
p10527
sS'required'
p10528
I00
sS'group_name'
p10529
Nsa(dp10530
S'description'
p10531
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10532
sS'cpp_type'
p10533
S'bool'
p10534
sS'default'
p10535
S'0'
p10536
sS'name'
p10537
S'use_displaced_mesh'
p10538
sS'required'
p10539
I00
sS'group_name'
p10540
S'Advanced'
p10541
sa(dp10542
S'description'
p10543
S'The name of the variable that this object applies to\n'
p10544
sS'cpp_type'
p10545
S'AuxVariableName'
p10546
sS'default'
p10547
g3
sS'name'
p10548
S'variable'
p10549
sS'required'
p10550
I01
sS'group_name'
p10551
NsasS'name'
p10552
S'/Bounds/MaterialRealAux'
p10553
sa(dp10554
S'description'
p10555
g3
sS'subblocks'
p10556
NsS'parameters'
p10557
(lp10558
(dp10559
S'description'
p10560
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10561
sS'cpp_type'
p10562
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10563
sS'default'
p10564
g3
sS'name'
p10565
S'block'
p10566
sS'required'
p10567
I00
sS'group_name'
p10568
Nsa(dp10569
S'description'
p10570
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10571
sS'cpp_type'
p10572
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10573
sS'default'
p10574
g3
sS'name'
p10575
S'boundary'
p10576
sS'required'
p10577
I00
sS'group_name'
p10578
Nsa(dp10579
S'description'
p10580
S'The column component to consider for this kernel\n'
p10581
sS'cpp_type'
p10582
S'unsigned int'
p10583
sS'default'
p10584
S'0'
p10585
sS'name'
p10586
S'column'
p10587
sS'required'
p10588
I00
sS'group_name'
p10589
Nsa(dp10590
S'description'
p10591
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10592
sS'cpp_type'
p10593
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p10594
sS'default'
p10595
g3
sS'name'
p10596
S'control_tags'
p10597
sS'required'
p10598
I00
sS'group_name'
p10599
S'Advanced'
p10600
sa(dp10601
S'description'
p10602
S'Set the enabled status of the MooseObject.\n'
p10603
sS'cpp_type'
p10604
S'bool'
p10605
sS'default'
p10606
S'1'
p10607
sS'name'
p10608
S'enable'
p10609
sS'required'
p10610
I00
sS'group_name'
p10611
S'Advanced'
p10612
sa(dp10613
S'name'
p10614
S'execute_on'
p10615
sS'cpp_type'
p10616
S'MultiMooseEnum'
p10617
sS'default'
p10618
S'LINEAR'
p10619
sS'description'
p10620
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10621
sS'required'
p10622
I00
sS'options'
p10623
S'none initial linear nonlinear timestep_end timestep_begin custom'
p10624
sS'group_name'
p10625
Nsa(dp10626
S'description'
p10627
S'The factor by which to multiply your material property for visualization\n'
p10628
sS'cpp_type'
p10629
S'double'
p10630
sS'default'
p10631
S'1'
p10632
sS'name'
p10633
S'factor'
p10634
sS'required'
p10635
I00
sS'group_name'
p10636
Nsa(dp10637
S'description'
p10638
S'The offset to add to your material property for visualization\n'
p10639
sS'cpp_type'
p10640
S'double'
p10641
sS'default'
p10642
S'0'
p10643
sS'name'
p10644
S'offset'
p10645
sS'required'
p10646
I00
sS'group_name'
p10647
Nsa(dp10648
S'description'
p10649
S'The scalar material property name\n'
p10650
sS'cpp_type'
p10651
S'MaterialPropertyName'
p10652
sS'default'
p10653
g3
sS'name'
p10654
S'property'
p10655
sS'required'
p10656
I01
sS'group_name'
p10657
Nsa(dp10658
S'description'
p10659
S'The row component to consider for this kernel\n'
p10660
sS'cpp_type'
p10661
S'unsigned int'
p10662
sS'default'
p10663
S'0'
p10664
sS'name'
p10665
S'row'
p10666
sS'required'
p10667
I00
sS'group_name'
p10668
Nsa(dp10669
S'description'
p10670
S'The seed for the master random number generator\n'
p10671
sS'cpp_type'
p10672
S'unsigned int'
p10673
sS'default'
p10674
S'0'
p10675
sS'name'
p10676
S'seed'
p10677
sS'required'
p10678
I00
sS'group_name'
p10679
S'Advanced'
p10680
sa(dp10681
S'description'
p10682
g3
sS'cpp_type'
p10683
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10684
sS'default'
p10685
S'MaterialRealDenseMatrixAux'
p10686
sS'name'
p10687
S'type'
p10688
sS'required'
p10689
I00
sS'group_name'
p10690
Nsa(dp10691
S'description'
p10692
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10693
sS'cpp_type'
p10694
S'bool'
p10695
sS'default'
p10696
S'0'
p10697
sS'name'
p10698
S'use_displaced_mesh'
p10699
sS'required'
p10700
I00
sS'group_name'
p10701
S'Advanced'
p10702
sa(dp10703
S'description'
p10704
S'The name of the variable that this object applies to\n'
p10705
sS'cpp_type'
p10706
S'AuxVariableName'
p10707
sS'default'
p10708
g3
sS'name'
p10709
S'variable'
p10710
sS'required'
p10711
I01
sS'group_name'
p10712
NsasS'name'
p10713
S'/Bounds/MaterialRealDenseMatrixAux'
p10714
sa(dp10715
S'description'
p10716
g3
sS'subblocks'
p10717
NsS'parameters'
p10718
(lp10719
(dp10720
S'description'
p10721
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10722
sS'cpp_type'
p10723
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10724
sS'default'
p10725
g3
sS'name'
p10726
S'block'
p10727
sS'required'
p10728
I00
sS'group_name'
p10729
Nsa(dp10730
S'description'
p10731
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10732
sS'cpp_type'
p10733
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10734
sS'default'
p10735
g3
sS'name'
p10736
S'boundary'
p10737
sS'required'
p10738
I00
sS'group_name'
p10739
Nsa(dp10740
S'description'
p10741
S'The column component to consider for this kernel\n'
p10742
sS'cpp_type'
p10743
S'unsigned int'
p10744
sS'default'
p10745
S'0'
p10746
sS'name'
p10747
S'column'
p10748
sS'required'
p10749
I00
sS'group_name'
p10750
Nsa(dp10751
S'description'
p10752
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10753
sS'cpp_type'
p10754
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p10755
sS'default'
p10756
g3
sS'name'
p10757
S'control_tags'
p10758
sS'required'
p10759
I00
sS'group_name'
p10760
S'Advanced'
p10761
sa(dp10762
S'description'
p10763
S'Set the enabled status of the MooseObject.\n'
p10764
sS'cpp_type'
p10765
S'bool'
p10766
sS'default'
p10767
S'1'
p10768
sS'name'
p10769
S'enable'
p10770
sS'required'
p10771
I00
sS'group_name'
p10772
S'Advanced'
p10773
sa(dp10774
S'name'
p10775
S'execute_on'
p10776
sS'cpp_type'
p10777
S'MultiMooseEnum'
p10778
sS'default'
p10779
S'LINEAR'
p10780
sS'description'
p10781
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10782
sS'required'
p10783
I00
sS'options'
p10784
S'none initial linear nonlinear timestep_end timestep_begin custom'
p10785
sS'group_name'
p10786
Nsa(dp10787
S'description'
p10788
S'The factor by which to multiply your material property for visualization\n'
p10789
sS'cpp_type'
p10790
S'double'
p10791
sS'default'
p10792
S'1'
p10793
sS'name'
p10794
S'factor'
p10795
sS'required'
p10796
I00
sS'group_name'
p10797
Nsa(dp10798
S'description'
p10799
S'The offset to add to your material property for visualization\n'
p10800
sS'cpp_type'
p10801
S'double'
p10802
sS'default'
p10803
S'0'
p10804
sS'name'
p10805
S'offset'
p10806
sS'required'
p10807
I00
sS'group_name'
p10808
Nsa(dp10809
S'description'
p10810
S'The scalar material property name\n'
p10811
sS'cpp_type'
p10812
S'MaterialPropertyName'
p10813
sS'default'
p10814
g3
sS'name'
p10815
S'property'
p10816
sS'required'
p10817
I01
sS'group_name'
p10818
Nsa(dp10819
S'description'
p10820
S'The row component to consider for this kernel\n'
p10821
sS'cpp_type'
p10822
S'unsigned int'
p10823
sS'default'
p10824
S'0'
p10825
sS'name'
p10826
S'row'
p10827
sS'required'
p10828
I00
sS'group_name'
p10829
Nsa(dp10830
S'description'
p10831
S'The seed for the master random number generator\n'
p10832
sS'cpp_type'
p10833
S'unsigned int'
p10834
sS'default'
p10835
S'0'
p10836
sS'name'
p10837
S'seed'
p10838
sS'required'
p10839
I00
sS'group_name'
p10840
S'Advanced'
p10841
sa(dp10842
S'description'
p10843
g3
sS'cpp_type'
p10844
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10845
sS'default'
p10846
S'MaterialRealTensorValueAux'
p10847
sS'name'
p10848
S'type'
p10849
sS'required'
p10850
I00
sS'group_name'
p10851
Nsa(dp10852
S'description'
p10853
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10854
sS'cpp_type'
p10855
S'bool'
p10856
sS'default'
p10857
S'0'
p10858
sS'name'
p10859
S'use_displaced_mesh'
p10860
sS'required'
p10861
I00
sS'group_name'
p10862
S'Advanced'
p10863
sa(dp10864
S'description'
p10865
S'The name of the variable that this object applies to\n'
p10866
sS'cpp_type'
p10867
S'AuxVariableName'
p10868
sS'default'
p10869
g3
sS'name'
p10870
S'variable'
p10871
sS'required'
p10872
I01
sS'group_name'
p10873
NsasS'name'
p10874
S'/Bounds/MaterialRealTensorValueAux'
p10875
sa(dp10876
S'description'
p10877
g3
sS'subblocks'
p10878
NsS'parameters'
p10879
(lp10880
(dp10881
S'description'
p10882
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10883
sS'cpp_type'
p10884
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10885
sS'default'
p10886
g3
sS'name'
p10887
S'block'
p10888
sS'required'
p10889
I00
sS'group_name'
p10890
Nsa(dp10891
S'description'
p10892
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10893
sS'cpp_type'
p10894
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10895
sS'default'
p10896
g3
sS'name'
p10897
S'boundary'
p10898
sS'required'
p10899
I00
sS'group_name'
p10900
Nsa(dp10901
S'description'
p10902
S'The vector component to consider for this kernel\n'
p10903
sS'cpp_type'
p10904
S'unsigned int'
p10905
sS'default'
p10906
S'0'
p10907
sS'name'
p10908
S'component'
p10909
sS'required'
p10910
I00
sS'group_name'
p10911
Nsa(dp10912
S'description'
p10913
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10914
sS'cpp_type'
p10915
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p10916
sS'default'
p10917
g3
sS'name'
p10918
S'control_tags'
p10919
sS'required'
p10920
I00
sS'group_name'
p10921
S'Advanced'
p10922
sa(dp10923
S'description'
p10924
S'Set the enabled status of the MooseObject.\n'
p10925
sS'cpp_type'
p10926
S'bool'
p10927
sS'default'
p10928
S'1'
p10929
sS'name'
p10930
S'enable'
p10931
sS'required'
p10932
I00
sS'group_name'
p10933
S'Advanced'
p10934
sa(dp10935
S'name'
p10936
S'execute_on'
p10937
sS'cpp_type'
p10938
S'MultiMooseEnum'
p10939
sS'default'
p10940
S'LINEAR'
p10941
sS'description'
p10942
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10943
sS'required'
p10944
I00
sS'options'
p10945
S'none initial linear nonlinear timestep_end timestep_begin custom'
p10946
sS'group_name'
p10947
Nsa(dp10948
S'description'
p10949
S'The factor by which to multiply your material property for visualization\n'
p10950
sS'cpp_type'
p10951
S'double'
p10952
sS'default'
p10953
S'1'
p10954
sS'name'
p10955
S'factor'
p10956
sS'required'
p10957
I00
sS'group_name'
p10958
Nsa(dp10959
S'description'
p10960
S'The offset to add to your material property for visualization\n'
p10961
sS'cpp_type'
p10962
S'double'
p10963
sS'default'
p10964
S'0'
p10965
sS'name'
p10966
S'offset'
p10967
sS'required'
p10968
I00
sS'group_name'
p10969
Nsa(dp10970
S'description'
p10971
S'The scalar material property name\n'
p10972
sS'cpp_type'
p10973
S'MaterialPropertyName'
p10974
sS'default'
p10975
g3
sS'name'
p10976
S'property'
p10977
sS'required'
p10978
I01
sS'group_name'
p10979
Nsa(dp10980
S'description'
p10981
S'The seed for the master random number generator\n'
p10982
sS'cpp_type'
p10983
S'unsigned int'
p10984
sS'default'
p10985
S'0'
p10986
sS'name'
p10987
S'seed'
p10988
sS'required'
p10989
I00
sS'group_name'
p10990
S'Advanced'
p10991
sa(dp10992
S'description'
p10993
g3
sS'cpp_type'
p10994
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10995
sS'default'
p10996
S'MaterialRealVectorValueAux'
p10997
sS'name'
p10998
S'type'
p10999
sS'required'
p11000
I00
sS'group_name'
p11001
Nsa(dp11002
S'description'
p11003
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11004
sS'cpp_type'
p11005
S'bool'
p11006
sS'default'
p11007
S'0'
p11008
sS'name'
p11009
S'use_displaced_mesh'
p11010
sS'required'
p11011
I00
sS'group_name'
p11012
S'Advanced'
p11013
sa(dp11014
S'description'
p11015
S'The name of the variable that this object applies to\n'
p11016
sS'cpp_type'
p11017
S'AuxVariableName'
p11018
sS'default'
p11019
g3
sS'name'
p11020
S'variable'
p11021
sS'required'
p11022
I01
sS'group_name'
p11023
NsasS'name'
p11024
S'/Bounds/MaterialRealVectorValueAux'
p11025
sa(dp11026
S'description'
p11027
S'Extracts a component of a material type std::vector<Real> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n'
p11028
sS'subblocks'
p11029
NsS'parameters'
p11030
(lp11031
(dp11032
S'description'
p11033
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11034
sS'cpp_type'
p11035
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11036
sS'default'
p11037
g3
sS'name'
p11038
S'block'
p11039
sS'required'
p11040
I00
sS'group_name'
p11041
Nsa(dp11042
S'description'
p11043
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11044
sS'cpp_type'
p11045
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11046
sS'default'
p11047
g3
sS'name'
p11048
S'boundary'
p11049
sS'required'
p11050
I00
sS'group_name'
p11051
Nsa(dp11052
S'description'
p11053
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11054
sS'cpp_type'
p11055
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11056
sS'default'
p11057
g3
sS'name'
p11058
S'control_tags'
p11059
sS'required'
p11060
I00
sS'group_name'
p11061
S'Advanced'
p11062
sa(dp11063
S'description'
p11064
S'Set the enabled status of the MooseObject.\n'
p11065
sS'cpp_type'
p11066
S'bool'
p11067
sS'default'
p11068
S'1'
p11069
sS'name'
p11070
S'enable'
p11071
sS'required'
p11072
I00
sS'group_name'
p11073
S'Advanced'
p11074
sa(dp11075
S'name'
p11076
S'execute_on'
p11077
sS'cpp_type'
p11078
S'MultiMooseEnum'
p11079
sS'default'
p11080
S'LINEAR'
p11081
sS'description'
p11082
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11083
sS'required'
p11084
I00
sS'options'
p11085
S'none initial linear nonlinear timestep_end timestep_begin custom'
p11086
sS'group_name'
p11087
Nsa(dp11088
S'description'
p11089
S'The factor by which to multiply your material property for visualization\n'
p11090
sS'cpp_type'
p11091
S'double'
p11092
sS'default'
p11093
S'1'
p11094
sS'name'
p11095
S'factor'
p11096
sS'required'
p11097
I00
sS'group_name'
p11098
Nsa(dp11099
S'description'
p11100
S'The index to consider for this kernel\n'
p11101
sS'cpp_type'
p11102
S'unsigned int'
p11103
sS'default'
p11104
S'0'
p11105
sS'name'
p11106
S'index'
p11107
sS'required'
p11108
I00
sS'group_name'
p11109
Nsa(dp11110
S'description'
p11111
S'The offset to add to your material property for visualization\n'
p11112
sS'cpp_type'
p11113
S'double'
p11114
sS'default'
p11115
S'0'
p11116
sS'name'
p11117
S'offset'
p11118
sS'required'
p11119
I00
sS'group_name'
p11120
Nsa(dp11121
S'description'
p11122
S'The scalar material property name\n'
p11123
sS'cpp_type'
p11124
S'MaterialPropertyName'
p11125
sS'default'
p11126
g3
sS'name'
p11127
S'property'
p11128
sS'required'
p11129
I01
sS'group_name'
p11130
Nsa(dp11131
S'description'
p11132
S'The seed for the master random number generator\n'
p11133
sS'cpp_type'
p11134
S'unsigned int'
p11135
sS'default'
p11136
S'0'
p11137
sS'name'
p11138
S'seed'
p11139
sS'required'
p11140
I00
sS'group_name'
p11141
S'Advanced'
p11142
sa(dp11143
S'description'
p11144
S'Evaluate the std::vector<Real> at this quadpoint.  This only needs to be used if you are interested in a particular quadpoint in each element: otherwise do not include this parameter in your input file\n'
p11145
sS'cpp_type'
p11146
S'unsigned int'
p11147
sS'default'
p11148
g3
sS'name'
p11149
S'selected_qp'
p11150
sS'required'
p11151
I00
sS'group_name'
p11152
S'Advanced'
p11153
sa(dp11154
S'description'
p11155
g3
sS'cpp_type'
p11156
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11157
sS'default'
p11158
S'MaterialStdVectorAux'
p11159
sS'name'
p11160
S'type'
p11161
sS'required'
p11162
I00
sS'group_name'
p11163
Nsa(dp11164
S'description'
p11165
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11166
sS'cpp_type'
p11167
S'bool'
p11168
sS'default'
p11169
S'0'
p11170
sS'name'
p11171
S'use_displaced_mesh'
p11172
sS'required'
p11173
I00
sS'group_name'
p11174
S'Advanced'
p11175
sa(dp11176
S'description'
p11177
S'The name of the variable that this object applies to\n'
p11178
sS'cpp_type'
p11179
S'AuxVariableName'
p11180
sS'default'
p11181
g3
sS'name'
p11182
S'variable'
p11183
sS'required'
p11184
I01
sS'group_name'
p11185
NsasS'name'
p11186
S'/Bounds/MaterialStdVectorAux'
p11187
sa(dp11188
S'description'
p11189
S"Extracts a component of a material's std::vector<RealGradient> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n"
p11190
sS'subblocks'
p11191
NsS'parameters'
p11192
(lp11193
(dp11194
S'description'
p11195
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11196
sS'cpp_type'
p11197
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11198
sS'default'
p11199
g3
sS'name'
p11200
S'block'
p11201
sS'required'
p11202
I00
sS'group_name'
p11203
Nsa(dp11204
S'description'
p11205
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11206
sS'cpp_type'
p11207
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11208
sS'default'
p11209
g3
sS'name'
p11210
S'boundary'
p11211
sS'required'
p11212
I00
sS'group_name'
p11213
Nsa(dp11214
S'description'
p11215
S'The gradient component to be extracted for this kernel\n'
p11216
sS'cpp_type'
p11217
S'unsigned int'
p11218
sS'default'
p11219
S'0'
p11220
sS'name'
p11221
S'component'
p11222
sS'required'
p11223
I00
sS'group_name'
p11224
Nsa(dp11225
S'description'
p11226
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11227
sS'cpp_type'
p11228
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11229
sS'default'
p11230
g3
sS'name'
p11231
S'control_tags'
p11232
sS'required'
p11233
I00
sS'group_name'
p11234
S'Advanced'
p11235
sa(dp11236
S'description'
p11237
S'Set the enabled status of the MooseObject.\n'
p11238
sS'cpp_type'
p11239
S'bool'
p11240
sS'default'
p11241
S'1'
p11242
sS'name'
p11243
S'enable'
p11244
sS'required'
p11245
I00
sS'group_name'
p11246
S'Advanced'
p11247
sa(dp11248
S'name'
p11249
S'execute_on'
p11250
sS'cpp_type'
p11251
S'MultiMooseEnum'
p11252
sS'default'
p11253
S'LINEAR'
p11254
sS'description'
p11255
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11256
sS'required'
p11257
I00
sS'options'
p11258
S'none initial linear nonlinear timestep_end timestep_begin custom'
p11259
sS'group_name'
p11260
Nsa(dp11261
S'description'
p11262
S'The factor by which to multiply your material property for visualization\n'
p11263
sS'cpp_type'
p11264
S'double'
p11265
sS'default'
p11266
S'1'
p11267
sS'name'
p11268
S'factor'
p11269
sS'required'
p11270
I00
sS'group_name'
p11271
Nsa(dp11272
S'description'
p11273
S'The index to consider for this kernel\n'
p11274
sS'cpp_type'
p11275
S'unsigned int'
p11276
sS'default'
p11277
S'0'
p11278
sS'name'
p11279
S'index'
p11280
sS'required'
p11281
I00
sS'group_name'
p11282
Nsa(dp11283
S'description'
p11284
S'The offset to add to your material property for visualization\n'
p11285
sS'cpp_type'
p11286
S'double'
p11287
sS'default'
p11288
S'0'
p11289
sS'name'
p11290
S'offset'
p11291
sS'required'
p11292
I00
sS'group_name'
p11293
Nsa(dp11294
S'description'
p11295
S'The scalar material property name\n'
p11296
sS'cpp_type'
p11297
S'MaterialPropertyName'
p11298
sS'default'
p11299
g3
sS'name'
p11300
S'property'
p11301
sS'required'
p11302
I01
sS'group_name'
p11303
Nsa(dp11304
S'description'
p11305
S'The seed for the master random number generator\n'
p11306
sS'cpp_type'
p11307
S'unsigned int'
p11308
sS'default'
p11309
S'0'
p11310
sS'name'
p11311
S'seed'
p11312
sS'required'
p11313
I00
sS'group_name'
p11314
S'Advanced'
p11315
sa(dp11316
S'description'
p11317
g3
sS'cpp_type'
p11318
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11319
sS'default'
p11320
S'MaterialStdVectorRealGradientAux'
p11321
sS'name'
p11322
S'type'
p11323
sS'required'
p11324
I00
sS'group_name'
p11325
Nsa(dp11326
S'description'
p11327
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11328
sS'cpp_type'
p11329
S'bool'
p11330
sS'default'
p11331
S'0'
p11332
sS'name'
p11333
S'use_displaced_mesh'
p11334
sS'required'
p11335
I00
sS'group_name'
p11336
S'Advanced'
p11337
sa(dp11338
S'description'
p11339
S'The name of the variable that this object applies to\n'
p11340
sS'cpp_type'
p11341
S'AuxVariableName'
p11342
sS'default'
p11343
g3
sS'name'
p11344
S'variable'
p11345
sS'required'
p11346
I01
sS'group_name'
p11347
NsasS'name'
p11348
S'/Bounds/MaterialStdVectorRealGradientAux'
p11349
sa(dp11350
S'description'
p11351
g3
sS'subblocks'
p11352
NsS'parameters'
p11353
(lp11354
(dp11355
S'description'
p11356
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11357
sS'cpp_type'
p11358
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11359
sS'default'
p11360
g3
sS'name'
p11361
S'block'
p11362
sS'required'
p11363
I00
sS'group_name'
p11364
Nsa(dp11365
S'description'
p11366
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11367
sS'cpp_type'
p11368
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11369
sS'default'
p11370
g3
sS'name'
p11371
S'boundary'
p11372
sS'required'
p11373
I00
sS'group_name'
p11374
Nsa(dp11375
S'description'
p11376
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11377
sS'cpp_type'
p11378
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11379
sS'default'
p11380
g3
sS'name'
p11381
S'control_tags'
p11382
sS'required'
p11383
I00
sS'group_name'
p11384
S'Advanced'
p11385
sa(dp11386
S'description'
p11387
S'Set the enabled status of the MooseObject.\n'
p11388
sS'cpp_type'
p11389
S'bool'
p11390
sS'default'
p11391
S'1'
p11392
sS'name'
p11393
S'enable'
p11394
sS'required'
p11395
I00
sS'group_name'
p11396
S'Advanced'
p11397
sa(dp11398
S'name'
p11399
S'execute_on'
p11400
sS'cpp_type'
p11401
S'MultiMooseEnum'
p11402
sS'default'
p11403
S'LINEAR'
p11404
sS'description'
p11405
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11406
sS'required'
p11407
I00
sS'options'
p11408
S'none initial linear nonlinear timestep_end timestep_begin custom'
p11409
sS'group_name'
p11410
Nsa(dp11411
S'description'
p11412
S'The boundary to find the distance to.\n'
p11413
sS'cpp_type'
p11414
S'BoundaryName'
p11415
sS'default'
p11416
g3
sS'name'
p11417
S'paired_boundary'
p11418
sS'required'
p11419
I01
sS'group_name'
p11420
Nsa(dp11421
S'description'
p11422
S'The seed for the master random number generator\n'
p11423
sS'cpp_type'
p11424
S'unsigned int'
p11425
sS'default'
p11426
S'0'
p11427
sS'name'
p11428
S'seed'
p11429
sS'required'
p11430
I00
sS'group_name'
p11431
S'Advanced'
p11432
sa(dp11433
S'description'
p11434
g3
sS'cpp_type'
p11435
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11436
sS'default'
p11437
S'NearestNodeDistanceAux'
p11438
sS'name'
p11439
S'type'
p11440
sS'required'
p11441
I00
sS'group_name'
p11442
Nsa(dp11443
S'description'
p11444
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11445
sS'cpp_type'
p11446
S'bool'
p11447
sS'default'
p11448
S'1'
p11449
sS'name'
p11450
S'use_displaced_mesh'
p11451
sS'required'
p11452
I00
sS'group_name'
p11453
S'Advanced'
p11454
sa(dp11455
S'description'
p11456
S'The name of the variable that this object applies to\n'
p11457
sS'cpp_type'
p11458
S'AuxVariableName'
p11459
sS'default'
p11460
g3
sS'name'
p11461
S'variable'
p11462
sS'required'
p11463
I01
sS'group_name'
p11464
NsasS'name'
p11465
S'/Bounds/NearestNodeDistanceAux'
p11466
sa(dp11467
S'description'
p11468
g3
sS'subblocks'
p11469
NsS'parameters'
p11470
(lp11471
(dp11472
S'description'
p11473
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11474
sS'cpp_type'
p11475
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11476
sS'default'
p11477
g3
sS'name'
p11478
S'block'
p11479
sS'required'
p11480
I00
sS'group_name'
p11481
Nsa(dp11482
S'description'
p11483
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11484
sS'cpp_type'
p11485
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11486
sS'default'
p11487
g3
sS'name'
p11488
S'boundary'
p11489
sS'required'
p11490
I00
sS'group_name'
p11491
Nsa(dp11492
S'description'
p11493
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11494
sS'cpp_type'
p11495
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11496
sS'default'
p11497
g3
sS'name'
p11498
S'control_tags'
p11499
sS'required'
p11500
I00
sS'group_name'
p11501
S'Advanced'
p11502
sa(dp11503
S'description'
p11504
S'Set the enabled status of the MooseObject.\n'
p11505
sS'cpp_type'
p11506
S'bool'
p11507
sS'default'
p11508
S'1'
p11509
sS'name'
p11510
S'enable'
p11511
sS'required'
p11512
I00
sS'group_name'
p11513
S'Advanced'
p11514
sa(dp11515
S'name'
p11516
S'execute_on'
p11517
sS'cpp_type'
p11518
S'MultiMooseEnum'
p11519
sS'default'
p11520
S'LINEAR'
p11521
sS'description'
p11522
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11523
sS'required'
p11524
I00
sS'options'
p11525
S'none initial linear nonlinear timestep_end timestep_begin custom'
p11526
sS'group_name'
p11527
Nsa(dp11528
S'description'
p11529
S'The boundary to get the value from.\n'
p11530
sS'cpp_type'
p11531
S'BoundaryName'
p11532
sS'default'
p11533
g3
sS'name'
p11534
S'paired_boundary'
p11535
sS'required'
p11536
I01
sS'group_name'
p11537
Nsa(dp11538
S'description'
p11539
S'The variable to get the value of.\n'
p11540
sS'cpp_type'
p11541
S'std::vector<VariableName>'
p11542
sS'default'
p11543
g3
sS'name'
p11544
S'paired_variable'
p11545
sS'required'
p11546
I01
sS'group_name'
p11547
Nsa(dp11548
S'description'
p11549
S'The seed for the master random number generator\n'
p11550
sS'cpp_type'
p11551
S'unsigned int'
p11552
sS'default'
p11553
S'0'
p11554
sS'name'
p11555
S'seed'
p11556
sS'required'
p11557
I00
sS'group_name'
p11558
S'Advanced'
p11559
sa(dp11560
S'description'
p11561
g3
sS'cpp_type'
p11562
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11563
sS'default'
p11564
S'NearestNodeValueAux'
p11565
sS'name'
p11566
S'type'
p11567
sS'required'
p11568
I00
sS'group_name'
p11569
Nsa(dp11570
S'description'
p11571
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11572
sS'cpp_type'
p11573
S'bool'
p11574
sS'default'
p11575
S'1'
p11576
sS'name'
p11577
S'use_displaced_mesh'
p11578
sS'required'
p11579
I00
sS'group_name'
p11580
S'Advanced'
p11581
sa(dp11582
S'description'
p11583
S'The name of the variable that this object applies to\n'
p11584
sS'cpp_type'
p11585
S'AuxVariableName'
p11586
sS'default'
p11587
g3
sS'name'
p11588
S'variable'
p11589
sS'required'
p11590
I01
sS'group_name'
p11591
NsasS'name'
p11592
S'/Bounds/NearestNodeValueAux'
p11593
sa(dp11594
S'description'
p11595
g3
sS'subblocks'
p11596
NsS'parameters'
p11597
(lp11598
(dp11599
S'description'
p11600
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11601
sS'cpp_type'
p11602
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11603
sS'default'
p11604
g3
sS'name'
p11605
S'block'
p11606
sS'required'
p11607
I00
sS'group_name'
p11608
Nsa(dp11609
S'description'
p11610
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11611
sS'cpp_type'
p11612
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11613
sS'default'
p11614
g3
sS'name'
p11615
S'boundary'
p11616
sS'required'
p11617
I00
sS'group_name'
p11618
Nsa(dp11619
S'description'
p11620
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11621
sS'cpp_type'
p11622
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11623
sS'default'
p11624
g3
sS'name'
p11625
S'control_tags'
p11626
sS'required'
p11627
I00
sS'group_name'
p11628
S'Advanced'
p11629
sa(dp11630
S'description'
p11631
S'Set the enabled status of the MooseObject.\n'
p11632
sS'cpp_type'
p11633
S'bool'
p11634
sS'default'
p11635
S'1'
p11636
sS'name'
p11637
S'enable'
p11638
sS'required'
p11639
I00
sS'group_name'
p11640
S'Advanced'
p11641
sa(dp11642
S'name'
p11643
S'execute_on'
p11644
sS'cpp_type'
p11645
S'MultiMooseEnum'
p11646
sS'default'
p11647
S'LINEAR'
p11648
sS'description'
p11649
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11650
sS'required'
p11651
I00
sS'options'
p11652
S'none initial linear nonlinear timestep_end timestep_begin custom'
p11653
sS'group_name'
p11654
Nsa(dp11655
S'description'
p11656
S'The normalization factor\n'
p11657
sS'cpp_type'
p11658
S'double'
p11659
sS'default'
p11660
S'1'
p11661
sS'name'
p11662
S'normal_factor'
p11663
sS'required'
p11664
I00
sS'group_name'
p11665
Nsa(dp11666
S'description'
p11667
S'The postprocessor on the source\n'
p11668
sS'cpp_type'
p11669
S'PostprocessorName'
p11670
sS'default'
p11671
g3
sS'name'
p11672
S'normalization'
p11673
sS'required'
p11674
I01
sS'group_name'
p11675
Nsa(dp11676
S'description'
p11677
S'The seed for the master random number generator\n'
p11678
sS'cpp_type'
p11679
S'unsigned int'
p11680
sS'default'
p11681
S'0'
p11682
sS'name'
p11683
S'seed'
p11684
sS'required'
p11685
I00
sS'group_name'
p11686
S'Advanced'
p11687
sa(dp11688
S'description'
p11689
S'The variable to be normalized\n'
p11690
sS'cpp_type'
p11691
S'std::vector<VariableName>'
p11692
sS'default'
p11693
g3
sS'name'
p11694
S'source_variable'
p11695
sS'required'
p11696
I01
sS'group_name'
p11697
Nsa(dp11698
S'description'
p11699
g3
sS'cpp_type'
p11700
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11701
sS'default'
p11702
S'NormalizationAux'
p11703
sS'name'
p11704
S'type'
p11705
sS'required'
p11706
I00
sS'group_name'
p11707
Nsa(dp11708
S'description'
p11709
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11710
sS'cpp_type'
p11711
S'bool'
p11712
sS'default'
p11713
S'0'
p11714
sS'name'
p11715
S'use_displaced_mesh'
p11716
sS'required'
p11717
I00
sS'group_name'
p11718
S'Advanced'
p11719
sa(dp11720
S'description'
p11721
S'The name of the variable that this object applies to\n'
p11722
sS'cpp_type'
p11723
S'AuxVariableName'
p11724
sS'default'
p11725
g3
sS'name'
p11726
S'variable'
p11727
sS'required'
p11728
I01
sS'group_name'
p11729
NsasS'name'
p11730
S'/Bounds/NormalizationAux'
p11731
sa(dp11732
S'description'
p11733
S'Parsed function AuxKernel.\n'
p11734
sS'subblocks'
p11735
NsS'parameters'
p11736
(lp11737
(dp11738
S'description'
p11739
S'coupled variables\n'
p11740
sS'cpp_type'
p11741
S'std::vector<VariableName>'
p11742
sS'default'
p11743
g3
sS'name'
p11744
S'args'
p11745
sS'required'
p11746
I00
sS'group_name'
p11747
Nsa(dp11748
S'description'
p11749
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11750
sS'cpp_type'
p11751
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11752
sS'default'
p11753
g3
sS'name'
p11754
S'block'
p11755
sS'required'
p11756
I00
sS'group_name'
p11757
Nsa(dp11758
S'description'
p11759
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11760
sS'cpp_type'
p11761
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11762
sS'default'
p11763
g3
sS'name'
p11764
S'boundary'
p11765
sS'required'
p11766
I00
sS'group_name'
p11767
Nsa(dp11768
S'description'
p11769
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p11770
sS'cpp_type'
p11771
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11772
sS'default'
p11773
g3
sS'name'
p11774
S'constant_expressions'
p11775
sS'required'
p11776
I00
sS'group_name'
p11777
Nsa(dp11778
S'description'
p11779
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p11780
sS'cpp_type'
p11781
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11782
sS'default'
p11783
g3
sS'name'
p11784
S'constant_names'
p11785
sS'required'
p11786
I00
sS'group_name'
p11787
Nsa(dp11788
S'description'
p11789
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11790
sS'cpp_type'
p11791
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11792
sS'default'
p11793
g3
sS'name'
p11794
S'control_tags'
p11795
sS'required'
p11796
I00
sS'group_name'
p11797
S'Advanced'
p11798
sa(dp11799
S'description'
p11800
S'Disable the function parser algebraic optimizer\n'
p11801
sS'cpp_type'
p11802
S'bool'
p11803
sS'default'
p11804
S'0'
p11805
sS'name'
p11806
S'disable_fpoptimizer'
p11807
sS'required'
p11808
I00
sS'group_name'
p11809
S'Advanced'
p11810
sa(dp11811
S'description'
p11812
S'Set the enabled status of the MooseObject.\n'
p11813
sS'cpp_type'
p11814
S'bool'
p11815
sS'default'
p11816
S'1'
p11817
sS'name'
p11818
S'enable'
p11819
sS'required'
p11820
I00
sS'group_name'
p11821
S'Advanced'
p11822
sa(dp11823
S'description'
p11824
S'Enable cacheing of function derivatives for faster startup time\n'
p11825
sS'cpp_type'
p11826
S'bool'
p11827
sS'default'
p11828
S'1'
p11829
sS'name'
p11830
S'enable_ad_cache'
p11831
sS'required'
p11832
I00
sS'group_name'
p11833
S'Advanced'
p11834
sa(dp11835
S'description'
p11836
S'Enable automatic immediate optimization of derivatives\n'
p11837
sS'cpp_type'
p11838
S'bool'
p11839
sS'default'
p11840
S'1'
p11841
sS'name'
p11842
S'enable_auto_optimize'
p11843
sS'required'
p11844
I00
sS'group_name'
p11845
S'Advanced'
p11846
sa(dp11847
S'description'
p11848
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p11849
sS'cpp_type'
p11850
S'bool'
p11851
sS'default'
p11852
S'1'
p11853
sS'name'
p11854
S'enable_jit'
p11855
sS'required'
p11856
I00
sS'group_name'
p11857
S'Advanced'
p11858
sa(dp11859
S'name'
p11860
S'execute_on'
p11861
sS'cpp_type'
p11862
S'MultiMooseEnum'
p11863
sS'default'
p11864
S'LINEAR'
p11865
sS'description'
p11866
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11867
sS'required'
p11868
I00
sS'options'
p11869
S'none initial linear nonlinear timestep_end timestep_begin custom'
p11870
sS'group_name'
p11871
Nsa(dp11872
S'description'
p11873
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p11874
sS'cpp_type'
p11875
S'bool'
p11876
sS'default'
p11877
S'0'
p11878
sS'name'
p11879
S'fail_on_evalerror'
p11880
sS'required'
p11881
I00
sS'group_name'
p11882
S'Advanced'
p11883
sa(dp11884
S'description'
p11885
S'function expression\n'
p11886
sS'cpp_type'
p11887
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11888
sS'default'
p11889
g3
sS'name'
p11890
S'function'
p11891
sS'required'
p11892
I01
sS'group_name'
p11893
Nsa(dp11894
S'description'
p11895
S'The seed for the master random number generator\n'
p11896
sS'cpp_type'
p11897
S'unsigned int'
p11898
sS'default'
p11899
S'0'
p11900
sS'name'
p11901
S'seed'
p11902
sS'required'
p11903
I00
sS'group_name'
p11904
S'Advanced'
p11905
sa(dp11906
S'description'
p11907
g3
sS'cpp_type'
p11908
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11909
sS'default'
p11910
S'ParsedAux'
p11911
sS'name'
p11912
S'type'
p11913
sS'required'
p11914
I00
sS'group_name'
p11915
Nsa(dp11916
S'description'
p11917
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11918
sS'cpp_type'
p11919
S'bool'
p11920
sS'default'
p11921
S'0'
p11922
sS'name'
p11923
S'use_displaced_mesh'
p11924
sS'required'
p11925
I00
sS'group_name'
p11926
S'Advanced'
p11927
sa(dp11928
S'description'
p11929
S'The name of the variable that this object applies to\n'
p11930
sS'cpp_type'
p11931
S'AuxVariableName'
p11932
sS'default'
p11933
g3
sS'name'
p11934
S'variable'
p11935
sS'required'
p11936
I01
sS'group_name'
p11937
NsasS'name'
p11938
S'/Bounds/ParsedAux'
p11939
sa(dp11940
S'description'
p11941
g3
sS'subblocks'
p11942
NsS'parameters'
p11943
(lp11944
(dp11945
S'description'
p11946
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11947
sS'cpp_type'
p11948
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11949
sS'default'
p11950
g3
sS'name'
p11951
S'block'
p11952
sS'required'
p11953
I00
sS'group_name'
p11954
Nsa(dp11955
S'description'
p11956
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11957
sS'cpp_type'
p11958
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11959
sS'default'
p11960
g3
sS'name'
p11961
S'boundary'
p11962
sS'required'
p11963
I00
sS'group_name'
p11964
Nsa(dp11965
S'description'
p11966
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11967
sS'cpp_type'
p11968
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11969
sS'default'
p11970
g3
sS'name'
p11971
S'control_tags'
p11972
sS'required'
p11973
I00
sS'group_name'
p11974
S'Advanced'
p11975
sa(dp11976
S'description'
p11977
S'Set the enabled status of the MooseObject.\n'
p11978
sS'cpp_type'
p11979
S'bool'
p11980
sS'default'
p11981
S'1'
p11982
sS'name'
p11983
S'enable'
p11984
sS'required'
p11985
I00
sS'group_name'
p11986
S'Advanced'
p11987
sa(dp11988
S'name'
p11989
S'execute_on'
p11990
sS'cpp_type'
p11991
S'MultiMooseEnum'
p11992
sS'default'
p11993
S'LINEAR'
p11994
sS'description'
p11995
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11996
sS'required'
p11997
I00
sS'options'
p11998
S'none initial linear nonlinear timestep_end timestep_begin custom'
p11999
sS'group_name'
p12000
Nsa(dp12001
S'description'
p12002
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p12003
sS'cpp_type'
p12004
S'double'
p12005
sS'default'
p12006
g3
sS'name'
p12007
S'normal_smoothing_distance'
p12008
sS'required'
p12009
I00
sS'group_name'
p12010
Nsa(dp12011
S'description'
p12012
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p12013
sS'cpp_type'
p12014
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12015
sS'default'
p12016
g3
sS'name'
p12017
S'normal_smoothing_method'
p12018
sS'required'
p12019
I00
sS'group_name'
p12020
Nsa(dp12021
S'name'
p12022
S'order'
p12023
sS'cpp_type'
p12024
S'MooseEnum'
p12025
sS'default'
p12026
S'FIRST'
p12027
sS'description'
p12028
S'The finite element order\n'
p12029
sS'required'
p12030
I00
sS'options'
p12031
S'FIRST SECOND THIRD FOURTH'
p12032
sS'group_name'
p12033
Nsa(dp12034
S'description'
p12035
S'The boundary to be penetrated\n'
p12036
sS'cpp_type'
p12037
S'BoundaryName'
p12038
sS'default'
p12039
g3
sS'name'
p12040
S'paired_boundary'
p12041
sS'required'
p12042
I01
sS'group_name'
p12043
Nsa(dp12044
S'name'
p12045
S'quantity'
p12046
sS'cpp_type'
p12047
S'MooseEnum'
p12048
sS'default'
p12049
S'distance'
p12050
sS'description'
p12051
S'The quantity to recover from the available penetration information\n'
p12052
sS'required'
p12053
I00
sS'options'
p12054
S'distance tangential_distance normal_x normal_y normal_z closest_point_x closest_point_y closest_point_z element_id side incremental_slip_magnitude incremental_slip_x incremental_slip_y incremental_slip_z accumulated_slip force_x force_y force_z normal_force_magnitude normal_force_x normal_force_y normal_force_z tangential_force_magnitude tangential_force_x tangential_force_y tangential_force_z frictional_energy lagrange_multiplier mechanical_status'
p12055
sS'group_name'
p12056
Nsa(dp12057
S'description'
p12058
S'The seed for the master random number generator\n'
p12059
sS'cpp_type'
p12060
S'unsigned int'
p12061
sS'default'
p12062
S'0'
p12063
sS'name'
p12064
S'seed'
p12065
sS'required'
p12066
I00
sS'group_name'
p12067
S'Advanced'
p12068
sa(dp12069
S'description'
p12070
S'Tangential distance to extend edges of contact surfaces\n'
p12071
sS'cpp_type'
p12072
S'double'
p12073
sS'default'
p12074
g3
sS'name'
p12075
S'tangential_tolerance'
p12076
sS'required'
p12077
I00
sS'group_name'
p12078
Nsa(dp12079
S'description'
p12080
g3
sS'cpp_type'
p12081
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12082
sS'default'
p12083
S'PenetrationAux'
p12084
sS'name'
p12085
S'type'
p12086
sS'required'
p12087
I00
sS'group_name'
p12088
Nsa(dp12089
S'description'
p12090
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12091
sS'cpp_type'
p12092
S'bool'
p12093
sS'default'
p12094
S'1'
p12095
sS'name'
p12096
S'use_displaced_mesh'
p12097
sS'required'
p12098
I00
sS'group_name'
p12099
S'Advanced'
p12100
sa(dp12101
S'description'
p12102
S'The name of the variable that this object applies to\n'
p12103
sS'cpp_type'
p12104
S'AuxVariableName'
p12105
sS'default'
p12106
g3
sS'name'
p12107
S'variable'
p12108
sS'required'
p12109
I01
sS'group_name'
p12110
NsasS'name'
p12111
S'/Bounds/PenetrationAux'
p12112
sa(dp12113
S'description'
p12114
g3
sS'subblocks'
p12115
NsS'parameters'
p12116
(lp12117
(dp12118
S'description'
p12119
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12120
sS'cpp_type'
p12121
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p12122
sS'default'
p12123
g3
sS'name'
p12124
S'block'
p12125
sS'required'
p12126
I00
sS'group_name'
p12127
Nsa(dp12128
S'description'
p12129
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12130
sS'cpp_type'
p12131
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p12132
sS'default'
p12133
g3
sS'name'
p12134
S'boundary'
p12135
sS'required'
p12136
I00
sS'group_name'
p12137
Nsa(dp12138
S'description'
p12139
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12140
sS'cpp_type'
p12141
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12142
sS'default'
p12143
g3
sS'name'
p12144
S'control_tags'
p12145
sS'required'
p12146
I00
sS'group_name'
p12147
S'Advanced'
p12148
sa(dp12149
S'description'
p12150
S'Set the enabled status of the MooseObject.\n'
p12151
sS'cpp_type'
p12152
S'bool'
p12153
sS'default'
p12154
S'1'
p12155
sS'name'
p12156
S'enable'
p12157
sS'required'
p12158
I00
sS'group_name'
p12159
S'Advanced'
p12160
sa(dp12161
S'name'
p12162
S'execute_on'
p12163
sS'cpp_type'
p12164
S'MultiMooseEnum'
p12165
sS'default'
p12166
S'LINEAR'
p12167
sS'description'
p12168
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p12169
sS'required'
p12170
I00
sS'options'
p12171
S'none initial linear nonlinear timestep_end timestep_begin custom'
p12172
sS'group_name'
p12173
Nsa(dp12174
S'description'
p12175
S'The seed for the master random number generator\n'
p12176
sS'cpp_type'
p12177
S'unsigned int'
p12178
sS'default'
p12179
S'0'
p12180
sS'name'
p12181
S'seed'
p12182
sS'required'
p12183
I00
sS'group_name'
p12184
S'Advanced'
p12185
sa(dp12186
S'description'
p12187
g3
sS'cpp_type'
p12188
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12189
sS'default'
p12190
S'ProcessorIDAux'
p12191
sS'name'
p12192
S'type'
p12193
sS'required'
p12194
I00
sS'group_name'
p12195
Nsa(dp12196
S'description'
p12197
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12198
sS'cpp_type'
p12199
S'bool'
p12200
sS'default'
p12201
S'0'
p12202
sS'name'
p12203
S'use_displaced_mesh'
p12204
sS'required'
p12205
I00
sS'group_name'
p12206
S'Advanced'
p12207
sa(dp12208
S'description'
p12209
S'The name of the variable that this object applies to\n'
p12210
sS'cpp_type'
p12211
S'AuxVariableName'
p12212
sS'default'
p12213
g3
sS'name'
p12214
S'variable'
p12215
sS'required'
p12216
I01
sS'group_name'
p12217
NsasS'name'
p12218
S'/Bounds/ProcessorIDAux'
p12219
sa(dp12220
S'description'
p12221
g3
sS'subblocks'
p12222
NsS'parameters'
p12223
(lp12224
(dp12225
S'description'
p12226
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12227
sS'cpp_type'
p12228
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p12229
sS'default'
p12230
g3
sS'name'
p12231
S'block'
p12232
sS'required'
p12233
I00
sS'group_name'
p12234
Nsa(dp12235
S'description'
p12236
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12237
sS'cpp_type'
p12238
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p12239
sS'default'
p12240
g3
sS'name'
p12241
S'boundary'
p12242
sS'required'
p12243
I00
sS'group_name'
p12244
Nsa(dp12245
S'description'
p12246
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12247
sS'cpp_type'
p12248
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12249
sS'default'
p12250
g3
sS'name'
p12251
S'control_tags'
p12252
sS'required'
p12253
I00
sS'group_name'
p12254
S'Advanced'
p12255
sa(dp12256
S'description'
p12257
S'The downstairs of the quotient variable\n'
p12258
sS'cpp_type'
p12259
S'std::vector<VariableName>'
p12260
sS'default'
p12261
g3
sS'name'
p12262
S'denominator'
p12263
sS'required'
p12264
I00
sS'group_name'
p12265
Nsa(dp12266
S'description'
p12267
S'Set the enabled status of the MooseObject.\n'
p12268
sS'cpp_type'
p12269
S'bool'
p12270
sS'default'
p12271
S'1'
p12272
sS'name'
p12273
S'enable'
p12274
sS'required'
p12275
I00
sS'group_name'
p12276
S'Advanced'
p12277
sa(dp12278
S'name'
p12279
S'execute_on'
p12280
sS'cpp_type'
p12281
S'MultiMooseEnum'
p12282
sS'default'
p12283
S'LINEAR'
p12284
sS'description'
p12285
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p12286
sS'required'
p12287
I00
sS'options'
p12288
S'none initial linear nonlinear timestep_end timestep_begin custom'
p12289
sS'group_name'
p12290
Nsa(dp12291
S'description'
p12292
S'The upstairs of the quotient variable\n'
p12293
sS'cpp_type'
p12294
S'std::vector<VariableName>'
p12295
sS'default'
p12296
g3
sS'name'
p12297
S'numerator'
p12298
sS'required'
p12299
I00
sS'group_name'
p12300
Nsa(dp12301
S'description'
p12302
S'The seed for the master random number generator\n'
p12303
sS'cpp_type'
p12304
S'unsigned int'
p12305
sS'default'
p12306
S'0'
p12307
sS'name'
p12308
S'seed'
p12309
sS'required'
p12310
I00
sS'group_name'
p12311
S'Advanced'
p12312
sa(dp12313
S'description'
p12314
g3
sS'cpp_type'
p12315
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12316
sS'default'
p12317
S'QuotientAux'
p12318
sS'name'
p12319
S'type'
p12320
sS'required'
p12321
I00
sS'group_name'
p12322
Nsa(dp12323
S'description'
p12324
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12325
sS'cpp_type'
p12326
S'bool'
p12327
sS'default'
p12328
S'0'
p12329
sS'name'
p12330
S'use_displaced_mesh'
p12331
sS'required'
p12332
I00
sS'group_name'
p12333
S'Advanced'
p12334
sa(dp12335
S'description'
p12336
S'The name of the variable that this object applies to\n'
p12337
sS'cpp_type'
p12338
S'AuxVariableName'
p12339
sS'default'
p12340
g3
sS'name'
p12341
S'variable'
p12342
sS'required'
p12343
I01
sS'group_name'
p12344
NsasS'name'
p12345
S'/Bounds/QuotientAux'
p12346
sa(dp12347
S'description'
p12348
g3
sS'subblocks'
p12349
NsS'parameters'
p12350
(lp12351
(dp12352
S'description'
p12353
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12354
sS'cpp_type'
p12355
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p12356
sS'default'
p12357
g3
sS'name'
p12358
S'block'
p12359
sS'required'
p12360
I00
sS'group_name'
p12361
Nsa(dp12362
S'description'
p12363
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12364
sS'cpp_type'
p12365
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p12366
sS'default'
p12367
g3
sS'name'
p12368
S'boundary'
p12369
sS'required'
p12370
I00
sS'group_name'
p12371
Nsa(dp12372
S'description'
p12373
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12374
sS'cpp_type'
p12375
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12376
sS'default'
p12377
g3
sS'name'
p12378
S'control_tags'
p12379
sS'required'
p12380
I00
sS'group_name'
p12381
S'Advanced'
p12382
sa(dp12383
S'description'
p12384
S'Set the enabled status of the MooseObject.\n'
p12385
sS'cpp_type'
p12386
S'bool'
p12387
sS'default'
p12388
S'1'
p12389
sS'name'
p12390
S'enable'
p12391
sS'required'
p12392
I00
sS'group_name'
p12393
S'Advanced'
p12394
sa(dp12395
S'name'
p12396
S'execute_on'
p12397
sS'cpp_type'
p12398
S'MultiMooseEnum'
p12399
sS'default'
p12400
S'LINEAR'
p12401
sS'description'
p12402
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p12403
sS'required'
p12404
I00
sS'options'
p12405
S'none initial linear nonlinear timestep_end timestep_begin custom'
p12406
sS'group_name'
p12407
Nsa(dp12408
S'description'
p12409
S'The seed for the master random number generator\n'
p12410
sS'cpp_type'
p12411
S'unsigned int'
p12412
sS'default'
p12413
S'0'
p12414
sS'name'
p12415
S'seed'
p12416
sS'required'
p12417
I00
sS'group_name'
p12418
S'Advanced'
p12419
sa(dp12420
S'description'
p12421
g3
sS'cpp_type'
p12422
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12423
sS'default'
p12424
S'SelfAux'
p12425
sS'name'
p12426
S'type'
p12427
sS'required'
p12428
I00
sS'group_name'
p12429
Nsa(dp12430
S'description'
p12431
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12432
sS'cpp_type'
p12433
S'bool'
p12434
sS'default'
p12435
S'0'
p12436
sS'name'
p12437
S'use_displaced_mesh'
p12438
sS'required'
p12439
I00
sS'group_name'
p12440
S'Advanced'
p12441
sa(dp12442
S'description'
p12443
S'The name of the variable that this object applies to\n'
p12444
sS'cpp_type'
p12445
S'AuxVariableName'
p12446
sS'default'
p12447
g3
sS'name'
p12448
S'variable'
p12449
sS'required'
p12450
I01
sS'group_name'
p12451
NsasS'name'
p12452
S'/Bounds/SelfAux'
p12453
sa(dp12454
S'description'
p12455
g3
sS'subblocks'
p12456
NsS'parameters'
p12457
(lp12458
(dp12459
S'description'
p12460
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p12461
sS'cpp_type'
p12462
S'double'
p12463
sS'default'
p12464
S'0'
p12465
sS'name'
p12466
S'add_factor'
p12467
sS'required'
p12468
I00
sS'group_name'
p12469
Nsa(dp12470
S'description'
p12471
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12472
sS'cpp_type'
p12473
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p12474
sS'default'
p12475
g3
sS'name'
p12476
S'block'
p12477
sS'required'
p12478
I00
sS'group_name'
p12479
Nsa(dp12480
S'description'
p12481
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12482
sS'cpp_type'
p12483
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p12484
sS'default'
p12485
g3
sS'name'
p12486
S'boundary'
p12487
sS'required'
p12488
I00
sS'group_name'
p12489
Nsa(dp12490
S'description'
p12491
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12492
sS'cpp_type'
p12493
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12494
sS'default'
p12495
g3
sS'name'
p12496
S'control_tags'
p12497
sS'required'
p12498
I00
sS'group_name'
p12499
S'Advanced'
p12500
sa(dp12501
S'description'
p12502
S'If true the meshes must be the same and then the values are simply copied over.\n'
p12503
sS'cpp_type'
p12504
S'bool'
p12505
sS'default'
p12506
S'0'
p12507
sS'name'
p12508
S'direct'
p12509
sS'required'
p12510
I00
sS'group_name'
p12511
Nsa(dp12512
S'description'
p12513
S'Set the enabled status of the MooseObject.\n'
p12514
sS'cpp_type'
p12515
S'bool'
p12516
sS'default'
p12517
S'1'
p12518
sS'name'
p12519
S'enable'
p12520
sS'required'
p12521
I00
sS'group_name'
p12522
S'Advanced'
p12523
sa(dp12524
S'name'
p12525
S'execute_on'
p12526
sS'cpp_type'
p12527
S'MultiMooseEnum'
p12528
sS'default'
p12529
S'LINEAR'
p12530
sS'description'
p12531
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p12532
sS'required'
p12533
I00
sS'options'
p12534
S'none initial linear nonlinear timestep_end timestep_begin custom'
p12535
sS'group_name'
p12536
Nsa(dp12537
S'description'
p12538
S'The name of the variable to extract from the file\n'
p12539
sS'cpp_type'
p12540
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12541
sS'default'
p12542
g3
sS'name'
p12543
S'from_variable'
p12544
sS'required'
p12545
I00
sS'group_name'
p12546
Nsa(dp12547
S'description'
p12548
S"Scale factor (a)  to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p12549
sS'cpp_type'
p12550
S'double'
p12551
sS'default'
p12552
S'1'
p12553
sS'name'
p12554
S'scale_factor'
p12555
sS'required'
p12556
I00
sS'group_name'
p12557
Nsa(dp12558
S'description'
p12559
S'The seed for the master random number generator\n'
p12560
sS'cpp_type'
p12561
S'unsigned int'
p12562
sS'default'
p12563
S'0'
p12564
sS'name'
p12565
S'seed'
p12566
sS'required'
p12567
I00
sS'group_name'
p12568
S'Advanced'
p12569
sa(dp12570
S'description'
p12571
S'The name of the SolutionUserObject\n'
p12572
sS'cpp_type'
p12573
S'UserObjectName'
p12574
sS'default'
p12575
g3
sS'name'
p12576
S'solution'
p12577
sS'required'
p12578
I01
sS'group_name'
p12579
Nsa(dp12580
S'description'
p12581
g3
sS'cpp_type'
p12582
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12583
sS'default'
p12584
S'SolutionAux'
p12585
sS'name'
p12586
S'type'
p12587
sS'required'
p12588
I00
sS'group_name'
p12589
Nsa(dp12590
S'description'
p12591
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12592
sS'cpp_type'
p12593
S'bool'
p12594
sS'default'
p12595
S'0'
p12596
sS'name'
p12597
S'use_displaced_mesh'
p12598
sS'required'
p12599
I00
sS'group_name'
p12600
S'Advanced'
p12601
sa(dp12602
S'description'
p12603
S'The name of the variable that this object applies to\n'
p12604
sS'cpp_type'
p12605
S'AuxVariableName'
p12606
sS'default'
p12607
g3
sS'name'
p12608
S'variable'
p12609
sS'required'
p12610
I01
sS'group_name'
p12611
NsasS'name'
p12612
S'/Bounds/SolutionAux'
p12613
sa(dp12614
S'description'
p12615
g3
sS'subblocks'
p12616
NsS'parameters'
p12617
(lp12618
(dp12619
S'description'
p12620
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12621
sS'cpp_type'
p12622
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p12623
sS'default'
p12624
g3
sS'name'
p12625
S'block'
p12626
sS'required'
p12627
I00
sS'group_name'
p12628
Nsa(dp12629
S'description'
p12630
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12631
sS'cpp_type'
p12632
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p12633
sS'default'
p12634
g3
sS'name'
p12635
S'boundary'
p12636
sS'required'
p12637
I00
sS'group_name'
p12638
Nsa(dp12639
S'description'
p12640
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12641
sS'cpp_type'
p12642
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12643
sS'default'
p12644
g3
sS'name'
p12645
S'control_tags'
p12646
sS'required'
p12647
I00
sS'group_name'
p12648
S'Advanced'
p12649
sa(dp12650
S'description'
p12651
S'Set the enabled status of the MooseObject.\n'
p12652
sS'cpp_type'
p12653
S'bool'
p12654
sS'default'
p12655
S'1'
p12656
sS'name'
p12657
S'enable'
p12658
sS'required'
p12659
I00
sS'group_name'
p12660
S'Advanced'
p12661
sa(dp12662
S'name'
p12663
S'execute_on'
p12664
sS'cpp_type'
p12665
S'MultiMooseEnum'
p12666
sS'default'
p12667
S'LINEAR'
p12668
sS'description'
p12669
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p12670
sS'required'
p12671
I00
sS'options'
p12672
S'none initial linear nonlinear timestep_end timestep_begin custom'
p12673
sS'group_name'
p12674
Nsa(dp12675
S'description'
p12676
S'The seed for the master random number generator\n'
p12677
sS'cpp_type'
p12678
S'unsigned int'
p12679
sS'default'
p12680
S'0'
p12681
sS'name'
p12682
S'seed'
p12683
sS'required'
p12684
I00
sS'group_name'
p12685
S'Advanced'
p12686
sa(dp12687
S'description'
p12688
g3
sS'cpp_type'
p12689
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12690
sS'default'
p12691
S'SpatialUserObjectAux'
p12692
sS'name'
p12693
S'type'
p12694
sS'required'
p12695
I00
sS'group_name'
p12696
Nsa(dp12697
S'description'
p12698
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12699
sS'cpp_type'
p12700
S'bool'
p12701
sS'default'
p12702
S'0'
p12703
sS'name'
p12704
S'use_displaced_mesh'
p12705
sS'required'
p12706
I00
sS'group_name'
p12707
S'Advanced'
p12708
sa(dp12709
S'description'
p12710
S'The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n'
p12711
sS'cpp_type'
p12712
S'UserObjectName'
p12713
sS'default'
p12714
g3
sS'name'
p12715
S'user_object'
p12716
sS'required'
p12717
I01
sS'group_name'
p12718
Nsa(dp12719
S'description'
p12720
S'The name of the variable that this object applies to\n'
p12721
sS'cpp_type'
p12722
S'AuxVariableName'
p12723
sS'default'
p12724
g3
sS'name'
p12725
S'variable'
p12726
sS'required'
p12727
I01
sS'group_name'
p12728
NsasS'name'
p12729
S'/Bounds/SpatialUserObjectAux'
p12730
sa(dp12731
S'description'
p12732
g3
sS'subblocks'
p12733
NsS'parameters'
p12734
(lp12735
(dp12736
S'description'
p12737
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12738
sS'cpp_type'
p12739
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p12740
sS'default'
p12741
g3
sS'name'
p12742
S'block'
p12743
sS'required'
p12744
I00
sS'group_name'
p12745
Nsa(dp12746
S'description'
p12747
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12748
sS'cpp_type'
p12749
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p12750
sS'default'
p12751
g3
sS'name'
p12752
S'boundary'
p12753
sS'required'
p12754
I00
sS'group_name'
p12755
Nsa(dp12756
S'name'
p12757
S'component'
p12758
sS'cpp_type'
p12759
S'MooseEnum'
p12760
sS'default'
p12761
g3
sS'description'
p12762
S'The gradient component to compute\n'
p12763
sS'required'
p12764
I00
sS'options'
p12765
S'x y z'
p12766
sS'group_name'
p12767
Nsa(dp12768
S'description'
p12769
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12770
sS'cpp_type'
p12771
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12772
sS'default'
p12773
g3
sS'name'
p12774
S'control_tags'
p12775
sS'required'
p12776
I00
sS'group_name'
p12777
S'Advanced'
p12778
sa(dp12779
S'description'
p12780
S'Set the enabled status of the MooseObject.\n'
p12781
sS'cpp_type'
p12782
S'bool'
p12783
sS'default'
p12784
S'1'
p12785
sS'name'
p12786
S'enable'
p12787
sS'required'
p12788
I00
sS'group_name'
p12789
S'Advanced'
p12790
sa(dp12791
S'name'
p12792
S'execute_on'
p12793
sS'cpp_type'
p12794
S'MultiMooseEnum'
p12795
sS'default'
p12796
S'LINEAR'
p12797
sS'description'
p12798
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p12799
sS'required'
p12800
I00
sS'options'
p12801
S'none initial linear nonlinear timestep_end timestep_begin custom'
p12802
sS'group_name'
p12803
Nsa(dp12804
S'description'
p12805
S'The variable from which to compute the gradient component\n'
p12806
sS'cpp_type'
p12807
S'std::vector<VariableName>'
p12808
sS'default'
p12809
g3
sS'name'
p12810
S'gradient_variable'
p12811
sS'required'
p12812
I01
sS'group_name'
p12813
Nsa(dp12814
S'description'
p12815
S'The seed for the master random number generator\n'
p12816
sS'cpp_type'
p12817
S'unsigned int'
p12818
sS'default'
p12819
S'0'
p12820
sS'name'
p12821
S'seed'
p12822
sS'required'
p12823
I00
sS'group_name'
p12824
S'Advanced'
p12825
sa(dp12826
S'description'
p12827
g3
sS'cpp_type'
p12828
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12829
sS'default'
p12830
S'VariableGradientComponent'
p12831
sS'name'
p12832
S'type'
p12833
sS'required'
p12834
I00
sS'group_name'
p12835
Nsa(dp12836
S'description'
p12837
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12838
sS'cpp_type'
p12839
S'bool'
p12840
sS'default'
p12841
S'0'
p12842
sS'name'
p12843
S'use_displaced_mesh'
p12844
sS'required'
p12845
I00
sS'group_name'
p12846
S'Advanced'
p12847
sa(dp12848
S'description'
p12849
S'The name of the variable that this object applies to\n'
p12850
sS'cpp_type'
p12851
S'AuxVariableName'
p12852
sS'default'
p12853
g3
sS'name'
p12854
S'variable'
p12855
sS'required'
p12856
I01
sS'group_name'
p12857
NsasS'name'
p12858
S'/Bounds/VariableGradientComponent'
p12859
sa(dp12860
S'description'
p12861
g3
sS'subblocks'
p12862
NsS'parameters'
p12863
(lp12864
(dp12865
S'description'
p12866
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12867
sS'cpp_type'
p12868
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p12869
sS'default'
p12870
g3
sS'name'
p12871
S'block'
p12872
sS'required'
p12873
I00
sS'group_name'
p12874
Nsa(dp12875
S'description'
p12876
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12877
sS'cpp_type'
p12878
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p12879
sS'default'
p12880
g3
sS'name'
p12881
S'boundary'
p12882
sS'required'
p12883
I00
sS'group_name'
p12884
Nsa(dp12885
S'description'
p12886
S'A simple coefficient\n'
p12887
sS'cpp_type'
p12888
S'double'
p12889
sS'default'
p12890
S'1'
p12891
sS'name'
p12892
S'coefficient'
p12893
sS'required'
p12894
I00
sS'group_name'
p12895
Nsa(dp12896
S'description'
p12897
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12898
sS'cpp_type'
p12899
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12900
sS'default'
p12901
g3
sS'name'
p12902
S'control_tags'
p12903
sS'required'
p12904
I00
sS'group_name'
p12905
S'Advanced'
p12906
sa(dp12907
S'description'
p12908
S'Set the enabled status of the MooseObject.\n'
p12909
sS'cpp_type'
p12910
S'bool'
p12911
sS'default'
p12912
S'1'
p12913
sS'name'
p12914
S'enable'
p12915
sS'required'
p12916
I00
sS'group_name'
p12917
S'Advanced'
p12918
sa(dp12919
S'name'
p12920
S'execute_on'
p12921
sS'cpp_type'
p12922
S'MultiMooseEnum'
p12923
sS'default'
p12924
S'LINEAR'
p12925
sS'description'
p12926
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p12927
sS'required'
p12928
I00
sS'options'
p12929
S'none initial linear nonlinear timestep_end timestep_begin custom'
p12930
sS'group_name'
p12931
Nsa(dp12932
S'description'
p12933
S'The order of global truncation error: midpoint=1, trapazoidal=2, Simpson=3\n'
p12934
sS'cpp_type'
p12935
S'unsigned int'
p12936
sS'default'
p12937
S'2'
p12938
sS'name'
p12939
S'order'
p12940
sS'required'
p12941
I00
sS'group_name'
p12942
Nsa(dp12943
S'description'
p12944
S'The seed for the master random number generator\n'
p12945
sS'cpp_type'
p12946
S'unsigned int'
p12947
sS'default'
p12948
S'0'
p12949
sS'name'
p12950
S'seed'
p12951
sS'required'
p12952
I00
sS'group_name'
p12953
S'Advanced'
p12954
sa(dp12955
S'description'
p12956
g3
sS'cpp_type'
p12957
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12958
sS'default'
p12959
S'VariableTimeIntegrationAux'
p12960
sS'name'
p12961
S'type'
p12962
sS'required'
p12963
I00
sS'group_name'
p12964
Nsa(dp12965
S'description'
p12966
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12967
sS'cpp_type'
p12968
S'bool'
p12969
sS'default'
p12970
S'0'
p12971
sS'name'
p12972
S'use_displaced_mesh'
p12973
sS'required'
p12974
I00
sS'group_name'
p12975
S'Advanced'
p12976
sa(dp12977
S'description'
p12978
S'The name of the variable that this object applies to\n'
p12979
sS'cpp_type'
p12980
S'AuxVariableName'
p12981
sS'default'
p12982
g3
sS'name'
p12983
S'variable'
p12984
sS'required'
p12985
I01
sS'group_name'
p12986
Nsa(dp12987
S'description'
p12988
S'The variable to be integrated\n'
p12989
sS'cpp_type'
p12990
S'std::vector<VariableName>'
p12991
sS'default'
p12992
g3
sS'name'
p12993
S'variable_to_integrate'
p12994
sS'required'
p12995
I01
sS'group_name'
p12996
NsasS'name'
p12997
S'/Bounds/VariableTimeIntegrationAux'
p12998
sa(dp12999
S'description'
p13000
g3
sS'subblocks'
p13001
NsS'parameters'
p13002
(lp13003
(dp13004
S'description'
p13005
S'The list of block ids (SubdomainID) that this object will be applied\n'
p13006
sS'cpp_type'
p13007
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p13008
sS'default'
p13009
g3
sS'name'
p13010
S'block'
p13011
sS'required'
p13012
I00
sS'group_name'
p13013
Nsa(dp13014
S'description'
p13015
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p13016
sS'cpp_type'
p13017
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p13018
sS'default'
p13019
g3
sS'name'
p13020
S'boundary'
p13021
sS'required'
p13022
I00
sS'group_name'
p13023
Nsa(dp13024
S'description'
p13025
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13026
sS'cpp_type'
p13027
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13028
sS'default'
p13029
g3
sS'name'
p13030
S'control_tags'
p13031
sS'required'
p13032
I00
sS'group_name'
p13033
S'Advanced'
p13034
sa(dp13035
S'description'
p13036
S'Set the enabled status of the MooseObject.\n'
p13037
sS'cpp_type'
p13038
S'bool'
p13039
sS'default'
p13040
S'1'
p13041
sS'name'
p13042
S'enable'
p13043
sS'required'
p13044
I00
sS'group_name'
p13045
S'Advanced'
p13046
sa(dp13047
S'name'
p13048
S'execute_on'
p13049
sS'cpp_type'
p13050
S'MultiMooseEnum'
p13051
sS'default'
p13052
S'LINEAR'
p13053
sS'description'
p13054
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p13055
sS'required'
p13056
I00
sS'options'
p13057
S'none initial linear nonlinear timestep_end timestep_begin custom'
p13058
sS'group_name'
p13059
Nsa(dp13060
S'description'
p13061
S'The seed for the master random number generator\n'
p13062
sS'cpp_type'
p13063
S'unsigned int'
p13064
sS'default'
p13065
S'0'
p13066
sS'name'
p13067
S'seed'
p13068
sS'required'
p13069
I00
sS'group_name'
p13070
S'Advanced'
p13071
sa(dp13072
S'description'
p13073
g3
sS'cpp_type'
p13074
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13075
sS'default'
p13076
S'VectorMagnitudeAux'
p13077
sS'name'
p13078
S'type'
p13079
sS'required'
p13080
I00
sS'group_name'
p13081
Nsa(dp13082
S'description'
p13083
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13084
sS'cpp_type'
p13085
S'bool'
p13086
sS'default'
p13087
S'0'
p13088
sS'name'
p13089
S'use_displaced_mesh'
p13090
sS'required'
p13091
I00
sS'group_name'
p13092
S'Advanced'
p13093
sa(dp13094
S'description'
p13095
S'The name of the variable that this object applies to\n'
p13096
sS'cpp_type'
p13097
S'AuxVariableName'
p13098
sS'default'
p13099
g3
sS'name'
p13100
S'variable'
p13101
sS'required'
p13102
I01
sS'group_name'
p13103
Nsa(dp13104
S'description'
p13105
S'x-component of the vector\n'
p13106
sS'cpp_type'
p13107
S'std::vector<VariableName>'
p13108
sS'default'
p13109
g3
sS'name'
p13110
S'x'
p13111
sS'required'
p13112
I01
sS'group_name'
p13113
Nsa(dp13114
S'description'
p13115
S'y-component of the vector\n'
p13116
sS'cpp_type'
p13117
S'std::vector<VariableName>'
p13118
sS'default'
p13119
g3
sS'name'
p13120
S'y'
p13121
sS'required'
p13122
I00
sS'group_name'
p13123
Nsa(dp13124
S'description'
p13125
S'z-component of the vector\n'
p13126
sS'cpp_type'
p13127
S'std::vector<VariableName>'
p13128
sS'default'
p13129
g3
sS'name'
p13130
S'z'
p13131
sS'required'
p13132
I00
sS'group_name'
p13133
NsasS'name'
p13134
S'/Bounds/VectorMagnitudeAux'
p13135
sasS'parameters'
p13136
NsS'name'
p13137
S'/Bounds'
p13138
sa(dp13139
S'description'
p13140
g3
sS'subblocks'
p13141
(lp13142
(dp13143
S'description'
p13144
g3
sS'subblocks'
p13145
NsS'parameters'
p13146
(lp13147
(dp13148
S'description'
p13149
S'A string representing the Moose Object that will be built by this Action\n'
p13150
sS'cpp_type'
p13151
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13152
sS'default'
p13153
g3
sS'name'
p13154
S'type'
p13155
sS'required'
p13156
I01
sS'group_name'
p13157
NsasS'name'
p13158
S'/Constraints/*'
p13159
sa(dp13160
S'description'
p13161
g3
sS'subblocks'
p13162
NsS'parameters'
p13163
(lp13164
(dp13165
S'description'
p13166
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13167
sS'cpp_type'
p13168
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13169
sS'default'
p13170
g3
sS'name'
p13171
S'control_tags'
p13172
sS'required'
p13173
I00
sS'group_name'
p13174
S'Advanced'
p13175
sa(dp13176
S'description'
p13177
S'Set the enabled status of the MooseObject.\n'
p13178
sS'cpp_type'
p13179
S'bool'
p13180
sS'default'
p13181
S'1'
p13182
sS'name'
p13183
S'enable'
p13184
sS'required'
p13185
I00
sS'group_name'
p13186
S'Advanced'
p13187
sa(dp13188
S'name'
p13189
S'execute_on'
p13190
sS'cpp_type'
p13191
S'MultiMooseEnum'
p13192
sS'default'
p13193
S'LINEAR'
p13194
sS'description'
p13195
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p13196
sS'required'
p13197
I00
sS'options'
p13198
S'none initial linear nonlinear timestep_end timestep_begin custom'
p13199
sS'group_name'
p13200
Nsa(dp13201
S'description'
p13202
S'The boundary ID associated with the master side\n'
p13203
sS'cpp_type'
p13204
S'BoundaryName'
p13205
sS'default'
p13206
g3
sS'name'
p13207
S'master'
p13208
sS'required'
p13209
I01
sS'group_name'
p13210
Nsa(dp13211
S'description'
p13212
S'The variable on the master side of the domain\n'
p13213
sS'cpp_type'
p13214
S'std::vector<VariableName>'
p13215
sS'default'
p13216
g3
sS'name'
p13217
S'master_variable'
p13218
sS'required'
p13219
I01
sS'group_name'
p13220
Nsa(dp13221
S'description'
p13222
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p13223
sS'cpp_type'
p13224
S'double'
p13225
sS'default'
p13226
g3
sS'name'
p13227
S'normal_smoothing_distance'
p13228
sS'required'
p13229
I00
sS'group_name'
p13230
Nsa(dp13231
S'description'
p13232
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p13233
sS'cpp_type'
p13234
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13235
sS'default'
p13236
g3
sS'name'
p13237
S'normal_smoothing_method'
p13238
sS'required'
p13239
I00
sS'group_name'
p13240
Nsa(dp13241
S'name'
p13242
S'order'
p13243
sS'cpp_type'
p13244
S'MooseEnum'
p13245
sS'default'
p13246
S'FIRST'
p13247
sS'description'
p13248
S'The finite element order used for projections\n'
p13249
sS'required'
p13250
I00
sS'options'
p13251
S'FIRST SECOND THIRD FOURTH'
p13252
sS'group_name'
p13253
Nsa(dp13254
S'description'
p13255
S'scaling factor to be applied to constraint equations\n'
p13256
sS'cpp_type'
p13257
S'double'
p13258
sS'default'
p13259
S'1'
p13260
sS'name'
p13261
S'scaling'
p13262
sS'required'
p13263
I00
sS'group_name'
p13264
Nsa(dp13265
S'description'
p13266
S'The boundary ID associated with the slave side\n'
p13267
sS'cpp_type'
p13268
S'BoundaryName'
p13269
sS'default'
p13270
g3
sS'name'
p13271
S'slave'
p13272
sS'required'
p13273
I01
sS'group_name'
p13274
Nsa(dp13275
S'description'
p13276
S'Tangential distance to extend edges of contact surfaces\n'
p13277
sS'cpp_type'
p13278
S'double'
p13279
sS'default'
p13280
g3
sS'name'
p13281
S'tangential_tolerance'
p13282
sS'required'
p13283
I00
sS'group_name'
p13284
Nsa(dp13285
S'description'
p13286
g3
sS'cpp_type'
p13287
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13288
sS'default'
p13289
S'CoupledTiedValueConstraint'
p13290
sS'name'
p13291
S'type'
p13292
sS'required'
p13293
I00
sS'group_name'
p13294
Nsa(dp13295
S'description'
p13296
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13297
sS'cpp_type'
p13298
S'bool'
p13299
sS'default'
p13300
S'1'
p13301
sS'name'
p13302
S'use_displaced_mesh'
p13303
sS'required'
p13304
I00
sS'group_name'
p13305
S'Advanced'
p13306
sa(dp13307
S'description'
p13308
S'The name of the variable that this constraint is applied to.\n'
p13309
sS'cpp_type'
p13310
S'NonlinearVariableName'
p13311
sS'default'
p13312
g3
sS'name'
p13313
S'variable'
p13314
sS'required'
p13315
I01
sS'group_name'
p13316
NsasS'name'
p13317
S'/Constraints/CoupledTiedValueConstraint'
p13318
sa(dp13319
S'description'
p13320
g3
sS'subblocks'
p13321
NsS'parameters'
p13322
(lp13323
(dp13324
S'description'
p13325
S'Gradient component to constrain\n'
p13326
sS'cpp_type'
p13327
S'unsigned int'
p13328
sS'default'
p13329
g3
sS'name'
p13330
S'component'
p13331
sS'required'
p13332
I01
sS'group_name'
p13333
Nsa(dp13334
S'description'
p13335
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13336
sS'cpp_type'
p13337
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13338
sS'default'
p13339
g3
sS'name'
p13340
S'control_tags'
p13341
sS'required'
p13342
I00
sS'group_name'
p13343
S'Advanced'
p13344
sa(dp13345
S'description'
p13346
S'Set the enabled status of the MooseObject.\n'
p13347
sS'cpp_type'
p13348
S'bool'
p13349
sS'default'
p13350
S'1'
p13351
sS'name'
p13352
S'enable'
p13353
sS'required'
p13354
I00
sS'group_name'
p13355
S'Advanced'
p13356
sa(dp13357
S'name'
p13358
S'execute_on'
p13359
sS'cpp_type'
p13360
S'MultiMooseEnum'
p13361
sS'default'
p13362
S'LINEAR'
p13363
sS'description'
p13364
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p13365
sS'required'
p13366
I00
sS'options'
p13367
S'none initial linear nonlinear timestep_end timestep_begin custom'
p13368
sS'group_name'
p13369
Nsa(dp13370
S'description'
p13371
S'The name of the interface.\n'
p13372
sS'cpp_type'
p13373
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13374
sS'default'
p13375
g3
sS'name'
p13376
S'interface'
p13377
sS'required'
p13378
I01
sS'group_name'
p13379
Nsa(dp13380
S'description'
p13381
S'Variable on master surface\n'
p13382
sS'cpp_type'
p13383
S'VariableName'
p13384
sS'default'
p13385
g3
sS'name'
p13386
S'master_variable'
p13387
sS'required'
p13388
I01
sS'group_name'
p13389
Nsa(dp13390
S'description'
p13391
S'Variable on master surface\n'
p13392
sS'cpp_type'
p13393
S'VariableName'
p13394
sS'default'
p13395
g3
sS'name'
p13396
S'slave_variable'
p13397
sS'required'
p13398
I00
sS'group_name'
p13399
Nsa(dp13400
S'description'
p13401
g3
sS'cpp_type'
p13402
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13403
sS'default'
p13404
S'EqualGradientConstraint'
p13405
sS'name'
p13406
S'type'
p13407
sS'required'
p13408
I00
sS'group_name'
p13409
Nsa(dp13410
S'description'
p13411
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13412
sS'cpp_type'
p13413
S'bool'
p13414
sS'default'
p13415
S'0'
p13416
sS'name'
p13417
S'use_displaced_mesh'
p13418
sS'required'
p13419
I00
sS'group_name'
p13420
S'Advanced'
p13421
sa(dp13422
S'description'
p13423
S'The name of the variable that this constraint is applied to.\n'
p13424
sS'cpp_type'
p13425
S'NonlinearVariableName'
p13426
sS'default'
p13427
g3
sS'name'
p13428
S'variable'
p13429
sS'required'
p13430
I01
sS'group_name'
p13431
NsasS'name'
p13432
S'/Constraints/EqualGradientConstraint'
p13433
sa(dp13434
S'description'
p13435
g3
sS'subblocks'
p13436
NsS'parameters'
p13437
(lp13438
(dp13439
S'description'
p13440
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13441
sS'cpp_type'
p13442
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13443
sS'default'
p13444
g3
sS'name'
p13445
S'control_tags'
p13446
sS'required'
p13447
I00
sS'group_name'
p13448
S'Advanced'
p13449
sa(dp13450
S'description'
p13451
S'Set the enabled status of the MooseObject.\n'
p13452
sS'cpp_type'
p13453
S'bool'
p13454
sS'default'
p13455
S'1'
p13456
sS'name'
p13457
S'enable'
p13458
sS'required'
p13459
I00
sS'group_name'
p13460
S'Advanced'
p13461
sa(dp13462
S'name'
p13463
S'execute_on'
p13464
sS'cpp_type'
p13465
S'MultiMooseEnum'
p13466
sS'default'
p13467
S'LINEAR'
p13468
sS'description'
p13469
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p13470
sS'required'
p13471
I00
sS'options'
p13472
S'none initial linear nonlinear timestep_end timestep_begin custom'
p13473
sS'group_name'
p13474
Nsa(dp13475
S'name'
p13476
S'formulation'
p13477
sS'cpp_type'
p13478
S'MooseEnum'
p13479
sS'default'
p13480
S'penalty'
p13481
sS'description'
p13482
S'Formulation used to calculate constraint - penalty or kinematic.\n'
p13483
sS'required'
p13484
I00
sS'options'
p13485
S'penalty kinematic'
p13486
sS'group_name'
p13487
Nsa(dp13488
S'description'
p13489
S'The ID of the master node. If no ID is provided, first node of slave set is chosen.\n'
p13490
sS'cpp_type'
p13491
S'unsigned int'
p13492
sS'default'
p13493
S'4294967295'
p13494
sS'name'
p13495
S'master'
p13496
sS'required'
p13497
I00
sS'group_name'
p13498
Nsa(dp13499
S'description'
p13500
S'The penalty used for the boundary term\n'
p13501
sS'cpp_type'
p13502
S'double'
p13503
sS'default'
p13504
g3
sS'name'
p13505
S'penalty'
p13506
sS'required'
p13507
I01
sS'group_name'
p13508
Nsa(dp13509
S'description'
p13510
S'The boundary ID associated with the slave side\n'
p13511
sS'cpp_type'
p13512
S'BoundaryName'
p13513
sS'default'
p13514
S'NaN'
p13515
sS'name'
p13516
S'slave'
p13517
sS'required'
p13518
I00
sS'group_name'
p13519
Nsa(dp13520
S'description'
p13521
S'The IDs of the slave node\n'
p13522
sS'cpp_type'
p13523
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p13524
sS'default'
p13525
g3
sS'name'
p13526
S'slave_node_ids'
p13527
sS'required'
p13528
I00
sS'group_name'
p13529
Nsa(dp13530
S'description'
p13531
g3
sS'cpp_type'
p13532
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13533
sS'default'
p13534
S'EqualValueBoundaryConstraint'
p13535
sS'name'
p13536
S'type'
p13537
sS'required'
p13538
I00
sS'group_name'
p13539
Nsa(dp13540
S'description'
p13541
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13542
sS'cpp_type'
p13543
S'bool'
p13544
sS'default'
p13545
S'0'
p13546
sS'name'
p13547
S'use_displaced_mesh'
p13548
sS'required'
p13549
I00
sS'group_name'
p13550
S'Advanced'
p13551
sa(dp13552
S'description'
p13553
S'The name of the variable that this constraint is applied to.\n'
p13554
sS'cpp_type'
p13555
S'NonlinearVariableName'
p13556
sS'default'
p13557
g3
sS'name'
p13558
S'variable'
p13559
sS'required'
p13560
I01
sS'group_name'
p13561
NsasS'name'
p13562
S'/Constraints/EqualValueBoundaryConstraint'
p13563
sa(dp13564
S'description'
p13565
g3
sS'subblocks'
p13566
NsS'parameters'
p13567
(lp13568
(dp13569
S'description'
p13570
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13571
sS'cpp_type'
p13572
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13573
sS'default'
p13574
g3
sS'name'
p13575
S'control_tags'
p13576
sS'required'
p13577
I00
sS'group_name'
p13578
S'Advanced'
p13579
sa(dp13580
S'description'
p13581
S'Set the enabled status of the MooseObject.\n'
p13582
sS'cpp_type'
p13583
S'bool'
p13584
sS'default'
p13585
S'1'
p13586
sS'name'
p13587
S'enable'
p13588
sS'required'
p13589
I00
sS'group_name'
p13590
S'Advanced'
p13591
sa(dp13592
S'name'
p13593
S'execute_on'
p13594
sS'cpp_type'
p13595
S'MultiMooseEnum'
p13596
sS'default'
p13597
S'LINEAR'
p13598
sS'description'
p13599
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p13600
sS'required'
p13601
I00
sS'options'
p13602
S'none initial linear nonlinear timestep_end timestep_begin custom'
p13603
sS'group_name'
p13604
Nsa(dp13605
S'description'
p13606
S'The name of the interface.\n'
p13607
sS'cpp_type'
p13608
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13609
sS'default'
p13610
g3
sS'name'
p13611
S'interface'
p13612
sS'required'
p13613
I01
sS'group_name'
p13614
Nsa(dp13615
S'description'
p13616
S'Variable on master surface\n'
p13617
sS'cpp_type'
p13618
S'VariableName'
p13619
sS'default'
p13620
g3
sS'name'
p13621
S'master_variable'
p13622
sS'required'
p13623
I01
sS'group_name'
p13624
Nsa(dp13625
S'description'
p13626
S'Variable on master surface\n'
p13627
sS'cpp_type'
p13628
S'VariableName'
p13629
sS'default'
p13630
g3
sS'name'
p13631
S'slave_variable'
p13632
sS'required'
p13633
I00
sS'group_name'
p13634
Nsa(dp13635
S'description'
p13636
g3
sS'cpp_type'
p13637
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13638
sS'default'
p13639
S'EqualValueConstraint'
p13640
sS'name'
p13641
S'type'
p13642
sS'required'
p13643
I00
sS'group_name'
p13644
Nsa(dp13645
S'description'
p13646
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13647
sS'cpp_type'
p13648
S'bool'
p13649
sS'default'
p13650
S'0'
p13651
sS'name'
p13652
S'use_displaced_mesh'
p13653
sS'required'
p13654
I00
sS'group_name'
p13655
S'Advanced'
p13656
sa(dp13657
S'description'
p13658
S'The name of the variable that this constraint is applied to.\n'
p13659
sS'cpp_type'
p13660
S'NonlinearVariableName'
p13661
sS'default'
p13662
g3
sS'name'
p13663
S'variable'
p13664
sS'required'
p13665
I01
sS'group_name'
p13666
NsasS'name'
p13667
S'/Constraints/EqualValueConstraint'
p13668
sa(dp13669
S'description'
p13670
g3
sS'subblocks'
p13671
NsS'parameters'
p13672
(lp13673
(dp13674
S'description'
p13675
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13676
sS'cpp_type'
p13677
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13678
sS'default'
p13679
g3
sS'name'
p13680
S'control_tags'
p13681
sS'required'
p13682
I00
sS'group_name'
p13683
S'Advanced'
p13684
sa(dp13685
S'description'
p13686
S'Set the enabled status of the MooseObject.\n'
p13687
sS'cpp_type'
p13688
S'bool'
p13689
sS'default'
p13690
S'1'
p13691
sS'name'
p13692
S'enable'
p13693
sS'required'
p13694
I00
sS'group_name'
p13695
S'Advanced'
p13696
sa(dp13697
S'name'
p13698
S'execute_on'
p13699
sS'cpp_type'
p13700
S'MultiMooseEnum'
p13701
sS'default'
p13702
S'LINEAR'
p13703
sS'description'
p13704
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p13705
sS'required'
p13706
I00
sS'options'
p13707
S'none initial linear nonlinear timestep_end timestep_begin custom'
p13708
sS'group_name'
p13709
Nsa(dp13710
S'name'
p13711
S'formulation'
p13712
sS'cpp_type'
p13713
S'MooseEnum'
p13714
sS'default'
p13715
S'penalty'
p13716
sS'description'
p13717
S'Formulation used to calculate constraint - penalty or kinematic.\n'
p13718
sS'required'
p13719
I00
sS'options'
p13720
S'penalty kinematic'
p13721
sS'group_name'
p13722
Nsa(dp13723
S'description'
p13724
S'The master node IDs.\n'
p13725
sS'cpp_type'
p13726
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p13727
sS'default'
p13728
g3
sS'name'
p13729
S'master'
p13730
sS'required'
p13731
I01
sS'group_name'
p13732
Nsa(dp13733
S'description'
p13734
S'The penalty used for the boundary term\n'
p13735
sS'cpp_type'
p13736
S'double'
p13737
sS'default'
p13738
g3
sS'name'
p13739
S'penalty'
p13740
sS'required'
p13741
I01
sS'group_name'
p13742
Nsa(dp13743
S'description'
p13744
S'The list of slave node ids\n'
p13745
sS'cpp_type'
p13746
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p13747
sS'default'
p13748
g3
sS'name'
p13749
S'slave_node_ids'
p13750
sS'required'
p13751
I00
sS'group_name'
p13752
Nsa(dp13753
S'description'
p13754
S'The boundary ID associated with the slave side\n'
p13755
sS'cpp_type'
p13756
S'BoundaryName'
p13757
sS'default'
p13758
S'NaN'
p13759
sS'name'
p13760
S'slave_node_set'
p13761
sS'required'
p13762
I00
sS'group_name'
p13763
Nsa(dp13764
S'description'
p13765
g3
sS'cpp_type'
p13766
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13767
sS'default'
p13768
S'LinearNodalConstraint'
p13769
sS'name'
p13770
S'type'
p13771
sS'required'
p13772
I00
sS'group_name'
p13773
Nsa(dp13774
S'description'
p13775
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13776
sS'cpp_type'
p13777
S'bool'
p13778
sS'default'
p13779
S'0'
p13780
sS'name'
p13781
S'use_displaced_mesh'
p13782
sS'required'
p13783
I00
sS'group_name'
p13784
S'Advanced'
p13785
sa(dp13786
S'description'
p13787
S'The name of the variable that this constraint is applied to.\n'
p13788
sS'cpp_type'
p13789
S'NonlinearVariableName'
p13790
sS'default'
p13791
g3
sS'name'
p13792
S'variable'
p13793
sS'required'
p13794
I01
sS'group_name'
p13795
Nsa(dp13796
S'description'
p13797
S'The weights associated with the master node ids. Must be of the same size as master nodes\n'
p13798
sS'cpp_type'
p13799
S'std::__1::vector<double, std::__1::allocator<double> >'
p13800
sS'default'
p13801
g3
sS'name'
p13802
S'weights'
p13803
sS'required'
p13804
I01
sS'group_name'
p13805
NsasS'name'
p13806
S'/Constraints/LinearNodalConstraint'
p13807
sa(dp13808
S'description'
p13809
g3
sS'subblocks'
p13810
NsS'parameters'
p13811
(lp13812
(dp13813
S'description'
p13814
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13815
sS'cpp_type'
p13816
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13817
sS'default'
p13818
g3
sS'name'
p13819
S'control_tags'
p13820
sS'required'
p13821
I00
sS'group_name'
p13822
S'Advanced'
p13823
sa(dp13824
S'description'
p13825
S'Set the enabled status of the MooseObject.\n'
p13826
sS'cpp_type'
p13827
S'bool'
p13828
sS'default'
p13829
S'1'
p13830
sS'name'
p13831
S'enable'
p13832
sS'required'
p13833
I00
sS'group_name'
p13834
S'Advanced'
p13835
sa(dp13836
S'name'
p13837
S'execute_on'
p13838
sS'cpp_type'
p13839
S'MultiMooseEnum'
p13840
sS'default'
p13841
S'LINEAR'
p13842
sS'description'
p13843
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p13844
sS'required'
p13845
I00
sS'options'
p13846
S'none initial linear nonlinear timestep_end timestep_begin custom'
p13847
sS'group_name'
p13848
Nsa(dp13849
S'description'
p13850
S'The boundary ID associated with the master side\n'
p13851
sS'cpp_type'
p13852
S'BoundaryName'
p13853
sS'default'
p13854
g3
sS'name'
p13855
S'master'
p13856
sS'required'
p13857
I01
sS'group_name'
p13858
Nsa(dp13859
S'description'
p13860
S'The variable on the master side of the domain\n'
p13861
sS'cpp_type'
p13862
S'std::vector<VariableName>'
p13863
sS'default'
p13864
g3
sS'name'
p13865
S'master_variable'
p13866
sS'required'
p13867
I01
sS'group_name'
p13868
Nsa(dp13869
S'description'
p13870
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p13871
sS'cpp_type'
p13872
S'double'
p13873
sS'default'
p13874
g3
sS'name'
p13875
S'normal_smoothing_distance'
p13876
sS'required'
p13877
I00
sS'group_name'
p13878
Nsa(dp13879
S'description'
p13880
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p13881
sS'cpp_type'
p13882
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13883
sS'default'
p13884
g3
sS'name'
p13885
S'normal_smoothing_method'
p13886
sS'required'
p13887
I00
sS'group_name'
p13888
Nsa(dp13889
S'name'
p13890
S'order'
p13891
sS'cpp_type'
p13892
S'MooseEnum'
p13893
sS'default'
p13894
S'FIRST'
p13895
sS'description'
p13896
S'The finite element order used for projections\n'
p13897
sS'required'
p13898
I00
sS'options'
p13899
S'FIRST SECOND THIRD FOURTH'
p13900
sS'group_name'
p13901
Nsa(dp13902
S'description'
p13903
S'scaling factor to be applied to constraint equations\n'
p13904
sS'cpp_type'
p13905
S'double'
p13906
sS'default'
p13907
S'1'
p13908
sS'name'
p13909
S'scaling'
p13910
sS'required'
p13911
I00
sS'group_name'
p13912
Nsa(dp13913
S'description'
p13914
S'The boundary ID associated with the slave side\n'
p13915
sS'cpp_type'
p13916
S'BoundaryName'
p13917
sS'default'
p13918
g3
sS'name'
p13919
S'slave'
p13920
sS'required'
p13921
I01
sS'group_name'
p13922
Nsa(dp13923
S'description'
p13924
S'Tangential distance to extend edges of contact surfaces\n'
p13925
sS'cpp_type'
p13926
S'double'
p13927
sS'default'
p13928
g3
sS'name'
p13929
S'tangential_tolerance'
p13930
sS'required'
p13931
I00
sS'group_name'
p13932
Nsa(dp13933
S'description'
p13934
g3
sS'cpp_type'
p13935
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13936
sS'default'
p13937
S'TiedValueConstraint'
p13938
sS'name'
p13939
S'type'
p13940
sS'required'
p13941
I00
sS'group_name'
p13942
Nsa(dp13943
S'description'
p13944
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13945
sS'cpp_type'
p13946
S'bool'
p13947
sS'default'
p13948
S'1'
p13949
sS'name'
p13950
S'use_displaced_mesh'
p13951
sS'required'
p13952
I00
sS'group_name'
p13953
S'Advanced'
p13954
sa(dp13955
S'description'
p13956
S'The name of the variable that this constraint is applied to.\n'
p13957
sS'cpp_type'
p13958
S'NonlinearVariableName'
p13959
sS'default'
p13960
g3
sS'name'
p13961
S'variable'
p13962
sS'required'
p13963
I01
sS'group_name'
p13964
NsasS'name'
p13965
S'/Constraints/TiedValueConstraint'
p13966
sasS'parameters'
p13967
NsS'name'
p13968
S'/Constraints'
p13969
sa(dp13970
S'description'
p13971
g3
sS'subblocks'
p13972
(lp13973
(dp13974
S'description'
p13975
g3
sS'subblocks'
p13976
NsS'parameters'
p13977
(lp13978
(dp13979
S'description'
p13980
S'A string representing the Moose Object that will be built by this Action\n'
p13981
sS'cpp_type'
p13982
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13983
sS'default'
p13984
g3
sS'name'
p13985
S'type'
p13986
sS'required'
p13987
I01
sS'group_name'
p13988
NsasS'name'
p13989
S'/Controls/*'
p13990
sa(dp13991
S'description'
p13992
g3
sS'subblocks'
p13993
NsS'parameters'
p13994
(lp13995
(dp13996
S'description'
p13997
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13998
sS'cpp_type'
p13999
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14000
sS'default'
p14001
g3
sS'name'
p14002
S'control_tags'
p14003
sS'required'
p14004
I00
sS'group_name'
p14005
S'Advanced'
p14006
sa(dp14007
S'description'
p14008
S'Set the enabled status of the MooseObject.\n'
p14009
sS'cpp_type'
p14010
S'bool'
p14011
sS'default'
p14012
S'1'
p14013
sS'name'
p14014
S'enable'
p14015
sS'required'
p14016
I00
sS'group_name'
p14017
S'Advanced'
p14018
sa(dp14019
S'name'
p14020
S'execute_on'
p14021
sS'cpp_type'
p14022
S'MultiMooseEnum'
p14023
sS'default'
p14024
S'INITIAL TIMESTEP_END'
p14025
sS'description'
p14026
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p14027
sS'required'
p14028
I00
sS'options'
p14029
S'none initial linear nonlinear timestep_end timestep_begin custom subdomain'
p14030
sS'group_name'
p14031
Nsa(dp14032
S'description'
p14033
S'The function to use for controlling the specified parameter.\n'
p14034
sS'cpp_type'
p14035
S'FunctionName'
p14036
sS'default'
p14037
g3
sS'name'
p14038
S'function'
p14039
sS'required'
p14040
I01
sS'group_name'
p14041
Nsa(dp14042
S'description'
p14043
S'Determines whether this object is calculated using an implicit or explicit form\n'
p14044
sS'cpp_type'
p14045
S'bool'
p14046
sS'default'
p14047
S'1'
p14048
sS'name'
p14049
S'implicit'
p14050
sS'required'
p14051
I00
sS'group_name'
p14052
S'Advanced'
p14053
sa(dp14054
S'description'
p14055
S'The input parameter(s) to control. Specify a single parameter name and all parameters in all objects matching the name will be updated\n'
p14056
sS'cpp_type'
p14057
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14058
sS'default'
p14059
g3
sS'name'
p14060
S'parameter'
p14061
sS'required'
p14062
I01
sS'group_name'
p14063
Nsa(dp14064
S'description'
p14065
g3
sS'cpp_type'
p14066
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14067
sS'default'
p14068
S'RealFunctionControl'
p14069
sS'name'
p14070
S'type'
p14071
sS'required'
p14072
I00
sS'group_name'
p14073
NsasS'name'
p14074
S'/Controls/RealFunctionControl'
p14075
sa(dp14076
S'description'
p14077
g3
sS'subblocks'
p14078
NsS'parameters'
p14079
(lp14080
(dp14081
S'description'
p14082
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14083
sS'cpp_type'
p14084
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14085
sS'default'
p14086
g3
sS'name'
p14087
S'control_tags'
p14088
sS'required'
p14089
I00
sS'group_name'
p14090
S'Advanced'
p14091
sa(dp14092
S'description'
p14093
S'A list of object tags to disable.\n'
p14094
sS'cpp_type'
p14095
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14096
sS'default'
p14097
g3
sS'name'
p14098
S'disable_objects'
p14099
sS'required'
p14100
I00
sS'group_name'
p14101
Nsa(dp14102
S'description'
p14103
S'Set the enabled status of the MooseObject.\n'
p14104
sS'cpp_type'
p14105
S'bool'
p14106
sS'default'
p14107
S'1'
p14108
sS'name'
p14109
S'enable'
p14110
sS'required'
p14111
I00
sS'group_name'
p14112
S'Advanced'
p14113
sa(dp14114
S'description'
p14115
S'A list of object tags to enable.\n'
p14116
sS'cpp_type'
p14117
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14118
sS'default'
p14119
g3
sS'name'
p14120
S'enable_objects'
p14121
sS'required'
p14122
I00
sS'group_name'
p14123
Nsa(dp14124
S'description'
p14125
S'The time at which the objects are to be enable/disabled.\n'
p14126
sS'cpp_type'
p14127
S'std::__1::vector<double, std::__1::allocator<double> >'
p14128
sS'default'
p14129
g3
sS'name'
p14130
S'end_time'
p14131
sS'required'
p14132
I00
sS'group_name'
p14133
Nsa(dp14134
S'name'
p14135
S'execute_on'
p14136
sS'cpp_type'
p14137
S'MultiMooseEnum'
p14138
sS'default'
p14139
S'INITIAL TIMESTEP_END'
p14140
sS'description'
p14141
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p14142
sS'required'
p14143
I00
sS'options'
p14144
S'none initial linear nonlinear timestep_end timestep_begin custom subdomain'
p14145
sS'group_name'
p14146
Nsa(dp14147
S'description'
p14148
S'Determines whether this object is calculated using an implicit or explicit form\n'
p14149
sS'cpp_type'
p14150
S'bool'
p14151
sS'default'
p14152
S'1'
p14153
sS'name'
p14154
S'implicit'
p14155
sS'required'
p14156
I00
sS'group_name'
p14157
S'Advanced'
p14158
sa(dp14159
S'description'
p14160
S'When true the disable/enable lists are set to opposite values when outside of the given time range.\n'
p14161
sS'cpp_type'
p14162
S'bool'
p14163
sS'default'
p14164
S'1'
p14165
sS'name'
p14166
S'set_outside_of_range'
p14167
sS'required'
p14168
I00
sS'group_name'
p14169
Nsa(dp14170
S'description'
p14171
S'Set the start and end time as execute sync times.\n'
p14172
sS'cpp_type'
p14173
S'bool'
p14174
sS'default'
p14175
S'0'
p14176
sS'name'
p14177
S'set_sync_times'
p14178
sS'required'
p14179
I00
sS'group_name'
p14180
Nsa(dp14181
S'description'
p14182
S'The time at which the objects are to be enabled/disabled.\n'
p14183
sS'cpp_type'
p14184
S'std::__1::vector<double, std::__1::allocator<double> >'
p14185
sS'default'
p14186
g3
sS'name'
p14187
S'start_time'
p14188
sS'required'
p14189
I00
sS'group_name'
p14190
Nsa(dp14191
S'description'
p14192
g3
sS'cpp_type'
p14193
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14194
sS'default'
p14195
S'TimePeriod'
p14196
sS'name'
p14197
S'type'
p14198
sS'required'
p14199
I00
sS'group_name'
p14200
NsasS'name'
p14201
S'/Controls/TimePeriod'
p14202
sasS'parameters'
p14203
NsS'name'
p14204
S'/Controls'
p14205
sa(dp14206
S'description'
p14207
g3
sS'subblocks'
p14208
(lp14209
(dp14210
S'description'
p14211
g3
sS'subblocks'
p14212
NsS'parameters'
p14213
(lp14214
(dp14215
S'description'
p14216
S'A string representing the Moose Object that will be built by this Action\n'
p14217
sS'cpp_type'
p14218
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14219
sS'default'
p14220
g3
sS'name'
p14221
S'type'
p14222
sS'required'
p14223
I01
sS'group_name'
p14224
NsasS'name'
p14225
S'/DGKernels/*'
p14226
sa(dp14227
S'description'
p14228
S'DG upwinding for the convection\n'
p14229
sS'subblocks'
p14230
NsS'parameters'
p14231
(lp14232
(dp14233
S'description'
p14234
S'The list of block ids (SubdomainID) that this object will be applied\n'
p14235
sS'cpp_type'
p14236
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p14237
sS'default'
p14238
g3
sS'name'
p14239
S'block'
p14240
sS'required'
p14241
I00
sS'group_name'
p14242
Nsa(dp14243
S'description'
p14244
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14245
sS'cpp_type'
p14246
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p14247
sS'default'
p14248
g3
sS'name'
p14249
S'boundary'
p14250
sS'required'
p14251
I00
sS'group_name'
p14252
Nsa(dp14253
S'description'
p14254
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14255
sS'cpp_type'
p14256
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14257
sS'default'
p14258
g3
sS'name'
p14259
S'control_tags'
p14260
sS'required'
p14261
I00
sS'group_name'
p14262
S'Advanced'
p14263
sa(dp14264
S'description'
p14265
S'Set the enabled status of the MooseObject.\n'
p14266
sS'cpp_type'
p14267
S'bool'
p14268
sS'default'
p14269
S'1'
p14270
sS'name'
p14271
S'enable'
p14272
sS'required'
p14273
I00
sS'group_name'
p14274
S'Advanced'
p14275
sa(dp14276
S'description'
p14277
S'Determines whether this object is calculated using an implicit or explicit form\n'
p14278
sS'cpp_type'
p14279
S'bool'
p14280
sS'default'
p14281
S'1'
p14282
sS'name'
p14283
S'implicit'
p14284
sS'required'
p14285
I00
sS'group_name'
p14286
S'Advanced'
p14287
sa(dp14288
S'description'
p14289
g3
sS'cpp_type'
p14290
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14291
sS'default'
p14292
S'DGConvection'
p14293
sS'name'
p14294
S'type'
p14295
sS'required'
p14296
I00
sS'group_name'
p14297
Nsa(dp14298
S'description'
p14299
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p14300
sS'cpp_type'
p14301
S'bool'
p14302
sS'default'
p14303
S'0'
p14304
sS'name'
p14305
S'use_displaced_mesh'
p14306
sS'required'
p14307
I00
sS'group_name'
p14308
S'Advanced'
p14309
sa(dp14310
S'description'
p14311
S'The name of the variable that this boundary condition applies to\n'
p14312
sS'cpp_type'
p14313
S'NonlinearVariableName'
p14314
sS'default'
p14315
g3
sS'name'
p14316
S'variable'
p14317
sS'required'
p14318
I01
sS'group_name'
p14319
Nsa(dp14320
S'description'
p14321
S'Velocity vector\n'
p14322
sS'cpp_type'
p14323
S'libMesh::VectorValue<double>'
p14324
sS'default'
p14325
g3
sS'name'
p14326
S'velocity'
p14327
sS'required'
p14328
I01
sS'group_name'
p14329
NsasS'name'
p14330
S'/DGKernels/DGConvection'
p14331
sa(dp14332
S'description'
p14333
g3
sS'subblocks'
p14334
NsS'parameters'
p14335
(lp14336
(dp14337
S'description'
p14338
S'The list of block ids (SubdomainID) that this object will be applied\n'
p14339
sS'cpp_type'
p14340
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p14341
sS'default'
p14342
g3
sS'name'
p14343
S'block'
p14344
sS'required'
p14345
I00
sS'group_name'
p14346
Nsa(dp14347
S'description'
p14348
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14349
sS'cpp_type'
p14350
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p14351
sS'default'
p14352
g3
sS'name'
p14353
S'boundary'
p14354
sS'required'
p14355
I00
sS'group_name'
p14356
Nsa(dp14357
S'description'
p14358
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14359
sS'cpp_type'
p14360
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14361
sS'default'
p14362
g3
sS'name'
p14363
S'control_tags'
p14364
sS'required'
p14365
I00
sS'group_name'
p14366
S'Advanced'
p14367
sa(dp14368
S'description'
p14369
S'The diffusion (or thermal conductivity or viscosity) coefficient.\n'
p14370
sS'cpp_type'
p14371
S'MaterialPropertyName'
p14372
sS'default'
p14373
S'1'
p14374
sS'name'
p14375
S'diff'
p14376
sS'required'
p14377
I00
sS'group_name'
p14378
Nsa(dp14379
S'description'
p14380
S'Set the enabled status of the MooseObject.\n'
p14381
sS'cpp_type'
p14382
S'bool'
p14383
sS'default'
p14384
S'1'
p14385
sS'name'
p14386
S'enable'
p14387
sS'required'
p14388
I00
sS'group_name'
p14389
S'Advanced'
p14390
sa(dp14391
S'description'
p14392
S'epsilon\n'
p14393
sS'cpp_type'
p14394
S'double'
p14395
sS'default'
p14396
g3
sS'name'
p14397
S'epsilon'
p14398
sS'required'
p14399
I01
sS'group_name'
p14400
Nsa(dp14401
S'description'
p14402
S'Determines whether this object is calculated using an implicit or explicit form\n'
p14403
sS'cpp_type'
p14404
S'bool'
p14405
sS'default'
p14406
S'1'
p14407
sS'name'
p14408
S'implicit'
p14409
sS'required'
p14410
I00
sS'group_name'
p14411
S'Advanced'
p14412
sa(dp14413
S'description'
p14414
S'sigma\n'
p14415
sS'cpp_type'
p14416
S'double'
p14417
sS'default'
p14418
g3
sS'name'
p14419
S'sigma'
p14420
sS'required'
p14421
I01
sS'group_name'
p14422
Nsa(dp14423
S'description'
p14424
g3
sS'cpp_type'
p14425
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14426
sS'default'
p14427
S'DGDiffusion'
p14428
sS'name'
p14429
S'type'
p14430
sS'required'
p14431
I00
sS'group_name'
p14432
Nsa(dp14433
S'description'
p14434
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p14435
sS'cpp_type'
p14436
S'bool'
p14437
sS'default'
p14438
S'0'
p14439
sS'name'
p14440
S'use_displaced_mesh'
p14441
sS'required'
p14442
I00
sS'group_name'
p14443
S'Advanced'
p14444
sa(dp14445
S'description'
p14446
S'The name of the variable that this boundary condition applies to\n'
p14447
sS'cpp_type'
p14448
S'NonlinearVariableName'
p14449
sS'default'
p14450
g3
sS'name'
p14451
S'variable'
p14452
sS'required'
p14453
I01
sS'group_name'
p14454
NsasS'name'
p14455
S'/DGKernels/DGDiffusion'
p14456
sasS'parameters'
p14457
NsS'name'
p14458
S'/DGKernels'
p14459
sa(dp14460
S'description'
p14461
g3
sS'subblocks'
p14462
(lp14463
(dp14464
S'description'
p14465
g3
sS'subblocks'
p14466
NsS'parameters'
p14467
(lp14468
(dp14469
S'description'
p14470
S'A string representing the Moose Object that will be built by this Action\n'
p14471
sS'cpp_type'
p14472
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14473
sS'default'
p14474
g3
sS'name'
p14475
S'type'
p14476
sS'required'
p14477
I01
sS'group_name'
p14478
NsasS'name'
p14479
S'/Dampers/*'
p14480
sa(dp14481
S'description'
p14482
g3
sS'subblocks'
p14483
NsS'parameters'
p14484
(lp14485
(dp14486
S'description'
p14487
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14488
sS'cpp_type'
p14489
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14490
sS'default'
p14491
g3
sS'name'
p14492
S'control_tags'
p14493
sS'required'
p14494
I00
sS'group_name'
p14495
S'Advanced'
p14496
sa(dp14497
S'description'
p14498
S'Set the enabled status of the MooseObject.\n'
p14499
sS'cpp_type'
p14500
S'bool'
p14501
sS'default'
p14502
S'1'
p14503
sS'name'
p14504
S'enable'
p14505
sS'required'
p14506
I00
sS'group_name'
p14507
S'Advanced'
p14508
sa(dp14509
S'description'
p14510
S'The maximum permissible iterative value for the variable.\n'
p14511
sS'cpp_type'
p14512
S'double'
p14513
sS'default'
p14514
S'1.79769e+308'
p14515
sS'name'
p14516
S'max_value'
p14517
sS'required'
p14518
I00
sS'group_name'
p14519
Nsa(dp14520
S'description'
p14521
S'The minimum permissible iterative value for the variable.\n'
p14522
sS'cpp_type'
p14523
S'double'
p14524
sS'default'
p14525
S'-1.79769e+308'
p14526
sS'name'
p14527
S'min_value'
p14528
sS'required'
p14529
I00
sS'group_name'
p14530
Nsa(dp14531
S'description'
p14532
g3
sS'cpp_type'
p14533
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14534
sS'default'
p14535
S'BoundingValueElementDamper'
p14536
sS'name'
p14537
S'type'
p14538
sS'required'
p14539
I00
sS'group_name'
p14540
Nsa(dp14541
S'description'
p14542
S'The name of the variable that this damper operates on\n'
p14543
sS'cpp_type'
p14544
S'NonlinearVariableName'
p14545
sS'default'
p14546
g3
sS'name'
p14547
S'variable'
p14548
sS'required'
p14549
I01
sS'group_name'
p14550
NsasS'name'
p14551
S'/Dampers/BoundingValueElementDamper'
p14552
sa(dp14553
S'description'
p14554
g3
sS'subblocks'
p14555
NsS'parameters'
p14556
(lp14557
(dp14558
S'description'
p14559
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14560
sS'cpp_type'
p14561
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14562
sS'default'
p14563
g3
sS'name'
p14564
S'control_tags'
p14565
sS'required'
p14566
I00
sS'group_name'
p14567
S'Advanced'
p14568
sa(dp14569
S'description'
p14570
S'Set the enabled status of the MooseObject.\n'
p14571
sS'cpp_type'
p14572
S'bool'
p14573
sS'default'
p14574
S'1'
p14575
sS'name'
p14576
S'enable'
p14577
sS'required'
p14578
I00
sS'group_name'
p14579
S'Advanced'
p14580
sa(dp14581
S'description'
p14582
S'The maximum permissible iterative value for the variable.\n'
p14583
sS'cpp_type'
p14584
S'double'
p14585
sS'default'
p14586
S'1.79769e+308'
p14587
sS'name'
p14588
S'max_value'
p14589
sS'required'
p14590
I00
sS'group_name'
p14591
Nsa(dp14592
S'description'
p14593
S'The minimum permissible iterative value for the variable.\n'
p14594
sS'cpp_type'
p14595
S'double'
p14596
sS'default'
p14597
S'-1.79769e+308'
p14598
sS'name'
p14599
S'min_value'
p14600
sS'required'
p14601
I00
sS'group_name'
p14602
Nsa(dp14603
S'description'
p14604
g3
sS'cpp_type'
p14605
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14606
sS'default'
p14607
S'BoundingValueNodalDamper'
p14608
sS'name'
p14609
S'type'
p14610
sS'required'
p14611
I00
sS'group_name'
p14612
Nsa(dp14613
S'description'
p14614
S'The name of the variable that this damper operates on\n'
p14615
sS'cpp_type'
p14616
S'NonlinearVariableName'
p14617
sS'default'
p14618
g3
sS'name'
p14619
S'variable'
p14620
sS'required'
p14621
I01
sS'group_name'
p14622
NsasS'name'
p14623
S'/Dampers/BoundingValueNodalDamper'
p14624
sa(dp14625
S'description'
p14626
g3
sS'subblocks'
p14627
NsS'parameters'
p14628
(lp14629
(dp14630
S'description'
p14631
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14632
sS'cpp_type'
p14633
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14634
sS'default'
p14635
g3
sS'name'
p14636
S'control_tags'
p14637
sS'required'
p14638
I00
sS'group_name'
p14639
S'Advanced'
p14640
sa(dp14641
S'description'
p14642
S'The percentage (between 0 and 1) of the newton update to take.\n'
p14643
sS'cpp_type'
p14644
S'double'
p14645
sS'default'
p14646
g3
sS'name'
p14647
S'damping'
p14648
sS'required'
p14649
I01
sS'group_name'
p14650
Nsa(dp14651
S'description'
p14652
S'Set the enabled status of the MooseObject.\n'
p14653
sS'cpp_type'
p14654
S'bool'
p14655
sS'default'
p14656
S'1'
p14657
sS'name'
p14658
S'enable'
p14659
sS'required'
p14660
I00
sS'group_name'
p14661
S'Advanced'
p14662
sa(dp14663
S'description'
p14664
g3
sS'cpp_type'
p14665
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14666
sS'default'
p14667
S'ConstantDamper'
p14668
sS'name'
p14669
S'type'
p14670
sS'required'
p14671
I00
sS'group_name'
p14672
NsasS'name'
p14673
S'/Dampers/ConstantDamper'
p14674
sa(dp14675
S'description'
p14676
g3
sS'subblocks'
p14677
NsS'parameters'
p14678
(lp14679
(dp14680
S'description'
p14681
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14682
sS'cpp_type'
p14683
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14684
sS'default'
p14685
g3
sS'name'
p14686
S'control_tags'
p14687
sS'required'
p14688
I00
sS'group_name'
p14689
S'Advanced'
p14690
sa(dp14691
S'description'
p14692
S'Set the enabled status of the MooseObject.\n'
p14693
sS'cpp_type'
p14694
S'bool'
p14695
sS'default'
p14696
S'1'
p14697
sS'name'
p14698
S'enable'
p14699
sS'required'
p14700
I00
sS'group_name'
p14701
S'Advanced'
p14702
sa(dp14703
S'description'
p14704
S'The maximum newton increment for the variable.\n'
p14705
sS'cpp_type'
p14706
S'double'
p14707
sS'default'
p14708
g3
sS'name'
p14709
S'max_increment'
p14710
sS'required'
p14711
I01
sS'group_name'
p14712
Nsa(dp14713
S'description'
p14714
g3
sS'cpp_type'
p14715
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14716
sS'default'
p14717
S'MaxIncrement'
p14718
sS'name'
p14719
S'type'
p14720
sS'required'
p14721
I00
sS'group_name'
p14722
Nsa(dp14723
S'description'
p14724
S'The name of the variable that this damper operates on\n'
p14725
sS'cpp_type'
p14726
S'NonlinearVariableName'
p14727
sS'default'
p14728
g3
sS'name'
p14729
S'variable'
p14730
sS'required'
p14731
I01
sS'group_name'
p14732
NsasS'name'
p14733
S'/Dampers/MaxIncrement'
p14734
sasS'parameters'
p14735
NsS'name'
p14736
S'/Dampers'
p14737
sa(dp14738
S'description'
p14739
g3
sS'subblocks'
p14740
NsS'parameters'
p14741
(lp14742
(dp14743
S'description'
p14744
S'Print out the actions being executed\n'
p14745
sS'cpp_type'
p14746
S'bool'
p14747
sS'default'
p14748
S'0'
p14749
sS'name'
p14750
S'show_actions'
p14751
sS'required'
p14752
I00
sS'group_name'
p14753
Nsa(dp14754
S'description'
p14755
S'Print out the material properties supplied for each block, face, neighbor, and/or sideset\n'
p14756
sS'cpp_type'
p14757
S'bool'
p14758
sS'default'
p14759
S'0'
p14760
sS'name'
p14761
S'show_material_props'
p14762
sS'required'
p14763
I00
sS'group_name'
p14764
Nsa(dp14765
S'description'
p14766
S'Shows parser block extraction and debugging information\n'
p14767
sS'cpp_type'
p14768
S'bool'
p14769
sS'default'
p14770
S'0'
p14771
sS'name'
p14772
S'show_parser'
p14773
sS'required'
p14774
I00
sS'group_name'
p14775
Nsa(dp14776
S'description'
p14777
S'The number of top residuals to print out (0 = no output)\n'
p14778
sS'cpp_type'
p14779
S'unsigned int'
p14780
sS'default'
p14781
S'0'
p14782
sS'name'
p14783
S'show_top_residuals'
p14784
sS'required'
p14785
I00
sS'group_name'
p14786
Nsa(dp14787
S'description'
p14788
S'Print the residual norms of the individual solution variables at each nonlinear iteration\n'
p14789
sS'cpp_type'
p14790
S'bool'
p14791
sS'default'
p14792
S'0'
p14793
sS'name'
p14794
S'show_var_residual_norms'
p14795
sS'required'
p14796
I00
sS'group_name'
p14797
Nsa(dp14798
S'description'
p14799
S'Variables for which residuals will be sent to the output file\n'
p14800
sS'cpp_type'
p14801
S'std::__1::vector<NonlinearVariableName, std::__1::allocator<NonlinearVariableName> >'
p14802
sS'default'
p14803
g3
sS'name'
p14804
S'show_var_residual'
p14805
sS'required'
p14806
I00
sS'group_name'
p14807
NsasS'name'
p14808
S'/Debug'
p14809
sa(dp14810
S'description'
p14811
g3
sS'subblocks'
p14812
NsS'parameters'
p14813
(lp14814
(dp14815
S'description'
p14816
S'*** WARNING: This block is deprecated - DO NOT USE ***\n'
p14817
sS'cpp_type'
p14818
S'bool'
p14819
sS'default'
p14820
g3
sS'name'
p14821
S'DEPRECATED'
p14822
sS'required'
p14823
I00
sS'group_name'
p14824
NsasS'name'
p14825
S'/DeprecatedBlock'
p14826
sa(dp14827
S'description'
p14828
g3
sS'subblocks'
p14829
(lp14830
(dp14831
S'description'
p14832
g3
sS'subblocks'
p14833
NsS'parameters'
p14834
(lp14835
(dp14836
S'description'
p14837
S'A string representing the Moose Object that will be built by this Action\n'
p14838
sS'cpp_type'
p14839
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14840
sS'default'
p14841
g3
sS'name'
p14842
S'type'
p14843
sS'required'
p14844
I01
sS'group_name'
p14845
NsasS'name'
p14846
S'/DiracKernels/*'
p14847
sa(dp14848
S'description'
p14849
g3
sS'subblocks'
p14850
NsS'parameters'
p14851
(lp14852
(dp14853
S'description'
p14854
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14855
sS'cpp_type'
p14856
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14857
sS'default'
p14858
g3
sS'name'
p14859
S'control_tags'
p14860
sS'required'
p14861
I00
sS'group_name'
p14862
S'Advanced'
p14863
sa(dp14864
S'description'
p14865
S'By default points added to a DiracKernel are dropped if a point at the same locationhas been added before. If this option is set to false duplicate points are retainedand contribute to residual and Jacobian.\n'
p14866
sS'cpp_type'
p14867
S'bool'
p14868
sS'default'
p14869
S'1'
p14870
sS'name'
p14871
S'drop_duplicate_points'
p14872
sS'required'
p14873
I00
sS'group_name'
p14874
S'Advanced'
p14875
sa(dp14876
S'description'
p14877
S'Set the enabled status of the MooseObject.\n'
p14878
sS'cpp_type'
p14879
S'bool'
p14880
sS'default'
p14881
S'1'
p14882
sS'name'
p14883
S'enable'
p14884
sS'required'
p14885
I00
sS'group_name'
p14886
S'Advanced'
p14887
sa(dp14888
S'description'
p14889
S'The x,y,z coordinates of the point\n'
p14890
sS'cpp_type'
p14891
S'std::__1::vector<double, std::__1::allocator<double> >'
p14892
sS'default'
p14893
g3
sS'name'
p14894
S'point'
p14895
sS'required'
p14896
I01
sS'group_name'
p14897
Nsa(dp14898
S'description'
p14899
g3
sS'cpp_type'
p14900
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14901
sS'default'
p14902
S'ConstantPointSource'
p14903
sS'name'
p14904
S'type'
p14905
sS'required'
p14906
I00
sS'group_name'
p14907
Nsa(dp14908
S'description'
p14909
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p14910
sS'cpp_type'
p14911
S'bool'
p14912
sS'default'
p14913
S'0'
p14914
sS'name'
p14915
S'use_displaced_mesh'
p14916
sS'required'
p14917
I00
sS'group_name'
p14918
S'Advanced'
p14919
sa(dp14920
S'description'
p14921
S'The value of the point source\n'
p14922
sS'cpp_type'
p14923
S'double'
p14924
sS'default'
p14925
g3
sS'name'
p14926
S'value'
p14927
sS'required'
p14928
I01
sS'group_name'
p14929
Nsa(dp14930
S'description'
p14931
S'The name of the variable that this kernel operates on\n'
p14932
sS'cpp_type'
p14933
S'NonlinearVariableName'
p14934
sS'default'
p14935
g3
sS'name'
p14936
S'variable'
p14937
sS'required'
p14938
I01
sS'group_name'
p14939
NsasS'name'
p14940
S'/DiracKernels/ConstantPointSource'
p14941
sasS'parameters'
p14942
NsS'name'
p14943
S'/DiracKernels'
p14944
sa(dp14945
S'description'
p14946
g3
sS'subblocks'
p14947
(lp14948
(dp14949
S'description'
p14950
g3
sS'subblocks'
p14951
(lp14952
(dp14953
S'description'
p14954
g3
sS'subblocks'
p14955
NsS'parameters'
p14956
(lp14957
(dp14958
S'description'
p14959
S'If Chebyshev acceleration is turned on\n'
p14960
sS'cpp_type'
p14961
S'bool'
p14962
sS'default'
p14963
S'1'
p14964
sS'name'
p14965
S'Chebyshev_acceleration_on'
p14966
sS'required'
p14967
I00
sS'group_name'
p14968
Nsa(dp14969
S'description'
p14970
S'True to ask the solver to set initial\n'
p14971
sS'cpp_type'
p14972
S'bool'
p14973
sS'default'
p14974
S'1'
p14975
sS'name'
p14976
S'auto_initialization'
p14977
sS'required'
p14978
I00
sS'group_name'
p14979
S'Advanced'
p14980
sa(dp14981
S'description'
p14982
S'To evaluate |Bx| for the eigenvalue\n'
p14983
sS'cpp_type'
p14984
S'PostprocessorName'
p14985
sS'default'
p14986
g3
sS'name'
p14987
S'bx_norm'
p14988
sS'required'
p14989
I01
sS'group_name'
p14990
Nsa(dp14991
S'description'
p14992
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p14993
sS'cpp_type'
p14994
S'bool'
p14995
sS'default'
p14996
S'0'
p14997
sS'name'
p14998
S'compute_initial_residual_before_preset_bcs'
p14999
sS'required'
p15000
I00
sS'group_name'
p15001
S'Solver'
p15002
sa(dp15003
S'description'
p15004
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15005
sS'cpp_type'
p15006
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15007
sS'default'
p15008
g3
sS'name'
p15009
S'control_tags'
p15010
sS'required'
p15011
I00
sS'group_name'
p15012
S'Advanced'
p15013
sa(dp15014
S'description'
p15015
S'Eigenvalue convergence tolerance\n'
p15016
sS'cpp_type'
p15017
S'double'
p15018
sS'default'
p15019
S'1e-06'
p15020
sS'name'
p15021
S'eig_check_tol'
p15022
sS'required'
p15023
I00
sS'group_name'
p15024
Nsa(dp15025
S'description'
p15026
S'Set the enabled status of the MooseObject.\n'
p15027
sS'cpp_type'
p15028
S'bool'
p15029
sS'default'
p15030
S'1'
p15031
sS'name'
p15032
S'enable'
p15033
sS'required'
p15034
I00
sS'group_name'
p15035
S'Advanced'
p15036
sa(dp15037
S'description'
p15038
S'Initial guess of the eigenvalue\n'
p15039
sS'cpp_type'
p15040
S'double'
p15041
sS'default'
p15042
S'1'
p15043
sS'name'
p15044
S'k0'
p15045
sS'required'
p15046
I00
sS'group_name'
p15047
Nsa(dp15048
S'description'
p15049
S'Linear Absolute Step Tolerance\n'
p15050
sS'cpp_type'
p15051
S'double'
p15052
sS'default'
p15053
S'-1'
p15054
sS'name'
p15055
S'l_abs_step_tol'
p15056
sS'required'
p15057
I00
sS'group_name'
p15058
S'Solver'
p15059
sa(dp15060
S'description'
p15061
S'Max Linear Iterations\n'
p15062
sS'cpp_type'
p15063
S'unsigned int'
p15064
sS'default'
p15065
S'10000'
p15066
sS'name'
p15067
S'l_max_its'
p15068
sS'required'
p15069
I00
sS'group_name'
p15070
S'Solver'
p15071
sa(dp15072
S'description'
p15073
S'Linear Tolerance\n'
p15074
sS'cpp_type'
p15075
S'double'
p15076
sS'default'
p15077
S'1e-05'
p15078
sS'name'
p15079
S'l_tol'
p15080
sS'required'
p15081
I00
sS'group_name'
p15082
S'Solver'
p15083
sa(dp15084
S'name'
p15085
S'line_search'
p15086
sS'cpp_type'
p15087
S'MooseEnum'
p15088
sS'default'
p15089
S'default'
p15090
sS'description'
p15091
S'Specifies the line search type (Note: none = basic)\n'
p15092
sS'required'
p15093
I00
sS'options'
p15094
S'default shell none basic l2 bt cp'
p15095
sS'group_name'
p15096
Nsa(dp15097
S'description'
p15098
S'The maximum number of power iterations\n'
p15099
sS'cpp_type'
p15100
S'unsigned int'
p15101
sS'default'
p15102
S'300'
p15103
sS'name'
p15104
S'max_power_iterations'
p15105
sS'required'
p15106
I00
sS'group_name'
p15107
Nsa(dp15108
S'description'
p15109
S'Minimum number of power iterations\n'
p15110
sS'cpp_type'
p15111
S'unsigned int'
p15112
sS'default'
p15113
S'1'
p15114
sS'name'
p15115
S'min_power_iterations'
p15116
sS'required'
p15117
I00
sS'group_name'
p15118
Nsa(dp15119
S'description'
p15120
S'Nonlinear Absolute step Tolerance\n'
p15121
sS'cpp_type'
p15122
S'double'
p15123
sS'default'
p15124
S'1e-50'
p15125
sS'name'
p15126
S'nl_abs_step_tol'
p15127
sS'required'
p15128
I00
sS'group_name'
p15129
S'Solver'
p15130
sa(dp15131
S'description'
p15132
S'Nonlinear Absolute Tolerance\n'
p15133
sS'cpp_type'
p15134
S'double'
p15135
sS'default'
p15136
S'1e-50'
p15137
sS'name'
p15138
S'nl_abs_tol'
p15139
sS'required'
p15140
I00
sS'group_name'
p15141
S'Solver'
p15142
sa(dp15143
S'description'
p15144
S'Max Nonlinear solver function evaluations\n'
p15145
sS'cpp_type'
p15146
S'unsigned int'
p15147
sS'default'
p15148
S'10000'
p15149
sS'name'
p15150
S'nl_max_funcs'
p15151
sS'required'
p15152
I00
sS'group_name'
p15153
S'Solver'
p15154
sa(dp15155
S'description'
p15156
S'Max Nonlinear Iterations\n'
p15157
sS'cpp_type'
p15158
S'unsigned int'
p15159
sS'default'
p15160
S'50'
p15161
sS'name'
p15162
S'nl_max_its'
p15163
sS'required'
p15164
I00
sS'group_name'
p15165
S'Solver'
p15166
sa(dp15167
S'description'
p15168
S'Nonlinear Relative step Tolerance\n'
p15169
sS'cpp_type'
p15170
S'double'
p15171
sS'default'
p15172
S'1e-50'
p15173
sS'name'
p15174
S'nl_rel_step_tol'
p15175
sS'required'
p15176
I00
sS'group_name'
p15177
S'Solver'
p15178
sa(dp15179
S'description'
p15180
S'Nonlinear Relative Tolerance\n'
p15181
sS'cpp_type'
p15182
S'double'
p15183
sS'default'
p15184
S'1e-08'
p15185
sS'name'
p15186
S'nl_rel_tol'
p15187
sS'required'
p15188
I00
sS'group_name'
p15189
S'Solver'
p15190
sa(dp15191
S'description'
p15192
S'Specifies whether or not to reinitialize FEs\n'
p15193
sS'cpp_type'
p15194
S'bool'
p15195
sS'default'
p15196
S'0'
p15197
sS'name'
p15198
S'no_fe_reinit'
p15199
sS'required'
p15200
I00
sS'group_name'
p15201
S'Advanced'
p15202
sa(dp15203
S'description'
p15204
S'Normalize x to make |x| equal to this factor\n'
p15205
sS'cpp_type'
p15206
S'double'
p15207
sS'default'
p15208
g3
sS'name'
p15209
S'normal_factor'
p15210
sS'required'
p15211
I00
sS'group_name'
p15212
S'Normalization'
p15213
sa(dp15214
S'description'
p15215
S'To evaluate |x| for normalization\n'
p15216
sS'cpp_type'
p15217
S'PostprocessorName'
p15218
sS'default'
p15219
g3
sS'name'
p15220
S'normalization'
p15221
sS'required'
p15222
I00
sS'group_name'
p15223
S'Normalization'
p15224
sa(dp15225
S'description'
p15226
S'True to output a step before normalization\n'
p15227
sS'cpp_type'
p15228
S'bool'
p15229
sS'default'
p15230
S'1'
p15231
sS'name'
p15232
S'output_before_normalization'
p15233
sS'required'
p15234
I00
sS'group_name'
p15235
S'Normalization'
p15236
sa(dp15237
S'name'
p15238
S'petsc_options'
p15239
sS'cpp_type'
p15240
S'MultiMooseEnum'
p15241
sS'default'
p15242
g3
sS'description'
p15243
S'Singleton PETSc options\n'
p15244
sS'required'
p15245
I00
sS'options'
p15246
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p15247
sS'group_name'
p15248
Nsa(dp15249
S'name'
p15250
S'petsc_options_iname'
p15251
sS'cpp_type'
p15252
S'MultiMooseEnum'
p15253
sS'default'
p15254
g3
sS'description'
p15255
S'Names of PETSc name/value pairs\n'
p15256
sS'required'
p15257
I00
sS'options'
p15258
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p15259
sS'group_name'
p15260
Nsa(dp15261
S'description'
p15262
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p15263
sS'cpp_type'
p15264
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15265
sS'default'
p15266
g3
sS'name'
p15267
S'petsc_options_value'
p15268
sS'required'
p15269
I00
sS'group_name'
p15270
Nsa(dp15271
S'description'
p15272
S'Reduce residual norm per power iteration by this factor\n'
p15273
sS'cpp_type'
p15274
S'double'
p15275
sS'default'
p15276
S'0.01'
p15277
sS'name'
p15278
S'pfactor'
p15279
sS'required'
p15280
I00
sS'group_name'
p15281
Nsa(dp15282
S'description'
p15283
S'File base name used for restart\n'
p15284
sS'cpp_type'
p15285
S'FileNameNoExtension'
p15286
sS'default'
p15287
g3
sS'name'
p15288
S'restart_file_base'
p15289
sS'required'
p15290
I00
sS'group_name'
p15291
S'Restart'
p15292
sa(dp15293
S'description'
p15294
S'Convergence tolerance on |x-x_previous| when provided\n'
p15295
sS'cpp_type'
p15296
S'double'
p15297
sS'default'
p15298
S'1.79769e+308'
p15299
sS'name'
p15300
S'sol_check_tol'
p15301
sS'required'
p15302
I00
sS'group_name'
p15303
Nsa(dp15304
S'name'
p15305
S'solve_type'
p15306
sS'cpp_type'
p15307
S'MooseEnum'
p15308
sS'default'
p15309
g3
sS'description'
p15310
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p15311
sS'required'
p15312
I00
sS'options'
p15313
S'PJFNK JFNK NEWTON FD LINEAR'
p15314
sS'group_name'
p15315
Nsa(dp15316
S'description'
p15317
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p15318
sS'cpp_type'
p15319
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15320
sS'default'
p15321
g3
sS'name'
p15322
S'splitting'
p15323
sS'required'
p15324
I00
sS'group_name'
p15325
Nsa(dp15326
S'description'
p15327
S'System time\n'
p15328
sS'cpp_type'
p15329
S'double'
p15330
sS'default'
p15331
S'0'
p15332
sS'name'
p15333
S'time'
p15334
sS'required'
p15335
I00
sS'group_name'
p15336
S'Advanced'
p15337
sa(dp15338
S'description'
p15339
g3
sS'cpp_type'
p15340
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15341
sS'default'
p15342
S'InversePowerMethod'
p15343
sS'name'
p15344
S'type'
p15345
sS'required'
p15346
I00
sS'group_name'
p15347
Nsa(dp15348
S'description'
p15349
S'To evaluate |x-x_previous| for power iterations\n'
p15350
sS'cpp_type'
p15351
S'PostprocessorName'
p15352
sS'default'
p15353
g3
sS'name'
p15354
S'xdiff'
p15355
sS'required'
p15356
I00
sS'group_name'
p15357
NsasS'name'
p15358
S'/Executioner/<type>/InversePowerMethod'
p15359
sa(dp15360
S'description'
p15361
g3
sS'subblocks'
p15362
NsS'parameters'
p15363
(lp15364
(dp15365
S'description'
p15366
S'True to ask the solver to set initial\n'
p15367
sS'cpp_type'
p15368
S'bool'
p15369
sS'default'
p15370
S'1'
p15371
sS'name'
p15372
S'auto_initialization'
p15373
sS'required'
p15374
I00
sS'group_name'
p15375
S'Advanced'
p15376
sa(dp15377
S'description'
p15378
S'To evaluate |Bx| for the eigenvalue\n'
p15379
sS'cpp_type'
p15380
S'PostprocessorName'
p15381
sS'default'
p15382
g3
sS'name'
p15383
S'bx_norm'
p15384
sS'required'
p15385
I01
sS'group_name'
p15386
Nsa(dp15387
S'description'
p15388
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p15389
sS'cpp_type'
p15390
S'bool'
p15391
sS'default'
p15392
S'0'
p15393
sS'name'
p15394
S'compute_initial_residual_before_preset_bcs'
p15395
sS'required'
p15396
I00
sS'group_name'
p15397
S'Solver'
p15398
sa(dp15399
S'description'
p15400
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15401
sS'cpp_type'
p15402
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15403
sS'default'
p15404
g3
sS'name'
p15405
S'control_tags'
p15406
sS'required'
p15407
I00
sS'group_name'
p15408
S'Advanced'
p15409
sa(dp15410
S'description'
p15411
S'Set the enabled status of the MooseObject.\n'
p15412
sS'cpp_type'
p15413
S'bool'
p15414
sS'default'
p15415
S'1'
p15416
sS'name'
p15417
S'enable'
p15418
sS'required'
p15419
I00
sS'group_name'
p15420
S'Advanced'
p15421
sa(dp15422
S'description'
p15423
S'The number of free power iterations\n'
p15424
sS'cpp_type'
p15425
S'unsigned int'
p15426
sS'default'
p15427
S'4'
p15428
sS'name'
p15429
S'free_power_iterations'
p15430
sS'required'
p15431
I00
sS'group_name'
p15432
Nsa(dp15433
S'description'
p15434
S'Initial guess of the eigenvalue\n'
p15435
sS'cpp_type'
p15436
S'double'
p15437
sS'default'
p15438
S'1'
p15439
sS'name'
p15440
S'k0'
p15441
sS'required'
p15442
I00
sS'group_name'
p15443
Nsa(dp15444
S'description'
p15445
S'Linear Absolute Step Tolerance\n'
p15446
sS'cpp_type'
p15447
S'double'
p15448
sS'default'
p15449
S'-1'
p15450
sS'name'
p15451
S'l_abs_step_tol'
p15452
sS'required'
p15453
I00
sS'group_name'
p15454
S'Solver'
p15455
sa(dp15456
S'description'
p15457
S'Max Linear Iterations\n'
p15458
sS'cpp_type'
p15459
S'unsigned int'
p15460
sS'default'
p15461
S'10000'
p15462
sS'name'
p15463
S'l_max_its'
p15464
sS'required'
p15465
I00
sS'group_name'
p15466
S'Solver'
p15467
sa(dp15468
S'description'
p15469
S'Linear Tolerance\n'
p15470
sS'cpp_type'
p15471
S'double'
p15472
sS'default'
p15473
S'1e-05'
p15474
sS'name'
p15475
S'l_tol'
p15476
sS'required'
p15477
I00
sS'group_name'
p15478
S'Solver'
p15479
sa(dp15480
S'name'
p15481
S'line_search'
p15482
sS'cpp_type'
p15483
S'MooseEnum'
p15484
sS'default'
p15485
S'default'
p15486
sS'description'
p15487
S'Specifies the line search type (Note: none = basic)\n'
p15488
sS'required'
p15489
I00
sS'options'
p15490
S'default shell none basic l2 bt cp'
p15491
sS'group_name'
p15492
Nsa(dp15493
S'description'
p15494
S'Nonlinear Absolute step Tolerance\n'
p15495
sS'cpp_type'
p15496
S'double'
p15497
sS'default'
p15498
S'1e-50'
p15499
sS'name'
p15500
S'nl_abs_step_tol'
p15501
sS'required'
p15502
I00
sS'group_name'
p15503
S'Solver'
p15504
sa(dp15505
S'description'
p15506
S'Nonlinear Absolute Tolerance\n'
p15507
sS'cpp_type'
p15508
S'double'
p15509
sS'default'
p15510
S'1e-50'
p15511
sS'name'
p15512
S'nl_abs_tol'
p15513
sS'required'
p15514
I00
sS'group_name'
p15515
S'Solver'
p15516
sa(dp15517
S'description'
p15518
S'Max Nonlinear solver function evaluations\n'
p15519
sS'cpp_type'
p15520
S'unsigned int'
p15521
sS'default'
p15522
S'10000'
p15523
sS'name'
p15524
S'nl_max_funcs'
p15525
sS'required'
p15526
I00
sS'group_name'
p15527
S'Solver'
p15528
sa(dp15529
S'description'
p15530
S'Max Nonlinear Iterations\n'
p15531
sS'cpp_type'
p15532
S'unsigned int'
p15533
sS'default'
p15534
S'50'
p15535
sS'name'
p15536
S'nl_max_its'
p15537
sS'required'
p15538
I00
sS'group_name'
p15539
S'Solver'
p15540
sa(dp15541
S'description'
p15542
S'Nonlinear Relative step Tolerance\n'
p15543
sS'cpp_type'
p15544
S'double'
p15545
sS'default'
p15546
S'1e-50'
p15547
sS'name'
p15548
S'nl_rel_step_tol'
p15549
sS'required'
p15550
I00
sS'group_name'
p15551
S'Solver'
p15552
sa(dp15553
S'description'
p15554
S'Nonlinear Relative Tolerance\n'
p15555
sS'cpp_type'
p15556
S'double'
p15557
sS'default'
p15558
S'1e-08'
p15559
sS'name'
p15560
S'nl_rel_tol'
p15561
sS'required'
p15562
I00
sS'group_name'
p15563
S'Solver'
p15564
sa(dp15565
S'description'
p15566
S'Specifies whether or not to reinitialize FEs\n'
p15567
sS'cpp_type'
p15568
S'bool'
p15569
sS'default'
p15570
S'0'
p15571
sS'name'
p15572
S'no_fe_reinit'
p15573
sS'required'
p15574
I00
sS'group_name'
p15575
S'Advanced'
p15576
sa(dp15577
S'description'
p15578
S'Normalize x to make |x| equal to this factor\n'
p15579
sS'cpp_type'
p15580
S'double'
p15581
sS'default'
p15582
g3
sS'name'
p15583
S'normal_factor'
p15584
sS'required'
p15585
I00
sS'group_name'
p15586
S'Normalization'
p15587
sa(dp15588
S'description'
p15589
S'To evaluate |x| for normalization\n'
p15590
sS'cpp_type'
p15591
S'PostprocessorName'
p15592
sS'default'
p15593
g3
sS'name'
p15594
S'normalization'
p15595
sS'required'
p15596
I00
sS'group_name'
p15597
S'Normalization'
p15598
sa(dp15599
S'description'
p15600
S'True to output solution after free power iterations\n'
p15601
sS'cpp_type'
p15602
S'bool'
p15603
sS'default'
p15604
S'1'
p15605
sS'name'
p15606
S'output_after_power_iterations'
p15607
sS'required'
p15608
I00
sS'group_name'
p15609
Nsa(dp15610
S'description'
p15611
S'True to output a step before normalization\n'
p15612
sS'cpp_type'
p15613
S'bool'
p15614
sS'default'
p15615
S'1'
p15616
sS'name'
p15617
S'output_before_normalization'
p15618
sS'required'
p15619
I00
sS'group_name'
p15620
S'Normalization'
p15621
sa(dp15622
S'name'
p15623
S'petsc_options'
p15624
sS'cpp_type'
p15625
S'MultiMooseEnum'
p15626
sS'default'
p15627
g3
sS'description'
p15628
S'Singleton PETSc options\n'
p15629
sS'required'
p15630
I00
sS'options'
p15631
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p15632
sS'group_name'
p15633
Nsa(dp15634
S'name'
p15635
S'petsc_options_iname'
p15636
sS'cpp_type'
p15637
S'MultiMooseEnum'
p15638
sS'default'
p15639
g3
sS'description'
p15640
S'Names of PETSc name/value pairs\n'
p15641
sS'required'
p15642
I00
sS'options'
p15643
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p15644
sS'group_name'
p15645
Nsa(dp15646
S'description'
p15647
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p15648
sS'cpp_type'
p15649
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15650
sS'default'
p15651
g3
sS'name'
p15652
S'petsc_options_value'
p15653
sS'required'
p15654
I00
sS'group_name'
p15655
Nsa(dp15656
S'description'
p15657
S'The factor of residual to be reduced per free power iteration or per nonlinear step\n'
p15658
sS'cpp_type'
p15659
S'double'
p15660
sS'default'
p15661
S'0.01'
p15662
sS'name'
p15663
S'pfactor'
p15664
sS'required'
p15665
I00
sS'group_name'
p15666
Nsa(dp15667
S'description'
p15668
S'File base name used for restart\n'
p15669
sS'cpp_type'
p15670
S'FileNameNoExtension'
p15671
sS'default'
p15672
g3
sS'name'
p15673
S'restart_file_base'
p15674
sS'required'
p15675
I00
sS'group_name'
p15676
S'Restart'
p15677
sa(dp15678
S'name'
p15679
S'solve_type'
p15680
sS'cpp_type'
p15681
S'MooseEnum'
p15682
sS'default'
p15683
g3
sS'description'
p15684
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p15685
sS'required'
p15686
I00
sS'options'
p15687
S'PJFNK JFNK NEWTON FD LINEAR'
p15688
sS'group_name'
p15689
Nsa(dp15690
S'description'
p15691
S'Absolute tolernance on residual norm\n'
p15692
sS'cpp_type'
p15693
S'double'
p15694
sS'default'
p15695
S'1e-06'
p15696
sS'name'
p15697
S'source_abs_tol'
p15698
sS'required'
p15699
I00
sS'group_name'
p15700
Nsa(dp15701
S'description'
p15702
S'Relative tolernance on residual norm after free power iterations\n'
p15703
sS'cpp_type'
p15704
S'double'
p15705
sS'default'
p15706
S'1e-50'
p15707
sS'name'
p15708
S'source_rel_tol'
p15709
sS'required'
p15710
I00
sS'group_name'
p15711
Nsa(dp15712
S'description'
p15713
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p15714
sS'cpp_type'
p15715
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15716
sS'default'
p15717
g3
sS'name'
p15718
S'splitting'
p15719
sS'required'
p15720
I00
sS'group_name'
p15721
Nsa(dp15722
S'description'
p15723
S'System time\n'
p15724
sS'cpp_type'
p15725
S'double'
p15726
sS'default'
p15727
S'0'
p15728
sS'name'
p15729
S'time'
p15730
sS'required'
p15731
I00
sS'group_name'
p15732
S'Advanced'
p15733
sa(dp15734
S'description'
p15735
g3
sS'cpp_type'
p15736
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15737
sS'default'
p15738
S'NonlinearEigen'
p15739
sS'name'
p15740
S'type'
p15741
sS'required'
p15742
I00
sS'group_name'
p15743
NsasS'name'
p15744
S'/Executioner/<type>/NonlinearEigen'
p15745
sa(dp15746
S'description'
p15747
g3
sS'subblocks'
p15748
NsS'parameters'
p15749
(lp15750
(dp15751
S'description'
p15752
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p15753
sS'cpp_type'
p15754
S'bool'
p15755
sS'default'
p15756
S'0'
p15757
sS'name'
p15758
S'compute_initial_residual_before_preset_bcs'
p15759
sS'required'
p15760
I00
sS'group_name'
p15761
S'Solver'
p15762
sa(dp15763
S'description'
p15764
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15765
sS'cpp_type'
p15766
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15767
sS'default'
p15768
g3
sS'name'
p15769
S'control_tags'
p15770
sS'required'
p15771
I00
sS'group_name'
p15772
S'Advanced'
p15773
sa(dp15774
S'description'
p15775
S'Set the enabled status of the MooseObject.\n'
p15776
sS'cpp_type'
p15777
S'bool'
p15778
sS'default'
p15779
S'1'
p15780
sS'name'
p15781
S'enable'
p15782
sS'required'
p15783
I00
sS'group_name'
p15784
S'Advanced'
p15785
sa(dp15786
S'description'
p15787
S'Linear Absolute Step Tolerance\n'
p15788
sS'cpp_type'
p15789
S'double'
p15790
sS'default'
p15791
S'-1'
p15792
sS'name'
p15793
S'l_abs_step_tol'
p15794
sS'required'
p15795
I00
sS'group_name'
p15796
S'Solver'
p15797
sa(dp15798
S'description'
p15799
S'Max Linear Iterations\n'
p15800
sS'cpp_type'
p15801
S'unsigned int'
p15802
sS'default'
p15803
S'10000'
p15804
sS'name'
p15805
S'l_max_its'
p15806
sS'required'
p15807
I00
sS'group_name'
p15808
S'Solver'
p15809
sa(dp15810
S'description'
p15811
S'Linear Tolerance\n'
p15812
sS'cpp_type'
p15813
S'double'
p15814
sS'default'
p15815
S'1e-05'
p15816
sS'name'
p15817
S'l_tol'
p15818
sS'required'
p15819
I00
sS'group_name'
p15820
S'Solver'
p15821
sa(dp15822
S'name'
p15823
S'line_search'
p15824
sS'cpp_type'
p15825
S'MooseEnum'
p15826
sS'default'
p15827
S'default'
p15828
sS'description'
p15829
S'Specifies the line search type (Note: none = basic)\n'
p15830
sS'required'
p15831
I00
sS'options'
p15832
S'default shell none basic l2 bt cp'
p15833
sS'group_name'
p15834
Nsa(dp15835
S'description'
p15836
S'Nonlinear Absolute step Tolerance\n'
p15837
sS'cpp_type'
p15838
S'double'
p15839
sS'default'
p15840
S'1e-50'
p15841
sS'name'
p15842
S'nl_abs_step_tol'
p15843
sS'required'
p15844
I00
sS'group_name'
p15845
S'Solver'
p15846
sa(dp15847
S'description'
p15848
S'Nonlinear Absolute Tolerance\n'
p15849
sS'cpp_type'
p15850
S'double'
p15851
sS'default'
p15852
S'1e-50'
p15853
sS'name'
p15854
S'nl_abs_tol'
p15855
sS'required'
p15856
I00
sS'group_name'
p15857
S'Solver'
p15858
sa(dp15859
S'description'
p15860
S'Max Nonlinear solver function evaluations\n'
p15861
sS'cpp_type'
p15862
S'unsigned int'
p15863
sS'default'
p15864
S'10000'
p15865
sS'name'
p15866
S'nl_max_funcs'
p15867
sS'required'
p15868
I00
sS'group_name'
p15869
S'Solver'
p15870
sa(dp15871
S'description'
p15872
S'Max Nonlinear Iterations\n'
p15873
sS'cpp_type'
p15874
S'unsigned int'
p15875
sS'default'
p15876
S'50'
p15877
sS'name'
p15878
S'nl_max_its'
p15879
sS'required'
p15880
I00
sS'group_name'
p15881
S'Solver'
p15882
sa(dp15883
S'description'
p15884
S'Nonlinear Relative step Tolerance\n'
p15885
sS'cpp_type'
p15886
S'double'
p15887
sS'default'
p15888
S'1e-50'
p15889
sS'name'
p15890
S'nl_rel_step_tol'
p15891
sS'required'
p15892
I00
sS'group_name'
p15893
S'Solver'
p15894
sa(dp15895
S'description'
p15896
S'Nonlinear Relative Tolerance\n'
p15897
sS'cpp_type'
p15898
S'double'
p15899
sS'default'
p15900
S'1e-08'
p15901
sS'name'
p15902
S'nl_rel_tol'
p15903
sS'required'
p15904
I00
sS'group_name'
p15905
S'Solver'
p15906
sa(dp15907
S'description'
p15908
S'Specifies whether or not to reinitialize FEs\n'
p15909
sS'cpp_type'
p15910
S'bool'
p15911
sS'default'
p15912
S'0'
p15913
sS'name'
p15914
S'no_fe_reinit'
p15915
sS'required'
p15916
I00
sS'group_name'
p15917
S'Advanced'
p15918
sa(dp15919
S'name'
p15920
S'petsc_options'
p15921
sS'cpp_type'
p15922
S'MultiMooseEnum'
p15923
sS'default'
p15924
g3
sS'description'
p15925
S'Singleton PETSc options\n'
p15926
sS'required'
p15927
I00
sS'options'
p15928
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p15929
sS'group_name'
p15930
Nsa(dp15931
S'name'
p15932
S'petsc_options_iname'
p15933
sS'cpp_type'
p15934
S'MultiMooseEnum'
p15935
sS'default'
p15936
g3
sS'description'
p15937
S'Names of PETSc name/value pairs\n'
p15938
sS'required'
p15939
I00
sS'options'
p15940
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p15941
sS'group_name'
p15942
Nsa(dp15943
S'description'
p15944
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p15945
sS'cpp_type'
p15946
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15947
sS'default'
p15948
g3
sS'name'
p15949
S'petsc_options_value'
p15950
sS'required'
p15951
I00
sS'group_name'
p15952
Nsa(dp15953
S'description'
p15954
S'File base name used for restart\n'
p15955
sS'cpp_type'
p15956
S'FileNameNoExtension'
p15957
sS'default'
p15958
g3
sS'name'
p15959
S'restart_file_base'
p15960
sS'required'
p15961
I00
sS'group_name'
p15962
S'Restart'
p15963
sa(dp15964
S'name'
p15965
S'solve_type'
p15966
sS'cpp_type'
p15967
S'MooseEnum'
p15968
sS'default'
p15969
g3
sS'description'
p15970
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p15971
sS'required'
p15972
I00
sS'options'
p15973
S'PJFNK JFNK NEWTON FD LINEAR'
p15974
sS'group_name'
p15975
Nsa(dp15976
S'description'
p15977
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p15978
sS'cpp_type'
p15979
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15980
sS'default'
p15981
g3
sS'name'
p15982
S'splitting'
p15983
sS'required'
p15984
I00
sS'group_name'
p15985
Nsa(dp15986
S'description'
p15987
g3
sS'cpp_type'
p15988
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15989
sS'default'
p15990
S'Steady'
p15991
sS'name'
p15992
S'type'
p15993
sS'required'
p15994
I00
sS'group_name'
p15995
NsasS'name'
p15996
S'/Executioner/<type>/Steady'
p15997
sa(dp15998
S'description'
p15999
g3
sS'subblocks'
p16000
NsS'parameters'
p16001
(lp16002
(dp16003
S'description'
p16004
S'abort if solve not converged rather than cut timestep\n'
p16005
sS'cpp_type'
p16006
S'bool'
p16007
sS'default'
p16008
S'0'
p16009
sS'name'
p16010
S'abort_on_solve_fail'
p16011
sS'required'
p16012
I00
sS'group_name'
p16013
S'Advanced'
p16014
sa(dp16015
S'description'
p16016
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p16017
sS'cpp_type'
p16018
S'bool'
p16019
sS'default'
p16020
S'0'
p16021
sS'name'
p16022
S'compute_initial_residual_before_preset_bcs'
p16023
sS'required'
p16024
I00
sS'group_name'
p16025
S'Solver'
p16026
sa(dp16027
S'description'
p16028
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16029
sS'cpp_type'
p16030
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16031
sS'default'
p16032
g3
sS'name'
p16033
S'control_tags'
p16034
sS'required'
p16035
I00
sS'group_name'
p16036
S'Advanced'
p16037
sa(dp16038
S'description'
p16039
S'The timestep size between solves\n'
p16040
sS'cpp_type'
p16041
S'double'
p16042
sS'default'
p16043
S'1'
p16044
sS'name'
p16045
S'dt'
p16046
sS'required'
p16047
I00
sS'group_name'
p16048
Nsa(dp16049
S'description'
p16050
S'The maximum timestep size in an adaptive run\n'
p16051
sS'cpp_type'
p16052
S'double'
p16053
sS'default'
p16054
S'1e+30'
p16055
sS'name'
p16056
S'dtmax'
p16057
sS'required'
p16058
I00
sS'group_name'
p16059
S'Advanced'
p16060
sa(dp16061
S'description'
p16062
S'The minimum timestep size in an adaptive run\n'
p16063
sS'cpp_type'
p16064
S'double'
p16065
sS'default'
p16066
S'2e-14'
p16067
sS'name'
p16068
S'dtmin'
p16069
sS'required'
p16070
I00
sS'group_name'
p16071
S'Advanced'
p16072
sa(dp16073
S'description'
p16074
S'Set the enabled status of the MooseObject.\n'
p16075
sS'cpp_type'
p16076
S'bool'
p16077
sS'default'
p16078
S'1'
p16079
sS'name'
p16080
S'enable'
p16081
sS'required'
p16082
I00
sS'group_name'
p16083
S'Advanced'
p16084
sa(dp16085
S'description'
p16086
S'The end time of the simulation\n'
p16087
sS'cpp_type'
p16088
S'double'
p16089
sS'default'
p16090
S'1e+30'
p16091
sS'name'
p16092
S'end_time'
p16093
sS'required'
p16094
I00
sS'group_name'
p16095
Nsa(dp16096
S'description'
p16097
S'Linear Absolute Step Tolerance\n'
p16098
sS'cpp_type'
p16099
S'double'
p16100
sS'default'
p16101
S'-1'
p16102
sS'name'
p16103
S'l_abs_step_tol'
p16104
sS'required'
p16105
I00
sS'group_name'
p16106
S'Solver'
p16107
sa(dp16108
S'description'
p16109
S'Max Linear Iterations\n'
p16110
sS'cpp_type'
p16111
S'unsigned int'
p16112
sS'default'
p16113
S'10000'
p16114
sS'name'
p16115
S'l_max_its'
p16116
sS'required'
p16117
I00
sS'group_name'
p16118
S'Solver'
p16119
sa(dp16120
S'description'
p16121
S'Linear Tolerance\n'
p16122
sS'cpp_type'
p16123
S'double'
p16124
sS'default'
p16125
S'1e-05'
p16126
sS'name'
p16127
S'l_tol'
p16128
sS'required'
p16129
I00
sS'group_name'
p16130
S'Solver'
p16131
sa(dp16132
S'name'
p16133
S'line_search'
p16134
sS'cpp_type'
p16135
S'MooseEnum'
p16136
sS'default'
p16137
S'default'
p16138
sS'description'
p16139
S'Specifies the line search type (Note: none = basic)\n'
p16140
sS'required'
p16141
I00
sS'options'
p16142
S'default shell none basic l2 bt cp'
p16143
sS'group_name'
p16144
Nsa(dp16145
S'description'
p16146
S'Maximum number of times to update XFEM crack topology in a step due to evolving cracks\n'
p16147
sS'cpp_type'
p16148
S'unsigned int'
p16149
sS'default'
p16150
S'4294967295'
p16151
sS'name'
p16152
S'max_xfem_update'
p16153
sS'required'
p16154
I00
sS'group_name'
p16155
Nsa(dp16156
S'description'
p16157
S'The number of timesteps during startup\n'
p16158
sS'cpp_type'
p16159
S'int'
p16160
sS'default'
p16161
S'0'
p16162
sS'name'
p16163
S'n_startup_steps'
p16164
sS'required'
p16165
I00
sS'group_name'
p16166
S'Advanced'
p16167
sa(dp16168
S'description'
p16169
S'Nonlinear Absolute step Tolerance\n'
p16170
sS'cpp_type'
p16171
S'double'
p16172
sS'default'
p16173
S'1e-50'
p16174
sS'name'
p16175
S'nl_abs_step_tol'
p16176
sS'required'
p16177
I00
sS'group_name'
p16178
S'Solver'
p16179
sa(dp16180
S'description'
p16181
S'Nonlinear Absolute Tolerance\n'
p16182
sS'cpp_type'
p16183
S'double'
p16184
sS'default'
p16185
S'1e-50'
p16186
sS'name'
p16187
S'nl_abs_tol'
p16188
sS'required'
p16189
I00
sS'group_name'
p16190
S'Solver'
p16191
sa(dp16192
S'description'
p16193
S'Max Nonlinear solver function evaluations\n'
p16194
sS'cpp_type'
p16195
S'unsigned int'
p16196
sS'default'
p16197
S'10000'
p16198
sS'name'
p16199
S'nl_max_funcs'
p16200
sS'required'
p16201
I00
sS'group_name'
p16202
S'Solver'
p16203
sa(dp16204
S'description'
p16205
S'Max Nonlinear Iterations\n'
p16206
sS'cpp_type'
p16207
S'unsigned int'
p16208
sS'default'
p16209
S'50'
p16210
sS'name'
p16211
S'nl_max_its'
p16212
sS'required'
p16213
I00
sS'group_name'
p16214
S'Solver'
p16215
sa(dp16216
S'description'
p16217
S'Nonlinear Relative step Tolerance\n'
p16218
sS'cpp_type'
p16219
S'double'
p16220
sS'default'
p16221
S'1e-50'
p16222
sS'name'
p16223
S'nl_rel_step_tol'
p16224
sS'required'
p16225
I00
sS'group_name'
p16226
S'Solver'
p16227
sa(dp16228
S'description'
p16229
S'Nonlinear Relative Tolerance\n'
p16230
sS'cpp_type'
p16231
S'double'
p16232
sS'default'
p16233
S'1e-08'
p16234
sS'name'
p16235
S'nl_rel_tol'
p16236
sS'required'
p16237
I00
sS'group_name'
p16238
S'Solver'
p16239
sa(dp16240
S'description'
p16241
S'Specifies whether or not to reinitialize FEs\n'
p16242
sS'cpp_type'
p16243
S'bool'
p16244
sS'default'
p16245
S'0'
p16246
sS'name'
p16247
S'no_fe_reinit'
p16248
sS'required'
p16249
I00
sS'group_name'
p16250
S'Advanced'
p16251
sa(dp16252
S'description'
p16253
S'The number of timesteps in a transient run\n'
p16254
sS'cpp_type'
p16255
S'unsigned int'
p16256
sS'default'
p16257
S'4294967295'
p16258
sS'name'
p16259
S'num_steps'
p16260
sS'required'
p16261
I00
sS'group_name'
p16262
Nsa(dp16263
S'name'
p16264
S'petsc_options'
p16265
sS'cpp_type'
p16266
S'MultiMooseEnum'
p16267
sS'default'
p16268
g3
sS'description'
p16269
S'Singleton PETSc options\n'
p16270
sS'required'
p16271
I00
sS'options'
p16272
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p16273
sS'group_name'
p16274
Nsa(dp16275
S'name'
p16276
S'petsc_options_iname'
p16277
sS'cpp_type'
p16278
S'MultiMooseEnum'
p16279
sS'default'
p16280
g3
sS'description'
p16281
S'Names of PETSc name/value pairs\n'
p16282
sS'required'
p16283
I00
sS'options'
p16284
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p16285
sS'group_name'
p16286
Nsa(dp16287
S'description'
p16288
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p16289
sS'cpp_type'
p16290
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16291
sS'default'
p16292
g3
sS'name'
p16293
S'petsc_options_value'
p16294
sS'required'
p16295
I00
sS'group_name'
p16296
Nsa(dp16297
S'description'
p16298
S"The absolute nonlinear residual to shoot for during Picard iterations.  This check is performed based on the Master app's nonlinear residual.\n"
p16299
sS'cpp_type'
p16300
S'double'
p16301
sS'default'
p16302
S'1e-50'
p16303
sS'name'
p16304
S'picard_abs_tol'
p16305
sS'required'
p16306
I00
sS'group_name'
p16307
S'Picard'
p16308
sa(dp16309
S'description'
p16310
S'Number of times each timestep will be solved.  Mainly used when wanting to do Picard iterations with MultiApps that are set to execute_on timestep_end or timestep_begin\n'
p16311
sS'cpp_type'
p16312
S'unsigned int'
p16313
sS'default'
p16314
S'1'
p16315
sS'name'
p16316
S'picard_max_its'
p16317
sS'required'
p16318
I00
sS'group_name'
p16319
S'Picard'
p16320
sa(dp16321
S'description'
p16322
S"The relative nonlinear residual drop to shoot for during Picard iterations.  This check is performed based on the Master app's nonlinear residual.\n"
p16323
sS'cpp_type'
p16324
S'double'
p16325
sS'default'
p16326
S'1e-08'
p16327
sS'name'
p16328
S'picard_rel_tol'
p16329
sS'required'
p16330
I00
sS'group_name'
p16331
S'Picard'
p16332
sa(dp16333
S'description'
p16334
S'Use when restarting a calculation to force a change in dt.\n'
p16335
sS'cpp_type'
p16336
S'bool'
p16337
sS'default'
p16338
S'0'
p16339
sS'name'
p16340
S'reset_dt'
p16341
sS'required'
p16342
I00
sS'group_name'
p16343
Nsa(dp16344
S'description'
p16345
S'File base name used for restart\n'
p16346
sS'cpp_type'
p16347
S'FileNameNoExtension'
p16348
sS'default'
p16349
g3
sS'name'
p16350
S'restart_file_base'
p16351
sS'required'
p16352
I00
sS'group_name'
p16353
S'Restart'
p16354
sa(dp16355
S'name'
p16356
S'scheme'
p16357
sS'cpp_type'
p16358
S'MooseEnum'
p16359
sS'default'
p16360
g3
sS'description'
p16361
S'Time integration scheme used.\n'
p16362
sS'required'
p16363
I00
sS'options'
p16364
S'implicit-euler explicit-euler crank-nicolson bdf2 rk-2 dirk explicit-tvd-rk-2'
p16365
sS'group_name'
p16366
Nsa(dp16367
S'name'
p16368
S'solve_type'
p16369
sS'cpp_type'
p16370
S'MooseEnum'
p16371
sS'default'
p16372
g3
sS'description'
p16373
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p16374
sS'required'
p16375
I00
sS'options'
p16376
S'PJFNK JFNK NEWTON FD LINEAR'
p16377
sS'group_name'
p16378
Nsa(dp16379
S'description'
p16380
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p16381
sS'cpp_type'
p16382
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16383
sS'default'
p16384
g3
sS'name'
p16385
S'splitting'
p16386
sS'required'
p16387
I00
sS'group_name'
p16388
Nsa(dp16389
S'description'
p16390
S'Whenever the relative residual changes by less than this the solution will be considered to be at steady state.\n'
p16391
sS'cpp_type'
p16392
S'double'
p16393
sS'default'
p16394
S'1e-08'
p16395
sS'name'
p16396
S'ss_check_tol'
p16397
sS'required'
p16398
I00
sS'group_name'
p16399
S'Advanced'
p16400
sa(dp16401
S'description'
p16402
S'Minimum number of timesteps to take before checking for steady state conditions.\n'
p16403
sS'cpp_type'
p16404
S'double'
p16405
sS'default'
p16406
S'0'
p16407
sS'name'
p16408
S'ss_tmin'
p16409
sS'required'
p16410
I00
sS'group_name'
p16411
S'Advanced'
p16412
sa(dp16413
S'description'
p16414
S'The start time of the simulation\n'
p16415
sS'cpp_type'
p16416
S'double'
p16417
sS'default'
p16418
S'0'
p16419
sS'name'
p16420
S'start_time'
p16421
sS'required'
p16422
I00
sS'group_name'
p16423
S'Advanced'
p16424
sa(dp16425
S'description'
p16426
S'The end times of time periods\n'
p16427
sS'cpp_type'
p16428
S'std::__1::vector<double, std::__1::allocator<double> >'
p16429
sS'default'
p16430
g3
sS'name'
p16431
S'time_period_ends'
p16432
sS'required'
p16433
I00
sS'group_name'
p16434
S'Time Periods'
p16435
sa(dp16436
S'description'
p16437
S'The start times of time periods\n'
p16438
sS'cpp_type'
p16439
S'std::__1::vector<double, std::__1::allocator<double> >'
p16440
sS'default'
p16441
g3
sS'name'
p16442
S'time_period_starts'
p16443
sS'required'
p16444
I00
sS'group_name'
p16445
S'Time Periods'
p16446
sa(dp16447
S'description'
p16448
S'The names of periods\n'
p16449
sS'cpp_type'
p16450
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16451
sS'default'
p16452
g3
sS'name'
p16453
S'time_periods'
p16454
sS'required'
p16455
I00
sS'group_name'
p16456
S'Time Periods'
p16457
sa(dp16458
S'description'
p16459
S'the tolerance setting for final timestep size and sync times\n'
p16460
sS'cpp_type'
p16461
S'double'
p16462
sS'default'
p16463
S'2e-14'
p16464
sS'name'
p16465
S'timestep_tolerance'
p16466
sS'required'
p16467
I00
sS'group_name'
p16468
S'Advanced'
p16469
sa(dp16470
S'description'
p16471
S'Whether or not to check for steady state conditions\n'
p16472
sS'cpp_type'
p16473
S'bool'
p16474
sS'default'
p16475
S'0'
p16476
sS'name'
p16477
S'trans_ss_check'
p16478
sS'required'
p16479
I00
sS'group_name'
p16480
S'Advanced'
p16481
sa(dp16482
S'description'
p16483
g3
sS'cpp_type'
p16484
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16485
sS'default'
p16486
S'Transient'
p16487
sS'name'
p16488
S'type'
p16489
sS'required'
p16490
I00
sS'group_name'
p16491
Nsa(dp16492
S'description'
p16493
S'If true then the dt for the simulation will be chosen by the MultiApps.  If false (the default) then the minimum over the master dt and the MultiApps is used\n'
p16494
sS'cpp_type'
p16495
S'bool'
p16496
sS'default'
p16497
S'0'
p16498
sS'name'
p16499
S'use_multiapp_dt'
p16500
sS'required'
p16501
I00
sS'group_name'
p16502
S'Advanced'
p16503
sa(dp16504
S'description'
p16505
S'Print detailed diagnostics on timestep calculation\n'
p16506
sS'cpp_type'
p16507
S'bool'
p16508
sS'default'
p16509
S'0'
p16510
sS'name'
p16511
S'verbose'
p16512
sS'required'
p16513
I00
sS'group_name'
p16514
NsasS'name'
p16515
S'/Executioner/<type>/Transient'
p16516
sasS'parameters'
p16517
NsS'name'
p16518
S'/Executioner/<type>'
p16519
sa(dp16520
S'description'
p16521
g3
sS'subblocks'
p16522
NsS'parameters'
p16523
(lp16524
(dp16525
S'description'
p16526
S'The fraction of elements or error to coarsen. Should be between 0 and 1.\n'
p16527
sS'cpp_type'
p16528
S'double'
p16529
sS'default'
p16530
S'0'
p16531
sS'name'
p16532
S'coarsen_fraction'
p16533
sS'required'
p16534
I00
sS'group_name'
p16535
Nsa(dp16536
S'description'
p16537
S'The number of adaptivity cycles per step\n'
p16538
sS'cpp_type'
p16539
S'unsigned int'
p16540
sS'default'
p16541
S'1'
p16542
sS'name'
p16543
S'cycles_per_step'
p16544
sS'required'
p16545
I00
sS'group_name'
p16546
Nsa(dp16547
S'name'
p16548
S'error_estimator'
p16549
sS'cpp_type'
p16550
S'MooseEnum'
p16551
sS'default'
p16552
S'KellyErrorEstimator'
p16553
sS'description'
p16554
S'The class name of the error estimator you want to use.\n'
p16555
sS'required'
p16556
I00
sS'options'
p16557
S'KellyErrorEstimator LaplacianErrorEstimator PatchRecoveryErrorEstimator'
p16558
sS'group_name'
p16559
Nsa(dp16560
S'description'
p16561
S'The number of adaptivity steps to perform using the initial conditions\n'
p16562
sS'cpp_type'
p16563
S'unsigned int'
p16564
sS'default'
p16565
S'0'
p16566
sS'name'
p16567
S'initial_adaptivity'
p16568
sS'required'
p16569
I00
sS'group_name'
p16570
Nsa(dp16571
S'description'
p16572
S'The number of time steps betweeen each adaptivity phase\n'
p16573
sS'cpp_type'
p16574
S'unsigned int'
p16575
sS'default'
p16576
S'1'
p16577
sS'name'
p16578
S'interval'
p16579
sS'required'
p16580
I00
sS'group_name'
p16581
Nsa(dp16582
S'description'
p16583
S'Maximum number of times a single element can be refined. If 0 then infinite.\n'
p16584
sS'cpp_type'
p16585
S'unsigned int'
p16586
sS'default'
p16587
S'0'
p16588
sS'name'
p16589
S'max_h_level'
p16590
sS'required'
p16591
I00
sS'group_name'
p16592
Nsa(dp16593
S'description'
p16594
S'Determines whether information about the mesh is printed when adaptivity occurs\n'
p16595
sS'cpp_type'
p16596
S'bool'
p16597
sS'default'
p16598
S'0'
p16599
sS'name'
p16600
S'print_changed_info'
p16601
sS'required'
p16602
I00
sS'group_name'
p16603
Nsa(dp16604
S'description'
p16605
S'Recompute markers during adaptivity cycles\n'
p16606
sS'cpp_type'
p16607
S'bool'
p16608
sS'default'
p16609
S'0'
p16610
sS'name'
p16611
S'recompute_markers_during_cycles'
p16612
sS'required'
p16613
I00
sS'group_name'
p16614
Nsa(dp16615
S'description'
p16616
S'The fraction of elements or error to refine. Should be between 0 and 1.\n'
p16617
sS'cpp_type'
p16618
S'double'
p16619
sS'default'
p16620
S'0'
p16621
sS'name'
p16622
S'refine_fraction'
p16623
sS'required'
p16624
I00
sS'group_name'
p16625
Nsa(dp16626
S'description'
p16627
S'Show the progress of the initial adaptivity\n'
p16628
sS'cpp_type'
p16629
S'bool'
p16630
sS'default'
p16631
S'1'
p16632
sS'name'
p16633
S'show_initial_progress'
p16634
sS'required'
p16635
I00
sS'group_name'
p16636
Nsa(dp16637
S'description'
p16638
S'The time that adaptivity will be active after.\n'
p16639
sS'cpp_type'
p16640
S'double'
p16641
sS'default'
p16642
S'-1.79769e+308'
p16643
sS'name'
p16644
S'start_time'
p16645
sS'required'
p16646
I00
sS'group_name'
p16647
Nsa(dp16648
S'description'
p16649
S'The number of adaptivity steps to perform at any one time for steady state\n'
p16650
sS'cpp_type'
p16651
S'unsigned int'
p16652
sS'default'
p16653
S'0'
p16654
sS'name'
p16655
S'steps'
p16656
sS'required'
p16657
I00
sS'group_name'
p16658
Nsa(dp16659
S'description'
p16660
S'The time after which adaptivity will no longer be active.\n'
p16661
sS'cpp_type'
p16662
S'double'
p16663
sS'default'
p16664
S'1.79769e+308'
p16665
sS'name'
p16666
S'stop_time'
p16667
sS'required'
p16668
I00
sS'group_name'
p16669
Nsa(dp16670
S'description'
p16671
S'List of names of variables that will be associated with weight_values\n'
p16672
sS'cpp_type'
p16673
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16674
sS'default'
p16675
g3
sS'name'
p16676
S'weight_names'
p16677
sS'required'
p16678
I00
sS'group_name'
p16679
Nsa(dp16680
S'description'
p16681
S'List of values between 0 and 1 to weight the associated weight_names error by\n'
p16682
sS'cpp_type'
p16683
S'std::__1::vector<double, std::__1::allocator<double> >'
p16684
sS'default'
p16685
g3
sS'name'
p16686
S'weight_values'
p16687
sS'required'
p16688
I00
sS'group_name'
p16689
NsasS'name'
p16690
S'/Executioner/Adaptivity'
p16691
sa(dp16692
S'description'
p16693
g3
sS'subblocks'
p16694
(lp16695
(dp16696
S'description'
p16697
g3
sS'subblocks'
p16698
(lp16699
(dp16700
S'description'
p16701
g3
sS'subblocks'
p16702
NsS'parameters'
p16703
(lp16704
(dp16705
S'description'
p16706
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16707
sS'cpp_type'
p16708
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16709
sS'default'
p16710
g3
sS'name'
p16711
S'control_tags'
p16712
sS'required'
p16713
I00
sS'group_name'
p16714
S'Advanced'
p16715
sa(dp16716
S'description'
p16717
S'Set the enabled status of the MooseObject.\n'
p16718
sS'cpp_type'
p16719
S'bool'
p16720
sS'default'
p16721
S'1'
p16722
sS'name'
p16723
S'enable'
p16724
sS'required'
p16725
I00
sS'group_name'
p16726
S'Advanced'
p16727
sa(dp16728
S'description'
p16729
S'The maximum reachable order of the Adams-Bashforth Predictor\n'
p16730
sS'cpp_type'
p16731
S'int'
p16732
sS'default'
p16733
S'2'
p16734
sS'name'
p16735
S'order'
p16736
sS'required'
p16737
I00
sS'group_name'
p16738
Nsa(dp16739
S'description'
p16740
S'The scale factor for the predictor (can range from 0 to 1)\n'
p16741
sS'cpp_type'
p16742
S'double'
p16743
sS'default'
p16744
g3
sS'name'
p16745
S'scale'
p16746
sS'required'
p16747
I01
sS'group_name'
p16748
Nsa(dp16749
S'description'
p16750
S'Skip the predictor if the current solution time is in this list of times\n'
p16751
sS'cpp_type'
p16752
S'std::__1::vector<double, std::__1::allocator<double> >'
p16753
sS'default'
p16754
g3
sS'name'
p16755
S'skip_times'
p16756
sS'required'
p16757
I00
sS'group_name'
p16758
Nsa(dp16759
S'description'
p16760
S'Skip the predictor if the previous solution time is in this list of times\n'
p16761
sS'cpp_type'
p16762
S'std::__1::vector<double, std::__1::allocator<double> >'
p16763
sS'default'
p16764
g3
sS'name'
p16765
S'skip_times_old'
p16766
sS'required'
p16767
I00
sS'group_name'
p16768
Nsa(dp16769
S'description'
p16770
g3
sS'cpp_type'
p16771
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16772
sS'default'
p16773
S'AdamsPredictor'
p16774
sS'name'
p16775
S'type'
p16776
sS'required'
p16777
I00
sS'group_name'
p16778
NsasS'name'
p16779
S'/Executioner/Predictor/<type>/AdamsPredictor'
p16780
sa(dp16781
S'description'
p16782
g3
sS'subblocks'
p16783
NsS'parameters'
p16784
(lp16785
(dp16786
S'description'
p16787
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16788
sS'cpp_type'
p16789
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16790
sS'default'
p16791
g3
sS'name'
p16792
S'control_tags'
p16793
sS'required'
p16794
I00
sS'group_name'
p16795
S'Advanced'
p16796
sa(dp16797
S'description'
p16798
S'Set the enabled status of the MooseObject.\n'
p16799
sS'cpp_type'
p16800
S'bool'
p16801
sS'default'
p16802
S'1'
p16803
sS'name'
p16804
S'enable'
p16805
sS'required'
p16806
I00
sS'group_name'
p16807
S'Advanced'
p16808
sa(dp16809
S'description'
p16810
S'The scale factor for the predictor (can range from 0 to 1)\n'
p16811
sS'cpp_type'
p16812
S'double'
p16813
sS'default'
p16814
g3
sS'name'
p16815
S'scale'
p16816
sS'required'
p16817
I01
sS'group_name'
p16818
Nsa(dp16819
S'description'
p16820
S'Skip the predictor if the current solution time is in this list of times\n'
p16821
sS'cpp_type'
p16822
S'std::__1::vector<double, std::__1::allocator<double> >'
p16823
sS'default'
p16824
g3
sS'name'
p16825
S'skip_times'
p16826
sS'required'
p16827
I00
sS'group_name'
p16828
Nsa(dp16829
S'description'
p16830
S'Skip the predictor if the previous solution time is in this list of times\n'
p16831
sS'cpp_type'
p16832
S'std::__1::vector<double, std::__1::allocator<double> >'
p16833
sS'default'
p16834
g3
sS'name'
p16835
S'skip_times_old'
p16836
sS'required'
p16837
I00
sS'group_name'
p16838
Nsa(dp16839
S'description'
p16840
g3
sS'cpp_type'
p16841
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16842
sS'default'
p16843
S'SimplePredictor'
p16844
sS'name'
p16845
S'type'
p16846
sS'required'
p16847
I00
sS'group_name'
p16848
NsasS'name'
p16849
S'/Executioner/Predictor/<type>/SimplePredictor'
p16850
sasS'parameters'
p16851
NsS'name'
p16852
S'/Executioner/Predictor/<type>'
p16853
sasS'parameters'
p16854
(lp16855
(dp16856
S'description'
p16857
S'A string representing the Moose Object that will be built by this Action\n'
p16858
sS'cpp_type'
p16859
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16860
sS'default'
p16861
g3
sS'name'
p16862
S'type'
p16863
sS'required'
p16864
I01
sS'group_name'
p16865
NsasS'name'
p16866
S'/Executioner/Predictor'
p16867
sa(dp16868
S'description'
p16869
g3
sS'subblocks'
p16870
NsS'parameters'
p16871
(lp16872
(dp16873
S'name'
p16874
S'element_order'
p16875
sS'cpp_type'
p16876
S'MooseEnum'
p16877
sS'default'
p16878
S'AUTO'
p16879
sS'description'
p16880
S'Order of the quadrature for elements\n'
p16881
sS'required'
p16882
I00
sS'options'
p16883
S'AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH'
p16884
sS'group_name'
p16885
Nsa(dp16886
S'name'
p16887
S'order'
p16888
sS'cpp_type'
p16889
S'MooseEnum'
p16890
sS'default'
p16891
S'AUTO'
p16892
sS'description'
p16893
S'Order of the quadrature\n'
p16894
sS'required'
p16895
I00
sS'options'
p16896
S'AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH'
p16897
sS'group_name'
p16898
Nsa(dp16899
S'name'
p16900
S'side_order'
p16901
sS'cpp_type'
p16902
S'MooseEnum'
p16903
sS'default'
p16904
S'AUTO'
p16905
sS'description'
p16906
S'Order of the quadrature for sides\n'
p16907
sS'required'
p16908
I00
sS'options'
p16909
S'AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH'
p16910
sS'group_name'
p16911
Nsa(dp16912
S'name'
p16913
S'type'
p16914
sS'cpp_type'
p16915
S'MooseEnum'
p16916
sS'default'
p16917
S'GAUSS'
p16918
sS'description'
p16919
S'Type of the quadrature rule\n'
p16920
sS'required'
p16921
I00
sS'options'
p16922
S'CLOUGH CONICAL GAUSS GRID MONOMIAL SIMPSON TRAP GAUSS_LOBATTO'
p16923
sS'group_name'
p16924
NsasS'name'
p16925
S'/Executioner/Quadrature'
p16926
sa(dp16927
S'description'
p16928
g3
sS'subblocks'
p16929
(lp16930
(dp16931
S'description'
p16932
g3
sS'subblocks'
p16933
(lp16934
(dp16935
S'description'
p16936
g3
sS'subblocks'
p16937
NsS'parameters'
p16938
(lp16939
(dp16940
S'description'
p16941
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16942
sS'cpp_type'
p16943
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16944
sS'default'
p16945
g3
sS'name'
p16946
S'control_tags'
p16947
sS'required'
p16948
I00
sS'group_name'
p16949
S'Advanced'
p16950
sa(dp16951
S'description'
p16952
S'Set the enabled status of the MooseObject.\n'
p16953
sS'cpp_type'
p16954
S'bool'
p16955
sS'default'
p16956
S'1'
p16957
sS'name'
p16958
S'enable'
p16959
sS'required'
p16960
I00
sS'group_name'
p16961
S'Advanced'
p16962
sa(dp16963
S'description'
p16964
S'If true, use LStableDirk4 to bootstrap this method.\n'
p16965
sS'cpp_type'
p16966
S'bool'
p16967
sS'default'
p16968
S'1'
p16969
sS'name'
p16970
S'safe_start'
p16971
sS'required'
p16972
I00
sS'group_name'
p16973
Nsa(dp16974
S'description'
p16975
g3
sS'cpp_type'
p16976
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16977
sS'default'
p16978
S'AStableDirk4'
p16979
sS'name'
p16980
S'type'
p16981
sS'required'
p16982
I00
sS'group_name'
p16983
NsasS'name'
p16984
S'/Executioner/TimeIntegrator/<type>/AStableDirk4'
p16985
sa(dp16986
S'description'
p16987
g3
sS'subblocks'
p16988
NsS'parameters'
p16989
(lp16990
(dp16991
S'description'
p16992
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16993
sS'cpp_type'
p16994
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16995
sS'default'
p16996
g3
sS'name'
p16997
S'control_tags'
p16998
sS'required'
p16999
I00
sS'group_name'
p17000
S'Advanced'
p17001
sa(dp17002
S'description'
p17003
S'Set the enabled status of the MooseObject.\n'
p17004
sS'cpp_type'
p17005
S'bool'
p17006
sS'default'
p17007
S'1'
p17008
sS'name'
p17009
S'enable'
p17010
sS'required'
p17011
I00
sS'group_name'
p17012
S'Advanced'
p17013
sa(dp17014
S'description'
p17015
g3
sS'cpp_type'
p17016
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17017
sS'default'
p17018
S'BDF2'
p17019
sS'name'
p17020
S'type'
p17021
sS'required'
p17022
I00
sS'group_name'
p17023
NsasS'name'
p17024
S'/Executioner/TimeIntegrator/<type>/BDF2'
p17025
sa(dp17026
S'description'
p17027
g3
sS'subblocks'
p17028
NsS'parameters'
p17029
(lp17030
(dp17031
S'description'
p17032
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17033
sS'cpp_type'
p17034
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17035
sS'default'
p17036
g3
sS'name'
p17037
S'control_tags'
p17038
sS'required'
p17039
I00
sS'group_name'
p17040
S'Advanced'
p17041
sa(dp17042
S'description'
p17043
S'Set the enabled status of the MooseObject.\n'
p17044
sS'cpp_type'
p17045
S'bool'
p17046
sS'default'
p17047
S'1'
p17048
sS'name'
p17049
S'enable'
p17050
sS'required'
p17051
I00
sS'group_name'
p17052
S'Advanced'
p17053
sa(dp17054
S'description'
p17055
g3
sS'cpp_type'
p17056
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17057
sS'default'
p17058
S'CrankNicolson'
p17059
sS'name'
p17060
S'type'
p17061
sS'required'
p17062
I00
sS'group_name'
p17063
NsasS'name'
p17064
S'/Executioner/TimeIntegrator/<type>/CrankNicolson'
p17065
sa(dp17066
S'description'
p17067
g3
sS'subblocks'
p17068
NsS'parameters'
p17069
(lp17070
(dp17071
S'description'
p17072
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17073
sS'cpp_type'
p17074
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17075
sS'default'
p17076
g3
sS'name'
p17077
S'control_tags'
p17078
sS'required'
p17079
I00
sS'group_name'
p17080
S'Advanced'
p17081
sa(dp17082
S'description'
p17083
S'Set the enabled status of the MooseObject.\n'
p17084
sS'cpp_type'
p17085
S'bool'
p17086
sS'default'
p17087
S'1'
p17088
sS'name'
p17089
S'enable'
p17090
sS'required'
p17091
I00
sS'group_name'
p17092
S'Advanced'
p17093
sa(dp17094
S'description'
p17095
g3
sS'cpp_type'
p17096
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17097
sS'default'
p17098
S'ExplicitEuler'
p17099
sS'name'
p17100
S'type'
p17101
sS'required'
p17102
I00
sS'group_name'
p17103
NsasS'name'
p17104
S'/Executioner/TimeIntegrator/<type>/ExplicitEuler'
p17105
sa(dp17106
S'description'
p17107
g3
sS'subblocks'
p17108
NsS'parameters'
p17109
(lp17110
(dp17111
S'description'
p17112
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17113
sS'cpp_type'
p17114
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17115
sS'default'
p17116
g3
sS'name'
p17117
S'control_tags'
p17118
sS'required'
p17119
I00
sS'group_name'
p17120
S'Advanced'
p17121
sa(dp17122
S'description'
p17123
S'Set the enabled status of the MooseObject.\n'
p17124
sS'cpp_type'
p17125
S'bool'
p17126
sS'default'
p17127
S'1'
p17128
sS'name'
p17129
S'enable'
p17130
sS'required'
p17131
I00
sS'group_name'
p17132
S'Advanced'
p17133
sa(dp17134
S'description'
p17135
g3
sS'cpp_type'
p17136
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17137
sS'default'
p17138
S'ExplicitMidpoint'
p17139
sS'name'
p17140
S'type'
p17141
sS'required'
p17142
I00
sS'group_name'
p17143
NsasS'name'
p17144
S'/Executioner/TimeIntegrator/<type>/ExplicitMidpoint'
p17145
sa(dp17146
S'description'
p17147
g3
sS'subblocks'
p17148
NsS'parameters'
p17149
(lp17150
(dp17151
S'description'
p17152
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17153
sS'cpp_type'
p17154
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17155
sS'default'
p17156
g3
sS'name'
p17157
S'control_tags'
p17158
sS'required'
p17159
I00
sS'group_name'
p17160
S'Advanced'
p17161
sa(dp17162
S'description'
p17163
S'Set the enabled status of the MooseObject.\n'
p17164
sS'cpp_type'
p17165
S'bool'
p17166
sS'default'
p17167
S'1'
p17168
sS'name'
p17169
S'enable'
p17170
sS'required'
p17171
I00
sS'group_name'
p17172
S'Advanced'
p17173
sa(dp17174
S'description'
p17175
g3
sS'cpp_type'
p17176
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17177
sS'default'
p17178
S'ExplicitTVDRK2'
p17179
sS'name'
p17180
S'type'
p17181
sS'required'
p17182
I00
sS'group_name'
p17183
NsasS'name'
p17184
S'/Executioner/TimeIntegrator/<type>/ExplicitTVDRK2'
p17185
sa(dp17186
S'description'
p17187
g3
sS'subblocks'
p17188
NsS'parameters'
p17189
(lp17190
(dp17191
S'description'
p17192
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17193
sS'cpp_type'
p17194
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17195
sS'default'
p17196
g3
sS'name'
p17197
S'control_tags'
p17198
sS'required'
p17199
I00
sS'group_name'
p17200
S'Advanced'
p17201
sa(dp17202
S'description'
p17203
S'Set the enabled status of the MooseObject.\n'
p17204
sS'cpp_type'
p17205
S'bool'
p17206
sS'default'
p17207
S'1'
p17208
sS'name'
p17209
S'enable'
p17210
sS'required'
p17211
I00
sS'group_name'
p17212
S'Advanced'
p17213
sa(dp17214
S'description'
p17215
g3
sS'cpp_type'
p17216
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17217
sS'default'
p17218
S'Heun'
p17219
sS'name'
p17220
S'type'
p17221
sS'required'
p17222
I00
sS'group_name'
p17223
NsasS'name'
p17224
S'/Executioner/TimeIntegrator/<type>/Heun'
p17225
sa(dp17226
S'description'
p17227
g3
sS'subblocks'
p17228
NsS'parameters'
p17229
(lp17230
(dp17231
S'description'
p17232
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17233
sS'cpp_type'
p17234
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17235
sS'default'
p17236
g3
sS'name'
p17237
S'control_tags'
p17238
sS'required'
p17239
I00
sS'group_name'
p17240
S'Advanced'
p17241
sa(dp17242
S'description'
p17243
S'Set the enabled status of the MooseObject.\n'
p17244
sS'cpp_type'
p17245
S'bool'
p17246
sS'default'
p17247
S'1'
p17248
sS'name'
p17249
S'enable'
p17250
sS'required'
p17251
I00
sS'group_name'
p17252
S'Advanced'
p17253
sa(dp17254
S'description'
p17255
g3
sS'cpp_type'
p17256
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17257
sS'default'
p17258
S'ImplicitEuler'
p17259
sS'name'
p17260
S'type'
p17261
sS'required'
p17262
I00
sS'group_name'
p17263
NsasS'name'
p17264
S'/Executioner/TimeIntegrator/<type>/ImplicitEuler'
p17265
sa(dp17266
S'description'
p17267
g3
sS'subblocks'
p17268
NsS'parameters'
p17269
(lp17270
(dp17271
S'description'
p17272
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17273
sS'cpp_type'
p17274
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17275
sS'default'
p17276
g3
sS'name'
p17277
S'control_tags'
p17278
sS'required'
p17279
I00
sS'group_name'
p17280
S'Advanced'
p17281
sa(dp17282
S'description'
p17283
S'Set the enabled status of the MooseObject.\n'
p17284
sS'cpp_type'
p17285
S'bool'
p17286
sS'default'
p17287
S'1'
p17288
sS'name'
p17289
S'enable'
p17290
sS'required'
p17291
I00
sS'group_name'
p17292
S'Advanced'
p17293
sa(dp17294
S'description'
p17295
g3
sS'cpp_type'
p17296
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17297
sS'default'
p17298
S'ImplicitMidpoint'
p17299
sS'name'
p17300
S'type'
p17301
sS'required'
p17302
I00
sS'group_name'
p17303
NsasS'name'
p17304
S'/Executioner/TimeIntegrator/<type>/ImplicitMidpoint'
p17305
sa(dp17306
S'description'
p17307
g3
sS'subblocks'
p17308
NsS'parameters'
p17309
(lp17310
(dp17311
S'description'
p17312
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17313
sS'cpp_type'
p17314
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17315
sS'default'
p17316
g3
sS'name'
p17317
S'control_tags'
p17318
sS'required'
p17319
I00
sS'group_name'
p17320
S'Advanced'
p17321
sa(dp17322
S'description'
p17323
S'Set the enabled status of the MooseObject.\n'
p17324
sS'cpp_type'
p17325
S'bool'
p17326
sS'default'
p17327
S'1'
p17328
sS'name'
p17329
S'enable'
p17330
sS'required'
p17331
I00
sS'group_name'
p17332
S'Advanced'
p17333
sa(dp17334
S'description'
p17335
g3
sS'cpp_type'
p17336
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17337
sS'default'
p17338
S'LStableDirk2'
p17339
sS'name'
p17340
S'type'
p17341
sS'required'
p17342
I00
sS'group_name'
p17343
NsasS'name'
p17344
S'/Executioner/TimeIntegrator/<type>/LStableDirk2'
p17345
sa(dp17346
S'description'
p17347
g3
sS'subblocks'
p17348
NsS'parameters'
p17349
(lp17350
(dp17351
S'description'
p17352
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17353
sS'cpp_type'
p17354
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17355
sS'default'
p17356
g3
sS'name'
p17357
S'control_tags'
p17358
sS'required'
p17359
I00
sS'group_name'
p17360
S'Advanced'
p17361
sa(dp17362
S'description'
p17363
S'Set the enabled status of the MooseObject.\n'
p17364
sS'cpp_type'
p17365
S'bool'
p17366
sS'default'
p17367
S'1'
p17368
sS'name'
p17369
S'enable'
p17370
sS'required'
p17371
I00
sS'group_name'
p17372
S'Advanced'
p17373
sa(dp17374
S'description'
p17375
g3
sS'cpp_type'
p17376
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17377
sS'default'
p17378
S'LStableDirk3'
p17379
sS'name'
p17380
S'type'
p17381
sS'required'
p17382
I00
sS'group_name'
p17383
NsasS'name'
p17384
S'/Executioner/TimeIntegrator/<type>/LStableDirk3'
p17385
sa(dp17386
S'description'
p17387
g3
sS'subblocks'
p17388
NsS'parameters'
p17389
(lp17390
(dp17391
S'description'
p17392
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17393
sS'cpp_type'
p17394
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17395
sS'default'
p17396
g3
sS'name'
p17397
S'control_tags'
p17398
sS'required'
p17399
I00
sS'group_name'
p17400
S'Advanced'
p17401
sa(dp17402
S'description'
p17403
S'Set the enabled status of the MooseObject.\n'
p17404
sS'cpp_type'
p17405
S'bool'
p17406
sS'default'
p17407
S'1'
p17408
sS'name'
p17409
S'enable'
p17410
sS'required'
p17411
I00
sS'group_name'
p17412
S'Advanced'
p17413
sa(dp17414
S'description'
p17415
g3
sS'cpp_type'
p17416
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17417
sS'default'
p17418
S'LStableDirk4'
p17419
sS'name'
p17420
S'type'
p17421
sS'required'
p17422
I00
sS'group_name'
p17423
NsasS'name'
p17424
S'/Executioner/TimeIntegrator/<type>/LStableDirk4'
p17425
sa(dp17426
S'description'
p17427
g3
sS'subblocks'
p17428
NsS'parameters'
p17429
(lp17430
(dp17431
S'description'
p17432
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17433
sS'cpp_type'
p17434
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17435
sS'default'
p17436
g3
sS'name'
p17437
S'control_tags'
p17438
sS'required'
p17439
I00
sS'group_name'
p17440
S'Advanced'
p17441
sa(dp17442
S'description'
p17443
S'Set the enabled status of the MooseObject.\n'
p17444
sS'cpp_type'
p17445
S'bool'
p17446
sS'default'
p17447
S'1'
p17448
sS'name'
p17449
S'enable'
p17450
sS'required'
p17451
I00
sS'group_name'
p17452
S'Advanced'
p17453
sa(dp17454
S'description'
p17455
g3
sS'cpp_type'
p17456
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17457
sS'default'
p17458
S'Ralston'
p17459
sS'name'
p17460
S'type'
p17461
sS'required'
p17462
I00
sS'group_name'
p17463
NsasS'name'
p17464
S'/Executioner/TimeIntegrator/<type>/Ralston'
p17465
sa(dp17466
S'description'
p17467
g3
sS'subblocks'
p17468
NsS'parameters'
p17469
(lp17470
(dp17471
S'description'
p17472
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17473
sS'cpp_type'
p17474
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17475
sS'default'
p17476
g3
sS'name'
p17477
S'control_tags'
p17478
sS'required'
p17479
I00
sS'group_name'
p17480
S'Advanced'
p17481
sa(dp17482
S'description'
p17483
S'Set the enabled status of the MooseObject.\n'
p17484
sS'cpp_type'
p17485
S'bool'
p17486
sS'default'
p17487
S'1'
p17488
sS'name'
p17489
S'enable'
p17490
sS'required'
p17491
I00
sS'group_name'
p17492
S'Advanced'
p17493
sa(dp17494
S'description'
p17495
g3
sS'cpp_type'
p17496
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17497
sS'default'
p17498
S'SteadyState'
p17499
sS'name'
p17500
S'type'
p17501
sS'required'
p17502
I00
sS'group_name'
p17503
NsasS'name'
p17504
S'/Executioner/TimeIntegrator/<type>/SteadyState'
p17505
sasS'parameters'
p17506
NsS'name'
p17507
S'/Executioner/TimeIntegrator/<type>'
p17508
sasS'parameters'
p17509
(lp17510
(dp17511
S'description'
p17512
S'A string representing the Moose Object that will be built by this Action\n'
p17513
sS'cpp_type'
p17514
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17515
sS'default'
p17516
g3
sS'name'
p17517
S'type'
p17518
sS'required'
p17519
I01
sS'group_name'
p17520
NsasS'name'
p17521
S'/Executioner/TimeIntegrator'
p17522
sa(dp17523
S'description'
p17524
g3
sS'subblocks'
p17525
(lp17526
(dp17527
S'description'
p17528
g3
sS'subblocks'
p17529
(lp17530
(dp17531
S'description'
p17532
g3
sS'subblocks'
p17533
NsS'parameters'
p17534
(lp17535
(dp17536
S'description'
p17537
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17538
sS'cpp_type'
p17539
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17540
sS'default'
p17541
g3
sS'name'
p17542
S'control_tags'
p17543
sS'required'
p17544
I00
sS'group_name'
p17545
S'Advanced'
p17546
sa(dp17547
S'description'
p17548
S'Initial time step size\n'
p17549
sS'cpp_type'
p17550
S'double'
p17551
sS'default'
p17552
g3
sS'name'
p17553
S'dt'
p17554
sS'required'
p17555
I01
sS'group_name'
p17556
Nsa(dp17557
S'description'
p17558
S'Maximum acceptable error.\n'
p17559
sS'cpp_type'
p17560
S'double'
p17561
sS'default'
p17562
g3
sS'name'
p17563
S'e_max'
p17564
sS'required'
p17565
I01
sS'group_name'
p17566
Nsa(dp17567
S'description'
p17568
S'Target error tolerance.\n'
p17569
sS'cpp_type'
p17570
S'double'
p17571
sS'default'
p17572
g3
sS'name'
p17573
S'e_tol'
p17574
sS'required'
p17575
I01
sS'group_name'
p17576
Nsa(dp17577
S'description'
p17578
S'Set the enabled status of the MooseObject.\n'
p17579
sS'cpp_type'
p17580
S'bool'
p17581
sS'default'
p17582
S'1'
p17583
sS'name'
p17584
S'enable'
p17585
sS'required'
p17586
I00
sS'group_name'
p17587
S'Advanced'
p17588
sa(dp17589
S'description'
p17590
S'Maximum ratio that the time step can increase.\n'
p17591
sS'cpp_type'
p17592
S'double'
p17593
sS'default'
p17594
S'1e+09'
p17595
sS'name'
p17596
S'max_increase'
p17597
sS'required'
p17598
I00
sS'group_name'
p17599
Nsa(dp17600
S'description'
p17601
S'Use when restarting a calculation to force a change in dt.\n'
p17602
sS'cpp_type'
p17603
S'bool'
p17604
sS'default'
p17605
S'0'
p17606
sS'name'
p17607
S'reset_dt'
p17608
sS'required'
p17609
I00
sS'group_name'
p17610
Nsa(dp17611
S'description'
p17612
S'scaling parameter for dt selection\n'
p17613
sS'cpp_type'
p17614
S'double'
p17615
sS'default'
p17616
S'0.8'
p17617
sS'name'
p17618
S'scaling_parameter'
p17619
sS'required'
p17620
I00
sS'group_name'
p17621
Nsa(dp17622
S'description'
p17623
S'when to start taking adaptive time steps\n'
p17624
sS'cpp_type'
p17625
S'int'
p17626
sS'default'
p17627
S'2'
p17628
sS'name'
p17629
S'start_adapting'
p17630
sS'required'
p17631
I00
sS'group_name'
p17632
Nsa(dp17633
S'description'
p17634
S'the number of time steps before recalculating dt\n'
p17635
sS'cpp_type'
p17636
S'int'
p17637
sS'default'
p17638
S'1'
p17639
sS'name'
p17640
S'steps_between_increase'
p17641
sS'required'
p17642
I00
sS'group_name'
p17643
Nsa(dp17644
S'description'
p17645
g3
sS'cpp_type'
p17646
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17647
sS'default'
p17648
S'AB2PredictorCorrector'
p17649
sS'name'
p17650
S'type'
p17651
sS'required'
p17652
I00
sS'group_name'
p17653
NsasS'name'
p17654
S'/Executioner/TimeStepper/<type>/AB2PredictorCorrector'
p17655
sa(dp17656
S'description'
p17657
g3
sS'subblocks'
p17658
NsS'parameters'
p17659
(lp17660
(dp17661
S'description'
p17662
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17663
sS'cpp_type'
p17664
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17665
sS'default'
p17666
g3
sS'name'
p17667
S'control_tags'
p17668
sS'required'
p17669
I00
sS'group_name'
p17670
S'Advanced'
p17671
sa(dp17672
S'description'
p17673
S'Size of the time step\n'
p17674
sS'cpp_type'
p17675
S'double'
p17676
sS'default'
p17677
g3
sS'name'
p17678
S'dt'
p17679
sS'required'
p17680
I01
sS'group_name'
p17681
Nsa(dp17682
S'description'
p17683
S'Set the enabled status of the MooseObject.\n'
p17684
sS'cpp_type'
p17685
S'bool'
p17686
sS'default'
p17687
S'1'
p17688
sS'name'
p17689
S'enable'
p17690
sS'required'
p17691
I00
sS'group_name'
p17692
S'Advanced'
p17693
sa(dp17694
S'description'
p17695
S'Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.\n'
p17696
sS'cpp_type'
p17697
S'double'
p17698
sS'default'
p17699
S'2'
p17700
sS'name'
p17701
S'growth_factor'
p17702
sS'required'
p17703
I00
sS'group_name'
p17704
Nsa(dp17705
S'description'
p17706
S'Use when restarting a calculation to force a change in dt.\n'
p17707
sS'cpp_type'
p17708
S'bool'
p17709
sS'default'
p17710
S'0'
p17711
sS'name'
p17712
S'reset_dt'
p17713
sS'required'
p17714
I00
sS'group_name'
p17715
Nsa(dp17716
S'description'
p17717
g3
sS'cpp_type'
p17718
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17719
sS'default'
p17720
S'ConstantDT'
p17721
sS'name'
p17722
S'type'
p17723
sS'required'
p17724
I00
sS'group_name'
p17725
NsasS'name'
p17726
S'/Executioner/TimeStepper/<type>/ConstantDT'
p17727
sa(dp17728
S'description'
p17729
g3
sS'subblocks'
p17730
NsS'parameters'
p17731
(lp17732
(dp17733
S'description'
p17734
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17735
sS'cpp_type'
p17736
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17737
sS'default'
p17738
g3
sS'name'
p17739
S'control_tags'
p17740
sS'required'
p17741
I00
sS'group_name'
p17742
S'Advanced'
p17743
sa(dp17744
S'description'
p17745
S'The initial time step size.\n'
p17746
sS'cpp_type'
p17747
S'double'
p17748
sS'default'
p17749
S'1'
p17750
sS'name'
p17751
S'dt'
p17752
sS'required'
p17753
I00
sS'group_name'
p17754
Nsa(dp17755
S'description'
p17756
S'Maximum acceptable error.\n'
p17757
sS'cpp_type'
p17758
S'double'
p17759
sS'default'
p17760
g3
sS'name'
p17761
S'e_max'
p17762
sS'required'
p17763
I01
sS'group_name'
p17764
Nsa(dp17765
S'description'
p17766
S'Target error tolerance.\n'
p17767
sS'cpp_type'
p17768
S'double'
p17769
sS'default'
p17770
g3
sS'name'
p17771
S'e_tol'
p17772
sS'required'
p17773
I01
sS'group_name'
p17774
Nsa(dp17775
S'description'
p17776
S'Set the enabled status of the MooseObject.\n'
p17777
sS'cpp_type'
p17778
S'bool'
p17779
sS'default'
p17780
S'1'
p17781
sS'name'
p17782
S'enable'
p17783
sS'required'
p17784
I00
sS'group_name'
p17785
S'Advanced'
p17786
sa(dp17787
S'description'
p17788
S'Maximum ratio that the time step can increase.\n'
p17789
sS'cpp_type'
p17790
S'double'
p17791
sS'default'
p17792
S'1e+09'
p17793
sS'name'
p17794
S'max_increase'
p17795
sS'required'
p17796
I00
sS'group_name'
p17797
Nsa(dp17798
S'description'
p17799
S'Use when restarting a calculation to force a change in dt.\n'
p17800
sS'cpp_type'
p17801
S'bool'
p17802
sS'default'
p17803
S'0'
p17804
sS'name'
p17805
S'reset_dt'
p17806
sS'required'
p17807
I00
sS'group_name'
p17808
Nsa(dp17809
S'description'
p17810
g3
sS'cpp_type'
p17811
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17812
sS'default'
p17813
S'DT2'
p17814
sS'name'
p17815
S'type'
p17816
sS'required'
p17817
I00
sS'group_name'
p17818
NsasS'name'
p17819
S'/Executioner/TimeStepper/<type>/DT2'
p17820
sa(dp17821
S'description'
p17822
S'Solves the Transient problem at a sequence of time points taken from a specified exodus file.\n'
p17823
sS'subblocks'
p17824
NsS'parameters'
p17825
(lp17826
(dp17827
S'description'
p17828
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17829
sS'cpp_type'
p17830
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17831
sS'default'
p17832
g3
sS'name'
p17833
S'control_tags'
p17834
sS'required'
p17835
I00
sS'group_name'
p17836
S'Advanced'
p17837
sa(dp17838
S'description'
p17839
S'Set the enabled status of the MooseObject.\n'
p17840
sS'cpp_type'
p17841
S'bool'
p17842
sS'default'
p17843
S'1'
p17844
sS'name'
p17845
S'enable'
p17846
sS'required'
p17847
I00
sS'group_name'
p17848
S'Advanced'
p17849
sa(dp17850
S'description'
p17851
S'The name of the mesh file to extract the time sequence from (must be an exodusII file).\n'
p17852
sS'cpp_type'
p17853
S'MeshFileName'
p17854
sS'default'
p17855
g3
sS'name'
p17856
S'mesh'
p17857
sS'required'
p17858
I01
sS'group_name'
p17859
Nsa(dp17860
S'description'
p17861
S'Use when restarting a calculation to force a change in dt.\n'
p17862
sS'cpp_type'
p17863
S'bool'
p17864
sS'default'
p17865
S'0'
p17866
sS'name'
p17867
S'reset_dt'
p17868
sS'required'
p17869
I00
sS'group_name'
p17870
Nsa(dp17871
S'description'
p17872
g3
sS'cpp_type'
p17873
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17874
sS'default'
p17875
S'ExodusTimeSequenceStepper'
p17876
sS'name'
p17877
S'type'
p17878
sS'required'
p17879
I00
sS'group_name'
p17880
NsasS'name'
p17881
S'/Executioner/TimeStepper/<type>/ExodusTimeSequenceStepper'
p17882
sa(dp17883
S'description'
p17884
g3
sS'subblocks'
p17885
NsS'parameters'
p17886
(lp17887
(dp17888
S'description'
p17889
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17890
sS'cpp_type'
p17891
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17892
sS'default'
p17893
g3
sS'name'
p17894
S'control_tags'
p17895
sS'required'
p17896
I00
sS'group_name'
p17897
S'Advanced'
p17898
sa(dp17899
S'description'
p17900
S'Set the enabled status of the MooseObject.\n'
p17901
sS'cpp_type'
p17902
S'bool'
p17903
sS'default'
p17904
S'1'
p17905
sS'name'
p17906
S'enable'
p17907
sS'required'
p17908
I00
sS'group_name'
p17909
S'Advanced'
p17910
sa(dp17911
S'description'
p17912
S'Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.\n'
p17913
sS'cpp_type'
p17914
S'double'
p17915
sS'default'
p17916
S'1.79769e+308'
p17917
sS'name'
p17918
S'growth_factor'
p17919
sS'required'
p17920
I00
sS'group_name'
p17921
Nsa(dp17922
S'description'
p17923
S'Whether or not to interpolate DT between times.  This is true by default for historical reasons.\n'
p17924
sS'cpp_type'
p17925
S'bool'
p17926
sS'default'
p17927
S'1'
p17928
sS'name'
p17929
S'interpolate'
p17930
sS'required'
p17931
I00
sS'group_name'
p17932
Nsa(dp17933
S'description'
p17934
S'The minimal dt to take.\n'
p17935
sS'cpp_type'
p17936
S'double'
p17937
sS'default'
p17938
S'0'
p17939
sS'name'
p17940
S'min_dt'
p17941
sS'required'
p17942
I00
sS'group_name'
p17943
Nsa(dp17944
S'description'
p17945
S'Use when restarting a calculation to force a change in dt.\n'
p17946
sS'cpp_type'
p17947
S'bool'
p17948
sS'default'
p17949
S'0'
p17950
sS'name'
p17951
S'reset_dt'
p17952
sS'required'
p17953
I00
sS'group_name'
p17954
Nsa(dp17955
S'description'
p17956
S'The values of dt\n'
p17957
sS'cpp_type'
p17958
S'std::__1::vector<double, std::__1::allocator<double> >'
p17959
sS'default'
p17960
g3
sS'name'
p17961
S'time_dt'
p17962
sS'required'
p17963
I01
sS'group_name'
p17964
Nsa(dp17965
S'description'
p17966
S'The values of t\n'
p17967
sS'cpp_type'
p17968
S'std::__1::vector<double, std::__1::allocator<double> >'
p17969
sS'default'
p17970
g3
sS'name'
p17971
S'time_t'
p17972
sS'required'
p17973
I01
sS'group_name'
p17974
Nsa(dp17975
S'description'
p17976
g3
sS'cpp_type'
p17977
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17978
sS'default'
p17979
S'FunctionDT'
p17980
sS'name'
p17981
S'type'
p17982
sS'required'
p17983
I00
sS'group_name'
p17984
NsasS'name'
p17985
S'/Executioner/TimeStepper/<type>/FunctionDT'
p17986
sa(dp17987
S'description'
p17988
S'Adjust the timestep based on the number of iterations\n'
p17989
sS'subblocks'
p17990
NsS'parameters'
p17991
(lp17992
(dp17993
S'description'
p17994
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17995
sS'cpp_type'
p17996
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17997
sS'default'
p17998
g3
sS'name'
p17999
S'control_tags'
p18000
sS'required'
p18001
I00
sS'group_name'
p18002
S'Advanced'
p18003
sa(dp18004
S'description'
p18005
S"Factor to apply to timestep if difficult convergence (if 'optimal_iterations' is specified) or if solution failed\n"
p18006
sS'cpp_type'
p18007
S'double'
p18008
sS'default'
p18009
S'0.5'
p18010
sS'name'
p18011
S'cutback_factor'
p18012
sS'required'
p18013
I00
sS'group_name'
p18014
Nsa(dp18015
S'description'
p18016
S'The default timestep size between solves\n'
p18017
sS'cpp_type'
p18018
S'double'
p18019
sS'default'
p18020
g3
sS'name'
p18021
S'dt'
p18022
sS'required'
p18023
I01
sS'group_name'
p18024
Nsa(dp18025
S'description'
p18026
S'Set the enabled status of the MooseObject.\n'
p18027
sS'cpp_type'
p18028
S'bool'
p18029
sS'default'
p18030
S'1'
p18031
sS'name'
p18032
S'enable'
p18033
sS'required'
p18034
I00
sS'group_name'
p18035
S'Advanced'
p18036
sa(dp18037
S'description'
p18038
S'Forces the timestepper to take a step that is consistent with points defined in the function\n'
p18039
sS'cpp_type'
p18040
S'bool'
p18041
sS'default'
p18042
S'0'
p18043
sS'name'
p18044
S'force_step_every_function_point'
p18045
sS'required'
p18046
I00
sS'group_name'
p18047
Nsa(dp18048
S'description'
p18049
S"Factor to apply to timestep if easy convergence (if 'optimal_iterations' is specified) or if recovering from failed solve\n"
p18050
sS'cpp_type'
p18051
S'double'
p18052
sS'default'
p18053
S'2'
p18054
sS'name'
p18055
S'growth_factor'
p18056
sS'required'
p18057
I00
sS'group_name'
p18058
Nsa(dp18059
S'description'
p18060
S"Attempt to grow/shrink timestep if the iteration count is below/above 'optimal_iterations plus/minus iteration_window' (default = optimal_iterations/5).\n"
p18061
sS'cpp_type'
p18062
S'int'
p18063
sS'default'
p18064
g3
sS'name'
p18065
S'iteration_window'
p18066
sS'required'
p18067
I00
sS'group_name'
p18068
Nsa(dp18069
S'description'
p18070
S'The ratio of linear to nonlinear iterations to determine target linear iterations and window for adaptive timestepping (default = 25)\n'
p18071
sS'cpp_type'
p18072
S'unsigned int'
p18073
sS'default'
p18074
g3
sS'name'
p18075
S'linear_iteration_ratio'
p18076
sS'required'
p18077
I00
sS'group_name'
p18078
Nsa(dp18079
S'description'
p18080
S'The absolute value of the maximum change in timestep_limiting_function over a timestep\n'
p18081
sS'cpp_type'
p18082
S'double'
p18083
sS'default'
p18084
g3
sS'name'
p18085
S'max_function_change'
p18086
sS'required'
p18087
I00
sS'group_name'
p18088
Nsa(dp18089
S'description'
p18090
S'The target number of nonlinear iterations for adaptive timestepping\n'
p18091
sS'cpp_type'
p18092
S'int'
p18093
sS'default'
p18094
g3
sS'name'
p18095
S'optimal_iterations'
p18096
sS'required'
p18097
I00
sS'group_name'
p18098
Nsa(dp18099
S'description'
p18100
S'If specified, the postprocessor value is used as an upper limit for the current time step length\n'
p18101
sS'cpp_type'
p18102
S'PostprocessorName'
p18103
sS'default'
p18104
g3
sS'name'
p18105
S'postprocessor_dtlim'
p18106
sS'required'
p18107
I00
sS'group_name'
p18108
Nsa(dp18109
S'description'
p18110
S'Use when restarting a calculation to force a change in dt.\n'
p18111
sS'cpp_type'
p18112
S'bool'
p18113
sS'default'
p18114
S'0'
p18115
sS'name'
p18116
S'reset_dt'
p18117
sS'required'
p18118
I00
sS'group_name'
p18119
Nsa(dp18120
S'description'
p18121
S'The values of dt\n'
p18122
sS'cpp_type'
p18123
S'std::__1::vector<double, std::__1::allocator<double> >'
p18124
sS'default'
p18125
g3
sS'name'
p18126
S'time_dt'
p18127
sS'required'
p18128
I00
sS'group_name'
p18129
Nsa(dp18130
S'description'
p18131
S'The values of t\n'
p18132
sS'cpp_type'
p18133
S'std::__1::vector<double, std::__1::allocator<double> >'
p18134
sS'default'
p18135
g3
sS'name'
p18136
S'time_t'
p18137
sS'required'
p18138
I00
sS'group_name'
p18139
Nsa(dp18140
S'description'
p18141
S"A 'Piecewise' type function used to control the timestep by limiting the change in the function over a timestep\n"
p18142
sS'cpp_type'
p18143
S'FunctionName'
p18144
sS'default'
p18145
g3
sS'name'
p18146
S'timestep_limiting_function'
p18147
sS'required'
p18148
I00
sS'group_name'
p18149
Nsa(dp18150
S'description'
p18151
g3
sS'cpp_type'
p18152
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18153
sS'default'
p18154
S'IterationAdaptiveDT'
p18155
sS'name'
p18156
S'type'
p18157
sS'required'
p18158
I00
sS'group_name'
p18159
NsasS'name'
p18160
S'/Executioner/TimeStepper/<type>/IterationAdaptiveDT'
p18161
sa(dp18162
S'description'
p18163
g3
sS'subblocks'
p18164
NsS'parameters'
p18165
(lp18166
(dp18167
S'description'
p18168
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18169
sS'cpp_type'
p18170
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18171
sS'default'
p18172
g3
sS'name'
p18173
S'control_tags'
p18174
sS'required'
p18175
I00
sS'group_name'
p18176
S'Advanced'
p18177
sa(dp18178
S'description'
p18179
S'Initial value of dt\n'
p18180
sS'cpp_type'
p18181
S'double'
p18182
sS'default'
p18183
g3
sS'name'
p18184
S'dt'
p18185
sS'required'
p18186
I00
sS'group_name'
p18187
Nsa(dp18188
S'description'
p18189
S'Set the enabled status of the MooseObject.\n'
p18190
sS'cpp_type'
p18191
S'bool'
p18192
sS'default'
p18193
S'1'
p18194
sS'name'
p18195
S'enable'
p18196
sS'required'
p18197
I00
sS'group_name'
p18198
S'Advanced'
p18199
sa(dp18200
S'description'
p18201
S'The name of the postprocessor that computes the dt\n'
p18202
sS'cpp_type'
p18203
S'PostprocessorName'
p18204
sS'default'
p18205
g3
sS'name'
p18206
S'postprocessor'
p18207
sS'required'
p18208
I01
sS'group_name'
p18209
Nsa(dp18210
S'description'
p18211
S'Use when restarting a calculation to force a change in dt.\n'
p18212
sS'cpp_type'
p18213
S'bool'
p18214
sS'default'
p18215
S'0'
p18216
sS'name'
p18217
S'reset_dt'
p18218
sS'required'
p18219
I00
sS'group_name'
p18220
Nsa(dp18221
S'description'
p18222
g3
sS'cpp_type'
p18223
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18224
sS'default'
p18225
S'PostprocessorDT'
p18226
sS'name'
p18227
S'type'
p18228
sS'required'
p18229
I00
sS'group_name'
p18230
NsasS'name'
p18231
S'/Executioner/TimeStepper/<type>/PostprocessorDT'
p18232
sa(dp18233
S'description'
p18234
g3
sS'subblocks'
p18235
NsS'parameters'
p18236
(lp18237
(dp18238
S'description'
p18239
S'Output adaptive time step log\n'
p18240
sS'cpp_type'
p18241
S'bool'
p18242
sS'default'
p18243
S'0'
p18244
sS'name'
p18245
S'adapt_log'
p18246
sS'required'
p18247
I00
sS'group_name'
p18248
Nsa(dp18249
S'description'
p18250
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18251
sS'cpp_type'
p18252
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18253
sS'default'
p18254
g3
sS'name'
p18255
S'control_tags'
p18256
sS'required'
p18257
I00
sS'group_name'
p18258
S'Advanced'
p18259
sa(dp18260
S'description'
p18261
S'The timestep size between solves\n'
p18262
sS'cpp_type'
p18263
S'double'
p18264
sS'default'
p18265
g3
sS'name'
p18266
S'dt'
p18267
sS'required'
p18268
I01
sS'group_name'
p18269
Nsa(dp18270
S'description'
p18271
S'Set the enabled status of the MooseObject.\n'
p18272
sS'cpp_type'
p18273
S'bool'
p18274
sS'default'
p18275
S'1'
p18276
sS'name'
p18277
S'enable'
p18278
sS'required'
p18279
I00
sS'group_name'
p18280
S'Advanced'
p18281
sa(dp18282
S'description'
p18283
S'Direction for the first step.  1 for up... -1 for down. \n'
p18284
sS'cpp_type'
p18285
S'int'
p18286
sS'default'
p18287
S'1'
p18288
sS'name'
p18289
S'initial_direction'
p18290
sS'required'
p18291
I00
sS'group_name'
p18292
Nsa(dp18293
S'description'
p18294
S'Percentage to change the timestep by.  Should be between 0 and 1\n'
p18295
sS'cpp_type'
p18296
S'double'
p18297
sS'default'
p18298
S'0.1'
p18299
sS'name'
p18300
S'percent_change'
p18301
sS'required'
p18302
I00
sS'group_name'
p18303
Nsa(dp18304
S'description'
p18305
S'Use when restarting a calculation to force a change in dt.\n'
p18306
sS'cpp_type'
p18307
S'bool'
p18308
sS'default'
p18309
S'0'
p18310
sS'name'
p18311
S'reset_dt'
p18312
sS'required'
p18313
I00
sS'group_name'
p18314
Nsa(dp18315
S'description'
p18316
g3
sS'cpp_type'
p18317
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18318
sS'default'
p18319
S'SolutionTimeAdaptiveDT'
p18320
sS'name'
p18321
S'type'
p18322
sS'required'
p18323
I00
sS'group_name'
p18324
NsasS'name'
p18325
S'/Executioner/TimeStepper/<type>/SolutionTimeAdaptiveDT'
p18326
sa(dp18327
S'description'
p18328
S'Solves the Transient problem at a sequence of given time points.\n'
p18329
sS'subblocks'
p18330
NsS'parameters'
p18331
(lp18332
(dp18333
S'description'
p18334
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18335
sS'cpp_type'
p18336
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18337
sS'default'
p18338
g3
sS'name'
p18339
S'control_tags'
p18340
sS'required'
p18341
I00
sS'group_name'
p18342
S'Advanced'
p18343
sa(dp18344
S'description'
p18345
S'Set the enabled status of the MooseObject.\n'
p18346
sS'cpp_type'
p18347
S'bool'
p18348
sS'default'
p18349
S'1'
p18350
sS'name'
p18351
S'enable'
p18352
sS'required'
p18353
I00
sS'group_name'
p18354
S'Advanced'
p18355
sa(dp18356
S'description'
p18357
S'Use when restarting a calculation to force a change in dt.\n'
p18358
sS'cpp_type'
p18359
S'bool'
p18360
sS'default'
p18361
S'0'
p18362
sS'name'
p18363
S'reset_dt'
p18364
sS'required'
p18365
I00
sS'group_name'
p18366
Nsa(dp18367
S'description'
p18368
S'The values of t\n'
p18369
sS'cpp_type'
p18370
S'std::__1::vector<double, std::__1::allocator<double> >'
p18371
sS'default'
p18372
g3
sS'name'
p18373
S'time_sequence'
p18374
sS'required'
p18375
I01
sS'group_name'
p18376
Nsa(dp18377
S'description'
p18378
g3
sS'cpp_type'
p18379
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18380
sS'default'
p18381
S'TimeSequenceStepper'
p18382
sS'name'
p18383
S'type'
p18384
sS'required'
p18385
I00
sS'group_name'
p18386
NsasS'name'
p18387
S'/Executioner/TimeStepper/<type>/TimeSequenceStepper'
p18388
sasS'parameters'
p18389
NsS'name'
p18390
S'/Executioner/TimeStepper/<type>'
p18391
sasS'parameters'
p18392
(lp18393
(dp18394
S'description'
p18395
S'A string representing the Moose Object that will be built by this Action\n'
p18396
sS'cpp_type'
p18397
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18398
sS'default'
p18399
g3
sS'name'
p18400
S'type'
p18401
sS'required'
p18402
I01
sS'group_name'
p18403
NsasS'name'
p18404
S'/Executioner/TimeStepper'
p18405
sasS'parameters'
p18406
(lp18407
(dp18408
S'description'
p18409
S'A string representing the Moose Object that will be built by this Action\n'
p18410
sS'cpp_type'
p18411
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18412
sS'default'
p18413
g3
sS'name'
p18414
S'type'
p18415
sS'required'
p18416
I01
sS'group_name'
p18417
NsasS'name'
p18418
S'/Executioner'
p18419
sa(dp18420
S'description'
p18421
g3
sS'subblocks'
p18422
(lp18423
(dp18424
S'description'
p18425
g3
sS'subblocks'
p18426
NsS'parameters'
p18427
(lp18428
(dp18429
S'description'
p18430
S'A string representing the Moose Object that will be built by this Action\n'
p18431
sS'cpp_type'
p18432
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18433
sS'default'
p18434
g3
sS'name'
p18435
S'type'
p18436
sS'required'
p18437
I01
sS'group_name'
p18438
NsasS'name'
p18439
S'/Functions/*'
p18440
sa(dp18441
S'description'
p18442
S'Function for reading a 2D axisymmetric solution from file and mapping it to a 3D Cartesian model\n'
p18443
sS'subblocks'
p18444
NsS'parameters'
p18445
(lp18446
(dp18447
S'description'
p18448
S'Start point for axis of symmetry for the 2d model\n'
p18449
sS'cpp_type'
p18450
S'libMesh::VectorValue<double>'
p18451
sS'default'
p18452
S'0 0 0'
p18453
sS'name'
p18454
S'2d_axis_point1'
p18455
sS'required'
p18456
I00
sS'group_name'
p18457
Nsa(dp18458
S'description'
p18459
S'End point for axis of symmetry for the 2d model\n'
p18460
sS'cpp_type'
p18461
S'libMesh::VectorValue<double>'
p18462
sS'default'
p18463
S'0 1 0'
p18464
sS'name'
p18465
S'2d_axis_point2'
p18466
sS'required'
p18467
I00
sS'group_name'
p18468
Nsa(dp18469
S'description'
p18470
S'Start point for axis of symmetry for the 3d model\n'
p18471
sS'cpp_type'
p18472
S'libMesh::VectorValue<double>'
p18473
sS'default'
p18474
S'0 0 0'
p18475
sS'name'
p18476
S'3d_axis_point1'
p18477
sS'required'
p18478
I00
sS'group_name'
p18479
Nsa(dp18480
S'description'
p18481
S'End point for axis of symmetry for the 3d model\n'
p18482
sS'cpp_type'
p18483
S'libMesh::VectorValue<double>'
p18484
sS'default'
p18485
S'0 1 0'
p18486
sS'name'
p18487
S'3d_axis_point2'
p18488
sS'required'
p18489
I00
sS'group_name'
p18490
Nsa(dp18491
S'description'
p18492
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p18493
sS'cpp_type'
p18494
S'double'
p18495
sS'default'
p18496
S'0'
p18497
sS'name'
p18498
S'add_factor'
p18499
sS'required'
p18500
I00
sS'group_name'
p18501
Nsa(dp18502
S'description'
p18503
S'Ratio of the axial dimension in the 3d model to that in the 2d model. Optinally permits the 3d model to be larger than the 2d model in that dimension, and scales vector solutions in that direction by this factor.\n'
p18504
sS'cpp_type'
p18505
S'double'
p18506
sS'default'
p18507
S'1'
p18508
sS'name'
p18509
S'axial_dimension_ratio'
p18510
sS'required'
p18511
I00
sS'group_name'
p18512
Nsa(dp18513
S'description'
p18514
S'Component of the variable to be computed if it is a vector\n'
p18515
sS'cpp_type'
p18516
S'unsigned int'
p18517
sS'default'
p18518
g3
sS'name'
p18519
S'component'
p18520
sS'required'
p18521
I00
sS'group_name'
p18522
Nsa(dp18523
S'description'
p18524
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18525
sS'cpp_type'
p18526
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18527
sS'default'
p18528
g3
sS'name'
p18529
S'control_tags'
p18530
sS'required'
p18531
I00
sS'group_name'
p18532
S'Advanced'
p18533
sa(dp18534
S'description'
p18535
S'Set the enabled status of the MooseObject.\n'
p18536
sS'cpp_type'
p18537
S'bool'
p18538
sS'default'
p18539
S'1'
p18540
sS'name'
p18541
S'enable'
p18542
sS'required'
p18543
I00
sS'group_name'
p18544
S'Advanced'
p18545
sa(dp18546
S'description'
p18547
S'The names of the variables in the file that are to be extracted, in x, y order if they are vector components\n'
p18548
sS'cpp_type'
p18549
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18550
sS'default'
p18551
g3
sS'name'
p18552
S'from_variables'
p18553
sS'required'
p18554
I00
sS'group_name'
p18555
Nsa(dp18556
S'description'
p18557
S"Scale factor (a) to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p18558
sS'cpp_type'
p18559
S'double'
p18560
sS'default'
p18561
S'1'
p18562
sS'name'
p18563
S'scale_factor'
p18564
sS'required'
p18565
I00
sS'group_name'
p18566
Nsa(dp18567
S'description'
p18568
S'The SolutionUserObject to extract data from.\n'
p18569
sS'cpp_type'
p18570
S'UserObjectName'
p18571
sS'default'
p18572
g3
sS'name'
p18573
S'solution'
p18574
sS'required'
p18575
I01
sS'group_name'
p18576
Nsa(dp18577
S'description'
p18578
g3
sS'cpp_type'
p18579
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18580
sS'default'
p18581
S'Axisymmetric2D3DSolutionFunction'
p18582
sS'name'
p18583
S'type'
p18584
sS'required'
p18585
I00
sS'group_name'
p18586
NsasS'name'
p18587
S'/Functions/Axisymmetric2D3DSolutionFunction'
p18588
sa(dp18589
S'description'
p18590
g3
sS'subblocks'
p18591
NsS'parameters'
p18592
(lp18593
(dp18594
S'description'
p18595
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18596
sS'cpp_type'
p18597
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18598
sS'default'
p18599
g3
sS'name'
p18600
S'control_tags'
p18601
sS'required'
p18602
I00
sS'group_name'
p18603
S'Advanced'
p18604
sa(dp18605
S'description'
p18606
S'Set the enabled status of the MooseObject.\n'
p18607
sS'cpp_type'
p18608
S'bool'
p18609
sS'default'
p18610
S'1'
p18611
sS'name'
p18612
S'enable'
p18613
sS'required'
p18614
I00
sS'group_name'
p18615
S'Advanced'
p18616
sa(dp18617
S'description'
p18618
g3
sS'cpp_type'
p18619
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18620
sS'default'
p18621
S'BicubicSplineFunction'
p18622
sS'name'
p18623
S'type'
p18624
sS'required'
p18625
I00
sS'group_name'
p18626
Nsa(dp18627
S'description'
p18628
S'The first independent coordinate.\n'
p18629
sS'cpp_type'
p18630
S'std::__1::vector<double, std::__1::allocator<double> >'
p18631
sS'default'
p18632
g3
sS'name'
p18633
S'x1'
p18634
sS'required'
p18635
I01
sS'group_name'
p18636
Nsa(dp18637
S'description'
p18638
S'The second independent coordinate.\n'
p18639
sS'cpp_type'
p18640
S'std::__1::vector<double, std::__1::allocator<double> >'
p18641
sS'default'
p18642
g3
sS'name'
p18643
S'x2'
p18644
sS'required'
p18645
I01
sS'group_name'
p18646
Nsa(dp18647
S'description'
p18648
S'The dependent values\n'
p18649
sS'cpp_type'
p18650
S'std::__1::vector<double, std::__1::allocator<double> >'
p18651
sS'default'
p18652
g3
sS'name'
p18653
S'y'
p18654
sS'required'
p18655
I01
sS'group_name'
p18656
Nsa(dp18657
S'description'
p18658
S'The functional form of the derivative with respect to x1.\n'
p18659
sS'cpp_type'
p18660
S'FunctionName'
p18661
sS'default'
p18662
S'1e30'
p18663
sS'name'
p18664
S'yx1'
p18665
sS'required'
p18666
I00
sS'group_name'
p18667
Nsa(dp18668
S'description'
p18669
S'The values of the derivative wrt x1 on the lower interpolation grid points.\n'
p18670
sS'cpp_type'
p18671
S'std::__1::vector<double, std::__1::allocator<double> >'
p18672
sS'default'
p18673
g3
sS'name'
p18674
S'yx11'
p18675
sS'required'
p18676
I00
sS'group_name'
p18677
Nsa(dp18678
S'description'
p18679
S'The values of the derivative wrt x1 on the upper interpolation grid points.\n'
p18680
sS'cpp_type'
p18681
S'std::__1::vector<double, std::__1::allocator<double> >'
p18682
sS'default'
p18683
g3
sS'name'
p18684
S'yx1n'
p18685
sS'required'
p18686
I00
sS'group_name'
p18687
Nsa(dp18688
S'description'
p18689
S'The functional form of the derivative with respect to x2.\n'
p18690
sS'cpp_type'
p18691
S'FunctionName'
p18692
sS'default'
p18693
S'1e30'
p18694
sS'name'
p18695
S'yx2'
p18696
sS'required'
p18697
I00
sS'group_name'
p18698
Nsa(dp18699
S'description'
p18700
S'The values of the derivative wrt x2 on the lower interpolation grid points.\n'
p18701
sS'cpp_type'
p18702
S'std::__1::vector<double, std::__1::allocator<double> >'
p18703
sS'default'
p18704
g3
sS'name'
p18705
S'yx21'
p18706
sS'required'
p18707
I00
sS'group_name'
p18708
Nsa(dp18709
S'description'
p18710
S'The values of the derivative wrt x2 on the upper interpolation grid points.\n'
p18711
sS'cpp_type'
p18712
S'std::__1::vector<double, std::__1::allocator<double> >'
p18713
sS'default'
p18714
g3
sS'name'
p18715
S'yx2n'
p18716
sS'required'
p18717
I00
sS'group_name'
p18718
NsasS'name'
p18719
S'/Functions/BicubicSplineFunction'
p18720
sa(dp18721
S'description'
p18722
g3
sS'subblocks'
p18723
NsS'parameters'
p18724
(lp18725
(dp18726
S'description'
p18727
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18728
sS'cpp_type'
p18729
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18730
sS'default'
p18731
g3
sS'name'
p18732
S'control_tags'
p18733
sS'required'
p18734
I00
sS'group_name'
p18735
S'Advanced'
p18736
sa(dp18737
S'description'
p18738
S'Set the enabled status of the MooseObject.\n'
p18739
sS'cpp_type'
p18740
S'bool'
p18741
sS'default'
p18742
S'1'
p18743
sS'name'
p18744
S'enable'
p18745
sS'required'
p18746
I00
sS'group_name'
p18747
S'Advanced'
p18748
sa(dp18749
S'description'
p18750
S'The functions to be multiplied together.\n'
p18751
sS'cpp_type'
p18752
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p18753
sS'default'
p18754
g3
sS'name'
p18755
S'functions'
p18756
sS'required'
p18757
I00
sS'group_name'
p18758
Nsa(dp18759
S'description'
p18760
S'Scale factor to be applied to the ordinate values\n'
p18761
sS'cpp_type'
p18762
S'double'
p18763
sS'default'
p18764
S'1'
p18765
sS'name'
p18766
S'scale_factor'
p18767
sS'required'
p18768
I00
sS'group_name'
p18769
Nsa(dp18770
S'description'
p18771
g3
sS'cpp_type'
p18772
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18773
sS'default'
p18774
S'CompositeFunction'
p18775
sS'name'
p18776
S'type'
p18777
sS'required'
p18778
I00
sS'group_name'
p18779
NsasS'name'
p18780
S'/Functions/CompositeFunction'
p18781
sa(dp18782
S'description'
p18783
g3
sS'subblocks'
p18784
NsS'parameters'
p18785
(lp18786
(dp18787
S'description'
p18788
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18789
sS'cpp_type'
p18790
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18791
sS'default'
p18792
g3
sS'name'
p18793
S'control_tags'
p18794
sS'required'
p18795
I00
sS'group_name'
p18796
S'Advanced'
p18797
sa(dp18798
S'description'
p18799
S'Set the enabled status of the MooseObject.\n'
p18800
sS'cpp_type'
p18801
S'bool'
p18802
sS'default'
p18803
S'1'
p18804
sS'name'
p18805
S'enable'
p18806
sS'required'
p18807
I00
sS'group_name'
p18808
S'Advanced'
p18809
sa(dp18810
S'description'
p18811
g3
sS'cpp_type'
p18812
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18813
sS'default'
p18814
S'ConstantFunction'
p18815
sS'name'
p18816
S'type'
p18817
sS'required'
p18818
I00
sS'group_name'
p18819
Nsa(dp18820
S'description'
p18821
S'The constant value\n'
p18822
sS'cpp_type'
p18823
S'double'
p18824
sS'default'
p18825
S'0'
p18826
sS'name'
p18827
S'value'
p18828
sS'required'
p18829
I00
sS'group_name'
p18830
NsasS'name'
p18831
S'/Functions/ConstantFunction'
p18832
sa(dp18833
S'description'
p18834
S'Function with values sampled from a given image stack\n'
p18835
sS'subblocks'
p18836
NsS'parameters'
p18837
(lp18838
(dp18839
S'description'
p18840
S'The image RGB-component to return, leaving this blank will result in a greyscale value for the image to be created. The component number is zero based, i.e. 0 returns the first (RED) component of the image.\n'
p18841
sS'cpp_type'
p18842
S'unsigned int'
p18843
sS'default'
p18844
g3
sS'name'
p18845
S'component'
p18846
sS'required'
p18847
I00
sS'group_name'
p18848
Nsa(dp18849
S'description'
p18850
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18851
sS'cpp_type'
p18852
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18853
sS'default'
p18854
g3
sS'name'
p18855
S'control_tags'
p18856
sS'required'
p18857
I00
sS'group_name'
p18858
S'Advanced'
p18859
sa(dp18860
S'description'
p18861
S'x,y,z dimensions of the image (defaults to mesh dimensions)\n'
p18862
sS'cpp_type'
p18863
S'libMesh::Point'
p18864
sS'default'
p18865
g3
sS'name'
p18866
S'dimensions'
p18867
sS'required'
p18868
I00
sS'group_name'
p18869
Nsa(dp18870
S'description'
p18871
S'Set the enabled status of the MooseObject.\n'
p18872
sS'cpp_type'
p18873
S'bool'
p18874
sS'default'
p18875
S'1'
p18876
sS'name'
p18877
S'enable'
p18878
sS'required'
p18879
I00
sS'group_name'
p18880
S'Advanced'
p18881
sa(dp18882
S'description'
p18883
S'Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n'
p18884
sS'cpp_type'
p18885
S'FileName'
p18886
sS'default'
p18887
g3
sS'name'
p18888
S'file'
p18889
sS'required'
p18890
I00
sS'group_name'
p18891
Nsa(dp18892
S'description'
p18893
S"Image file base to open, use this option when a stack of images must be read (ignored if 'file' is given)\n"
p18894
sS'cpp_type'
p18895
S'FileNameNoExtension'
p18896
sS'default'
p18897
g3
sS'name'
p18898
S'file_base'
p18899
sS'required'
p18900
I00
sS'group_name'
p18901
Nsa(dp18902
S'description'
p18903
S"Range of images to analyze, used with 'file_base' (ignored if 'file' is given)\n"
p18904
sS'cpp_type'
p18905
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p18906
sS'default'
p18907
g3
sS'name'
p18908
S'file_range'
p18909
sS'required'
p18910
I00
sS'group_name'
p18911
Nsa(dp18912
S'description'
p18913
S"Suffix of the file to open, e.g. 'png'\n"
p18914
sS'cpp_type'
p18915
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18916
sS'default'
p18917
g3
sS'name'
p18918
S'file_suffix'
p18919
sS'required'
p18920
I00
sS'group_name'
p18921
Nsa(dp18922
S'description'
p18923
S'Flip the image along the x-axis\n'
p18924
sS'cpp_type'
p18925
S'bool'
p18926
sS'default'
p18927
S'0'
p18928
sS'name'
p18929
S'flip_x'
p18930
sS'required'
p18931
I00
sS'group_name'
p18932
S'Flip'
p18933
sa(dp18934
S'description'
p18935
S'Flip the image along the y-axis\n'
p18936
sS'cpp_type'
p18937
S'bool'
p18938
sS'default'
p18939
S'0'
p18940
sS'name'
p18941
S'flip_y'
p18942
sS'required'
p18943
I00
sS'group_name'
p18944
S'Flip'
p18945
sa(dp18946
S'description'
p18947
S'Flip the image along the z-axis\n'
p18948
sS'cpp_type'
p18949
S'bool'
p18950
sS'default'
p18951
S'0'
p18952
sS'name'
p18953
S'flip_z'
p18954
sS'required'
p18955
I00
sS'group_name'
p18956
S'Flip'
p18957
sa(dp18958
S'description'
p18959
S'The value to set for data less than the threshold value\n'
p18960
sS'cpp_type'
p18961
S'double'
p18962
sS'default'
p18963
S'0'
p18964
sS'name'
p18965
S'lower_value'
p18966
sS'required'
p18967
I00
sS'group_name'
p18968
S'Threshold'
p18969
sa(dp18970
S'description'
p18971
S'Origin of the image (defaults to mesh origin)\n'
p18972
sS'cpp_type'
p18973
S'libMesh::Point'
p18974
sS'default'
p18975
g3
sS'name'
p18976
S'origin'
p18977
sS'required'
p18978
I00
sS'group_name'
p18979
Nsa(dp18980
S'description'
p18981
S'Multiplier to apply to all pixel values; occurs after shifting\n'
p18982
sS'cpp_type'
p18983
S'double'
p18984
sS'default'
p18985
S'1'
p18986
sS'name'
p18987
S'scale'
p18988
sS'required'
p18989
I00
sS'group_name'
p18990
S'Rescale'
p18991
sa(dp18992
S'description'
p18993
S'Value to add to all pixels; occurs prior to scaling\n'
p18994
sS'cpp_type'
p18995
S'double'
p18996
sS'default'
p18997
S'0'
p18998
sS'name'
p18999
S'shift'
p19000
sS'required'
p19001
I00
sS'group_name'
p19002
S'Rescale'
p19003
sa(dp19004
S'description'
p19005
S'The threshold value\n'
p19006
sS'cpp_type'
p19007
S'double'
p19008
sS'default'
p19009
g3
sS'name'
p19010
S'threshold'
p19011
sS'required'
p19012
I00
sS'group_name'
p19013
S'Threshold'
p19014
sa(dp19015
S'description'
p19016
g3
sS'cpp_type'
p19017
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19018
sS'default'
p19019
S'ImageFunction'
p19020
sS'name'
p19021
S'type'
p19022
sS'required'
p19023
I00
sS'group_name'
p19024
Nsa(dp19025
S'description'
p19026
S'The value to set for data greater than the threshold value\n'
p19027
sS'cpp_type'
p19028
S'double'
p19029
sS'default'
p19030
S'1'
p19031
sS'name'
p19032
S'upper_value'
p19033
sS'required'
p19034
I00
sS'group_name'
p19035
S'Threshold'
p19036
sasS'name'
p19037
S'/Functions/ImageFunction'
p19038
sa(dp19039
S'description'
p19040
S'Returns the linear combination of the functions\n'
p19041
sS'subblocks'
p19042
NsS'parameters'
p19043
(lp19044
(dp19045
S'description'
p19046
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19047
sS'cpp_type'
p19048
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19049
sS'default'
p19050
g3
sS'name'
p19051
S'control_tags'
p19052
sS'required'
p19053
I00
sS'group_name'
p19054
S'Advanced'
p19055
sa(dp19056
S'description'
p19057
S'Set the enabled status of the MooseObject.\n'
p19058
sS'cpp_type'
p19059
S'bool'
p19060
sS'default'
p19061
S'1'
p19062
sS'name'
p19063
S'enable'
p19064
sS'required'
p19065
I00
sS'group_name'
p19066
S'Advanced'
p19067
sa(dp19068
S'description'
p19069
S'This function will return Sum_over_i(w_i * functions_i)\n'
p19070
sS'cpp_type'
p19071
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p19072
sS'default'
p19073
g3
sS'name'
p19074
S'functions'
p19075
sS'required'
p19076
I01
sS'group_name'
p19077
Nsa(dp19078
S'description'
p19079
g3
sS'cpp_type'
p19080
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19081
sS'default'
p19082
S'LinearCombinationFunction'
p19083
sS'name'
p19084
S'type'
p19085
sS'required'
p19086
I00
sS'group_name'
p19087
Nsa(dp19088
S'description'
p19089
S'This function will return Sum_over_i(w_i * functions_i)\n'
p19090
sS'cpp_type'
p19091
S'std::__1::vector<double, std::__1::allocator<double> >'
p19092
sS'default'
p19093
g3
sS'name'
p19094
S'w'
p19095
sS'required'
p19096
I01
sS'group_name'
p19097
NsasS'name'
p19098
S'/Functions/LinearCombinationFunction'
p19099
sa(dp19100
S'description'
p19101
g3
sS'subblocks'
p19102
NsS'parameters'
p19103
(lp19104
(dp19105
S'description'
p19106
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19107
sS'cpp_type'
p19108
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19109
sS'default'
p19110
g3
sS'name'
p19111
S'control_tags'
p19112
sS'required'
p19113
I00
sS'group_name'
p19114
S'Advanced'
p19115
sa(dp19116
S'description'
p19117
S'Set the enabled status of the MooseObject.\n'
p19118
sS'cpp_type'
p19119
S'bool'
p19120
sS'default'
p19121
S'1'
p19122
sS'name'
p19123
S'enable'
p19124
sS'required'
p19125
I00
sS'group_name'
p19126
S'Advanced'
p19127
sa(dp19128
S'description'
p19129
g3
sS'cpp_type'
p19130
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19131
sS'default'
p19132
S'ParsedFunction'
p19133
sS'name'
p19134
S'type'
p19135
sS'required'
p19136
I00
sS'group_name'
p19137
Nsa(dp19138
S'description'
p19139
S'Constant numeric values or postprocessor names for vars.\n'
p19140
sS'cpp_type'
p19141
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19142
sS'default'
p19143
g3
sS'name'
p19144
S'vals'
p19145
sS'required'
p19146
I00
sS'group_name'
p19147
Nsa(dp19148
S'description'
p19149
S'The user defined function.\n'
p19150
sS'cpp_type'
p19151
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19152
sS'default'
p19153
g3
sS'name'
p19154
S'value'
p19155
sS'required'
p19156
I01
sS'group_name'
p19157
Nsa(dp19158
S'description'
p19159
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p19160
sS'cpp_type'
p19161
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19162
sS'default'
p19163
g3
sS'name'
p19164
S'vars'
p19165
sS'required'
p19166
I00
sS'group_name'
p19167
NsasS'name'
p19168
S'/Functions/ParsedFunction'
p19169
sa(dp19170
S'description'
p19171
g3
sS'subblocks'
p19172
NsS'parameters'
p19173
(lp19174
(dp19175
S'description'
p19176
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19177
sS'cpp_type'
p19178
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19179
sS'default'
p19180
g3
sS'name'
p19181
S'control_tags'
p19182
sS'required'
p19183
I00
sS'group_name'
p19184
S'Advanced'
p19185
sa(dp19186
S'description'
p19187
S'Set the enabled status of the MooseObject.\n'
p19188
sS'cpp_type'
p19189
S'bool'
p19190
sS'default'
p19191
S'1'
p19192
sS'name'
p19193
S'enable'
p19194
sS'required'
p19195
I00
sS'group_name'
p19196
S'Advanced'
p19197
sa(dp19198
S'description'
p19199
S'Partial with respect to x.\n'
p19200
sS'cpp_type'
p19201
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19202
sS'default'
p19203
S'0'
p19204
sS'name'
p19205
S'grad_x'
p19206
sS'required'
p19207
I00
sS'group_name'
p19208
Nsa(dp19209
S'description'
p19210
S'Partial with respect to y.\n'
p19211
sS'cpp_type'
p19212
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19213
sS'default'
p19214
S'0'
p19215
sS'name'
p19216
S'grad_y'
p19217
sS'required'
p19218
I00
sS'group_name'
p19219
Nsa(dp19220
S'description'
p19221
S'Partial with respect to z.\n'
p19222
sS'cpp_type'
p19223
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19224
sS'default'
p19225
S'0'
p19226
sS'name'
p19227
S'grad_z'
p19228
sS'required'
p19229
I00
sS'group_name'
p19230
Nsa(dp19231
S'description'
p19232
g3
sS'cpp_type'
p19233
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19234
sS'default'
p19235
S'ParsedGradFunction'
p19236
sS'name'
p19237
S'type'
p19238
sS'required'
p19239
I00
sS'group_name'
p19240
Nsa(dp19241
S'description'
p19242
S'Constant numeric values or postprocessor names for vars.\n'
p19243
sS'cpp_type'
p19244
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19245
sS'default'
p19246
g3
sS'name'
p19247
S'vals'
p19248
sS'required'
p19249
I00
sS'group_name'
p19250
Nsa(dp19251
S'description'
p19252
S'User defined function.\n'
p19253
sS'cpp_type'
p19254
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19255
sS'default'
p19256
S'0'
p19257
sS'name'
p19258
S'value'
p19259
sS'required'
p19260
I00
sS'group_name'
p19261
Nsa(dp19262
S'description'
p19263
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p19264
sS'cpp_type'
p19265
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19266
sS'default'
p19267
g3
sS'name'
p19268
S'vars'
p19269
sS'required'
p19270
I00
sS'group_name'
p19271
NsasS'name'
p19272
S'/Functions/ParsedGradFunction'
p19273
sa(dp19274
S'description'
p19275
g3
sS'subblocks'
p19276
NsS'parameters'
p19277
(lp19278
(dp19279
S'description'
p19280
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19281
sS'cpp_type'
p19282
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19283
sS'default'
p19284
g3
sS'name'
p19285
S'control_tags'
p19286
sS'required'
p19287
I00
sS'group_name'
p19288
S'Advanced'
p19289
sa(dp19290
S'description'
p19291
S'Set the enabled status of the MooseObject.\n'
p19292
sS'cpp_type'
p19293
S'bool'
p19294
sS'default'
p19295
S'1'
p19296
sS'name'
p19297
S'enable'
p19298
sS'required'
p19299
I00
sS'group_name'
p19300
S'Advanced'
p19301
sa(dp19302
S'description'
p19303
g3
sS'cpp_type'
p19304
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19305
sS'default'
p19306
S'ParsedVectorFunction'
p19307
sS'name'
p19308
S'type'
p19309
sS'required'
p19310
I00
sS'group_name'
p19311
Nsa(dp19312
S'description'
p19313
S'Constant numeric values or postprocessor names for vars.\n'
p19314
sS'cpp_type'
p19315
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19316
sS'default'
p19317
g3
sS'name'
p19318
S'vals'
p19319
sS'required'
p19320
I00
sS'group_name'
p19321
Nsa(dp19322
S'description'
p19323
S'x-component of function.\n'
p19324
sS'cpp_type'
p19325
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19326
sS'default'
p19327
S'0'
p19328
sS'name'
p19329
S'value_x'
p19330
sS'required'
p19331
I00
sS'group_name'
p19332
Nsa(dp19333
S'description'
p19334
S'y-component of function.\n'
p19335
sS'cpp_type'
p19336
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19337
sS'default'
p19338
S'0'
p19339
sS'name'
p19340
S'value_y'
p19341
sS'required'
p19342
I00
sS'group_name'
p19343
Nsa(dp19344
S'description'
p19345
S'z-component of function.\n'
p19346
sS'cpp_type'
p19347
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19348
sS'default'
p19349
S'0'
p19350
sS'name'
p19351
S'value_z'
p19352
sS'required'
p19353
I00
sS'group_name'
p19354
Nsa(dp19355
S'description'
p19356
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p19357
sS'cpp_type'
p19358
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19359
sS'default'
p19360
g3
sS'name'
p19361
S'vars'
p19362
sS'required'
p19363
I00
sS'group_name'
p19364
NsasS'name'
p19365
S'/Functions/ParsedVectorFunction'
p19366
sa(dp19367
S'description'
p19368
g3
sS'subblocks'
p19369
NsS'parameters'
p19370
(lp19371
(dp19372
S'description'
p19373
S'The axis used (0, 1, or 2 for x, y, or z).\n'
p19374
sS'cpp_type'
p19375
S'int'
p19376
sS'default'
p19377
S'-1'
p19378
sS'name'
p19379
S'axis'
p19380
sS'required'
p19381
I00
sS'group_name'
p19382
Nsa(dp19383
S'description'
p19384
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19385
sS'cpp_type'
p19386
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19387
sS'default'
p19388
g3
sS'name'
p19389
S'control_tags'
p19390
sS'required'
p19391
I00
sS'group_name'
p19392
S'Advanced'
p19393
sa(dp19394
S'description'
p19395
S'File holding csv data for use with PiecewiseBilinear\n'
p19396
sS'cpp_type'
p19397
S'FileName'
p19398
sS'default'
p19399
g3
sS'name'
p19400
S'data_file'
p19401
sS'required'
p19402
I00
sS'group_name'
p19403
Nsa(dp19404
S'description'
p19405
S'Set the enabled status of the MooseObject.\n'
p19406
sS'cpp_type'
p19407
S'bool'
p19408
sS'default'
p19409
S'1'
p19410
sS'name'
p19411
S'enable'
p19412
sS'required'
p19413
I00
sS'group_name'
p19414
S'Advanced'
p19415
sa(dp19416
S'description'
p19417
S'Set to true if you want to interpolate along a radius rather that along a specific axis, and note that you have to define xaxis and yaxis in the input file\n'
p19418
sS'cpp_type'
p19419
S'bool'
p19420
sS'default'
p19421
S'0'
p19422
sS'name'
p19423
S'radial'
p19424
sS'required'
p19425
I00
sS'group_name'
p19426
Nsa(dp19427
S'description'
p19428
S'Scale factor to be applied to the axis, yaxis, or xaxis values\n'
p19429
sS'cpp_type'
p19430
S'double'
p19431
sS'default'
p19432
S'1'
p19433
sS'name'
p19434
S'scale_factor'
p19435
sS'required'
p19436
I00
sS'group_name'
p19437
Nsa(dp19438
S'description'
p19439
g3
sS'cpp_type'
p19440
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19441
sS'default'
p19442
S'PiecewiseBilinear'
p19443
sS'name'
p19444
S'type'
p19445
sS'required'
p19446
I00
sS'group_name'
p19447
Nsa(dp19448
S'description'
p19449
S'The x abscissa values\n'
p19450
sS'cpp_type'
p19451
S'std::__1::vector<double, std::__1::allocator<double> >'
p19452
sS'default'
p19453
g3
sS'name'
p19454
S'x'
p19455
sS'required'
p19456
I00
sS'group_name'
p19457
Nsa(dp19458
S'description'
p19459
S'The coordinate used for x-axis data (0, 1, or 2 for x, y, or z).\n'
p19460
sS'cpp_type'
p19461
S'int'
p19462
sS'default'
p19463
S'-1'
p19464
sS'name'
p19465
S'xaxis'
p19466
sS'required'
p19467
I00
sS'group_name'
p19468
Nsa(dp19469
S'description'
p19470
S'The y abscissa values\n'
p19471
sS'cpp_type'
p19472
S'std::__1::vector<double, std::__1::allocator<double> >'
p19473
sS'default'
p19474
g3
sS'name'
p19475
S'y'
p19476
sS'required'
p19477
I00
sS'group_name'
p19478
Nsa(dp19479
S'description'
p19480
S'The coordinate used for y-axis data (0, 1, or 2 for x, y, or z).\n'
p19481
sS'cpp_type'
p19482
S'int'
p19483
sS'default'
p19484
S'-1'
p19485
sS'name'
p19486
S'yaxis'
p19487
sS'required'
p19488
I00
sS'group_name'
p19489
Nsa(dp19490
S'description'
p19491
S'The ordinate values\n'
p19492
sS'cpp_type'
p19493
S'std::__1::vector<double, std::__1::allocator<double> >'
p19494
sS'default'
p19495
g3
sS'name'
p19496
S'z'
p19497
sS'required'
p19498
I00
sS'group_name'
p19499
NsasS'name'
p19500
S'/Functions/PiecewiseBilinear'
p19501
sa(dp19502
S'description'
p19503
g3
sS'subblocks'
p19504
NsS'parameters'
p19505
(lp19506
(dp19507
S'description'
p19508
S'The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n'
p19509
sS'cpp_type'
p19510
S'int'
p19511
sS'default'
p19512
g3
sS'name'
p19513
S'axis'
p19514
sS'required'
p19515
I00
sS'group_name'
p19516
Nsa(dp19517
S'description'
p19518
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19519
sS'cpp_type'
p19520
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19521
sS'default'
p19522
g3
sS'name'
p19523
S'control_tags'
p19524
sS'required'
p19525
I00
sS'group_name'
p19526
S'Advanced'
p19527
sa(dp19528
S'description'
p19529
S'File holding csv data for use with Piecewise\n'
p19530
sS'cpp_type'
p19531
S'FileName'
p19532
sS'default'
p19533
g3
sS'name'
p19534
S'data_file'
p19535
sS'required'
p19536
I00
sS'group_name'
p19537
Nsa(dp19538
S'name'
p19539
S'direction'
p19540
sS'cpp_type'
p19541
S'MooseEnum'
p19542
sS'default'
p19543
S'left'
p19544
sS'description'
p19545
S'Direction to look to find value: left right\n'
p19546
sS'required'
p19547
I00
sS'options'
p19548
S'left right'
p19549
sS'group_name'
p19550
Nsa(dp19551
S'description'
p19552
S'Set the enabled status of the MooseObject.\n'
p19553
sS'cpp_type'
p19554
S'bool'
p19555
sS'default'
p19556
S'1'
p19557
sS'name'
p19558
S'enable'
p19559
sS'required'
p19560
I00
sS'group_name'
p19561
S'Advanced'
p19562
sa(dp19563
S'description'
p19564
S'Format of csv data file that is in either in columns or rows\n'
p19565
sS'cpp_type'
p19566
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19567
sS'default'
p19568
S'rows'
p19569
sS'name'
p19570
S'format'
p19571
sS'required'
p19572
I00
sS'group_name'
p19573
Nsa(dp19574
S'description'
p19575
S'Scale factor to be applied to the ordinate values\n'
p19576
sS'cpp_type'
p19577
S'double'
p19578
sS'default'
p19579
S'1'
p19580
sS'name'
p19581
S'scale_factor'
p19582
sS'required'
p19583
I00
sS'group_name'
p19584
Nsa(dp19585
S'description'
p19586
g3
sS'cpp_type'
p19587
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19588
sS'default'
p19589
S'PiecewiseConstant'
p19590
sS'name'
p19591
S'type'
p19592
sS'required'
p19593
I00
sS'group_name'
p19594
Nsa(dp19595
S'description'
p19596
S'The abscissa values\n'
p19597
sS'cpp_type'
p19598
S'std::__1::vector<double, std::__1::allocator<double> >'
p19599
sS'default'
p19600
g3
sS'name'
p19601
S'x'
p19602
sS'required'
p19603
I00
sS'group_name'
p19604
Nsa(dp19605
S'description'
p19606
S'The abscissa index in the data file\n'
p19607
sS'cpp_type'
p19608
S'unsigned int'
p19609
sS'default'
p19610
S'0'
p19611
sS'name'
p19612
S'x_index_in_file'
p19613
sS'required'
p19614
I00
sS'group_name'
p19615
Nsa(dp19616
S'description'
p19617
S'All function data, supplied in abscissa, ordinate pairs\n'
p19618
sS'cpp_type'
p19619
S'std::__1::vector<double, std::__1::allocator<double> >'
p19620
sS'default'
p19621
g3
sS'name'
p19622
S'xy_data'
p19623
sS'required'
p19624
I00
sS'group_name'
p19625
Nsa(dp19626
S'description'
p19627
S'If the data file only contains abscissa and ordinate data\n'
p19628
sS'cpp_type'
p19629
S'bool'
p19630
sS'default'
p19631
S'1'
p19632
sS'name'
p19633
S'xy_in_file_only'
p19634
sS'required'
p19635
I00
sS'group_name'
p19636
Nsa(dp19637
S'description'
p19638
S'The ordinate values\n'
p19639
sS'cpp_type'
p19640
S'std::__1::vector<double, std::__1::allocator<double> >'
p19641
sS'default'
p19642
g3
sS'name'
p19643
S'y'
p19644
sS'required'
p19645
I00
sS'group_name'
p19646
Nsa(dp19647
S'description'
p19648
S'The ordinate index in the data file\n'
p19649
sS'cpp_type'
p19650
S'unsigned int'
p19651
sS'default'
p19652
S'1'
p19653
sS'name'
p19654
S'y_index_in_file'
p19655
sS'required'
p19656
I00
sS'group_name'
p19657
NsasS'name'
p19658
S'/Functions/PiecewiseConstant'
p19659
sa(dp19660
S'description'
p19661
g3
sS'subblocks'
p19662
NsS'parameters'
p19663
(lp19664
(dp19665
S'description'
p19666
S'The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n'
p19667
sS'cpp_type'
p19668
S'int'
p19669
sS'default'
p19670
g3
sS'name'
p19671
S'axis'
p19672
sS'required'
p19673
I00
sS'group_name'
p19674
Nsa(dp19675
S'description'
p19676
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19677
sS'cpp_type'
p19678
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19679
sS'default'
p19680
g3
sS'name'
p19681
S'control_tags'
p19682
sS'required'
p19683
I00
sS'group_name'
p19684
S'Advanced'
p19685
sa(dp19686
S'description'
p19687
S'File holding csv data for use with Piecewise\n'
p19688
sS'cpp_type'
p19689
S'FileName'
p19690
sS'default'
p19691
g3
sS'name'
p19692
S'data_file'
p19693
sS'required'
p19694
I00
sS'group_name'
p19695
Nsa(dp19696
S'description'
p19697
S'Set the enabled status of the MooseObject.\n'
p19698
sS'cpp_type'
p19699
S'bool'
p19700
sS'default'
p19701
S'1'
p19702
sS'name'
p19703
S'enable'
p19704
sS'required'
p19705
I00
sS'group_name'
p19706
S'Advanced'
p19707
sa(dp19708
S'description'
p19709
S'Format of csv data file that is in either in columns or rows\n'
p19710
sS'cpp_type'
p19711
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19712
sS'default'
p19713
S'rows'
p19714
sS'name'
p19715
S'format'
p19716
sS'required'
p19717
I00
sS'group_name'
p19718
Nsa(dp19719
S'description'
p19720
S'Scale factor to be applied to the ordinate values\n'
p19721
sS'cpp_type'
p19722
S'double'
p19723
sS'default'
p19724
S'1'
p19725
sS'name'
p19726
S'scale_factor'
p19727
sS'required'
p19728
I00
sS'group_name'
p19729
Nsa(dp19730
S'description'
p19731
g3
sS'cpp_type'
p19732
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19733
sS'default'
p19734
S'PiecewiseLinear'
p19735
sS'name'
p19736
S'type'
p19737
sS'required'
p19738
I00
sS'group_name'
p19739
Nsa(dp19740
S'description'
p19741
S'The abscissa values\n'
p19742
sS'cpp_type'
p19743
S'std::__1::vector<double, std::__1::allocator<double> >'
p19744
sS'default'
p19745
g3
sS'name'
p19746
S'x'
p19747
sS'required'
p19748
I00
sS'group_name'
p19749
Nsa(dp19750
S'description'
p19751
S'The abscissa index in the data file\n'
p19752
sS'cpp_type'
p19753
S'unsigned int'
p19754
sS'default'
p19755
S'0'
p19756
sS'name'
p19757
S'x_index_in_file'
p19758
sS'required'
p19759
I00
sS'group_name'
p19760
Nsa(dp19761
S'description'
p19762
S'All function data, supplied in abscissa, ordinate pairs\n'
p19763
sS'cpp_type'
p19764
S'std::__1::vector<double, std::__1::allocator<double> >'
p19765
sS'default'
p19766
g3
sS'name'
p19767
S'xy_data'
p19768
sS'required'
p19769
I00
sS'group_name'
p19770
Nsa(dp19771
S'description'
p19772
S'If the data file only contains abscissa and ordinate data\n'
p19773
sS'cpp_type'
p19774
S'bool'
p19775
sS'default'
p19776
S'1'
p19777
sS'name'
p19778
S'xy_in_file_only'
p19779
sS'required'
p19780
I00
sS'group_name'
p19781
Nsa(dp19782
S'description'
p19783
S'The ordinate values\n'
p19784
sS'cpp_type'
p19785
S'std::__1::vector<double, std::__1::allocator<double> >'
p19786
sS'default'
p19787
g3
sS'name'
p19788
S'y'
p19789
sS'required'
p19790
I00
sS'group_name'
p19791
Nsa(dp19792
S'description'
p19793
S'The ordinate index in the data file\n'
p19794
sS'cpp_type'
p19795
S'unsigned int'
p19796
sS'default'
p19797
S'1'
p19798
sS'name'
p19799
S'y_index_in_file'
p19800
sS'required'
p19801
I00
sS'group_name'
p19802
NsasS'name'
p19803
S'/Functions/PiecewiseLinear'
p19804
sa(dp19805
S'description'
p19806
S'PiecewiseMultilinear performs interpolation on 1D, 2D, 3D or 4D data.  The data_file specifies the axes directions and the function values.  If a point lies outside the data range, the appropriate end value is used.\n'
p19807
sS'subblocks'
p19808
NsS'parameters'
p19809
(lp19810
(dp19811
S'description'
p19812
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19813
sS'cpp_type'
p19814
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19815
sS'default'
p19816
g3
sS'name'
p19817
S'control_tags'
p19818
sS'required'
p19819
I00
sS'group_name'
p19820
S'Advanced'
p19821
sa(dp19822
S'description'
p19823
S'File holding data for use with PiecewiseMultilinear.  Format: any empty line and any line beginning with # are ignored, all other lines are assumed to contain relevant information.  The file must begin with specification of the grid.  This is done through lines containing the keywords: AXIS X; AXIS Y; AXIS Z; or AXIS T.  Immediately following the keyword line must be a space-separated line of real numbers which define the grid along the specified axis.  These data must be monotonically increasing.  After all the axes and their grids have been specified, there must be a line that is DATA.  Following that line, function values are given in the correct order (they may be on indivicual lines, or be space-separated on a number of lines).  When the function is evaluated, f[i,j,k,l] corresponds to the i + j*Ni + k*Ni*Nj + l*Ni*Nj*Nk data value.  Here i>=0 corresponding to the index along the first AXIS, j>=0 corresponding to the index along the second AXIS, etc, and Ni = number of grid points along the first AXIS, etc.\n'
p19824
sS'cpp_type'
p19825
S'FileName'
p19826
sS'default'
p19827
g3
sS'name'
p19828
S'data_file'
p19829
sS'required'
p19830
I00
sS'group_name'
p19831
Nsa(dp19832
S'description'
p19833
S'Set the enabled status of the MooseObject.\n'
p19834
sS'cpp_type'
p19835
S'bool'
p19836
sS'default'
p19837
S'1'
p19838
sS'name'
p19839
S'enable'
p19840
sS'required'
p19841
I00
sS'group_name'
p19842
S'Advanced'
p19843
sa(dp19844
S'description'
p19845
g3
sS'cpp_type'
p19846
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19847
sS'default'
p19848
S'PiecewiseMultilinear'
p19849
sS'name'
p19850
S'type'
p19851
sS'required'
p19852
I00
sS'group_name'
p19853
NsasS'name'
p19854
S'/Functions/PiecewiseMultilinear'
p19855
sa(dp19856
S'description'
p19857
g3
sS'subblocks'
p19858
NsS'parameters'
p19859
(lp19860
(dp19861
S'description'
p19862
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p19863
sS'cpp_type'
p19864
S'double'
p19865
sS'default'
p19866
S'0'
p19867
sS'name'
p19868
S'add_factor'
p19869
sS'required'
p19870
I00
sS'group_name'
p19871
Nsa(dp19872
S'description'
p19873
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19874
sS'cpp_type'
p19875
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19876
sS'default'
p19877
g3
sS'name'
p19878
S'control_tags'
p19879
sS'required'
p19880
I00
sS'group_name'
p19881
S'Advanced'
p19882
sa(dp19883
S'description'
p19884
S'Set the enabled status of the MooseObject.\n'
p19885
sS'cpp_type'
p19886
S'bool'
p19887
sS'default'
p19888
S'1'
p19889
sS'name'
p19890
S'enable'
p19891
sS'required'
p19892
I00
sS'group_name'
p19893
S'Advanced'
p19894
sa(dp19895
S'description'
p19896
S'The name of the variable in the file that is to be extracted\n'
p19897
sS'cpp_type'
p19898
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19899
sS'default'
p19900
g3
sS'name'
p19901
S'from_variable'
p19902
sS'required'
p19903
I00
sS'group_name'
p19904
Nsa(dp19905
S'description'
p19906
S"Scale factor (a) to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p19907
sS'cpp_type'
p19908
S'double'
p19909
sS'default'
p19910
S'1'
p19911
sS'name'
p19912
S'scale_factor'
p19913
sS'required'
p19914
I00
sS'group_name'
p19915
Nsa(dp19916
S'description'
p19917
S'The SolutionUserObject to extract data from.\n'
p19918
sS'cpp_type'
p19919
S'UserObjectName'
p19920
sS'default'
p19921
g3
sS'name'
p19922
S'solution'
p19923
sS'required'
p19924
I01
sS'group_name'
p19925
Nsa(dp19926
S'description'
p19927
g3
sS'cpp_type'
p19928
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19929
sS'default'
p19930
S'SolutionFunction'
p19931
sS'name'
p19932
S'type'
p19933
sS'required'
p19934
I00
sS'group_name'
p19935
NsasS'name'
p19936
S'/Functions/SolutionFunction'
p19937
sa(dp19938
S'description'
p19939
g3
sS'subblocks'
p19940
NsS'parameters'
p19941
(lp19942
(dp19943
S'description'
p19944
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19945
sS'cpp_type'
p19946
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19947
sS'default'
p19948
g3
sS'name'
p19949
S'control_tags'
p19950
sS'required'
p19951
I00
sS'group_name'
p19952
S'Advanced'
p19953
sa(dp19954
S'description'
p19955
S'Set the enabled status of the MooseObject.\n'
p19956
sS'cpp_type'
p19957
S'bool'
p19958
sS'default'
p19959
S'1'
p19960
sS'name'
p19961
S'enable'
p19962
sS'required'
p19963
I00
sS'group_name'
p19964
S'Advanced'
p19965
sa(dp19966
S'description'
p19967
g3
sS'cpp_type'
p19968
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19969
sS'default'
p19970
S'SplineFunction'
p19971
sS'name'
p19972
S'type'
p19973
sS'required'
p19974
I00
sS'group_name'
p19975
Nsa(dp19976
S'description'
p19977
S'The abscissa values\n'
p19978
sS'cpp_type'
p19979
S'std::__1::vector<double, std::__1::allocator<double> >'
p19980
sS'default'
p19981
g3
sS'name'
p19982
S'x'
p19983
sS'required'
p19984
I01
sS'group_name'
p19985
Nsa(dp19986
S'description'
p19987
S'The ordinate values\n'
p19988
sS'cpp_type'
p19989
S'std::__1::vector<double, std::__1::allocator<double> >'
p19990
sS'default'
p19991
g3
sS'name'
p19992
S'y'
p19993
sS'required'
p19994
I01
sS'group_name'
p19995
Nsa(dp19996
S'description'
p19997
S'The value of the first derivative of the interpolating function at point 1\n'
p19998
sS'cpp_type'
p19999
S'double'
p20000
sS'default'
p20001
S'1e+30'
p20002
sS'name'
p20003
S'yp1'
p20004
sS'required'
p20005
I00
sS'group_name'
p20006
Nsa(dp20007
S'description'
p20008
S'The value of the first derivative of the interpolating function at point n\n'
p20009
sS'cpp_type'
p20010
S'double'
p20011
sS'default'
p20012
S'1e+30'
p20013
sS'name'
p20014
S'ypn'
p20015
sS'required'
p20016
I00
sS'group_name'
p20017
NsasS'name'
p20018
S'/Functions/SplineFunction'
p20019
sasS'parameters'
p20020
NsS'name'
p20021
S'/Functions'
p20022
sa(dp20023
S'description'
p20024
g3
sS'subblocks'
p20025
NsS'parameters'
p20026
NsS'name'
p20027
S'/GlobalParams'
p20028
sa(dp20029
S'description'
p20030
g3
sS'subblocks'
p20031
(lp20032
(dp20033
S'description'
p20034
g3
sS'subblocks'
p20035
NsS'parameters'
p20036
(lp20037
(dp20038
S'description'
p20039
S'A string representing the Moose Object that will be built by this Action\n'
p20040
sS'cpp_type'
p20041
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20042
sS'default'
p20043
g3
sS'name'
p20044
S'type'
p20045
sS'required'
p20046
I01
sS'group_name'
p20047
NsasS'name'
p20048
S'/ICs/*'
p20049
sa(dp20050
S'description'
p20051
g3
sS'subblocks'
p20052
NsS'parameters'
p20053
(lp20054
(dp20055
S'description'
p20056
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20057
sS'cpp_type'
p20058
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p20059
sS'default'
p20060
g3
sS'name'
p20061
S'block'
p20062
sS'required'
p20063
I00
sS'group_name'
p20064
Nsa(dp20065
S'description'
p20066
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20067
sS'cpp_type'
p20068
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p20069
sS'default'
p20070
g3
sS'name'
p20071
S'boundary'
p20072
sS'required'
p20073
I00
sS'group_name'
p20074
Nsa(dp20075
S'description'
p20076
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20077
sS'cpp_type'
p20078
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20079
sS'default'
p20080
g3
sS'name'
p20081
S'control_tags'
p20082
sS'required'
p20083
I00
sS'group_name'
p20084
S'Advanced'
p20085
sa(dp20086
S'description'
p20087
S'Set the enabled status of the MooseObject.\n'
p20088
sS'cpp_type'
p20089
S'bool'
p20090
sS'default'
p20091
S'1'
p20092
sS'name'
p20093
S'enable'
p20094
sS'required'
p20095
I00
sS'group_name'
p20096
S'Advanced'
p20097
sa(dp20098
S'description'
p20099
S'The value of the variable inside the box\n'
p20100
sS'cpp_type'
p20101
S'double'
p20102
sS'default'
p20103
S'0'
p20104
sS'name'
p20105
S'inside'
p20106
sS'required'
p20107
I00
sS'group_name'
p20108
Nsa(dp20109
S'description'
p20110
S'The value of the variable outside the box\n'
p20111
sS'cpp_type'
p20112
S'double'
p20113
sS'default'
p20114
S'0'
p20115
sS'name'
p20116
S'outside'
p20117
sS'required'
p20118
I00
sS'group_name'
p20119
Nsa(dp20120
S'description'
p20121
g3
sS'cpp_type'
p20122
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20123
sS'default'
p20124
S'BoundingBoxIC'
p20125
sS'name'
p20126
S'type'
p20127
sS'required'
p20128
I00
sS'group_name'
p20129
Nsa(dp20130
S'description'
p20131
S'The variable this initial condition is supposed to provide values for.\n'
p20132
sS'cpp_type'
p20133
S'VariableName'
p20134
sS'default'
p20135
g3
sS'name'
p20136
S'variable'
p20137
sS'required'
p20138
I01
sS'group_name'
p20139
Nsa(dp20140
S'description'
p20141
S'The x coordinate of the lower left-hand corner of the box\n'
p20142
sS'cpp_type'
p20143
S'double'
p20144
sS'default'
p20145
g3
sS'name'
p20146
S'x1'
p20147
sS'required'
p20148
I01
sS'group_name'
p20149
Nsa(dp20150
S'description'
p20151
S'The x coordinate of the upper right-hand corner of the box\n'
p20152
sS'cpp_type'
p20153
S'double'
p20154
sS'default'
p20155
g3
sS'name'
p20156
S'x2'
p20157
sS'required'
p20158
I01
sS'group_name'
p20159
Nsa(dp20160
S'description'
p20161
S'The y coordinate of the lower left-hand corner of the box\n'
p20162
sS'cpp_type'
p20163
S'double'
p20164
sS'default'
p20165
g3
sS'name'
p20166
S'y1'
p20167
sS'required'
p20168
I01
sS'group_name'
p20169
Nsa(dp20170
S'description'
p20171
S'The y coordinate of the upper right-hand corner of the box\n'
p20172
sS'cpp_type'
p20173
S'double'
p20174
sS'default'
p20175
g3
sS'name'
p20176
S'y2'
p20177
sS'required'
p20178
I01
sS'group_name'
p20179
Nsa(dp20180
S'description'
p20181
S'The z coordinate of the lower left-hand corner of the box\n'
p20182
sS'cpp_type'
p20183
S'double'
p20184
sS'default'
p20185
S'0'
p20186
sS'name'
p20187
S'z1'
p20188
sS'required'
p20189
I00
sS'group_name'
p20190
Nsa(dp20191
S'description'
p20192
S'The z coordinate of the upper right-hand corner of the box\n'
p20193
sS'cpp_type'
p20194
S'double'
p20195
sS'default'
p20196
S'0'
p20197
sS'name'
p20198
S'z2'
p20199
sS'required'
p20200
I00
sS'group_name'
p20201
NsasS'name'
p20202
S'/ICs/BoundingBoxIC'
p20203
sa(dp20204
S'description'
p20205
g3
sS'subblocks'
p20206
NsS'parameters'
p20207
(lp20208
(dp20209
S'description'
p20210
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20211
sS'cpp_type'
p20212
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p20213
sS'default'
p20214
g3
sS'name'
p20215
S'block'
p20216
sS'required'
p20217
I00
sS'group_name'
p20218
Nsa(dp20219
S'description'
p20220
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20221
sS'cpp_type'
p20222
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p20223
sS'default'
p20224
g3
sS'name'
p20225
S'boundary'
p20226
sS'required'
p20227
I00
sS'group_name'
p20228
Nsa(dp20229
S'description'
p20230
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20231
sS'cpp_type'
p20232
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20233
sS'default'
p20234
g3
sS'name'
p20235
S'control_tags'
p20236
sS'required'
p20237
I00
sS'group_name'
p20238
S'Advanced'
p20239
sa(dp20240
S'description'
p20241
S'Set the enabled status of the MooseObject.\n'
p20242
sS'cpp_type'
p20243
S'bool'
p20244
sS'default'
p20245
S'1'
p20246
sS'name'
p20247
S'enable'
p20248
sS'required'
p20249
I00
sS'group_name'
p20250
S'Advanced'
p20251
sa(dp20252
S'description'
p20253
g3
sS'cpp_type'
p20254
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20255
sS'default'
p20256
S'ConstantIC'
p20257
sS'name'
p20258
S'type'
p20259
sS'required'
p20260
I00
sS'group_name'
p20261
Nsa(dp20262
S'description'
p20263
S'The value to be set in IC\n'
p20264
sS'cpp_type'
p20265
S'double'
p20266
sS'default'
p20267
g3
sS'name'
p20268
S'value'
p20269
sS'required'
p20270
I01
sS'group_name'
p20271
Nsa(dp20272
S'description'
p20273
S'The variable this initial condition is supposed to provide values for.\n'
p20274
sS'cpp_type'
p20275
S'VariableName'
p20276
sS'default'
p20277
g3
sS'name'
p20278
S'variable'
p20279
sS'required'
p20280
I01
sS'group_name'
p20281
NsasS'name'
p20282
S'/ICs/ConstantIC'
p20283
sa(dp20284
S'description'
p20285
g3
sS'subblocks'
p20286
NsS'parameters'
p20287
(lp20288
(dp20289
S'description'
p20290
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20291
sS'cpp_type'
p20292
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p20293
sS'default'
p20294
g3
sS'name'
p20295
S'block'
p20296
sS'required'
p20297
I00
sS'group_name'
p20298
Nsa(dp20299
S'description'
p20300
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20301
sS'cpp_type'
p20302
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p20303
sS'default'
p20304
g3
sS'name'
p20305
S'boundary'
p20306
sS'required'
p20307
I00
sS'group_name'
p20308
Nsa(dp20309
S'description'
p20310
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20311
sS'cpp_type'
p20312
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20313
sS'default'
p20314
g3
sS'name'
p20315
S'control_tags'
p20316
sS'required'
p20317
I00
sS'group_name'
p20318
S'Advanced'
p20319
sa(dp20320
S'description'
p20321
S'Set the enabled status of the MooseObject.\n'
p20322
sS'cpp_type'
p20323
S'bool'
p20324
sS'default'
p20325
S'1'
p20326
sS'name'
p20327
S'enable'
p20328
sS'required'
p20329
I00
sS'group_name'
p20330
S'Advanced'
p20331
sa(dp20332
S'description'
p20333
S'The initial condition function.\n'
p20334
sS'cpp_type'
p20335
S'FunctionName'
p20336
sS'default'
p20337
g3
sS'name'
p20338
S'function'
p20339
sS'required'
p20340
I01
sS'group_name'
p20341
Nsa(dp20342
S'description'
p20343
g3
sS'cpp_type'
p20344
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20345
sS'default'
p20346
S'FunctionIC'
p20347
sS'name'
p20348
S'type'
p20349
sS'required'
p20350
I00
sS'group_name'
p20351
Nsa(dp20352
S'description'
p20353
S'The variable this initial condition is supposed to provide values for.\n'
p20354
sS'cpp_type'
p20355
S'VariableName'
p20356
sS'default'
p20357
g3
sS'name'
p20358
S'variable'
p20359
sS'required'
p20360
I01
sS'group_name'
p20361
NsasS'name'
p20362
S'/ICs/FunctionIC'
p20363
sa(dp20364
S'description'
p20365
g3
sS'subblocks'
p20366
NsS'parameters'
p20367
(lp20368
(dp20369
S'description'
p20370
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20371
sS'cpp_type'
p20372
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20373
sS'default'
p20374
g3
sS'name'
p20375
S'control_tags'
p20376
sS'required'
p20377
I00
sS'group_name'
p20378
S'Advanced'
p20379
sa(dp20380
S'description'
p20381
S'Set the enabled status of the MooseObject.\n'
p20382
sS'cpp_type'
p20383
S'bool'
p20384
sS'default'
p20385
S'1'
p20386
sS'name'
p20387
S'enable'
p20388
sS'required'
p20389
I00
sS'group_name'
p20390
S'Advanced'
p20391
sa(dp20392
S'description'
p20393
S'The initial condition function.\n'
p20394
sS'cpp_type'
p20395
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p20396
sS'default'
p20397
g3
sS'name'
p20398
S'function'
p20399
sS'required'
p20400
I01
sS'group_name'
p20401
Nsa(dp20402
S'description'
p20403
g3
sS'cpp_type'
p20404
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20405
sS'default'
p20406
S'FunctionScalarIC'
p20407
sS'name'
p20408
S'type'
p20409
sS'required'
p20410
I00
sS'group_name'
p20411
Nsa(dp20412
S'description'
p20413
S'The variable this initial condition is supposed to provide values for.\n'
p20414
sS'cpp_type'
p20415
S'VariableName'
p20416
sS'default'
p20417
g3
sS'name'
p20418
S'variable'
p20419
sS'required'
p20420
I00
sS'group_name'
p20421
NsasS'name'
p20422
S'/ICs/FunctionScalarIC'
p20423
sa(dp20424
S'description'
p20425
g3
sS'subblocks'
p20426
NsS'parameters'
p20427
(lp20428
(dp20429
S'description'
p20430
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20431
sS'cpp_type'
p20432
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p20433
sS'default'
p20434
g3
sS'name'
p20435
S'block'
p20436
sS'required'
p20437
I00
sS'group_name'
p20438
Nsa(dp20439
S'description'
p20440
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20441
sS'cpp_type'
p20442
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p20443
sS'default'
p20444
g3
sS'name'
p20445
S'boundary'
p20446
sS'required'
p20447
I00
sS'group_name'
p20448
Nsa(dp20449
S'description'
p20450
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20451
sS'cpp_type'
p20452
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20453
sS'default'
p20454
g3
sS'name'
p20455
S'control_tags'
p20456
sS'required'
p20457
I00
sS'group_name'
p20458
S'Advanced'
p20459
sa(dp20460
S'description'
p20461
S'Set the enabled status of the MooseObject.\n'
p20462
sS'cpp_type'
p20463
S'bool'
p20464
sS'default'
p20465
S'1'
p20466
sS'name'
p20467
S'enable'
p20468
sS'required'
p20469
I00
sS'group_name'
p20470
S'Advanced'
p20471
sa(dp20472
S'description'
p20473
S'Upper bound of the randomly generated values\n'
p20474
sS'cpp_type'
p20475
S'double'
p20476
sS'default'
p20477
S'1'
p20478
sS'name'
p20479
S'max'
p20480
sS'required'
p20481
I00
sS'group_name'
p20482
Nsa(dp20483
S'description'
p20484
S'Lower bound of the randomly generated values\n'
p20485
sS'cpp_type'
p20486
S'double'
p20487
sS'default'
p20488
S'0'
p20489
sS'name'
p20490
S'min'
p20491
sS'required'
p20492
I00
sS'group_name'
p20493
Nsa(dp20494
S'description'
p20495
S'Seed value for the random number generator\n'
p20496
sS'cpp_type'
p20497
S'unsigned int'
p20498
sS'default'
p20499
S'0'
p20500
sS'name'
p20501
S'seed'
p20502
sS'required'
p20503
I00
sS'group_name'
p20504
Nsa(dp20505
S'description'
p20506
g3
sS'cpp_type'
p20507
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20508
sS'default'
p20509
S'RandomIC'
p20510
sS'name'
p20511
S'type'
p20512
sS'required'
p20513
I00
sS'group_name'
p20514
Nsa(dp20515
S'description'
p20516
S'The variable this initial condition is supposed to provide values for.\n'
p20517
sS'cpp_type'
p20518
S'VariableName'
p20519
sS'default'
p20520
g3
sS'name'
p20521
S'variable'
p20522
sS'required'
p20523
I01
sS'group_name'
p20524
NsasS'name'
p20525
S'/ICs/RandomIC'
p20526
sa(dp20527
S'description'
p20528
g3
sS'subblocks'
p20529
NsS'parameters'
p20530
(lp20531
(dp20532
S'description'
p20533
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20534
sS'cpp_type'
p20535
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20536
sS'default'
p20537
g3
sS'name'
p20538
S'control_tags'
p20539
sS'required'
p20540
I00
sS'group_name'
p20541
S'Advanced'
p20542
sa(dp20543
S'description'
p20544
S'Set the enabled status of the MooseObject.\n'
p20545
sS'cpp_type'
p20546
S'bool'
p20547
sS'default'
p20548
S'1'
p20549
sS'name'
p20550
S'enable'
p20551
sS'required'
p20552
I00
sS'group_name'
p20553
S'Advanced'
p20554
sa(dp20555
S'description'
p20556
g3
sS'cpp_type'
p20557
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20558
sS'default'
p20559
S'ScalarComponentIC'
p20560
sS'name'
p20561
S'type'
p20562
sS'required'
p20563
I00
sS'group_name'
p20564
Nsa(dp20565
S'description'
p20566
S'Initial values to initialize the scalar variable.\n'
p20567
sS'cpp_type'
p20568
S'std::__1::vector<double, std::__1::allocator<double> >'
p20569
sS'default'
p20570
g3
sS'name'
p20571
S'values'
p20572
sS'required'
p20573
I01
sS'group_name'
p20574
Nsa(dp20575
S'description'
p20576
S'The variable this initial condition is supposed to provide values for.\n'
p20577
sS'cpp_type'
p20578
S'VariableName'
p20579
sS'default'
p20580
g3
sS'name'
p20581
S'variable'
p20582
sS'required'
p20583
I00
sS'group_name'
p20584
NsasS'name'
p20585
S'/ICs/ScalarComponentIC'
p20586
sa(dp20587
S'description'
p20588
g3
sS'subblocks'
p20589
NsS'parameters'
p20590
(lp20591
(dp20592
S'description'
p20593
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20594
sS'cpp_type'
p20595
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20596
sS'default'
p20597
g3
sS'name'
p20598
S'control_tags'
p20599
sS'required'
p20600
I00
sS'group_name'
p20601
S'Advanced'
p20602
sa(dp20603
S'description'
p20604
S'Set the enabled status of the MooseObject.\n'
p20605
sS'cpp_type'
p20606
S'bool'
p20607
sS'default'
p20608
S'1'
p20609
sS'name'
p20610
S'enable'
p20611
sS'required'
p20612
I00
sS'group_name'
p20613
S'Advanced'
p20614
sa(dp20615
S'description'
p20616
g3
sS'cpp_type'
p20617
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20618
sS'default'
p20619
S'ScalarConstantIC'
p20620
sS'name'
p20621
S'type'
p20622
sS'required'
p20623
I00
sS'group_name'
p20624
Nsa(dp20625
S'description'
p20626
g3
sS'cpp_type'
p20627
S'double'
p20628
sS'default'
p20629
S'0'
p20630
sS'name'
p20631
S'value'
p20632
sS'required'
p20633
I00
sS'group_name'
p20634
Nsa(dp20635
S'description'
p20636
S'The variable this initial condition is supposed to provide values for.\n'
p20637
sS'cpp_type'
p20638
S'VariableName'
p20639
sS'default'
p20640
g3
sS'name'
p20641
S'variable'
p20642
sS'required'
p20643
I00
sS'group_name'
p20644
NsasS'name'
p20645
S'/ICs/ScalarConstantIC'
p20646
sasS'parameters'
p20647
NsS'name'
p20648
S'/ICs'
p20649
sa(dp20650
S'description'
p20651
g3
sS'subblocks'
p20652
(lp20653
(dp20654
S'description'
p20655
g3
sS'subblocks'
p20656
NsS'parameters'
p20657
(lp20658
(dp20659
S'description'
p20660
S'A string representing the Moose Object that will be built by this Action\n'
p20661
sS'cpp_type'
p20662
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20663
sS'default'
p20664
g3
sS'name'
p20665
S'type'
p20666
sS'required'
p20667
I01
sS'group_name'
p20668
NsasS'name'
p20669
S'/InterfaceKernels/*'
p20670
sasS'parameters'
p20671
NsS'name'
p20672
S'/InterfaceKernels'
p20673
sa(dp20674
S'description'
p20675
g3
sS'subblocks'
p20676
(lp20677
(dp20678
S'description'
p20679
g3
sS'subblocks'
p20680
NsS'parameters'
p20681
(lp20682
(dp20683
S'description'
p20684
S'A string representing the Moose Object that will be built by this Action\n'
p20685
sS'cpp_type'
p20686
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20687
sS'default'
p20688
g3
sS'name'
p20689
S'type'
p20690
sS'required'
p20691
I01
sS'group_name'
p20692
NsasS'name'
p20693
S'/Kernels/*'
p20694
sa(dp20695
S'description'
p20696
g3
sS'subblocks'
p20697
NsS'parameters'
p20698
(lp20699
(dp20700
S'description'
p20701
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20702
sS'cpp_type'
p20703
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p20704
sS'default'
p20705
g3
sS'name'
p20706
S'block'
p20707
sS'required'
p20708
I00
sS'group_name'
p20709
Nsa(dp20710
S'description'
p20711
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20712
sS'cpp_type'
p20713
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20714
sS'default'
p20715
g3
sS'name'
p20716
S'control_tags'
p20717
sS'required'
p20718
I00
sS'group_name'
p20719
S'Advanced'
p20720
sa(dp20721
S'description'
p20722
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p20723
sS'cpp_type'
p20724
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p20725
sS'default'
p20726
g3
sS'name'
p20727
S'diag_save_in'
p20728
sS'required'
p20729
I00
sS'group_name'
p20730
S'Advanced'
p20731
sa(dp20732
S'description'
p20733
S'Whether or not this kernel will be used as an eigen kernel\n'
p20734
sS'cpp_type'
p20735
S'bool'
p20736
sS'default'
p20737
S'0'
p20738
sS'name'
p20739
S'eigen_kernel'
p20740
sS'required'
p20741
I00
sS'group_name'
p20742
Nsa(dp20743
S'description'
p20744
S'Set the enabled status of the MooseObject.\n'
p20745
sS'cpp_type'
p20746
S'bool'
p20747
sS'default'
p20748
S'1'
p20749
sS'name'
p20750
S'enable'
p20751
sS'required'
p20752
I00
sS'group_name'
p20753
S'Advanced'
p20754
sa(dp20755
S'description'
p20756
S'Determines whether this object is calculated using an implicit or explicit form\n'
p20757
sS'cpp_type'
p20758
S'bool'
p20759
sS'default'
p20760
S'1'
p20761
sS'name'
p20762
S'implicit'
p20763
sS'required'
p20764
I00
sS'group_name'
p20765
S'Advanced'
p20766
sa(dp20767
S'description'
p20768
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p20769
sS'cpp_type'
p20770
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p20771
sS'default'
p20772
g3
sS'name'
p20773
S'save_in'
p20774
sS'required'
p20775
I00
sS'group_name'
p20776
S'Advanced'
p20777
sa(dp20778
S'description'
p20779
S'The seed for the master random number generator\n'
p20780
sS'cpp_type'
p20781
S'unsigned int'
p20782
sS'default'
p20783
S'0'
p20784
sS'name'
p20785
S'seed'
p20786
sS'required'
p20787
I00
sS'group_name'
p20788
S'Advanced'
p20789
sa(dp20790
S'description'
p20791
S'The Tensor to multiply the Diffusion operator by\n'
p20792
sS'cpp_type'
p20793
S'libMesh::TensorValue<double>'
p20794
sS'default'
p20795
g3
sS'name'
p20796
S'tensor_coeff'
p20797
sS'required'
p20798
I01
sS'group_name'
p20799
Nsa(dp20800
S'description'
p20801
g3
sS'cpp_type'
p20802
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20803
sS'default'
p20804
S'AnisotropicDiffusion'
p20805
sS'name'
p20806
S'type'
p20807
sS'required'
p20808
I00
sS'group_name'
p20809
Nsa(dp20810
S'description'
p20811
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20812
sS'cpp_type'
p20813
S'bool'
p20814
sS'default'
p20815
S'0'
p20816
sS'name'
p20817
S'use_displaced_mesh'
p20818
sS'required'
p20819
I00
sS'group_name'
p20820
S'Advanced'
p20821
sa(dp20822
S'description'
p20823
S'The name of the variable that this Kernel operates on\n'
p20824
sS'cpp_type'
p20825
S'NonlinearVariableName'
p20826
sS'default'
p20827
g3
sS'name'
p20828
S'variable'
p20829
sS'required'
p20830
I01
sS'group_name'
p20831
NsasS'name'
p20832
S'/Kernels/AnisotropicDiffusion'
p20833
sa(dp20834
S'description'
p20835
g3
sS'subblocks'
p20836
NsS'parameters'
p20837
(lp20838
(dp20839
S'description'
p20840
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20841
sS'cpp_type'
p20842
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p20843
sS'default'
p20844
g3
sS'name'
p20845
S'block'
p20846
sS'required'
p20847
I00
sS'group_name'
p20848
Nsa(dp20849
S'description'
p20850
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20851
sS'cpp_type'
p20852
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20853
sS'default'
p20854
g3
sS'name'
p20855
S'control_tags'
p20856
sS'required'
p20857
I00
sS'group_name'
p20858
S'Advanced'
p20859
sa(dp20860
S'description'
p20861
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p20862
sS'cpp_type'
p20863
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p20864
sS'default'
p20865
g3
sS'name'
p20866
S'diag_save_in'
p20867
sS'required'
p20868
I00
sS'group_name'
p20869
S'Advanced'
p20870
sa(dp20871
S'description'
p20872
S'Whether or not this kernel will be used as an eigen kernel\n'
p20873
sS'cpp_type'
p20874
S'bool'
p20875
sS'default'
p20876
S'0'
p20877
sS'name'
p20878
S'eigen_kernel'
p20879
sS'required'
p20880
I00
sS'group_name'
p20881
Nsa(dp20882
S'description'
p20883
S'Set the enabled status of the MooseObject.\n'
p20884
sS'cpp_type'
p20885
S'bool'
p20886
sS'default'
p20887
S'1'
p20888
sS'name'
p20889
S'enable'
p20890
sS'required'
p20891
I00
sS'group_name'
p20892
S'Advanced'
p20893
sa(dp20894
S'description'
p20895
S'A function that describes the body force\n'
p20896
sS'cpp_type'
p20897
S'FunctionName'
p20898
sS'default'
p20899
S'1'
p20900
sS'name'
p20901
S'function'
p20902
sS'required'
p20903
I00
sS'group_name'
p20904
Nsa(dp20905
S'description'
p20906
S'Determines whether this object is calculated using an implicit or explicit form\n'
p20907
sS'cpp_type'
p20908
S'bool'
p20909
sS'default'
p20910
S'1'
p20911
sS'name'
p20912
S'implicit'
p20913
sS'required'
p20914
I00
sS'group_name'
p20915
S'Advanced'
p20916
sa(dp20917
S'description'
p20918
S'A postprocessor whose value is multiplied by the body force\n'
p20919
sS'cpp_type'
p20920
S'PostprocessorName'
p20921
sS'default'
p20922
g3
sS'name'
p20923
S'postprocessor'
p20924
sS'required'
p20925
I00
sS'group_name'
p20926
Nsa(dp20927
S'description'
p20928
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p20929
sS'cpp_type'
p20930
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p20931
sS'default'
p20932
g3
sS'name'
p20933
S'save_in'
p20934
sS'required'
p20935
I00
sS'group_name'
p20936
S'Advanced'
p20937
sa(dp20938
S'description'
p20939
S'The seed for the master random number generator\n'
p20940
sS'cpp_type'
p20941
S'unsigned int'
p20942
sS'default'
p20943
S'0'
p20944
sS'name'
p20945
S'seed'
p20946
sS'required'
p20947
I00
sS'group_name'
p20948
S'Advanced'
p20949
sa(dp20950
S'description'
p20951
g3
sS'cpp_type'
p20952
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20953
sS'default'
p20954
S'BodyForce'
p20955
sS'name'
p20956
S'type'
p20957
sS'required'
p20958
I00
sS'group_name'
p20959
Nsa(dp20960
S'description'
p20961
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20962
sS'cpp_type'
p20963
S'bool'
p20964
sS'default'
p20965
S'0'
p20966
sS'name'
p20967
S'use_displaced_mesh'
p20968
sS'required'
p20969
I00
sS'group_name'
p20970
S'Advanced'
p20971
sa(dp20972
S'description'
p20973
S'Coefficent to multiply by the body force term\n'
p20974
sS'cpp_type'
p20975
S'double'
p20976
sS'default'
p20977
S'1'
p20978
sS'name'
p20979
S'value'
p20980
sS'required'
p20981
I00
sS'group_name'
p20982
Nsa(dp20983
S'description'
p20984
S'The name of the variable that this Kernel operates on\n'
p20985
sS'cpp_type'
p20986
S'NonlinearVariableName'
p20987
sS'default'
p20988
g3
sS'name'
p20989
S'variable'
p20990
sS'required'
p20991
I01
sS'group_name'
p20992
NsasS'name'
p20993
S'/Kernels/BodyForce'
p20994
sa(dp20995
S'description'
p20996
g3
sS'subblocks'
p20997
NsS'parameters'
p20998
(lp20999
(dp21000
S'description'
p21001
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21002
sS'cpp_type'
p21003
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21004
sS'default'
p21005
g3
sS'name'
p21006
S'block'
p21007
sS'required'
p21008
I00
sS'group_name'
p21009
Nsa(dp21010
S'description'
p21011
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21012
sS'cpp_type'
p21013
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21014
sS'default'
p21015
g3
sS'name'
p21016
S'control_tags'
p21017
sS'required'
p21018
I00
sS'group_name'
p21019
S'Advanced'
p21020
sa(dp21021
S'description'
p21022
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21023
sS'cpp_type'
p21024
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21025
sS'default'
p21026
g3
sS'name'
p21027
S'diag_save_in'
p21028
sS'required'
p21029
I00
sS'group_name'
p21030
S'Advanced'
p21031
sa(dp21032
S'description'
p21033
S'Whether or not this kernel will be used as an eigen kernel\n'
p21034
sS'cpp_type'
p21035
S'bool'
p21036
sS'default'
p21037
S'0'
p21038
sS'name'
p21039
S'eigen_kernel'
p21040
sS'required'
p21041
I00
sS'group_name'
p21042
Nsa(dp21043
S'description'
p21044
S'Set the enabled status of the MooseObject.\n'
p21045
sS'cpp_type'
p21046
S'bool'
p21047
sS'default'
p21048
S'1'
p21049
sS'name'
p21050
S'enable'
p21051
sS'required'
p21052
I00
sS'group_name'
p21053
S'Advanced'
p21054
sa(dp21055
S'description'
p21056
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21057
sS'cpp_type'
p21058
S'bool'
p21059
sS'default'
p21060
S'1'
p21061
sS'name'
p21062
S'implicit'
p21063
sS'required'
p21064
I00
sS'group_name'
p21065
S'Advanced'
p21066
sa(dp21067
S'description'
p21068
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21069
sS'cpp_type'
p21070
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21071
sS'default'
p21072
g3
sS'name'
p21073
S'save_in'
p21074
sS'required'
p21075
I00
sS'group_name'
p21076
S'Advanced'
p21077
sa(dp21078
S'description'
p21079
S'The seed for the master random number generator\n'
p21080
sS'cpp_type'
p21081
S'unsigned int'
p21082
sS'default'
p21083
S'0'
p21084
sS'name'
p21085
S'seed'
p21086
sS'required'
p21087
I00
sS'group_name'
p21088
S'Advanced'
p21089
sa(dp21090
S'description'
p21091
g3
sS'cpp_type'
p21092
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21093
sS'default'
p21094
S'ConservativeAdvection'
p21095
sS'name'
p21096
S'type'
p21097
sS'required'
p21098
I00
sS'group_name'
p21099
Nsa(dp21100
S'description'
p21101
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21102
sS'cpp_type'
p21103
S'bool'
p21104
sS'default'
p21105
S'0'
p21106
sS'name'
p21107
S'use_displaced_mesh'
p21108
sS'required'
p21109
I00
sS'group_name'
p21110
S'Advanced'
p21111
sa(dp21112
S'description'
p21113
S'The name of the variable that this Kernel operates on\n'
p21114
sS'cpp_type'
p21115
S'NonlinearVariableName'
p21116
sS'default'
p21117
g3
sS'name'
p21118
S'variable'
p21119
sS'required'
p21120
I01
sS'group_name'
p21121
Nsa(dp21122
S'description'
p21123
S'Velocity vector\n'
p21124
sS'cpp_type'
p21125
S'libMesh::VectorValue<double>'
p21126
sS'default'
p21127
g3
sS'name'
p21128
S'velocity'
p21129
sS'required'
p21130
I01
sS'group_name'
p21131
NsasS'name'
p21132
S'/Kernels/ConservativeAdvection'
p21133
sa(dp21134
S'description'
p21135
g3
sS'subblocks'
p21136
NsS'parameters'
p21137
(lp21138
(dp21139
S'description'
p21140
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21141
sS'cpp_type'
p21142
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21143
sS'default'
p21144
g3
sS'name'
p21145
S'block'
p21146
sS'required'
p21147
I00
sS'group_name'
p21148
Nsa(dp21149
S'description'
p21150
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21151
sS'cpp_type'
p21152
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21153
sS'default'
p21154
g3
sS'name'
p21155
S'control_tags'
p21156
sS'required'
p21157
I00
sS'group_name'
p21158
S'Advanced'
p21159
sa(dp21160
S'description'
p21161
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21162
sS'cpp_type'
p21163
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21164
sS'default'
p21165
g3
sS'name'
p21166
S'diag_save_in'
p21167
sS'required'
p21168
I00
sS'group_name'
p21169
S'Advanced'
p21170
sa(dp21171
S'description'
p21172
S'Whether or not this kernel will be used as an eigen kernel\n'
p21173
sS'cpp_type'
p21174
S'bool'
p21175
sS'default'
p21176
S'0'
p21177
sS'name'
p21178
S'eigen_kernel'
p21179
sS'required'
p21180
I00
sS'group_name'
p21181
Nsa(dp21182
S'description'
p21183
S'Set the enabled status of the MooseObject.\n'
p21184
sS'cpp_type'
p21185
S'bool'
p21186
sS'default'
p21187
S'1'
p21188
sS'name'
p21189
S'enable'
p21190
sS'required'
p21191
I00
sS'group_name'
p21192
S'Advanced'
p21193
sa(dp21194
S'description'
p21195
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21196
sS'cpp_type'
p21197
S'bool'
p21198
sS'default'
p21199
S'1'
p21200
sS'name'
p21201
S'implicit'
p21202
sS'required'
p21203
I00
sS'group_name'
p21204
S'Advanced'
p21205
sa(dp21206
S'description'
p21207
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21208
sS'cpp_type'
p21209
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21210
sS'default'
p21211
g3
sS'name'
p21212
S'save_in'
p21213
sS'required'
p21214
I00
sS'group_name'
p21215
S'Advanced'
p21216
sa(dp21217
S'description'
p21218
S'The seed for the master random number generator\n'
p21219
sS'cpp_type'
p21220
S'unsigned int'
p21221
sS'default'
p21222
S'0'
p21223
sS'name'
p21224
S'seed'
p21225
sS'required'
p21226
I00
sS'group_name'
p21227
S'Advanced'
p21228
sa(dp21229
S'description'
p21230
g3
sS'cpp_type'
p21231
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21232
sS'default'
p21233
S'CoupledForce'
p21234
sS'name'
p21235
S'type'
p21236
sS'required'
p21237
I00
sS'group_name'
p21238
Nsa(dp21239
S'description'
p21240
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21241
sS'cpp_type'
p21242
S'bool'
p21243
sS'default'
p21244
S'0'
p21245
sS'name'
p21246
S'use_displaced_mesh'
p21247
sS'required'
p21248
I00
sS'group_name'
p21249
S'Advanced'
p21250
sa(dp21251
S'description'
p21252
S'The coupled variable which provides the force\n'
p21253
sS'cpp_type'
p21254
S'std::vector<VariableName>'
p21255
sS'default'
p21256
g3
sS'name'
p21257
S'v'
p21258
sS'required'
p21259
I01
sS'group_name'
p21260
Nsa(dp21261
S'description'
p21262
S'The name of the variable that this Kernel operates on\n'
p21263
sS'cpp_type'
p21264
S'NonlinearVariableName'
p21265
sS'default'
p21266
g3
sS'name'
p21267
S'variable'
p21268
sS'required'
p21269
I01
sS'group_name'
p21270
NsasS'name'
p21271
S'/Kernels/CoupledForce'
p21272
sa(dp21273
S'description'
p21274
S'Time derivative Kernel that acts on a coupled variable\n'
p21275
sS'subblocks'
p21276
NsS'parameters'
p21277
(lp21278
(dp21279
S'description'
p21280
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21281
sS'cpp_type'
p21282
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21283
sS'default'
p21284
g3
sS'name'
p21285
S'block'
p21286
sS'required'
p21287
I00
sS'group_name'
p21288
Nsa(dp21289
S'description'
p21290
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21291
sS'cpp_type'
p21292
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21293
sS'default'
p21294
g3
sS'name'
p21295
S'control_tags'
p21296
sS'required'
p21297
I00
sS'group_name'
p21298
S'Advanced'
p21299
sa(dp21300
S'description'
p21301
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21302
sS'cpp_type'
p21303
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21304
sS'default'
p21305
g3
sS'name'
p21306
S'diag_save_in'
p21307
sS'required'
p21308
I00
sS'group_name'
p21309
S'Advanced'
p21310
sa(dp21311
S'description'
p21312
S'Whether or not this kernel will be used as an eigen kernel\n'
p21313
sS'cpp_type'
p21314
S'bool'
p21315
sS'default'
p21316
S'0'
p21317
sS'name'
p21318
S'eigen_kernel'
p21319
sS'required'
p21320
I00
sS'group_name'
p21321
Nsa(dp21322
S'description'
p21323
S'Set the enabled status of the MooseObject.\n'
p21324
sS'cpp_type'
p21325
S'bool'
p21326
sS'default'
p21327
S'1'
p21328
sS'name'
p21329
S'enable'
p21330
sS'required'
p21331
I00
sS'group_name'
p21332
S'Advanced'
p21333
sa(dp21334
S'description'
p21335
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21336
sS'cpp_type'
p21337
S'bool'
p21338
sS'default'
p21339
S'1'
p21340
sS'name'
p21341
S'implicit'
p21342
sS'required'
p21343
I00
sS'group_name'
p21344
S'Advanced'
p21345
sa(dp21346
S'description'
p21347
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21348
sS'cpp_type'
p21349
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21350
sS'default'
p21351
g3
sS'name'
p21352
S'save_in'
p21353
sS'required'
p21354
I00
sS'group_name'
p21355
S'Advanced'
p21356
sa(dp21357
S'description'
p21358
S'The seed for the master random number generator\n'
p21359
sS'cpp_type'
p21360
S'unsigned int'
p21361
sS'default'
p21362
S'0'
p21363
sS'name'
p21364
S'seed'
p21365
sS'required'
p21366
I00
sS'group_name'
p21367
S'Advanced'
p21368
sa(dp21369
S'description'
p21370
g3
sS'cpp_type'
p21371
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21372
sS'default'
p21373
S'CoupledTimeDerivative'
p21374
sS'name'
p21375
S'type'
p21376
sS'required'
p21377
I00
sS'group_name'
p21378
Nsa(dp21379
S'description'
p21380
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21381
sS'cpp_type'
p21382
S'bool'
p21383
sS'default'
p21384
S'0'
p21385
sS'name'
p21386
S'use_displaced_mesh'
p21387
sS'required'
p21388
I00
sS'group_name'
p21389
S'Advanced'
p21390
sa(dp21391
S'description'
p21392
S'Coupled variable\n'
p21393
sS'cpp_type'
p21394
S'std::vector<VariableName>'
p21395
sS'default'
p21396
g3
sS'name'
p21397
S'v'
p21398
sS'required'
p21399
I01
sS'group_name'
p21400
Nsa(dp21401
S'description'
p21402
S'The name of the variable that this Kernel operates on\n'
p21403
sS'cpp_type'
p21404
S'NonlinearVariableName'
p21405
sS'default'
p21406
g3
sS'name'
p21407
S'variable'
p21408
sS'required'
p21409
I01
sS'group_name'
p21410
NsasS'name'
p21411
S'/Kernels/CoupledTimeDerivative'
p21412
sa(dp21413
S'description'
p21414
S'The Laplacian operator ($-\\nabla \\cdot \\nabla u$), with the weak form of $(\\nabla \\phi_i, \\nabla u_h)$.\n'
p21415
sS'subblocks'
p21416
NsS'parameters'
p21417
(lp21418
(dp21419
S'description'
p21420
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21421
sS'cpp_type'
p21422
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21423
sS'default'
p21424
g3
sS'name'
p21425
S'block'
p21426
sS'required'
p21427
I00
sS'group_name'
p21428
Nsa(dp21429
S'description'
p21430
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21431
sS'cpp_type'
p21432
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21433
sS'default'
p21434
g3
sS'name'
p21435
S'control_tags'
p21436
sS'required'
p21437
I00
sS'group_name'
p21438
S'Advanced'
p21439
sa(dp21440
S'description'
p21441
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21442
sS'cpp_type'
p21443
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21444
sS'default'
p21445
g3
sS'name'
p21446
S'diag_save_in'
p21447
sS'required'
p21448
I00
sS'group_name'
p21449
S'Advanced'
p21450
sa(dp21451
S'description'
p21452
S'Whether or not this kernel will be used as an eigen kernel\n'
p21453
sS'cpp_type'
p21454
S'bool'
p21455
sS'default'
p21456
S'0'
p21457
sS'name'
p21458
S'eigen_kernel'
p21459
sS'required'
p21460
I00
sS'group_name'
p21461
Nsa(dp21462
S'description'
p21463
S'Set the enabled status of the MooseObject.\n'
p21464
sS'cpp_type'
p21465
S'bool'
p21466
sS'default'
p21467
S'1'
p21468
sS'name'
p21469
S'enable'
p21470
sS'required'
p21471
I00
sS'group_name'
p21472
S'Advanced'
p21473
sa(dp21474
S'description'
p21475
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21476
sS'cpp_type'
p21477
S'bool'
p21478
sS'default'
p21479
S'1'
p21480
sS'name'
p21481
S'implicit'
p21482
sS'required'
p21483
I00
sS'group_name'
p21484
S'Advanced'
p21485
sa(dp21486
S'description'
p21487
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21488
sS'cpp_type'
p21489
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21490
sS'default'
p21491
g3
sS'name'
p21492
S'save_in'
p21493
sS'required'
p21494
I00
sS'group_name'
p21495
S'Advanced'
p21496
sa(dp21497
S'description'
p21498
S'The seed for the master random number generator\n'
p21499
sS'cpp_type'
p21500
S'unsigned int'
p21501
sS'default'
p21502
S'0'
p21503
sS'name'
p21504
S'seed'
p21505
sS'required'
p21506
I00
sS'group_name'
p21507
S'Advanced'
p21508
sa(dp21509
S'description'
p21510
g3
sS'cpp_type'
p21511
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21512
sS'default'
p21513
S'Diffusion'
p21514
sS'name'
p21515
S'type'
p21516
sS'required'
p21517
I00
sS'group_name'
p21518
Nsa(dp21519
S'description'
p21520
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21521
sS'cpp_type'
p21522
S'bool'
p21523
sS'default'
p21524
S'0'
p21525
sS'name'
p21526
S'use_displaced_mesh'
p21527
sS'required'
p21528
I00
sS'group_name'
p21529
S'Advanced'
p21530
sa(dp21531
S'description'
p21532
S'The name of the variable that this Kernel operates on\n'
p21533
sS'cpp_type'
p21534
S'NonlinearVariableName'
p21535
sS'default'
p21536
g3
sS'name'
p21537
S'variable'
p21538
sS'required'
p21539
I01
sS'group_name'
p21540
NsasS'name'
p21541
S'/Kernels/Diffusion'
p21542
sa(dp21543
S'description'
p21544
g3
sS'subblocks'
p21545
NsS'parameters'
p21546
(lp21547
(dp21548
S'description'
p21549
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21550
sS'cpp_type'
p21551
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21552
sS'default'
p21553
g3
sS'name'
p21554
S'block'
p21555
sS'required'
p21556
I00
sS'group_name'
p21557
Nsa(dp21558
S'description'
p21559
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21560
sS'cpp_type'
p21561
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21562
sS'default'
p21563
g3
sS'name'
p21564
S'control_tags'
p21565
sS'required'
p21566
I00
sS'group_name'
p21567
S'Advanced'
p21568
sa(dp21569
S'description'
p21570
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21571
sS'cpp_type'
p21572
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21573
sS'default'
p21574
g3
sS'name'
p21575
S'diag_save_in'
p21576
sS'required'
p21577
I00
sS'group_name'
p21578
S'Advanced'
p21579
sa(dp21580
S'description'
p21581
S'Whether or not this kernel will be used as an eigen kernel\n'
p21582
sS'cpp_type'
p21583
S'bool'
p21584
sS'default'
p21585
S'0'
p21586
sS'name'
p21587
S'eigen_kernel'
p21588
sS'required'
p21589
I00
sS'group_name'
p21590
Nsa(dp21591
S'description'
p21592
S'Set the enabled status of the MooseObject.\n'
p21593
sS'cpp_type'
p21594
S'bool'
p21595
sS'default'
p21596
S'1'
p21597
sS'name'
p21598
S'enable'
p21599
sS'required'
p21600
I00
sS'group_name'
p21601
S'Advanced'
p21602
sa(dp21603
S'description'
p21604
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21605
sS'cpp_type'
p21606
S'bool'
p21607
sS'default'
p21608
S'1'
p21609
sS'name'
p21610
S'implicit'
p21611
sS'required'
p21612
I00
sS'group_name'
p21613
S'Advanced'
p21614
sa(dp21615
S'description'
p21616
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21617
sS'cpp_type'
p21618
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21619
sS'default'
p21620
g3
sS'name'
p21621
S'save_in'
p21622
sS'required'
p21623
I00
sS'group_name'
p21624
S'Advanced'
p21625
sa(dp21626
S'description'
p21627
S'The seed for the master random number generator\n'
p21628
sS'cpp_type'
p21629
S'unsigned int'
p21630
sS'default'
p21631
S'0'
p21632
sS'name'
p21633
S'seed'
p21634
sS'required'
p21635
I00
sS'group_name'
p21636
S'Advanced'
p21637
sa(dp21638
S'description'
p21639
g3
sS'cpp_type'
p21640
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21641
sS'default'
p21642
S'ExampleConvection'
p21643
sS'name'
p21644
S'type'
p21645
sS'required'
p21646
I00
sS'group_name'
p21647
Nsa(dp21648
S'description'
p21649
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21650
sS'cpp_type'
p21651
S'bool'
p21652
sS'default'
p21653
S'0'
p21654
sS'name'
p21655
S'use_displaced_mesh'
p21656
sS'required'
p21657
I00
sS'group_name'
p21658
S'Advanced'
p21659
sa(dp21660
S'description'
p21661
S'The name of the variable that this Kernel operates on\n'
p21662
sS'cpp_type'
p21663
S'NonlinearVariableName'
p21664
sS'default'
p21665
g3
sS'name'
p21666
S'variable'
p21667
sS'required'
p21668
I01
sS'group_name'
p21669
Nsa(dp21670
S'description'
p21671
S'Velocity Vector\n'
p21672
sS'cpp_type'
p21673
S'libMesh::VectorValue<double>'
p21674
sS'default'
p21675
g3
sS'name'
p21676
S'velocity'
p21677
sS'required'
p21678
I01
sS'group_name'
p21679
NsasS'name'
p21680
S'/Kernels/ExampleConvection'
p21681
sa(dp21682
S'description'
p21683
g3
sS'subblocks'
p21684
NsS'parameters'
p21685
(lp21686
(dp21687
S'description'
p21688
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21689
sS'cpp_type'
p21690
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21691
sS'default'
p21692
g3
sS'name'
p21693
S'block'
p21694
sS'required'
p21695
I00
sS'group_name'
p21696
Nsa(dp21697
S'description'
p21698
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21699
sS'cpp_type'
p21700
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21701
sS'default'
p21702
g3
sS'name'
p21703
S'control_tags'
p21704
sS'required'
p21705
I00
sS'group_name'
p21706
S'Advanced'
p21707
sa(dp21708
S'description'
p21709
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21710
sS'cpp_type'
p21711
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21712
sS'default'
p21713
g3
sS'name'
p21714
S'diag_save_in'
p21715
sS'required'
p21716
I00
sS'group_name'
p21717
S'Advanced'
p21718
sa(dp21719
S'description'
p21720
S'Use for eigenvalue problem (true) or source problem (false)\n'
p21721
sS'cpp_type'
p21722
S'bool'
p21723
sS'default'
p21724
S'1'
p21725
sS'name'
p21726
S'eigen'
p21727
sS'required'
p21728
I00
sS'group_name'
p21729
Nsa(dp21730
S'description'
p21731
S'Whether or not this kernel will be used as an eigen kernel\n'
p21732
sS'cpp_type'
p21733
S'bool'
p21734
sS'default'
p21735
S'0'
p21736
sS'name'
p21737
S'eigen_kernel'
p21738
sS'required'
p21739
I00
sS'group_name'
p21740
Nsa(dp21741
S'description'
p21742
S'The name of the postprocessor that provides the eigenvalue.\n'
p21743
sS'cpp_type'
p21744
S'PostprocessorName'
p21745
sS'default'
p21746
S'1'
p21747
sS'name'
p21748
S'eigen_postprocessor'
p21749
sS'required'
p21750
I00
sS'group_name'
p21751
Nsa(dp21752
S'description'
p21753
S'Set the enabled status of the MooseObject.\n'
p21754
sS'cpp_type'
p21755
S'bool'
p21756
sS'default'
p21757
S'1'
p21758
sS'name'
p21759
S'enable'
p21760
sS'required'
p21761
I00
sS'group_name'
p21762
S'Advanced'
p21763
sa(dp21764
S'description'
p21765
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21766
sS'cpp_type'
p21767
S'bool'
p21768
sS'default'
p21769
S'1'
p21770
sS'name'
p21771
S'implicit'
p21772
sS'required'
p21773
I00
sS'group_name'
p21774
S'Advanced'
p21775
sa(dp21776
S'description'
p21777
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21778
sS'cpp_type'
p21779
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21780
sS'default'
p21781
g3
sS'name'
p21782
S'save_in'
p21783
sS'required'
p21784
I00
sS'group_name'
p21785
S'Advanced'
p21786
sa(dp21787
S'description'
p21788
S'The seed for the master random number generator\n'
p21789
sS'cpp_type'
p21790
S'unsigned int'
p21791
sS'default'
p21792
S'0'
p21793
sS'name'
p21794
S'seed'
p21795
sS'required'
p21796
I00
sS'group_name'
p21797
S'Advanced'
p21798
sa(dp21799
S'description'
p21800
g3
sS'cpp_type'
p21801
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21802
sS'default'
p21803
S'MassEigenKernel'
p21804
sS'name'
p21805
S'type'
p21806
sS'required'
p21807
I00
sS'group_name'
p21808
Nsa(dp21809
S'description'
p21810
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21811
sS'cpp_type'
p21812
S'bool'
p21813
sS'default'
p21814
S'0'
p21815
sS'name'
p21816
S'use_displaced_mesh'
p21817
sS'required'
p21818
I00
sS'group_name'
p21819
S'Advanced'
p21820
sa(dp21821
S'description'
p21822
S'The name of the variable that this Kernel operates on\n'
p21823
sS'cpp_type'
p21824
S'NonlinearVariableName'
p21825
sS'default'
p21826
g3
sS'name'
p21827
S'variable'
p21828
sS'required'
p21829
I01
sS'group_name'
p21830
NsasS'name'
p21831
S'/Kernels/MassEigenKernel'
p21832
sa(dp21833
S'description'
p21834
g3
sS'subblocks'
p21835
NsS'parameters'
p21836
(lp21837
(dp21838
S'description'
p21839
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21840
sS'cpp_type'
p21841
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21842
sS'default'
p21843
g3
sS'name'
p21844
S'block'
p21845
sS'required'
p21846
I00
sS'group_name'
p21847
Nsa(dp21848
S'description'
p21849
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21850
sS'cpp_type'
p21851
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21852
sS'default'
p21853
g3
sS'name'
p21854
S'control_tags'
p21855
sS'required'
p21856
I00
sS'group_name'
p21857
S'Advanced'
p21858
sa(dp21859
S'description'
p21860
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21861
sS'cpp_type'
p21862
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21863
sS'default'
p21864
g3
sS'name'
p21865
S'diag_save_in'
p21866
sS'required'
p21867
I00
sS'group_name'
p21868
S'Advanced'
p21869
sa(dp21870
S'description'
p21871
S'Whether or not this kernel will be used as an eigen kernel\n'
p21872
sS'cpp_type'
p21873
S'bool'
p21874
sS'default'
p21875
S'0'
p21876
sS'name'
p21877
S'eigen_kernel'
p21878
sS'required'
p21879
I00
sS'group_name'
p21880
Nsa(dp21881
S'description'
p21882
S'Set the enabled status of the MooseObject.\n'
p21883
sS'cpp_type'
p21884
S'bool'
p21885
sS'default'
p21886
S'1'
p21887
sS'name'
p21888
S'enable'
p21889
sS'required'
p21890
I00
sS'group_name'
p21891
S'Advanced'
p21892
sa(dp21893
S'description'
p21894
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21895
sS'cpp_type'
p21896
S'bool'
p21897
sS'default'
p21898
S'1'
p21899
sS'name'
p21900
S'implicit'
p21901
sS'required'
p21902
I00
sS'group_name'
p21903
S'Advanced'
p21904
sa(dp21905
S'description'
p21906
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21907
sS'cpp_type'
p21908
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21909
sS'default'
p21910
g3
sS'name'
p21911
S'save_in'
p21912
sS'required'
p21913
I00
sS'group_name'
p21914
S'Advanced'
p21915
sa(dp21916
S'description'
p21917
S'The seed for the master random number generator\n'
p21918
sS'cpp_type'
p21919
S'unsigned int'
p21920
sS'default'
p21921
S'0'
p21922
sS'name'
p21923
S'seed'
p21924
sS'required'
p21925
I00
sS'group_name'
p21926
S'Advanced'
p21927
sa(dp21928
S'description'
p21929
g3
sS'cpp_type'
p21930
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21931
sS'default'
p21932
S'MassLumpedTimeDerivative'
p21933
sS'name'
p21934
S'type'
p21935
sS'required'
p21936
I00
sS'group_name'
p21937
Nsa(dp21938
S'description'
p21939
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21940
sS'cpp_type'
p21941
S'bool'
p21942
sS'default'
p21943
S'0'
p21944
sS'name'
p21945
S'use_displaced_mesh'
p21946
sS'required'
p21947
I00
sS'group_name'
p21948
S'Advanced'
p21949
sa(dp21950
S'description'
p21951
S'The name of the variable that this Kernel operates on\n'
p21952
sS'cpp_type'
p21953
S'NonlinearVariableName'
p21954
sS'default'
p21955
g3
sS'name'
p21956
S'variable'
p21957
sS'required'
p21958
I01
sS'group_name'
p21959
NsasS'name'
p21960
S'/Kernels/MassLumpedTimeDerivative'
p21961
sa(dp21962
S'description'
p21963
S'Class used for testing derivatives of a material property.\n'
p21964
sS'subblocks'
p21965
NsS'parameters'
p21966
(lp21967
(dp21968
S'description'
p21969
S'List of variables the material property depends on\n'
p21970
sS'cpp_type'
p21971
S'std::vector<VariableName>'
p21972
sS'default'
p21973
g3
sS'name'
p21974
S'args'
p21975
sS'required'
p21976
I01
sS'group_name'
p21977
Nsa(dp21978
S'description'
p21979
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21980
sS'cpp_type'
p21981
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21982
sS'default'
p21983
g3
sS'name'
p21984
S'block'
p21985
sS'required'
p21986
I00
sS'group_name'
p21987
Nsa(dp21988
S'description'
p21989
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21990
sS'cpp_type'
p21991
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21992
sS'default'
p21993
g3
sS'name'
p21994
S'control_tags'
p21995
sS'required'
p21996
I00
sS'group_name'
p21997
S'Advanced'
p21998
sa(dp21999
S'description'
p22000
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22001
sS'cpp_type'
p22002
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22003
sS'default'
p22004
g3
sS'name'
p22005
S'diag_save_in'
p22006
sS'required'
p22007
I00
sS'group_name'
p22008
S'Advanced'
p22009
sa(dp22010
S'description'
p22011
S'Whether or not this kernel will be used as an eigen kernel\n'
p22012
sS'cpp_type'
p22013
S'bool'
p22014
sS'default'
p22015
S'0'
p22016
sS'name'
p22017
S'eigen_kernel'
p22018
sS'required'
p22019
I00
sS'group_name'
p22020
Nsa(dp22021
S'description'
p22022
S'Set the enabled status of the MooseObject.\n'
p22023
sS'cpp_type'
p22024
S'bool'
p22025
sS'default'
p22026
S'1'
p22027
sS'name'
p22028
S'enable'
p22029
sS'required'
p22030
I00
sS'group_name'
p22031
S'Advanced'
p22032
sa(dp22033
S'description'
p22034
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22035
sS'cpp_type'
p22036
S'bool'
p22037
sS'default'
p22038
S'1'
p22039
sS'name'
p22040
S'implicit'
p22041
sS'required'
p22042
I00
sS'group_name'
p22043
S'Advanced'
p22044
sa(dp22045
S'description'
p22046
S'Name of material property for which derivatives are to be tested.\n'
p22047
sS'cpp_type'
p22048
S'MaterialPropertyName'
p22049
sS'default'
p22050
g3
sS'name'
p22051
S'material_property'
p22052
sS'required'
p22053
I01
sS'group_name'
p22054
Nsa(dp22055
S'description'
p22056
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22057
sS'cpp_type'
p22058
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22059
sS'default'
p22060
g3
sS'name'
p22061
S'save_in'
p22062
sS'required'
p22063
I00
sS'group_name'
p22064
S'Advanced'
p22065
sa(dp22066
S'description'
p22067
S'The seed for the master random number generator\n'
p22068
sS'cpp_type'
p22069
S'unsigned int'
p22070
sS'default'
p22071
S'0'
p22072
sS'name'
p22073
S'seed'
p22074
sS'required'
p22075
I00
sS'group_name'
p22076
S'Advanced'
p22077
sa(dp22078
S'description'
p22079
g3
sS'cpp_type'
p22080
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22081
sS'default'
p22082
S'MaterialDerivativeTestKernel'
p22083
sS'name'
p22084
S'type'
p22085
sS'required'
p22086
I00
sS'group_name'
p22087
Nsa(dp22088
S'description'
p22089
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22090
sS'cpp_type'
p22091
S'bool'
p22092
sS'default'
p22093
S'0'
p22094
sS'name'
p22095
S'use_displaced_mesh'
p22096
sS'required'
p22097
I00
sS'group_name'
p22098
S'Advanced'
p22099
sa(dp22100
S'description'
p22101
S'The name of the variable that this Kernel operates on\n'
p22102
sS'cpp_type'
p22103
S'NonlinearVariableName'
p22104
sS'default'
p22105
g3
sS'name'
p22106
S'variable'
p22107
sS'required'
p22108
I01
sS'group_name'
p22109
NsasS'name'
p22110
S'/Kernels/MaterialDerivativeTestKernel'
p22111
sa(dp22112
S'description'
p22113
S'Kernel that sets a zero residual.\n'
p22114
sS'subblocks'
p22115
NsS'parameters'
p22116
(lp22117
(dp22118
S'description'
p22119
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22120
sS'cpp_type'
p22121
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p22122
sS'default'
p22123
g3
sS'name'
p22124
S'block'
p22125
sS'required'
p22126
I00
sS'group_name'
p22127
Nsa(dp22128
S'description'
p22129
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22130
sS'cpp_type'
p22131
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22132
sS'default'
p22133
g3
sS'name'
p22134
S'control_tags'
p22135
sS'required'
p22136
I00
sS'group_name'
p22137
S'Advanced'
p22138
sa(dp22139
S'description'
p22140
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22141
sS'cpp_type'
p22142
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22143
sS'default'
p22144
g3
sS'name'
p22145
S'diag_save_in'
p22146
sS'required'
p22147
I00
sS'group_name'
p22148
S'Advanced'
p22149
sa(dp22150
S'description'
p22151
S'Whether or not this kernel will be used as an eigen kernel\n'
p22152
sS'cpp_type'
p22153
S'bool'
p22154
sS'default'
p22155
S'0'
p22156
sS'name'
p22157
S'eigen_kernel'
p22158
sS'required'
p22159
I00
sS'group_name'
p22160
Nsa(dp22161
S'description'
p22162
S'Set the enabled status of the MooseObject.\n'
p22163
sS'cpp_type'
p22164
S'bool'
p22165
sS'default'
p22166
S'1'
p22167
sS'name'
p22168
S'enable'
p22169
sS'required'
p22170
I00
sS'group_name'
p22171
S'Advanced'
p22172
sa(dp22173
S'description'
p22174
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22175
sS'cpp_type'
p22176
S'bool'
p22177
sS'default'
p22178
S'1'
p22179
sS'name'
p22180
S'implicit'
p22181
sS'required'
p22182
I00
sS'group_name'
p22183
S'Advanced'
p22184
sa(dp22185
S'description'
p22186
S'On diagonal Jacobian fill term to retain an invertable matrix for the preconditioner\n'
p22187
sS'cpp_type'
p22188
S'double'
p22189
sS'default'
p22190
S'1e-09'
p22191
sS'name'
p22192
S'jacobian_fill'
p22193
sS'required'
p22194
I00
sS'group_name'
p22195
Nsa(dp22196
S'description'
p22197
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22198
sS'cpp_type'
p22199
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22200
sS'default'
p22201
g3
sS'name'
p22202
S'save_in'
p22203
sS'required'
p22204
I00
sS'group_name'
p22205
S'Advanced'
p22206
sa(dp22207
S'description'
p22208
S'The seed for the master random number generator\n'
p22209
sS'cpp_type'
p22210
S'unsigned int'
p22211
sS'default'
p22212
S'0'
p22213
sS'name'
p22214
S'seed'
p22215
sS'required'
p22216
I00
sS'group_name'
p22217
S'Advanced'
p22218
sa(dp22219
S'description'
p22220
g3
sS'cpp_type'
p22221
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22222
sS'default'
p22223
S'NullKernel'
p22224
sS'name'
p22225
S'type'
p22226
sS'required'
p22227
I00
sS'group_name'
p22228
Nsa(dp22229
S'description'
p22230
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22231
sS'cpp_type'
p22232
S'bool'
p22233
sS'default'
p22234
S'0'
p22235
sS'name'
p22236
S'use_displaced_mesh'
p22237
sS'required'
p22238
I00
sS'group_name'
p22239
S'Advanced'
p22240
sa(dp22241
S'description'
p22242
S'The name of the variable that this Kernel operates on\n'
p22243
sS'cpp_type'
p22244
S'NonlinearVariableName'
p22245
sS'default'
p22246
g3
sS'name'
p22247
S'variable'
p22248
sS'required'
p22249
I01
sS'group_name'
p22250
NsasS'name'
p22251
S'/Kernels/NullKernel'
p22252
sa(dp22253
S'description'
p22254
g3
sS'subblocks'
p22255
NsS'parameters'
p22256
(lp22257
(dp22258
S'description'
p22259
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22260
sS'cpp_type'
p22261
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p22262
sS'default'
p22263
g3
sS'name'
p22264
S'block'
p22265
sS'required'
p22266
I00
sS'group_name'
p22267
Nsa(dp22268
S'description'
p22269
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22270
sS'cpp_type'
p22271
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22272
sS'default'
p22273
g3
sS'name'
p22274
S'control_tags'
p22275
sS'required'
p22276
I00
sS'group_name'
p22277
S'Advanced'
p22278
sa(dp22279
S'description'
p22280
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22281
sS'cpp_type'
p22282
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22283
sS'default'
p22284
g3
sS'name'
p22285
S'diag_save_in'
p22286
sS'required'
p22287
I00
sS'group_name'
p22288
S'Advanced'
p22289
sa(dp22290
S'description'
p22291
S'Whether or not this kernel will be used as an eigen kernel\n'
p22292
sS'cpp_type'
p22293
S'bool'
p22294
sS'default'
p22295
S'0'
p22296
sS'name'
p22297
S'eigen_kernel'
p22298
sS'required'
p22299
I00
sS'group_name'
p22300
Nsa(dp22301
S'description'
p22302
S'Set the enabled status of the MooseObject.\n'
p22303
sS'cpp_type'
p22304
S'bool'
p22305
sS'default'
p22306
S'1'
p22307
sS'name'
p22308
S'enable'
p22309
sS'required'
p22310
I00
sS'group_name'
p22311
S'Advanced'
p22312
sa(dp22313
S'description'
p22314
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22315
sS'cpp_type'
p22316
S'bool'
p22317
sS'default'
p22318
S'1'
p22319
sS'name'
p22320
S'implicit'
p22321
sS'required'
p22322
I00
sS'group_name'
p22323
S'Advanced'
p22324
sa(dp22325
S'description'
p22326
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22327
sS'cpp_type'
p22328
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22329
sS'default'
p22330
g3
sS'name'
p22331
S'save_in'
p22332
sS'required'
p22333
I00
sS'group_name'
p22334
S'Advanced'
p22335
sa(dp22336
S'description'
p22337
S'The seed for the master random number generator\n'
p22338
sS'cpp_type'
p22339
S'unsigned int'
p22340
sS'default'
p22341
S'0'
p22342
sS'name'
p22343
S'seed'
p22344
sS'required'
p22345
I00
sS'group_name'
p22346
S'Advanced'
p22347
sa(dp22348
S'description'
p22349
g3
sS'cpp_type'
p22350
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22351
sS'default'
p22352
S'Reaction'
p22353
sS'name'
p22354
S'type'
p22355
sS'required'
p22356
I00
sS'group_name'
p22357
Nsa(dp22358
S'description'
p22359
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22360
sS'cpp_type'
p22361
S'bool'
p22362
sS'default'
p22363
S'0'
p22364
sS'name'
p22365
S'use_displaced_mesh'
p22366
sS'required'
p22367
I00
sS'group_name'
p22368
S'Advanced'
p22369
sa(dp22370
S'description'
p22371
S'The name of the variable that this Kernel operates on\n'
p22372
sS'cpp_type'
p22373
S'NonlinearVariableName'
p22374
sS'default'
p22375
g3
sS'name'
p22376
S'variable'
p22377
sS'required'
p22378
I01
sS'group_name'
p22379
NsasS'name'
p22380
S'/Kernels/Reaction'
p22381
sa(dp22382
S'description'
p22383
g3
sS'subblocks'
p22384
NsS'parameters'
p22385
(lp22386
(dp22387
S'description'
p22388
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22389
sS'cpp_type'
p22390
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p22391
sS'default'
p22392
g3
sS'name'
p22393
S'block'
p22394
sS'required'
p22395
I00
sS'group_name'
p22396
Nsa(dp22397
S'description'
p22398
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22399
sS'cpp_type'
p22400
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22401
sS'default'
p22402
g3
sS'name'
p22403
S'control_tags'
p22404
sS'required'
p22405
I00
sS'group_name'
p22406
S'Advanced'
p22407
sa(dp22408
S'description'
p22409
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22410
sS'cpp_type'
p22411
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22412
sS'default'
p22413
g3
sS'name'
p22414
S'diag_save_in'
p22415
sS'required'
p22416
I00
sS'group_name'
p22417
S'Advanced'
p22418
sa(dp22419
S'description'
p22420
S'Whether or not this kernel will be used as an eigen kernel\n'
p22421
sS'cpp_type'
p22422
S'bool'
p22423
sS'default'
p22424
S'0'
p22425
sS'name'
p22426
S'eigen_kernel'
p22427
sS'required'
p22428
I00
sS'group_name'
p22429
Nsa(dp22430
S'description'
p22431
S'Set the enabled status of the MooseObject.\n'
p22432
sS'cpp_type'
p22433
S'bool'
p22434
sS'default'
p22435
S'1'
p22436
sS'name'
p22437
S'enable'
p22438
sS'required'
p22439
I00
sS'group_name'
p22440
S'Advanced'
p22441
sa(dp22442
S'description'
p22443
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22444
sS'cpp_type'
p22445
S'bool'
p22446
sS'default'
p22447
S'1'
p22448
sS'name'
p22449
S'implicit'
p22450
sS'required'
p22451
I00
sS'group_name'
p22452
S'Advanced'
p22453
sa(dp22454
S'description'
p22455
S'True for mass matrix lumping, false otherwise\n'
p22456
sS'cpp_type'
p22457
S'bool'
p22458
sS'default'
p22459
S'0'
p22460
sS'name'
p22461
S'lumping'
p22462
sS'required'
p22463
I00
sS'group_name'
p22464
Nsa(dp22465
S'description'
p22466
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22467
sS'cpp_type'
p22468
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22469
sS'default'
p22470
g3
sS'name'
p22471
S'save_in'
p22472
sS'required'
p22473
I00
sS'group_name'
p22474
S'Advanced'
p22475
sa(dp22476
S'description'
p22477
S'The seed for the master random number generator\n'
p22478
sS'cpp_type'
p22479
S'unsigned int'
p22480
sS'default'
p22481
S'0'
p22482
sS'name'
p22483
S'seed'
p22484
sS'required'
p22485
I00
sS'group_name'
p22486
S'Advanced'
p22487
sa(dp22488
S'description'
p22489
g3
sS'cpp_type'
p22490
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22491
sS'default'
p22492
S'TimeDerivative'
p22493
sS'name'
p22494
S'type'
p22495
sS'required'
p22496
I00
sS'group_name'
p22497
Nsa(dp22498
S'description'
p22499
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22500
sS'cpp_type'
p22501
S'bool'
p22502
sS'default'
p22503
S'0'
p22504
sS'name'
p22505
S'use_displaced_mesh'
p22506
sS'required'
p22507
I00
sS'group_name'
p22508
S'Advanced'
p22509
sa(dp22510
S'description'
p22511
S'The name of the variable that this Kernel operates on\n'
p22512
sS'cpp_type'
p22513
S'NonlinearVariableName'
p22514
sS'default'
p22515
g3
sS'name'
p22516
S'variable'
p22517
sS'required'
p22518
I01
sS'group_name'
p22519
NsasS'name'
p22520
S'/Kernels/TimeDerivative'
p22521
sa(dp22522
S'description'
p22523
g3
sS'subblocks'
p22524
NsS'parameters'
p22525
(lp22526
(dp22527
S'description'
p22528
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22529
sS'cpp_type'
p22530
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p22531
sS'default'
p22532
g3
sS'name'
p22533
S'block'
p22534
sS'required'
p22535
I00
sS'group_name'
p22536
Nsa(dp22537
S'description'
p22538
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22539
sS'cpp_type'
p22540
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22541
sS'default'
p22542
g3
sS'name'
p22543
S'control_tags'
p22544
sS'required'
p22545
I00
sS'group_name'
p22546
S'Advanced'
p22547
sa(dp22548
S'description'
p22549
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22550
sS'cpp_type'
p22551
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22552
sS'default'
p22553
g3
sS'name'
p22554
S'diag_save_in'
p22555
sS'required'
p22556
I00
sS'group_name'
p22557
S'Advanced'
p22558
sa(dp22559
S'description'
p22560
S'Whether or not this kernel will be used as an eigen kernel\n'
p22561
sS'cpp_type'
p22562
S'bool'
p22563
sS'default'
p22564
S'0'
p22565
sS'name'
p22566
S'eigen_kernel'
p22567
sS'required'
p22568
I00
sS'group_name'
p22569
Nsa(dp22570
S'description'
p22571
S'Set the enabled status of the MooseObject.\n'
p22572
sS'cpp_type'
p22573
S'bool'
p22574
sS'default'
p22575
S'1'
p22576
sS'name'
p22577
S'enable'
p22578
sS'required'
p22579
I00
sS'group_name'
p22580
S'Advanced'
p22581
sa(dp22582
S'description'
p22583
S'The forcing function\n'
p22584
sS'cpp_type'
p22585
S'FunctionName'
p22586
sS'default'
p22587
g3
sS'name'
p22588
S'function'
p22589
sS'required'
p22590
I01
sS'group_name'
p22591
Nsa(dp22592
S'description'
p22593
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22594
sS'cpp_type'
p22595
S'bool'
p22596
sS'default'
p22597
S'1'
p22598
sS'name'
p22599
S'implicit'
p22600
sS'required'
p22601
I00
sS'group_name'
p22602
S'Advanced'
p22603
sa(dp22604
S'description'
p22605
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22606
sS'cpp_type'
p22607
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22608
sS'default'
p22609
g3
sS'name'
p22610
S'save_in'
p22611
sS'required'
p22612
I00
sS'group_name'
p22613
S'Advanced'
p22614
sa(dp22615
S'description'
p22616
S'The seed for the master random number generator\n'
p22617
sS'cpp_type'
p22618
S'unsigned int'
p22619
sS'default'
p22620
S'0'
p22621
sS'name'
p22622
S'seed'
p22623
sS'required'
p22624
I00
sS'group_name'
p22625
S'Advanced'
p22626
sa(dp22627
S'description'
p22628
g3
sS'cpp_type'
p22629
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22630
sS'default'
p22631
S'UserForcingFunction'
p22632
sS'name'
p22633
S'type'
p22634
sS'required'
p22635
I00
sS'group_name'
p22636
Nsa(dp22637
S'description'
p22638
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22639
sS'cpp_type'
p22640
S'bool'
p22641
sS'default'
p22642
S'0'
p22643
sS'name'
p22644
S'use_displaced_mesh'
p22645
sS'required'
p22646
I00
sS'group_name'
p22647
S'Advanced'
p22648
sa(dp22649
S'description'
p22650
S'The name of the variable that this Kernel operates on\n'
p22651
sS'cpp_type'
p22652
S'NonlinearVariableName'
p22653
sS'default'
p22654
g3
sS'name'
p22655
S'variable'
p22656
sS'required'
p22657
I01
sS'group_name'
p22658
NsasS'name'
p22659
S'/Kernels/UserForcingFunction'
p22660
sasS'parameters'
p22661
NsS'name'
p22662
S'/Kernels'
p22663
sa(dp22664
S'description'
p22665
g3
sS'subblocks'
p22666
(lp22667
(dp22668
S'description'
p22669
g3
sS'subblocks'
p22670
NsS'parameters'
p22671
(lp22672
(dp22673
S'description'
p22674
S'A string representing the Moose Object that will be built by this Action\n'
p22675
sS'cpp_type'
p22676
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22677
sS'default'
p22678
g3
sS'name'
p22679
S'type'
p22680
sS'required'
p22681
I01
sS'group_name'
p22682
NsasS'name'
p22683
S'/Materials/*'
p22684
sa(dp22685
S'description'
p22686
g3
sS'subblocks'
p22687
NsS'parameters'
p22688
(lp22689
(dp22690
S'description'
p22691
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22692
sS'cpp_type'
p22693
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p22694
sS'default'
p22695
g3
sS'name'
p22696
S'block'
p22697
sS'required'
p22698
I00
sS'group_name'
p22699
Nsa(dp22700
S'description'
p22701
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22702
sS'cpp_type'
p22703
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p22704
sS'default'
p22705
g3
sS'name'
p22706
S'boundary'
p22707
sS'required'
p22708
I00
sS'group_name'
p22709
Nsa(dp22710
S'description'
p22711
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p22712
sS'cpp_type'
p22713
S'bool'
p22714
sS'default'
p22715
S'1'
p22716
sS'name'
p22717
S'compute'
p22718
sS'required'
p22719
I00
sS'group_name'
p22720
Nsa(dp22721
S'description'
p22722
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p22723
sS'cpp_type'
p22724
S'bool'
p22725
sS'default'
p22726
S'0'
p22727
sS'name'
p22728
S'constant_on_elem'
p22729
sS'required'
p22730
I00
sS'group_name'
p22731
S'Advanced'
p22732
sa(dp22733
S'description'
p22734
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22735
sS'cpp_type'
p22736
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22737
sS'default'
p22738
g3
sS'name'
p22739
S'control_tags'
p22740
sS'required'
p22741
I00
sS'group_name'
p22742
S'Advanced'
p22743
sa(dp22744
S'description'
p22745
S'Set the enabled status of the MooseObject.\n'
p22746
sS'cpp_type'
p22747
S'bool'
p22748
sS'default'
p22749
S'1'
p22750
sS'name'
p22751
S'enable'
p22752
sS'required'
p22753
I00
sS'group_name'
p22754
S'Advanced'
p22755
sa(dp22756
S'description'
p22757
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22758
sS'cpp_type'
p22759
S'bool'
p22760
sS'default'
p22761
S'1'
p22762
sS'name'
p22763
S'implicit'
p22764
sS'required'
p22765
I00
sS'group_name'
p22766
S'Advanced'
p22767
sa(dp22768
S'description'
p22769
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p22770
sS'cpp_type'
p22771
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22772
sS'default'
p22773
g3
sS'name'
p22774
S'output_properties'
p22775
sS'required'
p22776
I00
sS'group_name'
p22777
S'Outputs'
p22778
sa(dp22779
S'description'
p22780
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p22781
sS'cpp_type'
p22782
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p22783
sS'default'
p22784
S'none'
p22785
sS'name'
p22786
S'outputs'
p22787
sS'required'
p22788
I00
sS'group_name'
p22789
S'Outputs'
p22790
sa(dp22791
S'description'
p22792
S'The names of the properties this material will have\n'
p22793
sS'cpp_type'
p22794
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22795
sS'default'
p22796
g3
sS'name'
p22797
S'prop_names'
p22798
sS'required'
p22799
I00
sS'group_name'
p22800
Nsa(dp22801
S'description'
p22802
S'The values associated with the named properties\n'
p22803
sS'cpp_type'
p22804
S'std::__1::vector<double, std::__1::allocator<double> >'
p22805
sS'default'
p22806
g3
sS'name'
p22807
S'prop_values'
p22808
sS'required'
p22809
I00
sS'group_name'
p22810
Nsa(dp22811
S'description'
p22812
S'The seed for the master random number generator\n'
p22813
sS'cpp_type'
p22814
S'unsigned int'
p22815
sS'default'
p22816
S'0'
p22817
sS'name'
p22818
S'seed'
p22819
sS'required'
p22820
I00
sS'group_name'
p22821
S'Advanced'
p22822
sa(dp22823
S'description'
p22824
g3
sS'cpp_type'
p22825
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22826
sS'default'
p22827
S'GenericConstantMaterial'
p22828
sS'name'
p22829
S'type'
p22830
sS'required'
p22831
I00
sS'group_name'
p22832
Nsa(dp22833
S'description'
p22834
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22835
sS'cpp_type'
p22836
S'bool'
p22837
sS'default'
p22838
S'0'
p22839
sS'name'
p22840
S'use_displaced_mesh'
p22841
sS'required'
p22842
I00
sS'group_name'
p22843
S'Advanced'
p22844
sasS'name'
p22845
S'/Materials/GenericConstantMaterial'
p22846
sa(dp22847
S'description'
p22848
g3
sS'subblocks'
p22849
NsS'parameters'
p22850
(lp22851
(dp22852
S'description'
p22853
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22854
sS'cpp_type'
p22855
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p22856
sS'default'
p22857
g3
sS'name'
p22858
S'block'
p22859
sS'required'
p22860
I00
sS'group_name'
p22861
Nsa(dp22862
S'description'
p22863
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22864
sS'cpp_type'
p22865
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p22866
sS'default'
p22867
g3
sS'name'
p22868
S'boundary'
p22869
sS'required'
p22870
I00
sS'group_name'
p22871
Nsa(dp22872
S'description'
p22873
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p22874
sS'cpp_type'
p22875
S'bool'
p22876
sS'default'
p22877
S'1'
p22878
sS'name'
p22879
S'compute'
p22880
sS'required'
p22881
I00
sS'group_name'
p22882
Nsa(dp22883
S'description'
p22884
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p22885
sS'cpp_type'
p22886
S'bool'
p22887
sS'default'
p22888
S'0'
p22889
sS'name'
p22890
S'constant_on_elem'
p22891
sS'required'
p22892
I00
sS'group_name'
p22893
S'Advanced'
p22894
sa(dp22895
S'description'
p22896
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22897
sS'cpp_type'
p22898
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22899
sS'default'
p22900
g3
sS'name'
p22901
S'control_tags'
p22902
sS'required'
p22903
I00
sS'group_name'
p22904
S'Advanced'
p22905
sa(dp22906
S'description'
p22907
S'Set the enabled status of the MooseObject.\n'
p22908
sS'cpp_type'
p22909
S'bool'
p22910
sS'default'
p22911
S'1'
p22912
sS'name'
p22913
S'enable'
p22914
sS'required'
p22915
I00
sS'group_name'
p22916
S'Advanced'
p22917
sa(dp22918
S'description'
p22919
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22920
sS'cpp_type'
p22921
S'bool'
p22922
sS'default'
p22923
S'1'
p22924
sS'name'
p22925
S'implicit'
p22926
sS'required'
p22927
I00
sS'group_name'
p22928
S'Advanced'
p22929
sa(dp22930
S'description'
p22931
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p22932
sS'cpp_type'
p22933
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22934
sS'default'
p22935
g3
sS'name'
p22936
S'output_properties'
p22937
sS'required'
p22938
I00
sS'group_name'
p22939
S'Outputs'
p22940
sa(dp22941
S'description'
p22942
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p22943
sS'cpp_type'
p22944
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p22945
sS'default'
p22946
S'none'
p22947
sS'name'
p22948
S'outputs'
p22949
sS'required'
p22950
I00
sS'group_name'
p22951
S'Outputs'
p22952
sa(dp22953
S'description'
p22954
S'The seed for the master random number generator\n'
p22955
sS'cpp_type'
p22956
S'unsigned int'
p22957
sS'default'
p22958
S'0'
p22959
sS'name'
p22960
S'seed'
p22961
sS'required'
p22962
I00
sS'group_name'
p22963
S'Advanced'
p22964
sa(dp22965
S'description'
p22966
S'Name of the tensor material property to be created\n'
p22967
sS'cpp_type'
p22968
S'MaterialPropertyName'
p22969
sS'default'
p22970
g3
sS'name'
p22971
S'tensor_name'
p22972
sS'required'
p22973
I01
sS'group_name'
p22974
Nsa(dp22975
S'description'
p22976
S'Vector of values defining the constant rank two tensor\n'
p22977
sS'cpp_type'
p22978
S'std::__1::vector<double, std::__1::allocator<double> >'
p22979
sS'default'
p22980
g3
sS'name'
p22981
S'tensor_values'
p22982
sS'required'
p22983
I01
sS'group_name'
p22984
Nsa(dp22985
S'description'
p22986
g3
sS'cpp_type'
p22987
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22988
sS'default'
p22989
S'GenericConstantRankTwoTensor'
p22990
sS'name'
p22991
S'type'
p22992
sS'required'
p22993
I00
sS'group_name'
p22994
Nsa(dp22995
S'description'
p22996
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22997
sS'cpp_type'
p22998
S'bool'
p22999
sS'default'
p23000
S'0'
p23001
sS'name'
p23002
S'use_displaced_mesh'
p23003
sS'required'
p23004
I00
sS'group_name'
p23005
S'Advanced'
p23006
sasS'name'
p23007
S'/Materials/GenericConstantRankTwoTensor'
p23008
sa(dp23009
S'description'
p23010
g3
sS'subblocks'
p23011
NsS'parameters'
p23012
(lp23013
(dp23014
S'description'
p23015
S'The list of block ids (SubdomainID) that this object will be applied\n'
p23016
sS'cpp_type'
p23017
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p23018
sS'default'
p23019
g3
sS'name'
p23020
S'block'
p23021
sS'required'
p23022
I00
sS'group_name'
p23023
Nsa(dp23024
S'description'
p23025
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p23026
sS'cpp_type'
p23027
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p23028
sS'default'
p23029
g3
sS'name'
p23030
S'boundary'
p23031
sS'required'
p23032
I00
sS'group_name'
p23033
Nsa(dp23034
S'description'
p23035
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p23036
sS'cpp_type'
p23037
S'bool'
p23038
sS'default'
p23039
S'1'
p23040
sS'name'
p23041
S'compute'
p23042
sS'required'
p23043
I00
sS'group_name'
p23044
Nsa(dp23045
S'description'
p23046
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p23047
sS'cpp_type'
p23048
S'bool'
p23049
sS'default'
p23050
S'0'
p23051
sS'name'
p23052
S'constant_on_elem'
p23053
sS'required'
p23054
I00
sS'group_name'
p23055
S'Advanced'
p23056
sa(dp23057
S'description'
p23058
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23059
sS'cpp_type'
p23060
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p23061
sS'default'
p23062
g3
sS'name'
p23063
S'control_tags'
p23064
sS'required'
p23065
I00
sS'group_name'
p23066
S'Advanced'
p23067
sa(dp23068
S'description'
p23069
S'Set the enabled status of the MooseObject.\n'
p23070
sS'cpp_type'
p23071
S'bool'
p23072
sS'default'
p23073
S'1'
p23074
sS'name'
p23075
S'enable'
p23076
sS'required'
p23077
I00
sS'group_name'
p23078
S'Advanced'
p23079
sa(dp23080
S'description'
p23081
S'Enable the declaration of old and older values\n'
p23082
sS'cpp_type'
p23083
S'bool'
p23084
sS'default'
p23085
S'0'
p23086
sS'name'
p23087
S'enable_stateful'
p23088
sS'required'
p23089
I00
sS'group_name'
p23090
Nsa(dp23091
S'description'
p23092
S'Determines whether this object is calculated using an implicit or explicit form\n'
p23093
sS'cpp_type'
p23094
S'bool'
p23095
sS'default'
p23096
S'1'
p23097
sS'name'
p23098
S'implicit'
p23099
sS'required'
p23100
I00
sS'group_name'
p23101
S'Advanced'
p23102
sa(dp23103
S'description'
p23104
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p23105
sS'cpp_type'
p23106
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p23107
sS'default'
p23108
g3
sS'name'
p23109
S'output_properties'
p23110
sS'required'
p23111
I00
sS'group_name'
p23112
S'Outputs'
p23113
sa(dp23114
S'description'
p23115
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p23116
sS'cpp_type'
p23117
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p23118
sS'default'
p23119
S'none'
p23120
sS'name'
p23121
S'outputs'
p23122
sS'required'
p23123
I00
sS'group_name'
p23124
S'Outputs'
p23125
sa(dp23126
S'description'
p23127
S'The names of the properties this material will have\n'
p23128
sS'cpp_type'
p23129
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p23130
sS'default'
p23131
g3
sS'name'
p23132
S'prop_names'
p23133
sS'required'
p23134
I00
sS'group_name'
p23135
Nsa(dp23136
S'description'
p23137
S'The corresponding names of the functions that are going to provide the values for the variables\n'
p23138
sS'cpp_type'
p23139
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p23140
sS'default'
p23141
g3
sS'name'
p23142
S'prop_values'
p23143
sS'required'
p23144
I00
sS'group_name'
p23145
Nsa(dp23146
S'description'
p23147
S'The seed for the master random number generator\n'
p23148
sS'cpp_type'
p23149
S'unsigned int'
p23150
sS'default'
p23151
S'0'
p23152
sS'name'
p23153
S'seed'
p23154
sS'required'
p23155
I00
sS'group_name'
p23156
S'Advanced'
p23157
sa(dp23158
S'description'
p23159
g3
sS'cpp_type'
p23160
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p23161
sS'default'
p23162
S'GenericFunctionMaterial'
p23163
sS'name'
p23164
S'type'
p23165
sS'required'
p23166
I00
sS'group_name'
p23167
Nsa(dp23168
S'description'
p23169
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23170
sS'cpp_type'
p23171
S'bool'
p23172
sS'default'
p23173
S'0'
p23174
sS'name'
p23175
S'use_displaced_mesh'
p23176
sS'required'
p23177
I00
sS'group_name'
p23178
S'Advanced'
p23179
sasS'name'
p23180
S'/Materials/GenericFunctionMaterial'
p23181
sasS'parameters'
p23182
NsS'name'
p23183
S'/Materials'
p23184
sa(dp23185
S'description'
p23186
g3
sS'subblocks'
p23187
(lp23188
(dp23189
S'description'
p23190
g3
sS'subblocks'
p23191
(lp23192
(dp23193
S'description'
p23194
S'Read a mesh from a file.\n'
p23195
sS'subblocks'
p23196
NsS'parameters'
p23197
(lp23198
(dp23199
S'name'
p23200
S'centroid_partitioner_direction'
p23201
sS'cpp_type'
p23202
S'MooseEnum'
p23203
sS'default'
p23204
g3
sS'description'
p23205
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p23206
sS'required'
p23207
I00
sS'options'
p23208
S'x y z radial'
p23209
sS'group_name'
p23210
S'Partitioning'
p23211
sa(dp23212
S'description'
p23213
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p23214
sS'cpp_type'
p23215
S'bool'
p23216
sS'default'
p23217
S'1'
p23218
sS'name'
p23219
S'construct_node_list_from_side_list'
p23220
sS'required'
p23221
I00
sS'group_name'
p23222
S'Advanced'
p23223
sa(dp23224
S'description'
p23225
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23226
sS'cpp_type'
p23227
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p23228
sS'default'
p23229
g3
sS'name'
p23230
S'control_tags'
p23231
sS'required'
p23232
I00
sS'group_name'
p23233
S'Advanced'
p23234
sa(dp23235
S'name'
p23236
S'dim'
p23237
sS'cpp_type'
p23238
S'MooseEnum'
p23239
sS'default'
p23240
S'1'
p23241
sS'description'
p23242
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n'
p23243
sS'required'
p23244
I00
sS'options'
p23245
S'1 2 3'
p23246
sS'group_name'
p23247
S'Advanced'
p23248
sa(dp23249
S'name'
p23250
S'distribution'
p23251
sS'cpp_type'
p23252
S'MooseEnum'
p23253
sS'default'
p23254
S'DEFAULT'
p23255
sS'description'
p23256
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p23257
sS'required'
p23258
I00
sS'options'
p23259
S'PARALLEL SERIAL DEFAULT'
p23260
sS'group_name'
p23261
Nsa(dp23262
S'description'
p23263
S'Set the enabled status of the MooseObject.\n'
p23264
sS'cpp_type'
p23265
S'bool'
p23266
sS'default'
p23267
S'1'
p23268
sS'name'
p23269
S'enable'
p23270
sS'required'
p23271
I00
sS'group_name'
p23272
S'Advanced'
p23273
sa(dp23274
S'description'
p23275
S'The name of the mesh file to read\n'
p23276
sS'cpp_type'
p23277
S'MeshFileName'
p23278
sS'default'
p23279
g3
sS'name'
p23280
S'file'
p23281
sS'required'
p23282
I01
sS'group_name'
p23283
Nsa(dp23284
S'description'
p23285
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p23286
sS'cpp_type'
p23287
S'bool'
p23288
sS'default'
p23289
S'0'
p23290
sS'name'
p23291
S'ghost_point_neighbors'
p23292
sS'required'
p23293
I00
sS'group_name'
p23294
S'Advanced'
p23295
sa(dp23296
S'description'
p23297
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p23298
sS'cpp_type'
p23299
S'bool'
p23300
sS'default'
p23301
S'0'
p23302
sS'name'
p23303
S'nemesis'
p23304
sS'required'
p23305
I00
sS'group_name'
p23306
S'Advanced'
p23307
sa(dp23308
S'description'
p23309
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p23310
sS'cpp_type'
p23311
S'unsigned short'
p23312
sS'default'
p23313
S'1'
p23314
sS'name'
p23315
S'num_ghosted_layers'
p23316
sS'required'
p23317
I00
sS'group_name'
p23318
S'Advanced'
p23319
sa(dp23320
S'name'
p23321
S'parallel_type'
p23322
sS'cpp_type'
p23323
S'MooseEnum'
p23324
sS'default'
p23325
S'DEFAULT'
p23326
sS'description'
p23327
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p23328
sS'required'
p23329
I00
sS'options'
p23330
S'DISTRIBUTED REPLICATED DEFAULT'
p23331
sS'group_name'
p23332
Nsa(dp23333
S'name'
p23334
S'partitioner'
p23335
sS'cpp_type'
p23336
S'MooseEnum'
p23337
sS'default'
p23338
S'default'
p23339
sS'description'
p23340
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p23341
sS'required'
p23342
I00
sS'options'
p23343
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p23344
sS'group_name'
p23345
S'Partitioning'
p23346
sa(dp23347
S'name'
p23348
S'patch_update_strategy'
p23349
sS'cpp_type'
p23350
S'MooseEnum'
p23351
sS'default'
p23352
S'never'
p23353
sS'description'
p23354
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p23355
sS'required'
p23356
I00
sS'options'
p23357
S'never always auto'
p23358
sS'group_name'
p23359
S'Advanced'
p23360
sa(dp23361
S'description'
p23362
g3
sS'cpp_type'
p23363
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p23364
sS'default'
p23365
S'FileMesh'
p23366
sS'name'
p23367
S'type'
p23368
sS'required'
p23369
I00
sS'group_name'
p23370
NsasS'name'
p23371
S'/Mesh/<type>/FileMesh'
p23372
sa(dp23373
S'description'
p23374
S'Create a line, square, or cube mesh with uniformly spaced or biased elements.\n'
p23375
sS'subblocks'
p23376
NsS'parameters'
p23377
(lp23378
(dp23379
S'description'
p23380
S'The amount by which to grow (or shrink) the cells in the x-direction.\n'
p23381
sS'cpp_type'
p23382
S'double'
p23383
sS'default'
p23384
S'1'
p23385
sS'name'
p23386
S'bias_x'
p23387
sS'required'
p23388
I00
sS'group_name'
p23389
Nsa(dp23390
S'description'
p23391
S'The amount by which to grow (or shrink) the cells in the y-direction.\n'
p23392
sS'cpp_type'
p23393
S'double'
p23394
sS'default'
p23395
S'1'
p23396
sS'name'
p23397
S'bias_y'
p23398
sS'required'
p23399
I00
sS'group_name'
p23400
Nsa(dp23401
S'description'
p23402
S'The amount by which to grow (or shrink) the cells in the z-direction.\n'
p23403
sS'cpp_type'
p23404
S'double'
p23405
sS'default'
p23406
S'1'
p23407
sS'name'
p23408
S'bias_z'
p23409
sS'required'
p23410
I00
sS'group_name'
p23411
Nsa(dp23412
S'name'
p23413
S'centroid_partitioner_direction'
p23414
sS'cpp_type'
p23415
S'MooseEnum'
p23416
sS'default'
p23417
g3
sS'description'
p23418
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p23419
sS'required'
p23420
I00
sS'options'
p23421
S'x y z radial'
p23422
sS'group_name'
p23423
S'Partitioning'
p23424
sa(dp23425
S'description'
p23426
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p23427
sS'cpp_type'
p23428
S'bool'
p23429
sS'default'
p23430
S'1'
p23431
sS'name'
p23432
S'construct_node_list_from_side_list'
p23433
sS'required'
p23434
I00
sS'group_name'
p23435
S'Advanced'
p23436
sa(dp23437
S'description'
p23438
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23439
sS'cpp_type'
p23440
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p23441
sS'default'
p23442
g3
sS'name'
p23443
S'control_tags'
p23444
sS'required'
p23445
I00
sS'group_name'
p23446
S'Advanced'
p23447
sa(dp23448
S'name'
p23449
S'dim'
p23450
sS'cpp_type'
p23451
S'MooseEnum'
p23452
sS'default'
p23453
g3
sS'description'
p23454
S'The dimension of the mesh to be generated\n'
p23455
sS'required'
p23456
I01
sS'options'
p23457
S'1 2 3'
p23458
sS'group_name'
p23459
S'Main'
p23460
sa(dp23461
S'name'
p23462
S'distribution'
p23463
sS'cpp_type'
p23464
S'MooseEnum'
p23465
sS'default'
p23466
S'DEFAULT'
p23467
sS'description'
p23468
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p23469
sS'required'
p23470
I00
sS'options'
p23471
S'PARALLEL SERIAL DEFAULT'
p23472
sS'group_name'
p23473
Nsa(dp23474
S'name'
p23475
S'elem_type'
p23476
sS'cpp_type'
p23477
S'MooseEnum'
p23478
sS'default'
p23479
g3
sS'description'
p23480
S'The type of element from libMesh to generate (default: linear element for requested dimension)\n'
p23481
sS'required'
p23482
I00
sS'options'
p23483
S'EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14'
p23484
sS'group_name'
p23485
Nsa(dp23486
S'description'
p23487
S'Set the enabled status of the MooseObject.\n'
p23488
sS'cpp_type'
p23489
S'bool'
p23490
sS'default'
p23491
S'1'
p23492
sS'name'
p23493
S'enable'
p23494
sS'required'
p23495
I00
sS'group_name'
p23496
S'Advanced'
p23497
sa(dp23498
S'description'
p23499
S'Grade mesh into boundaries according to Gauss-Lobatto quadrature spacing.\n'
p23500
sS'cpp_type'
p23501
S'bool'
p23502
sS'default'
p23503
S'0'
p23504
sS'name'
p23505
S'gauss_lobatto_grid'
p23506
sS'required'
p23507
I00
sS'group_name'
p23508
Nsa(dp23509
S'description'
p23510
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p23511
sS'cpp_type'
p23512
S'bool'
p23513
sS'default'
p23514
S'0'
p23515
sS'name'
p23516
S'ghost_point_neighbors'
p23517
sS'required'
p23518
I00
sS'group_name'
p23519
S'Advanced'
p23520
sa(dp23521
S'description'
p23522
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p23523
sS'cpp_type'
p23524
S'bool'
p23525
sS'default'
p23526
S'0'
p23527
sS'name'
p23528
S'nemesis'
p23529
sS'required'
p23530
I00
sS'group_name'
p23531
S'Advanced'
p23532
sa(dp23533
S'description'
p23534
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p23535
sS'cpp_type'
p23536
S'unsigned short'
p23537
sS'default'
p23538
S'1'
p23539
sS'name'
p23540
S'num_ghosted_layers'
p23541
sS'required'
p23542
I00
sS'group_name'
p23543
S'Advanced'
p23544
sa(dp23545
S'description'
p23546
S'Number of elements in the X direction\n'
p23547
sS'cpp_type'
p23548
S'unsigned int'
p23549
sS'default'
p23550
S'1'
p23551
sS'name'
p23552
S'nx'
p23553
sS'required'
p23554
I00
sS'group_name'
p23555
Nsa(dp23556
S'description'
p23557
S'Number of elements in the Y direction\n'
p23558
sS'cpp_type'
p23559
S'unsigned int'
p23560
sS'default'
p23561
S'1'
p23562
sS'name'
p23563
S'ny'
p23564
sS'required'
p23565
I00
sS'group_name'
p23566
Nsa(dp23567
S'description'
p23568
S'Number of elements in the Z direction\n'
p23569
sS'cpp_type'
p23570
S'unsigned int'
p23571
sS'default'
p23572
S'1'
p23573
sS'name'
p23574
S'nz'
p23575
sS'required'
p23576
I00
sS'group_name'
p23577
Nsa(dp23578
S'name'
p23579
S'parallel_type'
p23580
sS'cpp_type'
p23581
S'MooseEnum'
p23582
sS'default'
p23583
S'DEFAULT'
p23584
sS'description'
p23585
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p23586
sS'required'
p23587
I00
sS'options'
p23588
S'DISTRIBUTED REPLICATED DEFAULT'
p23589
sS'group_name'
p23590
Nsa(dp23591
S'name'
p23592
S'partitioner'
p23593
sS'cpp_type'
p23594
S'MooseEnum'
p23595
sS'default'
p23596
S'default'
p23597
sS'description'
p23598
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p23599
sS'required'
p23600
I00
sS'options'
p23601
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p23602
sS'group_name'
p23603
S'Partitioning'
p23604
sa(dp23605
S'name'
p23606
S'patch_update_strategy'
p23607
sS'cpp_type'
p23608
S'MooseEnum'
p23609
sS'default'
p23610
S'never'
p23611
sS'description'
p23612
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p23613
sS'required'
p23614
I00
sS'options'
p23615
S'never always auto'
p23616
sS'group_name'
p23617
S'Advanced'
p23618
sa(dp23619
S'description'
p23620
g3
sS'cpp_type'
p23621
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p23622
sS'default'
p23623
S'GeneratedMesh'
p23624
sS'name'
p23625
S'type'
p23626
sS'required'
p23627
I00
sS'group_name'
p23628
Nsa(dp23629
S'description'
p23630
S'Upper X Coordinate of the generated mesh\n'
p23631
sS'cpp_type'
p23632
S'double'
p23633
sS'default'
p23634
S'1'
p23635
sS'name'
p23636
S'xmax'
p23637
sS'required'
p23638
I00
sS'group_name'
p23639
Nsa(dp23640
S'description'
p23641
S'Lower X Coordinate of the generated mesh\n'
p23642
sS'cpp_type'
p23643
S'double'
p23644
sS'default'
p23645
S'0'
p23646
sS'name'
p23647
S'xmin'
p23648
sS'required'
p23649
I00
sS'group_name'
p23650
Nsa(dp23651
S'description'
p23652
S'Upper Y Coordinate of the generated mesh\n'
p23653
sS'cpp_type'
p23654
S'double'
p23655
sS'default'
p23656
S'1'
p23657
sS'name'
p23658
S'ymax'
p23659
sS'required'
p23660
I00
sS'group_name'
p23661
Nsa(dp23662
S'description'
p23663
S'Lower Y Coordinate of the generated mesh\n'
p23664
sS'cpp_type'
p23665
S'double'
p23666
sS'default'
p23667
S'0'
p23668
sS'name'
p23669
S'ymin'
p23670
sS'required'
p23671
I00
sS'group_name'
p23672
Nsa(dp23673
S'description'
p23674
S'Upper Z Coordinate of the generated mesh\n'
p23675
sS'cpp_type'
p23676
S'double'
p23677
sS'default'
p23678
S'1'
p23679
sS'name'
p23680
S'zmax'
p23681
sS'required'
p23682
I00
sS'group_name'
p23683
Nsa(dp23684
S'description'
p23685
S'Lower Z Coordinate of the generated mesh\n'
p23686
sS'cpp_type'
p23687
S'double'
p23688
sS'default'
p23689
S'0'
p23690
sS'name'
p23691
S'zmin'
p23692
sS'required'
p23693
I00
sS'group_name'
p23694
NsasS'name'
p23695
S'/Mesh/<type>/GeneratedMesh'
p23696
sa(dp23697
S'description'
p23698
S'Generated mesh with the aspect ratio of a given image stack.\n'
p23699
sS'subblocks'
p23700
NsS'parameters'
p23701
(lp23702
(dp23703
S'description'
p23704
S'The amount by which to grow (or shrink) the cells in the x-direction.\n'
p23705
sS'cpp_type'
p23706
S'double'
p23707
sS'default'
p23708
S'1'
p23709
sS'name'
p23710
S'bias_x'
p23711
sS'required'
p23712
I00
sS'group_name'
p23713
Nsa(dp23714
S'description'
p23715
S'The amount by which to grow (or shrink) the cells in the y-direction.\n'
p23716
sS'cpp_type'
p23717
S'double'
p23718
sS'default'
p23719
S'1'
p23720
sS'name'
p23721
S'bias_y'
p23722
sS'required'
p23723
I00
sS'group_name'
p23724
Nsa(dp23725
S'description'
p23726
S'The amount by which to grow (or shrink) the cells in the z-direction.\n'
p23727
sS'cpp_type'
p23728
S'double'
p23729
sS'default'
p23730
S'1'
p23731
sS'name'
p23732
S'bias_z'
p23733
sS'required'
p23734
I00
sS'group_name'
p23735
Nsa(dp23736
S'description'
p23737
S'The number of mesh cells per pixel, must be <=1 \n'
p23738
sS'cpp_type'
p23739
S'double'
p23740
sS'default'
p23741
S'1'
p23742
sS'name'
p23743
S'cells_per_pixel'
p23744
sS'required'
p23745
I00
sS'group_name'
p23746
Nsa(dp23747
S'name'
p23748
S'centroid_partitioner_direction'
p23749
sS'cpp_type'
p23750
S'MooseEnum'
p23751
sS'default'
p23752
g3
sS'description'
p23753
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p23754
sS'required'
p23755
I00
sS'options'
p23756
S'x y z radial'
p23757
sS'group_name'
p23758
S'Partitioning'
p23759
sa(dp23760
S'description'
p23761
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p23762
sS'cpp_type'
p23763
S'bool'
p23764
sS'default'
p23765
S'1'
p23766
sS'name'
p23767
S'construct_node_list_from_side_list'
p23768
sS'required'
p23769
I00
sS'group_name'
p23770
S'Advanced'
p23771
sa(dp23772
S'description'
p23773
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23774
sS'cpp_type'
p23775
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p23776
sS'default'
p23777
g3
sS'name'
p23778
S'control_tags'
p23779
sS'required'
p23780
I00
sS'group_name'
p23781
S'Advanced'
p23782
sa(dp23783
S'name'
p23784
S'dim'
p23785
sS'cpp_type'
p23786
S'MooseEnum'
p23787
sS'default'
p23788
g3
sS'description'
p23789
S'The dimension of the mesh to be generated\n'
p23790
sS'required'
p23791
I01
sS'options'
p23792
S'1 2 3'
p23793
sS'group_name'
p23794
S'Main'
p23795
sa(dp23796
S'name'
p23797
S'distribution'
p23798
sS'cpp_type'
p23799
S'MooseEnum'
p23800
sS'default'
p23801
S'DEFAULT'
p23802
sS'description'
p23803
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p23804
sS'required'
p23805
I00
sS'options'
p23806
S'PARALLEL SERIAL DEFAULT'
p23807
sS'group_name'
p23808
Nsa(dp23809
S'name'
p23810
S'elem_type'
p23811
sS'cpp_type'
p23812
S'MooseEnum'
p23813
sS'default'
p23814
g3
sS'description'
p23815
S'The type of element from libMesh to generate (default: linear element for requested dimension)\n'
p23816
sS'required'
p23817
I00
sS'options'
p23818
S'EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14'
p23819
sS'group_name'
p23820
Nsa(dp23821
S'description'
p23822
S'Set the enabled status of the MooseObject.\n'
p23823
sS'cpp_type'
p23824
S'bool'
p23825
sS'default'
p23826
S'1'
p23827
sS'name'
p23828
S'enable'
p23829
sS'required'
p23830
I00
sS'group_name'
p23831
S'Advanced'
p23832
sa(dp23833
S'description'
p23834
S'Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n'
p23835
sS'cpp_type'
p23836
S'FileName'
p23837
sS'default'
p23838
g3
sS'name'
p23839
S'file'
p23840
sS'required'
p23841
I00
sS'group_name'
p23842
Nsa(dp23843
S'description'
p23844
S"Image file base to open, use this option when a stack of images must be read (ignored if 'file' is given)\n"
p23845
sS'cpp_type'
p23846
S'FileNameNoExtension'
p23847
sS'default'
p23848
g3
sS'name'
p23849
S'file_base'
p23850
sS'required'
p23851
I00
sS'group_name'
p23852
Nsa(dp23853
S'description'
p23854
S"Range of images to analyze, used with 'file_base' (ignored if 'file' is given)\n"
p23855
sS'cpp_type'
p23856
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p23857
sS'default'
p23858
g3
sS'name'
p23859
S'file_range'
p23860
sS'required'
p23861
I00
sS'group_name'
p23862
Nsa(dp23863
S'description'
p23864
S"Suffix of the file to open, e.g. 'png'\n"
p23865
sS'cpp_type'
p23866
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p23867
sS'default'
p23868
g3
sS'name'
p23869
S'file_suffix'
p23870
sS'required'
p23871
I00
sS'group_name'
p23872
Nsa(dp23873
S'description'
p23874
S'Grade mesh into boundaries according to Gauss-Lobatto quadrature spacing.\n'
p23875
sS'cpp_type'
p23876
S'bool'
p23877
sS'default'
p23878
S'0'
p23879
sS'name'
p23880
S'gauss_lobatto_grid'
p23881
sS'required'
p23882
I00
sS'group_name'
p23883
Nsa(dp23884
S'description'
p23885
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p23886
sS'cpp_type'
p23887
S'bool'
p23888
sS'default'
p23889
S'0'
p23890
sS'name'
p23891
S'ghost_point_neighbors'
p23892
sS'required'
p23893
I00
sS'group_name'
p23894
S'Advanced'
p23895
sa(dp23896
S'description'
p23897
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p23898
sS'cpp_type'
p23899
S'bool'
p23900
sS'default'
p23901
S'0'
p23902
sS'name'
p23903
S'nemesis'
p23904
sS'required'
p23905
I00
sS'group_name'
p23906
S'Advanced'
p23907
sa(dp23908
S'description'
p23909
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p23910
sS'cpp_type'
p23911
S'unsigned short'
p23912
sS'default'
p23913
S'1'
p23914
sS'name'
p23915
S'num_ghosted_layers'
p23916
sS'required'
p23917
I00
sS'group_name'
p23918
S'Advanced'
p23919
sa(dp23920
S'description'
p23921
S'Number of elements in the X direction\n'
p23922
sS'cpp_type'
p23923
S'unsigned int'
p23924
sS'default'
p23925
S'1'
p23926
sS'name'
p23927
S'nx'
p23928
sS'required'
p23929
I00
sS'group_name'
p23930
Nsa(dp23931
S'description'
p23932
S'Number of elements in the Y direction\n'
p23933
sS'cpp_type'
p23934
S'unsigned int'
p23935
sS'default'
p23936
S'1'
p23937
sS'name'
p23938
S'ny'
p23939
sS'required'
p23940
I00
sS'group_name'
p23941
Nsa(dp23942
S'description'
p23943
S'Number of elements in the Z direction\n'
p23944
sS'cpp_type'
p23945
S'unsigned int'
p23946
sS'default'
p23947
S'1'
p23948
sS'name'
p23949
S'nz'
p23950
sS'required'
p23951
I00
sS'group_name'
p23952
Nsa(dp23953
S'name'
p23954
S'parallel_type'
p23955
sS'cpp_type'
p23956
S'MooseEnum'
p23957
sS'default'
p23958
S'DEFAULT'
p23959
sS'description'
p23960
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p23961
sS'required'
p23962
I00
sS'options'
p23963
S'DISTRIBUTED REPLICATED DEFAULT'
p23964
sS'group_name'
p23965
Nsa(dp23966
S'name'
p23967
S'partitioner'
p23968
sS'cpp_type'
p23969
S'MooseEnum'
p23970
sS'default'
p23971
S'default'
p23972
sS'description'
p23973
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p23974
sS'required'
p23975
I00
sS'options'
p23976
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p23977
sS'group_name'
p23978
S'Partitioning'
p23979
sa(dp23980
S'name'
p23981
S'patch_update_strategy'
p23982
sS'cpp_type'
p23983
S'MooseEnum'
p23984
sS'default'
p23985
S'never'
p23986
sS'description'
p23987
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p23988
sS'required'
p23989
I00
sS'options'
p23990
S'never always auto'
p23991
sS'group_name'
p23992
S'Advanced'
p23993
sa(dp23994
S'description'
p23995
S'Whether or not to scale the image so its max dimension is 1\n'
p23996
sS'cpp_type'
p23997
S'bool'
p23998
sS'default'
p23999
S'1'
p24000
sS'name'
p24001
S'scale_to_one'
p24002
sS'required'
p24003
I00
sS'group_name'
p24004
Nsa(dp24005
S'description'
p24006
g3
sS'cpp_type'
p24007
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p24008
sS'default'
p24009
S'ImageMesh'
p24010
sS'name'
p24011
S'type'
p24012
sS'required'
p24013
I00
sS'group_name'
p24014
Nsa(dp24015
S'description'
p24016
S'Upper X Coordinate of the generated mesh\n'
p24017
sS'cpp_type'
p24018
S'double'
p24019
sS'default'
p24020
S'1'
p24021
sS'name'
p24022
S'xmax'
p24023
sS'required'
p24024
I00
sS'group_name'
p24025
Nsa(dp24026
S'description'
p24027
S'Lower X Coordinate of the generated mesh\n'
p24028
sS'cpp_type'
p24029
S'double'
p24030
sS'default'
p24031
S'0'
p24032
sS'name'
p24033
S'xmin'
p24034
sS'required'
p24035
I00
sS'group_name'
p24036
Nsa(dp24037
S'description'
p24038
S'Upper Y Coordinate of the generated mesh\n'
p24039
sS'cpp_type'
p24040
S'double'
p24041
sS'default'
p24042
S'1'
p24043
sS'name'
p24044
S'ymax'
p24045
sS'required'
p24046
I00
sS'group_name'
p24047
Nsa(dp24048
S'description'
p24049
S'Lower Y Coordinate of the generated mesh\n'
p24050
sS'cpp_type'
p24051
S'double'
p24052
sS'default'
p24053
S'0'
p24054
sS'name'
p24055
S'ymin'
p24056
sS'required'
p24057
I00
sS'group_name'
p24058
Nsa(dp24059
S'description'
p24060
S'Upper Z Coordinate of the generated mesh\n'
p24061
sS'cpp_type'
p24062
S'double'
p24063
sS'default'
p24064
S'1'
p24065
sS'name'
p24066
S'zmax'
p24067
sS'required'
p24068
I00
sS'group_name'
p24069
Nsa(dp24070
S'description'
p24071
S'Lower Z Coordinate of the generated mesh\n'
p24072
sS'cpp_type'
p24073
S'double'
p24074
sS'default'
p24075
S'0'
p24076
sS'name'
p24077
S'zmin'
p24078
sS'required'
p24079
I00
sS'group_name'
p24080
NsasS'name'
p24081
S'/Mesh/<type>/ImageMesh'
p24082
sa(dp24083
S'description'
p24084
S"Creates a 2D mesh from a specified set of unique 'tiles' meshes and a two-dimensional pattern.\n"
p24085
sS'subblocks'
p24086
NsS'parameters'
p24087
(lp24088
(dp24089
S'description'
p24090
S'name of the bottom (y) boundary\n'
p24091
sS'cpp_type'
p24092
S'BoundaryName'
p24093
sS'default'
p24094
S'bottom_boundary'
p24095
sS'name'
p24096
S'bottom_boundary'
p24097
sS'required'
p24098
I00
sS'group_name'
p24099
Nsa(dp24100
S'name'
p24101
S'centroid_partitioner_direction'
p24102
sS'cpp_type'
p24103
S'MooseEnum'
p24104
sS'default'
p24105
g3
sS'description'
p24106
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p24107
sS'required'
p24108
I00
sS'options'
p24109
S'x y z radial'
p24110
sS'group_name'
p24111
S'Partitioning'
p24112
sa(dp24113
S'description'
p24114
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p24115
sS'cpp_type'
p24116
S'bool'
p24117
sS'default'
p24118
S'1'
p24119
sS'name'
p24120
S'construct_node_list_from_side_list'
p24121
sS'required'
p24122
I00
sS'group_name'
p24123
S'Advanced'
p24124
sa(dp24125
S'description'
p24126
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24127
sS'cpp_type'
p24128
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p24129
sS'default'
p24130
g3
sS'name'
p24131
S'control_tags'
p24132
sS'required'
p24133
I00
sS'group_name'
p24134
S'Advanced'
p24135
sa(dp24136
S'name'
p24137
S'dim'
p24138
sS'cpp_type'
p24139
S'MooseEnum'
p24140
sS'default'
p24141
S'1'
p24142
sS'description'
p24143
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n'
p24144
sS'required'
p24145
I00
sS'options'
p24146
S'1 2 3'
p24147
sS'group_name'
p24148
S'Advanced'
p24149
sa(dp24150
S'name'
p24151
S'distribution'
p24152
sS'cpp_type'
p24153
S'MooseEnum'
p24154
sS'default'
p24155
S'DEFAULT'
p24156
sS'description'
p24157
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p24158
sS'required'
p24159
I00
sS'options'
p24160
S'PARALLEL SERIAL DEFAULT'
p24161
sS'group_name'
p24162
Nsa(dp24163
S'description'
p24164
S'Set the enabled status of the MooseObject.\n'
p24165
sS'cpp_type'
p24166
S'bool'
p24167
sS'default'
p24168
S'1'
p24169
sS'name'
p24170
S'enable'
p24171
sS'required'
p24172
I00
sS'group_name'
p24173
S'Advanced'
p24174
sa(dp24175
S'description'
p24176
S'The name of the mesh files to read.  They are automatically assigned ids starting with zero.\n'
p24177
sS'cpp_type'
p24178
S'std::__1::vector<MeshFileName, std::__1::allocator<MeshFileName> >'
p24179
sS'default'
p24180
g3
sS'name'
p24181
S'files'
p24182
sS'required'
p24183
I01
sS'group_name'
p24184
Nsa(dp24185
S'description'
p24186
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p24187
sS'cpp_type'
p24188
S'bool'
p24189
sS'default'
p24190
S'0'
p24191
sS'name'
p24192
S'ghost_point_neighbors'
p24193
sS'required'
p24194
I00
sS'group_name'
p24195
S'Advanced'
p24196
sa(dp24197
S'description'
p24198
S'name of the left (x) boundary\n'
p24199
sS'cpp_type'
p24200
S'BoundaryName'
p24201
sS'default'
p24202
S'left_boundary'
p24203
sS'name'
p24204
S'left_boundary'
p24205
sS'required'
p24206
I00
sS'group_name'
p24207
Nsa(dp24208
S'description'
p24209
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p24210
sS'cpp_type'
p24211
S'bool'
p24212
sS'default'
p24213
S'0'
p24214
sS'name'
p24215
S'nemesis'
p24216
sS'required'
p24217
I00
sS'group_name'
p24218
S'Advanced'
p24219
sa(dp24220
S'description'
p24221
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p24222
sS'cpp_type'
p24223
S'unsigned short'
p24224
sS'default'
p24225
S'1'
p24226
sS'name'
p24227
S'num_ghosted_layers'
p24228
sS'required'
p24229
I00
sS'group_name'
p24230
S'Advanced'
p24231
sa(dp24232
S'name'
p24233
S'parallel_type'
p24234
sS'cpp_type'
p24235
S'MooseEnum'
p24236
sS'default'
p24237
S'DEFAULT'
p24238
sS'description'
p24239
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p24240
sS'required'
p24241
I00
sS'options'
p24242
S'DISTRIBUTED REPLICATED DEFAULT'
p24243
sS'group_name'
p24244
Nsa(dp24245
S'name'
p24246
S'partitioner'
p24247
sS'cpp_type'
p24248
S'MooseEnum'
p24249
sS'default'
p24250
S'default'
p24251
sS'description'
p24252
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p24253
sS'required'
p24254
I00
sS'options'
p24255
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p24256
sS'group_name'
p24257
S'Partitioning'
p24258
sa(dp24259
S'name'
p24260
S'patch_update_strategy'
p24261
sS'cpp_type'
p24262
S'MooseEnum'
p24263
sS'default'
p24264
S'never'
p24265
sS'description'
p24266
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p24267
sS'required'
p24268
I00
sS'options'
p24269
S'never always auto'
p24270
sS'group_name'
p24271
S'Advanced'
p24272
sa(dp24273
S'description'
p24274
S'A double-indexed array starting with the upper-left corner\n'
p24275
sS'cpp_type'
p24276
S'std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >'
p24277
sS'default'
p24278
g3
sS'name'
p24279
S'pattern'
p24280
sS'required'
p24281
I01
sS'group_name'
p24282
Nsa(dp24283
S'description'
p24284
S'name of the right (x) boundary\n'
p24285
sS'cpp_type'
p24286
S'BoundaryName'
p24287
sS'default'
p24288
S'right_boundary'
p24289
sS'name'
p24290
S'right_boundary'
p24291
sS'required'
p24292
I00
sS'group_name'
p24293
Nsa(dp24294
S'description'
p24295
S'name of the top (y) boundary\n'
p24296
sS'cpp_type'
p24297
S'BoundaryName'
p24298
sS'default'
p24299
S'top_boundary'
p24300
sS'name'
p24301
S'top_boundary'
p24302
sS'required'
p24303
I00
sS'group_name'
p24304
Nsa(dp24305
S'description'
p24306
g3
sS'cpp_type'
p24307
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p24308
sS'default'
p24309
S'PatternedMesh'
p24310
sS'name'
p24311
S'type'
p24312
sS'required'
p24313
I00
sS'group_name'
p24314
Nsa(dp24315
S'description'
p24316
S'The tile width in the x direction\n'
p24317
sS'cpp_type'
p24318
S'double'
p24319
sS'default'
p24320
S'0'
p24321
sS'name'
p24322
S'x_width'
p24323
sS'required'
p24324
I00
sS'group_name'
p24325
Nsa(dp24326
S'description'
p24327
S'The tile width in the y direction\n'
p24328
sS'cpp_type'
p24329
S'double'
p24330
sS'default'
p24331
S'0'
p24332
sS'name'
p24333
S'y_width'
p24334
sS'required'
p24335
I00
sS'group_name'
p24336
Nsa(dp24337
S'description'
p24338
S'The tile width in the z direction\n'
p24339
sS'cpp_type'
p24340
S'double'
p24341
sS'default'
p24342
S'0'
p24343
sS'name'
p24344
S'z_width'
p24345
sS'required'
p24346
I00
sS'group_name'
p24347
NsasS'name'
p24348
S'/Mesh/<type>/PatternedMesh'
p24349
sa(dp24350
S'description'
p24351
S'Reads in all of the given meshes and stitches them all together into one mesh.\n'
p24352
sS'subblocks'
p24353
NsS'parameters'
p24354
(lp24355
(dp24356
S'name'
p24357
S'centroid_partitioner_direction'
p24358
sS'cpp_type'
p24359
S'MooseEnum'
p24360
sS'default'
p24361
g3
sS'description'
p24362
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p24363
sS'required'
p24364
I00
sS'options'
p24365
S'x y z radial'
p24366
sS'group_name'
p24367
S'Partitioning'
p24368
sa(dp24369
S'description'
p24370
S"Whether or not to erase the boundary IDs after they've been used for stitching.\n"
p24371
sS'cpp_type'
p24372
S'bool'
p24373
sS'default'
p24374
S'1'
p24375
sS'name'
p24376
S'clear_stitched_boundary_ids'
p24377
sS'required'
p24378
I00
sS'group_name'
p24379
Nsa(dp24380
S'description'
p24381
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p24382
sS'cpp_type'
p24383
S'bool'
p24384
sS'default'
p24385
S'1'
p24386
sS'name'
p24387
S'construct_node_list_from_side_list'
p24388
sS'required'
p24389
I00
sS'group_name'
p24390
S'Advanced'
p24391
sa(dp24392
S'description'
p24393
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24394
sS'cpp_type'
p24395
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p24396
sS'default'
p24397
g3
sS'name'
p24398
S'control_tags'
p24399
sS'required'
p24400
I00
sS'group_name'
p24401
S'Advanced'
p24402
sa(dp24403
S'name'
p24404
S'dim'
p24405
sS'cpp_type'
p24406
S'MooseEnum'
p24407
sS'default'
p24408
S'1'
p24409
sS'description'
p24410
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n'
p24411
sS'required'
p24412
I00
sS'options'
p24413
S'1 2 3'
p24414
sS'group_name'
p24415
S'Advanced'
p24416
sa(dp24417
S'name'
p24418
S'distribution'
p24419
sS'cpp_type'
p24420
S'MooseEnum'
p24421
sS'default'
p24422
S'DEFAULT'
p24423
sS'description'
p24424
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p24425
sS'required'
p24426
I00
sS'options'
p24427
S'PARALLEL SERIAL DEFAULT'
p24428
sS'group_name'
p24429
Nsa(dp24430
S'description'
p24431
S'Set the enabled status of the MooseObject.\n'
p24432
sS'cpp_type'
p24433
S'bool'
p24434
sS'default'
p24435
S'1'
p24436
sS'name'
p24437
S'enable'
p24438
sS'required'
p24439
I00
sS'group_name'
p24440
S'Advanced'
p24441
sa(dp24442
S'description'
p24443
S"The name of the mesh files to read.  These mesh files will be 'stitched' into the current mesh in this order.\n"
p24444
sS'cpp_type'
p24445
S'std::__1::vector<MeshFileName, std::__1::allocator<MeshFileName> >'
p24446
sS'default'
p24447
g3
sS'name'
p24448
S'files'
p24449
sS'required'
p24450
I01
sS'group_name'
p24451
Nsa(dp24452
S'description'
p24453
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p24454
sS'cpp_type'
p24455
S'bool'
p24456
sS'default'
p24457
S'0'
p24458
sS'name'
p24459
S'ghost_point_neighbors'
p24460
sS'required'
p24461
I00
sS'group_name'
p24462
S'Advanced'
p24463
sa(dp24464
S'description'
p24465
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p24466
sS'cpp_type'
p24467
S'bool'
p24468
sS'default'
p24469
S'0'
p24470
sS'name'
p24471
S'nemesis'
p24472
sS'required'
p24473
I00
sS'group_name'
p24474
S'Advanced'
p24475
sa(dp24476
S'description'
p24477
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p24478
sS'cpp_type'
p24479
S'unsigned short'
p24480
sS'default'
p24481
S'1'
p24482
sS'name'
p24483
S'num_ghosted_layers'
p24484
sS'required'
p24485
I00
sS'group_name'
p24486
S'Advanced'
p24487
sa(dp24488
S'name'
p24489
S'parallel_type'
p24490
sS'cpp_type'
p24491
S'MooseEnum'
p24492
sS'default'
p24493
S'DEFAULT'
p24494
sS'description'
p24495
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p24496
sS'required'
p24497
I00
sS'options'
p24498
S'DISTRIBUTED REPLICATED DEFAULT'
p24499
sS'group_name'
p24500
Nsa(dp24501
S'name'
p24502
S'partitioner'
p24503
sS'cpp_type'
p24504
S'MooseEnum'
p24505
sS'default'
p24506
S'default'
p24507
sS'description'
p24508
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p24509
sS'required'
p24510
I00
sS'options'
p24511
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p24512
sS'group_name'
p24513
S'Partitioning'
p24514
sa(dp24515
S'name'
p24516
S'patch_update_strategy'
p24517
sS'cpp_type'
p24518
S'MooseEnum'
p24519
sS'default'
p24520
S'never'
p24521
sS'description'
p24522
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p24523
sS'required'
p24524
I00
sS'options'
p24525
S'never always auto'
p24526
sS'group_name'
p24527
S'Advanced'
p24528
sa(dp24529
S'description'
p24530
S'Pairs of boundary names (one after the other) to stitch together for each step.\n'
p24531
sS'cpp_type'
p24532
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p24533
sS'default'
p24534
g3
sS'name'
p24535
S'stitch_boundaries'
p24536
sS'required'
p24537
I01
sS'group_name'
p24538
Nsa(dp24539
S'description'
p24540
g3
sS'cpp_type'
p24541
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p24542
sS'default'
p24543
S'StitchedMesh'
p24544
sS'name'
p24545
S'type'
p24546
sS'required'
p24547
I00
sS'group_name'
p24548
NsasS'name'
p24549
S'/Mesh/<type>/StitchedMesh'
p24550
sa(dp24551
S'description'
p24552
S'Use the supplied mesh and create a tiled grid by repeating this mesh in the x,y, and z directions.\n'
p24553
sS'subblocks'
p24554
NsS'parameters'
p24555
(lp24556
(dp24557
S'description'
p24558
S'name of the back (z) boundary\n'
p24559
sS'cpp_type'
p24560
S'BoundaryName'
p24561
sS'default'
p24562
S'back_boundary'
p24563
sS'name'
p24564
S'back_boundary'
p24565
sS'required'
p24566
I00
sS'group_name'
p24567
Nsa(dp24568
S'description'
p24569
S'name of the bottom (y) boundary\n'
p24570
sS'cpp_type'
p24571
S'BoundaryName'
p24572
sS'default'
p24573
S'bottom_boundary'
p24574
sS'name'
p24575
S'bottom_boundary'
p24576
sS'required'
p24577
I00
sS'group_name'
p24578
Nsa(dp24579
S'name'
p24580
S'centroid_partitioner_direction'
p24581
sS'cpp_type'
p24582
S'MooseEnum'
p24583
sS'default'
p24584
g3
sS'description'
p24585
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p24586
sS'required'
p24587
I00
sS'options'
p24588
S'x y z radial'
p24589
sS'group_name'
p24590
S'Partitioning'
p24591
sa(dp24592
S'description'
p24593
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p24594
sS'cpp_type'
p24595
S'bool'
p24596
sS'default'
p24597
S'1'
p24598
sS'name'
p24599
S'construct_node_list_from_side_list'
p24600
sS'required'
p24601
I00
sS'group_name'
p24602
S'Advanced'
p24603
sa(dp24604
S'description'
p24605
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24606
sS'cpp_type'
p24607
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p24608
sS'default'
p24609
g3
sS'name'
p24610
S'control_tags'
p24611
sS'required'
p24612
I00
sS'group_name'
p24613
S'Advanced'
p24614
sa(dp24615
S'name'
p24616
S'dim'
p24617
sS'cpp_type'
p24618
S'MooseEnum'
p24619
sS'default'
p24620
S'1'
p24621
sS'description'
p24622
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n'
p24623
sS'required'
p24624
I00
sS'options'
p24625
S'1 2 3'
p24626
sS'group_name'
p24627
S'Advanced'
p24628
sa(dp24629
S'name'
p24630
S'distribution'
p24631
sS'cpp_type'
p24632
S'MooseEnum'
p24633
sS'default'
p24634
S'DEFAULT'
p24635
sS'description'
p24636
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p24637
sS'required'
p24638
I00
sS'options'
p24639
S'PARALLEL SERIAL DEFAULT'
p24640
sS'group_name'
p24641
Nsa(dp24642
S'description'
p24643
S'Set the enabled status of the MooseObject.\n'
p24644
sS'cpp_type'
p24645
S'bool'
p24646
sS'default'
p24647
S'1'
p24648
sS'name'
p24649
S'enable'
p24650
sS'required'
p24651
I00
sS'group_name'
p24652
S'Advanced'
p24653
sa(dp24654
S'description'
p24655
S'The name of the mesh file to read\n'
p24656
sS'cpp_type'
p24657
S'MeshFileName'
p24658
sS'default'
p24659
g3
sS'name'
p24660
S'file'
p24661
sS'required'
p24662
I01
sS'group_name'
p24663
Nsa(dp24664
S'description'
p24665
S'name of the front (z) boundary\n'
p24666
sS'cpp_type'
p24667
S'BoundaryName'
p24668
sS'default'
p24669
S'front_boundary'
p24670
sS'name'
p24671
S'front_boundary'
p24672
sS'required'
p24673
I00
sS'group_name'
p24674
Nsa(dp24675
S'description'
p24676
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p24677
sS'cpp_type'
p24678
S'bool'
p24679
sS'default'
p24680
S'0'
p24681
sS'name'
p24682
S'ghost_point_neighbors'
p24683
sS'required'
p24684
I00
sS'group_name'
p24685
S'Advanced'
p24686
sa(dp24687
S'description'
p24688
S'name of the left (x) boundary\n'
p24689
sS'cpp_type'
p24690
S'BoundaryName'
p24691
sS'default'
p24692
S'left_boundary'
p24693
sS'name'
p24694
S'left_boundary'
p24695
sS'required'
p24696
I00
sS'group_name'
p24697
Nsa(dp24698
S'description'
p24699
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p24700
sS'cpp_type'
p24701
S'bool'
p24702
sS'default'
p24703
S'0'
p24704
sS'name'
p24705
S'nemesis'
p24706
sS'required'
p24707
I00
sS'group_name'
p24708
S'Advanced'
p24709
sa(dp24710
S'description'
p24711
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p24712
sS'cpp_type'
p24713
S'unsigned short'
p24714
sS'default'
p24715
S'1'
p24716
sS'name'
p24717
S'num_ghosted_layers'
p24718
sS'required'
p24719
I00
sS'group_name'
p24720
S'Advanced'
p24721
sa(dp24722
S'name'
p24723
S'parallel_type'
p24724
sS'cpp_type'
p24725
S'MooseEnum'
p24726
sS'default'
p24727
S'DEFAULT'
p24728
sS'description'
p24729
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p24730
sS'required'
p24731
I00
sS'options'
p24732
S'DISTRIBUTED REPLICATED DEFAULT'
p24733
sS'group_name'
p24734
Nsa(dp24735
S'name'
p24736
S'partitioner'
p24737
sS'cpp_type'
p24738
S'MooseEnum'
p24739
sS'default'
p24740
S'default'
p24741
sS'description'
p24742
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p24743
sS'required'
p24744
I00
sS'options'
p24745
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p24746
sS'group_name'
p24747
S'Partitioning'
p24748
sa(dp24749
S'name'
p24750
S'patch_update_strategy'
p24751
sS'cpp_type'
p24752
S'MooseEnum'
p24753
sS'default'
p24754
S'never'
p24755
sS'description'
p24756
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p24757
sS'required'
p24758
I00
sS'options'
p24759
S'never always auto'
p24760
sS'group_name'
p24761
S'Advanced'
p24762
sa(dp24763
S'description'
p24764
S'name of the right (x) boundary\n'
p24765
sS'cpp_type'
p24766
S'BoundaryName'
p24767
sS'default'
p24768
S'right_boundary'
p24769
sS'name'
p24770
S'right_boundary'
p24771
sS'required'
p24772
I00
sS'group_name'
p24773
Nsa(dp24774
S'description'
p24775
S'name of the top (y) boundary\n'
p24776
sS'cpp_type'
p24777
S'BoundaryName'
p24778
sS'default'
p24779
S'top_boundary'
p24780
sS'name'
p24781
S'top_boundary'
p24782
sS'required'
p24783
I00
sS'group_name'
p24784
Nsa(dp24785
S'description'
p24786
g3
sS'cpp_type'
p24787
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p24788
sS'default'
p24789
S'TiledMesh'
p24790
sS'name'
p24791
S'type'
p24792
sS'required'
p24793
I00
sS'group_name'
p24794
Nsa(dp24795
S'description'
p24796
S'Number of tiles to stitch together (left to right) in the x-direction\n'
p24797
sS'cpp_type'
p24798
S'unsigned int'
p24799
sS'default'
p24800
S'1'
p24801
sS'name'
p24802
S'x_tiles'
p24803
sS'required'
p24804
I00
sS'group_name'
p24805
Nsa(dp24806
S'description'
p24807
S'The tile width in the x direction\n'
p24808
sS'cpp_type'
p24809
S'double'
p24810
sS'default'
p24811
S'0'
p24812
sS'name'
p24813
S'x_width'
p24814
sS'required'
p24815
I00
sS'group_name'
p24816
Nsa(dp24817
S'description'
p24818
S'Number of tiles to stitch together (top to bottom) in the y-direction\n'
p24819
sS'cpp_type'
p24820
S'unsigned int'
p24821
sS'default'
p24822
S'1'
p24823
sS'name'
p24824
S'y_tiles'
p24825
sS'required'
p24826
I00
sS'group_name'
p24827
Nsa(dp24828
S'description'
p24829
S'The tile width in the y direction\n'
p24830
sS'cpp_type'
p24831
S'double'
p24832
sS'default'
p24833
S'0'
p24834
sS'name'
p24835
S'y_width'
p24836
sS'required'
p24837
I00
sS'group_name'
p24838
Nsa(dp24839
S'description'
p24840
S'Number of tiles to stitch together (front to back) in the z-direction\n'
p24841
sS'cpp_type'
p24842
S'unsigned int'
p24843
sS'default'
p24844
S'1'
p24845
sS'name'
p24846
S'z_tiles'
p24847
sS'required'
p24848
I00
sS'group_name'
p24849
Nsa(dp24850
S'description'
p24851
S'The tile width in the z direction\n'
p24852
sS'cpp_type'
p24853
S'double'
p24854
sS'default'
p24855
S'0'
p24856
sS'name'
p24857
S'z_width'
p24858
sS'required'
p24859
I00
sS'group_name'
p24860
NsasS'name'
p24861
S'/Mesh/<type>/TiledMesh'
p24862
sasS'parameters'
p24863
NsS'name'
p24864
S'/Mesh/<type>'
p24865
sa(dp24866
S'description'
p24867
g3
sS'subblocks'
p24868
(lp24869
(dp24870
S'description'
p24871
g3
sS'subblocks'
p24872
NsS'parameters'
p24873
(lp24874
(dp24875
S'description'
p24876
S'Master side ID\n'
p24877
sS'cpp_type'
p24878
S'BoundaryName'
p24879
sS'default'
p24880
g3
sS'name'
p24881
S'master'
p24882
sS'required'
p24883
I01
sS'group_name'
p24884
Nsa(dp24885
S'description'
p24886
S'Slave side ID\n'
p24887
sS'cpp_type'
p24888
S'BoundaryName'
p24889
sS'default'
p24890
g3
sS'name'
p24891
S'slave'
p24892
sS'required'
p24893
I01
sS'group_name'
p24894
Nsa(dp24895
S'description'
p24896
S'Subdomain name that is the mortar interface\n'
p24897
sS'cpp_type'
p24898
S'SubdomainName'
p24899
sS'default'
p24900
g3
sS'name'
p24901
S'subdomain'
p24902
sS'required'
p24903
I01
sS'group_name'
p24904
NsasS'name'
p24905
S'/Mesh/MortarInterfaces/*'
p24906
sasS'parameters'
p24907
NsS'name'
p24908
S'/Mesh/MortarInterfaces'
p24909
sa(dp24910
S'description'
p24911
g3
sS'subblocks'
p24912
(lp24913
(dp24914
S'description'
p24915
g3
sS'subblocks'
p24916
(lp24917
(dp24918
S'description'
p24919
g3
sS'subblocks'
p24920
NsS'parameters'
p24921
(lp24922
(dp24923
S'name'
p24924
S'centroid_partitioner_direction'
p24925
sS'cpp_type'
p24926
S'MooseEnum'
p24927
sS'default'
p24928
g3
sS'description'
p24929
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p24930
sS'required'
p24931
I00
sS'options'
p24932
S'x y z radial'
p24933
sS'group_name'
p24934
Nsa(dp24935
S'description'
p24936
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24937
sS'cpp_type'
p24938
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p24939
sS'default'
p24940
g3
sS'name'
p24941
S'control_tags'
p24942
sS'required'
p24943
I00
sS'group_name'
p24944
S'Advanced'
p24945
sa(dp24946
S'description'
p24947
S'Set the enabled status of the MooseObject.\n'
p24948
sS'cpp_type'
p24949
S'bool'
p24950
sS'default'
p24951
S'1'
p24952
sS'name'
p24953
S'enable'
p24954
sS'required'
p24955
I00
sS'group_name'
p24956
S'Advanced'
p24957
sa(dp24958
S'name'
p24959
S'partitioner'
p24960
sS'cpp_type'
p24961
S'MooseEnum'
p24962
sS'default'
p24963
g3
sS'description'
p24964
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p24965
sS'required'
p24966
I01
sS'options'
p24967
S'metis parmetis linear centroid hilbert_sfc morton_sfc'
p24968
sS'group_name'
p24969
Nsa(dp24970
S'description'
p24971
g3
sS'cpp_type'
p24972
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p24973
sS'default'
p24974
S'LibmeshPartitioner'
p24975
sS'name'
p24976
S'type'
p24977
sS'required'
p24978
I00
sS'group_name'
p24979
NsasS'name'
p24980
S'/Mesh/Partitioner/<type>/LibmeshPartitioner'
p24981
sasS'parameters'
p24982
NsS'name'
p24983
S'/Mesh/Partitioner/<type>'
p24984
sasS'parameters'
p24985
(lp24986
(dp24987
S'description'
p24988
S'A string representing the Moose Object that will be built by this Action\n'
p24989
sS'cpp_type'
p24990
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p24991
sS'default'
p24992
g3
sS'name'
p24993
S'type'
p24994
sS'required'
p24995
I01
sS'group_name'
p24996
NsasS'name'
p24997
S'/Mesh/Partitioner'
p24998
sasS'parameters'
p24999
(lp25000
(dp25001
S'description'
p25002
S'The variables corresponding to the x y z displacements of the mesh.  If this is provided then the displacements will be taken into account during the computation.\n'
p25003
sS'cpp_type'
p25004
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25005
sS'default'
p25006
g3
sS'name'
p25007
S'displacements'
p25008
sS'required'
p25009
I00
sS'group_name'
p25010
Nsa(dp25011
S'description'
p25012
S'IDs of the block id/name pairs\n'
p25013
sS'cpp_type'
p25014
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p25015
sS'default'
p25016
g3
sS'name'
p25017
S'block_id'
p25018
sS'required'
p25019
I00
sS'group_name'
p25020
S'Add Names'
p25021
sa(dp25022
S'description'
p25023
S'Names of the block id/name pairs (must correspond with "block_id"\n'
p25024
sS'cpp_type'
p25025
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p25026
sS'default'
p25027
g3
sS'name'
p25028
S'block_name'
p25029
sS'required'
p25030
I00
sS'group_name'
p25031
S'Add Names'
p25032
sa(dp25033
S'description'
p25034
S'IDs of the boundary id/name pairs\n'
p25035
sS'cpp_type'
p25036
S'std::__1::vector<short, std::__1::allocator<short> >'
p25037
sS'default'
p25038
g3
sS'name'
p25039
S'boundary_id'
p25040
sS'required'
p25041
I00
sS'group_name'
p25042
S'Add Names'
p25043
sa(dp25044
S'description'
p25045
S'Names of the boundary id/name pairs (must correspond with "boundary_id"\n'
p25046
sS'cpp_type'
p25047
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p25048
sS'default'
p25049
g3
sS'name'
p25050
S'boundary_name'
p25051
sS'required'
p25052
I00
sS'group_name'
p25053
S'Add Names'
p25054
sa(dp25055
S'description'
p25056
S'If true, construct side lists from the nodesets in the mesh (i.e. if every node on a give side is in a nodeset then add that side to a sideset\n'
p25057
sS'cpp_type'
p25058
S'bool'
p25059
sS'default'
p25060
S'0'
p25061
sS'name'
p25062
S'construct_side_list_from_node_list'
p25063
sS'required'
p25064
I00
sS'group_name'
p25065
S'Advanced'
p25066
sa(dp25067
S'description'
p25068
S'Boundaries to be ghosted if using Nemesis\n'
p25069
sS'cpp_type'
p25070
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p25071
sS'default'
p25072
g3
sS'name'
p25073
S'ghosted_boundaries'
p25074
sS'required'
p25075
I00
sS'group_name'
p25076
S'Advanced'
p25077
sa(dp25078
S'description'
p25079
S"If you are using ghosted boundaries you will want to set this value to a vector of amounts to inflate the bounding boxes by.  ie if you are running a 3D problem you might set it to '0.2 0.1 0.4'\n"
p25080
sS'cpp_type'
p25081
S'std::__1::vector<double, std::__1::allocator<double> >'
p25082
sS'default'
p25083
g3
sS'name'
p25084
S'ghosted_boundaries_inflation'
p25085
sS'required'
p25086
I00
sS'group_name'
p25087
S'Advanced'
p25088
sa(dp25089
S'description'
p25090
S'The number of nodes to consider in the NearestNode neighborhood.\n'
p25091
sS'cpp_type'
p25092
S'unsigned int'
p25093
sS'default'
p25094
S'40'
p25095
sS'name'
p25096
S'patch_size'
p25097
sS'required'
p25098
I00
sS'group_name'
p25099
S'Advanced'
p25100
sa(dp25101
S'description'
p25102
S'Converts a first order mesh to a second order mesh.  Note: This is NOT needed if you are reading an actual first order mesh.\n'
p25103
sS'cpp_type'
p25104
S'bool'
p25105
sS'default'
p25106
S'0'
p25107
sS'name'
p25108
S'second_order'
p25109
sS'required'
p25110
I00
sS'group_name'
p25111
S'Advanced'
p25112
sa(dp25113
S'description'
p25114
S"If true the mesh won't be partitioned. This may cause large load imbalanced but is currently required if you have a simulation containing uniform refinement, adaptivity and stateful material properties\n"
p25115
sS'cpp_type'
p25116
S'bool'
p25117
sS'default'
p25118
S'0'
p25119
sS'name'
p25120
S'skip_partitioning'
p25121
sS'required'
p25122
I00
sS'group_name'
p25123
S'Advanced'
p25124
sa(dp25125
S'description'
p25126
S'A string representing the Moose Object that will be built by this Action\n'
p25127
sS'cpp_type'
p25128
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25129
sS'default'
p25130
S'FileMesh'
p25131
sS'name'
p25132
S'type'
p25133
sS'required'
p25134
I01
sS'group_name'
p25135
Nsa(dp25136
S'description'
p25137
S'Specify the level of uniform refinement applied to the initial mesh\n'
p25138
sS'cpp_type'
p25139
S'unsigned int'
p25140
sS'default'
p25141
S'0'
p25142
sS'name'
p25143
S'uniform_refine'
p25144
sS'required'
p25145
I00
sS'group_name'
p25146
NsasS'name'
p25147
S'/Mesh'
p25148
sa(dp25149
S'description'
p25150
g3
sS'subblocks'
p25151
(lp25152
(dp25153
S'description'
p25154
g3
sS'subblocks'
p25155
NsS'parameters'
p25156
(lp25157
(dp25158
S'description'
p25159
S'A string representing the Moose Object that will be built by this Action\n'
p25160
sS'cpp_type'
p25161
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25162
sS'default'
p25163
g3
sS'name'
p25164
S'type'
p25165
sS'required'
p25166
I01
sS'group_name'
p25167
NsasS'name'
p25168
S'/MeshModifiers/*'
p25169
sa(dp25170
S'description'
p25171
g3
sS'subblocks'
p25172
NsS'parameters'
p25173
(lp25174
(dp25175
S'description'
p25176
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25177
sS'cpp_type'
p25178
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25179
sS'default'
p25180
g3
sS'name'
p25181
S'control_tags'
p25182
sS'required'
p25183
I00
sS'group_name'
p25184
S'Advanced'
p25185
sa(dp25186
S'description'
p25187
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25188
sS'cpp_type'
p25189
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25190
sS'default'
p25191
g3
sS'name'
p25192
S'depends_on'
p25193
sS'required'
p25194
I00
sS'group_name'
p25195
Nsa(dp25196
S'description'
p25197
S'Set the enabled status of the MooseObject.\n'
p25198
sS'cpp_type'
p25199
S'bool'
p25200
sS'default'
p25201
S'1'
p25202
sS'name'
p25203
S'enable'
p25204
sS'required'
p25205
I00
sS'group_name'
p25206
S'Advanced'
p25207
sa(dp25208
S'description'
p25209
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p25210
sS'cpp_type'
p25211
S'bool'
p25212
sS'default'
p25213
S'0'
p25214
sS'name'
p25215
S'fixed_normal'
p25216
sS'required'
p25217
I00
sS'group_name'
p25218
Nsa(dp25219
S'description'
p25220
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25221
sS'cpp_type'
p25222
S'bool'
p25223
sS'default'
p25224
S'0'
p25225
sS'name'
p25226
S'force_prepare'
p25227
sS'required'
p25228
I00
sS'group_name'
p25229
Nsa(dp25230
S'description'
p25231
g3
sS'cpp_type'
p25232
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25233
sS'default'
p25234
S'AddAllSideSetsByNormals'
p25235
sS'name'
p25236
S'type'
p25237
sS'required'
p25238
I00
sS'group_name'
p25239
Nsa(dp25240
S'description'
p25241
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p25242
sS'cpp_type'
p25243
S'double'
p25244
sS'default'
p25245
S'0.1'
p25246
sS'name'
p25247
S'variance'
p25248
sS'required'
p25249
I00
sS'group_name'
p25250
NsasS'name'
p25251
S'/MeshModifiers/AddAllSideSetsByNormals'
p25252
sa(dp25253
S'description'
p25254
g3
sS'subblocks'
p25255
NsS'parameters'
p25256
(lp25257
(dp25258
S'description'
p25259
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25260
sS'cpp_type'
p25261
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25262
sS'default'
p25263
g3
sS'name'
p25264
S'control_tags'
p25265
sS'required'
p25266
I00
sS'group_name'
p25267
S'Advanced'
p25268
sa(dp25269
S'description'
p25270
S'The nodes with coordinates you want to be in the nodeset (Either this parameter or "nodes" must be supplied).\n'
p25271
sS'cpp_type'
p25272
S'std::__1::vector<double, std::__1::allocator<double> >'
p25273
sS'default'
p25274
g3
sS'name'
p25275
S'coord'
p25276
sS'required'
p25277
I00
sS'group_name'
p25278
Nsa(dp25279
S'description'
p25280
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25281
sS'cpp_type'
p25282
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25283
sS'default'
p25284
g3
sS'name'
p25285
S'depends_on'
p25286
sS'required'
p25287
I00
sS'group_name'
p25288
Nsa(dp25289
S'description'
p25290
S'Set the enabled status of the MooseObject.\n'
p25291
sS'cpp_type'
p25292
S'bool'
p25293
sS'default'
p25294
S'1'
p25295
sS'name'
p25296
S'enable'
p25297
sS'required'
p25298
I00
sS'group_name'
p25299
S'Advanced'
p25300
sa(dp25301
S'description'
p25302
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25303
sS'cpp_type'
p25304
S'bool'
p25305
sS'default'
p25306
S'0'
p25307
sS'name'
p25308
S'force_prepare'
p25309
sS'required'
p25310
I00
sS'group_name'
p25311
Nsa(dp25312
S'description'
p25313
S'The name of the boundary to create\n'
p25314
sS'cpp_type'
p25315
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p25316
sS'default'
p25317
g3
sS'name'
p25318
S'new_boundary'
p25319
sS'required'
p25320
I01
sS'group_name'
p25321
Nsa(dp25322
S'description'
p25323
S'The nodes you want to be in the nodeset (Either this parameter or "coord" must be supplied).\n'
p25324
sS'cpp_type'
p25325
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p25326
sS'default'
p25327
g3
sS'name'
p25328
S'nodes'
p25329
sS'required'
p25330
I00
sS'group_name'
p25331
Nsa(dp25332
S'description'
p25333
S'The tolerance in which two nodes are considered identical\n'
p25334
sS'cpp_type'
p25335
S'double'
p25336
sS'default'
p25337
S'1e-06'
p25338
sS'name'
p25339
S'tolerance'
p25340
sS'required'
p25341
I00
sS'group_name'
p25342
Nsa(dp25343
S'description'
p25344
g3
sS'cpp_type'
p25345
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25346
sS'default'
p25347
S'AddExtraNodeset'
p25348
sS'name'
p25349
S'type'
p25350
sS'required'
p25351
I00
sS'group_name'
p25352
NsasS'name'
p25353
S'/MeshModifiers/AddExtraNodeset'
p25354
sa(dp25355
S'description'
p25356
g3
sS'subblocks'
p25357
NsS'parameters'
p25358
(lp25359
(dp25360
S'description'
p25361
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25362
sS'cpp_type'
p25363
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25364
sS'default'
p25365
g3
sS'name'
p25366
S'control_tags'
p25367
sS'required'
p25368
I00
sS'group_name'
p25369
S'Advanced'
p25370
sa(dp25371
S'description'
p25372
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25373
sS'cpp_type'
p25374
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25375
sS'default'
p25376
g3
sS'name'
p25377
S'depends_on'
p25378
sS'required'
p25379
I00
sS'group_name'
p25380
Nsa(dp25381
S'description'
p25382
S'New subdomain IDs of all elements\n'
p25383
sS'cpp_type'
p25384
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p25385
sS'default'
p25386
g3
sS'name'
p25387
S'element_ids'
p25388
sS'required'
p25389
I00
sS'group_name'
p25390
Nsa(dp25391
S'description'
p25392
S'Set the enabled status of the MooseObject.\n'
p25393
sS'cpp_type'
p25394
S'bool'
p25395
sS'default'
p25396
S'1'
p25397
sS'name'
p25398
S'enable'
p25399
sS'required'
p25400
I00
sS'group_name'
p25401
S'Advanced'
p25402
sa(dp25403
S'description'
p25404
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25405
sS'cpp_type'
p25406
S'bool'
p25407
sS'default'
p25408
S'0'
p25409
sS'name'
p25410
S'force_prepare'
p25411
sS'required'
p25412
I00
sS'group_name'
p25413
Nsa(dp25414
S'description'
p25415
S'New subdomain IDs of all elements\n'
p25416
sS'cpp_type'
p25417
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p25418
sS'default'
p25419
g3
sS'name'
p25420
S'subdomain_ids'
p25421
sS'required'
p25422
I01
sS'group_name'
p25423
Nsa(dp25424
S'description'
p25425
g3
sS'cpp_type'
p25426
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25427
sS'default'
p25428
S'AssignElementSubdomainID'
p25429
sS'name'
p25430
S'type'
p25431
sS'required'
p25432
I00
sS'group_name'
p25433
NsasS'name'
p25434
S'/MeshModifiers/AssignElementSubdomainID'
p25435
sa(dp25436
S'description'
p25437
g3
sS'subblocks'
p25438
NsS'parameters'
p25439
(lp25440
(dp25441
S'description'
p25442
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25443
sS'cpp_type'
p25444
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25445
sS'default'
p25446
g3
sS'name'
p25447
S'control_tags'
p25448
sS'required'
p25449
I00
sS'group_name'
p25450
S'Advanced'
p25451
sa(dp25452
S'description'
p25453
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25454
sS'cpp_type'
p25455
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25456
sS'default'
p25457
g3
sS'name'
p25458
S'depends_on'
p25459
sS'required'
p25460
I00
sS'group_name'
p25461
Nsa(dp25462
S'description'
p25463
S'Set the enabled status of the MooseObject.\n'
p25464
sS'cpp_type'
p25465
S'bool'
p25466
sS'default'
p25467
S'1'
p25468
sS'name'
p25469
S'enable'
p25470
sS'required'
p25471
I00
sS'group_name'
p25472
S'Advanced'
p25473
sa(dp25474
S'description'
p25475
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25476
sS'cpp_type'
p25477
S'bool'
p25478
sS'default'
p25479
S'0'
p25480
sS'name'
p25481
S'force_prepare'
p25482
sS'required'
p25483
I00
sS'group_name'
p25484
Nsa(dp25485
S'description'
p25486
S'New subdomain IDs of all elements\n'
p25487
sS'cpp_type'
p25488
S'unsigned short'
p25489
sS'default'
p25490
g3
sS'name'
p25491
S'subdomain_id'
p25492
sS'required'
p25493
I01
sS'group_name'
p25494
Nsa(dp25495
S'description'
p25496
g3
sS'cpp_type'
p25497
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25498
sS'default'
p25499
S'AssignSubdomainID'
p25500
sS'name'
p25501
S'type'
p25502
sS'required'
p25503
I00
sS'group_name'
p25504
NsasS'name'
p25505
S'/MeshModifiers/AssignSubdomainID'
p25506
sa(dp25507
S'description'
p25508
g3
sS'subblocks'
p25509
NsS'parameters'
p25510
(lp25511
(dp25512
S'description'
p25513
S'The block to be deleted\n'
p25514
sS'cpp_type'
p25515
S'unsigned short'
p25516
sS'default'
p25517
g3
sS'name'
p25518
S'block_id'
p25519
sS'required'
p25520
I01
sS'group_name'
p25521
Nsa(dp25522
S'description'
p25523
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25524
sS'cpp_type'
p25525
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25526
sS'default'
p25527
g3
sS'name'
p25528
S'control_tags'
p25529
sS'required'
p25530
I00
sS'group_name'
p25531
S'Advanced'
p25532
sa(dp25533
S'description'
p25534
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25535
sS'cpp_type'
p25536
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25537
sS'default'
p25538
g3
sS'name'
p25539
S'depends_on'
p25540
sS'required'
p25541
I00
sS'group_name'
p25542
Nsa(dp25543
S'description'
p25544
S'Set the enabled status of the MooseObject.\n'
p25545
sS'cpp_type'
p25546
S'bool'
p25547
sS'default'
p25548
S'1'
p25549
sS'name'
p25550
S'enable'
p25551
sS'required'
p25552
I00
sS'group_name'
p25553
S'Advanced'
p25554
sa(dp25555
S'description'
p25556
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25557
sS'cpp_type'
p25558
S'bool'
p25559
sS'default'
p25560
S'0'
p25561
sS'name'
p25562
S'force_prepare'
p25563
sS'required'
p25564
I00
sS'group_name'
p25565
Nsa(dp25566
S'description'
p25567
g3
sS'cpp_type'
p25568
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25569
sS'default'
p25570
S'BlockDeleter'
p25571
sS'name'
p25572
S'type'
p25573
sS'required'
p25574
I00
sS'group_name'
p25575
NsasS'name'
p25576
S'/MeshModifiers/BlockDeleter'
p25577
sa(dp25578
S'description'
p25579
g3
sS'subblocks'
p25580
NsS'parameters'
p25581
(lp25582
(dp25583
S'description'
p25584
S'The bottom left point (in x,y,z with spaces in-between) of the box to select the nodes.\n'
p25585
sS'cpp_type'
p25586
S'libMesh::VectorValue<double>'
p25587
sS'default'
p25588
g3
sS'name'
p25589
S'bottom_left'
p25590
sS'required'
p25591
I01
sS'group_name'
p25592
Nsa(dp25593
S'description'
p25594
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25595
sS'cpp_type'
p25596
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25597
sS'default'
p25598
g3
sS'name'
p25599
S'control_tags'
p25600
sS'required'
p25601
I00
sS'group_name'
p25602
S'Advanced'
p25603
sa(dp25604
S'description'
p25605
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25606
sS'cpp_type'
p25607
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25608
sS'default'
p25609
g3
sS'name'
p25610
S'depends_on'
p25611
sS'required'
p25612
I00
sS'group_name'
p25613
Nsa(dp25614
S'description'
p25615
S'Set the enabled status of the MooseObject.\n'
p25616
sS'cpp_type'
p25617
S'bool'
p25618
sS'default'
p25619
S'1'
p25620
sS'name'
p25621
S'enable'
p25622
sS'required'
p25623
I00
sS'group_name'
p25624
S'Advanced'
p25625
sa(dp25626
S'description'
p25627
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25628
sS'cpp_type'
p25629
S'bool'
p25630
sS'default'
p25631
S'0'
p25632
sS'name'
p25633
S'force_prepare'
p25634
sS'required'
p25635
I00
sS'group_name'
p25636
Nsa(dp25637
S'name'
p25638
S'location'
p25639
sS'cpp_type'
p25640
S'MooseEnum'
p25641
sS'default'
p25642
S'INSIDE'
p25643
sS'description'
p25644
S'Control of where the nodeset is to be set\n'
p25645
sS'required'
p25646
I00
sS'options'
p25647
S'INSIDE OUTSIDE'
p25648
sS'group_name'
p25649
Nsa(dp25650
S'description'
p25651
S'The name of the nodeset to create\n'
p25652
sS'cpp_type'
p25653
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p25654
sS'default'
p25655
g3
sS'name'
p25656
S'new_boundary'
p25657
sS'required'
p25658
I01
sS'group_name'
p25659
Nsa(dp25660
S'description'
p25661
S'The bottom left point (in x,y,z with spaces in-between) of the box to select the nodes.\n'
p25662
sS'cpp_type'
p25663
S'libMesh::VectorValue<double>'
p25664
sS'default'
p25665
g3
sS'name'
p25666
S'top_right'
p25667
sS'required'
p25668
I01
sS'group_name'
p25669
Nsa(dp25670
S'description'
p25671
g3
sS'cpp_type'
p25672
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25673
sS'default'
p25674
S'BoundingBoxNodeSet'
p25675
sS'name'
p25676
S'type'
p25677
sS'required'
p25678
I00
sS'group_name'
p25679
NsasS'name'
p25680
S'/MeshModifiers/BoundingBoxNodeSet'
p25681
sa(dp25682
S'description'
p25683
S'Break boundaries based on the subdomains to which their sides are attached. Naming convention for the new boundaries will be the old boundary name plus "_to_" plus the subdomain name\n'
p25684
sS'subblocks'
p25685
NsS'parameters'
p25686
(lp25687
(dp25688
S'description'
p25689
S'Boundaries to be broken. Default means to break all boundaries\n'
p25690
sS'cpp_type'
p25691
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p25692
sS'default'
p25693
g3
sS'name'
p25694
S'boundaries'
p25695
sS'required'
p25696
I00
sS'group_name'
p25697
Nsa(dp25698
S'description'
p25699
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25700
sS'cpp_type'
p25701
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25702
sS'default'
p25703
g3
sS'name'
p25704
S'control_tags'
p25705
sS'required'
p25706
I00
sS'group_name'
p25707
S'Advanced'
p25708
sa(dp25709
S'description'
p25710
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25711
sS'cpp_type'
p25712
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25713
sS'default'
p25714
g3
sS'name'
p25715
S'depends_on'
p25716
sS'required'
p25717
I00
sS'group_name'
p25718
Nsa(dp25719
S'description'
p25720
S'Set the enabled status of the MooseObject.\n'
p25721
sS'cpp_type'
p25722
S'bool'
p25723
sS'default'
p25724
S'1'
p25725
sS'name'
p25726
S'enable'
p25727
sS'required'
p25728
I00
sS'group_name'
p25729
S'Advanced'
p25730
sa(dp25731
S'description'
p25732
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25733
sS'cpp_type'
p25734
S'bool'
p25735
sS'default'
p25736
S'0'
p25737
sS'name'
p25738
S'force_prepare'
p25739
sS'required'
p25740
I00
sS'group_name'
p25741
Nsa(dp25742
S'description'
p25743
g3
sS'cpp_type'
p25744
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25745
sS'default'
p25746
S'BreakBoundaryOnSubdomain'
p25747
sS'name'
p25748
S'type'
p25749
sS'required'
p25750
I00
sS'group_name'
p25751
NsasS'name'
p25752
S'/MeshModifiers/BreakBoundaryOnSubdomain'
p25753
sa(dp25754
S'description'
p25755
g3
sS'subblocks'
p25756
NsS'parameters'
p25757
(lp25758
(dp25759
S'description'
p25760
S'The image RGB-component to return, leaving this blank will result in a greyscale value for the image to be created. The component number is zero based, i.e. 0 returns the first (RED) component of the image.\n'
p25761
sS'cpp_type'
p25762
S'unsigned int'
p25763
sS'default'
p25764
g3
sS'name'
p25765
S'component'
p25766
sS'required'
p25767
I00
sS'group_name'
p25768
Nsa(dp25769
S'description'
p25770
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25771
sS'cpp_type'
p25772
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25773
sS'default'
p25774
g3
sS'name'
p25775
S'control_tags'
p25776
sS'required'
p25777
I00
sS'group_name'
p25778
S'Advanced'
p25779
sa(dp25780
S'description'
p25781
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25782
sS'cpp_type'
p25783
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25784
sS'default'
p25785
g3
sS'name'
p25786
S'depends_on'
p25787
sS'required'
p25788
I00
sS'group_name'
p25789
Nsa(dp25790
S'description'
p25791
S'x,y,z dimensions of the image (defaults to mesh dimensions)\n'
p25792
sS'cpp_type'
p25793
S'libMesh::Point'
p25794
sS'default'
p25795
g3
sS'name'
p25796
S'dimensions'
p25797
sS'required'
p25798
I00
sS'group_name'
p25799
Nsa(dp25800
S'description'
p25801
S'Set the enabled status of the MooseObject.\n'
p25802
sS'cpp_type'
p25803
S'bool'
p25804
sS'default'
p25805
S'1'
p25806
sS'name'
p25807
S'enable'
p25808
sS'required'
p25809
I00
sS'group_name'
p25810
S'Advanced'
p25811
sa(dp25812
S'description'
p25813
S'Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n'
p25814
sS'cpp_type'
p25815
S'FileName'
p25816
sS'default'
p25817
g3
sS'name'
p25818
S'file'
p25819
sS'required'
p25820
I00
sS'group_name'
p25821
Nsa(dp25822
S'description'
p25823
S"Image file base to open, use this option when a stack of images must be read (ignored if 'file' is given)\n"
p25824
sS'cpp_type'
p25825
S'FileNameNoExtension'
p25826
sS'default'
p25827
g3
sS'name'
p25828
S'file_base'
p25829
sS'required'
p25830
I00
sS'group_name'
p25831
Nsa(dp25832
S'description'
p25833
S"Range of images to analyze, used with 'file_base' (ignored if 'file' is given)\n"
p25834
sS'cpp_type'
p25835
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p25836
sS'default'
p25837
g3
sS'name'
p25838
S'file_range'
p25839
sS'required'
p25840
I00
sS'group_name'
p25841
Nsa(dp25842
S'description'
p25843
S"Suffix of the file to open, e.g. 'png'\n"
p25844
sS'cpp_type'
p25845
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25846
sS'default'
p25847
g3
sS'name'
p25848
S'file_suffix'
p25849
sS'required'
p25850
I00
sS'group_name'
p25851
Nsa(dp25852
S'description'
p25853
S'Flip the image along the x-axis\n'
p25854
sS'cpp_type'
p25855
S'bool'
p25856
sS'default'
p25857
S'0'
p25858
sS'name'
p25859
S'flip_x'
p25860
sS'required'
p25861
I00
sS'group_name'
p25862
S'Flip'
p25863
sa(dp25864
S'description'
p25865
S'Flip the image along the y-axis\n'
p25866
sS'cpp_type'
p25867
S'bool'
p25868
sS'default'
p25869
S'0'
p25870
sS'name'
p25871
S'flip_y'
p25872
sS'required'
p25873
I00
sS'group_name'
p25874
S'Flip'
p25875
sa(dp25876
S'description'
p25877
S'Flip the image along the z-axis\n'
p25878
sS'cpp_type'
p25879
S'bool'
p25880
sS'default'
p25881
S'0'
p25882
sS'name'
p25883
S'flip_z'
p25884
sS'required'
p25885
I00
sS'group_name'
p25886
S'Flip'
p25887
sa(dp25888
S'description'
p25889
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25890
sS'cpp_type'
p25891
S'bool'
p25892
sS'default'
p25893
S'0'
p25894
sS'name'
p25895
S'force_prepare'
p25896
sS'required'
p25897
I00
sS'group_name'
p25898
Nsa(dp25899
S'description'
p25900
S'The value to set for data less than the threshold value\n'
p25901
sS'cpp_type'
p25902
S'double'
p25903
sS'default'
p25904
S'0'
p25905
sS'name'
p25906
S'lower_value'
p25907
sS'required'
p25908
I00
sS'group_name'
p25909
S'Threshold'
p25910
sa(dp25911
S'description'
p25912
S'Origin of the image (defaults to mesh origin)\n'
p25913
sS'cpp_type'
p25914
S'libMesh::Point'
p25915
sS'default'
p25916
g3
sS'name'
p25917
S'origin'
p25918
sS'required'
p25919
I00
sS'group_name'
p25920
Nsa(dp25921
S'description'
p25922
S'Multiplier to apply to all pixel values; occurs after shifting\n'
p25923
sS'cpp_type'
p25924
S'double'
p25925
sS'default'
p25926
S'1'
p25927
sS'name'
p25928
S'scale'
p25929
sS'required'
p25930
I00
sS'group_name'
p25931
S'Rescale'
p25932
sa(dp25933
S'description'
p25934
S'Value to add to all pixels; occurs prior to scaling\n'
p25935
sS'cpp_type'
p25936
S'double'
p25937
sS'default'
p25938
S'0'
p25939
sS'name'
p25940
S'shift'
p25941
sS'required'
p25942
I00
sS'group_name'
p25943
S'Rescale'
p25944
sa(dp25945
S'description'
p25946
S'The threshold value\n'
p25947
sS'cpp_type'
p25948
S'double'
p25949
sS'default'
p25950
g3
sS'name'
p25951
S'threshold'
p25952
sS'required'
p25953
I00
sS'group_name'
p25954
S'Threshold'
p25955
sa(dp25956
S'description'
p25957
g3
sS'cpp_type'
p25958
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25959
sS'default'
p25960
S'ImageSubdomain'
p25961
sS'name'
p25962
S'type'
p25963
sS'required'
p25964
I00
sS'group_name'
p25965
Nsa(dp25966
S'description'
p25967
S'The value to set for data greater than the threshold value\n'
p25968
sS'cpp_type'
p25969
S'double'
p25970
sS'default'
p25971
S'1'
p25972
sS'name'
p25973
S'upper_value'
p25974
sS'required'
p25975
I00
sS'group_name'
p25976
S'Threshold'
p25977
sasS'name'
p25978
S'/MeshModifiers/ImageSubdomain'
p25979
sa(dp25980
S'description'
p25981
g3
sS'subblocks'
p25982
NsS'parameters'
p25983
(lp25984
(dp25985
S'description'
p25986
S'The boundary that will be applied to the bottom of the extruded mesh\n'
p25987
sS'cpp_type'
p25988
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p25989
sS'default'
p25990
g3
sS'name'
p25991
S'bottom_sideset'
p25992
sS'required'
p25993
I00
sS'group_name'
p25994
Nsa(dp25995
S'description'
p25996
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25997
sS'cpp_type'
p25998
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25999
sS'default'
p26000
g3
sS'name'
p26001
S'control_tags'
p26002
sS'required'
p26003
I00
sS'group_name'
p26004
S'Advanced'
p26005
sa(dp26006
S'description'
p26007
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p26008
sS'cpp_type'
p26009
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26010
sS'default'
p26011
g3
sS'name'
p26012
S'depends_on'
p26013
sS'required'
p26014
I00
sS'group_name'
p26015
Nsa(dp26016
S'description'
p26017
S'Set the enabled status of the MooseObject.\n'
p26018
sS'cpp_type'
p26019
S'bool'
p26020
sS'default'
p26021
S'1'
p26022
sS'name'
p26023
S'enable'
p26024
sS'required'
p26025
I00
sS'group_name'
p26026
S'Advanced'
p26027
sa(dp26028
S'description'
p26029
S'The subdomains that will be remapped for specific layers\n'
p26030
sS'cpp_type'
p26031
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p26032
sS'default'
p26033
g3
sS'name'
p26034
S'existing_subdomains'
p26035
sS'required'
p26036
I00
sS'group_name'
p26037
Nsa(dp26038
S'description'
p26039
S'The direction and length of the extrusion\n'
p26040
sS'cpp_type'
p26041
S'libMesh::VectorValue<double>'
p26042
sS'default'
p26043
g3
sS'name'
p26044
S'extrusion_vector'
p26045
sS'required'
p26046
I01
sS'group_name'
p26047
Nsa(dp26048
S'description'
p26049
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p26050
sS'cpp_type'
p26051
S'bool'
p26052
sS'default'
p26053
S'0'
p26054
sS'name'
p26055
S'force_prepare'
p26056
sS'required'
p26057
I00
sS'group_name'
p26058
Nsa(dp26059
S'description'
p26060
S'The layers where the "existing_subdomain" will be remapped to new ids\n'
p26061
sS'cpp_type'
p26062
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p26063
sS'default'
p26064
g3
sS'name'
p26065
S'layers'
p26066
sS'required'
p26067
I00
sS'group_name'
p26068
Nsa(dp26069
S'description'
p26070
S'The list of new ids, This list should be either length "existing_subdomains" or "existing_subdomains" * layers\n'
p26071
sS'cpp_type'
p26072
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p26073
sS'default'
p26074
g3
sS'name'
p26075
S'new_ids'
p26076
sS'required'
p26077
I00
sS'group_name'
p26078
Nsa(dp26079
S'description'
p26080
S'The number of layers in the extruded mesh\n'
p26081
sS'cpp_type'
p26082
S'unsigned int'
p26083
sS'default'
p26084
S'1'
p26085
sS'name'
p26086
S'num_layers'
p26087
sS'required'
p26088
I00
sS'group_name'
p26089
Nsa(dp26090
S'description'
p26091
S'The boundary that will be to the top of the extruded mesh\n'
p26092
sS'cpp_type'
p26093
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p26094
sS'default'
p26095
g3
sS'name'
p26096
S'top_sideset'
p26097
sS'required'
p26098
I00
sS'group_name'
p26099
Nsa(dp26100
S'description'
p26101
g3
sS'cpp_type'
p26102
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26103
sS'default'
p26104
S'MeshExtruder'
p26105
sS'name'
p26106
S'type'
p26107
sS'required'
p26108
I00
sS'group_name'
p26109
NsasS'name'
p26110
S'/MeshModifiers/MeshExtruder'
p26111
sa(dp26112
S'description'
p26113
g3
sS'subblocks'
p26114
NsS'parameters'
p26115
(lp26116
(dp26117
S'description'
p26118
S'Subdomain id to set for inside/outside the bounding box\n'
p26119
sS'cpp_type'
p26120
S'unsigned short'
p26121
sS'default'
p26122
g3
sS'name'
p26123
S'block_id'
p26124
sS'required'
p26125
I01
sS'group_name'
p26126
Nsa(dp26127
S'description'
p26128
S"The center (many people spell this 'center') of the box.\n"
p26129
sS'cpp_type'
p26130
S'libMesh::Point'
p26131
sS'default'
p26132
g3
sS'name'
p26133
S'center'
p26134
sS'required'
p26135
I01
sS'group_name'
p26136
Nsa(dp26137
S'description'
p26138
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26139
sS'cpp_type'
p26140
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26141
sS'default'
p26142
g3
sS'name'
p26143
S'control_tags'
p26144
sS'required'
p26145
I00
sS'group_name'
p26146
S'Advanced'
p26147
sa(dp26148
S'description'
p26149
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p26150
sS'cpp_type'
p26151
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26152
sS'default'
p26153
g3
sS'name'
p26154
S'depends_on'
p26155
sS'required'
p26156
I00
sS'group_name'
p26157
Nsa(dp26158
S'description'
p26159
S'Set the enabled status of the MooseObject.\n'
p26160
sS'cpp_type'
p26161
S'bool'
p26162
sS'default'
p26163
S'1'
p26164
sS'name'
p26165
S'enable'
p26166
sS'required'
p26167
I00
sS'group_name'
p26168
S'Advanced'
p26169
sa(dp26170
S'description'
p26171
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p26172
sS'cpp_type'
p26173
S'bool'
p26174
sS'default'
p26175
S'0'
p26176
sS'name'
p26177
S'force_prepare'
p26178
sS'required'
p26179
I00
sS'group_name'
p26180
Nsa(dp26181
S'description'
p26182
S'The height of the box\n'
p26183
sS'cpp_type'
p26184
S'double'
p26185
sS'default'
p26186
g3
sS'name'
p26187
S'height'
p26188
sS'required'
p26189
I01
sS'group_name'
p26190
Nsa(dp26191
S'description'
p26192
S'The length of the box\n'
p26193
sS'cpp_type'
p26194
S'double'
p26195
sS'default'
p26196
g3
sS'name'
p26197
S'length'
p26198
sS'required'
p26199
I01
sS'group_name'
p26200
Nsa(dp26201
S'description'
p26202
S'The direction along which the length is oriented (must be perpendicular to width_direction).\n'
p26203
sS'cpp_type'
p26204
S'libMesh::VectorValue<double>'
p26205
sS'default'
p26206
g3
sS'name'
p26207
S'length_direction'
p26208
sS'required'
p26209
I01
sS'group_name'
p26210
Nsa(dp26211
S'name'
p26212
S'location'
p26213
sS'cpp_type'
p26214
S'MooseEnum'
p26215
sS'default'
p26216
S'INSIDE'
p26217
sS'description'
p26218
S'Control of where the subdomain id is to be set\n'
p26219
sS'required'
p26220
I00
sS'options'
p26221
S'INSIDE OUTSIDE'
p26222
sS'group_name'
p26223
Nsa(dp26224
S'description'
p26225
g3
sS'cpp_type'
p26226
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26227
sS'default'
p26228
S'OrientedSubdomainBoundingBox'
p26229
sS'name'
p26230
S'type'
p26231
sS'required'
p26232
I00
sS'group_name'
p26233
Nsa(dp26234
S'description'
p26235
S'The width of the box\n'
p26236
sS'cpp_type'
p26237
S'double'
p26238
sS'default'
p26239
g3
sS'name'
p26240
S'width'
p26241
sS'required'
p26242
I01
sS'group_name'
p26243
Nsa(dp26244
S'description'
p26245
S'The direction along which the width is oriented.\n'
p26246
sS'cpp_type'
p26247
S'libMesh::VectorValue<double>'
p26248
sS'default'
p26249
g3
sS'name'
p26250
S'width_direction'
p26251
sS'required'
p26252
I01
sS'group_name'
p26253
NsasS'name'
p26254
S'/MeshModifiers/OrientedSubdomainBoundingBox'
p26255
sa(dp26256
S'description'
p26257
S"A MeshModifier that adds element's sides to a sideset if the centroid satisfies the combinatorial_geometry expression, (and optionally) if one of the side's elements is in included_subdomain_ids and if it features the correct normal.\n"
p26258
sS'subblocks'
p26259
NsS'parameters'
p26260
(lp26261
(dp26262
S'description'
p26263
S'Function expression encoding a combinatorial geometry\n'
p26264
sS'cpp_type'
p26265
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26266
sS'default'
p26267
g3
sS'name'
p26268
S'combinatorial_geometry'
p26269
sS'required'
p26270
I01
sS'group_name'
p26271
Nsa(dp26272
S'description'
p26273
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p26274
sS'cpp_type'
p26275
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26276
sS'default'
p26277
g3
sS'name'
p26278
S'constant_expressions'
p26279
sS'required'
p26280
I00
sS'group_name'
p26281
Nsa(dp26282
S'description'
p26283
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p26284
sS'cpp_type'
p26285
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26286
sS'default'
p26287
g3
sS'name'
p26288
S'constant_names'
p26289
sS'required'
p26290
I00
sS'group_name'
p26291
Nsa(dp26292
S'description'
p26293
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26294
sS'cpp_type'
p26295
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26296
sS'default'
p26297
g3
sS'name'
p26298
S'control_tags'
p26299
sS'required'
p26300
I00
sS'group_name'
p26301
S'Advanced'
p26302
sa(dp26303
S'description'
p26304
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p26305
sS'cpp_type'
p26306
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26307
sS'default'
p26308
g3
sS'name'
p26309
S'depends_on'
p26310
sS'required'
p26311
I00
sS'group_name'
p26312
Nsa(dp26313
S'description'
p26314
S'Disable the function parser algebraic optimizer\n'
p26315
sS'cpp_type'
p26316
S'bool'
p26317
sS'default'
p26318
S'0'
p26319
sS'name'
p26320
S'disable_fpoptimizer'
p26321
sS'required'
p26322
I00
sS'group_name'
p26323
S'Advanced'
p26324
sa(dp26325
S'description'
p26326
S'Set the enabled status of the MooseObject.\n'
p26327
sS'cpp_type'
p26328
S'bool'
p26329
sS'default'
p26330
S'1'
p26331
sS'name'
p26332
S'enable'
p26333
sS'required'
p26334
I00
sS'group_name'
p26335
S'Advanced'
p26336
sa(dp26337
S'description'
p26338
S'Enable cacheing of function derivatives for faster startup time\n'
p26339
sS'cpp_type'
p26340
S'bool'
p26341
sS'default'
p26342
S'1'
p26343
sS'name'
p26344
S'enable_ad_cache'
p26345
sS'required'
p26346
I00
sS'group_name'
p26347
S'Advanced'
p26348
sa(dp26349
S'description'
p26350
S'Enable automatic immediate optimization of derivatives\n'
p26351
sS'cpp_type'
p26352
S'bool'
p26353
sS'default'
p26354
S'1'
p26355
sS'name'
p26356
S'enable_auto_optimize'
p26357
sS'required'
p26358
I00
sS'group_name'
p26359
S'Advanced'
p26360
sa(dp26361
S'description'
p26362
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p26363
sS'cpp_type'
p26364
S'bool'
p26365
sS'default'
p26366
S'1'
p26367
sS'name'
p26368
S'enable_jit'
p26369
sS'required'
p26370
I00
sS'group_name'
p26371
S'Advanced'
p26372
sa(dp26373
S'description'
p26374
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p26375
sS'cpp_type'
p26376
S'bool'
p26377
sS'default'
p26378
S'0'
p26379
sS'name'
p26380
S'fail_on_evalerror'
p26381
sS'required'
p26382
I00
sS'group_name'
p26383
S'Advanced'
p26384
sa(dp26385
S'description'
p26386
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p26387
sS'cpp_type'
p26388
S'bool'
p26389
sS'default'
p26390
S'0'
p26391
sS'name'
p26392
S'fixed_normal'
p26393
sS'required'
p26394
I00
sS'group_name'
p26395
Nsa(dp26396
S'description'
p26397
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p26398
sS'cpp_type'
p26399
S'bool'
p26400
sS'default'
p26401
S'0'
p26402
sS'name'
p26403
S'force_prepare'
p26404
sS'required'
p26405
I00
sS'group_name'
p26406
Nsa(dp26407
S'description'
p26408
S'A set of subdomain ids whose sides will be included in the new sidesets\n'
p26409
sS'cpp_type'
p26410
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p26411
sS'default'
p26412
g3
sS'name'
p26413
S'included_subdomain_ids'
p26414
sS'required'
p26415
I00
sS'group_name'
p26416
Nsa(dp26417
S'description'
p26418
S'The name of the new sideset\n'
p26419
sS'cpp_type'
p26420
S'BoundaryName'
p26421
sS'default'
p26422
g3
sS'name'
p26423
S'new_sideset_name'
p26424
sS'required'
p26425
I01
sS'group_name'
p26426
Nsa(dp26427
S'description'
p26428
S'If provided specifies the normal vector on sides that are added to the new \n'
p26429
sS'cpp_type'
p26430
S'libMesh::Point'
p26431
sS'default'
p26432
S'0 0 0'
p26433
sS'name'
p26434
S'normal'
p26435
sS'required'
p26436
I00
sS'group_name'
p26437
Nsa(dp26438
S'description'
p26439
g3
sS'cpp_type'
p26440
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26441
sS'default'
p26442
S'ParsedAddSideset'
p26443
sS'name'
p26444
S'type'
p26445
sS'required'
p26446
I00
sS'group_name'
p26447
Nsa(dp26448
S'description'
p26449
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p26450
sS'cpp_type'
p26451
S'double'
p26452
sS'default'
p26453
S'0.1'
p26454
sS'name'
p26455
S'variance'
p26456
sS'required'
p26457
I00
sS'group_name'
p26458
NsasS'name'
p26459
S'/MeshModifiers/ParsedAddSideset'
p26460
sa(dp26461
S'description'
p26462
S'MeshModifier that uses a parsed expression (combinatorial_geometry) to determine if an element (aka its centroid) is inside the combinatorial geometry and assigns a new block id.\n'
p26463
sS'subblocks'
p26464
NsS'parameters'
p26465
(lp26466
(dp26467
S'description'
p26468
S'Subdomain id to set for inside of the combinatorial\n'
p26469
sS'cpp_type'
p26470
S'unsigned short'
p26471
sS'default'
p26472
g3
sS'name'
p26473
S'block_id'
p26474
sS'required'
p26475
I01
sS'group_name'
p26476
Nsa(dp26477
S'description'
p26478
S'Subdomain name to set for inside of the combinatorial\n'
p26479
sS'cpp_type'
p26480
S'SubdomainName'
p26481
sS'default'
p26482
g3
sS'name'
p26483
S'block_name'
p26484
sS'required'
p26485
I00
sS'group_name'
p26486
Nsa(dp26487
S'description'
p26488
S'Function expression encoding a combinatorial geometry\n'
p26489
sS'cpp_type'
p26490
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26491
sS'default'
p26492
g3
sS'name'
p26493
S'combinatorial_geometry'
p26494
sS'required'
p26495
I01
sS'group_name'
p26496
Nsa(dp26497
S'description'
p26498
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p26499
sS'cpp_type'
p26500
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26501
sS'default'
p26502
g3
sS'name'
p26503
S'constant_expressions'
p26504
sS'required'
p26505
I00
sS'group_name'
p26506
Nsa(dp26507
S'description'
p26508
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p26509
sS'cpp_type'
p26510
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26511
sS'default'
p26512
g3
sS'name'
p26513
S'constant_names'
p26514
sS'required'
p26515
I00
sS'group_name'
p26516
Nsa(dp26517
S'description'
p26518
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26519
sS'cpp_type'
p26520
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26521
sS'default'
p26522
g3
sS'name'
p26523
S'control_tags'
p26524
sS'required'
p26525
I00
sS'group_name'
p26526
S'Advanced'
p26527
sa(dp26528
S'description'
p26529
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p26530
sS'cpp_type'
p26531
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26532
sS'default'
p26533
g3
sS'name'
p26534
S'depends_on'
p26535
sS'required'
p26536
I00
sS'group_name'
p26537
Nsa(dp26538
S'description'
p26539
S'Disable the function parser algebraic optimizer\n'
p26540
sS'cpp_type'
p26541
S'bool'
p26542
sS'default'
p26543
S'0'
p26544
sS'name'
p26545
S'disable_fpoptimizer'
p26546
sS'required'
p26547
I00
sS'group_name'
p26548
S'Advanced'
p26549
sa(dp26550
S'description'
p26551
S'Set the enabled status of the MooseObject.\n'
p26552
sS'cpp_type'
p26553
S'bool'
p26554
sS'default'
p26555
S'1'
p26556
sS'name'
p26557
S'enable'
p26558
sS'required'
p26559
I00
sS'group_name'
p26560
S'Advanced'
p26561
sa(dp26562
S'description'
p26563
S'Enable cacheing of function derivatives for faster startup time\n'
p26564
sS'cpp_type'
p26565
S'bool'
p26566
sS'default'
p26567
S'1'
p26568
sS'name'
p26569
S'enable_ad_cache'
p26570
sS'required'
p26571
I00
sS'group_name'
p26572
S'Advanced'
p26573
sa(dp26574
S'description'
p26575
S'Enable automatic immediate optimization of derivatives\n'
p26576
sS'cpp_type'
p26577
S'bool'
p26578
sS'default'
p26579
S'1'
p26580
sS'name'
p26581
S'enable_auto_optimize'
p26582
sS'required'
p26583
I00
sS'group_name'
p26584
S'Advanced'
p26585
sa(dp26586
S'description'
p26587
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p26588
sS'cpp_type'
p26589
S'bool'
p26590
sS'default'
p26591
S'1'
p26592
sS'name'
p26593
S'enable_jit'
p26594
sS'required'
p26595
I00
sS'group_name'
p26596
S'Advanced'
p26597
sa(dp26598
S'description'
p26599
S'A set of subdomain ids that will not changed even if they are inside/outside the combinatorial geometry\n'
p26600
sS'cpp_type'
p26601
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p26602
sS'default'
p26603
g3
sS'name'
p26604
S'excluded_subdomain_ids'
p26605
sS'required'
p26606
I00
sS'group_name'
p26607
Nsa(dp26608
S'description'
p26609
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p26610
sS'cpp_type'
p26611
S'bool'
p26612
sS'default'
p26613
S'0'
p26614
sS'name'
p26615
S'fail_on_evalerror'
p26616
sS'required'
p26617
I00
sS'group_name'
p26618
S'Advanced'
p26619
sa(dp26620
S'description'
p26621
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p26622
sS'cpp_type'
p26623
S'bool'
p26624
sS'default'
p26625
S'0'
p26626
sS'name'
p26627
S'force_prepare'
p26628
sS'required'
p26629
I00
sS'group_name'
p26630
Nsa(dp26631
S'description'
p26632
g3
sS'cpp_type'
p26633
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26634
sS'default'
p26635
S'ParsedSubdomainMeshModifier'
p26636
sS'name'
p26637
S'type'
p26638
sS'required'
p26639
I00
sS'group_name'
p26640
NsasS'name'
p26641
S'/MeshModifiers/ParsedSubdomainMeshModifier'
p26642
sa(dp26643
S'description'
p26644
S'RenameBlock re-numbers or re-names an old_block_id or old_block_name with a new_block_id or new_block_name\n'
p26645
sS'subblocks'
p26646
NsS'parameters'
p26647
(lp26648
(dp26649
S'description'
p26650
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26651
sS'cpp_type'
p26652
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26653
sS'default'
p26654
g3
sS'name'
p26655
S'control_tags'
p26656
sS'required'
p26657
I00
sS'group_name'
p26658
S'Advanced'
p26659
sa(dp26660
S'description'
p26661
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p26662
sS'cpp_type'
p26663
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26664
sS'default'
p26665
g3
sS'name'
p26666
S'depends_on'
p26667
sS'required'
p26668
I00
sS'group_name'
p26669
Nsa(dp26670
S'description'
p26671
S'Set the enabled status of the MooseObject.\n'
p26672
sS'cpp_type'
p26673
S'bool'
p26674
sS'default'
p26675
S'1'
p26676
sS'name'
p26677
S'enable'
p26678
sS'required'
p26679
I00
sS'group_name'
p26680
S'Advanced'
p26681
sa(dp26682
S'description'
p26683
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p26684
sS'cpp_type'
p26685
S'bool'
p26686
sS'default'
p26687
S'0'
p26688
sS'name'
p26689
S'force_prepare'
p26690
sS'required'
p26691
I00
sS'group_name'
p26692
Nsa(dp26693
S'description'
p26694
S'Elements with the old block number (or name) will be given this block number.  You must supply either new_block_id or new_block_name.  You may supply a vector of new_block_id, in which case the old_block information must also be a vector.\n'
p26695
sS'cpp_type'
p26696
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p26697
sS'default'
p26698
g3
sS'name'
p26699
S'new_block_id'
p26700
sS'required'
p26701
I00
sS'group_name'
p26702
Nsa(dp26703
S'description'
p26704
S'Elements with the old block number (or name) will be given this block name.  You must supply either new_block_id or new_block_name.  You may supply a vector of new_block_id, in which case the old_block information must also be a vector.\n'
p26705
sS'cpp_type'
p26706
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p26707
sS'default'
p26708
g3
sS'name'
p26709
S'new_block_name'
p26710
sS'required'
p26711
I00
sS'group_name'
p26712
Nsa(dp26713
S'description'
p26714
S'Elements with this block number will be given the new_block_number or new_block_name.  You must supply either old_block_id or old_block_name.  You may supply a vector of old_block_id, in which case the new_block information must also be a vector.\n'
p26715
sS'cpp_type'
p26716
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p26717
sS'default'
p26718
g3
sS'name'
p26719
S'old_block_id'
p26720
sS'required'
p26721
I00
sS'group_name'
p26722
Nsa(dp26723
S'description'
p26724
S'Elements with this block name will be given the new_block_number or new_block_name.  You must supply either old_block_id or old_block_name.  You may supply a vector of old_block_name, in which case the new_block information must also be a vector.\n'
p26725
sS'cpp_type'
p26726
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p26727
sS'default'
p26728
g3
sS'name'
p26729
S'old_block_name'
p26730
sS'required'
p26731
I00
sS'group_name'
p26732
Nsa(dp26733
S'description'
p26734
g3
sS'cpp_type'
p26735
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26736
sS'default'
p26737
S'RenameBlock'
p26738
sS'name'
p26739
S'type'
p26740
sS'required'
p26741
I00
sS'group_name'
p26742
NsasS'name'
p26743
S'/MeshModifiers/RenameBlock'
p26744
sa(dp26745
S'description'
p26746
S'Adds element faces that are on the exterior of the given block to the sidesets specified\n'
p26747
sS'subblocks'
p26748
NsS'parameters'
p26749
(lp26750
(dp26751
S'description'
p26752
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26753
sS'cpp_type'
p26754
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p26755
sS'default'
p26756
g3
sS'name'
p26757
S'block'
p26758
sS'required'
p26759
I00
sS'group_name'
p26760
Nsa(dp26761
S'description'
p26762
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26763
sS'cpp_type'
p26764
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26765
sS'default'
p26766
g3
sS'name'
p26767
S'control_tags'
p26768
sS'required'
p26769
I00
sS'group_name'
p26770
S'Advanced'
p26771
sa(dp26772
S'description'
p26773
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p26774
sS'cpp_type'
p26775
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26776
sS'default'
p26777
g3
sS'name'
p26778
S'depends_on'
p26779
sS'required'
p26780
I00
sS'group_name'
p26781
Nsa(dp26782
S'description'
p26783
S'Set the enabled status of the MooseObject.\n'
p26784
sS'cpp_type'
p26785
S'bool'
p26786
sS'default'
p26787
S'1'
p26788
sS'name'
p26789
S'enable'
p26790
sS'required'
p26791
I00
sS'group_name'
p26792
S'Advanced'
p26793
sa(dp26794
S'description'
p26795
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p26796
sS'cpp_type'
p26797
S'bool'
p26798
sS'default'
p26799
S'0'
p26800
sS'name'
p26801
S'fixed_normal'
p26802
sS'required'
p26803
I00
sS'group_name'
p26804
Nsa(dp26805
S'description'
p26806
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p26807
sS'cpp_type'
p26808
S'bool'
p26809
sS'default'
p26810
S'0'
p26811
sS'name'
p26812
S'force_prepare'
p26813
sS'required'
p26814
I00
sS'group_name'
p26815
Nsa(dp26816
S'description'
p26817
S'The list of boundary IDs to create on the supplied subdomain\n'
p26818
sS'cpp_type'
p26819
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p26820
sS'default'
p26821
g3
sS'name'
p26822
S'new_boundary'
p26823
sS'required'
p26824
I01
sS'group_name'
p26825
Nsa(dp26826
S'description'
p26827
S'If supplied, only faces with normal equal to this, up to normal_tol, will be added to the sidesets specified\n'
p26828
sS'cpp_type'
p26829
S'libMesh::Point'
p26830
sS'default'
p26831
g3
sS'name'
p26832
S'normal'
p26833
sS'required'
p26834
I00
sS'group_name'
p26835
Nsa(dp26836
S'description'
p26837
S'If normal is supplied then faces are only added if face_normal.normal_hat >= 1 - normal_tol, where normal_hat = normal/|normal|\n'
p26838
sS'cpp_type'
p26839
S'double'
p26840
sS'default'
p26841
S'0.1'
p26842
sS'name'
p26843
S'normal_tol'
p26844
sS'required'
p26845
I00
sS'group_name'
p26846
Nsa(dp26847
S'description'
p26848
g3
sS'cpp_type'
p26849
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26850
sS'default'
p26851
S'SideSetsAroundSubdomain'
p26852
sS'name'
p26853
S'type'
p26854
sS'required'
p26855
I00
sS'group_name'
p26856
Nsa(dp26857
S'description'
p26858
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p26859
sS'cpp_type'
p26860
S'double'
p26861
sS'default'
p26862
S'0.1'
p26863
sS'name'
p26864
S'variance'
p26865
sS'required'
p26866
I00
sS'group_name'
p26867
NsasS'name'
p26868
S'/MeshModifiers/SideSetsAroundSubdomain'
p26869
sa(dp26870
S'description'
p26871
g3
sS'subblocks'
p26872
NsS'parameters'
p26873
(lp26874
(dp26875
S'description'
p26876
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26877
sS'cpp_type'
p26878
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26879
sS'default'
p26880
g3
sS'name'
p26881
S'control_tags'
p26882
sS'required'
p26883
I00
sS'group_name'
p26884
S'Advanced'
p26885
sa(dp26886
S'description'
p26887
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p26888
sS'cpp_type'
p26889
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26890
sS'default'
p26891
g3
sS'name'
p26892
S'depends_on'
p26893
sS'required'
p26894
I00
sS'group_name'
p26895
Nsa(dp26896
S'description'
p26897
S'Set the enabled status of the MooseObject.\n'
p26898
sS'cpp_type'
p26899
S'bool'
p26900
sS'default'
p26901
S'1'
p26902
sS'name'
p26903
S'enable'
p26904
sS'required'
p26905
I00
sS'group_name'
p26906
S'Advanced'
p26907
sa(dp26908
S'description'
p26909
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p26910
sS'cpp_type'
p26911
S'bool'
p26912
sS'default'
p26913
S'0'
p26914
sS'name'
p26915
S'force_prepare'
p26916
sS'required'
p26917
I00
sS'group_name'
p26918
Nsa(dp26919
S'description'
p26920
S'The master set of blocks for which to draw a sideset between\n'
p26921
sS'cpp_type'
p26922
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p26923
sS'default'
p26924
g3
sS'name'
p26925
S'master_block'
p26926
sS'required'
p26927
I01
sS'group_name'
p26928
Nsa(dp26929
S'description'
p26930
S'The name of the boundary to create\n'
p26931
sS'cpp_type'
p26932
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p26933
sS'default'
p26934
g3
sS'name'
p26935
S'new_boundary'
p26936
sS'required'
p26937
I01
sS'group_name'
p26938
Nsa(dp26939
S'description'
p26940
S'The paired set of blocks for which to draw a sideset between\n'
p26941
sS'cpp_type'
p26942
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p26943
sS'default'
p26944
g3
sS'name'
p26945
S'paired_block'
p26946
sS'required'
p26947
I01
sS'group_name'
p26948
Nsa(dp26949
S'description'
p26950
g3
sS'cpp_type'
p26951
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26952
sS'default'
p26953
S'SideSetsBetweenSubdomains'
p26954
sS'name'
p26955
S'type'
p26956
sS'required'
p26957
I00
sS'group_name'
p26958
NsasS'name'
p26959
S'/MeshModifiers/SideSetsBetweenSubdomains'
p26960
sa(dp26961
S'description'
p26962
g3
sS'subblocks'
p26963
NsS'parameters'
p26964
(lp26965
(dp26966
S'description'
p26967
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26968
sS'cpp_type'
p26969
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26970
sS'default'
p26971
g3
sS'name'
p26972
S'control_tags'
p26973
sS'required'
p26974
I00
sS'group_name'
p26975
S'Advanced'
p26976
sa(dp26977
S'description'
p26978
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p26979
sS'cpp_type'
p26980
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26981
sS'default'
p26982
g3
sS'name'
p26983
S'depends_on'
p26984
sS'required'
p26985
I00
sS'group_name'
p26986
Nsa(dp26987
S'description'
p26988
S'Set the enabled status of the MooseObject.\n'
p26989
sS'cpp_type'
p26990
S'bool'
p26991
sS'default'
p26992
S'1'
p26993
sS'name'
p26994
S'enable'
p26995
sS'required'
p26996
I00
sS'group_name'
p26997
S'Advanced'
p26998
sa(dp26999
S'description'
p27000
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p27001
sS'cpp_type'
p27002
S'bool'
p27003
sS'default'
p27004
S'0'
p27005
sS'name'
p27006
S'fixed_normal'
p27007
sS'required'
p27008
I00
sS'group_name'
p27009
Nsa(dp27010
S'description'
p27011
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p27012
sS'cpp_type'
p27013
S'bool'
p27014
sS'default'
p27015
S'0'
p27016
sS'name'
p27017
S'force_prepare'
p27018
sS'required'
p27019
I00
sS'group_name'
p27020
Nsa(dp27021
S'description'
p27022
S'The name of the boundary to create\n'
p27023
sS'cpp_type'
p27024
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p27025
sS'default'
p27026
g3
sS'name'
p27027
S'new_boundary'
p27028
sS'required'
p27029
I01
sS'group_name'
p27030
Nsa(dp27031
S'description'
p27032
S'A list of normals for which to start painting sidesets\n'
p27033
sS'cpp_type'
p27034
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p27035
sS'default'
p27036
g3
sS'name'
p27037
S'normals'
p27038
sS'required'
p27039
I01
sS'group_name'
p27040
Nsa(dp27041
S'description'
p27042
g3
sS'cpp_type'
p27043
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27044
sS'default'
p27045
S'SideSetsFromNormals'
p27046
sS'name'
p27047
S'type'
p27048
sS'required'
p27049
I00
sS'group_name'
p27050
Nsa(dp27051
S'description'
p27052
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p27053
sS'cpp_type'
p27054
S'double'
p27055
sS'default'
p27056
S'0.1'
p27057
sS'name'
p27058
S'variance'
p27059
sS'required'
p27060
I00
sS'group_name'
p27061
NsasS'name'
p27062
S'/MeshModifiers/SideSetsFromNormals'
p27063
sa(dp27064
S'description'
p27065
g3
sS'subblocks'
p27066
NsS'parameters'
p27067
(lp27068
(dp27069
S'description'
p27070
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27071
sS'cpp_type'
p27072
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27073
sS'default'
p27074
g3
sS'name'
p27075
S'control_tags'
p27076
sS'required'
p27077
I00
sS'group_name'
p27078
S'Advanced'
p27079
sa(dp27080
S'description'
p27081
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p27082
sS'cpp_type'
p27083
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27084
sS'default'
p27085
g3
sS'name'
p27086
S'depends_on'
p27087
sS'required'
p27088
I00
sS'group_name'
p27089
Nsa(dp27090
S'description'
p27091
S'Set the enabled status of the MooseObject.\n'
p27092
sS'cpp_type'
p27093
S'bool'
p27094
sS'default'
p27095
S'1'
p27096
sS'name'
p27097
S'enable'
p27098
sS'required'
p27099
I00
sS'group_name'
p27100
S'Advanced'
p27101
sa(dp27102
S'description'
p27103
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p27104
sS'cpp_type'
p27105
S'bool'
p27106
sS'default'
p27107
S'0'
p27108
sS'name'
p27109
S'fixed_normal'
p27110
sS'required'
p27111
I00
sS'group_name'
p27112
Nsa(dp27113
S'description'
p27114
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p27115
sS'cpp_type'
p27116
S'bool'
p27117
sS'default'
p27118
S'0'
p27119
sS'name'
p27120
S'force_prepare'
p27121
sS'required'
p27122
I00
sS'group_name'
p27123
Nsa(dp27124
S'description'
p27125
S'The name of the boundary to create\n'
p27126
sS'cpp_type'
p27127
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p27128
sS'default'
p27129
g3
sS'name'
p27130
S'new_boundary'
p27131
sS'required'
p27132
I01
sS'group_name'
p27133
Nsa(dp27134
S'description'
p27135
S'A list of points from which to start painting sidesets\n'
p27136
sS'cpp_type'
p27137
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p27138
sS'default'
p27139
g3
sS'name'
p27140
S'points'
p27141
sS'required'
p27142
I01
sS'group_name'
p27143
Nsa(dp27144
S'description'
p27145
g3
sS'cpp_type'
p27146
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27147
sS'default'
p27148
S'SideSetsFromPoints'
p27149
sS'name'
p27150
S'type'
p27151
sS'required'
p27152
I00
sS'group_name'
p27153
Nsa(dp27154
S'description'
p27155
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p27156
sS'cpp_type'
p27157
S'double'
p27158
sS'default'
p27159
S'0.1'
p27160
sS'name'
p27161
S'variance'
p27162
sS'required'
p27163
I00
sS'group_name'
p27164
NsasS'name'
p27165
S'/MeshModifiers/SideSetsFromPoints'
p27166
sa(dp27167
S'description'
p27168
g3
sS'subblocks'
p27169
NsS'parameters'
p27170
(lp27171
(dp27172
S'description'
p27173
S'Subdomain id to set for inside/outside the bounding box\n'
p27174
sS'cpp_type'
p27175
S'unsigned short'
p27176
sS'default'
p27177
g3
sS'name'
p27178
S'block_id'
p27179
sS'required'
p27180
I01
sS'group_name'
p27181
Nsa(dp27182
S'description'
p27183
S'Subdomain name to set for inside/outside the bounding box (optional)\n'
p27184
sS'cpp_type'
p27185
S'SubdomainName'
p27186
sS'default'
p27187
g3
sS'name'
p27188
S'block_name'
p27189
sS'required'
p27190
I00
sS'group_name'
p27191
Nsa(dp27192
S'description'
p27193
S'The bottom left point (in x,y,z with spaces in-between).\n'
p27194
sS'cpp_type'
p27195
S'libMesh::VectorValue<double>'
p27196
sS'default'
p27197
g3
sS'name'
p27198
S'bottom_left'
p27199
sS'required'
p27200
I01
sS'group_name'
p27201
Nsa(dp27202
S'description'
p27203
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27204
sS'cpp_type'
p27205
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27206
sS'default'
p27207
g3
sS'name'
p27208
S'control_tags'
p27209
sS'required'
p27210
I00
sS'group_name'
p27211
S'Advanced'
p27212
sa(dp27213
S'description'
p27214
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p27215
sS'cpp_type'
p27216
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27217
sS'default'
p27218
g3
sS'name'
p27219
S'depends_on'
p27220
sS'required'
p27221
I00
sS'group_name'
p27222
Nsa(dp27223
S'description'
p27224
S'Set the enabled status of the MooseObject.\n'
p27225
sS'cpp_type'
p27226
S'bool'
p27227
sS'default'
p27228
S'1'
p27229
sS'name'
p27230
S'enable'
p27231
sS'required'
p27232
I00
sS'group_name'
p27233
S'Advanced'
p27234
sa(dp27235
S'description'
p27236
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p27237
sS'cpp_type'
p27238
S'bool'
p27239
sS'default'
p27240
S'0'
p27241
sS'name'
p27242
S'force_prepare'
p27243
sS'required'
p27244
I00
sS'group_name'
p27245
Nsa(dp27246
S'name'
p27247
S'location'
p27248
sS'cpp_type'
p27249
S'MooseEnum'
p27250
sS'default'
p27251
S'INSIDE'
p27252
sS'description'
p27253
S'Control of where the subdomain id is to be set\n'
p27254
sS'required'
p27255
I00
sS'options'
p27256
S'INSIDE OUTSIDE'
p27257
sS'group_name'
p27258
Nsa(dp27259
S'description'
p27260
S'The bottom left point (in x,y,z with spaces in-between).\n'
p27261
sS'cpp_type'
p27262
S'libMesh::VectorValue<double>'
p27263
sS'default'
p27264
g3
sS'name'
p27265
S'top_right'
p27266
sS'required'
p27267
I01
sS'group_name'
p27268
Nsa(dp27269
S'description'
p27270
g3
sS'cpp_type'
p27271
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27272
sS'default'
p27273
S'SubdomainBoundingBox'
p27274
sS'name'
p27275
S'type'
p27276
sS'required'
p27277
I00
sS'group_name'
p27278
NsasS'name'
p27279
S'/MeshModifiers/SubdomainBoundingBox'
p27280
sa(dp27281
S'description'
p27282
g3
sS'subblocks'
p27283
NsS'parameters'
p27284
(lp27285
(dp27286
S'description'
p27287
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27288
sS'cpp_type'
p27289
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27290
sS'default'
p27291
g3
sS'name'
p27292
S'control_tags'
p27293
sS'required'
p27294
I00
sS'group_name'
p27295
S'Advanced'
p27296
sa(dp27297
S'description'
p27298
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p27299
sS'cpp_type'
p27300
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27301
sS'default'
p27302
g3
sS'name'
p27303
S'depends_on'
p27304
sS'required'
p27305
I00
sS'group_name'
p27306
Nsa(dp27307
S'description'
p27308
S'Set the enabled status of the MooseObject.\n'
p27309
sS'cpp_type'
p27310
S'bool'
p27311
sS'default'
p27312
S'1'
p27313
sS'name'
p27314
S'enable'
p27315
sS'required'
p27316
I00
sS'group_name'
p27317
S'Advanced'
p27318
sa(dp27319
S'description'
p27320
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p27321
sS'cpp_type'
p27322
S'bool'
p27323
sS'default'
p27324
S'0'
p27325
sS'name'
p27326
S'force_prepare'
p27327
sS'required'
p27328
I00
sS'group_name'
p27329
Nsa(dp27330
S'name'
p27331
S'transform'
p27332
sS'cpp_type'
p27333
S'MooseEnum'
p27334
sS'default'
p27335
g3
sS'description'
p27336
S'The type of transformation to perform (TRANSLATE, ROTATE, SCALE)\n'
p27337
sS'required'
p27338
I01
sS'options'
p27339
S'TRANSLATE ROTATE SCALE'
p27340
sS'group_name'
p27341
Nsa(dp27342
S'description'
p27343
g3
sS'cpp_type'
p27344
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27345
sS'default'
p27346
S'Transform'
p27347
sS'name'
p27348
S'type'
p27349
sS'required'
p27350
I00
sS'group_name'
p27351
Nsa(dp27352
S'description'
p27353
S'The value to use for the transformation. When using TRANSLATE or SCALE, the xyz coordinates are applied in each direction respectively. When using ROTATE, the values are interpreted as the Euler angles phi, theta and psi given in degrees.\n'
p27354
sS'cpp_type'
p27355
S'libMesh::VectorValue<double>'
p27356
sS'default'
p27357
g3
sS'name'
p27358
S'vector_value'
p27359
sS'required'
p27360
I01
sS'group_name'
p27361
NsasS'name'
p27362
S'/MeshModifiers/Transform'
p27363
sasS'parameters'
p27364
NsS'name'
p27365
S'/MeshModifiers'
p27366
sa(dp27367
S'description'
p27368
g3
sS'subblocks'
p27369
(lp27370
(dp27371
S'description'
p27372
g3
sS'subblocks'
p27373
NsS'parameters'
p27374
(lp27375
(dp27376
S'description'
p27377
S'A string representing the Moose Object that will be built by this Action\n'
p27378
sS'cpp_type'
p27379
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27380
sS'default'
p27381
g3
sS'name'
p27382
S'type'
p27383
sS'required'
p27384
I01
sS'group_name'
p27385
NsasS'name'
p27386
S'/MultiApps/*'
p27387
sa(dp27388
S'description'
p27389
g3
sS'subblocks'
p27390
NsS'parameters'
p27391
(lp27392
(dp27393
S'name'
p27394
S'app_type'
p27395
sS'cpp_type'
p27396
S'MooseEnum'
p27397
sS'default'
p27398
g3
sS'description'
p27399
S'The type of application to build (applications not registered can be loaded with dynamic libraries. Master application type will be used if not provided.\n'
p27400
sS'required'
p27401
I00
sS'options'
p27402
S'ExampleApp'
p27403
sS'group_name'
p27404
Nsa(dp27405
S'description'
p27406
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p27407
sS'cpp_type'
p27408
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p27409
sS'default'
p27410
g3
sS'name'
p27411
S'boundary'
p27412
sS'required'
p27413
I00
sS'group_name'
p27414
Nsa(dp27415
S'description'
p27416
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p27417
sS'cpp_type'
p27418
S'double'
p27419
sS'default'
p27420
S'0.01'
p27421
sS'name'
p27422
S'bounding_box_inflation'
p27423
sS'required'
p27424
I00
sS'group_name'
p27425
Nsa(dp27426
S'description'
p27427
S"If true this will allow failed solves to attempt to 'catch up' using smaller timesteps.\n"
p27428
sS'cpp_type'
p27429
S'bool'
p27430
sS'default'
p27431
S'0'
p27432
sS'name'
p27433
S'catch_up'
p27434
sS'required'
p27435
I00
sS'group_name'
p27436
Nsa(dp27437
S'description'
p27438
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27439
sS'cpp_type'
p27440
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27441
sS'default'
p27442
g3
sS'name'
p27443
S'control_tags'
p27444
sS'required'
p27445
I00
sS'group_name'
p27446
S'Advanced'
p27447
sa(dp27448
S'description'
p27449
S'If true then while sub_cycling a steady state check will be done.  In this mode output will only be done once the MultiApp reaches the target time or steady state is reached\n'
p27450
sS'cpp_type'
p27451
S'bool'
p27452
sS'default'
p27453
S'0'
p27454
sS'name'
p27455
S'detect_steady_state'
p27456
sS'required'
p27457
I00
sS'group_name'
p27458
Nsa(dp27459
S'description'
p27460
S'Set the enabled status of the MooseObject.\n'
p27461
sS'cpp_type'
p27462
S'bool'
p27463
sS'default'
p27464
S'1'
p27465
sS'name'
p27466
S'enable'
p27467
sS'required'
p27468
I00
sS'group_name'
p27469
S'Advanced'
p27470
sa(dp27471
S'name'
p27472
S'execute_on'
p27473
sS'cpp_type'
p27474
S'MultiMooseEnum'
p27475
sS'default'
p27476
S'TIMESTEP_BEGIN'
p27477
sS'description'
p27478
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27479
sS'required'
p27480
I00
sS'options'
p27481
S'none initial linear nonlinear timestep_end timestep_begin custom'
p27482
sS'group_name'
p27483
Nsa(dp27484
S'description'
p27485
S'Determines whether this object is calculated using an implicit or explicit form\n'
p27486
sS'cpp_type'
p27487
S'bool'
p27488
sS'default'
p27489
S'1'
p27490
sS'name'
p27491
S'implicit'
p27492
sS'required'
p27493
I00
sS'group_name'
p27494
S'Advanced'
p27495
sa(dp27496
S'description'
p27497
S"The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using 'positions_from_file' it is also admissable to provide one input_file per file.\n"
p27498
sS'cpp_type'
p27499
S'std::__1::vector<FileName, std::__1::allocator<FileName> >'
p27500
sS'default'
p27501
g3
sS'name'
p27502
S'input_files'
p27503
sS'required'
p27504
I01
sS'group_name'
p27505
Nsa(dp27506
S'description'
p27507
S'Only valid when sub_cycling.  This allows transferred values to be interpolated over the time frame the MultiApp is executing over when sub_cycling\n'
p27508
sS'cpp_type'
p27509
S'bool'
p27510
sS'default'
p27511
S'0'
p27512
sS'name'
p27513
S'interpolate_transfers'
p27514
sS'required'
p27515
I00
sS'group_name'
p27516
Nsa(dp27517
S'description'
p27518
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p27519
sS'cpp_type'
p27520
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27521
sS'default'
p27522
g3
sS'name'
p27523
S'library_path'
p27524
sS'required'
p27525
I00
sS'group_name'
p27526
Nsa(dp27527
S'description'
p27528
S'Maximum number of steps to allow an app to take when trying to catch back up after a failed solve.\n'
p27529
sS'cpp_type'
p27530
S'double'
p27531
sS'default'
p27532
S'2'
p27533
sS'name'
p27534
S'max_catch_up_steps'
p27535
sS'required'
p27536
I00
sS'group_name'
p27537
Nsa(dp27538
S'description'
p27539
S'Maximum number of solve failures tolerated while sub_cycling.\n'
p27540
sS'cpp_type'
p27541
S'unsigned int'
p27542
sS'default'
p27543
S'0'
p27544
sS'name'
p27545
S'max_failures'
p27546
sS'required'
p27547
I00
sS'group_name'
p27548
Nsa(dp27549
S'description'
p27550
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p27551
sS'cpp_type'
p27552
S'unsigned int'
p27553
sS'default'
p27554
S'4294967295'
p27555
sS'name'
p27556
S'max_procs_per_app'
p27557
sS'required'
p27558
I00
sS'group_name'
p27559
Nsa(dp27560
S'description'
p27561
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p27562
sS'cpp_type'
p27563
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p27564
sS'default'
p27565
g3
sS'name'
p27566
S'move_apps'
p27567
sS'required'
p27568
I00
sS'group_name'
p27569
Nsa(dp27570
S'description'
p27571
S'The positions corresponding to each move_app.\n'
p27572
sS'cpp_type'
p27573
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p27574
sS'default'
p27575
g3
sS'name'
p27576
S'move_positions'
p27577
sS'required'
p27578
I00
sS'group_name'
p27579
Nsa(dp27580
S'description'
p27581
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p27582
sS'cpp_type'
p27583
S'double'
p27584
sS'default'
p27585
S'1.79769e+308'
p27586
sS'name'
p27587
S'move_time'
p27588
sS'required'
p27589
I00
sS'group_name'
p27590
Nsa(dp27591
S'description'
p27592
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p27593
sS'cpp_type'
p27594
S'bool'
p27595
sS'default'
p27596
S'0'
p27597
sS'name'
p27598
S'output_in_position'
p27599
sS'required'
p27600
I00
sS'group_name'
p27601
Nsa(dp27602
S'description'
p27603
S'If true then every sub-cycle will be output.\n'
p27604
sS'cpp_type'
p27605
S'bool'
p27606
sS'default'
p27607
S'0'
p27608
sS'name'
p27609
S'output_sub_cycles'
p27610
sS'required'
p27611
I00
sS'group_name'
p27612
Nsa(dp27613
S'description'
p27614
S'Toggle the display of sub-cycles on the screen.\n'
p27615
sS'cpp_type'
p27616
S'bool'
p27617
sS'default'
p27618
S'1'
p27619
sS'name'
p27620
S'print_sub_cycles'
p27621
sS'required'
p27622
I00
sS'group_name'
p27623
Nsa(dp27624
S'description'
p27625
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p27626
sS'cpp_type'
p27627
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p27628
sS'default'
p27629
g3
sS'name'
p27630
S'reset_apps'
p27631
sS'required'
p27632
I00
sS'group_name'
p27633
Nsa(dp27634
S'description'
p27635
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p27636
sS'cpp_type'
p27637
S'double'
p27638
sS'default'
p27639
S'1.79769e+308'
p27640
sS'name'
p27641
S'reset_time'
p27642
sS'required'
p27643
I00
sS'group_name'
p27644
Nsa(dp27645
S'description'
p27646
S'The relative difference between the new solution and the old solution that will be considered to be at steady state\n'
p27647
sS'cpp_type'
p27648
S'double'
p27649
sS'default'
p27650
S'1e-08'
p27651
sS'name'
p27652
S'steady_state_tol'
p27653
sS'required'
p27654
I00
sS'group_name'
p27655
Nsa(dp27656
S'description'
p27657
S"Set to true to allow this MultiApp to take smaller timesteps than the rest of the simulation.  More than one timestep will be performed for each 'master' timestep\n"
p27658
sS'cpp_type'
p27659
S'bool'
p27660
sS'default'
p27661
S'0'
p27662
sS'name'
p27663
S'sub_cycling'
p27664
sS'required'
p27665
I00
sS'group_name'
p27666
Nsa(dp27667
S'description'
p27668
S"If true this MultiApp won't participate in dt decisions and will always be fast-forwarded to the current time.\n"
p27669
sS'cpp_type'
p27670
S'bool'
p27671
sS'default'
p27672
S'0'
p27673
sS'name'
p27674
S'tolerate_failure'
p27675
sS'required'
p27676
I00
sS'group_name'
p27677
Nsa(dp27678
S'description'
p27679
g3
sS'cpp_type'
p27680
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27681
sS'default'
p27682
S'AutoPositionsMultiApp'
p27683
sS'name'
p27684
S'type'
p27685
sS'required'
p27686
I00
sS'group_name'
p27687
Nsa(dp27688
S'description'
p27689
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27690
sS'cpp_type'
p27691
S'bool'
p27692
sS'default'
p27693
S'0'
p27694
sS'name'
p27695
S'use_displaced_mesh'
p27696
sS'required'
p27697
I00
sS'group_name'
p27698
S'Advanced'
p27699
sasS'name'
p27700
S'/MultiApps/AutoPositionsMultiApp'
p27701
sa(dp27702
S'description'
p27703
g3
sS'subblocks'
p27704
NsS'parameters'
p27705
(lp27706
(dp27707
S'name'
p27708
S'app_type'
p27709
sS'cpp_type'
p27710
S'MooseEnum'
p27711
sS'default'
p27712
g3
sS'description'
p27713
S'The type of application to build (applications not registered can be loaded with dynamic libraries. Master application type will be used if not provided.\n'
p27714
sS'required'
p27715
I00
sS'options'
p27716
S'ExampleApp'
p27717
sS'group_name'
p27718
Nsa(dp27719
S'description'
p27720
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p27721
sS'cpp_type'
p27722
S'double'
p27723
sS'default'
p27724
S'0.01'
p27725
sS'name'
p27726
S'bounding_box_inflation'
p27727
sS'required'
p27728
I00
sS'group_name'
p27729
Nsa(dp27730
S'description'
p27731
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27732
sS'cpp_type'
p27733
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27734
sS'default'
p27735
g3
sS'name'
p27736
S'control_tags'
p27737
sS'required'
p27738
I00
sS'group_name'
p27739
S'Advanced'
p27740
sa(dp27741
S'description'
p27742
S'Set the enabled status of the MooseObject.\n'
p27743
sS'cpp_type'
p27744
S'bool'
p27745
sS'default'
p27746
S'1'
p27747
sS'name'
p27748
S'enable'
p27749
sS'required'
p27750
I00
sS'group_name'
p27751
S'Advanced'
p27752
sa(dp27753
S'name'
p27754
S'execute_on'
p27755
sS'cpp_type'
p27756
S'MultiMooseEnum'
p27757
sS'default'
p27758
S'TIMESTEP_BEGIN'
p27759
sS'description'
p27760
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27761
sS'required'
p27762
I00
sS'options'
p27763
S'none initial linear nonlinear timestep_end timestep_begin custom'
p27764
sS'group_name'
p27765
Nsa(dp27766
S'description'
p27767
S"The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using 'positions_from_file' it is also admissable to provide one input_file per file.\n"
p27768
sS'cpp_type'
p27769
S'std::__1::vector<FileName, std::__1::allocator<FileName> >'
p27770
sS'default'
p27771
g3
sS'name'
p27772
S'input_files'
p27773
sS'required'
p27774
I01
sS'group_name'
p27775
Nsa(dp27776
S'description'
p27777
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p27778
sS'cpp_type'
p27779
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27780
sS'default'
p27781
g3
sS'name'
p27782
S'library_path'
p27783
sS'required'
p27784
I00
sS'group_name'
p27785
Nsa(dp27786
S'description'
p27787
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p27788
sS'cpp_type'
p27789
S'unsigned int'
p27790
sS'default'
p27791
S'4294967295'
p27792
sS'name'
p27793
S'max_procs_per_app'
p27794
sS'required'
p27795
I00
sS'group_name'
p27796
Nsa(dp27797
S'description'
p27798
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p27799
sS'cpp_type'
p27800
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p27801
sS'default'
p27802
g3
sS'name'
p27803
S'move_apps'
p27804
sS'required'
p27805
I00
sS'group_name'
p27806
Nsa(dp27807
S'description'
p27808
S'The positions corresponding to each move_app.\n'
p27809
sS'cpp_type'
p27810
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p27811
sS'default'
p27812
g3
sS'name'
p27813
S'move_positions'
p27814
sS'required'
p27815
I00
sS'group_name'
p27816
Nsa(dp27817
S'description'
p27818
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p27819
sS'cpp_type'
p27820
S'double'
p27821
sS'default'
p27822
S'1.79769e+308'
p27823
sS'name'
p27824
S'move_time'
p27825
sS'required'
p27826
I00
sS'group_name'
p27827
Nsa(dp27828
S'description'
p27829
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p27830
sS'cpp_type'
p27831
S'bool'
p27832
sS'default'
p27833
S'0'
p27834
sS'name'
p27835
S'output_in_position'
p27836
sS'required'
p27837
I00
sS'group_name'
p27838
Nsa(dp27839
S'description'
p27840
S"The positions of the App locations.  Each set of 3 values will represent a Point.  This and 'positions_file' cannot be both supplied. If this and 'positions_file' are not supplied, a single position (0,0,0) will be used\n"
p27841
sS'cpp_type'
p27842
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p27843
sS'default'
p27844
g3
sS'name'
p27845
S'positions'
p27846
sS'required'
p27847
I00
sS'group_name'
p27848
Nsa(dp27849
S'description'
p27850
S"A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  This and 'positions' cannot be both supplied\n"
p27851
sS'cpp_type'
p27852
S'std::__1::vector<FileName, std::__1::allocator<FileName> >'
p27853
sS'default'
p27854
g3
sS'name'
p27855
S'positions_file'
p27856
sS'required'
p27857
I00
sS'group_name'
p27858
Nsa(dp27859
S'description'
p27860
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p27861
sS'cpp_type'
p27862
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p27863
sS'default'
p27864
g3
sS'name'
p27865
S'reset_apps'
p27866
sS'required'
p27867
I00
sS'group_name'
p27868
Nsa(dp27869
S'description'
p27870
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p27871
sS'cpp_type'
p27872
S'double'
p27873
sS'default'
p27874
S'1.79769e+308'
p27875
sS'name'
p27876
S'reset_time'
p27877
sS'required'
p27878
I00
sS'group_name'
p27879
Nsa(dp27880
S'description'
p27881
g3
sS'cpp_type'
p27882
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27883
sS'default'
p27884
S'FullSolveMultiApp'
p27885
sS'name'
p27886
S'type'
p27887
sS'required'
p27888
I00
sS'group_name'
p27889
Nsa(dp27890
S'description'
p27891
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27892
sS'cpp_type'
p27893
S'bool'
p27894
sS'default'
p27895
S'0'
p27896
sS'name'
p27897
S'use_displaced_mesh'
p27898
sS'required'
p27899
I00
sS'group_name'
p27900
S'Advanced'
p27901
sasS'name'
p27902
S'/MultiApps/FullSolveMultiApp'
p27903
sa(dp27904
S'description'
p27905
g3
sS'subblocks'
p27906
NsS'parameters'
p27907
(lp27908
(dp27909
S'name'
p27910
S'app_type'
p27911
sS'cpp_type'
p27912
S'MooseEnum'
p27913
sS'default'
p27914
g3
sS'description'
p27915
S'The type of application to build (applications not registered can be loaded with dynamic libraries. Master application type will be used if not provided.\n'
p27916
sS'required'
p27917
I00
sS'options'
p27918
S'ExampleApp'
p27919
sS'group_name'
p27920
Nsa(dp27921
S'description'
p27922
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p27923
sS'cpp_type'
p27924
S'double'
p27925
sS'default'
p27926
S'0.01'
p27927
sS'name'
p27928
S'bounding_box_inflation'
p27929
sS'required'
p27930
I00
sS'group_name'
p27931
Nsa(dp27932
S'description'
p27933
S"If true this will allow failed solves to attempt to 'catch up' using smaller timesteps.\n"
p27934
sS'cpp_type'
p27935
S'bool'
p27936
sS'default'
p27937
S'0'
p27938
sS'name'
p27939
S'catch_up'
p27940
sS'required'
p27941
I00
sS'group_name'
p27942
Nsa(dp27943
S'description'
p27944
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27945
sS'cpp_type'
p27946
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27947
sS'default'
p27948
g3
sS'name'
p27949
S'control_tags'
p27950
sS'required'
p27951
I00
sS'group_name'
p27952
S'Advanced'
p27953
sa(dp27954
S'description'
p27955
S'If true then while sub_cycling a steady state check will be done.  In this mode output will only be done once the MultiApp reaches the target time or steady state is reached\n'
p27956
sS'cpp_type'
p27957
S'bool'
p27958
sS'default'
p27959
S'0'
p27960
sS'name'
p27961
S'detect_steady_state'
p27962
sS'required'
p27963
I00
sS'group_name'
p27964
Nsa(dp27965
S'description'
p27966
S'Set the enabled status of the MooseObject.\n'
p27967
sS'cpp_type'
p27968
S'bool'
p27969
sS'default'
p27970
S'1'
p27971
sS'name'
p27972
S'enable'
p27973
sS'required'
p27974
I00
sS'group_name'
p27975
S'Advanced'
p27976
sa(dp27977
S'name'
p27978
S'execute_on'
p27979
sS'cpp_type'
p27980
S'MultiMooseEnum'
p27981
sS'default'
p27982
S'TIMESTEP_BEGIN'
p27983
sS'description'
p27984
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27985
sS'required'
p27986
I00
sS'options'
p27987
S'none initial linear nonlinear timestep_end timestep_begin custom'
p27988
sS'group_name'
p27989
Nsa(dp27990
S'description'
p27991
S'Determines whether this object is calculated using an implicit or explicit form\n'
p27992
sS'cpp_type'
p27993
S'bool'
p27994
sS'default'
p27995
S'1'
p27996
sS'name'
p27997
S'implicit'
p27998
sS'required'
p27999
I00
sS'group_name'
p28000
S'Advanced'
p28001
sa(dp28002
S'description'
p28003
S"The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using 'positions_from_file' it is also admissable to provide one input_file per file.\n"
p28004
sS'cpp_type'
p28005
S'std::__1::vector<FileName, std::__1::allocator<FileName> >'
p28006
sS'default'
p28007
g3
sS'name'
p28008
S'input_files'
p28009
sS'required'
p28010
I01
sS'group_name'
p28011
Nsa(dp28012
S'description'
p28013
S'Only valid when sub_cycling.  This allows transferred values to be interpolated over the time frame the MultiApp is executing over when sub_cycling\n'
p28014
sS'cpp_type'
p28015
S'bool'
p28016
sS'default'
p28017
S'0'
p28018
sS'name'
p28019
S'interpolate_transfers'
p28020
sS'required'
p28021
I00
sS'group_name'
p28022
Nsa(dp28023
S'description'
p28024
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p28025
sS'cpp_type'
p28026
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28027
sS'default'
p28028
g3
sS'name'
p28029
S'library_path'
p28030
sS'required'
p28031
I00
sS'group_name'
p28032
Nsa(dp28033
S'description'
p28034
S'Maximum number of steps to allow an app to take when trying to catch back up after a failed solve.\n'
p28035
sS'cpp_type'
p28036
S'double'
p28037
sS'default'
p28038
S'2'
p28039
sS'name'
p28040
S'max_catch_up_steps'
p28041
sS'required'
p28042
I00
sS'group_name'
p28043
Nsa(dp28044
S'description'
p28045
S'Maximum number of solve failures tolerated while sub_cycling.\n'
p28046
sS'cpp_type'
p28047
S'unsigned int'
p28048
sS'default'
p28049
S'0'
p28050
sS'name'
p28051
S'max_failures'
p28052
sS'required'
p28053
I00
sS'group_name'
p28054
Nsa(dp28055
S'description'
p28056
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p28057
sS'cpp_type'
p28058
S'unsigned int'
p28059
sS'default'
p28060
S'4294967295'
p28061
sS'name'
p28062
S'max_procs_per_app'
p28063
sS'required'
p28064
I00
sS'group_name'
p28065
Nsa(dp28066
S'description'
p28067
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p28068
sS'cpp_type'
p28069
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p28070
sS'default'
p28071
g3
sS'name'
p28072
S'move_apps'
p28073
sS'required'
p28074
I00
sS'group_name'
p28075
Nsa(dp28076
S'description'
p28077
S'The positions corresponding to each move_app.\n'
p28078
sS'cpp_type'
p28079
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p28080
sS'default'
p28081
g3
sS'name'
p28082
S'move_positions'
p28083
sS'required'
p28084
I00
sS'group_name'
p28085
Nsa(dp28086
S'description'
p28087
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p28088
sS'cpp_type'
p28089
S'double'
p28090
sS'default'
p28091
S'1.79769e+308'
p28092
sS'name'
p28093
S'move_time'
p28094
sS'required'
p28095
I00
sS'group_name'
p28096
Nsa(dp28097
S'description'
p28098
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p28099
sS'cpp_type'
p28100
S'bool'
p28101
sS'default'
p28102
S'0'
p28103
sS'name'
p28104
S'output_in_position'
p28105
sS'required'
p28106
I00
sS'group_name'
p28107
Nsa(dp28108
S'description'
p28109
S'If true then every sub-cycle will be output.\n'
p28110
sS'cpp_type'
p28111
S'bool'
p28112
sS'default'
p28113
S'0'
p28114
sS'name'
p28115
S'output_sub_cycles'
p28116
sS'required'
p28117
I00
sS'group_name'
p28118
Nsa(dp28119
S'description'
p28120
S"The positions of the App locations.  Each set of 3 values will represent a Point.  This and 'positions_file' cannot be both supplied. If this and 'positions_file' are not supplied, a single position (0,0,0) will be used\n"
p28121
sS'cpp_type'
p28122
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p28123
sS'default'
p28124
g3
sS'name'
p28125
S'positions'
p28126
sS'required'
p28127
I00
sS'group_name'
p28128
Nsa(dp28129
S'description'
p28130
S"A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  This and 'positions' cannot be both supplied\n"
p28131
sS'cpp_type'
p28132
S'std::__1::vector<FileName, std::__1::allocator<FileName> >'
p28133
sS'default'
p28134
g3
sS'name'
p28135
S'positions_file'
p28136
sS'required'
p28137
I00
sS'group_name'
p28138
Nsa(dp28139
S'description'
p28140
S'Toggle the display of sub-cycles on the screen.\n'
p28141
sS'cpp_type'
p28142
S'bool'
p28143
sS'default'
p28144
S'1'
p28145
sS'name'
p28146
S'print_sub_cycles'
p28147
sS'required'
p28148
I00
sS'group_name'
p28149
Nsa(dp28150
S'description'
p28151
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p28152
sS'cpp_type'
p28153
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p28154
sS'default'
p28155
g3
sS'name'
p28156
S'reset_apps'
p28157
sS'required'
p28158
I00
sS'group_name'
p28159
Nsa(dp28160
S'description'
p28161
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p28162
sS'cpp_type'
p28163
S'double'
p28164
sS'default'
p28165
S'1.79769e+308'
p28166
sS'name'
p28167
S'reset_time'
p28168
sS'required'
p28169
I00
sS'group_name'
p28170
Nsa(dp28171
S'description'
p28172
S'The relative difference between the new solution and the old solution that will be considered to be at steady state\n'
p28173
sS'cpp_type'
p28174
S'double'
p28175
sS'default'
p28176
S'1e-08'
p28177
sS'name'
p28178
S'steady_state_tol'
p28179
sS'required'
p28180
I00
sS'group_name'
p28181
Nsa(dp28182
S'description'
p28183
S"Set to true to allow this MultiApp to take smaller timesteps than the rest of the simulation.  More than one timestep will be performed for each 'master' timestep\n"
p28184
sS'cpp_type'
p28185
S'bool'
p28186
sS'default'
p28187
S'0'
p28188
sS'name'
p28189
S'sub_cycling'
p28190
sS'required'
p28191
I00
sS'group_name'
p28192
Nsa(dp28193
S'description'
p28194
S"If true this MultiApp won't participate in dt decisions and will always be fast-forwarded to the current time.\n"
p28195
sS'cpp_type'
p28196
S'bool'
p28197
sS'default'
p28198
S'0'
p28199
sS'name'
p28200
S'tolerate_failure'
p28201
sS'required'
p28202
I00
sS'group_name'
p28203
Nsa(dp28204
S'description'
p28205
g3
sS'cpp_type'
p28206
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28207
sS'default'
p28208
S'TransientMultiApp'
p28209
sS'name'
p28210
S'type'
p28211
sS'required'
p28212
I00
sS'group_name'
p28213
Nsa(dp28214
S'description'
p28215
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28216
sS'cpp_type'
p28217
S'bool'
p28218
sS'default'
p28219
S'0'
p28220
sS'name'
p28221
S'use_displaced_mesh'
p28222
sS'required'
p28223
I00
sS'group_name'
p28224
S'Advanced'
p28225
sasS'name'
p28226
S'/MultiApps/TransientMultiApp'
p28227
sasS'parameters'
p28228
NsS'name'
p28229
S'/MultiApps'
p28230
sa(dp28231
S'description'
p28232
g3
sS'subblocks'
p28233
(lp28234
(dp28235
S'description'
p28236
g3
sS'subblocks'
p28237
NsS'parameters'
p28238
(lp28239
(dp28240
S'description'
p28241
S'A string representing the Moose Object that will be built by this Action\n'
p28242
sS'cpp_type'
p28243
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28244
sS'default'
p28245
g3
sS'name'
p28246
S'type'
p28247
sS'required'
p28248
I01
sS'group_name'
p28249
NsasS'name'
p28250
S'/NodalKernels/*'
p28251
sa(dp28252
S'description'
p28253
g3
sS'subblocks'
p28254
NsS'parameters'
p28255
(lp28256
(dp28257
S'description'
p28258
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28259
sS'cpp_type'
p28260
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p28261
sS'default'
p28262
g3
sS'name'
p28263
S'block'
p28264
sS'required'
p28265
I00
sS'group_name'
p28266
Nsa(dp28267
S'description'
p28268
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28269
sS'cpp_type'
p28270
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p28271
sS'default'
p28272
g3
sS'name'
p28273
S'boundary'
p28274
sS'required'
p28275
I00
sS'group_name'
p28276
Nsa(dp28277
S'description'
p28278
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28279
sS'cpp_type'
p28280
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p28281
sS'default'
p28282
g3
sS'name'
p28283
S'control_tags'
p28284
sS'required'
p28285
I00
sS'group_name'
p28286
S'Advanced'
p28287
sa(dp28288
S'description'
p28289
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p28290
sS'cpp_type'
p28291
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p28292
sS'default'
p28293
g3
sS'name'
p28294
S'diag_save_in'
p28295
sS'required'
p28296
I00
sS'group_name'
p28297
Nsa(dp28298
S'description'
p28299
S'Set the enabled status of the MooseObject.\n'
p28300
sS'cpp_type'
p28301
S'bool'
p28302
sS'default'
p28303
S'1'
p28304
sS'name'
p28305
S'enable'
p28306
sS'required'
p28307
I00
sS'group_name'
p28308
S'Advanced'
p28309
sa(dp28310
S'description'
p28311
S'Determines whether this object is calculated using an implicit or explicit form\n'
p28312
sS'cpp_type'
p28313
S'bool'
p28314
sS'default'
p28315
S'1'
p28316
sS'name'
p28317
S'implicit'
p28318
sS'required'
p28319
I00
sS'group_name'
p28320
S'Advanced'
p28321
sa(dp28322
S'description'
p28323
S"The constant rate in 'du/dt = rate'\n"
p28324
sS'cpp_type'
p28325
S'double'
p28326
sS'default'
p28327
g3
sS'name'
p28328
S'rate'
p28329
sS'required'
p28330
I01
sS'group_name'
p28331
Nsa(dp28332
S'description'
p28333
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p28334
sS'cpp_type'
p28335
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p28336
sS'default'
p28337
g3
sS'name'
p28338
S'save_in'
p28339
sS'required'
p28340
I00
sS'group_name'
p28341
Nsa(dp28342
S'description'
p28343
S'The seed for the master random number generator\n'
p28344
sS'cpp_type'
p28345
S'unsigned int'
p28346
sS'default'
p28347
S'0'
p28348
sS'name'
p28349
S'seed'
p28350
sS'required'
p28351
I00
sS'group_name'
p28352
S'Advanced'
p28353
sa(dp28354
S'description'
p28355
g3
sS'cpp_type'
p28356
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28357
sS'default'
p28358
S'ConstantRate'
p28359
sS'name'
p28360
S'type'
p28361
sS'required'
p28362
I00
sS'group_name'
p28363
Nsa(dp28364
S'description'
p28365
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28366
sS'cpp_type'
p28367
S'bool'
p28368
sS'default'
p28369
S'0'
p28370
sS'name'
p28371
S'use_displaced_mesh'
p28372
sS'required'
p28373
I00
sS'group_name'
p28374
S'Advanced'
p28375
sa(dp28376
S'description'
p28377
S'The name of the variable that this boundary condition applies to\n'
p28378
sS'cpp_type'
p28379
S'NonlinearVariableName'
p28380
sS'default'
p28381
g3
sS'name'
p28382
S'variable'
p28383
sS'required'
p28384
I01
sS'group_name'
p28385
NsasS'name'
p28386
S'/NodalKernels/ConstantRate'
p28387
sa(dp28388
S'description'
p28389
g3
sS'subblocks'
p28390
NsS'parameters'
p28391
(lp28392
(dp28393
S'description'
p28394
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28395
sS'cpp_type'
p28396
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p28397
sS'default'
p28398
g3
sS'name'
p28399
S'block'
p28400
sS'required'
p28401
I00
sS'group_name'
p28402
Nsa(dp28403
S'description'
p28404
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28405
sS'cpp_type'
p28406
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p28407
sS'default'
p28408
g3
sS'name'
p28409
S'boundary'
p28410
sS'required'
p28411
I00
sS'group_name'
p28412
Nsa(dp28413
S'description'
p28414
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28415
sS'cpp_type'
p28416
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p28417
sS'default'
p28418
g3
sS'name'
p28419
S'control_tags'
p28420
sS'required'
p28421
I00
sS'group_name'
p28422
S'Advanced'
p28423
sa(dp28424
S'description'
p28425
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p28426
sS'cpp_type'
p28427
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p28428
sS'default'
p28429
g3
sS'name'
p28430
S'diag_save_in'
p28431
sS'required'
p28432
I00
sS'group_name'
p28433
Nsa(dp28434
S'description'
p28435
S'Set the enabled status of the MooseObject.\n'
p28436
sS'cpp_type'
p28437
S'bool'
p28438
sS'default'
p28439
S'1'
p28440
sS'name'
p28441
S'enable'
p28442
sS'required'
p28443
I00
sS'group_name'
p28444
S'Advanced'
p28445
sa(dp28446
S'description'
p28447
S'Determines whether this object is calculated using an implicit or explicit form\n'
p28448
sS'cpp_type'
p28449
S'bool'
p28450
sS'default'
p28451
S'1'
p28452
sS'name'
p28453
S'implicit'
p28454
sS'required'
p28455
I00
sS'group_name'
p28456
S'Advanced'
p28457
sa(dp28458
S'description'
p28459
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p28460
sS'cpp_type'
p28461
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p28462
sS'default'
p28463
g3
sS'name'
p28464
S'save_in'
p28465
sS'required'
p28466
I00
sS'group_name'
p28467
Nsa(dp28468
S'description'
p28469
S'The seed for the master random number generator\n'
p28470
sS'cpp_type'
p28471
S'unsigned int'
p28472
sS'default'
p28473
S'0'
p28474
sS'name'
p28475
S'seed'
p28476
sS'required'
p28477
I00
sS'group_name'
p28478
S'Advanced'
p28479
sa(dp28480
S'description'
p28481
g3
sS'cpp_type'
p28482
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28483
sS'default'
p28484
S'TimeDerivativeNodalKernel'
p28485
sS'name'
p28486
S'type'
p28487
sS'required'
p28488
I00
sS'group_name'
p28489
Nsa(dp28490
S'description'
p28491
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28492
sS'cpp_type'
p28493
S'bool'
p28494
sS'default'
p28495
S'0'
p28496
sS'name'
p28497
S'use_displaced_mesh'
p28498
sS'required'
p28499
I00
sS'group_name'
p28500
S'Advanced'
p28501
sa(dp28502
S'description'
p28503
S'The name of the variable that this boundary condition applies to\n'
p28504
sS'cpp_type'
p28505
S'NonlinearVariableName'
p28506
sS'default'
p28507
g3
sS'name'
p28508
S'variable'
p28509
sS'required'
p28510
I01
sS'group_name'
p28511
NsasS'name'
p28512
S'/NodalKernels/TimeDerivativeNodalKernel'
p28513
sa(dp28514
S'description'
p28515
g3
sS'subblocks'
p28516
NsS'parameters'
p28517
(lp28518
(dp28519
S'description'
p28520
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28521
sS'cpp_type'
p28522
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p28523
sS'default'
p28524
g3
sS'name'
p28525
S'block'
p28526
sS'required'
p28527
I00
sS'group_name'
p28528
Nsa(dp28529
S'description'
p28530
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28531
sS'cpp_type'
p28532
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p28533
sS'default'
p28534
g3
sS'name'
p28535
S'boundary'
p28536
sS'required'
p28537
I00
sS'group_name'
p28538
Nsa(dp28539
S'description'
p28540
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28541
sS'cpp_type'
p28542
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p28543
sS'default'
p28544
g3
sS'name'
p28545
S'control_tags'
p28546
sS'required'
p28547
I00
sS'group_name'
p28548
S'Advanced'
p28549
sa(dp28550
S'description'
p28551
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p28552
sS'cpp_type'
p28553
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p28554
sS'default'
p28555
g3
sS'name'
p28556
S'diag_save_in'
p28557
sS'required'
p28558
I00
sS'group_name'
p28559
Nsa(dp28560
S'description'
p28561
S'Set the enabled status of the MooseObject.\n'
p28562
sS'cpp_type'
p28563
S'bool'
p28564
sS'default'
p28565
S'1'
p28566
sS'name'
p28567
S'enable'
p28568
sS'required'
p28569
I00
sS'group_name'
p28570
S'Advanced'
p28571
sa(dp28572
S'description'
p28573
S'The forcing function\n'
p28574
sS'cpp_type'
p28575
S'FunctionName'
p28576
sS'default'
p28577
g3
sS'name'
p28578
S'function'
p28579
sS'required'
p28580
I01
sS'group_name'
p28581
Nsa(dp28582
S'description'
p28583
S'Determines whether this object is calculated using an implicit or explicit form\n'
p28584
sS'cpp_type'
p28585
S'bool'
p28586
sS'default'
p28587
S'1'
p28588
sS'name'
p28589
S'implicit'
p28590
sS'required'
p28591
I00
sS'group_name'
p28592
S'Advanced'
p28593
sa(dp28594
S'description'
p28595
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p28596
sS'cpp_type'
p28597
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p28598
sS'default'
p28599
g3
sS'name'
p28600
S'save_in'
p28601
sS'required'
p28602
I00
sS'group_name'
p28603
Nsa(dp28604
S'description'
p28605
S'The seed for the master random number generator\n'
p28606
sS'cpp_type'
p28607
S'unsigned int'
p28608
sS'default'
p28609
S'0'
p28610
sS'name'
p28611
S'seed'
p28612
sS'required'
p28613
I00
sS'group_name'
p28614
S'Advanced'
p28615
sa(dp28616
S'description'
p28617
g3
sS'cpp_type'
p28618
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28619
sS'default'
p28620
S'UserForcingFunctionNodalKernel'
p28621
sS'name'
p28622
S'type'
p28623
sS'required'
p28624
I00
sS'group_name'
p28625
Nsa(dp28626
S'description'
p28627
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28628
sS'cpp_type'
p28629
S'bool'
p28630
sS'default'
p28631
S'0'
p28632
sS'name'
p28633
S'use_displaced_mesh'
p28634
sS'required'
p28635
I00
sS'group_name'
p28636
S'Advanced'
p28637
sa(dp28638
S'description'
p28639
S'The name of the variable that this boundary condition applies to\n'
p28640
sS'cpp_type'
p28641
S'NonlinearVariableName'
p28642
sS'default'
p28643
g3
sS'name'
p28644
S'variable'
p28645
sS'required'
p28646
I01
sS'group_name'
p28647
NsasS'name'
p28648
S'/NodalKernels/UserForcingFunctionNodalKernel'
p28649
sasS'parameters'
p28650
NsS'name'
p28651
S'/NodalKernels'
p28652
sa(dp28653
S'description'
p28654
g3
sS'subblocks'
p28655
NsS'parameters'
p28656
(lp28657
(dp28658
S'description'
p28659
S'The boundary ID or name where the normals will be computed\n'
p28660
sS'cpp_type'
p28661
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p28662
sS'default'
p28663
S'ANY_BOUNDARY_ID'
p28664
sS'name'
p28665
S'boundary'
p28666
sS'required'
p28667
I00
sS'group_name'
p28668
Nsa(dp28669
S'description'
p28670
S"boundary ID or name with nodes at 'corners'\n"
p28671
sS'cpp_type'
p28672
S'BoundaryName'
p28673
sS'default'
p28674
g3
sS'name'
p28675
S'corner_boundary'
p28676
sS'required'
p28677
I00
sS'group_name'
p28678
Nsa(dp28679
S'name'
p28680
S'order'
p28681
sS'cpp_type'
p28682
S'MooseEnum'
p28683
sS'default'
p28684
S'FIRST'
p28685
sS'description'
p28686
S'Specifies the order of variables that hold the nodal normals. Needs to match the order of the mesh\n'
p28687
sS'required'
p28688
I00
sS'options'
p28689
S'FIRST SECOND'
p28690
sS'group_name'
p28691
NsasS'name'
p28692
S'/NodalNormals'
p28693
sa(dp28694
S'description'
p28695
g3
sS'subblocks'
p28696
(lp28697
(dp28698
S'description'
p28699
g3
sS'subblocks'
p28700
NsS'parameters'
p28701
(lp28702
(dp28703
S'description'
p28704
S'A string representing the Moose Object that will be built by this Action\n'
p28705
sS'cpp_type'
p28706
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28707
sS'default'
p28708
g3
sS'name'
p28709
S'type'
p28710
sS'required'
p28711
I01
sS'group_name'
p28712
NsasS'name'
p28713
S'/Outputs/*'
p28714
sa(dp28715
S'description'
p28716
g3
sS'subblocks'
p28717
NsS'parameters'
p28718
(lp28719
(dp28720
S'name'
p28721
S'additional_execute_on'
p28722
sS'cpp_type'
p28723
S'MultiMooseEnum'
p28724
sS'default'
p28725
g3
sS'description'
p28726
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p28727
sS'required'
p28728
I00
sS'options'
p28729
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p28730
sS'group_name'
p28731
Nsa(dp28732
S'description'
p28733
S'Align the outputted csv data by padding the numbers with trailing whitespace\n'
p28734
sS'cpp_type'
p28735
S'bool'
p28736
sS'default'
p28737
S'0'
p28738
sS'name'
p28739
S'align'
p28740
sS'required'
p28741
I00
sS'group_name'
p28742
Nsa(dp28743
S'description'
p28744
S'When true the date and time are appended to the output filename.\n'
p28745
sS'cpp_type'
p28746
S'bool'
p28747
sS'default'
p28748
S'0'
p28749
sS'name'
p28750
S'append_date'
p28751
sS'required'
p28752
I00
sS'group_name'
p28753
Nsa(dp28754
S'description'
p28755
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p28756
sS'cpp_type'
p28757
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28758
sS'default'
p28759
g3
sS'name'
p28760
S'append_date_format'
p28761
sS'required'
p28762
I00
sS'group_name'
p28763
Nsa(dp28764
S'description'
p28765
S'Append existing file on restart\n'
p28766
sS'cpp_type'
p28767
S'bool'
p28768
sS'default'
p28769
S'0'
p28770
sS'name'
p28771
S'append_restart'
p28772
sS'required'
p28773
I00
sS'group_name'
p28774
Nsa(dp28775
S'description'
p28776
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28777
sS'cpp_type'
p28778
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p28779
sS'default'
p28780
g3
sS'name'
p28781
S'control_tags'
p28782
sS'required'
p28783
I00
sS'group_name'
p28784
S'Advanced'
p28785
sa(dp28786
S'description'
p28787
S"Assign the delimiter (default is ','\n"
p28788
sS'cpp_type'
p28789
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28790
sS'default'
p28791
g3
sS'name'
p28792
S'delimiter'
p28793
sS'required'
p28794
I00
sS'group_name'
p28795
Nsa(dp28796
S'description'
p28797
S'Set the enabled status of the MooseObject.\n'
p28798
sS'cpp_type'
p28799
S'bool'
p28800
sS'default'
p28801
S'1'
p28802
sS'name'
p28803
S'enable'
p28804
sS'required'
p28805
I00
sS'group_name'
p28806
S'Advanced'
p28807
sa(dp28808
S'description'
p28809
S'Time at which this output object stop operating\n'
p28810
sS'cpp_type'
p28811
S'double'
p28812
sS'default'
p28813
g3
sS'name'
p28814
S'end_time'
p28815
sS'required'
p28816
I00
sS'group_name'
p28817
S'Timing'
p28818
sa(dp28819
S'description'
p28820
S'Enable/disable the output of elemental variables\n'
p28821
sS'cpp_type'
p28822
S'bool'
p28823
sS'default'
p28824
S'1'
p28825
sS'name'
p28826
S'execute_elemental_variables'
p28827
sS'required'
p28828
I00
sS'group_name'
p28829
Nsa(dp28830
S'description'
p28831
S'Enable/disable the output of input file information\n'
p28832
sS'cpp_type'
p28833
S'bool'
p28834
sS'default'
p28835
S'1'
p28836
sS'name'
p28837
S'execute_input'
p28838
sS'required'
p28839
I00
sS'group_name'
p28840
Nsa(dp28841
S'description'
p28842
S'Enable/disable the output of nodal variables\n'
p28843
sS'cpp_type'
p28844
S'bool'
p28845
sS'default'
p28846
S'1'
p28847
sS'name'
p28848
S'execute_nodal_variables'
p28849
sS'required'
p28850
I00
sS'group_name'
p28851
Nsa(dp28852
S'name'
p28853
S'execute_on'
p28854
sS'cpp_type'
p28855
S'MultiMooseEnum'
p28856
sS'default'
p28857
S'INITIAL TIMESTEP_END'
p28858
sS'description'
p28859
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p28860
sS'required'
p28861
I00
sS'options'
p28862
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p28863
sS'group_name'
p28864
Nsa(dp28865
S'name'
p28866
S'execute_postprocessors_on'
p28867
sS'cpp_type'
p28868
S'MultiMooseEnum'
p28869
sS'default'
p28870
g3
sS'description'
p28871
S'Control of when postprocessors are output\n'
p28872
sS'required'
p28873
I00
sS'options'
p28874
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p28875
sS'group_name'
p28876
S'Variables'
p28877
sa(dp28878
S'description'
p28879
S'Enable/disable the output of aux scalar variables\n'
p28880
sS'cpp_type'
p28881
S'bool'
p28882
sS'default'
p28883
S'1'
p28884
sS'name'
p28885
S'execute_scalar_variables'
p28886
sS'required'
p28887
I00
sS'group_name'
p28888
Nsa(dp28889
S'name'
p28890
S'execute_scalars_on'
p28891
sS'cpp_type'
p28892
S'MultiMooseEnum'
p28893
sS'default'
p28894
g3
sS'description'
p28895
S'Control the output of scalar variables\n'
p28896
sS'required'
p28897
I00
sS'options'
p28898
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p28899
sS'group_name'
p28900
S'Variables'
p28901
sa(dp28902
S'description'
p28903
S'Enable/disable the output of the simulation information\n'
p28904
sS'cpp_type'
p28905
S'bool'
p28906
sS'default'
p28907
S'1'
p28908
sS'name'
p28909
S'execute_system_information'
p28910
sS'required'
p28911
I00
sS'group_name'
p28912
Nsa(dp28913
S'description'
p28914
S'Enable/disable the output of vector postprocessors\n'
p28915
sS'cpp_type'
p28916
S'bool'
p28917
sS'default'
p28918
S'1'
p28919
sS'name'
p28920
S'execute_vector_postprocessors'
p28921
sS'required'
p28922
I00
sS'group_name'
p28923
Nsa(dp28924
S'name'
p28925
S'execute_vector_postprocessors_on'
p28926
sS'cpp_type'
p28927
S'MultiMooseEnum'
p28928
sS'default'
p28929
g3
sS'description'
p28930
S'Enable/disable the output of VectorPostprocessors\n'
p28931
sS'required'
p28932
I00
sS'options'
p28933
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p28934
sS'group_name'
p28935
S'Variables'
p28936
sa(dp28937
S'description'
p28938
S'The desired solution output name without an extension\n'
p28939
sS'cpp_type'
p28940
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28941
sS'default'
p28942
g3
sS'name'
p28943
S'file_base'
p28944
sS'required'
p28945
I00
sS'group_name'
p28946
Nsa(dp28947
S'description'
p28948
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p28949
sS'cpp_type'
p28950
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p28951
sS'default'
p28952
g3
sS'name'
p28953
S'hide'
p28954
sS'required'
p28955
I00
sS'group_name'
p28956
S'Variables'
p28957
sa(dp28958
S'description'
p28959
S'The interval at which time steps are output to the solution file\n'
p28960
sS'cpp_type'
p28961
S'unsigned int'
p28962
sS'default'
p28963
S'1'
p28964
sS'name'
p28965
S'interval'
p28966
sS'required'
p28967
I00
sS'group_name'
p28968
S'Timing'
p28969
sa(dp28970
S'description'
p28971
S'Number of divisions applied to time step when outputting linear residuals\n'
p28972
sS'cpp_type'
p28973
S'double'
p28974
sS'default'
p28975
S'1000'
p28976
sS'name'
p28977
S'linear_residual_dt_divisor'
p28978
sS'required'
p28979
I00
sS'group_name'
p28980
S'PETSc'
p28981
sa(dp28982
S'description'
p28983
S'Specifies an end time to begin output on each linear residual evaluation\n'
p28984
sS'cpp_type'
p28985
S'double'
p28986
sS'default'
p28987
g3
sS'name'
p28988
S'linear_residual_end_time'
p28989
sS'required'
p28990
I00
sS'group_name'
p28991
S'PETSc'
p28992
sa(dp28993
S'description'
p28994
S'Specifies a start time to begin output on each linear residual evaluation\n'
p28995
sS'cpp_type'
p28996
S'double'
p28997
sS'default'
p28998
g3
sS'name'
p28999
S'linear_residual_start_time'
p29000
sS'required'
p29001
I00
sS'group_name'
p29002
S'PETSc'
p29003
sa(dp29004
S'description'
p29005
S'Specifies whether output occurs on each linear residual evaluation\n'
p29006
sS'cpp_type'
p29007
S'bool'
p29008
sS'default'
p29009
S'0'
p29010
sS'name'
p29011
S'linear_residuals'
p29012
sS'required'
p29013
I00
sS'group_name'
p29014
S'PETSc'
p29015
sa(dp29016
S'description'
p29017
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p29018
sS'cpp_type'
p29019
S'double'
p29020
sS'default'
p29021
S'1000'
p29022
sS'name'
p29023
S'nonlinear_residual_dt_divisor'
p29024
sS'required'
p29025
I00
sS'group_name'
p29026
S'PETSc'
p29027
sa(dp29028
S'description'
p29029
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p29030
sS'cpp_type'
p29031
S'double'
p29032
sS'default'
p29033
g3
sS'name'
p29034
S'nonlinear_residual_end_time'
p29035
sS'required'
p29036
I00
sS'group_name'
p29037
S'PETSc'
p29038
sa(dp29039
S'description'
p29040
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p29041
sS'cpp_type'
p29042
S'double'
p29043
sS'default'
p29044
g3
sS'name'
p29045
S'nonlinear_residual_start_time'
p29046
sS'required'
p29047
I00
sS'group_name'
p29048
S'PETSc'
p29049
sa(dp29050
S'description'
p29051
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p29052
sS'cpp_type'
p29053
S'bool'
p29054
sS'default'
p29055
S'0'
p29056
sS'name'
p29057
S'nonlinear_residuals'
p29058
sS'required'
p29059
I00
sS'group_name'
p29060
S'PETSc'
p29061
sa(dp29062
S'description'
p29063
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p29064
sS'cpp_type'
p29065
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p29066
sS'default'
p29067
g3
sS'name'
p29068
S'output_if_base_contains'
p29069
sS'required'
p29070
I00
sS'group_name'
p29071
S'Advanced'
p29072
sa(dp29073
S'description'
p29074
S'Specifies whether output occurs on each linear residual evaluation\n'
p29075
sS'cpp_type'
p29076
S'bool'
p29077
sS'default'
p29078
S'0'
p29079
sS'name'
p29080
S'output_linear'
p29081
sS'required'
p29082
I00
sS'group_name'
p29083
Nsa(dp29084
S'description'
p29085
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p29086
sS'cpp_type'
p29087
S'bool'
p29088
sS'default'
p29089
S'0'
p29090
sS'name'
p29091
S'output_nonlinear'
p29092
sS'required'
p29093
I00
sS'group_name'
p29094
Nsa(dp29095
S'description'
p29096
S'Enable/disable the output of postprocessors\n'
p29097
sS'cpp_type'
p29098
S'bool'
p29099
sS'default'
p29100
S'1'
p29101
sS'name'
p29102
S'output_postprocessors'
p29103
sS'required'
p29104
I00
sS'group_name'
p29105
Nsa(dp29106
S'description'
p29107
S'Set the output precision\n'
p29108
sS'cpp_type'
p29109
S'unsigned int'
p29110
sS'default'
p29111
S'14'
p29112
sS'name'
p29113
S'precision'
p29114
sS'required'
p29115
I00
sS'group_name'
p29116
Nsa(dp29117
S'description'
p29118
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p29119
sS'cpp_type'
p29120
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p29121
sS'default'
p29122
g3
sS'name'
p29123
S'show'
p29124
sS'required'
p29125
I00
sS'group_name'
p29126
S'Variables'
p29127
sa(dp29128
S'description'
p29129
S'Time at which this output object begins to operate\n'
p29130
sS'cpp_type'
p29131
S'double'
p29132
sS'default'
p29133
g3
sS'name'
p29134
S'start_time'
p29135
sS'required'
p29136
I00
sS'group_name'
p29137
S'Timing'
p29138
sa(dp29139
S'description'
p29140
S'Only export results at sync times\n'
p29141
sS'cpp_type'
p29142
S'bool'
p29143
sS'default'
p29144
S'0'
p29145
sS'name'
p29146
S'sync_only'
p29147
sS'required'
p29148
I00
sS'group_name'
p29149
S'Timing'
p29150
sa(dp29151
S'description'
p29152
S'Times at which the output and solution is forced to occur\n'
p29153
sS'cpp_type'
p29154
S'std::__1::vector<double, std::__1::allocator<double> >'
p29155
sS'default'
p29156
g3
sS'name'
p29157
S'sync_times'
p29158
sS'required'
p29159
I00
sS'group_name'
p29160
S'Timing'
p29161
sa(dp29162
S'description'
p29163
S"Whether or not the 'time' column should be written for Postprocessor CSV files\n"
p29164
sS'cpp_type'
p29165
S'bool'
p29166
sS'default'
p29167
S'1'
p29168
sS'name'
p29169
S'time_column'
p29170
sS'required'
p29171
I00
sS'group_name'
p29172
Nsa(dp29173
S'description'
p29174
S'When true and VecptorPostprocessor data exists, write a csv file containing the timestep and time information.\n'
p29175
sS'cpp_type'
p29176
S'bool'
p29177
sS'default'
p29178
S'0'
p29179
sS'name'
p29180
S'time_data'
p29181
sS'required'
p29182
I00
sS'group_name'
p29183
Nsa(dp29184
S'description'
p29185
S'Time tolerance utilized checking start and end times\n'
p29186
sS'cpp_type'
p29187
S'double'
p29188
sS'default'
p29189
S'1e-14'
p29190
sS'name'
p29191
S'time_tolerance'
p29192
sS'required'
p29193
I00
sS'group_name'
p29194
S'Timing'
p29195
sa(dp29196
S'description'
p29197
g3
sS'cpp_type'
p29198
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29199
sS'default'
p29200
S'CSV'
p29201
sS'name'
p29202
S'type'
p29203
sS'required'
p29204
I00
sS'group_name'
p29205
Nsa(dp29206
S'description'
p29207
S'Enable/disable the use of the displaced mesh for outputting\n'
p29208
sS'cpp_type'
p29209
S'bool'
p29210
sS'default'
p29211
S'0'
p29212
sS'name'
p29213
S'use_displaced'
p29214
sS'required'
p29215
I00
sS'group_name'
p29216
NsasS'name'
p29217
S'/Outputs/CSV'
p29218
sa(dp29219
S'description'
p29220
g3
sS'subblocks'
p29221
NsS'parameters'
p29222
(lp29223
(dp29224
S'name'
p29225
S'additional_execute_on'
p29226
sS'cpp_type'
p29227
S'MultiMooseEnum'
p29228
sS'default'
p29229
g3
sS'description'
p29230
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p29231
sS'required'
p29232
I00
sS'options'
p29233
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29234
sS'group_name'
p29235
Nsa(dp29236
S'description'
p29237
S'When true the date and time are appended to the output filename.\n'
p29238
sS'cpp_type'
p29239
S'bool'
p29240
sS'default'
p29241
S'0'
p29242
sS'name'
p29243
S'append_date'
p29244
sS'required'
p29245
I00
sS'group_name'
p29246
Nsa(dp29247
S'description'
p29248
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p29249
sS'cpp_type'
p29250
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29251
sS'default'
p29252
g3
sS'name'
p29253
S'append_date_format'
p29254
sS'required'
p29255
I00
sS'group_name'
p29256
Nsa(dp29257
S'description'
p29258
S'Toggle the output of binary files\n'
p29259
sS'cpp_type'
p29260
S'bool'
p29261
sS'default'
p29262
S'1'
p29263
sS'name'
p29264
S'binary'
p29265
sS'required'
p29266
I00
sS'group_name'
p29267
S'Advanced'
p29268
sa(dp29269
S'description'
p29270
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p29271
sS'cpp_type'
p29272
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p29273
sS'default'
p29274
g3
sS'name'
p29275
S'control_tags'
p29276
sS'required'
p29277
I00
sS'group_name'
p29278
S'Advanced'
p29279
sa(dp29280
S'description'
p29281
S'Set the enabled status of the MooseObject.\n'
p29282
sS'cpp_type'
p29283
S'bool'
p29284
sS'default'
p29285
S'1'
p29286
sS'name'
p29287
S'enable'
p29288
sS'required'
p29289
I00
sS'group_name'
p29290
S'Advanced'
p29291
sa(dp29292
S'description'
p29293
S'Time at which this output object stop operating\n'
p29294
sS'cpp_type'
p29295
S'double'
p29296
sS'default'
p29297
g3
sS'name'
p29298
S'end_time'
p29299
sS'required'
p29300
I00
sS'group_name'
p29301
S'Timing'
p29302
sa(dp29303
S'name'
p29304
S'execute_on'
p29305
sS'cpp_type'
p29306
S'MultiMooseEnum'
p29307
sS'default'
p29308
S'INITIAL TIMESTEP_END'
p29309
sS'description'
p29310
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p29311
sS'required'
p29312
I00
sS'options'
p29313
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29314
sS'group_name'
p29315
Nsa(dp29316
S'description'
p29317
S'The desired solution output name without an extension\n'
p29318
sS'cpp_type'
p29319
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29320
sS'default'
p29321
g3
sS'name'
p29322
S'file_base'
p29323
sS'required'
p29324
I00
sS'group_name'
p29325
Nsa(dp29326
S'description'
p29327
S'The interval at which time steps are output to the solution file\n'
p29328
sS'cpp_type'
p29329
S'unsigned int'
p29330
sS'default'
p29331
S'1'
p29332
sS'name'
p29333
S'interval'
p29334
sS'required'
p29335
I00
sS'group_name'
p29336
S'Timing'
p29337
sa(dp29338
S'description'
p29339
S'Number of divisions applied to time step when outputting linear residuals\n'
p29340
sS'cpp_type'
p29341
S'double'
p29342
sS'default'
p29343
S'1000'
p29344
sS'name'
p29345
S'linear_residual_dt_divisor'
p29346
sS'required'
p29347
I00
sS'group_name'
p29348
S'PETSc'
p29349
sa(dp29350
S'description'
p29351
S'Specifies an end time to begin output on each linear residual evaluation\n'
p29352
sS'cpp_type'
p29353
S'double'
p29354
sS'default'
p29355
g3
sS'name'
p29356
S'linear_residual_end_time'
p29357
sS'required'
p29358
I00
sS'group_name'
p29359
S'PETSc'
p29360
sa(dp29361
S'description'
p29362
S'Specifies a start time to begin output on each linear residual evaluation\n'
p29363
sS'cpp_type'
p29364
S'double'
p29365
sS'default'
p29366
g3
sS'name'
p29367
S'linear_residual_start_time'
p29368
sS'required'
p29369
I00
sS'group_name'
p29370
S'PETSc'
p29371
sa(dp29372
S'description'
p29373
S'Specifies whether output occurs on each linear residual evaluation\n'
p29374
sS'cpp_type'
p29375
S'bool'
p29376
sS'default'
p29377
S'0'
p29378
sS'name'
p29379
S'linear_residuals'
p29380
sS'required'
p29381
I00
sS'group_name'
p29382
S'PETSc'
p29383
sa(dp29384
S'description'
p29385
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p29386
sS'cpp_type'
p29387
S'double'
p29388
sS'default'
p29389
S'1000'
p29390
sS'name'
p29391
S'nonlinear_residual_dt_divisor'
p29392
sS'required'
p29393
I00
sS'group_name'
p29394
S'PETSc'
p29395
sa(dp29396
S'description'
p29397
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p29398
sS'cpp_type'
p29399
S'double'
p29400
sS'default'
p29401
g3
sS'name'
p29402
S'nonlinear_residual_end_time'
p29403
sS'required'
p29404
I00
sS'group_name'
p29405
S'PETSc'
p29406
sa(dp29407
S'description'
p29408
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p29409
sS'cpp_type'
p29410
S'double'
p29411
sS'default'
p29412
g3
sS'name'
p29413
S'nonlinear_residual_start_time'
p29414
sS'required'
p29415
I00
sS'group_name'
p29416
S'PETSc'
p29417
sa(dp29418
S'description'
p29419
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p29420
sS'cpp_type'
p29421
S'bool'
p29422
sS'default'
p29423
S'0'
p29424
sS'name'
p29425
S'nonlinear_residuals'
p29426
sS'required'
p29427
I00
sS'group_name'
p29428
S'PETSc'
p29429
sa(dp29430
S'description'
p29431
S'Number of the restart files to save\n'
p29432
sS'cpp_type'
p29433
S'unsigned int'
p29434
sS'default'
p29435
S'2'
p29436
sS'name'
p29437
S'num_files'
p29438
sS'required'
p29439
I00
sS'group_name'
p29440
Nsa(dp29441
S'description'
p29442
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p29443
sS'cpp_type'
p29444
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p29445
sS'default'
p29446
g3
sS'name'
p29447
S'output_if_base_contains'
p29448
sS'required'
p29449
I00
sS'group_name'
p29450
S'Advanced'
p29451
sa(dp29452
S'description'
p29453
S'Specifies whether output occurs on each linear residual evaluation\n'
p29454
sS'cpp_type'
p29455
S'bool'
p29456
sS'default'
p29457
S'0'
p29458
sS'name'
p29459
S'output_linear'
p29460
sS'required'
p29461
I00
sS'group_name'
p29462
Nsa(dp29463
S'description'
p29464
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p29465
sS'cpp_type'
p29466
S'bool'
p29467
sS'default'
p29468
S'0'
p29469
sS'name'
p29470
S'output_nonlinear'
p29471
sS'required'
p29472
I00
sS'group_name'
p29473
Nsa(dp29474
S'description'
p29475
S'The number of for extension suffix (e.g., out.e-s002)\n'
p29476
sS'cpp_type'
p29477
S'unsigned int'
p29478
sS'default'
p29479
S'4'
p29480
sS'name'
p29481
S'padding'
p29482
sS'required'
p29483
I00
sS'group_name'
p29484
S'Advanced'
p29485
sa(dp29486
S'description'
p29487
S'Time at which this output object begins to operate\n'
p29488
sS'cpp_type'
p29489
S'double'
p29490
sS'default'
p29491
g3
sS'name'
p29492
S'start_time'
p29493
sS'required'
p29494
I00
sS'group_name'
p29495
S'Timing'
p29496
sa(dp29497
S'description'
p29498
S'This will be appended to the file_base to create the directory name for checkpoint files.\n'
p29499
sS'cpp_type'
p29500
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29501
sS'default'
p29502
S'cp'
p29503
sS'name'
p29504
S'suffix'
p29505
sS'required'
p29506
I00
sS'group_name'
p29507
Nsa(dp29508
S'description'
p29509
S'Only export results at sync times\n'
p29510
sS'cpp_type'
p29511
S'bool'
p29512
sS'default'
p29513
S'0'
p29514
sS'name'
p29515
S'sync_only'
p29516
sS'required'
p29517
I00
sS'group_name'
p29518
S'Timing'
p29519
sa(dp29520
S'description'
p29521
S'Times at which the output and solution is forced to occur\n'
p29522
sS'cpp_type'
p29523
S'std::__1::vector<double, std::__1::allocator<double> >'
p29524
sS'default'
p29525
g3
sS'name'
p29526
S'sync_times'
p29527
sS'required'
p29528
I00
sS'group_name'
p29529
S'Timing'
p29530
sa(dp29531
S'description'
p29532
S'Time tolerance utilized checking start and end times\n'
p29533
sS'cpp_type'
p29534
S'double'
p29535
sS'default'
p29536
S'1e-14'
p29537
sS'name'
p29538
S'time_tolerance'
p29539
sS'required'
p29540
I00
sS'group_name'
p29541
S'Timing'
p29542
sa(dp29543
S'description'
p29544
g3
sS'cpp_type'
p29545
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29546
sS'default'
p29547
S'Checkpoint'
p29548
sS'name'
p29549
S'type'
p29550
sS'required'
p29551
I00
sS'group_name'
p29552
Nsa(dp29553
S'description'
p29554
S'Enable/disable the use of the displaced mesh for outputting\n'
p29555
sS'cpp_type'
p29556
S'bool'
p29557
sS'default'
p29558
S'0'
p29559
sS'name'
p29560
S'use_displaced'
p29561
sS'required'
p29562
I00
sS'group_name'
p29563
NsasS'name'
p29564
S'/Outputs/Checkpoint'
p29565
sa(dp29566
S'description'
p29567
g3
sS'subblocks'
p29568
NsS'parameters'
p29569
(lp29570
(dp29571
S'name'
p29572
S'additional_execute_on'
p29573
sS'cpp_type'
p29574
S'MultiMooseEnum'
p29575
sS'default'
p29576
g3
sS'description'
p29577
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p29578
sS'required'
p29579
I00
sS'options'
p29580
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29581
sS'group_name'
p29582
Nsa(dp29583
S'description'
p29584
S'If true, all variable norms will be printed after each solve\n'
p29585
sS'cpp_type'
p29586
S'bool'
p29587
sS'default'
p29588
S'0'
p29589
sS'name'
p29590
S'all_variable_norms'
p29591
sS'required'
p29592
I00
sS'group_name'
p29593
S'Norms'
p29594
sa(dp29595
S'description'
p29596
S'When true the date and time are appended to the output filename.\n'
p29597
sS'cpp_type'
p29598
S'bool'
p29599
sS'default'
p29600
S'0'
p29601
sS'name'
p29602
S'append_date'
p29603
sS'required'
p29604
I00
sS'group_name'
p29605
Nsa(dp29606
S'description'
p29607
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p29608
sS'cpp_type'
p29609
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29610
sS'default'
p29611
g3
sS'name'
p29612
S'append_date_format'
p29613
sS'required'
p29614
I00
sS'group_name'
p29615
Nsa(dp29616
S'description'
p29617
S'Append existing file on restart\n'
p29618
sS'cpp_type'
p29619
S'bool'
p29620
sS'default'
p29621
S'0'
p29622
sS'name'
p29623
S'append_restart'
p29624
sS'required'
p29625
I00
sS'group_name'
p29626
Nsa(dp29627
S'description'
p29628
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p29629
sS'cpp_type'
p29630
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p29631
sS'default'
p29632
g3
sS'name'
p29633
S'control_tags'
p29634
sS'required'
p29635
I00
sS'group_name'
p29636
S'Advanced'
p29637
sa(dp29638
S'description'
p29639
S'Set the enabled status of the MooseObject.\n'
p29640
sS'cpp_type'
p29641
S'bool'
p29642
sS'default'
p29643
S'1'
p29644
sS'name'
p29645
S'enable'
p29646
sS'required'
p29647
I00
sS'group_name'
p29648
S'Advanced'
p29649
sa(dp29650
S'description'
p29651
S'Time at which this output object stop operating\n'
p29652
sS'cpp_type'
p29653
S'double'
p29654
sS'default'
p29655
g3
sS'name'
p29656
S'end_time'
p29657
sS'required'
p29658
I00
sS'group_name'
p29659
S'Timing'
p29660
sa(dp29661
S'description'
p29662
S'Enable/disable the output of elemental variables\n'
p29663
sS'cpp_type'
p29664
S'bool'
p29665
sS'default'
p29666
S'1'
p29667
sS'name'
p29668
S'execute_elemental_variables'
p29669
sS'required'
p29670
I00
sS'group_name'
p29671
Nsa(dp29672
S'description'
p29673
S'Enable/disable the output of input file information\n'
p29674
sS'cpp_type'
p29675
S'bool'
p29676
sS'default'
p29677
S'1'
p29678
sS'name'
p29679
S'execute_input'
p29680
sS'required'
p29681
I00
sS'group_name'
p29682
Nsa(dp29683
S'name'
p29684
S'execute_input_on'
p29685
sS'cpp_type'
p29686
S'MultiMooseEnum'
p29687
sS'default'
p29688
g3
sS'description'
p29689
S'Enable/disable the output of the input file\n'
p29690
sS'required'
p29691
I00
sS'options'
p29692
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29693
sS'group_name'
p29694
S'Variables'
p29695
sa(dp29696
S'description'
p29697
S'Enable/disable the output of nodal variables\n'
p29698
sS'cpp_type'
p29699
S'bool'
p29700
sS'default'
p29701
S'1'
p29702
sS'name'
p29703
S'execute_nodal_variables'
p29704
sS'required'
p29705
I00
sS'group_name'
p29706
Nsa(dp29707
S'name'
p29708
S'execute_on'
p29709
sS'cpp_type'
p29710
S'MultiMooseEnum'
p29711
sS'default'
p29712
S'FAILED INITIAL LINEAR NONLINEAR TIMESTEP_BEGIN TIMESTEP_END'
p29713
sS'description'
p29714
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p29715
sS'required'
p29716
I00
sS'options'
p29717
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29718
sS'group_name'
p29719
Nsa(dp29720
S'name'
p29721
S'execute_postprocessors_on'
p29722
sS'cpp_type'
p29723
S'MultiMooseEnum'
p29724
sS'default'
p29725
S'INITIAL TIMESTEP_END'
p29726
sS'description'
p29727
S'Control of when postprocessors are output\n'
p29728
sS'required'
p29729
I00
sS'options'
p29730
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29731
sS'group_name'
p29732
S'Variables'
p29733
sa(dp29734
S'description'
p29735
S'Enable/disable the output of aux scalar variables\n'
p29736
sS'cpp_type'
p29737
S'bool'
p29738
sS'default'
p29739
S'1'
p29740
sS'name'
p29741
S'execute_scalar_variables'
p29742
sS'required'
p29743
I00
sS'group_name'
p29744
Nsa(dp29745
S'name'
p29746
S'execute_scalars_on'
p29747
sS'cpp_type'
p29748
S'MultiMooseEnum'
p29749
sS'default'
p29750
S'INITIAL TIMESTEP_END'
p29751
sS'description'
p29752
S'Control the output of scalar variables\n'
p29753
sS'required'
p29754
I00
sS'options'
p29755
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29756
sS'group_name'
p29757
S'Variables'
p29758
sa(dp29759
S'description'
p29760
S'Enable/disable the output of the simulation information\n'
p29761
sS'cpp_type'
p29762
S'bool'
p29763
sS'default'
p29764
S'1'
p29765
sS'name'
p29766
S'execute_system_information'
p29767
sS'required'
p29768
I00
sS'group_name'
p29769
Nsa(dp29770
S'name'
p29771
S'execute_system_information_on'
p29772
sS'cpp_type'
p29773
S'MultiMooseEnum'
p29774
sS'default'
p29775
S'INITIAL'
p29776
sS'description'
p29777
S'Control when the output of the simulation information occurs\n'
p29778
sS'required'
p29779
I00
sS'options'
p29780
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29781
sS'group_name'
p29782
S'Variables'
p29783
sa(dp29784
S'description'
p29785
S'Enable/disable the output of vector postprocessors\n'
p29786
sS'cpp_type'
p29787
S'bool'
p29788
sS'default'
p29789
S'1'
p29790
sS'name'
p29791
S'execute_vector_postprocessors'
p29792
sS'required'
p29793
I00
sS'group_name'
p29794
Nsa(dp29795
S'name'
p29796
S'execute_vector_postprocessors_on'
p29797
sS'cpp_type'
p29798
S'MultiMooseEnum'
p29799
sS'default'
p29800
S'INITIAL TIMESTEP_END'
p29801
sS'description'
p29802
S'Enable/disable the output of VectorPostprocessors\n'
p29803
sS'required'
p29804
I00
sS'options'
p29805
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29806
sS'group_name'
p29807
S'Variables'
p29808
sa(dp29809
S'description'
p29810
S'The desired solution output name without an extension\n'
p29811
sS'cpp_type'
p29812
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29813
sS'default'
p29814
g3
sS'name'
p29815
S'file_base'
p29816
sS'required'
p29817
I00
sS'group_name'
p29818
Nsa(dp29819
S'name'
p29820
S'fit_mode'
p29821
sS'cpp_type'
p29822
S'MooseEnum'
p29823
sS'default'
p29824
S'ENVIRONMENT'
p29825
sS'description'
p29826
S'Specifies the wrapping mode for post-processor tables that are printed to the screen (ENVIRONMENT: Read "MOOSE_PPS_WIDTH" for desired width, AUTO: Attempt to determine width automatically (serial only), <n>: Desired width\n'
p29827
sS'required'
p29828
I00
sS'options'
p29829
S'ENVIRONMENT AUTO 80 120 160'
p29830
sS'group_name'
p29831
Nsa(dp29832
S'description'
p29833
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p29834
sS'cpp_type'
p29835
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p29836
sS'default'
p29837
g3
sS'name'
p29838
S'hide'
p29839
sS'required'
p29840
I00
sS'group_name'
p29841
S'Variables'
p29842
sa(dp29843
S'description'
p29844
S'The interval at which time steps are output to the solution file\n'
p29845
sS'cpp_type'
p29846
S'unsigned int'
p29847
sS'default'
p29848
S'1'
p29849
sS'name'
p29850
S'interval'
p29851
sS'required'
p29852
I00
sS'group_name'
p29853
S'Timing'
p29854
sa(dp29855
S'description'
p29856
S'Print the libMesh performance log, requires libMesh to be configured with --enable-perflog\n'
p29857
sS'cpp_type'
p29858
S'bool'
p29859
sS'default'
p29860
S'1'
p29861
sS'name'
p29862
S'libmesh_log'
p29863
sS'required'
p29864
I00
sS'group_name'
p29865
S'Performance Log'
p29866
sa(dp29867
S'description'
p29868
S'Number of divisions applied to time step when outputting linear residuals\n'
p29869
sS'cpp_type'
p29870
S'double'
p29871
sS'default'
p29872
S'1000'
p29873
sS'name'
p29874
S'linear_residual_dt_divisor'
p29875
sS'required'
p29876
I00
sS'group_name'
p29877
S'PETSc'
p29878
sa(dp29879
S'description'
p29880
S'Specifies an end time to begin output on each linear residual evaluation\n'
p29881
sS'cpp_type'
p29882
S'double'
p29883
sS'default'
p29884
g3
sS'name'
p29885
S'linear_residual_end_time'
p29886
sS'required'
p29887
I00
sS'group_name'
p29888
S'PETSc'
p29889
sa(dp29890
S'description'
p29891
S'Specifies a start time to begin output on each linear residual evaluation\n'
p29892
sS'cpp_type'
p29893
S'double'
p29894
sS'default'
p29895
g3
sS'name'
p29896
S'linear_residual_start_time'
p29897
sS'required'
p29898
I00
sS'group_name'
p29899
S'PETSc'
p29900
sa(dp29901
S'description'
p29902
S'Specifies whether output occurs on each linear residual evaluation\n'
p29903
sS'cpp_type'
p29904
S'bool'
p29905
sS'default'
p29906
S'0'
p29907
sS'name'
p29908
S'linear_residuals'
p29909
sS'required'
p29910
I00
sS'group_name'
p29911
S'PETSc'
p29912
sa(dp29913
S'description'
p29914
S'The maximum number of postprocessor/scalar values displayed on screen during a timestep (set to 0 for unlimited)\n'
p29915
sS'cpp_type'
p29916
S'unsigned int'
p29917
sS'default'
p29918
S'15'
p29919
sS'name'
p29920
S'max_rows'
p29921
sS'required'
p29922
I00
sS'group_name'
p29923
S'Advanced'
p29924
sa(dp29925
S'description'
p29926
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p29927
sS'cpp_type'
p29928
S'double'
p29929
sS'default'
p29930
S'1000'
p29931
sS'name'
p29932
S'nonlinear_residual_dt_divisor'
p29933
sS'required'
p29934
I00
sS'group_name'
p29935
S'PETSc'
p29936
sa(dp29937
S'description'
p29938
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p29939
sS'cpp_type'
p29940
S'double'
p29941
sS'default'
p29942
g3
sS'name'
p29943
S'nonlinear_residual_end_time'
p29944
sS'required'
p29945
I00
sS'group_name'
p29946
S'PETSc'
p29947
sa(dp29948
S'description'
p29949
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p29950
sS'cpp_type'
p29951
S'double'
p29952
sS'default'
p29953
g3
sS'name'
p29954
S'nonlinear_residual_start_time'
p29955
sS'required'
p29956
I00
sS'group_name'
p29957
S'PETSc'
p29958
sa(dp29959
S'description'
p29960
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p29961
sS'cpp_type'
p29962
S'bool'
p29963
sS'default'
p29964
S'0'
p29965
sS'name'
p29966
S'nonlinear_residuals'
p29967
sS'required'
p29968
I00
sS'group_name'
p29969
S'PETSc'
p29970
sa(dp29971
S'description'
p29972
S'Multiplier utilized to determine if a residual norm is an outlier. If the variable residual is less than multiplier[0] times the total residual it is colored red. If the variable residual is less than multiplier[1] times the average residual it is colored yellow.\n'
p29973
sS'cpp_type'
p29974
S'std::__1::vector<double, std::__1::allocator<double> >'
p29975
sS'default'
p29976
S'0.8 2'
p29977
sS'name'
p29978
S'outlier_multiplier'
p29979
sS'required'
p29980
I00
sS'group_name'
p29981
S'Norms'
p29982
sa(dp29983
S'description'
p29984
S'If true, outlier variable norms will be printed after each solve\n'
p29985
sS'cpp_type'
p29986
S'bool'
p29987
sS'default'
p29988
S'1'
p29989
sS'name'
p29990
S'outlier_variable_norms'
p29991
sS'required'
p29992
I00
sS'group_name'
p29993
S'Norms'
p29994
sa(dp29995
S'description'
p29996
S'Output to the file\n'
p29997
sS'cpp_type'
p29998
S'bool'
p29999
sS'default'
p30000
S'0'
p30001
sS'name'
p30002
S'output_file'
p30003
sS'required'
p30004
I00
sS'group_name'
p30005
Nsa(dp30006
S'description'
p30007
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p30008
sS'cpp_type'
p30009
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p30010
sS'default'
p30011
g3
sS'name'
p30012
S'output_if_base_contains'
p30013
sS'required'
p30014
I00
sS'group_name'
p30015
S'Advanced'
p30016
sa(dp30017
S'description'
p30018
S'Specifies whether output occurs on each linear residual evaluation\n'
p30019
sS'cpp_type'
p30020
S'bool'
p30021
sS'default'
p30022
S'0'
p30023
sS'name'
p30024
S'output_linear'
p30025
sS'required'
p30026
I00
sS'group_name'
p30027
Nsa(dp30028
S'description'
p30029
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p30030
sS'cpp_type'
p30031
S'bool'
p30032
sS'default'
p30033
S'0'
p30034
sS'name'
p30035
S'output_nonlinear'
p30036
sS'required'
p30037
I00
sS'group_name'
p30038
Nsa(dp30039
S'description'
p30040
S'Enable/disable the output of postprocessors\n'
p30041
sS'cpp_type'
p30042
S'bool'
p30043
sS'default'
p30044
S'1'
p30045
sS'name'
p30046
S'output_postprocessors'
p30047
sS'required'
p30048
I00
sS'group_name'
p30049
Nsa(dp30050
S'description'
p30051
S'Output to the screen\n'
p30052
sS'cpp_type'
p30053
S'bool'
p30054
sS'default'
p30055
S'1'
p30056
sS'name'
p30057
S'output_screen'
p30058
sS'required'
p30059
I00
sS'group_name'
p30060
Nsa(dp30061
S'description'
p30062
S'The number of for extension suffix (e.g., out.e-s002)\n'
p30063
sS'cpp_type'
p30064
S'unsigned int'
p30065
sS'default'
p30066
S'4'
p30067
sS'name'
p30068
S'padding'
p30069
sS'required'
p30070
I00
sS'group_name'
p30071
S'Advanced'
p30072
sa(dp30073
S'description'
p30074
S"Print the libMesh performance log header (requires that 'perf_log = true')\n"
p30075
sS'cpp_type'
p30076
S'bool'
p30077
sS'default'
p30078
g3
sS'name'
p30079
S'perf_header'
p30080
sS'required'
p30081
I00
sS'group_name'
p30082
S'Perf Log'
p30083
sa(dp30084
S'description'
p30085
S'If true, all performance logs will be printed. The individual log settings will override this option.\n'
p30086
sS'cpp_type'
p30087
S'bool'
p30088
sS'default'
p30089
S'0'
p30090
sS'name'
p30091
S'perf_log'
p30092
sS'required'
p30093
I00
sS'group_name'
p30094
S'Perf Log'
p30095
sa(dp30096
S'description'
p30097
S'If set, the performance log will be printed every n time steps\n'
p30098
sS'cpp_type'
p30099
S'unsigned int'
p30100
sS'default'
p30101
S'0'
p30102
sS'name'
p30103
S'perf_log_interval'
p30104
sS'required'
p30105
I00
sS'group_name'
p30106
Nsa(dp30107
S'description'
p30108
S'When true, each time the mesh is changed the mesh information is printed\n'
p30109
sS'cpp_type'
p30110
S'bool'
p30111
sS'default'
p30112
S'0'
p30113
sS'name'
p30114
S'print_mesh_changed_info'
p30115
sS'required'
p30116
I00
sS'group_name'
p30117
Nsa(dp30118
S'description'
p30119
S'Control the printing of time and dt in scientific notation\n'
p30120
sS'cpp_type'
p30121
S'bool'
p30122
sS'default'
p30123
S'0'
p30124
sS'name'
p30125
S'scientific_time'
p30126
sS'required'
p30127
I00
sS'group_name'
p30128
Nsa(dp30129
S'description'
p30130
S"Toggles the printing of the 'Setup Performance' log\n"
p30131
sS'cpp_type'
p30132
S'bool'
p30133
sS'default'
p30134
g3
sS'name'
p30135
S'setup_log'
p30136
sS'required'
p30137
I00
sS'group_name'
p30138
S'Perf Log'
p30139
sa(dp30140
S'description'
p30141
S'Specifies whether or not the Setup Performance log should be printed before the first time step.  It will still be printed at the end if perf_log is also enabled and likewise disabled if perf_log is false\n'
p30142
sS'cpp_type'
p30143
S'bool'
p30144
sS'default'
p30145
S'0'
p30146
sS'name'
p30147
S'setup_log_early'
p30148
sS'required'
p30149
I00
sS'group_name'
p30150
S'Perf Log'
p30151
sa(dp30152
S'description'
p30153
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p30154
sS'cpp_type'
p30155
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p30156
sS'default'
p30157
g3
sS'name'
p30158
S'show'
p30159
sS'required'
p30160
I00
sS'group_name'
p30161
S'Variables'
p30162
sa(dp30163
S'description'
p30164
S'Indent multiapp output using the multiapp name\n'
p30165
sS'cpp_type'
p30166
S'bool'
p30167
sS'default'
p30168
S'0'
p30169
sS'name'
p30170
S'show_multiapp_name'
p30171
sS'required'
p30172
I00
sS'group_name'
p30173
S'Advanced'
p30174
sa(dp30175
S'description'
p30176
S"Toggles the printing of the 'Moose Test Performance' log\n"
p30177
sS'cpp_type'
p30178
S'bool'
p30179
sS'default'
p30180
g3
sS'name'
p30181
S'solve_log'
p30182
sS'required'
p30183
I00
sS'group_name'
p30184
S'Perf Log'
p30185
sa(dp30186
S'description'
p30187
S'Time at which this output object begins to operate\n'
p30188
sS'cpp_type'
p30189
S'double'
p30190
sS'default'
p30191
g3
sS'name'
p30192
S'start_time'
p30193
sS'required'
p30194
I00
sS'group_name'
p30195
S'Timing'
p30196
sa(dp30197
S'description'
p30198
S'Only export results at sync times\n'
p30199
sS'cpp_type'
p30200
S'bool'
p30201
sS'default'
p30202
S'0'
p30203
sS'name'
p30204
S'sync_only'
p30205
sS'required'
p30206
I00
sS'group_name'
p30207
S'Timing'
p30208
sa(dp30209
S'description'
p30210
S'Times at which the output and solution is forced to occur\n'
p30211
sS'cpp_type'
p30212
S'std::__1::vector<double, std::__1::allocator<double> >'
p30213
sS'default'
p30214
g3
sS'name'
p30215
S'sync_times'
p30216
sS'required'
p30217
I00
sS'group_name'
p30218
S'Timing'
p30219
sa(dp30220
S'name'
p30221
S'system_info'
p30222
sS'cpp_type'
p30223
S'MultiMooseEnum'
p30224
sS'default'
p30225
S'AUX EXECUTION FRAMEWORK MESH NONLINEAR'
p30226
sS'description'
p30227
S"List of information types to display ('framework', 'mesh', 'aux', 'nonlinear', 'execution', 'output')\n"
p30228
sS'required'
p30229
I00
sS'options'
p30230
S'framework mesh aux nonlinear execution output'
p30231
sS'group_name'
p30232
S'Advanced'
p30233
sa(dp30234
S'description'
p30235
S"Whether or not the 'time' column should be written for Postprocessor CSV files\n"
p30236
sS'cpp_type'
p30237
S'bool'
p30238
sS'default'
p30239
S'1'
p30240
sS'name'
p30241
S'time_column'
p30242
sS'required'
p30243
I00
sS'group_name'
p30244
Nsa(dp30245
S'description'
p30246
S'When true and VecptorPostprocessor data exists, write a csv file containing the timestep and time information.\n'
p30247
sS'cpp_type'
p30248
S'bool'
p30249
sS'default'
p30250
S'0'
p30251
sS'name'
p30252
S'time_data'
p30253
sS'required'
p30254
I00
sS'group_name'
p30255
Nsa(dp30256
S'description'
p30257
S'The number of significant digits that are printed on time related outputs\n'
p30258
sS'cpp_type'
p30259
S'unsigned int'
p30260
sS'default'
p30261
g3
sS'name'
p30262
S'time_precision'
p30263
sS'required'
p30264
I00
sS'group_name'
p30265
Nsa(dp30266
S'description'
p30267
S'Time tolerance utilized checking start and end times\n'
p30268
sS'cpp_type'
p30269
S'double'
p30270
sS'default'
p30271
S'1e-14'
p30272
sS'name'
p30273
S'time_tolerance'
p30274
sS'required'
p30275
I00
sS'group_name'
p30276
S'Timing'
p30277
sa(dp30278
S'description'
p30279
g3
sS'cpp_type'
p30280
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30281
sS'default'
p30282
S'Console'
p30283
sS'name'
p30284
S'type'
p30285
sS'required'
p30286
I00
sS'group_name'
p30287
Nsa(dp30288
S'description'
p30289
S'Enable/disable the use of the displaced mesh for outputting\n'
p30290
sS'cpp_type'
p30291
S'bool'
p30292
sS'default'
p30293
S'0'
p30294
sS'name'
p30295
S'use_displaced'
p30296
sS'required'
p30297
I00
sS'group_name'
p30298
Nsa(dp30299
S'description'
p30300
S'Print detailed diagnostics on timestep calculation\n'
p30301
sS'cpp_type'
p30302
S'bool'
p30303
sS'default'
p30304
S'0'
p30305
sS'name'
p30306
S'verbose'
p30307
sS'required'
p30308
I00
sS'group_name'
p30309
S'Advanced'
p30310
sasS'name'
p30311
S'/Outputs/Console'
p30312
sa(dp30313
S'description'
p30314
g3
sS'subblocks'
p30315
NsS'parameters'
p30316
(lp30317
(dp30318
S'name'
p30319
S'additional_execute_on'
p30320
sS'cpp_type'
p30321
S'MultiMooseEnum'
p30322
sS'default'
p30323
g3
sS'description'
p30324
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p30325
sS'required'
p30326
I00
sS'options'
p30327
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30328
sS'group_name'
p30329
Nsa(dp30330
S'description'
p30331
S'Clear the active control display after each output.\n'
p30332
sS'cpp_type'
p30333
S'bool'
p30334
sS'default'
p30335
S'1'
p30336
sS'name'
p30337
S'clear_after_output'
p30338
sS'required'
p30339
I00
sS'group_name'
p30340
Nsa(dp30341
S'description'
p30342
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p30343
sS'cpp_type'
p30344
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p30345
sS'default'
p30346
g3
sS'name'
p30347
S'control_tags'
p30348
sS'required'
p30349
I00
sS'group_name'
p30350
S'Advanced'
p30351
sa(dp30352
S'description'
p30353
S'Set the enabled status of the MooseObject.\n'
p30354
sS'cpp_type'
p30355
S'bool'
p30356
sS'default'
p30357
S'1'
p30358
sS'name'
p30359
S'enable'
p30360
sS'required'
p30361
I00
sS'group_name'
p30362
S'Advanced'
p30363
sa(dp30364
S'description'
p30365
S'Time at which this output object stop operating\n'
p30366
sS'cpp_type'
p30367
S'double'
p30368
sS'default'
p30369
g3
sS'name'
p30370
S'end_time'
p30371
sS'required'
p30372
I00
sS'group_name'
p30373
S'Timing'
p30374
sa(dp30375
S'name'
p30376
S'execute_on'
p30377
sS'cpp_type'
p30378
S'MultiMooseEnum'
p30379
sS'default'
p30380
S'INITIAL TIMESTEP_BEGIN'
p30381
sS'description'
p30382
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p30383
sS'required'
p30384
I00
sS'options'
p30385
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30386
sS'group_name'
p30387
Nsa(dp30388
S'description'
p30389
S'The interval at which time steps are output to the solution file\n'
p30390
sS'cpp_type'
p30391
S'unsigned int'
p30392
sS'default'
p30393
S'1'
p30394
sS'name'
p30395
S'interval'
p30396
sS'required'
p30397
I00
sS'group_name'
p30398
S'Timing'
p30399
sa(dp30400
S'description'
p30401
S'List active MooseObjects.\n'
p30402
sS'cpp_type'
p30403
S'bool'
p30404
sS'default'
p30405
S'1'
p30406
sS'name'
p30407
S'show_active_objects'
p30408
sS'required'
p30409
I00
sS'group_name'
p30410
Nsa(dp30411
S'description'
p30412
S'Time at which this output object begins to operate\n'
p30413
sS'cpp_type'
p30414
S'double'
p30415
sS'default'
p30416
g3
sS'name'
p30417
S'start_time'
p30418
sS'required'
p30419
I00
sS'group_name'
p30420
S'Timing'
p30421
sa(dp30422
S'description'
p30423
S'Only export results at sync times\n'
p30424
sS'cpp_type'
p30425
S'bool'
p30426
sS'default'
p30427
S'0'
p30428
sS'name'
p30429
S'sync_only'
p30430
sS'required'
p30431
I00
sS'group_name'
p30432
S'Timing'
p30433
sa(dp30434
S'description'
p30435
S'Times at which the output and solution is forced to occur\n'
p30436
sS'cpp_type'
p30437
S'std::__1::vector<double, std::__1::allocator<double> >'
p30438
sS'default'
p30439
g3
sS'name'
p30440
S'sync_times'
p30441
sS'required'
p30442
I00
sS'group_name'
p30443
S'Timing'
p30444
sa(dp30445
S'description'
p30446
S'Time tolerance utilized checking start and end times\n'
p30447
sS'cpp_type'
p30448
S'double'
p30449
sS'default'
p30450
S'1e-14'
p30451
sS'name'
p30452
S'time_tolerance'
p30453
sS'required'
p30454
I00
sS'group_name'
p30455
S'Timing'
p30456
sa(dp30457
S'description'
p30458
g3
sS'cpp_type'
p30459
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30460
sS'default'
p30461
S'ControlOutput'
p30462
sS'name'
p30463
S'type'
p30464
sS'required'
p30465
I00
sS'group_name'
p30466
Nsa(dp30467
S'description'
p30468
S'Enable/disable the use of the displaced mesh for outputting\n'
p30469
sS'cpp_type'
p30470
S'bool'
p30471
sS'default'
p30472
S'0'
p30473
sS'name'
p30474
S'use_displaced'
p30475
sS'required'
p30476
I00
sS'group_name'
p30477
NsasS'name'
p30478
S'/Outputs/ControlOutput'
p30479
sa(dp30480
S'description'
p30481
g3
sS'subblocks'
p30482
NsS'parameters'
p30483
(lp30484
(dp30485
S'name'
p30486
S'additional_execute_on'
p30487
sS'cpp_type'
p30488
S'MultiMooseEnum'
p30489
sS'default'
p30490
g3
sS'description'
p30491
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p30492
sS'required'
p30493
I00
sS'options'
p30494
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30495
sS'group_name'
p30496
Nsa(dp30497
S'description'
p30498
S'When true the date and time are appended to the output filename.\n'
p30499
sS'cpp_type'
p30500
S'bool'
p30501
sS'default'
p30502
S'0'
p30503
sS'name'
p30504
S'append_date'
p30505
sS'required'
p30506
I00
sS'group_name'
p30507
Nsa(dp30508
S'description'
p30509
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p30510
sS'cpp_type'
p30511
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30512
sS'default'
p30513
g3
sS'name'
p30514
S'append_date_format'
p30515
sS'required'
p30516
I00
sS'group_name'
p30517
Nsa(dp30518
S'description'
p30519
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p30520
sS'cpp_type'
p30521
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p30522
sS'default'
p30523
g3
sS'name'
p30524
S'control_tags'
p30525
sS'required'
p30526
I00
sS'group_name'
p30527
S'Advanced'
p30528
sa(dp30529
S'description'
p30530
S'Set the enabled status of the MooseObject.\n'
p30531
sS'cpp_type'
p30532
S'bool'
p30533
sS'default'
p30534
S'1'
p30535
sS'name'
p30536
S'enable'
p30537
sS'required'
p30538
I00
sS'group_name'
p30539
S'Advanced'
p30540
sa(dp30541
S'description'
p30542
S'Time at which this output object stop operating\n'
p30543
sS'cpp_type'
p30544
S'double'
p30545
sS'default'
p30546
g3
sS'name'
p30547
S'end_time'
p30548
sS'required'
p30549
I00
sS'group_name'
p30550
S'Timing'
p30551
sa(dp30552
S'name'
p30553
S'execute_on'
p30554
sS'cpp_type'
p30555
S'MultiMooseEnum'
p30556
sS'default'
p30557
S'INITIAL'
p30558
sS'description'
p30559
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p30560
sS'required'
p30561
I00
sS'options'
p30562
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30563
sS'group_name'
p30564
Nsa(dp30565
S'description'
p30566
S'The desired solution output name without an extension\n'
p30567
sS'cpp_type'
p30568
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30569
sS'default'
p30570
g3
sS'name'
p30571
S'file_base'
p30572
sS'required'
p30573
I00
sS'group_name'
p30574
Nsa(dp30575
S'description'
p30576
S'The interval at which time steps are output to the solution file\n'
p30577
sS'cpp_type'
p30578
S'unsigned int'
p30579
sS'default'
p30580
S'1'
p30581
sS'name'
p30582
S'interval'
p30583
sS'required'
p30584
I00
sS'group_name'
p30585
S'Timing'
p30586
sa(dp30587
S'description'
p30588
S'Number of divisions applied to time step when outputting linear residuals\n'
p30589
sS'cpp_type'
p30590
S'double'
p30591
sS'default'
p30592
S'1000'
p30593
sS'name'
p30594
S'linear_residual_dt_divisor'
p30595
sS'required'
p30596
I00
sS'group_name'
p30597
S'PETSc'
p30598
sa(dp30599
S'description'
p30600
S'Specifies an end time to begin output on each linear residual evaluation\n'
p30601
sS'cpp_type'
p30602
S'double'
p30603
sS'default'
p30604
g3
sS'name'
p30605
S'linear_residual_end_time'
p30606
sS'required'
p30607
I00
sS'group_name'
p30608
S'PETSc'
p30609
sa(dp30610
S'description'
p30611
S'Specifies a start time to begin output on each linear residual evaluation\n'
p30612
sS'cpp_type'
p30613
S'double'
p30614
sS'default'
p30615
g3
sS'name'
p30616
S'linear_residual_start_time'
p30617
sS'required'
p30618
I00
sS'group_name'
p30619
S'PETSc'
p30620
sa(dp30621
S'description'
p30622
S'Specifies whether output occurs on each linear residual evaluation\n'
p30623
sS'cpp_type'
p30624
S'bool'
p30625
sS'default'
p30626
S'0'
p30627
sS'name'
p30628
S'linear_residuals'
p30629
sS'required'
p30630
I00
sS'group_name'
p30631
S'PETSc'
p30632
sa(dp30633
S'description'
p30634
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p30635
sS'cpp_type'
p30636
S'double'
p30637
sS'default'
p30638
S'1000'
p30639
sS'name'
p30640
S'nonlinear_residual_dt_divisor'
p30641
sS'required'
p30642
I00
sS'group_name'
p30643
S'PETSc'
p30644
sa(dp30645
S'description'
p30646
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p30647
sS'cpp_type'
p30648
S'double'
p30649
sS'default'
p30650
g3
sS'name'
p30651
S'nonlinear_residual_end_time'
p30652
sS'required'
p30653
I00
sS'group_name'
p30654
S'PETSc'
p30655
sa(dp30656
S'description'
p30657
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p30658
sS'cpp_type'
p30659
S'double'
p30660
sS'default'
p30661
g3
sS'name'
p30662
S'nonlinear_residual_start_time'
p30663
sS'required'
p30664
I00
sS'group_name'
p30665
S'PETSc'
p30666
sa(dp30667
S'description'
p30668
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p30669
sS'cpp_type'
p30670
S'bool'
p30671
sS'default'
p30672
S'0'
p30673
sS'name'
p30674
S'nonlinear_residuals'
p30675
sS'required'
p30676
I00
sS'group_name'
p30677
S'PETSc'
p30678
sa(dp30679
S'description'
p30680
S'Output to the file\n'
p30681
sS'cpp_type'
p30682
S'bool'
p30683
sS'default'
p30684
S'1'
p30685
sS'name'
p30686
S'output_file'
p30687
sS'required'
p30688
I00
sS'group_name'
p30689
Nsa(dp30690
S'description'
p30691
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p30692
sS'cpp_type'
p30693
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p30694
sS'default'
p30695
g3
sS'name'
p30696
S'output_if_base_contains'
p30697
sS'required'
p30698
I00
sS'group_name'
p30699
S'Advanced'
p30700
sa(dp30701
S'description'
p30702
S'Specifies whether output occurs on each linear residual evaluation\n'
p30703
sS'cpp_type'
p30704
S'bool'
p30705
sS'default'
p30706
S'0'
p30707
sS'name'
p30708
S'output_linear'
p30709
sS'required'
p30710
I00
sS'group_name'
p30711
Nsa(dp30712
S'description'
p30713
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p30714
sS'cpp_type'
p30715
S'bool'
p30716
sS'default'
p30717
S'0'
p30718
sS'name'
p30719
S'output_nonlinear'
p30720
sS'required'
p30721
I00
sS'group_name'
p30722
Nsa(dp30723
S'description'
p30724
S'Output to the screen\n'
p30725
sS'cpp_type'
p30726
S'bool'
p30727
sS'default'
p30728
S'0'
p30729
sS'name'
p30730
S'output_screen'
p30731
sS'required'
p30732
I00
sS'group_name'
p30733
Nsa(dp30734
S'description'
p30735
S'The number of for extension suffix (e.g., out.e-s002)\n'
p30736
sS'cpp_type'
p30737
S'unsigned int'
p30738
sS'default'
p30739
S'4'
p30740
sS'name'
p30741
S'padding'
p30742
sS'required'
p30743
I00
sS'group_name'
p30744
S'Advanced'
p30745
sa(dp30746
S'description'
p30747
S'Time at which this output object begins to operate\n'
p30748
sS'cpp_type'
p30749
S'double'
p30750
sS'default'
p30751
g3
sS'name'
p30752
S'start_time'
p30753
sS'required'
p30754
I00
sS'group_name'
p30755
S'Timing'
p30756
sa(dp30757
S'description'
p30758
S'Only export results at sync times\n'
p30759
sS'cpp_type'
p30760
S'bool'
p30761
sS'default'
p30762
S'0'
p30763
sS'name'
p30764
S'sync_only'
p30765
sS'required'
p30766
I00
sS'group_name'
p30767
S'Timing'
p30768
sa(dp30769
S'description'
p30770
S'Times at which the output and solution is forced to occur\n'
p30771
sS'cpp_type'
p30772
S'std::__1::vector<double, std::__1::allocator<double> >'
p30773
sS'default'
p30774
g3
sS'name'
p30775
S'sync_times'
p30776
sS'required'
p30777
I00
sS'group_name'
p30778
S'Timing'
p30779
sa(dp30780
S'description'
p30781
S'System to output\n'
p30782
sS'cpp_type'
p30783
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30784
sS'default'
p30785
S'nl0'
p30786
sS'name'
p30787
S'system_name'
p30788
sS'required'
p30789
I00
sS'group_name'
p30790
Nsa(dp30791
S'description'
p30792
S'Time tolerance utilized checking start and end times\n'
p30793
sS'cpp_type'
p30794
S'double'
p30795
sS'default'
p30796
S'1e-14'
p30797
sS'name'
p30798
S'time_tolerance'
p30799
sS'required'
p30800
I00
sS'group_name'
p30801
S'Timing'
p30802
sa(dp30803
S'description'
p30804
g3
sS'cpp_type'
p30805
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30806
sS'default'
p30807
S'DOFMap'
p30808
sS'name'
p30809
S'type'
p30810
sS'required'
p30811
I00
sS'group_name'
p30812
Nsa(dp30813
S'description'
p30814
S'Enable/disable the use of the displaced mesh for outputting\n'
p30815
sS'cpp_type'
p30816
S'bool'
p30817
sS'default'
p30818
S'0'
p30819
sS'name'
p30820
S'use_displaced'
p30821
sS'required'
p30822
I00
sS'group_name'
p30823
NsasS'name'
p30824
S'/Outputs/DOFMap'
p30825
sa(dp30826
S'description'
p30827
S'Object for output data in the Exodus II format\n'
p30828
sS'subblocks'
p30829
NsS'parameters'
p30830
(lp30831
(dp30832
S'name'
p30833
S'additional_execute_on'
p30834
sS'cpp_type'
p30835
S'MultiMooseEnum'
p30836
sS'default'
p30837
g3
sS'description'
p30838
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p30839
sS'required'
p30840
I00
sS'options'
p30841
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30842
sS'group_name'
p30843
Nsa(dp30844
S'description'
p30845
S'When true the date and time are appended to the output filename.\n'
p30846
sS'cpp_type'
p30847
S'bool'
p30848
sS'default'
p30849
S'0'
p30850
sS'name'
p30851
S'append_date'
p30852
sS'required'
p30853
I00
sS'group_name'
p30854
Nsa(dp30855
S'description'
p30856
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p30857
sS'cpp_type'
p30858
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30859
sS'default'
p30860
g3
sS'name'
p30861
S'append_date_format'
p30862
sS'required'
p30863
I00
sS'group_name'
p30864
Nsa(dp30865
S'description'
p30866
S"Append '_oversample' to the output file base\n"
p30867
sS'cpp_type'
p30868
S'bool'
p30869
sS'default'
p30870
S'0'
p30871
sS'name'
p30872
S'append_oversample'
p30873
sS'required'
p30874
I00
sS'group_name'
p30875
Nsa(dp30876
S'description'
p30877
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p30878
sS'cpp_type'
p30879
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p30880
sS'default'
p30881
g3
sS'name'
p30882
S'control_tags'
p30883
sS'required'
p30884
I00
sS'group_name'
p30885
S'Advanced'
p30886
sa(dp30887
S'description'
p30888
S'Output elemental nonlinear variables as nodal\n'
p30889
sS'cpp_type'
p30890
S'bool'
p30891
sS'default'
p30892
S'0'
p30893
sS'name'
p30894
S'elemental_as_nodal'
p30895
sS'required'
p30896
I00
sS'group_name'
p30897
S'Variables'
p30898
sa(dp30899
S'description'
p30900
S'Set the enabled status of the MooseObject.\n'
p30901
sS'cpp_type'
p30902
S'bool'
p30903
sS'default'
p30904
S'1'
p30905
sS'name'
p30906
S'enable'
p30907
sS'required'
p30908
I00
sS'group_name'
p30909
S'Advanced'
p30910
sa(dp30911
S'description'
p30912
S'Time at which this output object stop operating\n'
p30913
sS'cpp_type'
p30914
S'double'
p30915
sS'default'
p30916
g3
sS'name'
p30917
S'end_time'
p30918
sS'required'
p30919
I00
sS'group_name'
p30920
S'Timing'
p30921
sa(dp30922
S'name'
p30923
S'execute_elemental_on'
p30924
sS'cpp_type'
p30925
S'MultiMooseEnum'
p30926
sS'default'
p30927
g3
sS'description'
p30928
S'Control the output of elemental variables\n'
p30929
sS'required'
p30930
I00
sS'options'
p30931
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30932
sS'group_name'
p30933
S'Variables'
p30934
sa(dp30935
S'description'
p30936
S'Enable/disable the output of elemental variables\n'
p30937
sS'cpp_type'
p30938
S'bool'
p30939
sS'default'
p30940
S'1'
p30941
sS'name'
p30942
S'execute_elemental_variables'
p30943
sS'required'
p30944
I00
sS'group_name'
p30945
Nsa(dp30946
S'description'
p30947
S'Enable/disable the output of input file information\n'
p30948
sS'cpp_type'
p30949
S'bool'
p30950
sS'default'
p30951
S'1'
p30952
sS'name'
p30953
S'execute_input'
p30954
sS'required'
p30955
I00
sS'group_name'
p30956
Nsa(dp30957
S'name'
p30958
S'execute_input_on'
p30959
sS'cpp_type'
p30960
S'MultiMooseEnum'
p30961
sS'default'
p30962
S'INITIAL'
p30963
sS'description'
p30964
S'Enable/disable the output of the input file\n'
p30965
sS'required'
p30966
I00
sS'options'
p30967
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30968
sS'group_name'
p30969
S'Variables'
p30970
sa(dp30971
S'name'
p30972
S'execute_nodal_on'
p30973
sS'cpp_type'
p30974
S'MultiMooseEnum'
p30975
sS'default'
p30976
g3
sS'description'
p30977
S'Control the output of nodal variables\n'
p30978
sS'required'
p30979
I00
sS'options'
p30980
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30981
sS'group_name'
p30982
S'Variables'
p30983
sa(dp30984
S'description'
p30985
S'Enable/disable the output of nodal variables\n'
p30986
sS'cpp_type'
p30987
S'bool'
p30988
sS'default'
p30989
S'1'
p30990
sS'name'
p30991
S'execute_nodal_variables'
p30992
sS'required'
p30993
I00
sS'group_name'
p30994
Nsa(dp30995
S'name'
p30996
S'execute_on'
p30997
sS'cpp_type'
p30998
S'MultiMooseEnum'
p30999
sS'default'
p31000
S'INITIAL TIMESTEP_END'
p31001
sS'description'
p31002
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p31003
sS'required'
p31004
I00
sS'options'
p31005
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31006
sS'group_name'
p31007
Nsa(dp31008
S'name'
p31009
S'execute_postprocessors_on'
p31010
sS'cpp_type'
p31011
S'MultiMooseEnum'
p31012
sS'default'
p31013
g3
sS'description'
p31014
S'Control of when postprocessors are output\n'
p31015
sS'required'
p31016
I00
sS'options'
p31017
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31018
sS'group_name'
p31019
S'Variables'
p31020
sa(dp31021
S'description'
p31022
S'Enable/disable the output of aux scalar variables\n'
p31023
sS'cpp_type'
p31024
S'bool'
p31025
sS'default'
p31026
S'1'
p31027
sS'name'
p31028
S'execute_scalar_variables'
p31029
sS'required'
p31030
I00
sS'group_name'
p31031
Nsa(dp31032
S'name'
p31033
S'execute_scalars_on'
p31034
sS'cpp_type'
p31035
S'MultiMooseEnum'
p31036
sS'default'
p31037
g3
sS'description'
p31038
S'Control the output of scalar variables\n'
p31039
sS'required'
p31040
I00
sS'options'
p31041
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31042
sS'group_name'
p31043
S'Variables'
p31044
sa(dp31045
S'description'
p31046
S'Enable/disable the output of the simulation information\n'
p31047
sS'cpp_type'
p31048
S'bool'
p31049
sS'default'
p31050
S'1'
p31051
sS'name'
p31052
S'execute_system_information'
p31053
sS'required'
p31054
I00
sS'group_name'
p31055
Nsa(dp31056
S'description'
p31057
S'Enable/disable the output of vector postprocessors\n'
p31058
sS'cpp_type'
p31059
S'bool'
p31060
sS'default'
p31061
S'1'
p31062
sS'name'
p31063
S'execute_vector_postprocessors'
p31064
sS'required'
p31065
I00
sS'group_name'
p31066
Nsa(dp31067
S'description'
p31068
S'The name of the mesh file to read, for oversampling\n'
p31069
sS'cpp_type'
p31070
S'MeshFileName'
p31071
sS'default'
p31072
g3
sS'name'
p31073
S'file'
p31074
sS'required'
p31075
I00
sS'group_name'
p31076
S'Oversampling'
p31077
sa(dp31078
S'description'
p31079
S'The desired solution output name without an extension\n'
p31080
sS'cpp_type'
p31081
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31082
sS'default'
p31083
g3
sS'name'
p31084
S'file_base'
p31085
sS'required'
p31086
I00
sS'group_name'
p31087
Nsa(dp31088
S'description'
p31089
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p31090
sS'cpp_type'
p31091
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p31092
sS'default'
p31093
g3
sS'name'
p31094
S'hide'
p31095
sS'required'
p31096
I00
sS'group_name'
p31097
S'Variables'
p31098
sa(dp31099
S'description'
p31100
S'The interval at which time steps are output to the solution file\n'
p31101
sS'cpp_type'
p31102
S'unsigned int'
p31103
sS'default'
p31104
S'1'
p31105
sS'name'
p31106
S'interval'
p31107
sS'required'
p31108
I00
sS'group_name'
p31109
S'Timing'
p31110
sa(dp31111
S'description'
p31112
S'Number of divisions applied to time step when outputting linear residuals\n'
p31113
sS'cpp_type'
p31114
S'double'
p31115
sS'default'
p31116
S'1000'
p31117
sS'name'
p31118
S'linear_residual_dt_divisor'
p31119
sS'required'
p31120
I00
sS'group_name'
p31121
S'PETSc'
p31122
sa(dp31123
S'description'
p31124
S'Specifies an end time to begin output on each linear residual evaluation\n'
p31125
sS'cpp_type'
p31126
S'double'
p31127
sS'default'
p31128
g3
sS'name'
p31129
S'linear_residual_end_time'
p31130
sS'required'
p31131
I00
sS'group_name'
p31132
S'PETSc'
p31133
sa(dp31134
S'description'
p31135
S'Specifies a start time to begin output on each linear residual evaluation\n'
p31136
sS'cpp_type'
p31137
S'double'
p31138
sS'default'
p31139
g3
sS'name'
p31140
S'linear_residual_start_time'
p31141
sS'required'
p31142
I00
sS'group_name'
p31143
S'PETSc'
p31144
sa(dp31145
S'description'
p31146
S'Specifies whether output occurs on each linear residual evaluation\n'
p31147
sS'cpp_type'
p31148
S'bool'
p31149
sS'default'
p31150
S'0'
p31151
sS'name'
p31152
S'linear_residuals'
p31153
sS'required'
p31154
I00
sS'group_name'
p31155
S'PETSc'
p31156
sa(dp31157
S'description'
p31158
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p31159
sS'cpp_type'
p31160
S'double'
p31161
sS'default'
p31162
S'1000'
p31163
sS'name'
p31164
S'nonlinear_residual_dt_divisor'
p31165
sS'required'
p31166
I00
sS'group_name'
p31167
S'PETSc'
p31168
sa(dp31169
S'description'
p31170
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p31171
sS'cpp_type'
p31172
S'double'
p31173
sS'default'
p31174
g3
sS'name'
p31175
S'nonlinear_residual_end_time'
p31176
sS'required'
p31177
I00
sS'group_name'
p31178
S'PETSc'
p31179
sa(dp31180
S'description'
p31181
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p31182
sS'cpp_type'
p31183
S'double'
p31184
sS'default'
p31185
g3
sS'name'
p31186
S'nonlinear_residual_start_time'
p31187
sS'required'
p31188
I00
sS'group_name'
p31189
S'PETSc'
p31190
sa(dp31191
S'description'
p31192
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p31193
sS'cpp_type'
p31194
S'bool'
p31195
sS'default'
p31196
S'0'
p31197
sS'name'
p31198
S'nonlinear_residuals'
p31199
sS'required'
p31200
I00
sS'group_name'
p31201
S'PETSc'
p31202
sa(dp31203
S'description'
p31204
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p31205
sS'cpp_type'
p31206
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p31207
sS'default'
p31208
g3
sS'name'
p31209
S'output_if_base_contains'
p31210
sS'required'
p31211
I00
sS'group_name'
p31212
S'Advanced'
p31213
sa(dp31214
S'description'
p31215
S'Specifies whether output occurs on each linear residual evaluation\n'
p31216
sS'cpp_type'
p31217
S'bool'
p31218
sS'default'
p31219
S'0'
p31220
sS'name'
p31221
S'output_linear'
p31222
sS'required'
p31223
I00
sS'group_name'
p31224
Nsa(dp31225
S'description'
p31226
S'Flag indicating if material properties should be output\n'
p31227
sS'cpp_type'
p31228
S'bool'
p31229
sS'default'
p31230
S'0'
p31231
sS'name'
p31232
S'output_material_properties'
p31233
sS'required'
p31234
I00
sS'group_name'
p31235
S'Materials'
p31236
sa(dp31237
S'description'
p31238
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p31239
sS'cpp_type'
p31240
S'bool'
p31241
sS'default'
p31242
S'0'
p31243
sS'name'
p31244
S'output_nonlinear'
p31245
sS'required'
p31246
I00
sS'group_name'
p31247
Nsa(dp31248
S'description'
p31249
S'Enable/disable the output of postprocessors\n'
p31250
sS'cpp_type'
p31251
S'bool'
p31252
sS'default'
p31253
S'1'
p31254
sS'name'
p31255
S'output_postprocessors'
p31256
sS'required'
p31257
I00
sS'group_name'
p31258
Nsa(dp31259
S'description'
p31260
S'Set to true to enable oversampling\n'
p31261
sS'cpp_type'
p31262
S'bool'
p31263
sS'default'
p31264
S'0'
p31265
sS'name'
p31266
S'oversample'
p31267
sS'required'
p31268
I00
sS'group_name'
p31269
Nsa(dp31270
S'description'
p31271
S'When true the latest timestep will overwrite the existing file, so only a single timestep exists.\n'
p31272
sS'cpp_type'
p31273
S'bool'
p31274
sS'default'
p31275
S'0'
p31276
sS'name'
p31277
S'overwrite'
p31278
sS'required'
p31279
I00
sS'group_name'
p31280
Nsa(dp31281
S'description'
p31282
S'The number of for extension suffix (e.g., out.e-s002)\n'
p31283
sS'cpp_type'
p31284
S'unsigned int'
p31285
sS'default'
p31286
S'3'
p31287
sS'name'
p31288
S'padding'
p31289
sS'required'
p31290
I00
sS'group_name'
p31291
S'Advanced'
p31292
sa(dp31293
S'description'
p31294
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p31295
sS'cpp_type'
p31296
S'libMesh::Point'
p31297
sS'default'
p31298
g3
sS'name'
p31299
S'position'
p31300
sS'required'
p31301
I00
sS'group_name'
p31302
S'Oversampling'
p31303
sa(dp31304
S'description'
p31305
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p31306
sS'cpp_type'
p31307
S'unsigned int'
p31308
sS'default'
p31309
S'0'
p31310
sS'name'
p31311
S'refinements'
p31312
sS'required'
p31313
I00
sS'group_name'
p31314
S'Oversampling'
p31315
sa(dp31316
S'description'
p31317
S'Output scalar variables as nodal\n'
p31318
sS'cpp_type'
p31319
S'bool'
p31320
sS'default'
p31321
S'0'
p31322
sS'name'
p31323
S'scalar_as_nodal'
p31324
sS'required'
p31325
I00
sS'group_name'
p31326
S'Variables'
p31327
sa(dp31328
S'description'
p31329
S"Enable/disable sequential file output (enabled by default when 'use_displace = true', otherwise defaults to false\n"
p31330
sS'cpp_type'
p31331
S'bool'
p31332
sS'default'
p31333
g3
sS'name'
p31334
S'sequence'
p31335
sS'required'
p31336
I00
sS'group_name'
p31337
Nsa(dp31338
S'description'
p31339
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p31340
sS'cpp_type'
p31341
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p31342
sS'default'
p31343
g3
sS'name'
p31344
S'show'
p31345
sS'required'
p31346
I00
sS'group_name'
p31347
S'Variables'
p31348
sa(dp31349
S'description'
p31350
S'List of materialproperties that should be written to the output\n'
p31351
sS'cpp_type'
p31352
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p31353
sS'default'
p31354
g3
sS'name'
p31355
S'show_material_properties'
p31356
sS'required'
p31357
I00
sS'group_name'
p31358
S'Materials'
p31359
sa(dp31360
S'description'
p31361
S'Time at which this output object begins to operate\n'
p31362
sS'cpp_type'
p31363
S'double'
p31364
sS'default'
p31365
g3
sS'name'
p31366
S'start_time'
p31367
sS'required'
p31368
I00
sS'group_name'
p31369
S'Timing'
p31370
sa(dp31371
S'description'
p31372
S'Only export results at sync times\n'
p31373
sS'cpp_type'
p31374
S'bool'
p31375
sS'default'
p31376
S'0'
p31377
sS'name'
p31378
S'sync_only'
p31379
sS'required'
p31380
I00
sS'group_name'
p31381
S'Timing'
p31382
sa(dp31383
S'description'
p31384
S'Times at which the output and solution is forced to occur\n'
p31385
sS'cpp_type'
p31386
S'std::__1::vector<double, std::__1::allocator<double> >'
p31387
sS'default'
p31388
g3
sS'name'
p31389
S'sync_times'
p31390
sS'required'
p31391
I00
sS'group_name'
p31392
S'Timing'
p31393
sa(dp31394
S'description'
p31395
S'Time tolerance utilized checking start and end times\n'
p31396
sS'cpp_type'
p31397
S'double'
p31398
sS'default'
p31399
S'1e-14'
p31400
sS'name'
p31401
S'time_tolerance'
p31402
sS'required'
p31403
I00
sS'group_name'
p31404
S'Timing'
p31405
sa(dp31406
S'description'
p31407
g3
sS'cpp_type'
p31408
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31409
sS'default'
p31410
S'Exodus'
p31411
sS'name'
p31412
S'type'
p31413
sS'required'
p31414
I00
sS'group_name'
p31415
Nsa(dp31416
S'description'
p31417
S'Enable/disable the use of the displaced mesh for outputting\n'
p31418
sS'cpp_type'
p31419
S'bool'
p31420
sS'default'
p31421
S'0'
p31422
sS'name'
p31423
S'use_displaced'
p31424
sS'required'
p31425
I00
sS'group_name'
p31426
Nsa(dp31427
S'description'
p31428
S'Use the problem dimension to the mesh output. Set to false when outputting lower dimensional meshes embedded in a higher dimensional space.\n'
p31429
sS'cpp_type'
p31430
S'bool'
p31431
sS'default'
p31432
g3
sS'name'
p31433
S'use_problem_dimension'
p31434
sS'required'
p31435
I00
sS'group_name'
p31436
NsasS'name'
p31437
S'/Outputs/Exodus'
p31438
sa(dp31439
S'description'
p31440
S'Object for outputting data in the GMV format\n'
p31441
sS'subblocks'
p31442
NsS'parameters'
p31443
(lp31444
(dp31445
S'name'
p31446
S'additional_execute_on'
p31447
sS'cpp_type'
p31448
S'MultiMooseEnum'
p31449
sS'default'
p31450
g3
sS'description'
p31451
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p31452
sS'required'
p31453
I00
sS'options'
p31454
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31455
sS'group_name'
p31456
Nsa(dp31457
S'description'
p31458
S'When true the date and time are appended to the output filename.\n'
p31459
sS'cpp_type'
p31460
S'bool'
p31461
sS'default'
p31462
S'0'
p31463
sS'name'
p31464
S'append_date'
p31465
sS'required'
p31466
I00
sS'group_name'
p31467
Nsa(dp31468
S'description'
p31469
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p31470
sS'cpp_type'
p31471
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31472
sS'default'
p31473
g3
sS'name'
p31474
S'append_date_format'
p31475
sS'required'
p31476
I00
sS'group_name'
p31477
Nsa(dp31478
S'description'
p31479
S"Append '_oversample' to the output file base\n"
p31480
sS'cpp_type'
p31481
S'bool'
p31482
sS'default'
p31483
S'0'
p31484
sS'name'
p31485
S'append_oversample'
p31486
sS'required'
p31487
I00
sS'group_name'
p31488
Nsa(dp31489
S'description'
p31490
S'Output the file in binary format\n'
p31491
sS'cpp_type'
p31492
S'bool'
p31493
sS'default'
p31494
S'1'
p31495
sS'name'
p31496
S'binary'
p31497
sS'required'
p31498
I00
sS'group_name'
p31499
S'Advanced'
p31500
sa(dp31501
S'description'
p31502
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31503
sS'cpp_type'
p31504
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p31505
sS'default'
p31506
g3
sS'name'
p31507
S'control_tags'
p31508
sS'required'
p31509
I00
sS'group_name'
p31510
S'Advanced'
p31511
sa(dp31512
S'description'
p31513
S'Set the enabled status of the MooseObject.\n'
p31514
sS'cpp_type'
p31515
S'bool'
p31516
sS'default'
p31517
S'1'
p31518
sS'name'
p31519
S'enable'
p31520
sS'required'
p31521
I00
sS'group_name'
p31522
S'Advanced'
p31523
sa(dp31524
S'description'
p31525
S'Time at which this output object stop operating\n'
p31526
sS'cpp_type'
p31527
S'double'
p31528
sS'default'
p31529
g3
sS'name'
p31530
S'end_time'
p31531
sS'required'
p31532
I00
sS'group_name'
p31533
S'Timing'
p31534
sa(dp31535
S'name'
p31536
S'execute_on'
p31537
sS'cpp_type'
p31538
S'MultiMooseEnum'
p31539
sS'default'
p31540
S'INITIAL TIMESTEP_END'
p31541
sS'description'
p31542
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p31543
sS'required'
p31544
I00
sS'options'
p31545
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31546
sS'group_name'
p31547
Nsa(dp31548
S'description'
p31549
S'The name of the mesh file to read, for oversampling\n'
p31550
sS'cpp_type'
p31551
S'MeshFileName'
p31552
sS'default'
p31553
g3
sS'name'
p31554
S'file'
p31555
sS'required'
p31556
I00
sS'group_name'
p31557
S'Oversampling'
p31558
sa(dp31559
S'description'
p31560
S'The desired solution output name without an extension\n'
p31561
sS'cpp_type'
p31562
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31563
sS'default'
p31564
g3
sS'name'
p31565
S'file_base'
p31566
sS'required'
p31567
I00
sS'group_name'
p31568
Nsa(dp31569
S'description'
p31570
S'The interval at which time steps are output to the solution file\n'
p31571
sS'cpp_type'
p31572
S'unsigned int'
p31573
sS'default'
p31574
S'1'
p31575
sS'name'
p31576
S'interval'
p31577
sS'required'
p31578
I00
sS'group_name'
p31579
S'Timing'
p31580
sa(dp31581
S'description'
p31582
S'Number of divisions applied to time step when outputting linear residuals\n'
p31583
sS'cpp_type'
p31584
S'double'
p31585
sS'default'
p31586
S'1000'
p31587
sS'name'
p31588
S'linear_residual_dt_divisor'
p31589
sS'required'
p31590
I00
sS'group_name'
p31591
S'PETSc'
p31592
sa(dp31593
S'description'
p31594
S'Specifies an end time to begin output on each linear residual evaluation\n'
p31595
sS'cpp_type'
p31596
S'double'
p31597
sS'default'
p31598
g3
sS'name'
p31599
S'linear_residual_end_time'
p31600
sS'required'
p31601
I00
sS'group_name'
p31602
S'PETSc'
p31603
sa(dp31604
S'description'
p31605
S'Specifies a start time to begin output on each linear residual evaluation\n'
p31606
sS'cpp_type'
p31607
S'double'
p31608
sS'default'
p31609
g3
sS'name'
p31610
S'linear_residual_start_time'
p31611
sS'required'
p31612
I00
sS'group_name'
p31613
S'PETSc'
p31614
sa(dp31615
S'description'
p31616
S'Specifies whether output occurs on each linear residual evaluation\n'
p31617
sS'cpp_type'
p31618
S'bool'
p31619
sS'default'
p31620
S'0'
p31621
sS'name'
p31622
S'linear_residuals'
p31623
sS'required'
p31624
I00
sS'group_name'
p31625
S'PETSc'
p31626
sa(dp31627
S'description'
p31628
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p31629
sS'cpp_type'
p31630
S'double'
p31631
sS'default'
p31632
S'1000'
p31633
sS'name'
p31634
S'nonlinear_residual_dt_divisor'
p31635
sS'required'
p31636
I00
sS'group_name'
p31637
S'PETSc'
p31638
sa(dp31639
S'description'
p31640
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p31641
sS'cpp_type'
p31642
S'double'
p31643
sS'default'
p31644
g3
sS'name'
p31645
S'nonlinear_residual_end_time'
p31646
sS'required'
p31647
I00
sS'group_name'
p31648
S'PETSc'
p31649
sa(dp31650
S'description'
p31651
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p31652
sS'cpp_type'
p31653
S'double'
p31654
sS'default'
p31655
g3
sS'name'
p31656
S'nonlinear_residual_start_time'
p31657
sS'required'
p31658
I00
sS'group_name'
p31659
S'PETSc'
p31660
sa(dp31661
S'description'
p31662
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p31663
sS'cpp_type'
p31664
S'bool'
p31665
sS'default'
p31666
S'0'
p31667
sS'name'
p31668
S'nonlinear_residuals'
p31669
sS'required'
p31670
I00
sS'group_name'
p31671
S'PETSc'
p31672
sa(dp31673
S'description'
p31674
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p31675
sS'cpp_type'
p31676
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p31677
sS'default'
p31678
g3
sS'name'
p31679
S'output_if_base_contains'
p31680
sS'required'
p31681
I00
sS'group_name'
p31682
S'Advanced'
p31683
sa(dp31684
S'description'
p31685
S'Specifies whether output occurs on each linear residual evaluation\n'
p31686
sS'cpp_type'
p31687
S'bool'
p31688
sS'default'
p31689
S'0'
p31690
sS'name'
p31691
S'output_linear'
p31692
sS'required'
p31693
I00
sS'group_name'
p31694
Nsa(dp31695
S'description'
p31696
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p31697
sS'cpp_type'
p31698
S'bool'
p31699
sS'default'
p31700
S'0'
p31701
sS'name'
p31702
S'output_nonlinear'
p31703
sS'required'
p31704
I00
sS'group_name'
p31705
Nsa(dp31706
S'description'
p31707
S'Set to true to enable oversampling\n'
p31708
sS'cpp_type'
p31709
S'bool'
p31710
sS'default'
p31711
S'0'
p31712
sS'name'
p31713
S'oversample'
p31714
sS'required'
p31715
I00
sS'group_name'
p31716
Nsa(dp31717
S'description'
p31718
S'The number of for extension suffix (e.g., out.e-s002)\n'
p31719
sS'cpp_type'
p31720
S'unsigned int'
p31721
sS'default'
p31722
S'4'
p31723
sS'name'
p31724
S'padding'
p31725
sS'required'
p31726
I00
sS'group_name'
p31727
S'Advanced'
p31728
sa(dp31729
S'description'
p31730
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p31731
sS'cpp_type'
p31732
S'libMesh::Point'
p31733
sS'default'
p31734
g3
sS'name'
p31735
S'position'
p31736
sS'required'
p31737
I00
sS'group_name'
p31738
S'Oversampling'
p31739
sa(dp31740
S'description'
p31741
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p31742
sS'cpp_type'
p31743
S'unsigned int'
p31744
sS'default'
p31745
S'0'
p31746
sS'name'
p31747
S'refinements'
p31748
sS'required'
p31749
I00
sS'group_name'
p31750
S'Oversampling'
p31751
sa(dp31752
S'description'
p31753
S'Time at which this output object begins to operate\n'
p31754
sS'cpp_type'
p31755
S'double'
p31756
sS'default'
p31757
g3
sS'name'
p31758
S'start_time'
p31759
sS'required'
p31760
I00
sS'group_name'
p31761
S'Timing'
p31762
sa(dp31763
S'description'
p31764
S'Only export results at sync times\n'
p31765
sS'cpp_type'
p31766
S'bool'
p31767
sS'default'
p31768
S'0'
p31769
sS'name'
p31770
S'sync_only'
p31771
sS'required'
p31772
I00
sS'group_name'
p31773
S'Timing'
p31774
sa(dp31775
S'description'
p31776
S'Times at which the output and solution is forced to occur\n'
p31777
sS'cpp_type'
p31778
S'std::__1::vector<double, std::__1::allocator<double> >'
p31779
sS'default'
p31780
g3
sS'name'
p31781
S'sync_times'
p31782
sS'required'
p31783
I00
sS'group_name'
p31784
S'Timing'
p31785
sa(dp31786
S'description'
p31787
S'Time tolerance utilized checking start and end times\n'
p31788
sS'cpp_type'
p31789
S'double'
p31790
sS'default'
p31791
S'1e-14'
p31792
sS'name'
p31793
S'time_tolerance'
p31794
sS'required'
p31795
I00
sS'group_name'
p31796
S'Timing'
p31797
sa(dp31798
S'description'
p31799
g3
sS'cpp_type'
p31800
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31801
sS'default'
p31802
S'GMV'
p31803
sS'name'
p31804
S'type'
p31805
sS'required'
p31806
I00
sS'group_name'
p31807
Nsa(dp31808
S'description'
p31809
S'Enable/disable the use of the displaced mesh for outputting\n'
p31810
sS'cpp_type'
p31811
S'bool'
p31812
sS'default'
p31813
S'0'
p31814
sS'name'
p31815
S'use_displaced'
p31816
sS'required'
p31817
I00
sS'group_name'
p31818
NsasS'name'
p31819
S'/Outputs/GMV'
p31820
sa(dp31821
S'description'
p31822
g3
sS'subblocks'
p31823
NsS'parameters'
p31824
(lp31825
(dp31826
S'name'
p31827
S'additional_execute_on'
p31828
sS'cpp_type'
p31829
S'MultiMooseEnum'
p31830
sS'default'
p31831
g3
sS'description'
p31832
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p31833
sS'required'
p31834
I00
sS'options'
p31835
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31836
sS'group_name'
p31837
Nsa(dp31838
S'description'
p31839
S'When true the date and time are appended to the output filename.\n'
p31840
sS'cpp_type'
p31841
S'bool'
p31842
sS'default'
p31843
S'0'
p31844
sS'name'
p31845
S'append_date'
p31846
sS'required'
p31847
I00
sS'group_name'
p31848
Nsa(dp31849
S'description'
p31850
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p31851
sS'cpp_type'
p31852
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31853
sS'default'
p31854
g3
sS'name'
p31855
S'append_date_format'
p31856
sS'required'
p31857
I00
sS'group_name'
p31858
Nsa(dp31859
S'description'
p31860
S'Append existing file on restart\n'
p31861
sS'cpp_type'
p31862
S'bool'
p31863
sS'default'
p31864
S'0'
p31865
sS'name'
p31866
S'append_restart'
p31867
sS'required'
p31868
I00
sS'group_name'
p31869
Nsa(dp31870
S'description'
p31871
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31872
sS'cpp_type'
p31873
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p31874
sS'default'
p31875
g3
sS'name'
p31876
S'control_tags'
p31877
sS'required'
p31878
I00
sS'group_name'
p31879
S'Advanced'
p31880
sa(dp31881
S'description'
p31882
S'Set the enabled status of the MooseObject.\n'
p31883
sS'cpp_type'
p31884
S'bool'
p31885
sS'default'
p31886
S'1'
p31887
sS'name'
p31888
S'enable'
p31889
sS'required'
p31890
I00
sS'group_name'
p31891
S'Advanced'
p31892
sa(dp31893
S'description'
p31894
S'Time at which this output object stop operating\n'
p31895
sS'cpp_type'
p31896
S'double'
p31897
sS'default'
p31898
g3
sS'name'
p31899
S'end_time'
p31900
sS'required'
p31901
I00
sS'group_name'
p31902
S'Timing'
p31903
sa(dp31904
S'description'
p31905
S'Enable/disable the output of elemental variables\n'
p31906
sS'cpp_type'
p31907
S'bool'
p31908
sS'default'
p31909
S'1'
p31910
sS'name'
p31911
S'execute_elemental_variables'
p31912
sS'required'
p31913
I00
sS'group_name'
p31914
Nsa(dp31915
S'description'
p31916
S'Enable/disable the output of input file information\n'
p31917
sS'cpp_type'
p31918
S'bool'
p31919
sS'default'
p31920
S'1'
p31921
sS'name'
p31922
S'execute_input'
p31923
sS'required'
p31924
I00
sS'group_name'
p31925
Nsa(dp31926
S'description'
p31927
S'Enable/disable the output of nodal variables\n'
p31928
sS'cpp_type'
p31929
S'bool'
p31930
sS'default'
p31931
S'1'
p31932
sS'name'
p31933
S'execute_nodal_variables'
p31934
sS'required'
p31935
I00
sS'group_name'
p31936
Nsa(dp31937
S'name'
p31938
S'execute_on'
p31939
sS'cpp_type'
p31940
S'MultiMooseEnum'
p31941
sS'default'
p31942
S'INITIAL TIMESTEP_END'
p31943
sS'description'
p31944
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p31945
sS'required'
p31946
I00
sS'options'
p31947
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31948
sS'group_name'
p31949
Nsa(dp31950
S'name'
p31951
S'execute_postprocessors_on'
p31952
sS'cpp_type'
p31953
S'MultiMooseEnum'
p31954
sS'default'
p31955
g3
sS'description'
p31956
S'Control of when postprocessors are output\n'
p31957
sS'required'
p31958
I00
sS'options'
p31959
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31960
sS'group_name'
p31961
S'Variables'
p31962
sa(dp31963
S'description'
p31964
S'Enable/disable the output of aux scalar variables\n'
p31965
sS'cpp_type'
p31966
S'bool'
p31967
sS'default'
p31968
S'1'
p31969
sS'name'
p31970
S'execute_scalar_variables'
p31971
sS'required'
p31972
I00
sS'group_name'
p31973
Nsa(dp31974
S'name'
p31975
S'execute_scalars_on'
p31976
sS'cpp_type'
p31977
S'MultiMooseEnum'
p31978
sS'default'
p31979
g3
sS'description'
p31980
S'Control the output of scalar variables\n'
p31981
sS'required'
p31982
I00
sS'options'
p31983
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31984
sS'group_name'
p31985
S'Variables'
p31986
sa(dp31987
S'description'
p31988
S'Enable/disable the output of the simulation information\n'
p31989
sS'cpp_type'
p31990
S'bool'
p31991
sS'default'
p31992
S'1'
p31993
sS'name'
p31994
S'execute_system_information'
p31995
sS'required'
p31996
I00
sS'group_name'
p31997
Nsa(dp31998
S'description'
p31999
S'Enable/disable the output of vector postprocessors\n'
p32000
sS'cpp_type'
p32001
S'bool'
p32002
sS'default'
p32003
S'1'
p32004
sS'name'
p32005
S'execute_vector_postprocessors'
p32006
sS'required'
p32007
I00
sS'group_name'
p32008
Nsa(dp32009
S'name'
p32010
S'execute_vector_postprocessors_on'
p32011
sS'cpp_type'
p32012
S'MultiMooseEnum'
p32013
sS'default'
p32014
g3
sS'description'
p32015
S'Enable/disable the output of VectorPostprocessors\n'
p32016
sS'required'
p32017
I00
sS'options'
p32018
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32019
sS'group_name'
p32020
S'Variables'
p32021
sa(dp32022
S'name'
p32023
S'extension'
p32024
sS'cpp_type'
p32025
S'MooseEnum'
p32026
sS'default'
p32027
S'png'
p32028
sS'description'
p32029
S'GNU plot file extension\n'
p32030
sS'required'
p32031
I00
sS'options'
p32032
S'png ps gif'
p32033
sS'group_name'
p32034
Nsa(dp32035
S'description'
p32036
S'The desired solution output name without an extension\n'
p32037
sS'cpp_type'
p32038
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32039
sS'default'
p32040
g3
sS'name'
p32041
S'file_base'
p32042
sS'required'
p32043
I00
sS'group_name'
p32044
Nsa(dp32045
S'description'
p32046
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p32047
sS'cpp_type'
p32048
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p32049
sS'default'
p32050
g3
sS'name'
p32051
S'hide'
p32052
sS'required'
p32053
I00
sS'group_name'
p32054
S'Variables'
p32055
sa(dp32056
S'description'
p32057
S'The interval at which time steps are output to the solution file\n'
p32058
sS'cpp_type'
p32059
S'unsigned int'
p32060
sS'default'
p32061
S'1'
p32062
sS'name'
p32063
S'interval'
p32064
sS'required'
p32065
I00
sS'group_name'
p32066
S'Timing'
p32067
sa(dp32068
S'description'
p32069
S'Number of divisions applied to time step when outputting linear residuals\n'
p32070
sS'cpp_type'
p32071
S'double'
p32072
sS'default'
p32073
S'1000'
p32074
sS'name'
p32075
S'linear_residual_dt_divisor'
p32076
sS'required'
p32077
I00
sS'group_name'
p32078
S'PETSc'
p32079
sa(dp32080
S'description'
p32081
S'Specifies an end time to begin output on each linear residual evaluation\n'
p32082
sS'cpp_type'
p32083
S'double'
p32084
sS'default'
p32085
g3
sS'name'
p32086
S'linear_residual_end_time'
p32087
sS'required'
p32088
I00
sS'group_name'
p32089
S'PETSc'
p32090
sa(dp32091
S'description'
p32092
S'Specifies a start time to begin output on each linear residual evaluation\n'
p32093
sS'cpp_type'
p32094
S'double'
p32095
sS'default'
p32096
g3
sS'name'
p32097
S'linear_residual_start_time'
p32098
sS'required'
p32099
I00
sS'group_name'
p32100
S'PETSc'
p32101
sa(dp32102
S'description'
p32103
S'Specifies whether output occurs on each linear residual evaluation\n'
p32104
sS'cpp_type'
p32105
S'bool'
p32106
sS'default'
p32107
S'0'
p32108
sS'name'
p32109
S'linear_residuals'
p32110
sS'required'
p32111
I00
sS'group_name'
p32112
S'PETSc'
p32113
sa(dp32114
S'description'
p32115
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p32116
sS'cpp_type'
p32117
S'double'
p32118
sS'default'
p32119
S'1000'
p32120
sS'name'
p32121
S'nonlinear_residual_dt_divisor'
p32122
sS'required'
p32123
I00
sS'group_name'
p32124
S'PETSc'
p32125
sa(dp32126
S'description'
p32127
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p32128
sS'cpp_type'
p32129
S'double'
p32130
sS'default'
p32131
g3
sS'name'
p32132
S'nonlinear_residual_end_time'
p32133
sS'required'
p32134
I00
sS'group_name'
p32135
S'PETSc'
p32136
sa(dp32137
S'description'
p32138
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p32139
sS'cpp_type'
p32140
S'double'
p32141
sS'default'
p32142
g3
sS'name'
p32143
S'nonlinear_residual_start_time'
p32144
sS'required'
p32145
I00
sS'group_name'
p32146
S'PETSc'
p32147
sa(dp32148
S'description'
p32149
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p32150
sS'cpp_type'
p32151
S'bool'
p32152
sS'default'
p32153
S'0'
p32154
sS'name'
p32155
S'nonlinear_residuals'
p32156
sS'required'
p32157
I00
sS'group_name'
p32158
S'PETSc'
p32159
sa(dp32160
S'description'
p32161
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p32162
sS'cpp_type'
p32163
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p32164
sS'default'
p32165
g3
sS'name'
p32166
S'output_if_base_contains'
p32167
sS'required'
p32168
I00
sS'group_name'
p32169
S'Advanced'
p32170
sa(dp32171
S'description'
p32172
S'Specifies whether output occurs on each linear residual evaluation\n'
p32173
sS'cpp_type'
p32174
S'bool'
p32175
sS'default'
p32176
S'0'
p32177
sS'name'
p32178
S'output_linear'
p32179
sS'required'
p32180
I00
sS'group_name'
p32181
Nsa(dp32182
S'description'
p32183
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p32184
sS'cpp_type'
p32185
S'bool'
p32186
sS'default'
p32187
S'0'
p32188
sS'name'
p32189
S'output_nonlinear'
p32190
sS'required'
p32191
I00
sS'group_name'
p32192
Nsa(dp32193
S'description'
p32194
S'Enable/disable the output of postprocessors\n'
p32195
sS'cpp_type'
p32196
S'bool'
p32197
sS'default'
p32198
S'1'
p32199
sS'name'
p32200
S'output_postprocessors'
p32201
sS'required'
p32202
I00
sS'group_name'
p32203
Nsa(dp32204
S'description'
p32205
S'The number of for extension suffix (e.g., out.e-s002)\n'
p32206
sS'cpp_type'
p32207
S'unsigned int'
p32208
sS'default'
p32209
S'4'
p32210
sS'name'
p32211
S'padding'
p32212
sS'required'
p32213
I00
sS'group_name'
p32214
S'Advanced'
p32215
sa(dp32216
S'description'
p32217
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p32218
sS'cpp_type'
p32219
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p32220
sS'default'
p32221
g3
sS'name'
p32222
S'show'
p32223
sS'required'
p32224
I00
sS'group_name'
p32225
S'Variables'
p32226
sa(dp32227
S'description'
p32228
S'Time at which this output object begins to operate\n'
p32229
sS'cpp_type'
p32230
S'double'
p32231
sS'default'
p32232
g3
sS'name'
p32233
S'start_time'
p32234
sS'required'
p32235
I00
sS'group_name'
p32236
S'Timing'
p32237
sa(dp32238
S'description'
p32239
S'Only export results at sync times\n'
p32240
sS'cpp_type'
p32241
S'bool'
p32242
sS'default'
p32243
S'0'
p32244
sS'name'
p32245
S'sync_only'
p32246
sS'required'
p32247
I00
sS'group_name'
p32248
S'Timing'
p32249
sa(dp32250
S'description'
p32251
S'Times at which the output and solution is forced to occur\n'
p32252
sS'cpp_type'
p32253
S'std::__1::vector<double, std::__1::allocator<double> >'
p32254
sS'default'
p32255
g3
sS'name'
p32256
S'sync_times'
p32257
sS'required'
p32258
I00
sS'group_name'
p32259
S'Timing'
p32260
sa(dp32261
S'description'
p32262
S"Whether or not the 'time' column should be written for Postprocessor CSV files\n"
p32263
sS'cpp_type'
p32264
S'bool'
p32265
sS'default'
p32266
S'1'
p32267
sS'name'
p32268
S'time_column'
p32269
sS'required'
p32270
I00
sS'group_name'
p32271
Nsa(dp32272
S'description'
p32273
S'When true and VecptorPostprocessor data exists, write a csv file containing the timestep and time information.\n'
p32274
sS'cpp_type'
p32275
S'bool'
p32276
sS'default'
p32277
S'0'
p32278
sS'name'
p32279
S'time_data'
p32280
sS'required'
p32281
I00
sS'group_name'
p32282
Nsa(dp32283
S'description'
p32284
S'Time tolerance utilized checking start and end times\n'
p32285
sS'cpp_type'
p32286
S'double'
p32287
sS'default'
p32288
S'1e-14'
p32289
sS'name'
p32290
S'time_tolerance'
p32291
sS'required'
p32292
I00
sS'group_name'
p32293
S'Timing'
p32294
sa(dp32295
S'description'
p32296
g3
sS'cpp_type'
p32297
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32298
sS'default'
p32299
S'Gnuplot'
p32300
sS'name'
p32301
S'type'
p32302
sS'required'
p32303
I00
sS'group_name'
p32304
Nsa(dp32305
S'description'
p32306
S'Enable/disable the use of the displaced mesh for outputting\n'
p32307
sS'cpp_type'
p32308
S'bool'
p32309
sS'default'
p32310
S'0'
p32311
sS'name'
p32312
S'use_displaced'
p32313
sS'required'
p32314
I00
sS'group_name'
p32315
NsasS'name'
p32316
S'/Outputs/Gnuplot'
p32317
sa(dp32318
S'description'
p32319
g3
sS'subblocks'
p32320
NsS'parameters'
p32321
(lp32322
(dp32323
S'name'
p32324
S'additional_execute_on'
p32325
sS'cpp_type'
p32326
S'MultiMooseEnum'
p32327
sS'default'
p32328
g3
sS'description'
p32329
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p32330
sS'required'
p32331
I00
sS'options'
p32332
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32333
sS'group_name'
p32334
Nsa(dp32335
S'description'
p32336
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32337
sS'cpp_type'
p32338
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p32339
sS'default'
p32340
g3
sS'name'
p32341
S'control_tags'
p32342
sS'required'
p32343
I00
sS'group_name'
p32344
S'Advanced'
p32345
sa(dp32346
S'description'
p32347
S'Set the enabled status of the MooseObject.\n'
p32348
sS'cpp_type'
p32349
S'bool'
p32350
sS'default'
p32351
S'1'
p32352
sS'name'
p32353
S'enable'
p32354
sS'required'
p32355
I00
sS'group_name'
p32356
S'Advanced'
p32357
sa(dp32358
S'description'
p32359
S'Time at which this output object stop operating\n'
p32360
sS'cpp_type'
p32361
S'double'
p32362
sS'default'
p32363
g3
sS'name'
p32364
S'end_time'
p32365
sS'required'
p32366
I00
sS'group_name'
p32367
S'Timing'
p32368
sa(dp32369
S'description'
p32370
S'The interval at which time steps are output to the solution file\n'
p32371
sS'cpp_type'
p32372
S'unsigned int'
p32373
sS'default'
p32374
S'1'
p32375
sS'name'
p32376
S'interval'
p32377
sS'required'
p32378
I00
sS'group_name'
p32379
S'Timing'
p32380
sa(dp32381
S'description'
p32382
S'Time at which this output object begins to operate\n'
p32383
sS'cpp_type'
p32384
S'double'
p32385
sS'default'
p32386
g3
sS'name'
p32387
S'start_time'
p32388
sS'required'
p32389
I00
sS'group_name'
p32390
S'Timing'
p32391
sa(dp32392
S'description'
p32393
S'Only export results at sync times\n'
p32394
sS'cpp_type'
p32395
S'bool'
p32396
sS'default'
p32397
S'0'
p32398
sS'name'
p32399
S'sync_only'
p32400
sS'required'
p32401
I00
sS'group_name'
p32402
S'Timing'
p32403
sa(dp32404
S'description'
p32405
S'Times at which the output and solution is forced to occur\n'
p32406
sS'cpp_type'
p32407
S'std::__1::vector<double, std::__1::allocator<double> >'
p32408
sS'default'
p32409
g3
sS'name'
p32410
S'sync_times'
p32411
sS'required'
p32412
I00
sS'group_name'
p32413
S'Timing'
p32414
sa(dp32415
S'description'
p32416
S'Time tolerance utilized checking start and end times\n'
p32417
sS'cpp_type'
p32418
S'double'
p32419
sS'default'
p32420
S'1e-14'
p32421
sS'name'
p32422
S'time_tolerance'
p32423
sS'required'
p32424
I00
sS'group_name'
p32425
S'Timing'
p32426
sa(dp32427
S'description'
p32428
g3
sS'cpp_type'
p32429
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32430
sS'default'
p32431
S'MaterialPropertyDebugOutput'
p32432
sS'name'
p32433
S'type'
p32434
sS'required'
p32435
I00
sS'group_name'
p32436
Nsa(dp32437
S'description'
p32438
S'Enable/disable the use of the displaced mesh for outputting\n'
p32439
sS'cpp_type'
p32440
S'bool'
p32441
sS'default'
p32442
S'0'
p32443
sS'name'
p32444
S'use_displaced'
p32445
sS'required'
p32446
I00
sS'group_name'
p32447
NsasS'name'
p32448
S'/Outputs/MaterialPropertyDebugOutput'
p32449
sa(dp32450
S'description'
p32451
S'Object for output data in the Nemesis format\n'
p32452
sS'subblocks'
p32453
NsS'parameters'
p32454
(lp32455
(dp32456
S'name'
p32457
S'additional_execute_on'
p32458
sS'cpp_type'
p32459
S'MultiMooseEnum'
p32460
sS'default'
p32461
g3
sS'description'
p32462
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p32463
sS'required'
p32464
I00
sS'options'
p32465
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32466
sS'group_name'
p32467
Nsa(dp32468
S'description'
p32469
S'When true the date and time are appended to the output filename.\n'
p32470
sS'cpp_type'
p32471
S'bool'
p32472
sS'default'
p32473
S'0'
p32474
sS'name'
p32475
S'append_date'
p32476
sS'required'
p32477
I00
sS'group_name'
p32478
Nsa(dp32479
S'description'
p32480
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p32481
sS'cpp_type'
p32482
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32483
sS'default'
p32484
g3
sS'name'
p32485
S'append_date_format'
p32486
sS'required'
p32487
I00
sS'group_name'
p32488
Nsa(dp32489
S'description'
p32490
S"Append '_oversample' to the output file base\n"
p32491
sS'cpp_type'
p32492
S'bool'
p32493
sS'default'
p32494
S'0'
p32495
sS'name'
p32496
S'append_oversample'
p32497
sS'required'
p32498
I00
sS'group_name'
p32499
Nsa(dp32500
S'description'
p32501
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32502
sS'cpp_type'
p32503
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p32504
sS'default'
p32505
g3
sS'name'
p32506
S'control_tags'
p32507
sS'required'
p32508
I00
sS'group_name'
p32509
S'Advanced'
p32510
sa(dp32511
S'description'
p32512
S'Set the enabled status of the MooseObject.\n'
p32513
sS'cpp_type'
p32514
S'bool'
p32515
sS'default'
p32516
S'1'
p32517
sS'name'
p32518
S'enable'
p32519
sS'required'
p32520
I00
sS'group_name'
p32521
S'Advanced'
p32522
sa(dp32523
S'description'
p32524
S'Time at which this output object stop operating\n'
p32525
sS'cpp_type'
p32526
S'double'
p32527
sS'default'
p32528
g3
sS'name'
p32529
S'end_time'
p32530
sS'required'
p32531
I00
sS'group_name'
p32532
S'Timing'
p32533
sa(dp32534
S'description'
p32535
S'Enable/disable the output of elemental variables\n'
p32536
sS'cpp_type'
p32537
S'bool'
p32538
sS'default'
p32539
S'1'
p32540
sS'name'
p32541
S'execute_elemental_variables'
p32542
sS'required'
p32543
I00
sS'group_name'
p32544
Nsa(dp32545
S'description'
p32546
S'Enable/disable the output of input file information\n'
p32547
sS'cpp_type'
p32548
S'bool'
p32549
sS'default'
p32550
S'1'
p32551
sS'name'
p32552
S'execute_input'
p32553
sS'required'
p32554
I00
sS'group_name'
p32555
Nsa(dp32556
S'name'
p32557
S'execute_input_on'
p32558
sS'cpp_type'
p32559
S'MultiMooseEnum'
p32560
sS'default'
p32561
g3
sS'description'
p32562
S'Enable/disable the output of the input file\n'
p32563
sS'required'
p32564
I00
sS'options'
p32565
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32566
sS'group_name'
p32567
S'Variables'
p32568
sa(dp32569
S'description'
p32570
S'Enable/disable the output of nodal variables\n'
p32571
sS'cpp_type'
p32572
S'bool'
p32573
sS'default'
p32574
S'1'
p32575
sS'name'
p32576
S'execute_nodal_variables'
p32577
sS'required'
p32578
I00
sS'group_name'
p32579
Nsa(dp32580
S'name'
p32581
S'execute_on'
p32582
sS'cpp_type'
p32583
S'MultiMooseEnum'
p32584
sS'default'
p32585
S'INITIAL TIMESTEP_END'
p32586
sS'description'
p32587
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p32588
sS'required'
p32589
I00
sS'options'
p32590
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32591
sS'group_name'
p32592
Nsa(dp32593
S'name'
p32594
S'execute_postprocessors_on'
p32595
sS'cpp_type'
p32596
S'MultiMooseEnum'
p32597
sS'default'
p32598
g3
sS'description'
p32599
S'Control of when postprocessors are output\n'
p32600
sS'required'
p32601
I00
sS'options'
p32602
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32603
sS'group_name'
p32604
S'Variables'
p32605
sa(dp32606
S'description'
p32607
S'Enable/disable the output of aux scalar variables\n'
p32608
sS'cpp_type'
p32609
S'bool'
p32610
sS'default'
p32611
S'1'
p32612
sS'name'
p32613
S'execute_scalar_variables'
p32614
sS'required'
p32615
I00
sS'group_name'
p32616
Nsa(dp32617
S'name'
p32618
S'execute_scalars_on'
p32619
sS'cpp_type'
p32620
S'MultiMooseEnum'
p32621
sS'default'
p32622
g3
sS'description'
p32623
S'Control the output of scalar variables\n'
p32624
sS'required'
p32625
I00
sS'options'
p32626
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32627
sS'group_name'
p32628
S'Variables'
p32629
sa(dp32630
S'description'
p32631
S'Enable/disable the output of the simulation information\n'
p32632
sS'cpp_type'
p32633
S'bool'
p32634
sS'default'
p32635
S'1'
p32636
sS'name'
p32637
S'execute_system_information'
p32638
sS'required'
p32639
I00
sS'group_name'
p32640
Nsa(dp32641
S'description'
p32642
S'Enable/disable the output of vector postprocessors\n'
p32643
sS'cpp_type'
p32644
S'bool'
p32645
sS'default'
p32646
S'1'
p32647
sS'name'
p32648
S'execute_vector_postprocessors'
p32649
sS'required'
p32650
I00
sS'group_name'
p32651
Nsa(dp32652
S'description'
p32653
S'The name of the mesh file to read, for oversampling\n'
p32654
sS'cpp_type'
p32655
S'MeshFileName'
p32656
sS'default'
p32657
g3
sS'name'
p32658
S'file'
p32659
sS'required'
p32660
I00
sS'group_name'
p32661
S'Oversampling'
p32662
sa(dp32663
S'description'
p32664
S'The desired solution output name without an extension\n'
p32665
sS'cpp_type'
p32666
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32667
sS'default'
p32668
g3
sS'name'
p32669
S'file_base'
p32670
sS'required'
p32671
I00
sS'group_name'
p32672
Nsa(dp32673
S'description'
p32674
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p32675
sS'cpp_type'
p32676
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p32677
sS'default'
p32678
g3
sS'name'
p32679
S'hide'
p32680
sS'required'
p32681
I00
sS'group_name'
p32682
S'Variables'
p32683
sa(dp32684
S'description'
p32685
S'The interval at which time steps are output to the solution file\n'
p32686
sS'cpp_type'
p32687
S'unsigned int'
p32688
sS'default'
p32689
S'1'
p32690
sS'name'
p32691
S'interval'
p32692
sS'required'
p32693
I00
sS'group_name'
p32694
S'Timing'
p32695
sa(dp32696
S'description'
p32697
S'Number of divisions applied to time step when outputting linear residuals\n'
p32698
sS'cpp_type'
p32699
S'double'
p32700
sS'default'
p32701
S'1000'
p32702
sS'name'
p32703
S'linear_residual_dt_divisor'
p32704
sS'required'
p32705
I00
sS'group_name'
p32706
S'PETSc'
p32707
sa(dp32708
S'description'
p32709
S'Specifies an end time to begin output on each linear residual evaluation\n'
p32710
sS'cpp_type'
p32711
S'double'
p32712
sS'default'
p32713
g3
sS'name'
p32714
S'linear_residual_end_time'
p32715
sS'required'
p32716
I00
sS'group_name'
p32717
S'PETSc'
p32718
sa(dp32719
S'description'
p32720
S'Specifies a start time to begin output on each linear residual evaluation\n'
p32721
sS'cpp_type'
p32722
S'double'
p32723
sS'default'
p32724
g3
sS'name'
p32725
S'linear_residual_start_time'
p32726
sS'required'
p32727
I00
sS'group_name'
p32728
S'PETSc'
p32729
sa(dp32730
S'description'
p32731
S'Specifies whether output occurs on each linear residual evaluation\n'
p32732
sS'cpp_type'
p32733
S'bool'
p32734
sS'default'
p32735
S'0'
p32736
sS'name'
p32737
S'linear_residuals'
p32738
sS'required'
p32739
I00
sS'group_name'
p32740
S'PETSc'
p32741
sa(dp32742
S'description'
p32743
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p32744
sS'cpp_type'
p32745
S'double'
p32746
sS'default'
p32747
S'1000'
p32748
sS'name'
p32749
S'nonlinear_residual_dt_divisor'
p32750
sS'required'
p32751
I00
sS'group_name'
p32752
S'PETSc'
p32753
sa(dp32754
S'description'
p32755
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p32756
sS'cpp_type'
p32757
S'double'
p32758
sS'default'
p32759
g3
sS'name'
p32760
S'nonlinear_residual_end_time'
p32761
sS'required'
p32762
I00
sS'group_name'
p32763
S'PETSc'
p32764
sa(dp32765
S'description'
p32766
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p32767
sS'cpp_type'
p32768
S'double'
p32769
sS'default'
p32770
g3
sS'name'
p32771
S'nonlinear_residual_start_time'
p32772
sS'required'
p32773
I00
sS'group_name'
p32774
S'PETSc'
p32775
sa(dp32776
S'description'
p32777
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p32778
sS'cpp_type'
p32779
S'bool'
p32780
sS'default'
p32781
S'0'
p32782
sS'name'
p32783
S'nonlinear_residuals'
p32784
sS'required'
p32785
I00
sS'group_name'
p32786
S'PETSc'
p32787
sa(dp32788
S'description'
p32789
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p32790
sS'cpp_type'
p32791
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p32792
sS'default'
p32793
g3
sS'name'
p32794
S'output_if_base_contains'
p32795
sS'required'
p32796
I00
sS'group_name'
p32797
S'Advanced'
p32798
sa(dp32799
S'description'
p32800
S'Specifies whether output occurs on each linear residual evaluation\n'
p32801
sS'cpp_type'
p32802
S'bool'
p32803
sS'default'
p32804
S'0'
p32805
sS'name'
p32806
S'output_linear'
p32807
sS'required'
p32808
I00
sS'group_name'
p32809
Nsa(dp32810
S'description'
p32811
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p32812
sS'cpp_type'
p32813
S'bool'
p32814
sS'default'
p32815
S'0'
p32816
sS'name'
p32817
S'output_nonlinear'
p32818
sS'required'
p32819
I00
sS'group_name'
p32820
Nsa(dp32821
S'description'
p32822
S'Enable/disable the output of postprocessors\n'
p32823
sS'cpp_type'
p32824
S'bool'
p32825
sS'default'
p32826
S'1'
p32827
sS'name'
p32828
S'output_postprocessors'
p32829
sS'required'
p32830
I00
sS'group_name'
p32831
Nsa(dp32832
S'description'
p32833
S'Set to true to enable oversampling\n'
p32834
sS'cpp_type'
p32835
S'bool'
p32836
sS'default'
p32837
S'0'
p32838
sS'name'
p32839
S'oversample'
p32840
sS'required'
p32841
I00
sS'group_name'
p32842
Nsa(dp32843
S'description'
p32844
S'The number of for extension suffix (e.g., out.e-s002)\n'
p32845
sS'cpp_type'
p32846
S'unsigned int'
p32847
sS'default'
p32848
S'4'
p32849
sS'name'
p32850
S'padding'
p32851
sS'required'
p32852
I00
sS'group_name'
p32853
S'Advanced'
p32854
sa(dp32855
S'description'
p32856
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p32857
sS'cpp_type'
p32858
S'libMesh::Point'
p32859
sS'default'
p32860
g3
sS'name'
p32861
S'position'
p32862
sS'required'
p32863
I00
sS'group_name'
p32864
S'Oversampling'
p32865
sa(dp32866
S'description'
p32867
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p32868
sS'cpp_type'
p32869
S'unsigned int'
p32870
sS'default'
p32871
S'0'
p32872
sS'name'
p32873
S'refinements'
p32874
sS'required'
p32875
I00
sS'group_name'
p32876
S'Oversampling'
p32877
sa(dp32878
S'description'
p32879
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p32880
sS'cpp_type'
p32881
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p32882
sS'default'
p32883
g3
sS'name'
p32884
S'show'
p32885
sS'required'
p32886
I00
sS'group_name'
p32887
S'Variables'
p32888
sa(dp32889
S'description'
p32890
S'Time at which this output object begins to operate\n'
p32891
sS'cpp_type'
p32892
S'double'
p32893
sS'default'
p32894
g3
sS'name'
p32895
S'start_time'
p32896
sS'required'
p32897
I00
sS'group_name'
p32898
S'Timing'
p32899
sa(dp32900
S'description'
p32901
S'Only export results at sync times\n'
p32902
sS'cpp_type'
p32903
S'bool'
p32904
sS'default'
p32905
S'0'
p32906
sS'name'
p32907
S'sync_only'
p32908
sS'required'
p32909
I00
sS'group_name'
p32910
S'Timing'
p32911
sa(dp32912
S'description'
p32913
S'Times at which the output and solution is forced to occur\n'
p32914
sS'cpp_type'
p32915
S'std::__1::vector<double, std::__1::allocator<double> >'
p32916
sS'default'
p32917
g3
sS'name'
p32918
S'sync_times'
p32919
sS'required'
p32920
I00
sS'group_name'
p32921
S'Timing'
p32922
sa(dp32923
S'description'
p32924
S'Time tolerance utilized checking start and end times\n'
p32925
sS'cpp_type'
p32926
S'double'
p32927
sS'default'
p32928
S'1e-14'
p32929
sS'name'
p32930
S'time_tolerance'
p32931
sS'required'
p32932
I00
sS'group_name'
p32933
S'Timing'
p32934
sa(dp32935
S'description'
p32936
g3
sS'cpp_type'
p32937
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32938
sS'default'
p32939
S'Nemesis'
p32940
sS'name'
p32941
S'type'
p32942
sS'required'
p32943
I00
sS'group_name'
p32944
Nsa(dp32945
S'description'
p32946
S'Enable/disable the use of the displaced mesh for outputting\n'
p32947
sS'cpp_type'
p32948
S'bool'
p32949
sS'default'
p32950
S'0'
p32951
sS'name'
p32952
S'use_displaced'
p32953
sS'required'
p32954
I00
sS'group_name'
p32955
NsasS'name'
p32956
S'/Outputs/Nemesis'
p32957
sa(dp32958
S'description'
p32959
g3
sS'subblocks'
p32960
NsS'parameters'
p32961
(lp32962
(dp32963
S'name'
p32964
S'additional_execute_on'
p32965
sS'cpp_type'
p32966
S'MultiMooseEnum'
p32967
sS'default'
p32968
g3
sS'description'
p32969
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p32970
sS'required'
p32971
I00
sS'options'
p32972
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32973
sS'group_name'
p32974
Nsa(dp32975
S'description'
p32976
S'When true the date and time are appended to the output filename.\n'
p32977
sS'cpp_type'
p32978
S'bool'
p32979
sS'default'
p32980
S'0'
p32981
sS'name'
p32982
S'append_date'
p32983
sS'required'
p32984
I00
sS'group_name'
p32985
Nsa(dp32986
S'description'
p32987
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p32988
sS'cpp_type'
p32989
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32990
sS'default'
p32991
g3
sS'name'
p32992
S'append_date_format'
p32993
sS'required'
p32994
I00
sS'group_name'
p32995
Nsa(dp32996
S'description'
p32997
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32998
sS'cpp_type'
p32999
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p33000
sS'default'
p33001
g3
sS'name'
p33002
S'control_tags'
p33003
sS'required'
p33004
I00
sS'group_name'
p33005
S'Advanced'
p33006
sa(dp33007
S'description'
p33008
S'Set the enabled status of the MooseObject.\n'
p33009
sS'cpp_type'
p33010
S'bool'
p33011
sS'default'
p33012
S'1'
p33013
sS'name'
p33014
S'enable'
p33015
sS'required'
p33016
I00
sS'group_name'
p33017
S'Advanced'
p33018
sa(dp33019
S'description'
p33020
S'Time at which this output object stop operating\n'
p33021
sS'cpp_type'
p33022
S'double'
p33023
sS'default'
p33024
g3
sS'name'
p33025
S'end_time'
p33026
sS'required'
p33027
I00
sS'group_name'
p33028
S'Timing'
p33029
sa(dp33030
S'name'
p33031
S'execute_on'
p33032
sS'cpp_type'
p33033
S'MultiMooseEnum'
p33034
sS'default'
p33035
S'INITIAL TIMESTEP_END'
p33036
sS'description'
p33037
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p33038
sS'required'
p33039
I00
sS'options'
p33040
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p33041
sS'group_name'
p33042
Nsa(dp33043
S'description'
p33044
S'The desired solution output name without an extension\n'
p33045
sS'cpp_type'
p33046
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33047
sS'default'
p33048
g3
sS'name'
p33049
S'file_base'
p33050
sS'required'
p33051
I00
sS'group_name'
p33052
Nsa(dp33053
S'description'
p33054
S'The interval at which time steps are output to the solution file\n'
p33055
sS'cpp_type'
p33056
S'unsigned int'
p33057
sS'default'
p33058
S'1'
p33059
sS'name'
p33060
S'interval'
p33061
sS'required'
p33062
I00
sS'group_name'
p33063
S'Timing'
p33064
sa(dp33065
S'description'
p33066
S'Number of divisions applied to time step when outputting linear residuals\n'
p33067
sS'cpp_type'
p33068
S'double'
p33069
sS'default'
p33070
S'1000'
p33071
sS'name'
p33072
S'linear_residual_dt_divisor'
p33073
sS'required'
p33074
I00
sS'group_name'
p33075
S'PETSc'
p33076
sa(dp33077
S'description'
p33078
S'Specifies an end time to begin output on each linear residual evaluation\n'
p33079
sS'cpp_type'
p33080
S'double'
p33081
sS'default'
p33082
g3
sS'name'
p33083
S'linear_residual_end_time'
p33084
sS'required'
p33085
I00
sS'group_name'
p33086
S'PETSc'
p33087
sa(dp33088
S'description'
p33089
S'Specifies a start time to begin output on each linear residual evaluation\n'
p33090
sS'cpp_type'
p33091
S'double'
p33092
sS'default'
p33093
g3
sS'name'
p33094
S'linear_residual_start_time'
p33095
sS'required'
p33096
I00
sS'group_name'
p33097
S'PETSc'
p33098
sa(dp33099
S'description'
p33100
S'Specifies whether output occurs on each linear residual evaluation\n'
p33101
sS'cpp_type'
p33102
S'bool'
p33103
sS'default'
p33104
S'0'
p33105
sS'name'
p33106
S'linear_residuals'
p33107
sS'required'
p33108
I00
sS'group_name'
p33109
S'PETSc'
p33110
sa(dp33111
S'description'
p33112
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p33113
sS'cpp_type'
p33114
S'double'
p33115
sS'default'
p33116
S'1000'
p33117
sS'name'
p33118
S'nonlinear_residual_dt_divisor'
p33119
sS'required'
p33120
I00
sS'group_name'
p33121
S'PETSc'
p33122
sa(dp33123
S'description'
p33124
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p33125
sS'cpp_type'
p33126
S'double'
p33127
sS'default'
p33128
g3
sS'name'
p33129
S'nonlinear_residual_end_time'
p33130
sS'required'
p33131
I00
sS'group_name'
p33132
S'PETSc'
p33133
sa(dp33134
S'description'
p33135
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p33136
sS'cpp_type'
p33137
S'double'
p33138
sS'default'
p33139
g3
sS'name'
p33140
S'nonlinear_residual_start_time'
p33141
sS'required'
p33142
I00
sS'group_name'
p33143
S'PETSc'
p33144
sa(dp33145
S'description'
p33146
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p33147
sS'cpp_type'
p33148
S'bool'
p33149
sS'default'
p33150
S'0'
p33151
sS'name'
p33152
S'nonlinear_residuals'
p33153
sS'required'
p33154
I00
sS'group_name'
p33155
S'PETSc'
p33156
sa(dp33157
S'description'
p33158
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p33159
sS'cpp_type'
p33160
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p33161
sS'default'
p33162
g3
sS'name'
p33163
S'output_if_base_contains'
p33164
sS'required'
p33165
I00
sS'group_name'
p33166
S'Advanced'
p33167
sa(dp33168
S'description'
p33169
S'Specifies whether output occurs on each linear residual evaluation\n'
p33170
sS'cpp_type'
p33171
S'bool'
p33172
sS'default'
p33173
S'0'
p33174
sS'name'
p33175
S'output_linear'
p33176
sS'required'
p33177
I00
sS'group_name'
p33178
Nsa(dp33179
S'description'
p33180
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p33181
sS'cpp_type'
p33182
S'bool'
p33183
sS'default'
p33184
S'0'
p33185
sS'name'
p33186
S'output_nonlinear'
p33187
sS'required'
p33188
I00
sS'group_name'
p33189
Nsa(dp33190
S'description'
p33191
S'The number of for extension suffix (e.g., out.e-s002)\n'
p33192
sS'cpp_type'
p33193
S'unsigned int'
p33194
sS'default'
p33195
S'4'
p33196
sS'name'
p33197
S'padding'
p33198
sS'required'
p33199
I00
sS'group_name'
p33200
S'Advanced'
p33201
sa(dp33202
S'description'
p33203
S'Time at which this output object begins to operate\n'
p33204
sS'cpp_type'
p33205
S'double'
p33206
sS'default'
p33207
g3
sS'name'
p33208
S'start_time'
p33209
sS'required'
p33210
I00
sS'group_name'
p33211
S'Timing'
p33212
sa(dp33213
S'description'
p33214
S'Only export results at sync times\n'
p33215
sS'cpp_type'
p33216
S'bool'
p33217
sS'default'
p33218
S'0'
p33219
sS'name'
p33220
S'sync_only'
p33221
sS'required'
p33222
I00
sS'group_name'
p33223
S'Timing'
p33224
sa(dp33225
S'description'
p33226
S'Times at which the output and solution is forced to occur\n'
p33227
sS'cpp_type'
p33228
S'std::__1::vector<double, std::__1::allocator<double> >'
p33229
sS'default'
p33230
g3
sS'name'
p33231
S'sync_times'
p33232
sS'required'
p33233
I00
sS'group_name'
p33234
S'Timing'
p33235
sa(dp33236
S'description'
p33237
S'Time tolerance utilized checking start and end times\n'
p33238
sS'cpp_type'
p33239
S'double'
p33240
sS'default'
p33241
S'1e-14'
p33242
sS'name'
p33243
S'time_tolerance'
p33244
sS'required'
p33245
I00
sS'group_name'
p33246
S'Timing'
p33247
sa(dp33248
S'description'
p33249
g3
sS'cpp_type'
p33250
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33251
sS'default'
p33252
S'SolutionHistory'
p33253
sS'name'
p33254
S'type'
p33255
sS'required'
p33256
I00
sS'group_name'
p33257
Nsa(dp33258
S'description'
p33259
S'Enable/disable the use of the displaced mesh for outputting\n'
p33260
sS'cpp_type'
p33261
S'bool'
p33262
sS'default'
p33263
S'0'
p33264
sS'name'
p33265
S'use_displaced'
p33266
sS'required'
p33267
I00
sS'group_name'
p33268
NsasS'name'
p33269
S'/Outputs/SolutionHistory'
p33270
sa(dp33271
S'description'
p33272
S'Object for outputting data in the Tecplot format\n'
p33273
sS'subblocks'
p33274
NsS'parameters'
p33275
(lp33276
(dp33277
S'name'
p33278
S'additional_execute_on'
p33279
sS'cpp_type'
p33280
S'MultiMooseEnum'
p33281
sS'default'
p33282
g3
sS'description'
p33283
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p33284
sS'required'
p33285
I00
sS'options'
p33286
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p33287
sS'group_name'
p33288
Nsa(dp33289
S'description'
p33290
S'When true the date and time are appended to the output filename.\n'
p33291
sS'cpp_type'
p33292
S'bool'
p33293
sS'default'
p33294
S'0'
p33295
sS'name'
p33296
S'append_date'
p33297
sS'required'
p33298
I00
sS'group_name'
p33299
Nsa(dp33300
S'description'
p33301
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p33302
sS'cpp_type'
p33303
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33304
sS'default'
p33305
g3
sS'name'
p33306
S'append_date_format'
p33307
sS'required'
p33308
I00
sS'group_name'
p33309
Nsa(dp33310
S'description'
p33311
S"Append '_oversample' to the output file base\n"
p33312
sS'cpp_type'
p33313
S'bool'
p33314
sS'default'
p33315
S'0'
p33316
sS'name'
p33317
S'append_oversample'
p33318
sS'required'
p33319
I00
sS'group_name'
p33320
Nsa(dp33321
S'description'
p33322
S'If true, append to an existing ASCII file rather than creating a new file each time\n'
p33323
sS'cpp_type'
p33324
S'bool'
p33325
sS'default'
p33326
S'0'
p33327
sS'name'
p33328
S'ascii_append'
p33329
sS'required'
p33330
I00
sS'group_name'
p33331
Nsa(dp33332
S'description'
p33333
S'Set Tecplot files to output in binary format\n'
p33334
sS'cpp_type'
p33335
S'bool'
p33336
sS'default'
p33337
S'0'
p33338
sS'name'
p33339
S'binary'
p33340
sS'required'
p33341
I00
sS'group_name'
p33342
S'Advanced'
p33343
sa(dp33344
S'description'
p33345
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33346
sS'cpp_type'
p33347
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p33348
sS'default'
p33349
g3
sS'name'
p33350
S'control_tags'
p33351
sS'required'
p33352
I00
sS'group_name'
p33353
S'Advanced'
p33354
sa(dp33355
S'description'
p33356
S'Set the enabled status of the MooseObject.\n'
p33357
sS'cpp_type'
p33358
S'bool'
p33359
sS'default'
p33360
S'1'
p33361
sS'name'
p33362
S'enable'
p33363
sS'required'
p33364
I00
sS'group_name'
p33365
S'Advanced'
p33366
sa(dp33367
S'description'
p33368
S'Time at which this output object stop operating\n'
p33369
sS'cpp_type'
p33370
S'double'
p33371
sS'default'
p33372
g3
sS'name'
p33373
S'end_time'
p33374
sS'required'
p33375
I00
sS'group_name'
p33376
S'Timing'
p33377
sa(dp33378
S'name'
p33379
S'execute_on'
p33380
sS'cpp_type'
p33381
S'MultiMooseEnum'
p33382
sS'default'
p33383
S'INITIAL TIMESTEP_END'
p33384
sS'description'
p33385
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p33386
sS'required'
p33387
I00
sS'options'
p33388
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p33389
sS'group_name'
p33390
Nsa(dp33391
S'description'
p33392
S'The name of the mesh file to read, for oversampling\n'
p33393
sS'cpp_type'
p33394
S'MeshFileName'
p33395
sS'default'
p33396
g3
sS'name'
p33397
S'file'
p33398
sS'required'
p33399
I00
sS'group_name'
p33400
S'Oversampling'
p33401
sa(dp33402
S'description'
p33403
S'The desired solution output name without an extension\n'
p33404
sS'cpp_type'
p33405
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33406
sS'default'
p33407
g3
sS'name'
p33408
S'file_base'
p33409
sS'required'
p33410
I00
sS'group_name'
p33411
Nsa(dp33412
S'description'
p33413
S'The interval at which time steps are output to the solution file\n'
p33414
sS'cpp_type'
p33415
S'unsigned int'
p33416
sS'default'
p33417
S'1'
p33418
sS'name'
p33419
S'interval'
p33420
sS'required'
p33421
I00
sS'group_name'
p33422
S'Timing'
p33423
sa(dp33424
S'description'
p33425
S'Number of divisions applied to time step when outputting linear residuals\n'
p33426
sS'cpp_type'
p33427
S'double'
p33428
sS'default'
p33429
S'1000'
p33430
sS'name'
p33431
S'linear_residual_dt_divisor'
p33432
sS'required'
p33433
I00
sS'group_name'
p33434
S'PETSc'
p33435
sa(dp33436
S'description'
p33437
S'Specifies an end time to begin output on each linear residual evaluation\n'
p33438
sS'cpp_type'
p33439
S'double'
p33440
sS'default'
p33441
g3
sS'name'
p33442
S'linear_residual_end_time'
p33443
sS'required'
p33444
I00
sS'group_name'
p33445
S'PETSc'
p33446
sa(dp33447
S'description'
p33448
S'Specifies a start time to begin output on each linear residual evaluation\n'
p33449
sS'cpp_type'
p33450
S'double'
p33451
sS'default'
p33452
g3
sS'name'
p33453
S'linear_residual_start_time'
p33454
sS'required'
p33455
I00
sS'group_name'
p33456
S'PETSc'
p33457
sa(dp33458
S'description'
p33459
S'Specifies whether output occurs on each linear residual evaluation\n'
p33460
sS'cpp_type'
p33461
S'bool'
p33462
sS'default'
p33463
S'0'
p33464
sS'name'
p33465
S'linear_residuals'
p33466
sS'required'
p33467
I00
sS'group_name'
p33468
S'PETSc'
p33469
sa(dp33470
S'description'
p33471
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p33472
sS'cpp_type'
p33473
S'double'
p33474
sS'default'
p33475
S'1000'
p33476
sS'name'
p33477
S'nonlinear_residual_dt_divisor'
p33478
sS'required'
p33479
I00
sS'group_name'
p33480
S'PETSc'
p33481
sa(dp33482
S'description'
p33483
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p33484
sS'cpp_type'
p33485
S'double'
p33486
sS'default'
p33487
g3
sS'name'
p33488
S'nonlinear_residual_end_time'
p33489
sS'required'
p33490
I00
sS'group_name'
p33491
S'PETSc'
p33492
sa(dp33493
S'description'
p33494
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p33495
sS'cpp_type'
p33496
S'double'
p33497
sS'default'
p33498
g3
sS'name'
p33499
S'nonlinear_residual_start_time'
p33500
sS'required'
p33501
I00
sS'group_name'
p33502
S'PETSc'
p33503
sa(dp33504
S'description'
p33505
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p33506
sS'cpp_type'
p33507
S'bool'
p33508
sS'default'
p33509
S'0'
p33510
sS'name'
p33511
S'nonlinear_residuals'
p33512
sS'required'
p33513
I00
sS'group_name'
p33514
S'PETSc'
p33515
sa(dp33516
S'description'
p33517
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p33518
sS'cpp_type'
p33519
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p33520
sS'default'
p33521
g3
sS'name'
p33522
S'output_if_base_contains'
p33523
sS'required'
p33524
I00
sS'group_name'
p33525
S'Advanced'
p33526
sa(dp33527
S'description'
p33528
S'Specifies whether output occurs on each linear residual evaluation\n'
p33529
sS'cpp_type'
p33530
S'bool'
p33531
sS'default'
p33532
S'0'
p33533
sS'name'
p33534
S'output_linear'
p33535
sS'required'
p33536
I00
sS'group_name'
p33537
Nsa(dp33538
S'description'
p33539
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p33540
sS'cpp_type'
p33541
S'bool'
p33542
sS'default'
p33543
S'0'
p33544
sS'name'
p33545
S'output_nonlinear'
p33546
sS'required'
p33547
I00
sS'group_name'
p33548
Nsa(dp33549
S'description'
p33550
S'Set to true to enable oversampling\n'
p33551
sS'cpp_type'
p33552
S'bool'
p33553
sS'default'
p33554
S'0'
p33555
sS'name'
p33556
S'oversample'
p33557
sS'required'
p33558
I00
sS'group_name'
p33559
Nsa(dp33560
S'description'
p33561
S'The number of for extension suffix (e.g., out.e-s002)\n'
p33562
sS'cpp_type'
p33563
S'unsigned int'
p33564
sS'default'
p33565
S'4'
p33566
sS'name'
p33567
S'padding'
p33568
sS'required'
p33569
I00
sS'group_name'
p33570
S'Advanced'
p33571
sa(dp33572
S'description'
p33573
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p33574
sS'cpp_type'
p33575
S'libMesh::Point'
p33576
sS'default'
p33577
g3
sS'name'
p33578
S'position'
p33579
sS'required'
p33580
I00
sS'group_name'
p33581
S'Oversampling'
p33582
sa(dp33583
S'description'
p33584
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p33585
sS'cpp_type'
p33586
S'unsigned int'
p33587
sS'default'
p33588
S'0'
p33589
sS'name'
p33590
S'refinements'
p33591
sS'required'
p33592
I00
sS'group_name'
p33593
S'Oversampling'
p33594
sa(dp33595
S'description'
p33596
S'Time at which this output object begins to operate\n'
p33597
sS'cpp_type'
p33598
S'double'
p33599
sS'default'
p33600
g3
sS'name'
p33601
S'start_time'
p33602
sS'required'
p33603
I00
sS'group_name'
p33604
S'Timing'
p33605
sa(dp33606
S'description'
p33607
S'Only export results at sync times\n'
p33608
sS'cpp_type'
p33609
S'bool'
p33610
sS'default'
p33611
S'0'
p33612
sS'name'
p33613
S'sync_only'
p33614
sS'required'
p33615
I00
sS'group_name'
p33616
S'Timing'
p33617
sa(dp33618
S'description'
p33619
S'Times at which the output and solution is forced to occur\n'
p33620
sS'cpp_type'
p33621
S'std::__1::vector<double, std::__1::allocator<double> >'
p33622
sS'default'
p33623
g3
sS'name'
p33624
S'sync_times'
p33625
sS'required'
p33626
I00
sS'group_name'
p33627
S'Timing'
p33628
sa(dp33629
S'description'
p33630
S'Time tolerance utilized checking start and end times\n'
p33631
sS'cpp_type'
p33632
S'double'
p33633
sS'default'
p33634
S'1e-14'
p33635
sS'name'
p33636
S'time_tolerance'
p33637
sS'required'
p33638
I00
sS'group_name'
p33639
S'Timing'
p33640
sa(dp33641
S'description'
p33642
g3
sS'cpp_type'
p33643
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33644
sS'default'
p33645
S'Tecplot'
p33646
sS'name'
p33647
S'type'
p33648
sS'required'
p33649
I00
sS'group_name'
p33650
Nsa(dp33651
S'description'
p33652
S'Enable/disable the use of the displaced mesh for outputting\n'
p33653
sS'cpp_type'
p33654
S'bool'
p33655
sS'default'
p33656
S'0'
p33657
sS'name'
p33658
S'use_displaced'
p33659
sS'required'
p33660
I00
sS'group_name'
p33661
NsasS'name'
p33662
S'/Outputs/Tecplot'
p33663
sa(dp33664
S'description'
p33665
g3
sS'subblocks'
p33666
NsS'parameters'
p33667
(lp33668
(dp33669
S'name'
p33670
S'additional_execute_on'
p33671
sS'cpp_type'
p33672
S'MultiMooseEnum'
p33673
sS'default'
p33674
g3
sS'description'
p33675
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p33676
sS'required'
p33677
I00
sS'options'
p33678
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p33679
sS'group_name'
p33680
Nsa(dp33681
S'description'
p33682
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33683
sS'cpp_type'
p33684
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p33685
sS'default'
p33686
g3
sS'name'
p33687
S'control_tags'
p33688
sS'required'
p33689
I00
sS'group_name'
p33690
S'Advanced'
p33691
sa(dp33692
S'description'
p33693
S'Set the enabled status of the MooseObject.\n'
p33694
sS'cpp_type'
p33695
S'bool'
p33696
sS'default'
p33697
S'1'
p33698
sS'name'
p33699
S'enable'
p33700
sS'required'
p33701
I00
sS'group_name'
p33702
S'Advanced'
p33703
sa(dp33704
S'description'
p33705
S'Time at which this output object stop operating\n'
p33706
sS'cpp_type'
p33707
S'double'
p33708
sS'default'
p33709
g3
sS'name'
p33710
S'end_time'
p33711
sS'required'
p33712
I00
sS'group_name'
p33713
S'Timing'
p33714
sa(dp33715
S'name'
p33716
S'execute_on'
p33717
sS'cpp_type'
p33718
S'MultiMooseEnum'
p33719
sS'default'
p33720
S'LINEAR NONLINEAR TIMESTEP_END'
p33721
sS'description'
p33722
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p33723
sS'required'
p33724
I00
sS'options'
p33725
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p33726
sS'group_name'
p33727
Nsa(dp33728
S'description'
p33729
S'The interval at which time steps are output to the solution file\n'
p33730
sS'cpp_type'
p33731
S'unsigned int'
p33732
sS'default'
p33733
S'1'
p33734
sS'name'
p33735
S'interval'
p33736
sS'required'
p33737
I00
sS'group_name'
p33738
S'Timing'
p33739
sa(dp33740
S'description'
p33741
S'Number of divisions applied to time step when outputting linear residuals\n'
p33742
sS'cpp_type'
p33743
S'double'
p33744
sS'default'
p33745
S'1000'
p33746
sS'name'
p33747
S'linear_residual_dt_divisor'
p33748
sS'required'
p33749
I00
sS'group_name'
p33750
S'PETSc'
p33751
sa(dp33752
S'description'
p33753
S'Specifies an end time to begin output on each linear residual evaluation\n'
p33754
sS'cpp_type'
p33755
S'double'
p33756
sS'default'
p33757
g3
sS'name'
p33758
S'linear_residual_end_time'
p33759
sS'required'
p33760
I00
sS'group_name'
p33761
S'PETSc'
p33762
sa(dp33763
S'description'
p33764
S'Specifies a start time to begin output on each linear residual evaluation\n'
p33765
sS'cpp_type'
p33766
S'double'
p33767
sS'default'
p33768
g3
sS'name'
p33769
S'linear_residual_start_time'
p33770
sS'required'
p33771
I00
sS'group_name'
p33772
S'PETSc'
p33773
sa(dp33774
S'description'
p33775
S'Specifies whether output occurs on each linear residual evaluation\n'
p33776
sS'cpp_type'
p33777
S'bool'
p33778
sS'default'
p33779
S'0'
p33780
sS'name'
p33781
S'linear_residuals'
p33782
sS'required'
p33783
I00
sS'group_name'
p33784
S'PETSc'
p33785
sa(dp33786
S'description'
p33787
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p33788
sS'cpp_type'
p33789
S'double'
p33790
sS'default'
p33791
S'1000'
p33792
sS'name'
p33793
S'nonlinear_residual_dt_divisor'
p33794
sS'required'
p33795
I00
sS'group_name'
p33796
S'PETSc'
p33797
sa(dp33798
S'description'
p33799
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p33800
sS'cpp_type'
p33801
S'double'
p33802
sS'default'
p33803
g3
sS'name'
p33804
S'nonlinear_residual_end_time'
p33805
sS'required'
p33806
I00
sS'group_name'
p33807
S'PETSc'
p33808
sa(dp33809
S'description'
p33810
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p33811
sS'cpp_type'
p33812
S'double'
p33813
sS'default'
p33814
g3
sS'name'
p33815
S'nonlinear_residual_start_time'
p33816
sS'required'
p33817
I00
sS'group_name'
p33818
S'PETSc'
p33819
sa(dp33820
S'description'
p33821
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p33822
sS'cpp_type'
p33823
S'bool'
p33824
sS'default'
p33825
S'0'
p33826
sS'name'
p33827
S'nonlinear_residuals'
p33828
sS'required'
p33829
I00
sS'group_name'
p33830
S'PETSc'
p33831
sa(dp33832
S'description'
p33833
S'The number of top residuals to print out (0 = no output)\n'
p33834
sS'cpp_type'
p33835
S'unsigned int'
p33836
sS'default'
p33837
S'0'
p33838
sS'name'
p33839
S'num_residuals'
p33840
sS'required'
p33841
I00
sS'group_name'
p33842
Nsa(dp33843
S'description'
p33844
S'Specifies whether output occurs on each linear residual evaluation\n'
p33845
sS'cpp_type'
p33846
S'bool'
p33847
sS'default'
p33848
S'0'
p33849
sS'name'
p33850
S'output_linear'
p33851
sS'required'
p33852
I00
sS'group_name'
p33853
Nsa(dp33854
S'description'
p33855
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p33856
sS'cpp_type'
p33857
S'bool'
p33858
sS'default'
p33859
S'0'
p33860
sS'name'
p33861
S'output_nonlinear'
p33862
sS'required'
p33863
I00
sS'group_name'
p33864
Nsa(dp33865
S'description'
p33866
S'Time at which this output object begins to operate\n'
p33867
sS'cpp_type'
p33868
S'double'
p33869
sS'default'
p33870
g3
sS'name'
p33871
S'start_time'
p33872
sS'required'
p33873
I00
sS'group_name'
p33874
S'Timing'
p33875
sa(dp33876
S'description'
p33877
S'Only export results at sync times\n'
p33878
sS'cpp_type'
p33879
S'bool'
p33880
sS'default'
p33881
S'0'
p33882
sS'name'
p33883
S'sync_only'
p33884
sS'required'
p33885
I00
sS'group_name'
p33886
S'Timing'
p33887
sa(dp33888
S'description'
p33889
S'Times at which the output and solution is forced to occur\n'
p33890
sS'cpp_type'
p33891
S'std::__1::vector<double, std::__1::allocator<double> >'
p33892
sS'default'
p33893
g3
sS'name'
p33894
S'sync_times'
p33895
sS'required'
p33896
I00
sS'group_name'
p33897
S'Timing'
p33898
sa(dp33899
S'description'
p33900
S'Time tolerance utilized checking start and end times\n'
p33901
sS'cpp_type'
p33902
S'double'
p33903
sS'default'
p33904
S'1e-14'
p33905
sS'name'
p33906
S'time_tolerance'
p33907
sS'required'
p33908
I00
sS'group_name'
p33909
S'Timing'
p33910
sa(dp33911
S'description'
p33912
g3
sS'cpp_type'
p33913
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33914
sS'default'
p33915
S'TopResidualDebugOutput'
p33916
sS'name'
p33917
S'type'
p33918
sS'required'
p33919
I00
sS'group_name'
p33920
Nsa(dp33921
S'description'
p33922
S'Enable/disable the use of the displaced mesh for outputting\n'
p33923
sS'cpp_type'
p33924
S'bool'
p33925
sS'default'
p33926
S'0'
p33927
sS'name'
p33928
S'use_displaced'
p33929
sS'required'
p33930
I00
sS'group_name'
p33931
NsasS'name'
p33932
S'/Outputs/TopResidualDebugOutput'
p33933
sa(dp33934
S'description'
p33935
g3
sS'subblocks'
p33936
NsS'parameters'
p33937
(lp33938
(dp33939
S'name'
p33940
S'additional_execute_on'
p33941
sS'cpp_type'
p33942
S'MultiMooseEnum'
p33943
sS'default'
p33944
g3
sS'description'
p33945
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p33946
sS'required'
p33947
I00
sS'options'
p33948
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p33949
sS'group_name'
p33950
Nsa(dp33951
S'description'
p33952
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33953
sS'cpp_type'
p33954
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p33955
sS'default'
p33956
g3
sS'name'
p33957
S'control_tags'
p33958
sS'required'
p33959
I00
sS'group_name'
p33960
S'Advanced'
p33961
sa(dp33962
S'description'
p33963
S'Set the enabled status of the MooseObject.\n'
p33964
sS'cpp_type'
p33965
S'bool'
p33966
sS'default'
p33967
S'1'
p33968
sS'name'
p33969
S'enable'
p33970
sS'required'
p33971
I00
sS'group_name'
p33972
S'Advanced'
p33973
sa(dp33974
S'description'
p33975
S'Time at which this output object stop operating\n'
p33976
sS'cpp_type'
p33977
S'double'
p33978
sS'default'
p33979
g3
sS'name'
p33980
S'end_time'
p33981
sS'required'
p33982
I00
sS'group_name'
p33983
S'Timing'
p33984
sa(dp33985
S'name'
p33986
S'execute_on'
p33987
sS'cpp_type'
p33988
S'MultiMooseEnum'
p33989
sS'default'
p33990
S'NONLINEAR'
p33991
sS'description'
p33992
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p33993
sS'required'
p33994
I00
sS'options'
p33995
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p33996
sS'group_name'
p33997
Nsa(dp33998
S'description'
p33999
S'The interval at which time steps are output to the solution file\n'
p34000
sS'cpp_type'
p34001
S'unsigned int'
p34002
sS'default'
p34003
S'1'
p34004
sS'name'
p34005
S'interval'
p34006
sS'required'
p34007
I00
sS'group_name'
p34008
S'Timing'
p34009
sa(dp34010
S'description'
p34011
S'Number of divisions applied to time step when outputting linear residuals\n'
p34012
sS'cpp_type'
p34013
S'double'
p34014
sS'default'
p34015
S'1000'
p34016
sS'name'
p34017
S'linear_residual_dt_divisor'
p34018
sS'required'
p34019
I00
sS'group_name'
p34020
S'PETSc'
p34021
sa(dp34022
S'description'
p34023
S'Specifies an end time to begin output on each linear residual evaluation\n'
p34024
sS'cpp_type'
p34025
S'double'
p34026
sS'default'
p34027
g3
sS'name'
p34028
S'linear_residual_end_time'
p34029
sS'required'
p34030
I00
sS'group_name'
p34031
S'PETSc'
p34032
sa(dp34033
S'description'
p34034
S'Specifies a start time to begin output on each linear residual evaluation\n'
p34035
sS'cpp_type'
p34036
S'double'
p34037
sS'default'
p34038
g3
sS'name'
p34039
S'linear_residual_start_time'
p34040
sS'required'
p34041
I00
sS'group_name'
p34042
S'PETSc'
p34043
sa(dp34044
S'description'
p34045
S'Specifies whether output occurs on each linear residual evaluation\n'
p34046
sS'cpp_type'
p34047
S'bool'
p34048
sS'default'
p34049
S'0'
p34050
sS'name'
p34051
S'linear_residuals'
p34052
sS'required'
p34053
I00
sS'group_name'
p34054
S'PETSc'
p34055
sa(dp34056
S'description'
p34057
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p34058
sS'cpp_type'
p34059
S'double'
p34060
sS'default'
p34061
S'1000'
p34062
sS'name'
p34063
S'nonlinear_residual_dt_divisor'
p34064
sS'required'
p34065
I00
sS'group_name'
p34066
S'PETSc'
p34067
sa(dp34068
S'description'
p34069
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p34070
sS'cpp_type'
p34071
S'double'
p34072
sS'default'
p34073
g3
sS'name'
p34074
S'nonlinear_residual_end_time'
p34075
sS'required'
p34076
I00
sS'group_name'
p34077
S'PETSc'
p34078
sa(dp34079
S'description'
p34080
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p34081
sS'cpp_type'
p34082
S'double'
p34083
sS'default'
p34084
g3
sS'name'
p34085
S'nonlinear_residual_start_time'
p34086
sS'required'
p34087
I00
sS'group_name'
p34088
S'PETSc'
p34089
sa(dp34090
S'description'
p34091
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p34092
sS'cpp_type'
p34093
S'bool'
p34094
sS'default'
p34095
S'0'
p34096
sS'name'
p34097
S'nonlinear_residuals'
p34098
sS'required'
p34099
I00
sS'group_name'
p34100
S'PETSc'
p34101
sa(dp34102
S'description'
p34103
S'Specifies whether output occurs on each linear residual evaluation\n'
p34104
sS'cpp_type'
p34105
S'bool'
p34106
sS'default'
p34107
S'0'
p34108
sS'name'
p34109
S'output_linear'
p34110
sS'required'
p34111
I00
sS'group_name'
p34112
Nsa(dp34113
S'description'
p34114
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p34115
sS'cpp_type'
p34116
S'bool'
p34117
sS'default'
p34118
S'0'
p34119
sS'name'
p34120
S'output_nonlinear'
p34121
sS'required'
p34122
I00
sS'group_name'
p34123
Nsa(dp34124
S'description'
p34125
S'Time at which this output object begins to operate\n'
p34126
sS'cpp_type'
p34127
S'double'
p34128
sS'default'
p34129
g3
sS'name'
p34130
S'start_time'
p34131
sS'required'
p34132
I00
sS'group_name'
p34133
S'Timing'
p34134
sa(dp34135
S'description'
p34136
S'Only export results at sync times\n'
p34137
sS'cpp_type'
p34138
S'bool'
p34139
sS'default'
p34140
S'0'
p34141
sS'name'
p34142
S'sync_only'
p34143
sS'required'
p34144
I00
sS'group_name'
p34145
S'Timing'
p34146
sa(dp34147
S'description'
p34148
S'Times at which the output and solution is forced to occur\n'
p34149
sS'cpp_type'
p34150
S'std::__1::vector<double, std::__1::allocator<double> >'
p34151
sS'default'
p34152
g3
sS'name'
p34153
S'sync_times'
p34154
sS'required'
p34155
I00
sS'group_name'
p34156
S'Timing'
p34157
sa(dp34158
S'description'
p34159
S'Time tolerance utilized checking start and end times\n'
p34160
sS'cpp_type'
p34161
S'double'
p34162
sS'default'
p34163
S'1e-14'
p34164
sS'name'
p34165
S'time_tolerance'
p34166
sS'required'
p34167
I00
sS'group_name'
p34168
S'Timing'
p34169
sa(dp34170
S'description'
p34171
g3
sS'cpp_type'
p34172
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34173
sS'default'
p34174
S'VariableResidualNormsDebugOutput'
p34175
sS'name'
p34176
S'type'
p34177
sS'required'
p34178
I00
sS'group_name'
p34179
Nsa(dp34180
S'description'
p34181
S'Enable/disable the use of the displaced mesh for outputting\n'
p34182
sS'cpp_type'
p34183
S'bool'
p34184
sS'default'
p34185
S'0'
p34186
sS'name'
p34187
S'use_displaced'
p34188
sS'required'
p34189
I00
sS'group_name'
p34190
NsasS'name'
p34191
S'/Outputs/VariableResidualNormsDebugOutput'
p34192
sa(dp34193
S'description'
p34194
S'Object for outputting data in the XDA/XDR format\n'
p34195
sS'subblocks'
p34196
NsS'parameters'
p34197
(lp34198
(dp34199
S'name'
p34200
S'additional_execute_on'
p34201
sS'cpp_type'
p34202
S'MultiMooseEnum'
p34203
sS'default'
p34204
g3
sS'description'
p34205
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p34206
sS'required'
p34207
I00
sS'options'
p34208
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p34209
sS'group_name'
p34210
Nsa(dp34211
S'description'
p34212
S'When true the date and time are appended to the output filename.\n'
p34213
sS'cpp_type'
p34214
S'bool'
p34215
sS'default'
p34216
S'0'
p34217
sS'name'
p34218
S'append_date'
p34219
sS'required'
p34220
I00
sS'group_name'
p34221
Nsa(dp34222
S'description'
p34223
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p34224
sS'cpp_type'
p34225
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34226
sS'default'
p34227
g3
sS'name'
p34228
S'append_date_format'
p34229
sS'required'
p34230
I00
sS'group_name'
p34231
Nsa(dp34232
S'description'
p34233
S"Append '_oversample' to the output file base\n"
p34234
sS'cpp_type'
p34235
S'bool'
p34236
sS'default'
p34237
S'0'
p34238
sS'name'
p34239
S'append_oversample'
p34240
sS'required'
p34241
I00
sS'group_name'
p34242
Nsa(dp34243
S'description'
p34244
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34245
sS'cpp_type'
p34246
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34247
sS'default'
p34248
g3
sS'name'
p34249
S'control_tags'
p34250
sS'required'
p34251
I00
sS'group_name'
p34252
S'Advanced'
p34253
sa(dp34254
S'description'
p34255
S'Set the enabled status of the MooseObject.\n'
p34256
sS'cpp_type'
p34257
S'bool'
p34258
sS'default'
p34259
S'1'
p34260
sS'name'
p34261
S'enable'
p34262
sS'required'
p34263
I00
sS'group_name'
p34264
S'Advanced'
p34265
sa(dp34266
S'description'
p34267
S'Time at which this output object stop operating\n'
p34268
sS'cpp_type'
p34269
S'double'
p34270
sS'default'
p34271
g3
sS'name'
p34272
S'end_time'
p34273
sS'required'
p34274
I00
sS'group_name'
p34275
S'Timing'
p34276
sa(dp34277
S'name'
p34278
S'execute_on'
p34279
sS'cpp_type'
p34280
S'MultiMooseEnum'
p34281
sS'default'
p34282
S'INITIAL TIMESTEP_END'
p34283
sS'description'
p34284
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p34285
sS'required'
p34286
I00
sS'options'
p34287
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p34288
sS'group_name'
p34289
Nsa(dp34290
S'description'
p34291
S'The name of the mesh file to read, for oversampling\n'
p34292
sS'cpp_type'
p34293
S'MeshFileName'
p34294
sS'default'
p34295
g3
sS'name'
p34296
S'file'
p34297
sS'required'
p34298
I00
sS'group_name'
p34299
S'Oversampling'
p34300
sa(dp34301
S'description'
p34302
S'The desired solution output name without an extension\n'
p34303
sS'cpp_type'
p34304
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34305
sS'default'
p34306
g3
sS'name'
p34307
S'file_base'
p34308
sS'required'
p34309
I00
sS'group_name'
p34310
Nsa(dp34311
S'description'
p34312
S'The interval at which time steps are output to the solution file\n'
p34313
sS'cpp_type'
p34314
S'unsigned int'
p34315
sS'default'
p34316
S'1'
p34317
sS'name'
p34318
S'interval'
p34319
sS'required'
p34320
I00
sS'group_name'
p34321
S'Timing'
p34322
sa(dp34323
S'description'
p34324
S'Number of divisions applied to time step when outputting linear residuals\n'
p34325
sS'cpp_type'
p34326
S'double'
p34327
sS'default'
p34328
S'1000'
p34329
sS'name'
p34330
S'linear_residual_dt_divisor'
p34331
sS'required'
p34332
I00
sS'group_name'
p34333
S'PETSc'
p34334
sa(dp34335
S'description'
p34336
S'Specifies an end time to begin output on each linear residual evaluation\n'
p34337
sS'cpp_type'
p34338
S'double'
p34339
sS'default'
p34340
g3
sS'name'
p34341
S'linear_residual_end_time'
p34342
sS'required'
p34343
I00
sS'group_name'
p34344
S'PETSc'
p34345
sa(dp34346
S'description'
p34347
S'Specifies a start time to begin output on each linear residual evaluation\n'
p34348
sS'cpp_type'
p34349
S'double'
p34350
sS'default'
p34351
g3
sS'name'
p34352
S'linear_residual_start_time'
p34353
sS'required'
p34354
I00
sS'group_name'
p34355
S'PETSc'
p34356
sa(dp34357
S'description'
p34358
S'Specifies whether output occurs on each linear residual evaluation\n'
p34359
sS'cpp_type'
p34360
S'bool'
p34361
sS'default'
p34362
S'0'
p34363
sS'name'
p34364
S'linear_residuals'
p34365
sS'required'
p34366
I00
sS'group_name'
p34367
S'PETSc'
p34368
sa(dp34369
S'description'
p34370
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p34371
sS'cpp_type'
p34372
S'double'
p34373
sS'default'
p34374
S'1000'
p34375
sS'name'
p34376
S'nonlinear_residual_dt_divisor'
p34377
sS'required'
p34378
I00
sS'group_name'
p34379
S'PETSc'
p34380
sa(dp34381
S'description'
p34382
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p34383
sS'cpp_type'
p34384
S'double'
p34385
sS'default'
p34386
g3
sS'name'
p34387
S'nonlinear_residual_end_time'
p34388
sS'required'
p34389
I00
sS'group_name'
p34390
S'PETSc'
p34391
sa(dp34392
S'description'
p34393
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p34394
sS'cpp_type'
p34395
S'double'
p34396
sS'default'
p34397
g3
sS'name'
p34398
S'nonlinear_residual_start_time'
p34399
sS'required'
p34400
I00
sS'group_name'
p34401
S'PETSc'
p34402
sa(dp34403
S'description'
p34404
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p34405
sS'cpp_type'
p34406
S'bool'
p34407
sS'default'
p34408
S'0'
p34409
sS'name'
p34410
S'nonlinear_residuals'
p34411
sS'required'
p34412
I00
sS'group_name'
p34413
S'PETSc'
p34414
sa(dp34415
S'description'
p34416
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p34417
sS'cpp_type'
p34418
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34419
sS'default'
p34420
g3
sS'name'
p34421
S'output_if_base_contains'
p34422
sS'required'
p34423
I00
sS'group_name'
p34424
S'Advanced'
p34425
sa(dp34426
S'description'
p34427
S'Specifies whether output occurs on each linear residual evaluation\n'
p34428
sS'cpp_type'
p34429
S'bool'
p34430
sS'default'
p34431
S'0'
p34432
sS'name'
p34433
S'output_linear'
p34434
sS'required'
p34435
I00
sS'group_name'
p34436
Nsa(dp34437
S'description'
p34438
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p34439
sS'cpp_type'
p34440
S'bool'
p34441
sS'default'
p34442
S'0'
p34443
sS'name'
p34444
S'output_nonlinear'
p34445
sS'required'
p34446
I00
sS'group_name'
p34447
Nsa(dp34448
S'description'
p34449
S'Set to true to enable oversampling\n'
p34450
sS'cpp_type'
p34451
S'bool'
p34452
sS'default'
p34453
S'0'
p34454
sS'name'
p34455
S'oversample'
p34456
sS'required'
p34457
I00
sS'group_name'
p34458
Nsa(dp34459
S'description'
p34460
S'The number of for extension suffix (e.g., out.e-s002)\n'
p34461
sS'cpp_type'
p34462
S'unsigned int'
p34463
sS'default'
p34464
S'4'
p34465
sS'name'
p34466
S'padding'
p34467
sS'required'
p34468
I00
sS'group_name'
p34469
S'Advanced'
p34470
sa(dp34471
S'description'
p34472
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p34473
sS'cpp_type'
p34474
S'libMesh::Point'
p34475
sS'default'
p34476
g3
sS'name'
p34477
S'position'
p34478
sS'required'
p34479
I00
sS'group_name'
p34480
S'Oversampling'
p34481
sa(dp34482
S'description'
p34483
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p34484
sS'cpp_type'
p34485
S'unsigned int'
p34486
sS'default'
p34487
S'0'
p34488
sS'name'
p34489
S'refinements'
p34490
sS'required'
p34491
I00
sS'group_name'
p34492
S'Oversampling'
p34493
sa(dp34494
S'description'
p34495
S'Time at which this output object begins to operate\n'
p34496
sS'cpp_type'
p34497
S'double'
p34498
sS'default'
p34499
g3
sS'name'
p34500
S'start_time'
p34501
sS'required'
p34502
I00
sS'group_name'
p34503
S'Timing'
p34504
sa(dp34505
S'description'
p34506
S'Only export results at sync times\n'
p34507
sS'cpp_type'
p34508
S'bool'
p34509
sS'default'
p34510
S'0'
p34511
sS'name'
p34512
S'sync_only'
p34513
sS'required'
p34514
I00
sS'group_name'
p34515
S'Timing'
p34516
sa(dp34517
S'description'
p34518
S'Times at which the output and solution is forced to occur\n'
p34519
sS'cpp_type'
p34520
S'std::__1::vector<double, std::__1::allocator<double> >'
p34521
sS'default'
p34522
g3
sS'name'
p34523
S'sync_times'
p34524
sS'required'
p34525
I00
sS'group_name'
p34526
S'Timing'
p34527
sa(dp34528
S'description'
p34529
S'Time tolerance utilized checking start and end times\n'
p34530
sS'cpp_type'
p34531
S'double'
p34532
sS'default'
p34533
S'1e-14'
p34534
sS'name'
p34535
S'time_tolerance'
p34536
sS'required'
p34537
I00
sS'group_name'
p34538
S'Timing'
p34539
sa(dp34540
S'description'
p34541
g3
sS'cpp_type'
p34542
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34543
sS'default'
p34544
S'XDA'
p34545
sS'name'
p34546
S'type'
p34547
sS'required'
p34548
I00
sS'group_name'
p34549
Nsa(dp34550
S'description'
p34551
S'Enable/disable the use of the displaced mesh for outputting\n'
p34552
sS'cpp_type'
p34553
S'bool'
p34554
sS'default'
p34555
S'0'
p34556
sS'name'
p34557
S'use_displaced'
p34558
sS'required'
p34559
I00
sS'group_name'
p34560
NsasS'name'
p34561
S'/Outputs/XDA'
p34562
sa(dp34563
S'description'
p34564
S'Object for outputting data in the XDA/XDR format\n'
p34565
sS'subblocks'
p34566
NsS'parameters'
p34567
(lp34568
(dp34569
S'name'
p34570
S'additional_execute_on'
p34571
sS'cpp_type'
p34572
S'MultiMooseEnum'
p34573
sS'default'
p34574
g3
sS'description'
p34575
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p34576
sS'required'
p34577
I00
sS'options'
p34578
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p34579
sS'group_name'
p34580
Nsa(dp34581
S'description'
p34582
S'When true the date and time are appended to the output filename.\n'
p34583
sS'cpp_type'
p34584
S'bool'
p34585
sS'default'
p34586
S'0'
p34587
sS'name'
p34588
S'append_date'
p34589
sS'required'
p34590
I00
sS'group_name'
p34591
Nsa(dp34592
S'description'
p34593
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p34594
sS'cpp_type'
p34595
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34596
sS'default'
p34597
g3
sS'name'
p34598
S'append_date_format'
p34599
sS'required'
p34600
I00
sS'group_name'
p34601
Nsa(dp34602
S'description'
p34603
S"Append '_oversample' to the output file base\n"
p34604
sS'cpp_type'
p34605
S'bool'
p34606
sS'default'
p34607
S'0'
p34608
sS'name'
p34609
S'append_oversample'
p34610
sS'required'
p34611
I00
sS'group_name'
p34612
Nsa(dp34613
S'description'
p34614
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34615
sS'cpp_type'
p34616
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34617
sS'default'
p34618
g3
sS'name'
p34619
S'control_tags'
p34620
sS'required'
p34621
I00
sS'group_name'
p34622
S'Advanced'
p34623
sa(dp34624
S'description'
p34625
S'Set the enabled status of the MooseObject.\n'
p34626
sS'cpp_type'
p34627
S'bool'
p34628
sS'default'
p34629
S'1'
p34630
sS'name'
p34631
S'enable'
p34632
sS'required'
p34633
I00
sS'group_name'
p34634
S'Advanced'
p34635
sa(dp34636
S'description'
p34637
S'Time at which this output object stop operating\n'
p34638
sS'cpp_type'
p34639
S'double'
p34640
sS'default'
p34641
g3
sS'name'
p34642
S'end_time'
p34643
sS'required'
p34644
I00
sS'group_name'
p34645
S'Timing'
p34646
sa(dp34647
S'name'
p34648
S'execute_on'
p34649
sS'cpp_type'
p34650
S'MultiMooseEnum'
p34651
sS'default'
p34652
S'INITIAL TIMESTEP_END'
p34653
sS'description'
p34654
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p34655
sS'required'
p34656
I00
sS'options'
p34657
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p34658
sS'group_name'
p34659
Nsa(dp34660
S'description'
p34661
S'The name of the mesh file to read, for oversampling\n'
p34662
sS'cpp_type'
p34663
S'MeshFileName'
p34664
sS'default'
p34665
g3
sS'name'
p34666
S'file'
p34667
sS'required'
p34668
I00
sS'group_name'
p34669
S'Oversampling'
p34670
sa(dp34671
S'description'
p34672
S'The desired solution output name without an extension\n'
p34673
sS'cpp_type'
p34674
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34675
sS'default'
p34676
g3
sS'name'
p34677
S'file_base'
p34678
sS'required'
p34679
I00
sS'group_name'
p34680
Nsa(dp34681
S'description'
p34682
S'The interval at which time steps are output to the solution file\n'
p34683
sS'cpp_type'
p34684
S'unsigned int'
p34685
sS'default'
p34686
S'1'
p34687
sS'name'
p34688
S'interval'
p34689
sS'required'
p34690
I00
sS'group_name'
p34691
S'Timing'
p34692
sa(dp34693
S'description'
p34694
S'Number of divisions applied to time step when outputting linear residuals\n'
p34695
sS'cpp_type'
p34696
S'double'
p34697
sS'default'
p34698
S'1000'
p34699
sS'name'
p34700
S'linear_residual_dt_divisor'
p34701
sS'required'
p34702
I00
sS'group_name'
p34703
S'PETSc'
p34704
sa(dp34705
S'description'
p34706
S'Specifies an end time to begin output on each linear residual evaluation\n'
p34707
sS'cpp_type'
p34708
S'double'
p34709
sS'default'
p34710
g3
sS'name'
p34711
S'linear_residual_end_time'
p34712
sS'required'
p34713
I00
sS'group_name'
p34714
S'PETSc'
p34715
sa(dp34716
S'description'
p34717
S'Specifies a start time to begin output on each linear residual evaluation\n'
p34718
sS'cpp_type'
p34719
S'double'
p34720
sS'default'
p34721
g3
sS'name'
p34722
S'linear_residual_start_time'
p34723
sS'required'
p34724
I00
sS'group_name'
p34725
S'PETSc'
p34726
sa(dp34727
S'description'
p34728
S'Specifies whether output occurs on each linear residual evaluation\n'
p34729
sS'cpp_type'
p34730
S'bool'
p34731
sS'default'
p34732
S'0'
p34733
sS'name'
p34734
S'linear_residuals'
p34735
sS'required'
p34736
I00
sS'group_name'
p34737
S'PETSc'
p34738
sa(dp34739
S'description'
p34740
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p34741
sS'cpp_type'
p34742
S'double'
p34743
sS'default'
p34744
S'1000'
p34745
sS'name'
p34746
S'nonlinear_residual_dt_divisor'
p34747
sS'required'
p34748
I00
sS'group_name'
p34749
S'PETSc'
p34750
sa(dp34751
S'description'
p34752
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p34753
sS'cpp_type'
p34754
S'double'
p34755
sS'default'
p34756
g3
sS'name'
p34757
S'nonlinear_residual_end_time'
p34758
sS'required'
p34759
I00
sS'group_name'
p34760
S'PETSc'
p34761
sa(dp34762
S'description'
p34763
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p34764
sS'cpp_type'
p34765
S'double'
p34766
sS'default'
p34767
g3
sS'name'
p34768
S'nonlinear_residual_start_time'
p34769
sS'required'
p34770
I00
sS'group_name'
p34771
S'PETSc'
p34772
sa(dp34773
S'description'
p34774
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p34775
sS'cpp_type'
p34776
S'bool'
p34777
sS'default'
p34778
S'0'
p34779
sS'name'
p34780
S'nonlinear_residuals'
p34781
sS'required'
p34782
I00
sS'group_name'
p34783
S'PETSc'
p34784
sa(dp34785
S'description'
p34786
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p34787
sS'cpp_type'
p34788
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34789
sS'default'
p34790
g3
sS'name'
p34791
S'output_if_base_contains'
p34792
sS'required'
p34793
I00
sS'group_name'
p34794
S'Advanced'
p34795
sa(dp34796
S'description'
p34797
S'Specifies whether output occurs on each linear residual evaluation\n'
p34798
sS'cpp_type'
p34799
S'bool'
p34800
sS'default'
p34801
S'0'
p34802
sS'name'
p34803
S'output_linear'
p34804
sS'required'
p34805
I00
sS'group_name'
p34806
Nsa(dp34807
S'description'
p34808
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p34809
sS'cpp_type'
p34810
S'bool'
p34811
sS'default'
p34812
S'0'
p34813
sS'name'
p34814
S'output_nonlinear'
p34815
sS'required'
p34816
I00
sS'group_name'
p34817
Nsa(dp34818
S'description'
p34819
S'Set to true to enable oversampling\n'
p34820
sS'cpp_type'
p34821
S'bool'
p34822
sS'default'
p34823
S'0'
p34824
sS'name'
p34825
S'oversample'
p34826
sS'required'
p34827
I00
sS'group_name'
p34828
Nsa(dp34829
S'description'
p34830
S'The number of for extension suffix (e.g., out.e-s002)\n'
p34831
sS'cpp_type'
p34832
S'unsigned int'
p34833
sS'default'
p34834
S'4'
p34835
sS'name'
p34836
S'padding'
p34837
sS'required'
p34838
I00
sS'group_name'
p34839
S'Advanced'
p34840
sa(dp34841
S'description'
p34842
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p34843
sS'cpp_type'
p34844
S'libMesh::Point'
p34845
sS'default'
p34846
g3
sS'name'
p34847
S'position'
p34848
sS'required'
p34849
I00
sS'group_name'
p34850
S'Oversampling'
p34851
sa(dp34852
S'description'
p34853
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p34854
sS'cpp_type'
p34855
S'unsigned int'
p34856
sS'default'
p34857
S'0'
p34858
sS'name'
p34859
S'refinements'
p34860
sS'required'
p34861
I00
sS'group_name'
p34862
S'Oversampling'
p34863
sa(dp34864
S'description'
p34865
S'Time at which this output object begins to operate\n'
p34866
sS'cpp_type'
p34867
S'double'
p34868
sS'default'
p34869
g3
sS'name'
p34870
S'start_time'
p34871
sS'required'
p34872
I00
sS'group_name'
p34873
S'Timing'
p34874
sa(dp34875
S'description'
p34876
S'Only export results at sync times\n'
p34877
sS'cpp_type'
p34878
S'bool'
p34879
sS'default'
p34880
S'0'
p34881
sS'name'
p34882
S'sync_only'
p34883
sS'required'
p34884
I00
sS'group_name'
p34885
S'Timing'
p34886
sa(dp34887
S'description'
p34888
S'Times at which the output and solution is forced to occur\n'
p34889
sS'cpp_type'
p34890
S'std::__1::vector<double, std::__1::allocator<double> >'
p34891
sS'default'
p34892
g3
sS'name'
p34893
S'sync_times'
p34894
sS'required'
p34895
I00
sS'group_name'
p34896
S'Timing'
p34897
sa(dp34898
S'description'
p34899
S'Time tolerance utilized checking start and end times\n'
p34900
sS'cpp_type'
p34901
S'double'
p34902
sS'default'
p34903
S'1e-14'
p34904
sS'name'
p34905
S'time_tolerance'
p34906
sS'required'
p34907
I00
sS'group_name'
p34908
S'Timing'
p34909
sa(dp34910
S'description'
p34911
g3
sS'cpp_type'
p34912
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34913
sS'default'
p34914
S'XDR'
p34915
sS'name'
p34916
S'type'
p34917
sS'required'
p34918
I00
sS'group_name'
p34919
Nsa(dp34920
S'description'
p34921
S'Enable/disable the use of the displaced mesh for outputting\n'
p34922
sS'cpp_type'
p34923
S'bool'
p34924
sS'default'
p34925
S'0'
p34926
sS'name'
p34927
S'use_displaced'
p34928
sS'required'
p34929
I00
sS'group_name'
p34930
NsasS'name'
p34931
S'/Outputs/XDR'
p34932
sasS'parameters'
p34933
(lp34934
(dp34935
S'description'
p34936
S'When true the date and time are appended to the output filename.\n'
p34937
sS'cpp_type'
p34938
S'bool'
p34939
sS'default'
p34940
S'0'
p34941
sS'name'
p34942
S'append_date'
p34943
sS'required'
p34944
I00
sS'group_name'
p34945
Nsa(dp34946
S'description'
p34947
S'The format of the date/time to append (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p34948
sS'cpp_type'
p34949
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34950
sS'default'
p34951
g3
sS'name'
p34952
S'append_date_format'
p34953
sS'required'
p34954
I00
sS'group_name'
p34955
Nsa(dp34956
S'description'
p34957
S'Create checkpoint files using the default options.\n'
p34958
sS'cpp_type'
p34959
S'bool'
p34960
sS'default'
p34961
S'0'
p34962
sS'name'
p34963
S'checkpoint'
p34964
sS'required'
p34965
I00
sS'group_name'
p34966
Nsa(dp34967
S'description'
p34968
S'Set to false to turn off all coloring in all outputs\n'
p34969
sS'cpp_type'
p34970
S'bool'
p34971
sS'default'
p34972
S'1'
p34973
sS'name'
p34974
S'color'
p34975
sS'required'
p34976
I00
sS'group_name'
p34977
Nsa(dp34978
S'description'
p34979
S'Output the results using the default settings for Console output\n'
p34980
sS'cpp_type'
p34981
S'bool'
p34982
sS'default'
p34983
S'1'
p34984
sS'name'
p34985
S'console'
p34986
sS'required'
p34987
I00
sS'group_name'
p34988
Nsa(dp34989
S'description'
p34990
S'Enable the screen output of Control systems.\n'
p34991
sS'cpp_type'
p34992
S'bool'
p34993
sS'default'
p34994
S'0'
p34995
sS'name'
p34996
S'controls'
p34997
sS'required'
p34998
I00
sS'group_name'
p34999
Nsa(dp35000
S'description'
p35001
S'Output the scalar variable and postprocessors to a *.csv file using the default CSV output.\n'
p35002
sS'cpp_type'
p35003
S'bool'
p35004
sS'default'
p35005
S'0'
p35006
sS'name'
p35007
S'csv'
p35008
sS'required'
p35009
I00
sS'group_name'
p35010
Nsa(dp35011
S'description'
p35012
S'Create the dof map .json output file\n'
p35013
sS'cpp_type'
p35014
S'bool'
p35015
sS'default'
p35016
S'0'
p35017
sS'name'
p35018
S'dofmap'
p35019
sS'required'
p35020
I00
sS'group_name'
p35021
Nsa(dp35022
S'name'
p35023
S'execute_on'
p35024
sS'cpp_type'
p35025
S'MultiMooseEnum'
p35026
sS'default'
p35027
S'INITIAL TIMESTEP_END'
p35028
sS'description'
p35029
S"Set to (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment (default: 'initial timestep_end')\n"
p35030
sS'required'
p35031
I00
sS'options'
p35032
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p35033
sS'group_name'
p35034
Nsa(dp35035
S'description'
p35036
S'Output the results using the default settings for Exodus output\n'
p35037
sS'cpp_type'
p35038
S'bool'
p35039
sS'default'
p35040
S'0'
p35041
sS'name'
p35042
S'exodus'
p35043
sS'required'
p35044
I00
sS'group_name'
p35045
Nsa(dp35046
S'description'
p35047
S'Common file base name to be utilized with all output objects\n'
p35048
sS'cpp_type'
p35049
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35050
sS'default'
p35051
g3
sS'name'
p35052
S'file_base'
p35053
sS'required'
p35054
I00
sS'group_name'
p35055
Nsa(dp35056
S'description'
p35057
S'Output the results using the default settings for GMV output\n'
p35058
sS'cpp_type'
p35059
S'bool'
p35060
sS'default'
p35061
S'0'
p35062
sS'name'
p35063
S'gmv'
p35064
sS'required'
p35065
I00
sS'group_name'
p35066
Nsa(dp35067
S'description'
p35068
S'Output the scalar and postprocessor results using the default settings for GNUPlot output\n'
p35069
sS'cpp_type'
p35070
S'bool'
p35071
sS'default'
p35072
S'0'
p35073
sS'name'
p35074
S'gnuplot'
p35075
sS'required'
p35076
I00
sS'group_name'
p35077
Nsa(dp35078
S'description'
p35079
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p35080
sS'cpp_type'
p35081
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p35082
sS'default'
p35083
g3
sS'name'
p35084
S'hide'
p35085
sS'required'
p35086
I00
sS'group_name'
p35087
Nsa(dp35088
S'description'
p35089
S'The interval at which timesteps are output to the solution file\n'
p35090
sS'cpp_type'
p35091
S'unsigned int'
p35092
sS'default'
p35093
S'1'
p35094
sS'name'
p35095
S'interval'
p35096
sS'required'
p35097
I00
sS'group_name'
p35098
Nsa(dp35099
S'description'
p35100
S'Output the results using the default settings for Nemesis output\n'
p35101
sS'cpp_type'
p35102
S'bool'
p35103
sS'default'
p35104
S'0'
p35105
sS'name'
p35106
S'nemesis'
p35107
sS'required'
p35108
I00
sS'group_name'
p35109
Nsa(dp35110
S'description'
p35111
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p35112
sS'cpp_type'
p35113
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35114
sS'default'
p35115
g3
sS'name'
p35116
S'output_if_base_contains'
p35117
sS'required'
p35118
I00
sS'group_name'
p35119
Nsa(dp35120
S'description'
p35121
S'Enable printing of linear residuals to the screen (Console)\n'
p35122
sS'cpp_type'
p35123
S'bool'
p35124
sS'default'
p35125
S'1'
p35126
sS'name'
p35127
S'print_linear_residuals'
p35128
sS'required'
p35129
I00
sS'group_name'
p35130
Nsa(dp35131
S'description'
p35132
S'When true, each time the mesh is changed the mesh information is printed\n'
p35133
sS'cpp_type'
p35134
S'bool'
p35135
sS'default'
p35136
S'0'
p35137
sS'name'
p35138
S'print_mesh_changed_info'
p35139
sS'required'
p35140
I00
sS'group_name'
p35141
Nsa(dp35142
S'description'
p35143
S'Enable printing of the performance log to the screen (Console)\n'
p35144
sS'cpp_type'
p35145
S'bool'
p35146
sS'default'
p35147
S'0'
p35148
sS'name'
p35149
S'print_perf_log'
p35150
sS'required'
p35151
I00
sS'group_name'
p35152
Nsa(dp35153
S'description'
p35154
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p35155
sS'cpp_type'
p35156
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p35157
sS'default'
p35158
g3
sS'name'
p35159
S'show'
p35160
sS'required'
p35161
I00
sS'group_name'
p35162
Nsa(dp35163
S'description'
p35164
S'Print a solution history file (.slh) using the default settings\n'
p35165
sS'cpp_type'
p35166
S'bool'
p35167
sS'default'
p35168
S'0'
p35169
sS'name'
p35170
S'solution_history'
p35171
sS'required'
p35172
I00
sS'group_name'
p35173
Nsa(dp35174
S'description'
p35175
S'Times at which the output and solution is forced to occur\n'
p35176
sS'cpp_type'
p35177
S'std::__1::vector<double, std::__1::allocator<double> >'
p35178
sS'default'
p35179
g3
sS'name'
p35180
S'sync_times'
p35181
sS'required'
p35182
I00
sS'group_name'
p35183
Nsa(dp35184
S'description'
p35185
S'Output the results using the default settings for Tecplot output\n'
p35186
sS'cpp_type'
p35187
S'bool'
p35188
sS'default'
p35189
S'0'
p35190
sS'name'
p35191
S'tecplot'
p35192
sS'required'
p35193
I00
sS'group_name'
p35194
Nsa(dp35195
S'description'
p35196
S'Output the results using the default settings for VTKOutput output\n'
p35197
sS'cpp_type'
p35198
S'bool'
p35199
sS'default'
p35200
S'0'
p35201
sS'name'
p35202
S'vtk'
p35203
sS'required'
p35204
I00
sS'group_name'
p35205
Nsa(dp35206
S'description'
p35207
S'Output the results using the default settings for XDA/XDR output (ascii)\n'
p35208
sS'cpp_type'
p35209
S'bool'
p35210
sS'default'
p35211
S'0'
p35212
sS'name'
p35213
S'xda'
p35214
sS'required'
p35215
I00
sS'group_name'
p35216
Nsa(dp35217
S'description'
p35218
S'Output the results using the default settings for XDA/XDR output (binary)\n'
p35219
sS'cpp_type'
p35220
S'bool'
p35221
sS'default'
p35222
S'0'
p35223
sS'name'
p35224
S'xdr'
p35225
sS'required'
p35226
I00
sS'group_name'
p35227
NsasS'name'
p35228
S'/Outputs'
p35229
sa(dp35230
S'description'
p35231
g3
sS'subblocks'
p35232
(lp35233
(dp35234
S'description'
p35235
g3
sS'subblocks'
p35236
NsS'parameters'
p35237
(lp35238
(dp35239
S'description'
p35240
S'A string representing the Moose Object that will be built by this Action\n'
p35241
sS'cpp_type'
p35242
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35243
sS'default'
p35244
g3
sS'name'
p35245
S'type'
p35246
sS'required'
p35247
I01
sS'group_name'
p35248
NsasS'name'
p35249
S'/Postprocessors/*'
p35250
sa(dp35251
S'description'
p35252
g3
sS'subblocks'
p35253
NsS'parameters'
p35254
(lp35255
(dp35256
S'description'
p35257
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35258
sS'cpp_type'
p35259
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p35260
sS'default'
p35261
g3
sS'name'
p35262
S'boundary'
p35263
sS'required'
p35264
I01
sS'group_name'
p35265
Nsa(dp35266
S'description'
p35267
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35268
sS'cpp_type'
p35269
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35270
sS'default'
p35271
g3
sS'name'
p35272
S'control_tags'
p35273
sS'required'
p35274
I00
sS'group_name'
p35275
S'Advanced'
p35276
sa(dp35277
S'description'
p35278
S'Set the enabled status of the MooseObject.\n'
p35279
sS'cpp_type'
p35280
S'bool'
p35281
sS'default'
p35282
S'1'
p35283
sS'name'
p35284
S'enable'
p35285
sS'required'
p35286
I00
sS'group_name'
p35287
S'Advanced'
p35288
sa(dp35289
S'name'
p35290
S'execute_on'
p35291
sS'cpp_type'
p35292
S'MultiMooseEnum'
p35293
sS'default'
p35294
S'TIMESTEP_END'
p35295
sS'description'
p35296
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35297
sS'required'
p35298
I00
sS'options'
p35299
S'none initial linear nonlinear timestep_end timestep_begin custom'
p35300
sS'group_name'
p35301
Nsa(dp35302
S'description'
p35303
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p35304
sS'cpp_type'
p35305
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p35306
sS'default'
p35307
g3
sS'name'
p35308
S'outputs'
p35309
sS'required'
p35310
I00
sS'group_name'
p35311
S'Advanced'
p35312
sa(dp35313
S'description'
p35314
g3
sS'cpp_type'
p35315
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35316
sS'default'
p35317
S'AreaPostprocessor'
p35318
sS'name'
p35319
S'type'
p35320
sS'required'
p35321
I00
sS'group_name'
p35322
Nsa(dp35323
S'description'
p35324
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35325
sS'cpp_type'
p35326
S'bool'
p35327
sS'default'
p35328
S'0'
p35329
sS'name'
p35330
S'use_displaced_mesh'
p35331
sS'required'
p35332
I00
sS'group_name'
p35333
S'Advanced'
p35334
sasS'name'
p35335
S'/Postprocessors/AreaPostprocessor'
p35336
sa(dp35337
S'description'
p35338
g3
sS'subblocks'
p35339
NsS'parameters'
p35340
(lp35341
(dp35342
S'description'
p35343
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35344
sS'cpp_type'
p35345
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p35346
sS'default'
p35347
g3
sS'name'
p35348
S'block'
p35349
sS'required'
p35350
I00
sS'group_name'
p35351
Nsa(dp35352
S'description'
p35353
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35354
sS'cpp_type'
p35355
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35356
sS'default'
p35357
g3
sS'name'
p35358
S'control_tags'
p35359
sS'required'
p35360
I00
sS'group_name'
p35361
S'Advanced'
p35362
sa(dp35363
S'description'
p35364
S'Set the enabled status of the MooseObject.\n'
p35365
sS'cpp_type'
p35366
S'bool'
p35367
sS'default'
p35368
S'1'
p35369
sS'name'
p35370
S'enable'
p35371
sS'required'
p35372
I00
sS'group_name'
p35373
S'Advanced'
p35374
sa(dp35375
S'name'
p35376
S'execute_on'
p35377
sS'cpp_type'
p35378
S'MultiMooseEnum'
p35379
sS'default'
p35380
S'TIMESTEP_END'
p35381
sS'description'
p35382
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35383
sS'required'
p35384
I00
sS'options'
p35385
S'none initial linear nonlinear timestep_end timestep_begin custom'
p35386
sS'group_name'
p35387
Nsa(dp35388
S'description'
p35389
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p35390
sS'cpp_type'
p35391
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p35392
sS'default'
p35393
g3
sS'name'
p35394
S'outputs'
p35395
sS'required'
p35396
I00
sS'group_name'
p35397
S'Advanced'
p35398
sa(dp35399
S'description'
p35400
S'The seed for the master random number generator\n'
p35401
sS'cpp_type'
p35402
S'unsigned int'
p35403
sS'default'
p35404
S'0'
p35405
sS'name'
p35406
S'seed'
p35407
sS'required'
p35408
I00
sS'group_name'
p35409
S'Advanced'
p35410
sa(dp35411
S'description'
p35412
g3
sS'cpp_type'
p35413
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35414
sS'default'
p35415
S'AverageElementSize'
p35416
sS'name'
p35417
S'type'
p35418
sS'required'
p35419
I00
sS'group_name'
p35420
Nsa(dp35421
S'description'
p35422
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35423
sS'cpp_type'
p35424
S'bool'
p35425
sS'default'
p35426
S'0'
p35427
sS'name'
p35428
S'use_displaced_mesh'
p35429
sS'required'
p35430
I00
sS'group_name'
p35431
S'Advanced'
p35432
sa(dp35433
S'description'
p35434
S'The name of the variable that this object operates on\n'
p35435
sS'cpp_type'
p35436
S'std::vector<VariableName>'
p35437
sS'default'
p35438
g3
sS'name'
p35439
S'variable'
p35440
sS'required'
p35441
I01
sS'group_name'
p35442
NsasS'name'
p35443
S'/Postprocessors/AverageElementSize'
p35444
sa(dp35445
S'description'
p35446
g3
sS'subblocks'
p35447
NsS'parameters'
p35448
(lp35449
(dp35450
S'description'
p35451
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35452
sS'cpp_type'
p35453
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p35454
sS'default'
p35455
g3
sS'name'
p35456
S'block'
p35457
sS'required'
p35458
I00
sS'group_name'
p35459
Nsa(dp35460
S'description'
p35461
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35462
sS'cpp_type'
p35463
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p35464
sS'default'
p35465
g3
sS'name'
p35466
S'boundary'
p35467
sS'required'
p35468
I00
sS'group_name'
p35469
Nsa(dp35470
S'description'
p35471
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35472
sS'cpp_type'
p35473
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35474
sS'default'
p35475
g3
sS'name'
p35476
S'control_tags'
p35477
sS'required'
p35478
I00
sS'group_name'
p35479
S'Advanced'
p35480
sa(dp35481
S'description'
p35482
S'Set the enabled status of the MooseObject.\n'
p35483
sS'cpp_type'
p35484
S'bool'
p35485
sS'default'
p35486
S'1'
p35487
sS'name'
p35488
S'enable'
p35489
sS'required'
p35490
I00
sS'group_name'
p35491
S'Advanced'
p35492
sa(dp35493
S'name'
p35494
S'execute_on'
p35495
sS'cpp_type'
p35496
S'MultiMooseEnum'
p35497
sS'default'
p35498
S'TIMESTEP_END'
p35499
sS'description'
p35500
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35501
sS'required'
p35502
I00
sS'options'
p35503
S'none initial linear nonlinear timestep_end timestep_begin custom'
p35504
sS'group_name'
p35505
Nsa(dp35506
S'description'
p35507
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p35508
sS'cpp_type'
p35509
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p35510
sS'default'
p35511
g3
sS'name'
p35512
S'outputs'
p35513
sS'required'
p35514
I00
sS'group_name'
p35515
S'Advanced'
p35516
sa(dp35517
S'description'
p35518
S'The seed for the master random number generator\n'
p35519
sS'cpp_type'
p35520
S'unsigned int'
p35521
sS'default'
p35522
S'0'
p35523
sS'name'
p35524
S'seed'
p35525
sS'required'
p35526
I00
sS'group_name'
p35527
S'Advanced'
p35528
sa(dp35529
S'description'
p35530
g3
sS'cpp_type'
p35531
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35532
sS'default'
p35533
S'AverageNodalVariableValue'
p35534
sS'name'
p35535
S'type'
p35536
sS'required'
p35537
I00
sS'group_name'
p35538
Nsa(dp35539
S'description'
p35540
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p35541
sS'cpp_type'
p35542
S'bool'
p35543
sS'default'
p35544
S'0'
p35545
sS'name'
p35546
S'unique_node_execute'
p35547
sS'required'
p35548
I00
sS'group_name'
p35549
Nsa(dp35550
S'description'
p35551
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35552
sS'cpp_type'
p35553
S'bool'
p35554
sS'default'
p35555
S'0'
p35556
sS'name'
p35557
S'use_displaced_mesh'
p35558
sS'required'
p35559
I00
sS'group_name'
p35560
S'Advanced'
p35561
sa(dp35562
S'description'
p35563
S'The name of the variable that this postprocessor operates on\n'
p35564
sS'cpp_type'
p35565
S'std::vector<VariableName>'
p35566
sS'default'
p35567
g3
sS'name'
p35568
S'variable'
p35569
sS'required'
p35570
I01
sS'group_name'
p35571
NsasS'name'
p35572
S'/Postprocessors/AverageNodalVariableValue'
p35573
sa(dp35574
S'description'
p35575
g3
sS'subblocks'
p35576
NsS'parameters'
p35577
(lp35578
(dp35579
S'description'
p35580
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35581
sS'cpp_type'
p35582
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p35583
sS'default'
p35584
g3
sS'name'
p35585
S'boundary'
p35586
sS'required'
p35587
I01
sS'group_name'
p35588
Nsa(dp35589
S'description'
p35590
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35591
sS'cpp_type'
p35592
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35593
sS'default'
p35594
g3
sS'name'
p35595
S'control_tags'
p35596
sS'required'
p35597
I00
sS'group_name'
p35598
S'Advanced'
p35599
sa(dp35600
S'description'
p35601
S'Set the enabled status of the MooseObject.\n'
p35602
sS'cpp_type'
p35603
S'bool'
p35604
sS'default'
p35605
S'1'
p35606
sS'name'
p35607
S'enable'
p35608
sS'required'
p35609
I00
sS'group_name'
p35610
S'Advanced'
p35611
sa(dp35612
S'name'
p35613
S'execute_on'
p35614
sS'cpp_type'
p35615
S'MultiMooseEnum'
p35616
sS'default'
p35617
S'TIMESTEP_END'
p35618
sS'description'
p35619
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35620
sS'required'
p35621
I00
sS'options'
p35622
S'none initial linear nonlinear timestep_end timestep_begin custom'
p35623
sS'group_name'
p35624
Nsa(dp35625
S'description'
p35626
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p35627
sS'cpp_type'
p35628
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p35629
sS'default'
p35630
g3
sS'name'
p35631
S'outputs'
p35632
sS'required'
p35633
I00
sS'group_name'
p35634
S'Advanced'
p35635
sa(dp35636
S'description'
p35637
g3
sS'cpp_type'
p35638
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35639
sS'default'
p35640
S'AxisymmetricCenterlineAverageValue'
p35641
sS'name'
p35642
S'type'
p35643
sS'required'
p35644
I00
sS'group_name'
p35645
Nsa(dp35646
S'description'
p35647
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35648
sS'cpp_type'
p35649
S'bool'
p35650
sS'default'
p35651
S'0'
p35652
sS'name'
p35653
S'use_displaced_mesh'
p35654
sS'required'
p35655
I00
sS'group_name'
p35656
S'Advanced'
p35657
sa(dp35658
S'description'
p35659
S'The name of the variable that this boundary condition applies to\n'
p35660
sS'cpp_type'
p35661
S'std::vector<VariableName>'
p35662
sS'default'
p35663
g3
sS'name'
p35664
S'variable'
p35665
sS'required'
p35666
I01
sS'group_name'
p35667
NsasS'name'
p35668
S'/Postprocessors/AxisymmetricCenterlineAverageValue'
p35669
sa(dp35670
S'description'
p35671
g3
sS'subblocks'
p35672
NsS'parameters'
p35673
(lp35674
(dp35675
S'description'
p35676
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35677
sS'cpp_type'
p35678
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35679
sS'default'
p35680
g3
sS'name'
p35681
S'control_tags'
p35682
sS'required'
p35683
I00
sS'group_name'
p35684
S'Advanced'
p35685
sa(dp35686
S'description'
p35687
S'Set the enabled status of the MooseObject.\n'
p35688
sS'cpp_type'
p35689
S'bool'
p35690
sS'default'
p35691
S'1'
p35692
sS'name'
p35693
S'enable'
p35694
sS'required'
p35695
I00
sS'group_name'
p35696
S'Advanced'
p35697
sa(dp35698
S'name'
p35699
S'execute_on'
p35700
sS'cpp_type'
p35701
S'MultiMooseEnum'
p35702
sS'default'
p35703
S'TIMESTEP_END'
p35704
sS'description'
p35705
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35706
sS'required'
p35707
I00
sS'options'
p35708
S'none initial linear nonlinear timestep_end timestep_begin custom'
p35709
sS'group_name'
p35710
Nsa(dp35711
S'description'
p35712
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p35713
sS'cpp_type'
p35714
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p35715
sS'default'
p35716
g3
sS'name'
p35717
S'outputs'
p35718
sS'required'
p35719
I00
sS'group_name'
p35720
S'Advanced'
p35721
sa(dp35722
S'description'
p35723
S'The name of the postprocessor\n'
p35724
sS'cpp_type'
p35725
S'PostprocessorName'
p35726
sS'default'
p35727
g3
sS'name'
p35728
S'postprocessor'
p35729
sS'required'
p35730
I01
sS'group_name'
p35731
Nsa(dp35732
S'description'
p35733
g3
sS'cpp_type'
p35734
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35735
sS'default'
p35736
S'CumulativeValuePostprocessor'
p35737
sS'name'
p35738
S'type'
p35739
sS'required'
p35740
I00
sS'group_name'
p35741
Nsa(dp35742
S'description'
p35743
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35744
sS'cpp_type'
p35745
S'bool'
p35746
sS'default'
p35747
S'0'
p35748
sS'name'
p35749
S'use_displaced_mesh'
p35750
sS'required'
p35751
I00
sS'group_name'
p35752
S'Advanced'
p35753
sasS'name'
p35754
S'/Postprocessors/CumulativeValuePostprocessor'
p35755
sa(dp35756
S'description'
p35757
g3
sS'subblocks'
p35758
NsS'parameters'
p35759
(lp35760
(dp35761
S'description'
p35762
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35763
sS'cpp_type'
p35764
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35765
sS'default'
p35766
g3
sS'name'
p35767
S'control_tags'
p35768
sS'required'
p35769
I00
sS'group_name'
p35770
S'Advanced'
p35771
sa(dp35772
S'description'
p35773
S'Set the enabled status of the MooseObject.\n'
p35774
sS'cpp_type'
p35775
S'bool'
p35776
sS'default'
p35777
S'1'
p35778
sS'name'
p35779
S'enable'
p35780
sS'required'
p35781
I00
sS'group_name'
p35782
S'Advanced'
p35783
sa(dp35784
S'name'
p35785
S'execute_on'
p35786
sS'cpp_type'
p35787
S'MultiMooseEnum'
p35788
sS'default'
p35789
S'TIMESTEP_END'
p35790
sS'description'
p35791
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35792
sS'required'
p35793
I00
sS'options'
p35794
S'none initial linear nonlinear timestep_end timestep_begin custom'
p35795
sS'group_name'
p35796
Nsa(dp35797
S'description'
p35798
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p35799
sS'cpp_type'
p35800
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p35801
sS'default'
p35802
g3
sS'name'
p35803
S'outputs'
p35804
sS'required'
p35805
I00
sS'group_name'
p35806
S'Advanced'
p35807
sa(dp35808
S'description'
p35809
g3
sS'cpp_type'
p35810
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35811
sS'default'
p35812
S'DifferencePostprocessor'
p35813
sS'name'
p35814
S'type'
p35815
sS'required'
p35816
I00
sS'group_name'
p35817
Nsa(dp35818
S'description'
p35819
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35820
sS'cpp_type'
p35821
S'bool'
p35822
sS'default'
p35823
S'0'
p35824
sS'name'
p35825
S'use_displaced_mesh'
p35826
sS'required'
p35827
I00
sS'group_name'
p35828
S'Advanced'
p35829
sa(dp35830
S'description'
p35831
S'First value\n'
p35832
sS'cpp_type'
p35833
S'PostprocessorName'
p35834
sS'default'
p35835
g3
sS'name'
p35836
S'value1'
p35837
sS'required'
p35838
I01
sS'group_name'
p35839
Nsa(dp35840
S'description'
p35841
S'Second value\n'
p35842
sS'cpp_type'
p35843
S'PostprocessorName'
p35844
sS'default'
p35845
g3
sS'name'
p35846
S'value2'
p35847
sS'required'
p35848
I01
sS'group_name'
p35849
NsasS'name'
p35850
S'/Postprocessors/DifferencePostprocessor'
p35851
sa(dp35852
S'description'
p35853
g3
sS'subblocks'
p35854
NsS'parameters'
p35855
(lp35856
(dp35857
S'description'
p35858
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35859
sS'cpp_type'
p35860
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p35861
sS'default'
p35862
g3
sS'name'
p35863
S'block'
p35864
sS'required'
p35865
I00
sS'group_name'
p35866
Nsa(dp35867
S'description'
p35868
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35869
sS'cpp_type'
p35870
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35871
sS'default'
p35872
g3
sS'name'
p35873
S'control_tags'
p35874
sS'required'
p35875
I00
sS'group_name'
p35876
S'Advanced'
p35877
sa(dp35878
S'description'
p35879
S'Set the enabled status of the MooseObject.\n'
p35880
sS'cpp_type'
p35881
S'bool'
p35882
sS'default'
p35883
S'1'
p35884
sS'name'
p35885
S'enable'
p35886
sS'required'
p35887
I00
sS'group_name'
p35888
S'Advanced'
p35889
sa(dp35890
S'name'
p35891
S'execute_on'
p35892
sS'cpp_type'
p35893
S'MultiMooseEnum'
p35894
sS'default'
p35895
S'TIMESTEP_END'
p35896
sS'description'
p35897
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35898
sS'required'
p35899
I00
sS'options'
p35900
S'none initial linear nonlinear timestep_end timestep_begin custom'
p35901
sS'group_name'
p35902
Nsa(dp35903
S'description'
p35904
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p35905
sS'cpp_type'
p35906
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p35907
sS'default'
p35908
g3
sS'name'
p35909
S'outputs'
p35910
sS'required'
p35911
I00
sS'group_name'
p35912
S'Advanced'
p35913
sa(dp35914
S'description'
p35915
S'The seed for the master random number generator\n'
p35916
sS'cpp_type'
p35917
S'unsigned int'
p35918
sS'default'
p35919
S'0'
p35920
sS'name'
p35921
S'seed'
p35922
sS'required'
p35923
I00
sS'group_name'
p35924
S'Advanced'
p35925
sa(dp35926
S'description'
p35927
g3
sS'cpp_type'
p35928
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35929
sS'default'
p35930
S'ElementAverageTimeDerivative'
p35931
sS'name'
p35932
S'type'
p35933
sS'required'
p35934
I00
sS'group_name'
p35935
Nsa(dp35936
S'description'
p35937
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35938
sS'cpp_type'
p35939
S'bool'
p35940
sS'default'
p35941
S'0'
p35942
sS'name'
p35943
S'use_displaced_mesh'
p35944
sS'required'
p35945
I00
sS'group_name'
p35946
S'Advanced'
p35947
sa(dp35948
S'description'
p35949
S'The name of the variable that this object operates on\n'
p35950
sS'cpp_type'
p35951
S'std::vector<VariableName>'
p35952
sS'default'
p35953
g3
sS'name'
p35954
S'variable'
p35955
sS'required'
p35956
I01
sS'group_name'
p35957
NsasS'name'
p35958
S'/Postprocessors/ElementAverageTimeDerivative'
p35959
sa(dp35960
S'description'
p35961
g3
sS'subblocks'
p35962
NsS'parameters'
p35963
(lp35964
(dp35965
S'description'
p35966
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35967
sS'cpp_type'
p35968
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p35969
sS'default'
p35970
g3
sS'name'
p35971
S'block'
p35972
sS'required'
p35973
I00
sS'group_name'
p35974
Nsa(dp35975
S'description'
p35976
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35977
sS'cpp_type'
p35978
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35979
sS'default'
p35980
g3
sS'name'
p35981
S'control_tags'
p35982
sS'required'
p35983
I00
sS'group_name'
p35984
S'Advanced'
p35985
sa(dp35986
S'description'
p35987
S'Set the enabled status of the MooseObject.\n'
p35988
sS'cpp_type'
p35989
S'bool'
p35990
sS'default'
p35991
S'1'
p35992
sS'name'
p35993
S'enable'
p35994
sS'required'
p35995
I00
sS'group_name'
p35996
S'Advanced'
p35997
sa(dp35998
S'name'
p35999
S'execute_on'
p36000
sS'cpp_type'
p36001
S'MultiMooseEnum'
p36002
sS'default'
p36003
S'TIMESTEP_END'
p36004
sS'description'
p36005
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36006
sS'required'
p36007
I00
sS'options'
p36008
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36009
sS'group_name'
p36010
Nsa(dp36011
S'description'
p36012
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36013
sS'cpp_type'
p36014
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36015
sS'default'
p36016
g3
sS'name'
p36017
S'outputs'
p36018
sS'required'
p36019
I00
sS'group_name'
p36020
S'Advanced'
p36021
sa(dp36022
S'description'
p36023
S'The seed for the master random number generator\n'
p36024
sS'cpp_type'
p36025
S'unsigned int'
p36026
sS'default'
p36027
S'0'
p36028
sS'name'
p36029
S'seed'
p36030
sS'required'
p36031
I00
sS'group_name'
p36032
S'Advanced'
p36033
sa(dp36034
S'description'
p36035
g3
sS'cpp_type'
p36036
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36037
sS'default'
p36038
S'ElementAverageValue'
p36039
sS'name'
p36040
S'type'
p36041
sS'required'
p36042
I00
sS'group_name'
p36043
Nsa(dp36044
S'description'
p36045
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36046
sS'cpp_type'
p36047
S'bool'
p36048
sS'default'
p36049
S'0'
p36050
sS'name'
p36051
S'use_displaced_mesh'
p36052
sS'required'
p36053
I00
sS'group_name'
p36054
S'Advanced'
p36055
sa(dp36056
S'description'
p36057
S'The name of the variable that this object operates on\n'
p36058
sS'cpp_type'
p36059
S'std::vector<VariableName>'
p36060
sS'default'
p36061
g3
sS'name'
p36062
S'variable'
p36063
sS'required'
p36064
I01
sS'group_name'
p36065
NsasS'name'
p36066
S'/Postprocessors/ElementAverageValue'
p36067
sa(dp36068
S'description'
p36069
g3
sS'subblocks'
p36070
NsS'parameters'
p36071
(lp36072
(dp36073
S'description'
p36074
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36075
sS'cpp_type'
p36076
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36077
sS'default'
p36078
g3
sS'name'
p36079
S'block'
p36080
sS'required'
p36081
I00
sS'group_name'
p36082
Nsa(dp36083
S'description'
p36084
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36085
sS'cpp_type'
p36086
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36087
sS'default'
p36088
g3
sS'name'
p36089
S'control_tags'
p36090
sS'required'
p36091
I00
sS'group_name'
p36092
S'Advanced'
p36093
sa(dp36094
S'description'
p36095
S'Set the enabled status of the MooseObject.\n'
p36096
sS'cpp_type'
p36097
S'bool'
p36098
sS'default'
p36099
S'1'
p36100
sS'name'
p36101
S'enable'
p36102
sS'required'
p36103
I00
sS'group_name'
p36104
S'Advanced'
p36105
sa(dp36106
S'name'
p36107
S'execute_on'
p36108
sS'cpp_type'
p36109
S'MultiMooseEnum'
p36110
sS'default'
p36111
S'TIMESTEP_END'
p36112
sS'description'
p36113
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36114
sS'required'
p36115
I00
sS'options'
p36116
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36117
sS'group_name'
p36118
Nsa(dp36119
S'description'
p36120
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36121
sS'cpp_type'
p36122
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36123
sS'default'
p36124
g3
sS'name'
p36125
S'outputs'
p36126
sS'required'
p36127
I00
sS'group_name'
p36128
S'Advanced'
p36129
sa(dp36130
S'description'
p36131
S'The seed for the master random number generator\n'
p36132
sS'cpp_type'
p36133
S'unsigned int'
p36134
sS'default'
p36135
S'0'
p36136
sS'name'
p36137
S'seed'
p36138
sS'required'
p36139
I00
sS'group_name'
p36140
S'Advanced'
p36141
sa(dp36142
S'description'
p36143
g3
sS'cpp_type'
p36144
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36145
sS'default'
p36146
S'ElementExtremeValue'
p36147
sS'name'
p36148
S'type'
p36149
sS'required'
p36150
I00
sS'group_name'
p36151
Nsa(dp36152
S'description'
p36153
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36154
sS'cpp_type'
p36155
S'bool'
p36156
sS'default'
p36157
S'0'
p36158
sS'name'
p36159
S'use_displaced_mesh'
p36160
sS'required'
p36161
I00
sS'group_name'
p36162
S'Advanced'
p36163
sa(dp36164
S'name'
p36165
S'value_type'
p36166
sS'cpp_type'
p36167
S'MooseEnum'
p36168
sS'default'
p36169
S'max'
p36170
sS'description'
p36171
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p36172
sS'required'
p36173
I00
sS'options'
p36174
S'max min'
p36175
sS'group_name'
p36176
Nsa(dp36177
S'description'
p36178
S'The name of the variable that this postprocessor operates on\n'
p36179
sS'cpp_type'
p36180
S'std::vector<VariableName>'
p36181
sS'default'
p36182
g3
sS'name'
p36183
S'variable'
p36184
sS'required'
p36185
I01
sS'group_name'
p36186
NsasS'name'
p36187
S'/Postprocessors/ElementExtremeValue'
p36188
sa(dp36189
S'description'
p36190
g3
sS'subblocks'
p36191
NsS'parameters'
p36192
(lp36193
(dp36194
S'description'
p36195
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36196
sS'cpp_type'
p36197
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36198
sS'default'
p36199
g3
sS'name'
p36200
S'block'
p36201
sS'required'
p36202
I00
sS'group_name'
p36203
Nsa(dp36204
S'description'
p36205
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36206
sS'cpp_type'
p36207
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36208
sS'default'
p36209
g3
sS'name'
p36210
S'control_tags'
p36211
sS'required'
p36212
I00
sS'group_name'
p36213
S'Advanced'
p36214
sa(dp36215
S'description'
p36216
S'Set the enabled status of the MooseObject.\n'
p36217
sS'cpp_type'
p36218
S'bool'
p36219
sS'default'
p36220
S'1'
p36221
sS'name'
p36222
S'enable'
p36223
sS'required'
p36224
I00
sS'group_name'
p36225
S'Advanced'
p36226
sa(dp36227
S'name'
p36228
S'execute_on'
p36229
sS'cpp_type'
p36230
S'MultiMooseEnum'
p36231
sS'default'
p36232
S'TIMESTEP_END'
p36233
sS'description'
p36234
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36235
sS'required'
p36236
I00
sS'options'
p36237
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36238
sS'group_name'
p36239
Nsa(dp36240
S'description'
p36241
S'The analytic solution to compare against\n'
p36242
sS'cpp_type'
p36243
S'FunctionName'
p36244
sS'default'
p36245
g3
sS'name'
p36246
S'function'
p36247
sS'required'
p36248
I01
sS'group_name'
p36249
Nsa(dp36250
S'description'
p36251
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36252
sS'cpp_type'
p36253
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36254
sS'default'
p36255
g3
sS'name'
p36256
S'outputs'
p36257
sS'required'
p36258
I00
sS'group_name'
p36259
S'Advanced'
p36260
sa(dp36261
S'description'
p36262
S'The exponent used in the norm.\n'
p36263
sS'cpp_type'
p36264
S'double'
p36265
sS'default'
p36266
S'2'
p36267
sS'name'
p36268
S'p'
p36269
sS'required'
p36270
I00
sS'group_name'
p36271
Nsa(dp36272
S'description'
p36273
S'The seed for the master random number generator\n'
p36274
sS'cpp_type'
p36275
S'unsigned int'
p36276
sS'default'
p36277
S'0'
p36278
sS'name'
p36279
S'seed'
p36280
sS'required'
p36281
I00
sS'group_name'
p36282
S'Advanced'
p36283
sa(dp36284
S'description'
p36285
g3
sS'cpp_type'
p36286
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36287
sS'default'
p36288
S'ElementH1Error'
p36289
sS'name'
p36290
S'type'
p36291
sS'required'
p36292
I00
sS'group_name'
p36293
Nsa(dp36294
S'description'
p36295
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36296
sS'cpp_type'
p36297
S'bool'
p36298
sS'default'
p36299
S'0'
p36300
sS'name'
p36301
S'use_displaced_mesh'
p36302
sS'required'
p36303
I00
sS'group_name'
p36304
S'Advanced'
p36305
sa(dp36306
S'description'
p36307
S'The name of the variable that this object operates on\n'
p36308
sS'cpp_type'
p36309
S'std::vector<VariableName>'
p36310
sS'default'
p36311
g3
sS'name'
p36312
S'variable'
p36313
sS'required'
p36314
I01
sS'group_name'
p36315
NsasS'name'
p36316
S'/Postprocessors/ElementH1Error'
p36317
sa(dp36318
S'description'
p36319
g3
sS'subblocks'
p36320
NsS'parameters'
p36321
(lp36322
(dp36323
S'description'
p36324
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36325
sS'cpp_type'
p36326
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36327
sS'default'
p36328
g3
sS'name'
p36329
S'block'
p36330
sS'required'
p36331
I00
sS'group_name'
p36332
Nsa(dp36333
S'description'
p36334
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36335
sS'cpp_type'
p36336
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36337
sS'default'
p36338
g3
sS'name'
p36339
S'control_tags'
p36340
sS'required'
p36341
I00
sS'group_name'
p36342
S'Advanced'
p36343
sa(dp36344
S'description'
p36345
S'Set the enabled status of the MooseObject.\n'
p36346
sS'cpp_type'
p36347
S'bool'
p36348
sS'default'
p36349
S'1'
p36350
sS'name'
p36351
S'enable'
p36352
sS'required'
p36353
I00
sS'group_name'
p36354
S'Advanced'
p36355
sa(dp36356
S'name'
p36357
S'execute_on'
p36358
sS'cpp_type'
p36359
S'MultiMooseEnum'
p36360
sS'default'
p36361
S'TIMESTEP_END'
p36362
sS'description'
p36363
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36364
sS'required'
p36365
I00
sS'options'
p36366
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36367
sS'group_name'
p36368
Nsa(dp36369
S'description'
p36370
S'The analytic solution to compare against\n'
p36371
sS'cpp_type'
p36372
S'FunctionName'
p36373
sS'default'
p36374
g3
sS'name'
p36375
S'function'
p36376
sS'required'
p36377
I01
sS'group_name'
p36378
Nsa(dp36379
S'description'
p36380
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36381
sS'cpp_type'
p36382
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36383
sS'default'
p36384
g3
sS'name'
p36385
S'outputs'
p36386
sS'required'
p36387
I00
sS'group_name'
p36388
S'Advanced'
p36389
sa(dp36390
S'description'
p36391
S'The seed for the master random number generator\n'
p36392
sS'cpp_type'
p36393
S'unsigned int'
p36394
sS'default'
p36395
S'0'
p36396
sS'name'
p36397
S'seed'
p36398
sS'required'
p36399
I00
sS'group_name'
p36400
S'Advanced'
p36401
sa(dp36402
S'description'
p36403
g3
sS'cpp_type'
p36404
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36405
sS'default'
p36406
S'ElementH1SemiError'
p36407
sS'name'
p36408
S'type'
p36409
sS'required'
p36410
I00
sS'group_name'
p36411
Nsa(dp36412
S'description'
p36413
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36414
sS'cpp_type'
p36415
S'bool'
p36416
sS'default'
p36417
S'0'
p36418
sS'name'
p36419
S'use_displaced_mesh'
p36420
sS'required'
p36421
I00
sS'group_name'
p36422
S'Advanced'
p36423
sa(dp36424
S'description'
p36425
S'The name of the variable that this object operates on\n'
p36426
sS'cpp_type'
p36427
S'std::vector<VariableName>'
p36428
sS'default'
p36429
g3
sS'name'
p36430
S'variable'
p36431
sS'required'
p36432
I01
sS'group_name'
p36433
NsasS'name'
p36434
S'/Postprocessors/ElementH1SemiError'
p36435
sa(dp36436
S'description'
p36437
g3
sS'subblocks'
p36438
NsS'parameters'
p36439
(lp36440
(dp36441
S'description'
p36442
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36443
sS'cpp_type'
p36444
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36445
sS'default'
p36446
g3
sS'name'
p36447
S'block'
p36448
sS'required'
p36449
I00
sS'group_name'
p36450
Nsa(dp36451
S'description'
p36452
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36453
sS'cpp_type'
p36454
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36455
sS'default'
p36456
g3
sS'name'
p36457
S'control_tags'
p36458
sS'required'
p36459
I00
sS'group_name'
p36460
S'Advanced'
p36461
sa(dp36462
S'description'
p36463
S'Set the enabled status of the MooseObject.\n'
p36464
sS'cpp_type'
p36465
S'bool'
p36466
sS'default'
p36467
S'1'
p36468
sS'name'
p36469
S'enable'
p36470
sS'required'
p36471
I00
sS'group_name'
p36472
S'Advanced'
p36473
sa(dp36474
S'name'
p36475
S'execute_on'
p36476
sS'cpp_type'
p36477
S'MultiMooseEnum'
p36478
sS'default'
p36479
S'TIMESTEP_END'
p36480
sS'description'
p36481
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36482
sS'required'
p36483
I00
sS'options'
p36484
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36485
sS'group_name'
p36486
Nsa(dp36487
S'description'
p36488
S'The name of the material property\n'
p36489
sS'cpp_type'
p36490
S'MaterialPropertyName'
p36491
sS'default'
p36492
g3
sS'name'
p36493
S'mat_prop'
p36494
sS'required'
p36495
I01
sS'group_name'
p36496
Nsa(dp36497
S'description'
p36498
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36499
sS'cpp_type'
p36500
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36501
sS'default'
p36502
g3
sS'name'
p36503
S'outputs'
p36504
sS'required'
p36505
I00
sS'group_name'
p36506
S'Advanced'
p36507
sa(dp36508
S'description'
p36509
S'The seed for the master random number generator\n'
p36510
sS'cpp_type'
p36511
S'unsigned int'
p36512
sS'default'
p36513
S'0'
p36514
sS'name'
p36515
S'seed'
p36516
sS'required'
p36517
I00
sS'group_name'
p36518
S'Advanced'
p36519
sa(dp36520
S'description'
p36521
g3
sS'cpp_type'
p36522
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36523
sS'default'
p36524
S'ElementIntegralMaterialProperty'
p36525
sS'name'
p36526
S'type'
p36527
sS'required'
p36528
I00
sS'group_name'
p36529
Nsa(dp36530
S'description'
p36531
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36532
sS'cpp_type'
p36533
S'bool'
p36534
sS'default'
p36535
S'0'
p36536
sS'name'
p36537
S'use_displaced_mesh'
p36538
sS'required'
p36539
I00
sS'group_name'
p36540
S'Advanced'
p36541
sasS'name'
p36542
S'/Postprocessors/ElementIntegralMaterialProperty'
p36543
sa(dp36544
S'description'
p36545
g3
sS'subblocks'
p36546
NsS'parameters'
p36547
(lp36548
(dp36549
S'description'
p36550
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36551
sS'cpp_type'
p36552
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36553
sS'default'
p36554
g3
sS'name'
p36555
S'block'
p36556
sS'required'
p36557
I00
sS'group_name'
p36558
Nsa(dp36559
S'description'
p36560
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36561
sS'cpp_type'
p36562
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36563
sS'default'
p36564
g3
sS'name'
p36565
S'control_tags'
p36566
sS'required'
p36567
I00
sS'group_name'
p36568
S'Advanced'
p36569
sa(dp36570
S'description'
p36571
S'Set the enabled status of the MooseObject.\n'
p36572
sS'cpp_type'
p36573
S'bool'
p36574
sS'default'
p36575
S'1'
p36576
sS'name'
p36577
S'enable'
p36578
sS'required'
p36579
I00
sS'group_name'
p36580
S'Advanced'
p36581
sa(dp36582
S'name'
p36583
S'execute_on'
p36584
sS'cpp_type'
p36585
S'MultiMooseEnum'
p36586
sS'default'
p36587
S'TIMESTEP_END'
p36588
sS'description'
p36589
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36590
sS'required'
p36591
I00
sS'options'
p36592
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36593
sS'group_name'
p36594
Nsa(dp36595
S'description'
p36596
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36597
sS'cpp_type'
p36598
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36599
sS'default'
p36600
g3
sS'name'
p36601
S'outputs'
p36602
sS'required'
p36603
I00
sS'group_name'
p36604
S'Advanced'
p36605
sa(dp36606
S'description'
p36607
S'The seed for the master random number generator\n'
p36608
sS'cpp_type'
p36609
S'unsigned int'
p36610
sS'default'
p36611
S'0'
p36612
sS'name'
p36613
S'seed'
p36614
sS'required'
p36615
I00
sS'group_name'
p36616
S'Advanced'
p36617
sa(dp36618
S'description'
p36619
g3
sS'cpp_type'
p36620
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36621
sS'default'
p36622
S'ElementIntegralVariablePostprocessor'
p36623
sS'name'
p36624
S'type'
p36625
sS'required'
p36626
I00
sS'group_name'
p36627
Nsa(dp36628
S'description'
p36629
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36630
sS'cpp_type'
p36631
S'bool'
p36632
sS'default'
p36633
S'0'
p36634
sS'name'
p36635
S'use_displaced_mesh'
p36636
sS'required'
p36637
I00
sS'group_name'
p36638
S'Advanced'
p36639
sa(dp36640
S'description'
p36641
S'The name of the variable that this object operates on\n'
p36642
sS'cpp_type'
p36643
S'std::vector<VariableName>'
p36644
sS'default'
p36645
g3
sS'name'
p36646
S'variable'
p36647
sS'required'
p36648
I01
sS'group_name'
p36649
NsasS'name'
p36650
S'/Postprocessors/ElementIntegralVariablePostprocessor'
p36651
sa(dp36652
S'description'
p36653
g3
sS'subblocks'
p36654
NsS'parameters'
p36655
(lp36656
(dp36657
S'description'
p36658
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36659
sS'cpp_type'
p36660
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36661
sS'default'
p36662
g3
sS'name'
p36663
S'block'
p36664
sS'required'
p36665
I00
sS'group_name'
p36666
Nsa(dp36667
S'description'
p36668
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36669
sS'cpp_type'
p36670
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36671
sS'default'
p36672
g3
sS'name'
p36673
S'control_tags'
p36674
sS'required'
p36675
I00
sS'group_name'
p36676
S'Advanced'
p36677
sa(dp36678
S'description'
p36679
S'Set the enabled status of the MooseObject.\n'
p36680
sS'cpp_type'
p36681
S'bool'
p36682
sS'default'
p36683
S'1'
p36684
sS'name'
p36685
S'enable'
p36686
sS'required'
p36687
I00
sS'group_name'
p36688
S'Advanced'
p36689
sa(dp36690
S'name'
p36691
S'execute_on'
p36692
sS'cpp_type'
p36693
S'MultiMooseEnum'
p36694
sS'default'
p36695
S'TIMESTEP_END'
p36696
sS'description'
p36697
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36698
sS'required'
p36699
I00
sS'options'
p36700
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36701
sS'group_name'
p36702
Nsa(dp36703
S'description'
p36704
S'The variable to compare to\n'
p36705
sS'cpp_type'
p36706
S'std::vector<VariableName>'
p36707
sS'default'
p36708
g3
sS'name'
p36709
S'other_variable'
p36710
sS'required'
p36711
I01
sS'group_name'
p36712
Nsa(dp36713
S'description'
p36714
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36715
sS'cpp_type'
p36716
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36717
sS'default'
p36718
g3
sS'name'
p36719
S'outputs'
p36720
sS'required'
p36721
I00
sS'group_name'
p36722
S'Advanced'
p36723
sa(dp36724
S'description'
p36725
S'The seed for the master random number generator\n'
p36726
sS'cpp_type'
p36727
S'unsigned int'
p36728
sS'default'
p36729
S'0'
p36730
sS'name'
p36731
S'seed'
p36732
sS'required'
p36733
I00
sS'group_name'
p36734
S'Advanced'
p36735
sa(dp36736
S'description'
p36737
g3
sS'cpp_type'
p36738
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36739
sS'default'
p36740
S'ElementL2Difference'
p36741
sS'name'
p36742
S'type'
p36743
sS'required'
p36744
I00
sS'group_name'
p36745
Nsa(dp36746
S'description'
p36747
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36748
sS'cpp_type'
p36749
S'bool'
p36750
sS'default'
p36751
S'0'
p36752
sS'name'
p36753
S'use_displaced_mesh'
p36754
sS'required'
p36755
I00
sS'group_name'
p36756
S'Advanced'
p36757
sa(dp36758
S'description'
p36759
S'The name of the variable that this object operates on\n'
p36760
sS'cpp_type'
p36761
S'std::vector<VariableName>'
p36762
sS'default'
p36763
g3
sS'name'
p36764
S'variable'
p36765
sS'required'
p36766
I01
sS'group_name'
p36767
NsasS'name'
p36768
S'/Postprocessors/ElementL2Difference'
p36769
sa(dp36770
S'description'
p36771
g3
sS'subblocks'
p36772
NsS'parameters'
p36773
(lp36774
(dp36775
S'description'
p36776
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36777
sS'cpp_type'
p36778
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36779
sS'default'
p36780
g3
sS'name'
p36781
S'block'
p36782
sS'required'
p36783
I00
sS'group_name'
p36784
Nsa(dp36785
S'description'
p36786
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36787
sS'cpp_type'
p36788
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36789
sS'default'
p36790
g3
sS'name'
p36791
S'control_tags'
p36792
sS'required'
p36793
I00
sS'group_name'
p36794
S'Advanced'
p36795
sa(dp36796
S'description'
p36797
S'Set the enabled status of the MooseObject.\n'
p36798
sS'cpp_type'
p36799
S'bool'
p36800
sS'default'
p36801
S'1'
p36802
sS'name'
p36803
S'enable'
p36804
sS'required'
p36805
I00
sS'group_name'
p36806
S'Advanced'
p36807
sa(dp36808
S'name'
p36809
S'execute_on'
p36810
sS'cpp_type'
p36811
S'MultiMooseEnum'
p36812
sS'default'
p36813
S'TIMESTEP_END'
p36814
sS'description'
p36815
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36816
sS'required'
p36817
I00
sS'options'
p36818
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36819
sS'group_name'
p36820
Nsa(dp36821
S'description'
p36822
S'The analytic solution to compare against\n'
p36823
sS'cpp_type'
p36824
S'FunctionName'
p36825
sS'default'
p36826
g3
sS'name'
p36827
S'function'
p36828
sS'required'
p36829
I01
sS'group_name'
p36830
Nsa(dp36831
S'description'
p36832
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36833
sS'cpp_type'
p36834
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36835
sS'default'
p36836
g3
sS'name'
p36837
S'outputs'
p36838
sS'required'
p36839
I00
sS'group_name'
p36840
S'Advanced'
p36841
sa(dp36842
S'description'
p36843
S'The seed for the master random number generator\n'
p36844
sS'cpp_type'
p36845
S'unsigned int'
p36846
sS'default'
p36847
S'0'
p36848
sS'name'
p36849
S'seed'
p36850
sS'required'
p36851
I00
sS'group_name'
p36852
S'Advanced'
p36853
sa(dp36854
S'description'
p36855
g3
sS'cpp_type'
p36856
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36857
sS'default'
p36858
S'ElementL2Error'
p36859
sS'name'
p36860
S'type'
p36861
sS'required'
p36862
I00
sS'group_name'
p36863
Nsa(dp36864
S'description'
p36865
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36866
sS'cpp_type'
p36867
S'bool'
p36868
sS'default'
p36869
S'0'
p36870
sS'name'
p36871
S'use_displaced_mesh'
p36872
sS'required'
p36873
I00
sS'group_name'
p36874
S'Advanced'
p36875
sa(dp36876
S'description'
p36877
S'The name of the variable that this object operates on\n'
p36878
sS'cpp_type'
p36879
S'std::vector<VariableName>'
p36880
sS'default'
p36881
g3
sS'name'
p36882
S'variable'
p36883
sS'required'
p36884
I01
sS'group_name'
p36885
NsasS'name'
p36886
S'/Postprocessors/ElementL2Error'
p36887
sa(dp36888
S'description'
p36889
g3
sS'subblocks'
p36890
NsS'parameters'
p36891
(lp36892
(dp36893
S'description'
p36894
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36895
sS'cpp_type'
p36896
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36897
sS'default'
p36898
g3
sS'name'
p36899
S'block'
p36900
sS'required'
p36901
I00
sS'group_name'
p36902
Nsa(dp36903
S'description'
p36904
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36905
sS'cpp_type'
p36906
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36907
sS'default'
p36908
g3
sS'name'
p36909
S'control_tags'
p36910
sS'required'
p36911
I00
sS'group_name'
p36912
S'Advanced'
p36913
sa(dp36914
S'description'
p36915
S'Set the enabled status of the MooseObject.\n'
p36916
sS'cpp_type'
p36917
S'bool'
p36918
sS'default'
p36919
S'1'
p36920
sS'name'
p36921
S'enable'
p36922
sS'required'
p36923
I00
sS'group_name'
p36924
S'Advanced'
p36925
sa(dp36926
S'name'
p36927
S'execute_on'
p36928
sS'cpp_type'
p36929
S'MultiMooseEnum'
p36930
sS'default'
p36931
S'TIMESTEP_END'
p36932
sS'description'
p36933
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36934
sS'required'
p36935
I00
sS'options'
p36936
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36937
sS'group_name'
p36938
Nsa(dp36939
S'description'
p36940
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36941
sS'cpp_type'
p36942
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36943
sS'default'
p36944
g3
sS'name'
p36945
S'outputs'
p36946
sS'required'
p36947
I00
sS'group_name'
p36948
S'Advanced'
p36949
sa(dp36950
S'description'
p36951
S'The seed for the master random number generator\n'
p36952
sS'cpp_type'
p36953
S'unsigned int'
p36954
sS'default'
p36955
S'0'
p36956
sS'name'
p36957
S'seed'
p36958
sS'required'
p36959
I00
sS'group_name'
p36960
S'Advanced'
p36961
sa(dp36962
S'description'
p36963
g3
sS'cpp_type'
p36964
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36965
sS'default'
p36966
S'ElementL2Norm'
p36967
sS'name'
p36968
S'type'
p36969
sS'required'
p36970
I00
sS'group_name'
p36971
Nsa(dp36972
S'description'
p36973
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36974
sS'cpp_type'
p36975
S'bool'
p36976
sS'default'
p36977
S'0'
p36978
sS'name'
p36979
S'use_displaced_mesh'
p36980
sS'required'
p36981
I00
sS'group_name'
p36982
S'Advanced'
p36983
sa(dp36984
S'description'
p36985
S'The name of the variable that this object operates on\n'
p36986
sS'cpp_type'
p36987
S'std::vector<VariableName>'
p36988
sS'default'
p36989
g3
sS'name'
p36990
S'variable'
p36991
sS'required'
p36992
I01
sS'group_name'
p36993
NsasS'name'
p36994
S'/Postprocessors/ElementL2Norm'
p36995
sa(dp36996
S'description'
p36997
g3
sS'subblocks'
p36998
NsS'parameters'
p36999
(lp37000
(dp37001
S'description'
p37002
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37003
sS'cpp_type'
p37004
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p37005
sS'default'
p37006
g3
sS'name'
p37007
S'block'
p37008
sS'required'
p37009
I00
sS'group_name'
p37010
Nsa(dp37011
S'description'
p37012
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37013
sS'cpp_type'
p37014
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37015
sS'default'
p37016
g3
sS'name'
p37017
S'control_tags'
p37018
sS'required'
p37019
I00
sS'group_name'
p37020
S'Advanced'
p37021
sa(dp37022
S'description'
p37023
S'Set the enabled status of the MooseObject.\n'
p37024
sS'cpp_type'
p37025
S'bool'
p37026
sS'default'
p37027
S'1'
p37028
sS'name'
p37029
S'enable'
p37030
sS'required'
p37031
I00
sS'group_name'
p37032
S'Advanced'
p37033
sa(dp37034
S'name'
p37035
S'execute_on'
p37036
sS'cpp_type'
p37037
S'MultiMooseEnum'
p37038
sS'default'
p37039
S'TIMESTEP_END'
p37040
sS'description'
p37041
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37042
sS'required'
p37043
I00
sS'options'
p37044
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37045
sS'group_name'
p37046
Nsa(dp37047
S'description'
p37048
S'The analytic solution to compare against\n'
p37049
sS'cpp_type'
p37050
S'FunctionName'
p37051
sS'default'
p37052
g3
sS'name'
p37053
S'function_x'
p37054
sS'required'
p37055
I01
sS'group_name'
p37056
Nsa(dp37057
S'description'
p37058
S'The analytic solution to compare against\n'
p37059
sS'cpp_type'
p37060
S'FunctionName'
p37061
sS'default'
p37062
S'0'
p37063
sS'name'
p37064
S'function_y'
p37065
sS'required'
p37066
I00
sS'group_name'
p37067
Nsa(dp37068
S'description'
p37069
S'The analytic solution to compare against\n'
p37070
sS'cpp_type'
p37071
S'FunctionName'
p37072
sS'default'
p37073
S'0'
p37074
sS'name'
p37075
S'function_z'
p37076
sS'required'
p37077
I00
sS'group_name'
p37078
Nsa(dp37079
S'description'
p37080
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37081
sS'cpp_type'
p37082
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37083
sS'default'
p37084
g3
sS'name'
p37085
S'outputs'
p37086
sS'required'
p37087
I00
sS'group_name'
p37088
S'Advanced'
p37089
sa(dp37090
S'description'
p37091
S'The seed for the master random number generator\n'
p37092
sS'cpp_type'
p37093
S'unsigned int'
p37094
sS'default'
p37095
S'0'
p37096
sS'name'
p37097
S'seed'
p37098
sS'required'
p37099
I00
sS'group_name'
p37100
S'Advanced'
p37101
sa(dp37102
S'description'
p37103
g3
sS'cpp_type'
p37104
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37105
sS'default'
p37106
S'ElementVectorL2Error'
p37107
sS'name'
p37108
S'type'
p37109
sS'required'
p37110
I00
sS'group_name'
p37111
Nsa(dp37112
S'description'
p37113
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37114
sS'cpp_type'
p37115
S'bool'
p37116
sS'default'
p37117
S'0'
p37118
sS'name'
p37119
S'use_displaced_mesh'
p37120
sS'required'
p37121
I00
sS'group_name'
p37122
S'Advanced'
p37123
sa(dp37124
S'description'
p37125
S'The FE solution in x direction\n'
p37126
sS'cpp_type'
p37127
S'std::vector<VariableName>'
p37128
sS'default'
p37129
g3
sS'name'
p37130
S'var_x'
p37131
sS'required'
p37132
I01
sS'group_name'
p37133
Nsa(dp37134
S'description'
p37135
S'The FE solution in y direction\n'
p37136
sS'cpp_type'
p37137
S'std::vector<VariableName>'
p37138
sS'default'
p37139
S'0'
p37140
sS'name'
p37141
S'var_y'
p37142
sS'required'
p37143
I00
sS'group_name'
p37144
Nsa(dp37145
S'description'
p37146
S'The FE solution in z direction\n'
p37147
sS'cpp_type'
p37148
S'std::vector<VariableName>'
p37149
sS'default'
p37150
S'0'
p37151
sS'name'
p37152
S'var_z'
p37153
sS'required'
p37154
I00
sS'group_name'
p37155
NsasS'name'
p37156
S'/Postprocessors/ElementVectorL2Error'
p37157
sa(dp37158
S'description'
p37159
g3
sS'subblocks'
p37160
NsS'parameters'
p37161
(lp37162
(dp37163
S'description'
p37164
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37165
sS'cpp_type'
p37166
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p37167
sS'default'
p37168
g3
sS'name'
p37169
S'block'
p37170
sS'required'
p37171
I00
sS'group_name'
p37172
Nsa(dp37173
S'description'
p37174
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37175
sS'cpp_type'
p37176
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37177
sS'default'
p37178
g3
sS'name'
p37179
S'control_tags'
p37180
sS'required'
p37181
I00
sS'group_name'
p37182
S'Advanced'
p37183
sa(dp37184
S'description'
p37185
S'Set the enabled status of the MooseObject.\n'
p37186
sS'cpp_type'
p37187
S'bool'
p37188
sS'default'
p37189
S'1'
p37190
sS'name'
p37191
S'enable'
p37192
sS'required'
p37193
I00
sS'group_name'
p37194
S'Advanced'
p37195
sa(dp37196
S'name'
p37197
S'execute_on'
p37198
sS'cpp_type'
p37199
S'MultiMooseEnum'
p37200
sS'default'
p37201
S'TIMESTEP_END'
p37202
sS'description'
p37203
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37204
sS'required'
p37205
I00
sS'options'
p37206
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37207
sS'group_name'
p37208
Nsa(dp37209
S'description'
p37210
S'The analytic solution to compare against\n'
p37211
sS'cpp_type'
p37212
S'FunctionName'
p37213
sS'default'
p37214
g3
sS'name'
p37215
S'function'
p37216
sS'required'
p37217
I01
sS'group_name'
p37218
Nsa(dp37219
S'description'
p37220
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37221
sS'cpp_type'
p37222
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37223
sS'default'
p37224
g3
sS'name'
p37225
S'outputs'
p37226
sS'required'
p37227
I00
sS'group_name'
p37228
S'Advanced'
p37229
sa(dp37230
S'description'
p37231
S'The exponent used in the norm.\n'
p37232
sS'cpp_type'
p37233
S'double'
p37234
sS'default'
p37235
S'2'
p37236
sS'name'
p37237
S'p'
p37238
sS'required'
p37239
I00
sS'group_name'
p37240
Nsa(dp37241
S'description'
p37242
S'The seed for the master random number generator\n'
p37243
sS'cpp_type'
p37244
S'unsigned int'
p37245
sS'default'
p37246
S'0'
p37247
sS'name'
p37248
S'seed'
p37249
sS'required'
p37250
I00
sS'group_name'
p37251
S'Advanced'
p37252
sa(dp37253
S'description'
p37254
g3
sS'cpp_type'
p37255
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37256
sS'default'
p37257
S'ElementW1pError'
p37258
sS'name'
p37259
S'type'
p37260
sS'required'
p37261
I00
sS'group_name'
p37262
Nsa(dp37263
S'description'
p37264
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37265
sS'cpp_type'
p37266
S'bool'
p37267
sS'default'
p37268
S'0'
p37269
sS'name'
p37270
S'use_displaced_mesh'
p37271
sS'required'
p37272
I00
sS'group_name'
p37273
S'Advanced'
p37274
sa(dp37275
S'description'
p37276
S'The name of the variable that this object operates on\n'
p37277
sS'cpp_type'
p37278
S'std::vector<VariableName>'
p37279
sS'default'
p37280
g3
sS'name'
p37281
S'variable'
p37282
sS'required'
p37283
I01
sS'group_name'
p37284
NsasS'name'
p37285
S'/Postprocessors/ElementW1pError'
p37286
sa(dp37287
S'description'
p37288
g3
sS'subblocks'
p37289
NsS'parameters'
p37290
(lp37291
(dp37292
S'description'
p37293
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37294
sS'cpp_type'
p37295
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37296
sS'default'
p37297
g3
sS'name'
p37298
S'control_tags'
p37299
sS'required'
p37300
I00
sS'group_name'
p37301
S'Advanced'
p37302
sa(dp37303
S'description'
p37304
S'The ID of the element where we monitor\n'
p37305
sS'cpp_type'
p37306
S'unsigned int'
p37307
sS'default'
p37308
g3
sS'name'
p37309
S'elementid'
p37310
sS'required'
p37311
I01
sS'group_name'
p37312
Nsa(dp37313
S'description'
p37314
S'Set the enabled status of the MooseObject.\n'
p37315
sS'cpp_type'
p37316
S'bool'
p37317
sS'default'
p37318
S'1'
p37319
sS'name'
p37320
S'enable'
p37321
sS'required'
p37322
I00
sS'group_name'
p37323
S'Advanced'
p37324
sa(dp37325
S'name'
p37326
S'execute_on'
p37327
sS'cpp_type'
p37328
S'MultiMooseEnum'
p37329
sS'default'
p37330
S'TIMESTEP_END'
p37331
sS'description'
p37332
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37333
sS'required'
p37334
I00
sS'options'
p37335
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37336
sS'group_name'
p37337
Nsa(dp37338
S'description'
p37339
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37340
sS'cpp_type'
p37341
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37342
sS'default'
p37343
g3
sS'name'
p37344
S'outputs'
p37345
sS'required'
p37346
I00
sS'group_name'
p37347
S'Advanced'
p37348
sa(dp37349
S'description'
p37350
g3
sS'cpp_type'
p37351
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37352
sS'default'
p37353
S'ElementalVariableValue'
p37354
sS'name'
p37355
S'type'
p37356
sS'required'
p37357
I00
sS'group_name'
p37358
Nsa(dp37359
S'description'
p37360
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37361
sS'cpp_type'
p37362
S'bool'
p37363
sS'default'
p37364
S'0'
p37365
sS'name'
p37366
S'use_displaced_mesh'
p37367
sS'required'
p37368
I00
sS'group_name'
p37369
S'Advanced'
p37370
sa(dp37371
S'description'
p37372
S'The variable to be monitored\n'
p37373
sS'cpp_type'
p37374
S'VariableName'
p37375
sS'default'
p37376
g3
sS'name'
p37377
S'variable'
p37378
sS'required'
p37379
I01
sS'group_name'
p37380
NsasS'name'
p37381
S'/Postprocessors/ElementalVariableValue'
p37382
sa(dp37383
S'description'
p37384
g3
sS'subblocks'
p37385
NsS'parameters'
p37386
(lp37387
(dp37388
S'description'
p37389
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37390
sS'cpp_type'
p37391
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37392
sS'default'
p37393
g3
sS'name'
p37394
S'control_tags'
p37395
sS'required'
p37396
I00
sS'group_name'
p37397
S'Advanced'
p37398
sa(dp37399
S'description'
p37400
S'Set the enabled status of the MooseObject.\n'
p37401
sS'cpp_type'
p37402
S'bool'
p37403
sS'default'
p37404
S'1'
p37405
sS'name'
p37406
S'enable'
p37407
sS'required'
p37408
I00
sS'group_name'
p37409
S'Advanced'
p37410
sa(dp37411
S'name'
p37412
S'execute_on'
p37413
sS'cpp_type'
p37414
S'MultiMooseEnum'
p37415
sS'default'
p37416
S'TIMESTEP_END'
p37417
sS'description'
p37418
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37419
sS'required'
p37420
I00
sS'options'
p37421
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37422
sS'group_name'
p37423
Nsa(dp37424
S'description'
p37425
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37426
sS'cpp_type'
p37427
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37428
sS'default'
p37429
g3
sS'name'
p37430
S'outputs'
p37431
sS'required'
p37432
I00
sS'group_name'
p37433
S'Advanced'
p37434
sa(dp37435
S'description'
p37436
g3
sS'cpp_type'
p37437
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37438
sS'default'
p37439
S'EmptyPostprocessor'
p37440
sS'name'
p37441
S'type'
p37442
sS'required'
p37443
I00
sS'group_name'
p37444
Nsa(dp37445
S'description'
p37446
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37447
sS'cpp_type'
p37448
S'bool'
p37449
sS'default'
p37450
S'0'
p37451
sS'name'
p37452
S'use_displaced_mesh'
p37453
sS'required'
p37454
I00
sS'group_name'
p37455
S'Advanced'
p37456
sasS'name'
p37457
S'/Postprocessors/EmptyPostprocessor'
p37458
sa(dp37459
S'description'
p37460
g3
sS'subblocks'
p37461
NsS'parameters'
p37462
(lp37463
(dp37464
S'description'
p37465
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37466
sS'cpp_type'
p37467
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37468
sS'default'
p37469
g3
sS'name'
p37470
S'control_tags'
p37471
sS'required'
p37472
I00
sS'group_name'
p37473
S'Advanced'
p37474
sa(dp37475
S'description'
p37476
S'Set the enabled status of the MooseObject.\n'
p37477
sS'cpp_type'
p37478
S'bool'
p37479
sS'default'
p37480
S'1'
p37481
sS'name'
p37482
S'enable'
p37483
sS'required'
p37484
I00
sS'group_name'
p37485
S'Advanced'
p37486
sa(dp37487
S'name'
p37488
S'execute_on'
p37489
sS'cpp_type'
p37490
S'MultiMooseEnum'
p37491
sS'default'
p37492
S'TIMESTEP_END'
p37493
sS'description'
p37494
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37495
sS'required'
p37496
I00
sS'options'
p37497
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37498
sS'group_name'
p37499
Nsa(dp37500
S'description'
p37501
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37502
sS'cpp_type'
p37503
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37504
sS'default'
p37505
g3
sS'name'
p37506
S'outputs'
p37507
sS'required'
p37508
I00
sS'group_name'
p37509
S'Advanced'
p37510
sa(dp37511
S'description'
p37512
g3
sS'cpp_type'
p37513
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37514
sS'default'
p37515
S'ExecutionerAttributeReporter'
p37516
sS'name'
p37517
S'type'
p37518
sS'required'
p37519
I00
sS'group_name'
p37520
Nsa(dp37521
S'description'
p37522
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37523
sS'cpp_type'
p37524
S'bool'
p37525
sS'default'
p37526
S'0'
p37527
sS'name'
p37528
S'use_displaced_mesh'
p37529
sS'required'
p37530
I00
sS'group_name'
p37531
S'Advanced'
p37532
sasS'name'
p37533
S'/Postprocessors/ExecutionerAttributeReporter'
p37534
sa(dp37535
S'description'
p37536
S'Find a specific target value along a sampling line. The variable values along the line should change monotonically. The target value is searched using a bisection algorithm.\n'
p37537
sS'subblocks'
p37538
NsS'parameters'
p37539
(lp37540
(dp37541
S'description'
p37542
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37543
sS'cpp_type'
p37544
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37545
sS'default'
p37546
g3
sS'name'
p37547
S'control_tags'
p37548
sS'required'
p37549
I00
sS'group_name'
p37550
S'Advanced'
p37551
sa(dp37552
S'description'
p37553
S'Maximum number of bisections to perform.\n'
p37554
sS'cpp_type'
p37555
S'unsigned int'
p37556
sS'default'
p37557
S'36'
p37558
sS'name'
p37559
S'depth'
p37560
sS'required'
p37561
I00
sS'group_name'
p37562
Nsa(dp37563
S'description'
p37564
S'Set the enabled status of the MooseObject.\n'
p37565
sS'cpp_type'
p37566
S'bool'
p37567
sS'default'
p37568
S'1'
p37569
sS'name'
p37570
S'enable'
p37571
sS'required'
p37572
I00
sS'group_name'
p37573
S'Advanced'
p37574
sa(dp37575
S'description'
p37576
S'End point of the sampling line.\n'
p37577
sS'cpp_type'
p37578
S'libMesh::Point'
p37579
sS'default'
p37580
g3
sS'name'
p37581
S'end_point'
p37582
sS'required'
p37583
I00
sS'group_name'
p37584
Nsa(dp37585
S'name'
p37586
S'execute_on'
p37587
sS'cpp_type'
p37588
S'MultiMooseEnum'
p37589
sS'default'
p37590
S'TIMESTEP_END'
p37591
sS'description'
p37592
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37593
sS'required'
p37594
I00
sS'options'
p37595
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37596
sS'group_name'
p37597
Nsa(dp37598
S'description'
p37599
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37600
sS'cpp_type'
p37601
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37602
sS'default'
p37603
g3
sS'name'
p37604
S'outputs'
p37605
sS'required'
p37606
I00
sS'group_name'
p37607
S'Advanced'
p37608
sa(dp37609
S'description'
p37610
S'Start point of the sampling line.\n'
p37611
sS'cpp_type'
p37612
S'libMesh::Point'
p37613
sS'default'
p37614
g3
sS'name'
p37615
S'start_point'
p37616
sS'required'
p37617
I00
sS'group_name'
p37618
Nsa(dp37619
S'description'
p37620
S'Target value to locate.\n'
p37621
sS'cpp_type'
p37622
S'double'
p37623
sS'default'
p37624
g3
sS'name'
p37625
S'target'
p37626
sS'required'
p37627
I00
sS'group_name'
p37628
Nsa(dp37629
S'description'
p37630
S'Stop search if a value is found that is equal to the target with this tolerance applied.\n'
p37631
sS'cpp_type'
p37632
S'double'
p37633
sS'default'
p37634
S'1e-10'
p37635
sS'name'
p37636
S'tol'
p37637
sS'required'
p37638
I00
sS'group_name'
p37639
Nsa(dp37640
S'description'
p37641
g3
sS'cpp_type'
p37642
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37643
sS'default'
p37644
S'FindValueOnLine'
p37645
sS'name'
p37646
S'type'
p37647
sS'required'
p37648
I00
sS'group_name'
p37649
Nsa(dp37650
S'description'
p37651
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37652
sS'cpp_type'
p37653
S'bool'
p37654
sS'default'
p37655
S'0'
p37656
sS'name'
p37657
S'use_displaced_mesh'
p37658
sS'required'
p37659
I00
sS'group_name'
p37660
S'Advanced'
p37661
sa(dp37662
S'description'
p37663
S'Variable to inspect\n'
p37664
sS'cpp_type'
p37665
S'std::vector<VariableName>'
p37666
sS'default'
p37667
g3
sS'name'
p37668
S'v'
p37669
sS'required'
p37670
I00
sS'group_name'
p37671
NsasS'name'
p37672
S'/Postprocessors/FindValueOnLine'
p37673
sa(dp37674
S'description'
p37675
g3
sS'subblocks'
p37676
NsS'parameters'
p37677
(lp37678
(dp37679
S'description'
p37680
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p37681
sS'cpp_type'
p37682
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p37683
sS'default'
p37684
g3
sS'name'
p37685
S'boundary'
p37686
sS'required'
p37687
I01
sS'group_name'
p37688
Nsa(dp37689
S'description'
p37690
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37691
sS'cpp_type'
p37692
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37693
sS'default'
p37694
g3
sS'name'
p37695
S'control_tags'
p37696
sS'required'
p37697
I00
sS'group_name'
p37698
S'Advanced'
p37699
sa(dp37700
S'description'
p37701
S'Set the enabled status of the MooseObject.\n'
p37702
sS'cpp_type'
p37703
S'bool'
p37704
sS'default'
p37705
S'1'
p37706
sS'name'
p37707
S'enable'
p37708
sS'required'
p37709
I00
sS'group_name'
p37710
S'Advanced'
p37711
sa(dp37712
S'name'
p37713
S'execute_on'
p37714
sS'cpp_type'
p37715
S'MultiMooseEnum'
p37716
sS'default'
p37717
S'TIMESTEP_END'
p37718
sS'description'
p37719
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37720
sS'required'
p37721
I00
sS'options'
p37722
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37723
sS'group_name'
p37724
Nsa(dp37725
S'description'
p37726
S'This postprocessor will return the integral of this function over the boundary\n'
p37727
sS'cpp_type'
p37728
S'FunctionName'
p37729
sS'default'
p37730
S'1'
p37731
sS'name'
p37732
S'function'
p37733
sS'required'
p37734
I00
sS'group_name'
p37735
Nsa(dp37736
S'description'
p37737
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37738
sS'cpp_type'
p37739
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37740
sS'default'
p37741
g3
sS'name'
p37742
S'outputs'
p37743
sS'required'
p37744
I00
sS'group_name'
p37745
S'Advanced'
p37746
sa(dp37747
S'description'
p37748
g3
sS'cpp_type'
p37749
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37750
sS'default'
p37751
S'FunctionSideIntegral'
p37752
sS'name'
p37753
S'type'
p37754
sS'required'
p37755
I00
sS'group_name'
p37756
Nsa(dp37757
S'description'
p37758
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37759
sS'cpp_type'
p37760
S'bool'
p37761
sS'default'
p37762
S'0'
p37763
sS'name'
p37764
S'use_displaced_mesh'
p37765
sS'required'
p37766
I00
sS'group_name'
p37767
S'Advanced'
p37768
sasS'name'
p37769
S'/Postprocessors/FunctionSideIntegral'
p37770
sa(dp37771
S'description'
p37772
g3
sS'subblocks'
p37773
NsS'parameters'
p37774
(lp37775
(dp37776
S'description'
p37777
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37778
sS'cpp_type'
p37779
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37780
sS'default'
p37781
g3
sS'name'
p37782
S'control_tags'
p37783
sS'required'
p37784
I00
sS'group_name'
p37785
S'Advanced'
p37786
sa(dp37787
S'description'
p37788
S'Set the enabled status of the MooseObject.\n'
p37789
sS'cpp_type'
p37790
S'bool'
p37791
sS'default'
p37792
S'1'
p37793
sS'name'
p37794
S'enable'
p37795
sS'required'
p37796
I00
sS'group_name'
p37797
S'Advanced'
p37798
sa(dp37799
S'name'
p37800
S'execute_on'
p37801
sS'cpp_type'
p37802
S'MultiMooseEnum'
p37803
sS'default'
p37804
S'TIMESTEP_END'
p37805
sS'description'
p37806
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37807
sS'required'
p37808
I00
sS'options'
p37809
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37810
sS'group_name'
p37811
Nsa(dp37812
S'description'
p37813
S'The function which supplies the postprocessor value.\n'
p37814
sS'cpp_type'
p37815
S'FunctionName'
p37816
sS'default'
p37817
g3
sS'name'
p37818
S'function'
p37819
sS'required'
p37820
I01
sS'group_name'
p37821
Nsa(dp37822
S'description'
p37823
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37824
sS'cpp_type'
p37825
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37826
sS'default'
p37827
g3
sS'name'
p37828
S'outputs'
p37829
sS'required'
p37830
I00
sS'group_name'
p37831
S'Advanced'
p37832
sa(dp37833
S'description'
p37834
S'A point in space to be given to the function Default: (0, 0, 0)\n'
p37835
sS'cpp_type'
p37836
S'libMesh::Point'
p37837
sS'default'
p37838
S'0 0 0'
p37839
sS'name'
p37840
S'point'
p37841
sS'required'
p37842
I00
sS'group_name'
p37843
Nsa(dp37844
S'description'
p37845
S'A scale factor to be applied to the function\n'
p37846
sS'cpp_type'
p37847
S'double'
p37848
sS'default'
p37849
S'1'
p37850
sS'name'
p37851
S'scale_factor'
p37852
sS'required'
p37853
I00
sS'group_name'
p37854
Nsa(dp37855
S'description'
p37856
g3
sS'cpp_type'
p37857
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37858
sS'default'
p37859
S'FunctionValuePostprocessor'
p37860
sS'name'
p37861
S'type'
p37862
sS'required'
p37863
I00
sS'group_name'
p37864
Nsa(dp37865
S'description'
p37866
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37867
sS'cpp_type'
p37868
S'bool'
p37869
sS'default'
p37870
S'0'
p37871
sS'name'
p37872
S'use_displaced_mesh'
p37873
sS'required'
p37874
I00
sS'group_name'
p37875
S'Advanced'
p37876
sasS'name'
p37877
S'/Postprocessors/FunctionValuePostprocessor'
p37878
sa(dp37879
S'description'
p37880
g3
sS'subblocks'
p37881
NsS'parameters'
p37882
(lp37883
(dp37884
S'description'
p37885
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37886
sS'cpp_type'
p37887
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p37888
sS'default'
p37889
g3
sS'name'
p37890
S'block'
p37891
sS'required'
p37892
I00
sS'group_name'
p37893
Nsa(dp37894
S'description'
p37895
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p37896
sS'cpp_type'
p37897
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p37898
sS'default'
p37899
g3
sS'name'
p37900
S'boundary'
p37901
sS'required'
p37902
I00
sS'group_name'
p37903
Nsa(dp37904
S'description'
p37905
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37906
sS'cpp_type'
p37907
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37908
sS'default'
p37909
g3
sS'name'
p37910
S'control_tags'
p37911
sS'required'
p37912
I00
sS'group_name'
p37913
S'Advanced'
p37914
sa(dp37915
S'description'
p37916
S'Set the enabled status of the MooseObject.\n'
p37917
sS'cpp_type'
p37918
S'bool'
p37919
sS'default'
p37920
S'1'
p37921
sS'name'
p37922
S'enable'
p37923
sS'required'
p37924
I00
sS'group_name'
p37925
S'Advanced'
p37926
sa(dp37927
S'name'
p37928
S'execute_on'
p37929
sS'cpp_type'
p37930
S'MultiMooseEnum'
p37931
sS'default'
p37932
S'TIMESTEP_END'
p37933
sS'description'
p37934
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37935
sS'required'
p37936
I00
sS'options'
p37937
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37938
sS'group_name'
p37939
Nsa(dp37940
S'description'
p37941
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37942
sS'cpp_type'
p37943
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37944
sS'default'
p37945
g3
sS'name'
p37946
S'outputs'
p37947
sS'required'
p37948
I00
sS'group_name'
p37949
S'Advanced'
p37950
sa(dp37951
S'description'
p37952
S'The seed for the master random number generator\n'
p37953
sS'cpp_type'
p37954
S'unsigned int'
p37955
sS'default'
p37956
S'0'
p37957
sS'name'
p37958
S'seed'
p37959
sS'required'
p37960
I00
sS'group_name'
p37961
S'Advanced'
p37962
sa(dp37963
S'description'
p37964
g3
sS'cpp_type'
p37965
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37966
sS'default'
p37967
S'NodalExtremeValue'
p37968
sS'name'
p37969
S'type'
p37970
sS'required'
p37971
I00
sS'group_name'
p37972
Nsa(dp37973
S'description'
p37974
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p37975
sS'cpp_type'
p37976
S'bool'
p37977
sS'default'
p37978
S'0'
p37979
sS'name'
p37980
S'unique_node_execute'
p37981
sS'required'
p37982
I00
sS'group_name'
p37983
Nsa(dp37984
S'description'
p37985
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37986
sS'cpp_type'
p37987
S'bool'
p37988
sS'default'
p37989
S'0'
p37990
sS'name'
p37991
S'use_displaced_mesh'
p37992
sS'required'
p37993
I00
sS'group_name'
p37994
S'Advanced'
p37995
sa(dp37996
S'name'
p37997
S'value_type'
p37998
sS'cpp_type'
p37999
S'MooseEnum'
p38000
sS'default'
p38001
S'max'
p38002
sS'description'
p38003
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p38004
sS'required'
p38005
I00
sS'options'
p38006
S'max min'
p38007
sS'group_name'
p38008
Nsa(dp38009
S'description'
p38010
S'The name of the variable that this postprocessor operates on\n'
p38011
sS'cpp_type'
p38012
S'std::vector<VariableName>'
p38013
sS'default'
p38014
g3
sS'name'
p38015
S'variable'
p38016
sS'required'
p38017
I01
sS'group_name'
p38018
NsasS'name'
p38019
S'/Postprocessors/NodalExtremeValue'
p38020
sa(dp38021
S'description'
p38022
g3
sS'subblocks'
p38023
NsS'parameters'
p38024
(lp38025
(dp38026
S'description'
p38027
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38028
sS'cpp_type'
p38029
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p38030
sS'default'
p38031
g3
sS'name'
p38032
S'block'
p38033
sS'required'
p38034
I00
sS'group_name'
p38035
Nsa(dp38036
S'description'
p38037
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38038
sS'cpp_type'
p38039
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p38040
sS'default'
p38041
g3
sS'name'
p38042
S'boundary'
p38043
sS'required'
p38044
I00
sS'group_name'
p38045
Nsa(dp38046
S'description'
p38047
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38048
sS'cpp_type'
p38049
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38050
sS'default'
p38051
g3
sS'name'
p38052
S'control_tags'
p38053
sS'required'
p38054
I00
sS'group_name'
p38055
S'Advanced'
p38056
sa(dp38057
S'description'
p38058
S'Set the enabled status of the MooseObject.\n'
p38059
sS'cpp_type'
p38060
S'bool'
p38061
sS'default'
p38062
S'1'
p38063
sS'name'
p38064
S'enable'
p38065
sS'required'
p38066
I00
sS'group_name'
p38067
S'Advanced'
p38068
sa(dp38069
S'name'
p38070
S'execute_on'
p38071
sS'cpp_type'
p38072
S'MultiMooseEnum'
p38073
sS'default'
p38074
S'TIMESTEP_END'
p38075
sS'description'
p38076
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38077
sS'required'
p38078
I00
sS'options'
p38079
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38080
sS'group_name'
p38081
Nsa(dp38082
S'description'
p38083
S'The analytic solution to compare against\n'
p38084
sS'cpp_type'
p38085
S'FunctionName'
p38086
sS'default'
p38087
g3
sS'name'
p38088
S'function'
p38089
sS'required'
p38090
I01
sS'group_name'
p38091
Nsa(dp38092
S'description'
p38093
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38094
sS'cpp_type'
p38095
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38096
sS'default'
p38097
g3
sS'name'
p38098
S'outputs'
p38099
sS'required'
p38100
I00
sS'group_name'
p38101
S'Advanced'
p38102
sa(dp38103
S'description'
p38104
S'The seed for the master random number generator\n'
p38105
sS'cpp_type'
p38106
S'unsigned int'
p38107
sS'default'
p38108
S'0'
p38109
sS'name'
p38110
S'seed'
p38111
sS'required'
p38112
I00
sS'group_name'
p38113
S'Advanced'
p38114
sa(dp38115
S'description'
p38116
g3
sS'cpp_type'
p38117
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38118
sS'default'
p38119
S'NodalL2Error'
p38120
sS'name'
p38121
S'type'
p38122
sS'required'
p38123
I00
sS'group_name'
p38124
Nsa(dp38125
S'description'
p38126
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p38127
sS'cpp_type'
p38128
S'bool'
p38129
sS'default'
p38130
S'0'
p38131
sS'name'
p38132
S'unique_node_execute'
p38133
sS'required'
p38134
I00
sS'group_name'
p38135
Nsa(dp38136
S'description'
p38137
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38138
sS'cpp_type'
p38139
S'bool'
p38140
sS'default'
p38141
S'0'
p38142
sS'name'
p38143
S'use_displaced_mesh'
p38144
sS'required'
p38145
I00
sS'group_name'
p38146
S'Advanced'
p38147
sa(dp38148
S'description'
p38149
S'The name of the variable that this postprocessor operates on\n'
p38150
sS'cpp_type'
p38151
S'std::vector<VariableName>'
p38152
sS'default'
p38153
g3
sS'name'
p38154
S'variable'
p38155
sS'required'
p38156
I01
sS'group_name'
p38157
NsasS'name'
p38158
S'/Postprocessors/NodalL2Error'
p38159
sa(dp38160
S'description'
p38161
g3
sS'subblocks'
p38162
NsS'parameters'
p38163
(lp38164
(dp38165
S'description'
p38166
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38167
sS'cpp_type'
p38168
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p38169
sS'default'
p38170
g3
sS'name'
p38171
S'block'
p38172
sS'required'
p38173
I00
sS'group_name'
p38174
Nsa(dp38175
S'description'
p38176
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38177
sS'cpp_type'
p38178
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p38179
sS'default'
p38180
g3
sS'name'
p38181
S'boundary'
p38182
sS'required'
p38183
I00
sS'group_name'
p38184
Nsa(dp38185
S'description'
p38186
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38187
sS'cpp_type'
p38188
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38189
sS'default'
p38190
g3
sS'name'
p38191
S'control_tags'
p38192
sS'required'
p38193
I00
sS'group_name'
p38194
S'Advanced'
p38195
sa(dp38196
S'description'
p38197
S'Set the enabled status of the MooseObject.\n'
p38198
sS'cpp_type'
p38199
S'bool'
p38200
sS'default'
p38201
S'1'
p38202
sS'name'
p38203
S'enable'
p38204
sS'required'
p38205
I00
sS'group_name'
p38206
S'Advanced'
p38207
sa(dp38208
S'name'
p38209
S'execute_on'
p38210
sS'cpp_type'
p38211
S'MultiMooseEnum'
p38212
sS'default'
p38213
S'TIMESTEP_END'
p38214
sS'description'
p38215
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38216
sS'required'
p38217
I00
sS'options'
p38218
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38219
sS'group_name'
p38220
Nsa(dp38221
S'description'
p38222
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38223
sS'cpp_type'
p38224
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38225
sS'default'
p38226
g3
sS'name'
p38227
S'outputs'
p38228
sS'required'
p38229
I00
sS'group_name'
p38230
S'Advanced'
p38231
sa(dp38232
S'description'
p38233
S'The seed for the master random number generator\n'
p38234
sS'cpp_type'
p38235
S'unsigned int'
p38236
sS'default'
p38237
S'0'
p38238
sS'name'
p38239
S'seed'
p38240
sS'required'
p38241
I00
sS'group_name'
p38242
S'Advanced'
p38243
sa(dp38244
S'description'
p38245
g3
sS'cpp_type'
p38246
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38247
sS'default'
p38248
S'NodalL2Norm'
p38249
sS'name'
p38250
S'type'
p38251
sS'required'
p38252
I00
sS'group_name'
p38253
Nsa(dp38254
S'description'
p38255
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p38256
sS'cpp_type'
p38257
S'bool'
p38258
sS'default'
p38259
S'1'
p38260
sS'name'
p38261
S'unique_node_execute'
p38262
sS'required'
p38263
I00
sS'group_name'
p38264
Nsa(dp38265
S'description'
p38266
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38267
sS'cpp_type'
p38268
S'bool'
p38269
sS'default'
p38270
S'0'
p38271
sS'name'
p38272
S'use_displaced_mesh'
p38273
sS'required'
p38274
I00
sS'group_name'
p38275
S'Advanced'
p38276
sa(dp38277
S'description'
p38278
S'The name of the variable that this postprocessor operates on\n'
p38279
sS'cpp_type'
p38280
S'std::vector<VariableName>'
p38281
sS'default'
p38282
g3
sS'name'
p38283
S'variable'
p38284
sS'required'
p38285
I01
sS'group_name'
p38286
NsasS'name'
p38287
S'/Postprocessors/NodalL2Norm'
p38288
sa(dp38289
S'description'
p38290
g3
sS'subblocks'
p38291
NsS'parameters'
p38292
(lp38293
(dp38294
S'description'
p38295
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38296
sS'cpp_type'
p38297
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p38298
sS'default'
p38299
g3
sS'name'
p38300
S'block'
p38301
sS'required'
p38302
I00
sS'group_name'
p38303
Nsa(dp38304
S'description'
p38305
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38306
sS'cpp_type'
p38307
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p38308
sS'default'
p38309
g3
sS'name'
p38310
S'boundary'
p38311
sS'required'
p38312
I00
sS'group_name'
p38313
Nsa(dp38314
S'description'
p38315
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38316
sS'cpp_type'
p38317
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38318
sS'default'
p38319
g3
sS'name'
p38320
S'control_tags'
p38321
sS'required'
p38322
I00
sS'group_name'
p38323
S'Advanced'
p38324
sa(dp38325
S'description'
p38326
S'Set the enabled status of the MooseObject.\n'
p38327
sS'cpp_type'
p38328
S'bool'
p38329
sS'default'
p38330
S'1'
p38331
sS'name'
p38332
S'enable'
p38333
sS'required'
p38334
I00
sS'group_name'
p38335
S'Advanced'
p38336
sa(dp38337
S'name'
p38338
S'execute_on'
p38339
sS'cpp_type'
p38340
S'MultiMooseEnum'
p38341
sS'default'
p38342
S'TIMESTEP_END'
p38343
sS'description'
p38344
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38345
sS'required'
p38346
I00
sS'options'
p38347
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38348
sS'group_name'
p38349
Nsa(dp38350
S'description'
p38351
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38352
sS'cpp_type'
p38353
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38354
sS'default'
p38355
g3
sS'name'
p38356
S'outputs'
p38357
sS'required'
p38358
I00
sS'group_name'
p38359
S'Advanced'
p38360
sa(dp38361
S'description'
p38362
S'The seed for the master random number generator\n'
p38363
sS'cpp_type'
p38364
S'unsigned int'
p38365
sS'default'
p38366
S'0'
p38367
sS'name'
p38368
S'seed'
p38369
sS'required'
p38370
I00
sS'group_name'
p38371
S'Advanced'
p38372
sa(dp38373
S'description'
p38374
g3
sS'cpp_type'
p38375
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38376
sS'default'
p38377
S'NodalMaxValue'
p38378
sS'name'
p38379
S'type'
p38380
sS'required'
p38381
I00
sS'group_name'
p38382
Nsa(dp38383
S'description'
p38384
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p38385
sS'cpp_type'
p38386
S'bool'
p38387
sS'default'
p38388
S'0'
p38389
sS'name'
p38390
S'unique_node_execute'
p38391
sS'required'
p38392
I00
sS'group_name'
p38393
Nsa(dp38394
S'description'
p38395
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38396
sS'cpp_type'
p38397
S'bool'
p38398
sS'default'
p38399
S'0'
p38400
sS'name'
p38401
S'use_displaced_mesh'
p38402
sS'required'
p38403
I00
sS'group_name'
p38404
S'Advanced'
p38405
sa(dp38406
S'description'
p38407
S'The name of the variable that this postprocessor operates on\n'
p38408
sS'cpp_type'
p38409
S'std::vector<VariableName>'
p38410
sS'default'
p38411
g3
sS'name'
p38412
S'variable'
p38413
sS'required'
p38414
I01
sS'group_name'
p38415
NsasS'name'
p38416
S'/Postprocessors/NodalMaxValue'
p38417
sa(dp38418
S'description'
p38419
g3
sS'subblocks'
p38420
NsS'parameters'
p38421
(lp38422
(dp38423
S'description'
p38424
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38425
sS'cpp_type'
p38426
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p38427
sS'default'
p38428
g3
sS'name'
p38429
S'block'
p38430
sS'required'
p38431
I00
sS'group_name'
p38432
Nsa(dp38433
S'description'
p38434
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38435
sS'cpp_type'
p38436
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p38437
sS'default'
p38438
g3
sS'name'
p38439
S'boundary'
p38440
sS'required'
p38441
I00
sS'group_name'
p38442
Nsa(dp38443
S'description'
p38444
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38445
sS'cpp_type'
p38446
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38447
sS'default'
p38448
g3
sS'name'
p38449
S'control_tags'
p38450
sS'required'
p38451
I00
sS'group_name'
p38452
S'Advanced'
p38453
sa(dp38454
S'description'
p38455
S'Set the enabled status of the MooseObject.\n'
p38456
sS'cpp_type'
p38457
S'bool'
p38458
sS'default'
p38459
S'1'
p38460
sS'name'
p38461
S'enable'
p38462
sS'required'
p38463
I00
sS'group_name'
p38464
S'Advanced'
p38465
sa(dp38466
S'name'
p38467
S'execute_on'
p38468
sS'cpp_type'
p38469
S'MultiMooseEnum'
p38470
sS'default'
p38471
S'TIMESTEP_END'
p38472
sS'description'
p38473
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38474
sS'required'
p38475
I00
sS'options'
p38476
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38477
sS'group_name'
p38478
Nsa(dp38479
S'description'
p38480
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38481
sS'cpp_type'
p38482
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38483
sS'default'
p38484
g3
sS'name'
p38485
S'outputs'
p38486
sS'required'
p38487
I00
sS'group_name'
p38488
S'Advanced'
p38489
sa(dp38490
S'description'
p38491
S'The seed for the master random number generator\n'
p38492
sS'cpp_type'
p38493
S'unsigned int'
p38494
sS'default'
p38495
S'0'
p38496
sS'name'
p38497
S'seed'
p38498
sS'required'
p38499
I00
sS'group_name'
p38500
S'Advanced'
p38501
sa(dp38502
S'description'
p38503
g3
sS'cpp_type'
p38504
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38505
sS'default'
p38506
S'NodalProxyMaxValue'
p38507
sS'name'
p38508
S'type'
p38509
sS'required'
p38510
I00
sS'group_name'
p38511
Nsa(dp38512
S'description'
p38513
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p38514
sS'cpp_type'
p38515
S'bool'
p38516
sS'default'
p38517
S'0'
p38518
sS'name'
p38519
S'unique_node_execute'
p38520
sS'required'
p38521
I00
sS'group_name'
p38522
Nsa(dp38523
S'description'
p38524
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38525
sS'cpp_type'
p38526
S'bool'
p38527
sS'default'
p38528
S'0'
p38529
sS'name'
p38530
S'use_displaced_mesh'
p38531
sS'required'
p38532
I00
sS'group_name'
p38533
S'Advanced'
p38534
sa(dp38535
S'description'
p38536
S'The name of the variable that this postprocessor operates on\n'
p38537
sS'cpp_type'
p38538
S'std::vector<VariableName>'
p38539
sS'default'
p38540
g3
sS'name'
p38541
S'variable'
p38542
sS'required'
p38543
I01
sS'group_name'
p38544
NsasS'name'
p38545
S'/Postprocessors/NodalProxyMaxValue'
p38546
sa(dp38547
S'description'
p38548
g3
sS'subblocks'
p38549
NsS'parameters'
p38550
(lp38551
(dp38552
S'description'
p38553
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38554
sS'cpp_type'
p38555
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p38556
sS'default'
p38557
g3
sS'name'
p38558
S'block'
p38559
sS'required'
p38560
I00
sS'group_name'
p38561
Nsa(dp38562
S'description'
p38563
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38564
sS'cpp_type'
p38565
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p38566
sS'default'
p38567
g3
sS'name'
p38568
S'boundary'
p38569
sS'required'
p38570
I00
sS'group_name'
p38571
Nsa(dp38572
S'description'
p38573
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38574
sS'cpp_type'
p38575
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38576
sS'default'
p38577
g3
sS'name'
p38578
S'control_tags'
p38579
sS'required'
p38580
I00
sS'group_name'
p38581
S'Advanced'
p38582
sa(dp38583
S'description'
p38584
S'Set the enabled status of the MooseObject.\n'
p38585
sS'cpp_type'
p38586
S'bool'
p38587
sS'default'
p38588
S'1'
p38589
sS'name'
p38590
S'enable'
p38591
sS'required'
p38592
I00
sS'group_name'
p38593
S'Advanced'
p38594
sa(dp38595
S'name'
p38596
S'execute_on'
p38597
sS'cpp_type'
p38598
S'MultiMooseEnum'
p38599
sS'default'
p38600
S'TIMESTEP_END'
p38601
sS'description'
p38602
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38603
sS'required'
p38604
I00
sS'options'
p38605
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38606
sS'group_name'
p38607
Nsa(dp38608
S'description'
p38609
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38610
sS'cpp_type'
p38611
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38612
sS'default'
p38613
g3
sS'name'
p38614
S'outputs'
p38615
sS'required'
p38616
I00
sS'group_name'
p38617
S'Advanced'
p38618
sa(dp38619
S'description'
p38620
S'The seed for the master random number generator\n'
p38621
sS'cpp_type'
p38622
S'unsigned int'
p38623
sS'default'
p38624
S'0'
p38625
sS'name'
p38626
S'seed'
p38627
sS'required'
p38628
I00
sS'group_name'
p38629
S'Advanced'
p38630
sa(dp38631
S'description'
p38632
g3
sS'cpp_type'
p38633
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38634
sS'default'
p38635
S'NodalSum'
p38636
sS'name'
p38637
S'type'
p38638
sS'required'
p38639
I00
sS'group_name'
p38640
Nsa(dp38641
S'description'
p38642
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p38643
sS'cpp_type'
p38644
S'bool'
p38645
sS'default'
p38646
S'1'
p38647
sS'name'
p38648
S'unique_node_execute'
p38649
sS'required'
p38650
I00
sS'group_name'
p38651
Nsa(dp38652
S'description'
p38653
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38654
sS'cpp_type'
p38655
S'bool'
p38656
sS'default'
p38657
S'0'
p38658
sS'name'
p38659
S'use_displaced_mesh'
p38660
sS'required'
p38661
I00
sS'group_name'
p38662
S'Advanced'
p38663
sa(dp38664
S'description'
p38665
S'The name of the variable that this postprocessor operates on\n'
p38666
sS'cpp_type'
p38667
S'std::vector<VariableName>'
p38668
sS'default'
p38669
g3
sS'name'
p38670
S'variable'
p38671
sS'required'
p38672
I01
sS'group_name'
p38673
NsasS'name'
p38674
S'/Postprocessors/NodalSum'
p38675
sa(dp38676
S'description'
p38677
g3
sS'subblocks'
p38678
NsS'parameters'
p38679
(lp38680
(dp38681
S'description'
p38682
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38683
sS'cpp_type'
p38684
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38685
sS'default'
p38686
g3
sS'name'
p38687
S'control_tags'
p38688
sS'required'
p38689
I00
sS'group_name'
p38690
S'Advanced'
p38691
sa(dp38692
S'description'
p38693
S'Set the enabled status of the MooseObject.\n'
p38694
sS'cpp_type'
p38695
S'bool'
p38696
sS'default'
p38697
S'1'
p38698
sS'name'
p38699
S'enable'
p38700
sS'required'
p38701
I00
sS'group_name'
p38702
S'Advanced'
p38703
sa(dp38704
S'name'
p38705
S'execute_on'
p38706
sS'cpp_type'
p38707
S'MultiMooseEnum'
p38708
sS'default'
p38709
S'TIMESTEP_END'
p38710
sS'description'
p38711
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38712
sS'required'
p38713
I00
sS'options'
p38714
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38715
sS'group_name'
p38716
Nsa(dp38717
S'description'
p38718
S'The ID of the node where we monitor\n'
p38719
sS'cpp_type'
p38720
S'unsigned int'
p38721
sS'default'
p38722
g3
sS'name'
p38723
S'nodeid'
p38724
sS'required'
p38725
I01
sS'group_name'
p38726
Nsa(dp38727
S'description'
p38728
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38729
sS'cpp_type'
p38730
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38731
sS'default'
p38732
g3
sS'name'
p38733
S'outputs'
p38734
sS'required'
p38735
I00
sS'group_name'
p38736
S'Advanced'
p38737
sa(dp38738
S'description'
p38739
S'A scale factor to be applied to the variable\n'
p38740
sS'cpp_type'
p38741
S'double'
p38742
sS'default'
p38743
S'1'
p38744
sS'name'
p38745
S'scale_factor'
p38746
sS'required'
p38747
I00
sS'group_name'
p38748
Nsa(dp38749
S'description'
p38750
g3
sS'cpp_type'
p38751
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38752
sS'default'
p38753
S'NodalVariableValue'
p38754
sS'name'
p38755
S'type'
p38756
sS'required'
p38757
I00
sS'group_name'
p38758
Nsa(dp38759
S'description'
p38760
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38761
sS'cpp_type'
p38762
S'bool'
p38763
sS'default'
p38764
S'0'
p38765
sS'name'
p38766
S'use_displaced_mesh'
p38767
sS'required'
p38768
I00
sS'group_name'
p38769
S'Advanced'
p38770
sa(dp38771
S'description'
p38772
S'The variable to be monitored\n'
p38773
sS'cpp_type'
p38774
S'VariableName'
p38775
sS'default'
p38776
g3
sS'name'
p38777
S'variable'
p38778
sS'required'
p38779
I01
sS'group_name'
p38780
NsasS'name'
p38781
S'/Postprocessors/NodalVariableValue'
p38782
sa(dp38783
S'description'
p38784
g3
sS'subblocks'
p38785
NsS'parameters'
p38786
(lp38787
(dp38788
S'description'
p38789
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38790
sS'cpp_type'
p38791
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38792
sS'default'
p38793
g3
sS'name'
p38794
S'control_tags'
p38795
sS'required'
p38796
I00
sS'group_name'
p38797
S'Advanced'
p38798
sa(dp38799
S'description'
p38800
S'Set the enabled status of the MooseObject.\n'
p38801
sS'cpp_type'
p38802
S'bool'
p38803
sS'default'
p38804
S'1'
p38805
sS'name'
p38806
S'enable'
p38807
sS'required'
p38808
I00
sS'group_name'
p38809
S'Advanced'
p38810
sa(dp38811
S'name'
p38812
S'execute_on'
p38813
sS'cpp_type'
p38814
S'MultiMooseEnum'
p38815
sS'default'
p38816
S'TIMESTEP_END'
p38817
sS'description'
p38818
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38819
sS'required'
p38820
I00
sS'options'
p38821
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38822
sS'group_name'
p38823
Nsa(dp38824
S'description'
p38825
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38826
sS'cpp_type'
p38827
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38828
sS'default'
p38829
g3
sS'name'
p38830
S'outputs'
p38831
sS'required'
p38832
I00
sS'group_name'
p38833
S'Advanced'
p38834
sa(dp38835
S'name'
p38836
S'system'
p38837
sS'cpp_type'
p38838
S'MooseEnum'
p38839
sS'default'
p38840
S'ALL'
p38841
sS'description'
p38842
S'The system(s) to retrieve the number of DOFs from (NL, AUX, ALL). Default == ALL\n'
p38843
sS'required'
p38844
I00
sS'options'
p38845
S'NL AUX ALL'
p38846
sS'group_name'
p38847
Nsa(dp38848
S'description'
p38849
g3
sS'cpp_type'
p38850
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38851
sS'default'
p38852
S'NumDOFs'
p38853
sS'name'
p38854
S'type'
p38855
sS'required'
p38856
I00
sS'group_name'
p38857
Nsa(dp38858
S'description'
p38859
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38860
sS'cpp_type'
p38861
S'bool'
p38862
sS'default'
p38863
S'0'
p38864
sS'name'
p38865
S'use_displaced_mesh'
p38866
sS'required'
p38867
I00
sS'group_name'
p38868
S'Advanced'
p38869
sasS'name'
p38870
S'/Postprocessors/NumDOFs'
p38871
sa(dp38872
S'description'
p38873
g3
sS'subblocks'
p38874
NsS'parameters'
p38875
(lp38876
(dp38877
S'description'
p38878
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38879
sS'cpp_type'
p38880
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38881
sS'default'
p38882
g3
sS'name'
p38883
S'control_tags'
p38884
sS'required'
p38885
I00
sS'group_name'
p38886
S'Advanced'
p38887
sa(dp38888
S'name'
p38889
S'elem_filter'
p38890
sS'cpp_type'
p38891
S'MooseEnum'
p38892
sS'default'
p38893
S'active'
p38894
sS'description'
p38895
S'The type of elements to include in the count (active, total). Default == active\n'
p38896
sS'required'
p38897
I00
sS'options'
p38898
S'active total'
p38899
sS'group_name'
p38900
Nsa(dp38901
S'description'
p38902
S'Set the enabled status of the MooseObject.\n'
p38903
sS'cpp_type'
p38904
S'bool'
p38905
sS'default'
p38906
S'1'
p38907
sS'name'
p38908
S'enable'
p38909
sS'required'
p38910
I00
sS'group_name'
p38911
S'Advanced'
p38912
sa(dp38913
S'name'
p38914
S'execute_on'
p38915
sS'cpp_type'
p38916
S'MultiMooseEnum'
p38917
sS'default'
p38918
S'TIMESTEP_END'
p38919
sS'description'
p38920
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38921
sS'required'
p38922
I00
sS'options'
p38923
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38924
sS'group_name'
p38925
Nsa(dp38926
S'description'
p38927
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38928
sS'cpp_type'
p38929
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38930
sS'default'
p38931
g3
sS'name'
p38932
S'outputs'
p38933
sS'required'
p38934
I00
sS'group_name'
p38935
S'Advanced'
p38936
sa(dp38937
S'description'
p38938
g3
sS'cpp_type'
p38939
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38940
sS'default'
p38941
S'NumElems'
p38942
sS'name'
p38943
S'type'
p38944
sS'required'
p38945
I00
sS'group_name'
p38946
Nsa(dp38947
S'description'
p38948
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38949
sS'cpp_type'
p38950
S'bool'
p38951
sS'default'
p38952
S'0'
p38953
sS'name'
p38954
S'use_displaced_mesh'
p38955
sS'required'
p38956
I00
sS'group_name'
p38957
S'Advanced'
p38958
sasS'name'
p38959
S'/Postprocessors/NumElems'
p38960
sa(dp38961
S'description'
p38962
g3
sS'subblocks'
p38963
NsS'parameters'
p38964
(lp38965
(dp38966
S'description'
p38967
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38968
sS'cpp_type'
p38969
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38970
sS'default'
p38971
g3
sS'name'
p38972
S'control_tags'
p38973
sS'required'
p38974
I00
sS'group_name'
p38975
S'Advanced'
p38976
sa(dp38977
S'description'
p38978
S'Set the enabled status of the MooseObject.\n'
p38979
sS'cpp_type'
p38980
S'bool'
p38981
sS'default'
p38982
S'1'
p38983
sS'name'
p38984
S'enable'
p38985
sS'required'
p38986
I00
sS'group_name'
p38987
S'Advanced'
p38988
sa(dp38989
S'name'
p38990
S'execute_on'
p38991
sS'cpp_type'
p38992
S'MultiMooseEnum'
p38993
sS'default'
p38994
S'TIMESTEP_END'
p38995
sS'description'
p38996
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38997
sS'required'
p38998
I00
sS'options'
p38999
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39000
sS'group_name'
p39001
Nsa(dp39002
S'description'
p39003
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39004
sS'cpp_type'
p39005
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39006
sS'default'
p39007
g3
sS'name'
p39008
S'outputs'
p39009
sS'required'
p39010
I00
sS'group_name'
p39011
S'Advanced'
p39012
sa(dp39013
S'description'
p39014
g3
sS'cpp_type'
p39015
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39016
sS'default'
p39017
S'NumLinearIterations'
p39018
sS'name'
p39019
S'type'
p39020
sS'required'
p39021
I00
sS'group_name'
p39022
Nsa(dp39023
S'description'
p39024
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39025
sS'cpp_type'
p39026
S'bool'
p39027
sS'default'
p39028
S'0'
p39029
sS'name'
p39030
S'use_displaced_mesh'
p39031
sS'required'
p39032
I00
sS'group_name'
p39033
S'Advanced'
p39034
sasS'name'
p39035
S'/Postprocessors/NumLinearIterations'
p39036
sa(dp39037
S'description'
p39038
g3
sS'subblocks'
p39039
NsS'parameters'
p39040
(lp39041
(dp39042
S'description'
p39043
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39044
sS'cpp_type'
p39045
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39046
sS'default'
p39047
g3
sS'name'
p39048
S'control_tags'
p39049
sS'required'
p39050
I00
sS'group_name'
p39051
S'Advanced'
p39052
sa(dp39053
S'description'
p39054
S'Set the enabled status of the MooseObject.\n'
p39055
sS'cpp_type'
p39056
S'bool'
p39057
sS'default'
p39058
S'1'
p39059
sS'name'
p39060
S'enable'
p39061
sS'required'
p39062
I00
sS'group_name'
p39063
S'Advanced'
p39064
sa(dp39065
S'name'
p39066
S'execute_on'
p39067
sS'cpp_type'
p39068
S'MultiMooseEnum'
p39069
sS'default'
p39070
S'TIMESTEP_END'
p39071
sS'description'
p39072
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39073
sS'required'
p39074
I00
sS'options'
p39075
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39076
sS'group_name'
p39077
Nsa(dp39078
S'description'
p39079
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39080
sS'cpp_type'
p39081
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39082
sS'default'
p39083
g3
sS'name'
p39084
S'outputs'
p39085
sS'required'
p39086
I00
sS'group_name'
p39087
S'Advanced'
p39088
sa(dp39089
S'description'
p39090
g3
sS'cpp_type'
p39091
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39092
sS'default'
p39093
S'NumNodes'
p39094
sS'name'
p39095
S'type'
p39096
sS'required'
p39097
I00
sS'group_name'
p39098
Nsa(dp39099
S'description'
p39100
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39101
sS'cpp_type'
p39102
S'bool'
p39103
sS'default'
p39104
S'0'
p39105
sS'name'
p39106
S'use_displaced_mesh'
p39107
sS'required'
p39108
I00
sS'group_name'
p39109
S'Advanced'
p39110
sasS'name'
p39111
S'/Postprocessors/NumNodes'
p39112
sa(dp39113
S'description'
p39114
g3
sS'subblocks'
p39115
NsS'parameters'
p39116
(lp39117
(dp39118
S'description'
p39119
S'When set to true, accumulates to count the total over all Picard iterations for each step\n'
p39120
sS'cpp_type'
p39121
S'bool'
p39122
sS'default'
p39123
S'0'
p39124
sS'name'
p39125
S'accumulate_over_step'
p39126
sS'required'
p39127
I00
sS'group_name'
p39128
Nsa(dp39129
S'description'
p39130
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39131
sS'cpp_type'
p39132
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39133
sS'default'
p39134
g3
sS'name'
p39135
S'control_tags'
p39136
sS'required'
p39137
I00
sS'group_name'
p39138
S'Advanced'
p39139
sa(dp39140
S'description'
p39141
S'Set the enabled status of the MooseObject.\n'
p39142
sS'cpp_type'
p39143
S'bool'
p39144
sS'default'
p39145
S'1'
p39146
sS'name'
p39147
S'enable'
p39148
sS'required'
p39149
I00
sS'group_name'
p39150
S'Advanced'
p39151
sa(dp39152
S'name'
p39153
S'execute_on'
p39154
sS'cpp_type'
p39155
S'MultiMooseEnum'
p39156
sS'default'
p39157
S'TIMESTEP_END'
p39158
sS'description'
p39159
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39160
sS'required'
p39161
I00
sS'options'
p39162
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39163
sS'group_name'
p39164
Nsa(dp39165
S'description'
p39166
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39167
sS'cpp_type'
p39168
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39169
sS'default'
p39170
g3
sS'name'
p39171
S'outputs'
p39172
sS'required'
p39173
I00
sS'group_name'
p39174
S'Advanced'
p39175
sa(dp39176
S'description'
p39177
g3
sS'cpp_type'
p39178
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39179
sS'default'
p39180
S'NumNonlinearIterations'
p39181
sS'name'
p39182
S'type'
p39183
sS'required'
p39184
I00
sS'group_name'
p39185
Nsa(dp39186
S'description'
p39187
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39188
sS'cpp_type'
p39189
S'bool'
p39190
sS'default'
p39191
S'0'
p39192
sS'name'
p39193
S'use_displaced_mesh'
p39194
sS'required'
p39195
I00
sS'group_name'
p39196
S'Advanced'
p39197
sasS'name'
p39198
S'/Postprocessors/NumNonlinearIterations'
p39199
sa(dp39200
S'description'
p39201
g3
sS'subblocks'
p39202
NsS'parameters'
p39203
(lp39204
(dp39205
S'description'
p39206
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39207
sS'cpp_type'
p39208
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39209
sS'default'
p39210
g3
sS'name'
p39211
S'control_tags'
p39212
sS'required'
p39213
I00
sS'group_name'
p39214
S'Advanced'
p39215
sa(dp39216
S'description'
p39217
S'Set the enabled status of the MooseObject.\n'
p39218
sS'cpp_type'
p39219
S'bool'
p39220
sS'default'
p39221
S'1'
p39222
sS'name'
p39223
S'enable'
p39224
sS'required'
p39225
I00
sS'group_name'
p39226
S'Advanced'
p39227
sa(dp39228
S'name'
p39229
S'execute_on'
p39230
sS'cpp_type'
p39231
S'MultiMooseEnum'
p39232
sS'default'
p39233
S'TIMESTEP_END'
p39234
sS'description'
p39235
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39236
sS'required'
p39237
I00
sS'options'
p39238
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39239
sS'group_name'
p39240
Nsa(dp39241
S'description'
p39242
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39243
sS'cpp_type'
p39244
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39245
sS'default'
p39246
g3
sS'name'
p39247
S'outputs'
p39248
sS'required'
p39249
I00
sS'group_name'
p39250
S'Advanced'
p39251
sa(dp39252
S'description'
p39253
g3
sS'cpp_type'
p39254
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39255
sS'default'
p39256
S'NumPicardIterations'
p39257
sS'name'
p39258
S'type'
p39259
sS'required'
p39260
I00
sS'group_name'
p39261
Nsa(dp39262
S'description'
p39263
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39264
sS'cpp_type'
p39265
S'bool'
p39266
sS'default'
p39267
S'0'
p39268
sS'name'
p39269
S'use_displaced_mesh'
p39270
sS'required'
p39271
I00
sS'group_name'
p39272
S'Advanced'
p39273
sasS'name'
p39274
S'/Postprocessors/NumPicardIterations'
p39275
sa(dp39276
S'description'
p39277
g3
sS'subblocks'
p39278
NsS'parameters'
p39279
(lp39280
(dp39281
S'description'
p39282
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39283
sS'cpp_type'
p39284
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39285
sS'default'
p39286
g3
sS'name'
p39287
S'control_tags'
p39288
sS'required'
p39289
I00
sS'group_name'
p39290
S'Advanced'
p39291
sa(dp39292
S'description'
p39293
S'Set the enabled status of the MooseObject.\n'
p39294
sS'cpp_type'
p39295
S'bool'
p39296
sS'default'
p39297
S'1'
p39298
sS'name'
p39299
S'enable'
p39300
sS'required'
p39301
I00
sS'group_name'
p39302
S'Advanced'
p39303
sa(dp39304
S'name'
p39305
S'execute_on'
p39306
sS'cpp_type'
p39307
S'MultiMooseEnum'
p39308
sS'default'
p39309
S'TIMESTEP_END'
p39310
sS'description'
p39311
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39312
sS'required'
p39313
I00
sS'options'
p39314
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39315
sS'group_name'
p39316
Nsa(dp39317
S'description'
p39318
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39319
sS'cpp_type'
p39320
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39321
sS'default'
p39322
g3
sS'name'
p39323
S'outputs'
p39324
sS'required'
p39325
I00
sS'group_name'
p39326
S'Advanced'
p39327
sa(dp39328
S'description'
p39329
g3
sS'cpp_type'
p39330
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39331
sS'default'
p39332
S'NumResidualEvaluations'
p39333
sS'name'
p39334
S'type'
p39335
sS'required'
p39336
I00
sS'group_name'
p39337
Nsa(dp39338
S'description'
p39339
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39340
sS'cpp_type'
p39341
S'bool'
p39342
sS'default'
p39343
S'0'
p39344
sS'name'
p39345
S'use_displaced_mesh'
p39346
sS'required'
p39347
I00
sS'group_name'
p39348
S'Advanced'
p39349
sasS'name'
p39350
S'/Postprocessors/NumResidualEvaluations'
p39351
sa(dp39352
S'description'
p39353
g3
sS'subblocks'
p39354
NsS'parameters'
p39355
(lp39356
(dp39357
S'description'
p39358
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39359
sS'cpp_type'
p39360
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39361
sS'default'
p39362
g3
sS'name'
p39363
S'control_tags'
p39364
sS'required'
p39365
I00
sS'group_name'
p39366
S'Advanced'
p39367
sa(dp39368
S'description'
p39369
S'Set the enabled status of the MooseObject.\n'
p39370
sS'cpp_type'
p39371
S'bool'
p39372
sS'default'
p39373
S'1'
p39374
sS'name'
p39375
S'enable'
p39376
sS'required'
p39377
I00
sS'group_name'
p39378
S'Advanced'
p39379
sa(dp39380
S'name'
p39381
S'execute_on'
p39382
sS'cpp_type'
p39383
S'MultiMooseEnum'
p39384
sS'default'
p39385
S'TIMESTEP_END'
p39386
sS'description'
p39387
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39388
sS'required'
p39389
I00
sS'options'
p39390
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39391
sS'group_name'
p39392
Nsa(dp39393
S'description'
p39394
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39395
sS'cpp_type'
p39396
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39397
sS'default'
p39398
g3
sS'name'
p39399
S'outputs'
p39400
sS'required'
p39401
I00
sS'group_name'
p39402
S'Advanced'
p39403
sa(dp39404
S'name'
p39405
S'system'
p39406
sS'cpp_type'
p39407
S'MooseEnum'
p39408
sS'default'
p39409
S'nonlinear'
p39410
sS'description'
p39411
S'The system for which you want to print the number of variables.\n'
p39412
sS'required'
p39413
I00
sS'options'
p39414
S'nonlinear auxiliary'
p39415
sS'group_name'
p39416
Nsa(dp39417
S'description'
p39418
g3
sS'cpp_type'
p39419
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39420
sS'default'
p39421
S'NumVars'
p39422
sS'name'
p39423
S'type'
p39424
sS'required'
p39425
I00
sS'group_name'
p39426
Nsa(dp39427
S'description'
p39428
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39429
sS'cpp_type'
p39430
S'bool'
p39431
sS'default'
p39432
S'0'
p39433
sS'name'
p39434
S'use_displaced_mesh'
p39435
sS'required'
p39436
I00
sS'group_name'
p39437
S'Advanced'
p39438
sasS'name'
p39439
S'/Postprocessors/NumVars'
p39440
sa(dp39441
S'description'
p39442
g3
sS'subblocks'
p39443
NsS'parameters'
p39444
(lp39445
(dp39446
S'description'
p39447
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39448
sS'cpp_type'
p39449
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39450
sS'default'
p39451
g3
sS'name'
p39452
S'control_tags'
p39453
sS'required'
p39454
I00
sS'group_name'
p39455
S'Advanced'
p39456
sa(dp39457
S'description'
p39458
S'Set the enabled status of the MooseObject.\n'
p39459
sS'cpp_type'
p39460
S'bool'
p39461
sS'default'
p39462
S'1'
p39463
sS'name'
p39464
S'enable'
p39465
sS'required'
p39466
I00
sS'group_name'
p39467
S'Advanced'
p39468
sa(dp39469
S'name'
p39470
S'execute_on'
p39471
sS'cpp_type'
p39472
S'MultiMooseEnum'
p39473
sS'default'
p39474
S'TIMESTEP_END'
p39475
sS'description'
p39476
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39477
sS'required'
p39478
I00
sS'options'
p39479
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39480
sS'group_name'
p39481
Nsa(dp39482
S'description'
p39483
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39484
sS'cpp_type'
p39485
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39486
sS'default'
p39487
g3
sS'name'
p39488
S'outputs'
p39489
sS'required'
p39490
I00
sS'group_name'
p39491
S'Advanced'
p39492
sa(dp39493
S'description'
p39494
S'The name of the postprocessor used for exit criterion\n'
p39495
sS'cpp_type'
p39496
S'PostprocessorName'
p39497
sS'default'
p39498
g3
sS'name'
p39499
S'postprocessor'
p39500
sS'required'
p39501
I01
sS'group_name'
p39502
Nsa(dp39503
S'description'
p39504
g3
sS'cpp_type'
p39505
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39506
sS'default'
p39507
S'PercentChangePostprocessor'
p39508
sS'name'
p39509
S'type'
p39510
sS'required'
p39511
I00
sS'group_name'
p39512
Nsa(dp39513
S'description'
p39514
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39515
sS'cpp_type'
p39516
S'bool'
p39517
sS'default'
p39518
S'0'
p39519
sS'name'
p39520
S'use_displaced_mesh'
p39521
sS'required'
p39522
I00
sS'group_name'
p39523
S'Advanced'
p39524
sasS'name'
p39525
S'/Postprocessors/PercentChangePostprocessor'
p39526
sa(dp39527
S'description'
p39528
g3
sS'subblocks'
p39529
NsS'parameters'
p39530
(lp39531
(dp39532
S'description'
p39533
S'The category or "Header" for the event\n'
p39534
sS'cpp_type'
p39535
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39536
sS'default'
p39537
S'Execution'
p39538
sS'name'
p39539
S'category'
p39540
sS'required'
p39541
I00
sS'group_name'
p39542
Nsa(dp39543
S'name'
p39544
S'column'
p39545
sS'cpp_type'
p39546
S'MooseEnum'
p39547
sS'default'
p39548
S'total_time_with_sub'
p39549
sS'description'
p39550
S'The column you want the value of (Default: total_time_with_sub).\n'
p39551
sS'required'
p39552
I00
sS'options'
p39553
S'n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub'
p39554
sS'group_name'
p39555
Nsa(dp39556
S'description'
p39557
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39558
sS'cpp_type'
p39559
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39560
sS'default'
p39561
g3
sS'name'
p39562
S'control_tags'
p39563
sS'required'
p39564
I00
sS'group_name'
p39565
S'Advanced'
p39566
sa(dp39567
S'description'
p39568
S'Set the enabled status of the MooseObject.\n'
p39569
sS'cpp_type'
p39570
S'bool'
p39571
sS'default'
p39572
S'1'
p39573
sS'name'
p39574
S'enable'
p39575
sS'required'
p39576
I00
sS'group_name'
p39577
S'Advanced'
p39578
sa(dp39579
S'description'
p39580
S'The name or "label" of the event ("ALIVE" and "ACTIVE" are also valid events, category and column are ignored for these cases).\n'
p39581
sS'cpp_type'
p39582
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39583
sS'default'
p39584
g3
sS'name'
p39585
S'event'
p39586
sS'required'
p39587
I01
sS'group_name'
p39588
Nsa(dp39589
S'name'
p39590
S'execute_on'
p39591
sS'cpp_type'
p39592
S'MultiMooseEnum'
p39593
sS'default'
p39594
S'TIMESTEP_END'
p39595
sS'description'
p39596
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39597
sS'required'
p39598
I00
sS'options'
p39599
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39600
sS'group_name'
p39601
Nsa(dp39602
S'description'
p39603
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39604
sS'cpp_type'
p39605
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39606
sS'default'
p39607
g3
sS'name'
p39608
S'outputs'
p39609
sS'required'
p39610
I00
sS'group_name'
p39611
S'Advanced'
p39612
sa(dp39613
S'description'
p39614
g3
sS'cpp_type'
p39615
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39616
sS'default'
p39617
S'PerformanceData'
p39618
sS'name'
p39619
S'type'
p39620
sS'required'
p39621
I00
sS'group_name'
p39622
Nsa(dp39623
S'description'
p39624
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39625
sS'cpp_type'
p39626
S'bool'
p39627
sS'default'
p39628
S'0'
p39629
sS'name'
p39630
S'use_displaced_mesh'
p39631
sS'required'
p39632
I00
sS'group_name'
p39633
S'Advanced'
p39634
sasS'name'
p39635
S'/Postprocessors/PerformanceData'
p39636
sa(dp39637
S'description'
p39638
g3
sS'subblocks'
p39639
NsS'parameters'
p39640
(lp39641
(dp39642
S'description'
p39643
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39644
sS'cpp_type'
p39645
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39646
sS'default'
p39647
g3
sS'name'
p39648
S'control_tags'
p39649
sS'required'
p39650
I00
sS'group_name'
p39651
S'Advanced'
p39652
sa(dp39653
S'description'
p39654
S'Set the enabled status of the MooseObject.\n'
p39655
sS'cpp_type'
p39656
S'bool'
p39657
sS'default'
p39658
S'1'
p39659
sS'name'
p39660
S'enable'
p39661
sS'required'
p39662
I00
sS'group_name'
p39663
S'Advanced'
p39664
sa(dp39665
S'name'
p39666
S'execute_on'
p39667
sS'cpp_type'
p39668
S'MultiMooseEnum'
p39669
sS'default'
p39670
S'TIMESTEP_END'
p39671
sS'description'
p39672
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39673
sS'required'
p39674
I00
sS'options'
p39675
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39676
sS'group_name'
p39677
Nsa(dp39678
S'description'
p39679
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39680
sS'cpp_type'
p39681
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39682
sS'default'
p39683
g3
sS'name'
p39684
S'outputs'
p39685
sS'required'
p39686
I00
sS'group_name'
p39687
S'Advanced'
p39688
sa(dp39689
S'description'
p39690
S'The physical point where the solution will be evaluated.\n'
p39691
sS'cpp_type'
p39692
S'libMesh::Point'
p39693
sS'default'
p39694
g3
sS'name'
p39695
S'point'
p39696
sS'required'
p39697
I01
sS'group_name'
p39698
Nsa(dp39699
S'description'
p39700
g3
sS'cpp_type'
p39701
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39702
sS'default'
p39703
S'PointValue'
p39704
sS'name'
p39705
S'type'
p39706
sS'required'
p39707
I00
sS'group_name'
p39708
Nsa(dp39709
S'description'
p39710
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39711
sS'cpp_type'
p39712
S'bool'
p39713
sS'default'
p39714
S'0'
p39715
sS'name'
p39716
S'use_displaced_mesh'
p39717
sS'required'
p39718
I00
sS'group_name'
p39719
S'Advanced'
p39720
sa(dp39721
S'description'
p39722
S'The name of the variable that this postprocessor operates on.\n'
p39723
sS'cpp_type'
p39724
S'VariableName'
p39725
sS'default'
p39726
g3
sS'name'
p39727
S'variable'
p39728
sS'required'
p39729
I01
sS'group_name'
p39730
NsasS'name'
p39731
S'/Postprocessors/PointValue'
p39732
sa(dp39733
S'description'
p39734
g3
sS'subblocks'
p39735
NsS'parameters'
p39736
(lp39737
(dp39738
S'description'
p39739
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39740
sS'cpp_type'
p39741
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39742
sS'default'
p39743
g3
sS'name'
p39744
S'control_tags'
p39745
sS'required'
p39746
I00
sS'group_name'
p39747
S'Advanced'
p39748
sa(dp39749
S'description'
p39750
S'The default value\n'
p39751
sS'cpp_type'
p39752
S'double'
p39753
sS'default'
p39754
g3
sS'name'
p39755
S'default'
p39756
sS'required'
p39757
I00
sS'group_name'
p39758
Nsa(dp39759
S'description'
p39760
S'Set the enabled status of the MooseObject.\n'
p39761
sS'cpp_type'
p39762
S'bool'
p39763
sS'default'
p39764
S'1'
p39765
sS'name'
p39766
S'enable'
p39767
sS'required'
p39768
I00
sS'group_name'
p39769
S'Advanced'
p39770
sa(dp39771
S'name'
p39772
S'execute_on'
p39773
sS'cpp_type'
p39774
S'MultiMooseEnum'
p39775
sS'default'
p39776
S'TIMESTEP_END'
p39777
sS'description'
p39778
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39779
sS'required'
p39780
I00
sS'options'
p39781
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39782
sS'group_name'
p39783
Nsa(dp39784
S'description'
p39785
S'Initialize the old postprocessor value with the default value\n'
p39786
sS'cpp_type'
p39787
S'bool'
p39788
sS'default'
p39789
S'1'
p39790
sS'name'
p39791
S'initialize_old'
p39792
sS'required'
p39793
I00
sS'group_name'
p39794
Nsa(dp39795
S'description'
p39796
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39797
sS'cpp_type'
p39798
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39799
sS'default'
p39800
g3
sS'name'
p39801
S'outputs'
p39802
sS'required'
p39803
I00
sS'group_name'
p39804
S'Advanced'
p39805
sa(dp39806
S'description'
p39807
g3
sS'cpp_type'
p39808
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39809
sS'default'
p39810
S'Receiver'
p39811
sS'name'
p39812
S'type'
p39813
sS'required'
p39814
I00
sS'group_name'
p39815
Nsa(dp39816
S'description'
p39817
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39818
sS'cpp_type'
p39819
S'bool'
p39820
sS'default'
p39821
S'0'
p39822
sS'name'
p39823
S'use_displaced_mesh'
p39824
sS'required'
p39825
I00
sS'group_name'
p39826
S'Advanced'
p39827
sasS'name'
p39828
S'/Postprocessors/Receiver'
p39829
sa(dp39830
S'description'
p39831
g3
sS'subblocks'
p39832
NsS'parameters'
p39833
(lp39834
(dp39835
S'description'
p39836
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39837
sS'cpp_type'
p39838
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39839
sS'default'
p39840
g3
sS'name'
p39841
S'control_tags'
p39842
sS'required'
p39843
I00
sS'group_name'
p39844
S'Advanced'
p39845
sa(dp39846
S'description'
p39847
S'Set the enabled status of the MooseObject.\n'
p39848
sS'cpp_type'
p39849
S'bool'
p39850
sS'default'
p39851
S'1'
p39852
sS'name'
p39853
S'enable'
p39854
sS'required'
p39855
I00
sS'group_name'
p39856
S'Advanced'
p39857
sa(dp39858
S'name'
p39859
S'execute_on'
p39860
sS'cpp_type'
p39861
S'MultiMooseEnum'
p39862
sS'default'
p39863
S'TIMESTEP_END'
p39864
sS'description'
p39865
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39866
sS'required'
p39867
I00
sS'options'
p39868
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39869
sS'group_name'
p39870
Nsa(dp39871
S'description'
p39872
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39873
sS'cpp_type'
p39874
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39875
sS'default'
p39876
g3
sS'name'
p39877
S'outputs'
p39878
sS'required'
p39879
I00
sS'group_name'
p39880
S'Advanced'
p39881
sa(dp39882
S'description'
p39883
g3
sS'cpp_type'
p39884
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39885
sS'default'
p39886
S'RelativeSolutionDifferenceNorm'
p39887
sS'name'
p39888
S'type'
p39889
sS'required'
p39890
I00
sS'group_name'
p39891
Nsa(dp39892
S'description'
p39893
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39894
sS'cpp_type'
p39895
S'bool'
p39896
sS'default'
p39897
S'0'
p39898
sS'name'
p39899
S'use_displaced_mesh'
p39900
sS'required'
p39901
I00
sS'group_name'
p39902
S'Advanced'
p39903
sasS'name'
p39904
S'/Postprocessors/RelativeSolutionDifferenceNorm'
p39905
sa(dp39906
S'description'
p39907
g3
sS'subblocks'
p39908
NsS'parameters'
p39909
(lp39910
(dp39911
S'description'
p39912
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39913
sS'cpp_type'
p39914
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39915
sS'default'
p39916
g3
sS'name'
p39917
S'control_tags'
p39918
sS'required'
p39919
I00
sS'group_name'
p39920
S'Advanced'
p39921
sa(dp39922
S'description'
p39923
S'Set the enabled status of the MooseObject.\n'
p39924
sS'cpp_type'
p39925
S'bool'
p39926
sS'default'
p39927
S'1'
p39928
sS'name'
p39929
S'enable'
p39930
sS'required'
p39931
I00
sS'group_name'
p39932
S'Advanced'
p39933
sa(dp39934
S'name'
p39935
S'execute_on'
p39936
sS'cpp_type'
p39937
S'MultiMooseEnum'
p39938
sS'default'
p39939
S'TIMESTEP_END'
p39940
sS'description'
p39941
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39942
sS'required'
p39943
I00
sS'options'
p39944
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39945
sS'group_name'
p39946
Nsa(dp39947
S'description'
p39948
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39949
sS'cpp_type'
p39950
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39951
sS'default'
p39952
g3
sS'name'
p39953
S'outputs'
p39954
sS'required'
p39955
I00
sS'group_name'
p39956
S'Advanced'
p39957
sa(dp39958
S'name'
p39959
S'residual_type'
p39960
sS'cpp_type'
p39961
S'MooseEnum'
p39962
sS'default'
p39963
S'FINAL'
p39964
sS'description'
p39965
S'Type of residual to be reported.  Choices are: FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET\n'
p39966
sS'required'
p39967
I00
sS'options'
p39968
S'FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET'
p39969
sS'group_name'
p39970
Nsa(dp39971
S'description'
p39972
g3
sS'cpp_type'
p39973
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39974
sS'default'
p39975
S'Residual'
p39976
sS'name'
p39977
S'type'
p39978
sS'required'
p39979
I00
sS'group_name'
p39980
Nsa(dp39981
S'description'
p39982
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39983
sS'cpp_type'
p39984
S'bool'
p39985
sS'default'
p39986
S'0'
p39987
sS'name'
p39988
S'use_displaced_mesh'
p39989
sS'required'
p39990
I00
sS'group_name'
p39991
S'Advanced'
p39992
sasS'name'
p39993
S'/Postprocessors/Residual'
p39994
sa(dp39995
S'description'
p39996
g3
sS'subblocks'
p39997
NsS'parameters'
p39998
(lp39999
(dp40000
S'description'
p40001
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40002
sS'cpp_type'
p40003
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40004
sS'default'
p40005
g3
sS'name'
p40006
S'control_tags'
p40007
sS'required'
p40008
I00
sS'group_name'
p40009
S'Advanced'
p40010
sa(dp40011
S'description'
p40012
S'Set the enabled status of the MooseObject.\n'
p40013
sS'cpp_type'
p40014
S'bool'
p40015
sS'default'
p40016
S'1'
p40017
sS'name'
p40018
S'enable'
p40019
sS'required'
p40020
I00
sS'group_name'
p40021
S'Advanced'
p40022
sa(dp40023
S'name'
p40024
S'execute_on'
p40025
sS'cpp_type'
p40026
S'MultiMooseEnum'
p40027
sS'default'
p40028
S'TIMESTEP_END'
p40029
sS'description'
p40030
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40031
sS'required'
p40032
I00
sS'options'
p40033
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40034
sS'group_name'
p40035
Nsa(dp40036
S'description'
p40037
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40038
sS'cpp_type'
p40039
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40040
sS'default'
p40041
g3
sS'name'
p40042
S'outputs'
p40043
sS'required'
p40044
I00
sS'group_name'
p40045
S'Advanced'
p40046
sa(dp40047
S'name'
p40048
S'time_type'
p40049
sS'cpp_type'
p40050
S'MooseEnum'
p40051
sS'default'
p40052
g3
sS'description'
p40053
S'Whether to output the total elapsed or just the active time\n'
p40054
sS'required'
p40055
I01
sS'options'
p40056
S'alive active'
p40057
sS'group_name'
p40058
Nsa(dp40059
S'description'
p40060
g3
sS'cpp_type'
p40061
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40062
sS'default'
p40063
S'RunTime'
p40064
sS'name'
p40065
S'type'
p40066
sS'required'
p40067
I00
sS'group_name'
p40068
Nsa(dp40069
S'description'
p40070
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40071
sS'cpp_type'
p40072
S'bool'
p40073
sS'default'
p40074
S'0'
p40075
sS'name'
p40076
S'use_displaced_mesh'
p40077
sS'required'
p40078
I00
sS'group_name'
p40079
S'Advanced'
p40080
sasS'name'
p40081
S'/Postprocessors/RunTime'
p40082
sa(dp40083
S'description'
p40084
g3
sS'subblocks'
p40085
NsS'parameters'
p40086
(lp40087
(dp40088
S'description'
p40089
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40090
sS'cpp_type'
p40091
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40092
sS'default'
p40093
g3
sS'name'
p40094
S'control_tags'
p40095
sS'required'
p40096
I00
sS'group_name'
p40097
S'Advanced'
p40098
sa(dp40099
S'description'
p40100
S'Set the enabled status of the MooseObject.\n'
p40101
sS'cpp_type'
p40102
S'bool'
p40103
sS'default'
p40104
S'1'
p40105
sS'name'
p40106
S'enable'
p40107
sS'required'
p40108
I00
sS'group_name'
p40109
S'Advanced'
p40110
sa(dp40111
S'name'
p40112
S'execute_on'
p40113
sS'cpp_type'
p40114
S'MultiMooseEnum'
p40115
sS'default'
p40116
S'TIMESTEP_END'
p40117
sS'description'
p40118
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40119
sS'required'
p40120
I00
sS'options'
p40121
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40122
sS'group_name'
p40123
Nsa(dp40124
S'description'
p40125
S'The analytic solution to compare against\n'
p40126
sS'cpp_type'
p40127
S'FunctionName'
p40128
sS'default'
p40129
g3
sS'name'
p40130
S'function'
p40131
sS'required'
p40132
I01
sS'group_name'
p40133
Nsa(dp40134
S'description'
p40135
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40136
sS'cpp_type'
p40137
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40138
sS'default'
p40139
g3
sS'name'
p40140
S'outputs'
p40141
sS'required'
p40142
I00
sS'group_name'
p40143
S'Advanced'
p40144
sa(dp40145
S'description'
p40146
g3
sS'cpp_type'
p40147
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40148
sS'default'
p40149
S'ScalarL2Error'
p40150
sS'name'
p40151
S'type'
p40152
sS'required'
p40153
I00
sS'group_name'
p40154
Nsa(dp40155
S'description'
p40156
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40157
sS'cpp_type'
p40158
S'bool'
p40159
sS'default'
p40160
S'0'
p40161
sS'name'
p40162
S'use_displaced_mesh'
p40163
sS'required'
p40164
I00
sS'group_name'
p40165
S'Advanced'
p40166
sa(dp40167
S'description'
p40168
S'The name of the scalar variable\n'
p40169
sS'cpp_type'
p40170
S'VariableName'
p40171
sS'default'
p40172
g3
sS'name'
p40173
S'variable'
p40174
sS'required'
p40175
I01
sS'group_name'
p40176
NsasS'name'
p40177
S'/Postprocessors/ScalarL2Error'
p40178
sa(dp40179
S'description'
p40180
g3
sS'subblocks'
p40181
NsS'parameters'
p40182
(lp40183
(dp40184
S'description'
p40185
S'Component to output for this variable\n'
p40186
sS'cpp_type'
p40187
S'unsigned int'
p40188
sS'default'
p40189
S'0'
p40190
sS'name'
p40191
S'component'
p40192
sS'required'
p40193
I00
sS'group_name'
p40194
Nsa(dp40195
S'description'
p40196
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40197
sS'cpp_type'
p40198
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40199
sS'default'
p40200
g3
sS'name'
p40201
S'control_tags'
p40202
sS'required'
p40203
I00
sS'group_name'
p40204
S'Advanced'
p40205
sa(dp40206
S'description'
p40207
S'Set the enabled status of the MooseObject.\n'
p40208
sS'cpp_type'
p40209
S'bool'
p40210
sS'default'
p40211
S'1'
p40212
sS'name'
p40213
S'enable'
p40214
sS'required'
p40215
I00
sS'group_name'
p40216
S'Advanced'
p40217
sa(dp40218
S'name'
p40219
S'execute_on'
p40220
sS'cpp_type'
p40221
S'MultiMooseEnum'
p40222
sS'default'
p40223
S'TIMESTEP_END'
p40224
sS'description'
p40225
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40226
sS'required'
p40227
I00
sS'options'
p40228
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40229
sS'group_name'
p40230
Nsa(dp40231
S'description'
p40232
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40233
sS'cpp_type'
p40234
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40235
sS'default'
p40236
g3
sS'name'
p40237
S'outputs'
p40238
sS'required'
p40239
I00
sS'group_name'
p40240
S'Advanced'
p40241
sa(dp40242
S'description'
p40243
g3
sS'cpp_type'
p40244
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40245
sS'default'
p40246
S'ScalarVariable'
p40247
sS'name'
p40248
S'type'
p40249
sS'required'
p40250
I00
sS'group_name'
p40251
Nsa(dp40252
S'description'
p40253
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40254
sS'cpp_type'
p40255
S'bool'
p40256
sS'default'
p40257
S'0'
p40258
sS'name'
p40259
S'use_displaced_mesh'
p40260
sS'required'
p40261
I00
sS'group_name'
p40262
S'Advanced'
p40263
sa(dp40264
S'description'
p40265
S'Name of the variable\n'
p40266
sS'cpp_type'
p40267
S'VariableName'
p40268
sS'default'
p40269
g3
sS'name'
p40270
S'variable'
p40271
sS'required'
p40272
I01
sS'group_name'
p40273
NsasS'name'
p40274
S'/Postprocessors/ScalarVariable'
p40275
sa(dp40276
S'description'
p40277
g3
sS'subblocks'
p40278
NsS'parameters'
p40279
(lp40280
(dp40281
S'description'
p40282
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40283
sS'cpp_type'
p40284
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40285
sS'default'
p40286
g3
sS'name'
p40287
S'control_tags'
p40288
sS'required'
p40289
I00
sS'group_name'
p40290
S'Advanced'
p40291
sa(dp40292
S'description'
p40293
S'Set the enabled status of the MooseObject.\n'
p40294
sS'cpp_type'
p40295
S'bool'
p40296
sS'default'
p40297
S'1'
p40298
sS'name'
p40299
S'enable'
p40300
sS'required'
p40301
I00
sS'group_name'
p40302
S'Advanced'
p40303
sa(dp40304
S'name'
p40305
S'execute_on'
p40306
sS'cpp_type'
p40307
S'MultiMooseEnum'
p40308
sS'default'
p40309
S'TIMESTEP_END'
p40310
sS'description'
p40311
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40312
sS'required'
p40313
I00
sS'options'
p40314
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40315
sS'group_name'
p40316
Nsa(dp40317
S'description'
p40318
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40319
sS'cpp_type'
p40320
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40321
sS'default'
p40322
g3
sS'name'
p40323
S'outputs'
p40324
sS'required'
p40325
I00
sS'group_name'
p40326
S'Advanced'
p40327
sa(dp40328
S'description'
p40329
S'The scaling factor\n'
p40330
sS'cpp_type'
p40331
S'double'
p40332
sS'default'
p40333
S'1'
p40334
sS'name'
p40335
S'scaling_factor'
p40336
sS'required'
p40337
I00
sS'group_name'
p40338
Nsa(dp40339
S'description'
p40340
g3
sS'cpp_type'
p40341
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40342
sS'default'
p40343
S'ScalePostprocessor'
p40344
sS'name'
p40345
S'type'
p40346
sS'required'
p40347
I00
sS'group_name'
p40348
Nsa(dp40349
S'description'
p40350
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40351
sS'cpp_type'
p40352
S'bool'
p40353
sS'default'
p40354
S'0'
p40355
sS'name'
p40356
S'use_displaced_mesh'
p40357
sS'required'
p40358
I00
sS'group_name'
p40359
S'Advanced'
p40360
sa(dp40361
S'description'
p40362
S'The postprocessor to be scaled\n'
p40363
sS'cpp_type'
p40364
S'PostprocessorName'
p40365
sS'default'
p40366
g3
sS'name'
p40367
S'value'
p40368
sS'required'
p40369
I01
sS'group_name'
p40370
NsasS'name'
p40371
S'/Postprocessors/ScalePostprocessor'
p40372
sa(dp40373
S'description'
p40374
g3
sS'subblocks'
p40375
NsS'parameters'
p40376
(lp40377
(dp40378
S'description'
p40379
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40380
sS'cpp_type'
p40381
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p40382
sS'default'
p40383
g3
sS'name'
p40384
S'boundary'
p40385
sS'required'
p40386
I01
sS'group_name'
p40387
Nsa(dp40388
S'description'
p40389
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40390
sS'cpp_type'
p40391
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40392
sS'default'
p40393
g3
sS'name'
p40394
S'control_tags'
p40395
sS'required'
p40396
I00
sS'group_name'
p40397
S'Advanced'
p40398
sa(dp40399
S'description'
p40400
S'Set the enabled status of the MooseObject.\n'
p40401
sS'cpp_type'
p40402
S'bool'
p40403
sS'default'
p40404
S'1'
p40405
sS'name'
p40406
S'enable'
p40407
sS'required'
p40408
I00
sS'group_name'
p40409
S'Advanced'
p40410
sa(dp40411
S'name'
p40412
S'execute_on'
p40413
sS'cpp_type'
p40414
S'MultiMooseEnum'
p40415
sS'default'
p40416
S'TIMESTEP_END'
p40417
sS'description'
p40418
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40419
sS'required'
p40420
I00
sS'options'
p40421
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40422
sS'group_name'
p40423
Nsa(dp40424
S'description'
p40425
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40426
sS'cpp_type'
p40427
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40428
sS'default'
p40429
g3
sS'name'
p40430
S'outputs'
p40431
sS'required'
p40432
I00
sS'group_name'
p40433
S'Advanced'
p40434
sa(dp40435
S'description'
p40436
g3
sS'cpp_type'
p40437
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40438
sS'default'
p40439
S'SideAverageValue'
p40440
sS'name'
p40441
S'type'
p40442
sS'required'
p40443
I00
sS'group_name'
p40444
Nsa(dp40445
S'description'
p40446
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40447
sS'cpp_type'
p40448
S'bool'
p40449
sS'default'
p40450
S'0'
p40451
sS'name'
p40452
S'use_displaced_mesh'
p40453
sS'required'
p40454
I00
sS'group_name'
p40455
S'Advanced'
p40456
sa(dp40457
S'description'
p40458
S'The name of the variable that this boundary condition applies to\n'
p40459
sS'cpp_type'
p40460
S'std::vector<VariableName>'
p40461
sS'default'
p40462
g3
sS'name'
p40463
S'variable'
p40464
sS'required'
p40465
I01
sS'group_name'
p40466
NsasS'name'
p40467
S'/Postprocessors/SideAverageValue'
p40468
sa(dp40469
S'description'
p40470
g3
sS'subblocks'
p40471
NsS'parameters'
p40472
(lp40473
(dp40474
S'description'
p40475
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40476
sS'cpp_type'
p40477
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p40478
sS'default'
p40479
g3
sS'name'
p40480
S'boundary'
p40481
sS'required'
p40482
I01
sS'group_name'
p40483
Nsa(dp40484
S'description'
p40485
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40486
sS'cpp_type'
p40487
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40488
sS'default'
p40489
g3
sS'name'
p40490
S'control_tags'
p40491
sS'required'
p40492
I00
sS'group_name'
p40493
S'Advanced'
p40494
sa(dp40495
S'description'
p40496
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p40497
sS'cpp_type'
p40498
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40499
sS'default'
p40500
g3
sS'name'
p40501
S'diffusivity'
p40502
sS'required'
p40503
I01
sS'group_name'
p40504
Nsa(dp40505
S'description'
p40506
S'Set the enabled status of the MooseObject.\n'
p40507
sS'cpp_type'
p40508
S'bool'
p40509
sS'default'
p40510
S'1'
p40511
sS'name'
p40512
S'enable'
p40513
sS'required'
p40514
I00
sS'group_name'
p40515
S'Advanced'
p40516
sa(dp40517
S'name'
p40518
S'execute_on'
p40519
sS'cpp_type'
p40520
S'MultiMooseEnum'
p40521
sS'default'
p40522
S'TIMESTEP_END'
p40523
sS'description'
p40524
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40525
sS'required'
p40526
I00
sS'options'
p40527
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40528
sS'group_name'
p40529
Nsa(dp40530
S'description'
p40531
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40532
sS'cpp_type'
p40533
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40534
sS'default'
p40535
g3
sS'name'
p40536
S'outputs'
p40537
sS'required'
p40538
I00
sS'group_name'
p40539
S'Advanced'
p40540
sa(dp40541
S'description'
p40542
g3
sS'cpp_type'
p40543
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40544
sS'default'
p40545
S'SideFluxAverage'
p40546
sS'name'
p40547
S'type'
p40548
sS'required'
p40549
I00
sS'group_name'
p40550
Nsa(dp40551
S'description'
p40552
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40553
sS'cpp_type'
p40554
S'bool'
p40555
sS'default'
p40556
S'0'
p40557
sS'name'
p40558
S'use_displaced_mesh'
p40559
sS'required'
p40560
I00
sS'group_name'
p40561
S'Advanced'
p40562
sa(dp40563
S'description'
p40564
S'The name of the variable that this boundary condition applies to\n'
p40565
sS'cpp_type'
p40566
S'std::vector<VariableName>'
p40567
sS'default'
p40568
g3
sS'name'
p40569
S'variable'
p40570
sS'required'
p40571
I01
sS'group_name'
p40572
NsasS'name'
p40573
S'/Postprocessors/SideFluxAverage'
p40574
sa(dp40575
S'description'
p40576
g3
sS'subblocks'
p40577
NsS'parameters'
p40578
(lp40579
(dp40580
S'description'
p40581
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40582
sS'cpp_type'
p40583
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p40584
sS'default'
p40585
g3
sS'name'
p40586
S'boundary'
p40587
sS'required'
p40588
I01
sS'group_name'
p40589
Nsa(dp40590
S'description'
p40591
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40592
sS'cpp_type'
p40593
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40594
sS'default'
p40595
g3
sS'name'
p40596
S'control_tags'
p40597
sS'required'
p40598
I00
sS'group_name'
p40599
S'Advanced'
p40600
sa(dp40601
S'description'
p40602
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p40603
sS'cpp_type'
p40604
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40605
sS'default'
p40606
g3
sS'name'
p40607
S'diffusivity'
p40608
sS'required'
p40609
I01
sS'group_name'
p40610
Nsa(dp40611
S'description'
p40612
S'Set the enabled status of the MooseObject.\n'
p40613
sS'cpp_type'
p40614
S'bool'
p40615
sS'default'
p40616
S'1'
p40617
sS'name'
p40618
S'enable'
p40619
sS'required'
p40620
I00
sS'group_name'
p40621
S'Advanced'
p40622
sa(dp40623
S'name'
p40624
S'execute_on'
p40625
sS'cpp_type'
p40626
S'MultiMooseEnum'
p40627
sS'default'
p40628
S'TIMESTEP_END'
p40629
sS'description'
p40630
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40631
sS'required'
p40632
I00
sS'options'
p40633
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40634
sS'group_name'
p40635
Nsa(dp40636
S'description'
p40637
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40638
sS'cpp_type'
p40639
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40640
sS'default'
p40641
g3
sS'name'
p40642
S'outputs'
p40643
sS'required'
p40644
I00
sS'group_name'
p40645
S'Advanced'
p40646
sa(dp40647
S'description'
p40648
g3
sS'cpp_type'
p40649
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40650
sS'default'
p40651
S'SideFluxIntegral'
p40652
sS'name'
p40653
S'type'
p40654
sS'required'
p40655
I00
sS'group_name'
p40656
Nsa(dp40657
S'description'
p40658
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40659
sS'cpp_type'
p40660
S'bool'
p40661
sS'default'
p40662
S'0'
p40663
sS'name'
p40664
S'use_displaced_mesh'
p40665
sS'required'
p40666
I00
sS'group_name'
p40667
S'Advanced'
p40668
sa(dp40669
S'description'
p40670
S'The name of the variable that this boundary condition applies to\n'
p40671
sS'cpp_type'
p40672
S'std::vector<VariableName>'
p40673
sS'default'
p40674
g3
sS'name'
p40675
S'variable'
p40676
sS'required'
p40677
I01
sS'group_name'
p40678
NsasS'name'
p40679
S'/Postprocessors/SideFluxIntegral'
p40680
sa(dp40681
S'description'
p40682
g3
sS'subblocks'
p40683
NsS'parameters'
p40684
(lp40685
(dp40686
S'description'
p40687
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40688
sS'cpp_type'
p40689
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p40690
sS'default'
p40691
g3
sS'name'
p40692
S'boundary'
p40693
sS'required'
p40694
I01
sS'group_name'
p40695
Nsa(dp40696
S'description'
p40697
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40698
sS'cpp_type'
p40699
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40700
sS'default'
p40701
g3
sS'name'
p40702
S'control_tags'
p40703
sS'required'
p40704
I00
sS'group_name'
p40705
S'Advanced'
p40706
sa(dp40707
S'description'
p40708
S'Set the enabled status of the MooseObject.\n'
p40709
sS'cpp_type'
p40710
S'bool'
p40711
sS'default'
p40712
S'1'
p40713
sS'name'
p40714
S'enable'
p40715
sS'required'
p40716
I00
sS'group_name'
p40717
S'Advanced'
p40718
sa(dp40719
S'name'
p40720
S'execute_on'
p40721
sS'cpp_type'
p40722
S'MultiMooseEnum'
p40723
sS'default'
p40724
S'TIMESTEP_END'
p40725
sS'description'
p40726
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40727
sS'required'
p40728
I00
sS'options'
p40729
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40730
sS'group_name'
p40731
Nsa(dp40732
S'description'
p40733
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40734
sS'cpp_type'
p40735
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40736
sS'default'
p40737
g3
sS'name'
p40738
S'outputs'
p40739
sS'required'
p40740
I00
sS'group_name'
p40741
S'Advanced'
p40742
sa(dp40743
S'description'
p40744
g3
sS'cpp_type'
p40745
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40746
sS'default'
p40747
S'SideIntegralVariablePostprocessor'
p40748
sS'name'
p40749
S'type'
p40750
sS'required'
p40751
I00
sS'group_name'
p40752
Nsa(dp40753
S'description'
p40754
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40755
sS'cpp_type'
p40756
S'bool'
p40757
sS'default'
p40758
S'0'
p40759
sS'name'
p40760
S'use_displaced_mesh'
p40761
sS'required'
p40762
I00
sS'group_name'
p40763
S'Advanced'
p40764
sa(dp40765
S'description'
p40766
S'The name of the variable that this boundary condition applies to\n'
p40767
sS'cpp_type'
p40768
S'std::vector<VariableName>'
p40769
sS'default'
p40770
g3
sS'name'
p40771
S'variable'
p40772
sS'required'
p40773
I01
sS'group_name'
p40774
NsasS'name'
p40775
S'/Postprocessors/SideIntegralVariablePostprocessor'
p40776
sa(dp40777
S'description'
p40778
S'A postprocessor for reporting the extreme value of another postprocessor over time.\n'
p40779
sS'subblocks'
p40780
NsS'parameters'
p40781
(lp40782
(dp40783
S'description'
p40784
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40785
sS'cpp_type'
p40786
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40787
sS'default'
p40788
g3
sS'name'
p40789
S'control_tags'
p40790
sS'required'
p40791
I00
sS'group_name'
p40792
S'Advanced'
p40793
sa(dp40794
S'description'
p40795
S'Set the enabled status of the MooseObject.\n'
p40796
sS'cpp_type'
p40797
S'bool'
p40798
sS'default'
p40799
S'1'
p40800
sS'name'
p40801
S'enable'
p40802
sS'required'
p40803
I00
sS'group_name'
p40804
S'Advanced'
p40805
sa(dp40806
S'name'
p40807
S'execute_on'
p40808
sS'cpp_type'
p40809
S'MultiMooseEnum'
p40810
sS'default'
p40811
S'TIMESTEP_END'
p40812
sS'description'
p40813
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40814
sS'required'
p40815
I00
sS'options'
p40816
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40817
sS'group_name'
p40818
Nsa(dp40819
S'description'
p40820
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40821
sS'cpp_type'
p40822
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40823
sS'default'
p40824
g3
sS'name'
p40825
S'outputs'
p40826
sS'required'
p40827
I00
sS'group_name'
p40828
S'Advanced'
p40829
sa(dp40830
S'description'
p40831
S'The name of the postprocessor used for reporting time extreme values\n'
p40832
sS'cpp_type'
p40833
S'PostprocessorName'
p40834
sS'default'
p40835
g3
sS'name'
p40836
S'postprocessor'
p40837
sS'required'
p40838
I01
sS'group_name'
p40839
Nsa(dp40840
S'description'
p40841
g3
sS'cpp_type'
p40842
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40843
sS'default'
p40844
S'TimeExtremeValue'
p40845
sS'name'
p40846
S'type'
p40847
sS'required'
p40848
I00
sS'group_name'
p40849
Nsa(dp40850
S'description'
p40851
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40852
sS'cpp_type'
p40853
S'bool'
p40854
sS'default'
p40855
S'0'
p40856
sS'name'
p40857
S'use_displaced_mesh'
p40858
sS'required'
p40859
I00
sS'group_name'
p40860
S'Advanced'
p40861
sa(dp40862
S'name'
p40863
S'value_type'
p40864
sS'cpp_type'
p40865
S'MooseEnum'
p40866
sS'default'
p40867
S'max'
p40868
sS'description'
p40869
S"Type of extreme value to return.'max' returns the maximum value.'min' returns the minimum value.'abs_max' returns the maximum absolute value.'abs_min' returns the minimum absolute value.\n"
p40870
sS'required'
p40871
I00
sS'options'
p40872
S'max min abs_max abs_min'
p40873
sS'group_name'
p40874
NsasS'name'
p40875
S'/Postprocessors/TimeExtremeValue'
p40876
sa(dp40877
S'description'
p40878
g3
sS'subblocks'
p40879
NsS'parameters'
p40880
(lp40881
(dp40882
S'description'
p40883
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40884
sS'cpp_type'
p40885
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40886
sS'default'
p40887
g3
sS'name'
p40888
S'control_tags'
p40889
sS'required'
p40890
I00
sS'group_name'
p40891
S'Advanced'
p40892
sa(dp40893
S'description'
p40894
S'Set the enabled status of the MooseObject.\n'
p40895
sS'cpp_type'
p40896
S'bool'
p40897
sS'default'
p40898
S'1'
p40899
sS'name'
p40900
S'enable'
p40901
sS'required'
p40902
I00
sS'group_name'
p40903
S'Advanced'
p40904
sa(dp40905
S'name'
p40906
S'execute_on'
p40907
sS'cpp_type'
p40908
S'MultiMooseEnum'
p40909
sS'default'
p40910
S'TIMESTEP_END'
p40911
sS'description'
p40912
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40913
sS'required'
p40914
I00
sS'options'
p40915
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40916
sS'group_name'
p40917
Nsa(dp40918
S'description'
p40919
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40920
sS'cpp_type'
p40921
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40922
sS'default'
p40923
g3
sS'name'
p40924
S'outputs'
p40925
sS'required'
p40926
I00
sS'group_name'
p40927
S'Advanced'
p40928
sa(dp40929
S'description'
p40930
g3
sS'cpp_type'
p40931
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40932
sS'default'
p40933
S'TimestepSize'
p40934
sS'name'
p40935
S'type'
p40936
sS'required'
p40937
I00
sS'group_name'
p40938
Nsa(dp40939
S'description'
p40940
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40941
sS'cpp_type'
p40942
S'bool'
p40943
sS'default'
p40944
S'0'
p40945
sS'name'
p40946
S'use_displaced_mesh'
p40947
sS'required'
p40948
I00
sS'group_name'
p40949
S'Advanced'
p40950
sasS'name'
p40951
S'/Postprocessors/TimestepSize'
p40952
sa(dp40953
S'description'
p40954
g3
sS'subblocks'
p40955
NsS'parameters'
p40956
(lp40957
(dp40958
S'description'
p40959
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40960
sS'cpp_type'
p40961
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40962
sS'default'
p40963
g3
sS'name'
p40964
S'control_tags'
p40965
sS'required'
p40966
I00
sS'group_name'
p40967
S'Advanced'
p40968
sa(dp40969
S'description'
p40970
S'Set the enabled status of the MooseObject.\n'
p40971
sS'cpp_type'
p40972
S'bool'
p40973
sS'default'
p40974
S'1'
p40975
sS'name'
p40976
S'enable'
p40977
sS'required'
p40978
I00
sS'group_name'
p40979
S'Advanced'
p40980
sa(dp40981
S'name'
p40982
S'execute_on'
p40983
sS'cpp_type'
p40984
S'MultiMooseEnum'
p40985
sS'default'
p40986
S'TIMESTEP_END'
p40987
sS'description'
p40988
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40989
sS'required'
p40990
I00
sS'options'
p40991
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40992
sS'group_name'
p40993
Nsa(dp40994
S'description'
p40995
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40996
sS'cpp_type'
p40997
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40998
sS'default'
p40999
g3
sS'name'
p41000
S'outputs'
p41001
sS'required'
p41002
I00
sS'group_name'
p41003
S'Advanced'
p41004
sa(dp41005
S'description'
p41006
g3
sS'cpp_type'
p41007
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41008
sS'default'
p41009
S'TotalVariableValue'
p41010
sS'name'
p41011
S'type'
p41012
sS'required'
p41013
I00
sS'group_name'
p41014
Nsa(dp41015
S'description'
p41016
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41017
sS'cpp_type'
p41018
S'bool'
p41019
sS'default'
p41020
S'0'
p41021
sS'name'
p41022
S'use_displaced_mesh'
p41023
sS'required'
p41024
I00
sS'group_name'
p41025
S'Advanced'
p41026
sa(dp41027
S'description'
p41028
S'The name of the postprocessor\n'
p41029
sS'cpp_type'
p41030
S'PostprocessorName'
p41031
sS'default'
p41032
g3
sS'name'
p41033
S'value'
p41034
sS'required'
p41035
I00
sS'group_name'
p41036
NsasS'name'
p41037
S'/Postprocessors/TotalVariableValue'
p41038
sa(dp41039
S'description'
p41040
g3
sS'subblocks'
p41041
NsS'parameters'
p41042
(lp41043
(dp41044
S'description'
p41045
S'The list of block ids (SubdomainID) that this object will be applied\n'
p41046
sS'cpp_type'
p41047
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p41048
sS'default'
p41049
g3
sS'name'
p41050
S'block'
p41051
sS'required'
p41052
I00
sS'group_name'
p41053
Nsa(dp41054
S'description'
p41055
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41056
sS'cpp_type'
p41057
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41058
sS'default'
p41059
g3
sS'name'
p41060
S'control_tags'
p41061
sS'required'
p41062
I00
sS'group_name'
p41063
S'Advanced'
p41064
sa(dp41065
S'description'
p41066
S'Set the enabled status of the MooseObject.\n'
p41067
sS'cpp_type'
p41068
S'bool'
p41069
sS'default'
p41070
S'1'
p41071
sS'name'
p41072
S'enable'
p41073
sS'required'
p41074
I00
sS'group_name'
p41075
S'Advanced'
p41076
sa(dp41077
S'name'
p41078
S'execute_on'
p41079
sS'cpp_type'
p41080
S'MultiMooseEnum'
p41081
sS'default'
p41082
S'TIMESTEP_END'
p41083
sS'description'
p41084
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p41085
sS'required'
p41086
I00
sS'options'
p41087
S'none initial linear nonlinear timestep_end timestep_begin custom'
p41088
sS'group_name'
p41089
Nsa(dp41090
S'description'
p41091
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p41092
sS'cpp_type'
p41093
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p41094
sS'default'
p41095
g3
sS'name'
p41096
S'outputs'
p41097
sS'required'
p41098
I00
sS'group_name'
p41099
S'Advanced'
p41100
sa(dp41101
S'description'
p41102
S'The name of the second variable in the inner product (variable, second_variable)\n'
p41103
sS'cpp_type'
p41104
S'std::vector<VariableName>'
p41105
sS'default'
p41106
g3
sS'name'
p41107
S'second_variable'
p41108
sS'required'
p41109
I01
sS'group_name'
p41110
Nsa(dp41111
S'description'
p41112
S'The seed for the master random number generator\n'
p41113
sS'cpp_type'
p41114
S'unsigned int'
p41115
sS'default'
p41116
S'0'
p41117
sS'name'
p41118
S'seed'
p41119
sS'required'
p41120
I00
sS'group_name'
p41121
S'Advanced'
p41122
sa(dp41123
S'description'
p41124
g3
sS'cpp_type'
p41125
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41126
sS'default'
p41127
S'VariableInnerProduct'
p41128
sS'name'
p41129
S'type'
p41130
sS'required'
p41131
I00
sS'group_name'
p41132
Nsa(dp41133
S'description'
p41134
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41135
sS'cpp_type'
p41136
S'bool'
p41137
sS'default'
p41138
S'0'
p41139
sS'name'
p41140
S'use_displaced_mesh'
p41141
sS'required'
p41142
I00
sS'group_name'
p41143
S'Advanced'
p41144
sa(dp41145
S'description'
p41146
S'The name of the variable that this object operates on\n'
p41147
sS'cpp_type'
p41148
S'std::vector<VariableName>'
p41149
sS'default'
p41150
g3
sS'name'
p41151
S'variable'
p41152
sS'required'
p41153
I01
sS'group_name'
p41154
NsasS'name'
p41155
S'/Postprocessors/VariableInnerProduct'
p41156
sa(dp41157
S'description'
p41158
g3
sS'subblocks'
p41159
NsS'parameters'
p41160
(lp41161
(dp41162
S'description'
p41163
S'The list of block ids (SubdomainID) that this object will be applied\n'
p41164
sS'cpp_type'
p41165
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p41166
sS'default'
p41167
g3
sS'name'
p41168
S'block'
p41169
sS'required'
p41170
I00
sS'group_name'
p41171
Nsa(dp41172
S'description'
p41173
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41174
sS'cpp_type'
p41175
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41176
sS'default'
p41177
g3
sS'name'
p41178
S'control_tags'
p41179
sS'required'
p41180
I00
sS'group_name'
p41181
S'Advanced'
p41182
sa(dp41183
S'description'
p41184
S'Set the enabled status of the MooseObject.\n'
p41185
sS'cpp_type'
p41186
S'bool'
p41187
sS'default'
p41188
S'1'
p41189
sS'name'
p41190
S'enable'
p41191
sS'required'
p41192
I00
sS'group_name'
p41193
S'Advanced'
p41194
sa(dp41195
S'name'
p41196
S'execute_on'
p41197
sS'cpp_type'
p41198
S'MultiMooseEnum'
p41199
sS'default'
p41200
S'TIMESTEP_END'
p41201
sS'description'
p41202
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p41203
sS'required'
p41204
I00
sS'options'
p41205
S'none initial linear nonlinear timestep_end timestep_begin custom'
p41206
sS'group_name'
p41207
Nsa(dp41208
S'description'
p41209
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p41210
sS'cpp_type'
p41211
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p41212
sS'default'
p41213
g3
sS'name'
p41214
S'outputs'
p41215
sS'required'
p41216
I00
sS'group_name'
p41217
S'Advanced'
p41218
sa(dp41219
S'description'
p41220
S'The seed for the master random number generator\n'
p41221
sS'cpp_type'
p41222
S'unsigned int'
p41223
sS'default'
p41224
S'0'
p41225
sS'name'
p41226
S'seed'
p41227
sS'required'
p41228
I00
sS'group_name'
p41229
S'Advanced'
p41230
sa(dp41231
S'description'
p41232
g3
sS'cpp_type'
p41233
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41234
sS'default'
p41235
S'VolumePostprocessor'
p41236
sS'name'
p41237
S'type'
p41238
sS'required'
p41239
I00
sS'group_name'
p41240
Nsa(dp41241
S'description'
p41242
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41243
sS'cpp_type'
p41244
S'bool'
p41245
sS'default'
p41246
S'0'
p41247
sS'name'
p41248
S'use_displaced_mesh'
p41249
sS'required'
p41250
I00
sS'group_name'
p41251
S'Advanced'
p41252
sasS'name'
p41253
S'/Postprocessors/VolumePostprocessor'
p41254
sasS'parameters'
p41255
NsS'name'
p41256
S'/Postprocessors'
p41257
sa(dp41258
S'description'
p41259
g3
sS'subblocks'
p41260
(lp41261
(dp41262
S'description'
p41263
g3
sS'subblocks'
p41264
(lp41265
(dp41266
S'description'
p41267
g3
sS'subblocks'
p41268
NsS'parameters'
p41269
(lp41270
(dp41271
S'name'
p41272
S'petsc_options'
p41273
sS'cpp_type'
p41274
S'MultiMooseEnum'
p41275
sS'default'
p41276
g3
sS'description'
p41277
S'Singleton PETSc options\n'
p41278
sS'required'
p41279
I00
sS'options'
p41280
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p41281
sS'group_name'
p41282
Nsa(dp41283
S'name'
p41284
S'petsc_options_iname'
p41285
sS'cpp_type'
p41286
S'MultiMooseEnum'
p41287
sS'default'
p41288
g3
sS'description'
p41289
S'Names of PETSc name/value pairs\n'
p41290
sS'required'
p41291
I00
sS'options'
p41292
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p41293
sS'group_name'
p41294
Nsa(dp41295
S'description'
p41296
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p41297
sS'cpp_type'
p41298
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41299
sS'default'
p41300
g3
sS'name'
p41301
S'petsc_options_value'
p41302
sS'required'
p41303
I00
sS'group_name'
p41304
Nsa(dp41305
S'description'
p41306
S'Classname of the split object\n'
p41307
sS'cpp_type'
p41308
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41309
sS'default'
p41310
S'Split'
p41311
sS'name'
p41312
S'type'
p41313
sS'required'
p41314
I01
sS'group_name'
p41315
Nsa(dp41316
S'description'
p41317
S'variables for this field\n'
p41318
sS'cpp_type'
p41319
S'std::__1::vector<NonlinearVariableName, std::__1::allocator<NonlinearVariableName> >'
p41320
sS'default'
p41321
g3
sS'name'
p41322
S'vars'
p41323
sS'required'
p41324
I00
sS'group_name'
p41325
NsasS'name'
p41326
S'/Preconditioning/*/*'
p41327
sa(dp41328
S'description'
p41329
g3
sS'subblocks'
p41330
NsS'parameters'
p41331
(lp41332
(dp41333
S'description'
p41334
S'Mesh blocks Split operates on (omitting this implies "all blocks"\n'
p41335
sS'cpp_type'
p41336
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p41337
sS'default'
p41338
g3
sS'name'
p41339
S'blocks'
p41340
sS'required'
p41341
I00
sS'group_name'
p41342
Nsa(dp41343
S'description'
p41344
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41345
sS'cpp_type'
p41346
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41347
sS'default'
p41348
g3
sS'name'
p41349
S'control_tags'
p41350
sS'required'
p41351
I00
sS'group_name'
p41352
S'Advanced'
p41353
sa(dp41354
S'description'
p41355
S'Set the enabled status of the MooseObject.\n'
p41356
sS'cpp_type'
p41357
S'bool'
p41358
sS'default'
p41359
S'1'
p41360
sS'name'
p41361
S'enable'
p41362
sS'required'
p41363
I00
sS'group_name'
p41364
S'Advanced'
p41365
sa(dp41366
S'name'
p41367
S'petsc_options'
p41368
sS'cpp_type'
p41369
S'MultiMooseEnum'
p41370
sS'default'
p41371
g3
sS'description'
p41372
S'PETSc flags for the FieldSplit solver\n'
p41373
sS'required'
p41374
I00
sS'options'
p41375
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p41376
sS'group_name'
p41377
Nsa(dp41378
S'description'
p41379
S'PETSc option names for the FieldSplit solver\n'
p41380
sS'cpp_type'
p41381
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41382
sS'default'
p41383
g3
sS'name'
p41384
S'petsc_options_iname'
p41385
sS'required'
p41386
I00
sS'group_name'
p41387
Nsa(dp41388
S'description'
p41389
S'PETSc option values for the FieldSplit solver\n'
p41390
sS'cpp_type'
p41391
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41392
sS'default'
p41393
g3
sS'name'
p41394
S'petsc_options_value'
p41395
sS'required'
p41396
I00
sS'group_name'
p41397
Nsa(dp41398
S'name'
p41399
S'schur_ainv'
p41400
sS'cpp_type'
p41401
S'MooseEnum'
p41402
sS'default'
p41403
S'diag'
p41404
sS'description'
p41405
S'Type of approximation to inv(A) used when forming S = D - C inv(A) B\n'
p41406
sS'required'
p41407
I00
sS'options'
p41408
S'diag lump'
p41409
sS'group_name'
p41410
Nsa(dp41411
S'name'
p41412
S'schur_pre'
p41413
sS'cpp_type'
p41414
S'MooseEnum'
p41415
sS'default'
p41416
S'S'
p41417
sS'description'
p41418
S'Type of Schur complement preconditioner matrix\n'
p41419
sS'required'
p41420
I00
sS'options'
p41421
S'S Sp A11'
p41422
sS'group_name'
p41423
Nsa(dp41424
S'name'
p41425
S'schur_type'
p41426
sS'cpp_type'
p41427
S'MooseEnum'
p41428
sS'default'
p41429
S'full'
p41430
sS'description'
p41431
S'Type of Schur complement\n'
p41432
sS'required'
p41433
I00
sS'options'
p41434
S'full upper lower'
p41435
sS'group_name'
p41436
Nsa(dp41437
S'description'
p41438
S'Sidesets Split operates on (omitting this implies "no sidesets"\n'
p41439
sS'cpp_type'
p41440
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p41441
sS'default'
p41442
g3
sS'name'
p41443
S'sides'
p41444
sS'required'
p41445
I00
sS'group_name'
p41446
Nsa(dp41447
S'description'
p41448
S'The names of the splits (subsystems) in the decomposition of this split\n'
p41449
sS'cpp_type'
p41450
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41451
sS'default'
p41452
g3
sS'name'
p41453
S'splitting'
p41454
sS'required'
p41455
I00
sS'group_name'
p41456
Nsa(dp41457
S'name'
p41458
S'splitting_type'
p41459
sS'cpp_type'
p41460
S'MooseEnum'
p41461
sS'default'
p41462
S'additive'
p41463
sS'description'
p41464
S'Split decomposition type\n'
p41465
sS'required'
p41466
I00
sS'options'
p41467
S'additive multiplicative symmetric_multiplicative schur'
p41468
sS'group_name'
p41469
Nsa(dp41470
S'description'
p41471
g3
sS'cpp_type'
p41472
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41473
sS'default'
p41474
S'Split'
p41475
sS'name'
p41476
S'type'
p41477
sS'required'
p41478
I00
sS'group_name'
p41479
Nsa(dp41480
S'description'
p41481
S'Sidesets Split excludes (omitting this implies "do not exclude any sidesets"\n'
p41482
sS'cpp_type'
p41483
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p41484
sS'default'
p41485
g3
sS'name'
p41486
S'unsides'
p41487
sS'required'
p41488
I00
sS'group_name'
p41489
Nsa(dp41490
S'description'
p41491
S'Variables Split operates on (omitting this implies "all variables"\n'
p41492
sS'cpp_type'
p41493
S'std::__1::vector<NonlinearVariableName, std::__1::allocator<NonlinearVariableName> >'
p41494
sS'default'
p41495
g3
sS'name'
p41496
S'vars'
p41497
sS'required'
p41498
I00
sS'group_name'
p41499
NsasS'name'
p41500
S'/Preconditioning/*/Split'
p41501
sasS'parameters'
p41502
(lp41503
(dp41504
S'description'
p41505
S'A string representing the Moose Object that will be built by this Action\n'
p41506
sS'cpp_type'
p41507
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41508
sS'default'
p41509
g3
sS'name'
p41510
S'type'
p41511
sS'required'
p41512
I01
sS'group_name'
p41513
NsasS'name'
p41514
S'/Preconditioning/*'
p41515
sa(dp41516
S'description'
p41517
g3
sS'subblocks'
p41518
NsS'parameters'
p41519
(lp41520
(dp41521
S'description'
p41522
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41523
sS'cpp_type'
p41524
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41525
sS'default'
p41526
g3
sS'name'
p41527
S'control_tags'
p41528
sS'required'
p41529
I00
sS'group_name'
p41530
S'Advanced'
p41531
sa(dp41532
S'description'
p41533
S'Set the enabled status of the MooseObject.\n'
p41534
sS'cpp_type'
p41535
S'bool'
p41536
sS'default'
p41537
S'1'
p41538
sS'name'
p41539
S'enable'
p41540
sS'required'
p41541
I00
sS'group_name'
p41542
S'Advanced'
p41543
sa(dp41544
S'description'
p41545
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p41546
sS'cpp_type'
p41547
S'bool'
p41548
sS'default'
p41549
S'0'
p41550
sS'name'
p41551
S'full'
p41552
sS'required'
p41553
I00
sS'group_name'
p41554
Nsa(dp41555
S'description'
p41556
S'Set to true if you want to add entries into the matrix for degrees of freedom that might be coupled by inspection of the geometric search objects.\n'
p41557
sS'cpp_type'
p41558
S'bool'
p41559
sS'default'
p41560
S'0'
p41561
sS'name'
p41562
S'implicit_geometric_coupling'
p41563
sS'required'
p41564
I00
sS'group_name'
p41565
Nsa(dp41566
S'name'
p41567
S'line_search'
p41568
sS'cpp_type'
p41569
S'MooseEnum'
p41570
sS'default'
p41571
S'default'
p41572
sS'description'
p41573
S'Specifies the line search type (Note: none = basic)\n'
p41574
sS'required'
p41575
I00
sS'options'
p41576
S'default shell none basic l2 bt cp'
p41577
sS'group_name'
p41578
Nsa(dp41579
S'description'
p41580
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p41581
sS'cpp_type'
p41582
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41583
sS'default'
p41584
g3
sS'name'
p41585
S'off_diag_column'
p41586
sS'required'
p41587
I00
sS'group_name'
p41588
Nsa(dp41589
S'description'
p41590
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p41591
sS'cpp_type'
p41592
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41593
sS'default'
p41594
g3
sS'name'
p41595
S'off_diag_row'
p41596
sS'required'
p41597
I00
sS'group_name'
p41598
Nsa(dp41599
S'name'
p41600
S'pc_side'
p41601
sS'cpp_type'
p41602
S'MooseEnum'
p41603
sS'default'
p41604
S'right'
p41605
sS'description'
p41606
S'Preconditioning side\n'
p41607
sS'required'
p41608
I00
sS'options'
p41609
S'left right symmetric'
p41610
sS'group_name'
p41611
Nsa(dp41612
S'name'
p41613
S'petsc_options'
p41614
sS'cpp_type'
p41615
S'MultiMooseEnum'
p41616
sS'default'
p41617
g3
sS'description'
p41618
S'Singleton PETSc options\n'
p41619
sS'required'
p41620
I00
sS'options'
p41621
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p41622
sS'group_name'
p41623
Nsa(dp41624
S'name'
p41625
S'petsc_options_iname'
p41626
sS'cpp_type'
p41627
S'MultiMooseEnum'
p41628
sS'default'
p41629
g3
sS'description'
p41630
S'Names of PETSc name/value pairs\n'
p41631
sS'required'
p41632
I00
sS'options'
p41633
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p41634
sS'group_name'
p41635
Nsa(dp41636
S'description'
p41637
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p41638
sS'cpp_type'
p41639
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41640
sS'default'
p41641
g3
sS'name'
p41642
S'petsc_options_value'
p41643
sS'required'
p41644
I00
sS'group_name'
p41645
Nsa(dp41646
S'name'
p41647
S'solve_type'
p41648
sS'cpp_type'
p41649
S'MooseEnum'
p41650
sS'default'
p41651
g3
sS'description'
p41652
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p41653
sS'required'
p41654
I00
sS'options'
p41655
S'PJFNK JFNK NEWTON FD LINEAR'
p41656
sS'group_name'
p41657
Nsa(dp41658
S'description'
p41659
g3
sS'cpp_type'
p41660
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41661
sS'default'
p41662
S'FDP'
p41663
sS'name'
p41664
S'type'
p41665
sS'required'
p41666
I00
sS'group_name'
p41667
NsasS'name'
p41668
S'/Preconditioning/FDP'
p41669
sa(dp41670
S'description'
p41671
g3
sS'subblocks'
p41672
NsS'parameters'
p41673
(lp41674
(dp41675
S'description'
p41676
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41677
sS'cpp_type'
p41678
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41679
sS'default'
p41680
g3
sS'name'
p41681
S'control_tags'
p41682
sS'required'
p41683
I00
sS'group_name'
p41684
S'Advanced'
p41685
sa(dp41686
S'description'
p41687
S'Set the enabled status of the MooseObject.\n'
p41688
sS'cpp_type'
p41689
S'bool'
p41690
sS'default'
p41691
S'1'
p41692
sS'name'
p41693
S'enable'
p41694
sS'required'
p41695
I00
sS'group_name'
p41696
S'Advanced'
p41697
sa(dp41698
S'description'
p41699
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p41700
sS'cpp_type'
p41701
S'bool'
p41702
sS'default'
p41703
S'1'
p41704
sS'name'
p41705
S'full'
p41706
sS'required'
p41707
I00
sS'group_name'
p41708
Nsa(dp41709
S'name'
p41710
S'line_search'
p41711
sS'cpp_type'
p41712
S'MooseEnum'
p41713
sS'default'
p41714
S'default'
p41715
sS'description'
p41716
S'Specifies the line search type (Note: none = basic)\n'
p41717
sS'required'
p41718
I00
sS'options'
p41719
S'default shell none basic l2 bt cp'
p41720
sS'group_name'
p41721
Nsa(dp41722
S'description'
p41723
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p41724
sS'cpp_type'
p41725
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41726
sS'default'
p41727
g3
sS'name'
p41728
S'off_diag_column'
p41729
sS'required'
p41730
I00
sS'group_name'
p41731
Nsa(dp41732
S'description'
p41733
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p41734
sS'cpp_type'
p41735
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41736
sS'default'
p41737
g3
sS'name'
p41738
S'off_diag_row'
p41739
sS'required'
p41740
I00
sS'group_name'
p41741
Nsa(dp41742
S'name'
p41743
S'pc_side'
p41744
sS'cpp_type'
p41745
S'MooseEnum'
p41746
sS'default'
p41747
S'right'
p41748
sS'description'
p41749
S'Preconditioning side\n'
p41750
sS'required'
p41751
I00
sS'options'
p41752
S'left right symmetric'
p41753
sS'group_name'
p41754
Nsa(dp41755
S'name'
p41756
S'petsc_options'
p41757
sS'cpp_type'
p41758
S'MultiMooseEnum'
p41759
sS'default'
p41760
g3
sS'description'
p41761
S'Singleton PETSc options\n'
p41762
sS'required'
p41763
I00
sS'options'
p41764
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p41765
sS'group_name'
p41766
Nsa(dp41767
S'name'
p41768
S'petsc_options_iname'
p41769
sS'cpp_type'
p41770
S'MultiMooseEnum'
p41771
sS'default'
p41772
g3
sS'description'
p41773
S'Names of PETSc name/value pairs\n'
p41774
sS'required'
p41775
I00
sS'options'
p41776
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p41777
sS'group_name'
p41778
Nsa(dp41779
S'description'
p41780
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p41781
sS'cpp_type'
p41782
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41783
sS'default'
p41784
g3
sS'name'
p41785
S'petsc_options_value'
p41786
sS'required'
p41787
I00
sS'group_name'
p41788
Nsa(dp41789
S'name'
p41790
S'solve_type'
p41791
sS'cpp_type'
p41792
S'MooseEnum'
p41793
sS'default'
p41794
g3
sS'description'
p41795
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p41796
sS'required'
p41797
I00
sS'options'
p41798
S'PJFNK JFNK NEWTON FD LINEAR'
p41799
sS'group_name'
p41800
Nsa(dp41801
S'description'
p41802
S'entrance to splits, the top split will specify how splits will go.\n'
p41803
sS'cpp_type'
p41804
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41805
sS'default'
p41806
g3
sS'name'
p41807
S'topsplit'
p41808
sS'required'
p41809
I01
sS'group_name'
p41810
Nsa(dp41811
S'description'
p41812
g3
sS'cpp_type'
p41813
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41814
sS'default'
p41815
S'FSP'
p41816
sS'name'
p41817
S'type'
p41818
sS'required'
p41819
I00
sS'group_name'
p41820
NsasS'name'
p41821
S'/Preconditioning/FSP'
p41822
sa(dp41823
S'description'
p41824
g3
sS'subblocks'
p41825
NsS'parameters'
p41826
(lp41827
(dp41828
S'description'
p41829
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41830
sS'cpp_type'
p41831
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41832
sS'default'
p41833
g3
sS'name'
p41834
S'control_tags'
p41835
sS'required'
p41836
I00
sS'group_name'
p41837
S'Advanced'
p41838
sa(dp41839
S'description'
p41840
S'Set the enabled status of the MooseObject.\n'
p41841
sS'cpp_type'
p41842
S'bool'
p41843
sS'default'
p41844
S'1'
p41845
sS'name'
p41846
S'enable'
p41847
sS'required'
p41848
I00
sS'group_name'
p41849
S'Advanced'
p41850
sa(dp41851
S'name'
p41852
S'line_search'
p41853
sS'cpp_type'
p41854
S'MooseEnum'
p41855
sS'default'
p41856
S'default'
p41857
sS'description'
p41858
S'Specifies the line search type (Note: none = basic)\n'
p41859
sS'required'
p41860
I00
sS'options'
p41861
S'default shell none basic l2 bt cp'
p41862
sS'group_name'
p41863
Nsa(dp41864
S'description'
p41865
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p41866
sS'cpp_type'
p41867
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41868
sS'default'
p41869
g3
sS'name'
p41870
S'off_diag_column'
p41871
sS'required'
p41872
I00
sS'group_name'
p41873
Nsa(dp41874
S'description'
p41875
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p41876
sS'cpp_type'
p41877
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41878
sS'default'
p41879
g3
sS'name'
p41880
S'off_diag_row'
p41881
sS'required'
p41882
I00
sS'group_name'
p41883
Nsa(dp41884
S'name'
p41885
S'pc_side'
p41886
sS'cpp_type'
p41887
S'MooseEnum'
p41888
sS'default'
p41889
S'right'
p41890
sS'description'
p41891
S'Preconditioning side\n'
p41892
sS'required'
p41893
I00
sS'options'
p41894
S'left right symmetric'
p41895
sS'group_name'
p41896
Nsa(dp41897
S'name'
p41898
S'petsc_options'
p41899
sS'cpp_type'
p41900
S'MultiMooseEnum'
p41901
sS'default'
p41902
g3
sS'description'
p41903
S'Singleton PETSc options\n'
p41904
sS'required'
p41905
I00
sS'options'
p41906
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p41907
sS'group_name'
p41908
Nsa(dp41909
S'name'
p41910
S'petsc_options_iname'
p41911
sS'cpp_type'
p41912
S'MultiMooseEnum'
p41913
sS'default'
p41914
g3
sS'description'
p41915
S'Names of PETSc name/value pairs\n'
p41916
sS'required'
p41917
I00
sS'options'
p41918
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p41919
sS'group_name'
p41920
Nsa(dp41921
S'description'
p41922
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p41923
sS'cpp_type'
p41924
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41925
sS'default'
p41926
g3
sS'name'
p41927
S'petsc_options_value'
p41928
sS'required'
p41929
I00
sS'group_name'
p41930
Nsa(dp41931
S'description'
p41932
S'TODO: docstring\n'
p41933
sS'cpp_type'
p41934
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41935
sS'default'
p41936
g3
sS'name'
p41937
S'preconditioner'
p41938
sS'required'
p41939
I01
sS'group_name'
p41940
Nsa(dp41941
S'description'
p41942
S"The order the block rows will be solved in.  Put the name of variables here to stand for solving that variable's block row.  A variable may appear more than once (to create cylces if you like).\n"
p41943
sS'cpp_type'
p41944
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41945
sS'default'
p41946
g3
sS'name'
p41947
S'solve_order'
p41948
sS'required'
p41949
I01
sS'group_name'
p41950
Nsa(dp41951
S'name'
p41952
S'solve_type'
p41953
sS'cpp_type'
p41954
S'MooseEnum'
p41955
sS'default'
p41956
g3
sS'description'
p41957
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p41958
sS'required'
p41959
I00
sS'options'
p41960
S'PJFNK JFNK NEWTON FD LINEAR'
p41961
sS'group_name'
p41962
Nsa(dp41963
S'description'
p41964
g3
sS'cpp_type'
p41965
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41966
sS'default'
p41967
S'PBP'
p41968
sS'name'
p41969
S'type'
p41970
sS'required'
p41971
I00
sS'group_name'
p41972
NsasS'name'
p41973
S'/Preconditioning/PBP'
p41974
sa(dp41975
S'description'
p41976
g3
sS'subblocks'
p41977
NsS'parameters'
p41978
(lp41979
(dp41980
S'description'
p41981
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41982
sS'cpp_type'
p41983
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41984
sS'default'
p41985
g3
sS'name'
p41986
S'control_tags'
p41987
sS'required'
p41988
I00
sS'group_name'
p41989
S'Advanced'
p41990
sa(dp41991
S'description'
p41992
S'List multiple space separated groups of comma separated variables. Off-diagonal jacobians will be generated for all pairs within a group.\n'
p41993
sS'cpp_type'
p41994
S'std::__1::vector<NonlinearVariableName, std::__1::allocator<NonlinearVariableName> >'
p41995
sS'default'
p41996
g3
sS'name'
p41997
S'coupled_groups'
p41998
sS'required'
p41999
I00
sS'group_name'
p42000
Nsa(dp42001
S'description'
p42002
S'Set the enabled status of the MooseObject.\n'
p42003
sS'cpp_type'
p42004
S'bool'
p42005
sS'default'
p42006
S'1'
p42007
sS'name'
p42008
S'enable'
p42009
sS'required'
p42010
I00
sS'group_name'
p42011
S'Advanced'
p42012
sa(dp42013
S'description'
p42014
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p42015
sS'cpp_type'
p42016
S'bool'
p42017
sS'default'
p42018
S'0'
p42019
sS'name'
p42020
S'full'
p42021
sS'required'
p42022
I00
sS'group_name'
p42023
Nsa(dp42024
S'name'
p42025
S'line_search'
p42026
sS'cpp_type'
p42027
S'MooseEnum'
p42028
sS'default'
p42029
S'default'
p42030
sS'description'
p42031
S'Specifies the line search type (Note: none = basic)\n'
p42032
sS'required'
p42033
I00
sS'options'
p42034
S'default shell none basic l2 bt cp'
p42035
sS'group_name'
p42036
Nsa(dp42037
S'description'
p42038
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p42039
sS'cpp_type'
p42040
S'std::__1::vector<NonlinearVariableName, std::__1::allocator<NonlinearVariableName> >'
p42041
sS'default'
p42042
g3
sS'name'
p42043
S'off_diag_column'
p42044
sS'required'
p42045
I00
sS'group_name'
p42046
Nsa(dp42047
S'description'
p42048
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p42049
sS'cpp_type'
p42050
S'std::__1::vector<NonlinearVariableName, std::__1::allocator<NonlinearVariableName> >'
p42051
sS'default'
p42052
g3
sS'name'
p42053
S'off_diag_row'
p42054
sS'required'
p42055
I00
sS'group_name'
p42056
Nsa(dp42057
S'name'
p42058
S'pc_side'
p42059
sS'cpp_type'
p42060
S'MooseEnum'
p42061
sS'default'
p42062
S'right'
p42063
sS'description'
p42064
S'Preconditioning side\n'
p42065
sS'required'
p42066
I00
sS'options'
p42067
S'left right symmetric'
p42068
sS'group_name'
p42069
Nsa(dp42070
S'name'
p42071
S'petsc_options'
p42072
sS'cpp_type'
p42073
S'MultiMooseEnum'
p42074
sS'default'
p42075
g3
sS'description'
p42076
S'Singleton PETSc options\n'
p42077
sS'required'
p42078
I00
sS'options'
p42079
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p42080
sS'group_name'
p42081
Nsa(dp42082
S'name'
p42083
S'petsc_options_iname'
p42084
sS'cpp_type'
p42085
S'MultiMooseEnum'
p42086
sS'default'
p42087
g3
sS'description'
p42088
S'Names of PETSc name/value pairs\n'
p42089
sS'required'
p42090
I00
sS'options'
p42091
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p42092
sS'group_name'
p42093
Nsa(dp42094
S'description'
p42095
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p42096
sS'cpp_type'
p42097
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42098
sS'default'
p42099
g3
sS'name'
p42100
S'petsc_options_value'
p42101
sS'required'
p42102
I00
sS'group_name'
p42103
Nsa(dp42104
S'name'
p42105
S'solve_type'
p42106
sS'cpp_type'
p42107
S'MooseEnum'
p42108
sS'default'
p42109
g3
sS'description'
p42110
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p42111
sS'required'
p42112
I00
sS'options'
p42113
S'PJFNK JFNK NEWTON FD LINEAR'
p42114
sS'group_name'
p42115
Nsa(dp42116
S'description'
p42117
g3
sS'cpp_type'
p42118
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42119
sS'default'
p42120
S'SMP'
p42121
sS'name'
p42122
S'type'
p42123
sS'required'
p42124
I00
sS'group_name'
p42125
NsasS'name'
p42126
S'/Preconditioning/SMP'
p42127
sasS'parameters'
p42128
NsS'name'
p42129
S'/Preconditioning'
p42130
sa(dp42131
S'description'
p42132
g3
sS'subblocks'
p42133
(lp42134
(dp42135
S'description'
p42136
g3
sS'subblocks'
p42137
(lp42138
(dp42139
S'description'
p42140
g3
sS'subblocks'
p42141
NsS'parameters'
p42142
(lp42143
(dp42144
S'description'
p42145
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42146
sS'cpp_type'
p42147
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42148
sS'default'
p42149
g3
sS'name'
p42150
S'control_tags'
p42151
sS'required'
p42152
I00
sS'group_name'
p42153
S'Advanced'
p42154
sa(dp42155
S'description'
p42156
S'Set the enabled status of the MooseObject.\n'
p42157
sS'cpp_type'
p42158
S'bool'
p42159
sS'default'
p42160
S'1'
p42161
sS'name'
p42162
S'enable'
p42163
sS'required'
p42164
I00
sS'group_name'
p42165
S'Advanced'
p42166
sa(dp42167
S'description'
p42168
g3
sS'cpp_type'
p42169
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42170
sS'default'
p42171
S'DisplacedProblem'
p42172
sS'name'
p42173
S'type'
p42174
sS'required'
p42175
I00
sS'group_name'
p42176
NsasS'name'
p42177
S'/Problem/<type>/DisplacedProblem'
p42178
sa(dp42179
S'description'
p42180
g3
sS'subblocks'
p42181
NsS'parameters'
p42182
(lp42183
(dp42184
S'description'
p42185
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42186
sS'cpp_type'
p42187
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42188
sS'default'
p42189
g3
sS'name'
p42190
S'control_tags'
p42191
sS'required'
p42192
I00
sS'group_name'
p42193
S'Advanced'
p42194
sa(dp42195
S'description'
p42196
S'Set the enabled status of the MooseObject.\n'
p42197
sS'cpp_type'
p42198
S'bool'
p42199
sS'default'
p42200
S'1'
p42201
sS'name'
p42202
S'enable'
p42203
sS'required'
p42204
I00
sS'group_name'
p42205
S'Advanced'
p42206
sa(dp42207
S'description'
p42208
S'This causes PETSc to error if it had to reallocate memory in the Jacobian matrix due to not having enough nonzeros\n'
p42209
sS'cpp_type'
p42210
S'bool'
p42211
sS'default'
p42212
S'0'
p42213
sS'name'
p42214
S'error_on_jacobian_nonzero_reallocation'
p42215
sS'required'
p42216
I00
sS'group_name'
p42217
Nsa(dp42218
S'description'
p42219
S'EXPERIMENTAL: If true, a sub_app may use a restart file instead of using of using the master backup file\n'
p42220
sS'cpp_type'
p42221
S'bool'
p42222
sS'default'
p42223
S'0'
p42224
sS'name'
p42225
S'force_restart'
p42226
sS'required'
p42227
I00
sS'group_name'
p42228
Nsa(dp42229
S'description'
p42230
S'The dimension of eigen subspaces\n'
p42231
sS'cpp_type'
p42232
S'unsigned int'
p42233
sS'default'
p42234
S'3'
p42235
sS'name'
p42236
S'n_basis_vectors'
p42237
sS'required'
p42238
I00
sS'group_name'
p42239
Nsa(dp42240
S'description'
p42241
S'The number of eigen pairs\n'
p42242
sS'cpp_type'
p42243
S'unsigned int'
p42244
sS'default'
p42245
S'1'
p42246
sS'name'
p42247
S'n_eigen_pairs'
p42248
sS'required'
p42249
I00
sS'group_name'
p42250
Nsa(dp42251
S'description'
p42252
S'The dimension of the near nullspace\n'
p42253
sS'cpp_type'
p42254
S'unsigned int'
p42255
sS'default'
p42256
S'0'
p42257
sS'name'
p42258
S'near_null_space_dimension'
p42259
sS'required'
p42260
I00
sS'group_name'
p42261
Nsa(dp42262
S'description'
p42263
S'The dimension of the nullspace\n'
p42264
sS'cpp_type'
p42265
S'unsigned int'
p42266
sS'default'
p42267
S'0'
p42268
sS'name'
p42269
S'null_space_dimension'
p42270
sS'required'
p42271
I00
sS'group_name'
p42272
Nsa(dp42273
S'description'
p42274
S'Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n'
p42275
sS'cpp_type'
p42276
S'bool'
p42277
sS'default'
p42278
S'1'
p42279
sS'name'
p42280
S'solve'
p42281
sS'required'
p42282
I00
sS'group_name'
p42283
Nsa(dp42284
S'description'
p42285
S'The dimension of the transpose nullspace\n'
p42286
sS'cpp_type'
p42287
S'unsigned int'
p42288
sS'default'
p42289
S'0'
p42290
sS'name'
p42291
S'transpose_null_space_dimension'
p42292
sS'required'
p42293
I00
sS'group_name'
p42294
Nsa(dp42295
S'description'
p42296
g3
sS'cpp_type'
p42297
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42298
sS'default'
p42299
S'EigenProblem'
p42300
sS'name'
p42301
S'type'
p42302
sS'required'
p42303
I00
sS'group_name'
p42304
Nsa(dp42305
S'description'
p42306
S'Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n'
p42307
sS'cpp_type'
p42308
S'bool'
p42309
sS'default'
p42310
S'1'
p42311
sS'name'
p42312
S'use_nonlinear'
p42313
sS'required'
p42314
I00
sS'group_name'
p42315
NsasS'name'
p42316
S'/Problem/<type>/EigenProblem'
p42317
sa(dp42318
S'description'
p42319
g3
sS'subblocks'
p42320
NsS'parameters'
p42321
(lp42322
(dp42323
S'description'
p42324
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42325
sS'cpp_type'
p42326
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42327
sS'default'
p42328
g3
sS'name'
p42329
S'control_tags'
p42330
sS'required'
p42331
I00
sS'group_name'
p42332
S'Advanced'
p42333
sa(dp42334
S'description'
p42335
S'Set the enabled status of the MooseObject.\n'
p42336
sS'cpp_type'
p42337
S'bool'
p42338
sS'default'
p42339
S'1'
p42340
sS'name'
p42341
S'enable'
p42342
sS'required'
p42343
I00
sS'group_name'
p42344
S'Advanced'
p42345
sa(dp42346
S'description'
p42347
S'This causes PETSc to error if it had to reallocate memory in the Jacobian matrix due to not having enough nonzeros\n'
p42348
sS'cpp_type'
p42349
S'bool'
p42350
sS'default'
p42351
S'0'
p42352
sS'name'
p42353
S'error_on_jacobian_nonzero_reallocation'
p42354
sS'required'
p42355
I00
sS'group_name'
p42356
Nsa(dp42357
S'description'
p42358
S'EXPERIMENTAL: If true, a sub_app may use a restart file instead of using of using the master backup file\n'
p42359
sS'cpp_type'
p42360
S'bool'
p42361
sS'default'
p42362
S'0'
p42363
sS'name'
p42364
S'force_restart'
p42365
sS'required'
p42366
I00
sS'group_name'
p42367
Nsa(dp42368
S'description'
p42369
S'The dimension of the near nullspace\n'
p42370
sS'cpp_type'
p42371
S'unsigned int'
p42372
sS'default'
p42373
S'0'
p42374
sS'name'
p42375
S'near_null_space_dimension'
p42376
sS'required'
p42377
I00
sS'group_name'
p42378
Nsa(dp42379
S'description'
p42380
S'The dimension of the nullspace\n'
p42381
sS'cpp_type'
p42382
S'unsigned int'
p42383
sS'default'
p42384
S'0'
p42385
sS'name'
p42386
S'null_space_dimension'
p42387
sS'required'
p42388
I00
sS'group_name'
p42389
Nsa(dp42390
S'description'
p42391
S'Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n'
p42392
sS'cpp_type'
p42393
S'bool'
p42394
sS'default'
p42395
S'1'
p42396
sS'name'
p42397
S'solve'
p42398
sS'required'
p42399
I00
sS'group_name'
p42400
Nsa(dp42401
S'description'
p42402
S'The dimension of the transpose nullspace\n'
p42403
sS'cpp_type'
p42404
S'unsigned int'
p42405
sS'default'
p42406
S'0'
p42407
sS'name'
p42408
S'transpose_null_space_dimension'
p42409
sS'required'
p42410
I00
sS'group_name'
p42411
Nsa(dp42412
S'description'
p42413
g3
sS'cpp_type'
p42414
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42415
sS'default'
p42416
S'FEProblem'
p42417
sS'name'
p42418
S'type'
p42419
sS'required'
p42420
I00
sS'group_name'
p42421
Nsa(dp42422
S'description'
p42423
S'Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n'
p42424
sS'cpp_type'
p42425
S'bool'
p42426
sS'default'
p42427
S'1'
p42428
sS'name'
p42429
S'use_nonlinear'
p42430
sS'required'
p42431
I00
sS'group_name'
p42432
NsasS'name'
p42433
S'/Problem/<type>/FEProblem'
p42434
sasS'parameters'
p42435
NsS'name'
p42436
S'/Problem/<type>'
p42437
sasS'parameters'
p42438
(lp42439
(dp42440
S'description'
p42441
S'Block IDs for the coordinate systems\n'
p42442
sS'cpp_type'
p42443
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p42444
sS'default'
p42445
g3
sS'name'
p42446
S'block'
p42447
sS'required'
p42448
I00
sS'group_name'
p42449
Nsa(dp42450
S'name'
p42451
S'coord_type'
p42452
sS'cpp_type'
p42453
S'MultiMooseEnum'
p42454
sS'default'
p42455
S'XYZ'
p42456
sS'description'
p42457
S'Type of the coordinate system per block param\n'
p42458
sS'required'
p42459
I00
sS'options'
p42460
S'XYZ RZ RSPHERICAL'
p42461
sS'group_name'
p42462
Nsa(dp42463
S'description'
p42464
S'Whether or not to turn on the finite element shape function caching system.  This can increase speed with an associated memory cost.\n'
p42465
sS'cpp_type'
p42466
S'bool'
p42467
sS'default'
p42468
S'0'
p42469
sS'name'
p42470
S'fe_cache'
p42471
sS'required'
p42472
I00
sS'group_name'
p42473
Nsa(dp42474
S'description'
p42475
S'Set to false to disable kernel->subdomain coverage check\n'
p42476
sS'cpp_type'
p42477
S'bool'
p42478
sS'default'
p42479
S'1'
p42480
sS'name'
p42481
S'kernel_coverage_check'
p42482
sS'required'
p42483
I00
sS'group_name'
p42484
Nsa(dp42485
S'description'
p42486
S'Set to false to disable material->subdomain coverage check\n'
p42487
sS'cpp_type'
p42488
S'bool'
p42489
sS'default'
p42490
S'1'
p42491
sS'name'
p42492
S'material_coverage_check'
p42493
sS'required'
p42494
I00
sS'group_name'
p42495
Nsa(dp42496
S'description'
p42497
S'The name the problem\n'
p42498
sS'cpp_type'
p42499
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42500
sS'default'
p42501
S'MOOSE Problem'
p42502
sS'name'
p42503
S'name'
p42504
sS'required'
p42505
I00
sS'group_name'
p42506
Nsa(dp42507
S'description'
p42508
S'File base name used for restart (e.g. <path>/<filebase> or <path>/LATEST to grab the latest file available)\n'
p42509
sS'cpp_type'
p42510
S'FileNameNoExtension'
p42511
sS'default'
p42512
g3
sS'name'
p42513
S'restart_file_base'
p42514
sS'required'
p42515
I00
sS'group_name'
p42516
Nsa(dp42517
S'name'
p42518
S'rz_coord_axis'
p42519
sS'cpp_type'
p42520
S'MooseEnum'
p42521
sS'default'
p42522
S'Y'
p42523
sS'description'
p42524
S'The rotation axis (X | Y) for axisymetric coordinates\n'
p42525
sS'required'
p42526
I00
sS'options'
p42527
S'X Y'
p42528
sS'group_name'
p42529
Nsa(dp42530
S'description'
p42531
S'A string representing the Moose Object that will be built by this Action\n'
p42532
sS'cpp_type'
p42533
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42534
sS'default'
p42535
S'FEProblem'
p42536
sS'name'
p42537
S'type'
p42538
sS'required'
p42539
I01
sS'group_name'
p42540
Nsa(dp42541
S'description'
p42542
S'Set to true to have MOOSE recompute *all* AuxKernel types every time *any* UserObject type is executed. ... This behavior is non-intuitive and will be removed late fall 2014, The default is controlled through MooseApp\n'
p42543
sS'cpp_type'
p42544
S'bool'
p42545
sS'default'
p42546
g3
sS'name'
p42547
S'use_legacy_uo_aux_computation'
p42548
sS'required'
p42549
I00
sS'group_name'
p42550
Nsa(dp42551
S'description'
p42552
S'Set to true to have MOOSE compute all UserObjects and Postprocessors during the initial setup phase of the problem recompute *all* AuxKernel types every time *any* UserObject type is executed. ... This behavior is non-intuitive and will be removed late fall 2014, The default is controlled through MooseApp\n'
p42553
sS'cpp_type'
p42554
S'bool'
p42555
sS'default'
p42556
g3
sS'name'
p42557
S'use_legacy_uo_initialization'
p42558
sS'required'
p42559
I00
sS'group_name'
p42560
Nsa(dp42561
S'description'
p42562
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p42563
sS'cpp_type'
p42564
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42565
sS'default'
p42566
g3
sS'name'
p42567
S'library_path'
p42568
sS'required'
p42569
I00
sS'group_name'
p42570
Nsa(dp42571
S'description'
p42572
S'The names of the objects to register (Default: register all).\n'
p42573
sS'cpp_type'
p42574
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42575
sS'default'
p42576
g3
sS'name'
p42577
S'object_names'
p42578
sS'required'
p42579
I00
sS'group_name'
p42580
Nsa(dp42581
S'description'
p42582
S'The names of other applications from which objects will be registered from (dynamic registration).\n'
p42583
sS'cpp_type'
p42584
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42585
sS'default'
p42586
g3
sS'name'
p42587
S'register_objects_from'
p42588
sS'required'
p42589
I00
sS'group_name'
p42590
NsasS'name'
p42591
S'/Problem'
p42592
sa(dp42593
S'description'
p42594
g3
sS'subblocks'
p42595
(lp42596
(dp42597
S'description'
p42598
g3
sS'subblocks'
p42599
NsS'parameters'
p42600
(lp42601
(dp42602
S'description'
p42603
S'A string representing the Moose Object that will be built by this Action\n'
p42604
sS'cpp_type'
p42605
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42606
sS'default'
p42607
g3
sS'name'
p42608
S'type'
p42609
sS'required'
p42610
I01
sS'group_name'
p42611
NsasS'name'
p42612
S'/ScalarKernels/*'
p42613
sa(dp42614
S'description'
p42615
g3
sS'subblocks'
p42616
NsS'parameters'
p42617
(lp42618
(dp42619
S'description'
p42620
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42621
sS'cpp_type'
p42622
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42623
sS'default'
p42624
g3
sS'name'
p42625
S'control_tags'
p42626
sS'required'
p42627
I00
sS'group_name'
p42628
S'Advanced'
p42629
sa(dp42630
S'description'
p42631
S'Set the enabled status of the MooseObject.\n'
p42632
sS'cpp_type'
p42633
S'bool'
p42634
sS'default'
p42635
S'1'
p42636
sS'name'
p42637
S'enable'
p42638
sS'required'
p42639
I00
sS'group_name'
p42640
S'Advanced'
p42641
sa(dp42642
S'description'
p42643
S'Determines whether this object is calculated using an implicit or explicit form\n'
p42644
sS'cpp_type'
p42645
S'bool'
p42646
sS'default'
p42647
S'1'
p42648
sS'name'
p42649
S'implicit'
p42650
sS'required'
p42651
I00
sS'group_name'
p42652
S'Advanced'
p42653
sa(dp42654
S'description'
p42655
S'Node ids\n'
p42656
sS'cpp_type'
p42657
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p42658
sS'default'
p42659
g3
sS'name'
p42660
S'nodes'
p42661
sS'required'
p42662
I01
sS'group_name'
p42663
Nsa(dp42664
S'description'
p42665
g3
sS'cpp_type'
p42666
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42667
sS'default'
p42668
S'NodalEqualValueConstraint'
p42669
sS'name'
p42670
S'type'
p42671
sS'required'
p42672
I00
sS'group_name'
p42673
Nsa(dp42674
S'description'
p42675
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42676
sS'cpp_type'
p42677
S'bool'
p42678
sS'default'
p42679
S'0'
p42680
sS'name'
p42681
S'use_displaced_mesh'
p42682
sS'required'
p42683
I00
sS'group_name'
p42684
S'Advanced'
p42685
sa(dp42686
S'description'
p42687
S'Variable(s) to put the constraint on\n'
p42688
sS'cpp_type'
p42689
S'std::vector<VariableName>'
p42690
sS'default'
p42691
g3
sS'name'
p42692
S'var'
p42693
sS'required'
p42694
I01
sS'group_name'
p42695
Nsa(dp42696
S'description'
p42697
S'The name of the variable that this kernel operates on\n'
p42698
sS'cpp_type'
p42699
S'NonlinearVariableName'
p42700
sS'default'
p42701
g3
sS'name'
p42702
S'variable'
p42703
sS'required'
p42704
I01
sS'group_name'
p42705
NsasS'name'
p42706
S'/ScalarKernels/NodalEqualValueConstraint'
p42707
sa(dp42708
S'description'
p42709
g3
sS'subblocks'
p42710
NsS'parameters'
p42711
(lp42712
(dp42713
S'description'
p42714
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42715
sS'cpp_type'
p42716
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42717
sS'default'
p42718
g3
sS'name'
p42719
S'control_tags'
p42720
sS'required'
p42721
I00
sS'group_name'
p42722
S'Advanced'
p42723
sa(dp42724
S'description'
p42725
S'Set the enabled status of the MooseObject.\n'
p42726
sS'cpp_type'
p42727
S'bool'
p42728
sS'default'
p42729
S'1'
p42730
sS'name'
p42731
S'enable'
p42732
sS'required'
p42733
I00
sS'group_name'
p42734
S'Advanced'
p42735
sa(dp42736
S'description'
p42737
S'Determines whether this object is calculated using an implicit or explicit form\n'
p42738
sS'cpp_type'
p42739
S'bool'
p42740
sS'default'
p42741
S'1'
p42742
sS'name'
p42743
S'implicit'
p42744
sS'required'
p42745
I00
sS'group_name'
p42746
S'Advanced'
p42747
sa(dp42748
S'description'
p42749
g3
sS'cpp_type'
p42750
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42751
sS'default'
p42752
S'ODETimeDerivative'
p42753
sS'name'
p42754
S'type'
p42755
sS'required'
p42756
I00
sS'group_name'
p42757
Nsa(dp42758
S'description'
p42759
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42760
sS'cpp_type'
p42761
S'bool'
p42762
sS'default'
p42763
S'0'
p42764
sS'name'
p42765
S'use_displaced_mesh'
p42766
sS'required'
p42767
I00
sS'group_name'
p42768
S'Advanced'
p42769
sa(dp42770
S'description'
p42771
S'The name of the variable that this kernel operates on\n'
p42772
sS'cpp_type'
p42773
S'NonlinearVariableName'
p42774
sS'default'
p42775
g3
sS'name'
p42776
S'variable'
p42777
sS'required'
p42778
I01
sS'group_name'
p42779
NsasS'name'
p42780
S'/ScalarKernels/ODETimeDerivative'
p42781
sa(dp42782
S'description'
p42783
S'Parsed ODE function kernel.\n'
p42784
sS'subblocks'
p42785
NsS'parameters'
p42786
(lp42787
(dp42788
S'description'
p42789
S'additional coupled variables\n'
p42790
sS'cpp_type'
p42791
S'std::vector<VariableName>'
p42792
sS'default'
p42793
g3
sS'name'
p42794
S'args'
p42795
sS'required'
p42796
I00
sS'group_name'
p42797
Nsa(dp42798
S'description'
p42799
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p42800
sS'cpp_type'
p42801
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42802
sS'default'
p42803
g3
sS'name'
p42804
S'constant_expressions'
p42805
sS'required'
p42806
I00
sS'group_name'
p42807
Nsa(dp42808
S'description'
p42809
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p42810
sS'cpp_type'
p42811
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42812
sS'default'
p42813
g3
sS'name'
p42814
S'constant_names'
p42815
sS'required'
p42816
I00
sS'group_name'
p42817
Nsa(dp42818
S'description'
p42819
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42820
sS'cpp_type'
p42821
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42822
sS'default'
p42823
g3
sS'name'
p42824
S'control_tags'
p42825
sS'required'
p42826
I00
sS'group_name'
p42827
S'Advanced'
p42828
sa(dp42829
S'description'
p42830
S'Disable the function parser algebraic optimizer\n'
p42831
sS'cpp_type'
p42832
S'bool'
p42833
sS'default'
p42834
S'0'
p42835
sS'name'
p42836
S'disable_fpoptimizer'
p42837
sS'required'
p42838
I00
sS'group_name'
p42839
S'Advanced'
p42840
sa(dp42841
S'description'
p42842
S'Set the enabled status of the MooseObject.\n'
p42843
sS'cpp_type'
p42844
S'bool'
p42845
sS'default'
p42846
S'1'
p42847
sS'name'
p42848
S'enable'
p42849
sS'required'
p42850
I00
sS'group_name'
p42851
S'Advanced'
p42852
sa(dp42853
S'description'
p42854
S'Enable cacheing of function derivatives for faster startup time\n'
p42855
sS'cpp_type'
p42856
S'bool'
p42857
sS'default'
p42858
S'1'
p42859
sS'name'
p42860
S'enable_ad_cache'
p42861
sS'required'
p42862
I00
sS'group_name'
p42863
S'Advanced'
p42864
sa(dp42865
S'description'
p42866
S'Enable automatic immediate optimization of derivatives\n'
p42867
sS'cpp_type'
p42868
S'bool'
p42869
sS'default'
p42870
S'1'
p42871
sS'name'
p42872
S'enable_auto_optimize'
p42873
sS'required'
p42874
I00
sS'group_name'
p42875
S'Advanced'
p42876
sa(dp42877
S'description'
p42878
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p42879
sS'cpp_type'
p42880
S'bool'
p42881
sS'default'
p42882
S'1'
p42883
sS'name'
p42884
S'enable_jit'
p42885
sS'required'
p42886
I00
sS'group_name'
p42887
S'Advanced'
p42888
sa(dp42889
S'description'
p42890
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p42891
sS'cpp_type'
p42892
S'bool'
p42893
sS'default'
p42894
S'0'
p42895
sS'name'
p42896
S'fail_on_evalerror'
p42897
sS'required'
p42898
I00
sS'group_name'
p42899
S'Advanced'
p42900
sa(dp42901
S'description'
p42902
S'function expression\n'
p42903
sS'cpp_type'
p42904
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42905
sS'default'
p42906
g3
sS'name'
p42907
S'function'
p42908
sS'required'
p42909
I01
sS'group_name'
p42910
Nsa(dp42911
S'description'
p42912
S'Determines whether this object is calculated using an implicit or explicit form\n'
p42913
sS'cpp_type'
p42914
S'bool'
p42915
sS'default'
p42916
S'1'
p42917
sS'name'
p42918
S'implicit'
p42919
sS'required'
p42920
I00
sS'group_name'
p42921
S'Advanced'
p42922
sa(dp42923
S'description'
p42924
g3
sS'cpp_type'
p42925
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42926
sS'default'
p42927
S'ParsedODEKernel'
p42928
sS'name'
p42929
S'type'
p42930
sS'required'
p42931
I00
sS'group_name'
p42932
Nsa(dp42933
S'description'
p42934
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42935
sS'cpp_type'
p42936
S'bool'
p42937
sS'default'
p42938
S'0'
p42939
sS'name'
p42940
S'use_displaced_mesh'
p42941
sS'required'
p42942
I00
sS'group_name'
p42943
S'Advanced'
p42944
sa(dp42945
S'description'
p42946
S'The name of the variable that this kernel operates on\n'
p42947
sS'cpp_type'
p42948
S'NonlinearVariableName'
p42949
sS'default'
p42950
g3
sS'name'
p42951
S'variable'
p42952
sS'required'
p42953
I01
sS'group_name'
p42954
NsasS'name'
p42955
S'/ScalarKernels/ParsedODEKernel'
p42956
sasS'parameters'
p42957
NsS'name'
p42958
S'/ScalarKernels'
p42959
sa(dp42960
S'description'
p42961
g3
sS'subblocks'
p42962
(lp42963
(dp42964
S'description'
p42965
g3
sS'subblocks'
p42966
NsS'parameters'
p42967
(lp42968
(dp42969
S'description'
p42970
S'A string representing the Moose Object that will be built by this Action\n'
p42971
sS'cpp_type'
p42972
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42973
sS'default'
p42974
g3
sS'name'
p42975
S'type'
p42976
sS'required'
p42977
I01
sS'group_name'
p42978
NsasS'name'
p42979
S'/Transfers/*'
p42980
sa(dp42981
S'description'
p42982
S'Copies variables (nonlinear and auxiliary) between multiapps that have identical meshes.\n'
p42983
sS'subblocks'
p42984
NsS'parameters'
p42985
(lp42986
(dp42987
S'description'
p42988
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42989
sS'cpp_type'
p42990
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42991
sS'default'
p42992
g3
sS'name'
p42993
S'control_tags'
p42994
sS'required'
p42995
I00
sS'group_name'
p42996
S'Advanced'
p42997
sa(dp42998
S'name'
p42999
S'direction'
p43000
sS'cpp_type'
p43001
S'MooseEnum'
p43002
sS'default'
p43003
g3
sS'description'
p43004
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p43005
sS'required'
p43006
I01
sS'options'
p43007
S'to_multiapp from_multiapp'
p43008
sS'group_name'
p43009
Nsa(dp43010
S'description'
p43011
S'Whether or not to use the displaced mesh for the source mesh.\n'
p43012
sS'cpp_type'
p43013
S'bool'
p43014
sS'default'
p43015
S'0'
p43016
sS'name'
p43017
S'displaced_source_mesh'
p43018
sS'required'
p43019
I00
sS'group_name'
p43020
Nsa(dp43021
S'description'
p43022
S'Whether or not to use the displaced mesh for the target mesh.\n'
p43023
sS'cpp_type'
p43024
S'bool'
p43025
sS'default'
p43026
S'0'
p43027
sS'name'
p43028
S'displaced_target_mesh'
p43029
sS'required'
p43030
I00
sS'group_name'
p43031
Nsa(dp43032
S'description'
p43033
S'Set the enabled status of the MooseObject.\n'
p43034
sS'cpp_type'
p43035
S'bool'
p43036
sS'default'
p43037
S'1'
p43038
sS'name'
p43039
S'enable'
p43040
sS'required'
p43041
I00
sS'group_name'
p43042
S'Advanced'
p43043
sa(dp43044
S'name'
p43045
S'execute_on'
p43046
sS'cpp_type'
p43047
S'MultiMooseEnum'
p43048
sS'default'
p43049
S'SAME_AS_MULTIAPP'
p43050
sS'description'
p43051
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p43052
sS'required'
p43053
I00
sS'options'
p43054
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p43055
sS'group_name'
p43056
Nsa(dp43057
S'description'
p43058
S'The name of the MultiApp to use.\n'
p43059
sS'cpp_type'
p43060
S'MultiAppName'
p43061
sS'default'
p43062
g3
sS'name'
p43063
S'multi_app'
p43064
sS'required'
p43065
I01
sS'group_name'
p43066
Nsa(dp43067
S'description'
p43068
S'The variable to transfer from.\n'
p43069
sS'cpp_type'
p43070
S'VariableName'
p43071
sS'default'
p43072
g3
sS'name'
p43073
S'source_variable'
p43074
sS'required'
p43075
I01
sS'group_name'
p43076
Nsa(dp43077
S'description'
p43078
g3
sS'cpp_type'
p43079
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43080
sS'default'
p43081
S'MultiAppCopyTransfer'
p43082
sS'name'
p43083
S'type'
p43084
sS'required'
p43085
I00
sS'group_name'
p43086
Nsa(dp43087
S'description'
p43088
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43089
sS'cpp_type'
p43090
S'bool'
p43091
sS'default'
p43092
S'0'
p43093
sS'name'
p43094
S'use_displaced_mesh'
p43095
sS'required'
p43096
I00
sS'group_name'
p43097
S'Advanced'
p43098
sa(dp43099
S'description'
p43100
S'The variable to store the transferred values in.\n'
p43101
sS'cpp_type'
p43102
S'VariableName'
p43103
sS'default'
p43104
g3
sS'name'
p43105
S'variable'
p43106
sS'required'
p43107
I01
sS'group_name'
p43108
NsasS'name'
p43109
S'/Transfers/MultiAppCopyTransfer'
p43110
sa(dp43111
S'description'
p43112
g3
sS'subblocks'
p43113
NsS'parameters'
p43114
(lp43115
(dp43116
S'description'
p43117
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43118
sS'cpp_type'
p43119
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p43120
sS'default'
p43121
g3
sS'name'
p43122
S'control_tags'
p43123
sS'required'
p43124
I00
sS'group_name'
p43125
S'Advanced'
p43126
sa(dp43127
S'name'
p43128
S'direction'
p43129
sS'cpp_type'
p43130
S'MooseEnum'
p43131
sS'default'
p43132
g3
sS'description'
p43133
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p43134
sS'required'
p43135
I01
sS'options'
p43136
S'to_multiapp from_multiapp'
p43137
sS'group_name'
p43138
Nsa(dp43139
S'description'
p43140
S'Whether or not to use the displaced mesh for the source mesh.\n'
p43141
sS'cpp_type'
p43142
S'bool'
p43143
sS'default'
p43144
S'0'
p43145
sS'name'
p43146
S'displaced_source_mesh'
p43147
sS'required'
p43148
I00
sS'group_name'
p43149
Nsa(dp43150
S'description'
p43151
S'Whether or not to use the displaced mesh for the target mesh.\n'
p43152
sS'cpp_type'
p43153
S'bool'
p43154
sS'default'
p43155
S'0'
p43156
sS'name'
p43157
S'displaced_target_mesh'
p43158
sS'required'
p43159
I00
sS'group_name'
p43160
Nsa(dp43161
S'description'
p43162
S'Set the enabled status of the MooseObject.\n'
p43163
sS'cpp_type'
p43164
S'bool'
p43165
sS'default'
p43166
S'1'
p43167
sS'name'
p43168
S'enable'
p43169
sS'required'
p43170
I00
sS'group_name'
p43171
S'Advanced'
p43172
sa(dp43173
S'name'
p43174
S'execute_on'
p43175
sS'cpp_type'
p43176
S'MultiMooseEnum'
p43177
sS'default'
p43178
S'SAME_AS_MULTIAPP'
p43179
sS'description'
p43180
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p43181
sS'required'
p43182
I00
sS'options'
p43183
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p43184
sS'group_name'
p43185
Nsa(dp43186
S'name'
p43187
S'interp_type'
p43188
sS'cpp_type'
p43189
S'MooseEnum'
p43190
sS'default'
p43191
S'inverse_distance'
p43192
sS'description'
p43193
S'The algorithm to use for interpolation.\n'
p43194
sS'required'
p43195
I00
sS'options'
p43196
S'inverse_distance radial_basis'
p43197
sS'group_name'
p43198
Nsa(dp43199
S'description'
p43200
S'The name of the MultiApp to use.\n'
p43201
sS'cpp_type'
p43202
S'MultiAppName'
p43203
sS'default'
p43204
g3
sS'name'
p43205
S'multi_app'
p43206
sS'required'
p43207
I01
sS'group_name'
p43208
Nsa(dp43209
S'description'
p43210
S'The number of nearest points to use for interpolation.\n'
p43211
sS'cpp_type'
p43212
S'unsigned int'
p43213
sS'default'
p43214
S'3'
p43215
sS'name'
p43216
S'num_points'
p43217
sS'required'
p43218
I00
sS'group_name'
p43219
Nsa(dp43220
S'description'
p43221
S'The polynomial power to use for calculation of the decay in the interpolation.\n'
p43222
sS'cpp_type'
p43223
S'double'
p43224
sS'default'
p43225
S'2'
p43226
sS'name'
p43227
S'power'
p43228
sS'required'
p43229
I00
sS'group_name'
p43230
Nsa(dp43231
S'description'
p43232
S'Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n'
p43233
sS'cpp_type'
p43234
S'double'
p43235
sS'default'
p43236
S'-1'
p43237
sS'name'
p43238
S'radius'
p43239
sS'required'
p43240
I00
sS'group_name'
p43241
Nsa(dp43242
S'description'
p43243
S'The variable to transfer from.\n'
p43244
sS'cpp_type'
p43245
S'VariableName'
p43246
sS'default'
p43247
g3
sS'name'
p43248
S'source_variable'
p43249
sS'required'
p43250
I01
sS'group_name'
p43251
Nsa(dp43252
S'description'
p43253
g3
sS'cpp_type'
p43254
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43255
sS'default'
p43256
S'MultiAppInterpolationTransfer'
p43257
sS'name'
p43258
S'type'
p43259
sS'required'
p43260
I00
sS'group_name'
p43261
Nsa(dp43262
S'description'
p43263
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43264
sS'cpp_type'
p43265
S'bool'
p43266
sS'default'
p43267
S'0'
p43268
sS'name'
p43269
S'use_displaced_mesh'
p43270
sS'required'
p43271
I00
sS'group_name'
p43272
S'Advanced'
p43273
sa(dp43274
S'description'
p43275
S'The auxiliary variable to store the transferred values in.\n'
p43276
sS'cpp_type'
p43277
S'AuxVariableName'
p43278
sS'default'
p43279
g3
sS'name'
p43280
S'variable'
p43281
sS'required'
p43282
I01
sS'group_name'
p43283
NsasS'name'
p43284
S'/Transfers/MultiAppInterpolationTransfer'
p43285
sa(dp43286
S'description'
p43287
g3
sS'subblocks'
p43288
NsS'parameters'
p43289
(lp43290
(dp43291
S'description'
p43292
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43293
sS'cpp_type'
p43294
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p43295
sS'default'
p43296
g3
sS'name'
p43297
S'control_tags'
p43298
sS'required'
p43299
I00
sS'group_name'
p43300
S'Advanced'
p43301
sa(dp43302
S'name'
p43303
S'direction'
p43304
sS'cpp_type'
p43305
S'MooseEnum'
p43306
sS'default'
p43307
g3
sS'description'
p43308
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p43309
sS'required'
p43310
I01
sS'options'
p43311
S'to_multiapp from_multiapp'
p43312
sS'group_name'
p43313
Nsa(dp43314
S'description'
p43315
S'Whether or not to use the displaced mesh for the source mesh.\n'
p43316
sS'cpp_type'
p43317
S'bool'
p43318
sS'default'
p43319
S'0'
p43320
sS'name'
p43321
S'displaced_source_mesh'
p43322
sS'required'
p43323
I00
sS'group_name'
p43324
Nsa(dp43325
S'description'
p43326
S'Whether or not to use the displaced mesh for the target mesh.\n'
p43327
sS'cpp_type'
p43328
S'bool'
p43329
sS'default'
p43330
S'0'
p43331
sS'name'
p43332
S'displaced_target_mesh'
p43333
sS'required'
p43334
I00
sS'group_name'
p43335
Nsa(dp43336
S'description'
p43337
S'Set the enabled status of the MooseObject.\n'
p43338
sS'cpp_type'
p43339
S'bool'
p43340
sS'default'
p43341
S'1'
p43342
sS'name'
p43343
S'enable'
p43344
sS'required'
p43345
I00
sS'group_name'
p43346
S'Advanced'
p43347
sa(dp43348
S'description'
p43349
S'Whether or not to error in the case that a target point is not found in the source domain.\n'
p43350
sS'cpp_type'
p43351
S'bool'
p43352
sS'default'
p43353
S'0'
p43354
sS'name'
p43355
S'error_on_miss'
p43356
sS'required'
p43357
I00
sS'group_name'
p43358
Nsa(dp43359
S'name'
p43360
S'execute_on'
p43361
sS'cpp_type'
p43362
S'MultiMooseEnum'
p43363
sS'default'
p43364
S'SAME_AS_MULTIAPP'
p43365
sS'description'
p43366
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p43367
sS'required'
p43368
I00
sS'options'
p43369
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p43370
sS'group_name'
p43371
Nsa(dp43372
S'description'
p43373
S'The name of the MultiApp to use.\n'
p43374
sS'cpp_type'
p43375
S'MultiAppName'
p43376
sS'default'
p43377
g3
sS'name'
p43378
S'multi_app'
p43379
sS'required'
p43380
I01
sS'group_name'
p43381
Nsa(dp43382
S'description'
p43383
S'The variable to transfer from.\n'
p43384
sS'cpp_type'
p43385
S'VariableName'
p43386
sS'default'
p43387
g3
sS'name'
p43388
S'source_variable'
p43389
sS'required'
p43390
I01
sS'group_name'
p43391
Nsa(dp43392
S'description'
p43393
g3
sS'cpp_type'
p43394
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43395
sS'default'
p43396
S'MultiAppMeshFunctionTransfer'
p43397
sS'name'
p43398
S'type'
p43399
sS'required'
p43400
I00
sS'group_name'
p43401
Nsa(dp43402
S'description'
p43403
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43404
sS'cpp_type'
p43405
S'bool'
p43406
sS'default'
p43407
S'0'
p43408
sS'name'
p43409
S'use_displaced_mesh'
p43410
sS'required'
p43411
I00
sS'group_name'
p43412
S'Advanced'
p43413
sa(dp43414
S'description'
p43415
S'The auxiliary variable to store the transferred values in.\n'
p43416
sS'cpp_type'
p43417
S'AuxVariableName'
p43418
sS'default'
p43419
g3
sS'name'
p43420
S'variable'
p43421
sS'required'
p43422
I01
sS'group_name'
p43423
NsasS'name'
p43424
S'/Transfers/MultiAppMeshFunctionTransfer'
p43425
sa(dp43426
S'description'
p43427
g3
sS'subblocks'
p43428
NsS'parameters'
p43429
(lp43430
(dp43431
S'description'
p43432
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43433
sS'cpp_type'
p43434
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p43435
sS'default'
p43436
g3
sS'name'
p43437
S'control_tags'
p43438
sS'required'
p43439
I00
sS'group_name'
p43440
S'Advanced'
p43441
sa(dp43442
S'name'
p43443
S'direction'
p43444
sS'cpp_type'
p43445
S'MooseEnum'
p43446
sS'default'
p43447
g3
sS'description'
p43448
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p43449
sS'required'
p43450
I01
sS'options'
p43451
S'to_multiapp from_multiapp'
p43452
sS'group_name'
p43453
Nsa(dp43454
S'description'
p43455
S'Whether or not to use the displaced mesh for the source mesh.\n'
p43456
sS'cpp_type'
p43457
S'bool'
p43458
sS'default'
p43459
S'0'
p43460
sS'name'
p43461
S'displaced_source_mesh'
p43462
sS'required'
p43463
I00
sS'group_name'
p43464
Nsa(dp43465
S'description'
p43466
S'Whether or not to use the displaced mesh for the target mesh.\n'
p43467
sS'cpp_type'
p43468
S'bool'
p43469
sS'default'
p43470
S'0'
p43471
sS'name'
p43472
S'displaced_target_mesh'
p43473
sS'required'
p43474
I00
sS'group_name'
p43475
Nsa(dp43476
S'description'
p43477
S'Set the enabled status of the MooseObject.\n'
p43478
sS'cpp_type'
p43479
S'bool'
p43480
sS'default'
p43481
S'1'
p43482
sS'name'
p43483
S'enable'
p43484
sS'required'
p43485
I00
sS'group_name'
p43486
S'Advanced'
p43487
sa(dp43488
S'name'
p43489
S'execute_on'
p43490
sS'cpp_type'
p43491
S'MultiMooseEnum'
p43492
sS'default'
p43493
S'SAME_AS_MULTIAPP'
p43494
sS'description'
p43495
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p43496
sS'required'
p43497
I00
sS'options'
p43498
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p43499
sS'group_name'
p43500
Nsa(dp43501
S'description'
p43502
S'Set to true when the meshes are not changing (ie, no movement or adaptivity).  This will cache nearest node neighbors to greatly speed up the transfer.\n'
p43503
sS'cpp_type'
p43504
S'bool'
p43505
sS'default'
p43506
S'0'
p43507
sS'name'
p43508
S'fixed_meshes'
p43509
sS'required'
p43510
I00
sS'group_name'
p43511
Nsa(dp43512
S'description'
p43513
S'The name of the MultiApp to use.\n'
p43514
sS'cpp_type'
p43515
S'MultiAppName'
p43516
sS'default'
p43517
g3
sS'name'
p43518
S'multi_app'
p43519
sS'required'
p43520
I01
sS'group_name'
p43521
Nsa(dp43522
S'description'
p43523
S'The boundary we are transferring from (if not specified, whole domain is used).\n'
p43524
sS'cpp_type'
p43525
S'BoundaryName'
p43526
sS'default'
p43527
g3
sS'name'
p43528
S'source_boundary'
p43529
sS'required'
p43530
I00
sS'group_name'
p43531
Nsa(dp43532
S'description'
p43533
S'The variable to transfer from.\n'
p43534
sS'cpp_type'
p43535
S'VariableName'
p43536
sS'default'
p43537
g3
sS'name'
p43538
S'source_variable'
p43539
sS'required'
p43540
I01
sS'group_name'
p43541
Nsa(dp43542
S'description'
p43543
S'The boundary we are transferring to (if not specified, whole domain is used).\n'
p43544
sS'cpp_type'
p43545
S'BoundaryName'
p43546
sS'default'
p43547
g3
sS'name'
p43548
S'target_boundary'
p43549
sS'required'
p43550
I00
sS'group_name'
p43551
Nsa(dp43552
S'description'
p43553
g3
sS'cpp_type'
p43554
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43555
sS'default'
p43556
S'MultiAppNearestNodeTransfer'
p43557
sS'name'
p43558
S'type'
p43559
sS'required'
p43560
I00
sS'group_name'
p43561
Nsa(dp43562
S'description'
p43563
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43564
sS'cpp_type'
p43565
S'bool'
p43566
sS'default'
p43567
S'0'
p43568
sS'name'
p43569
S'use_displaced_mesh'
p43570
sS'required'
p43571
I00
sS'group_name'
p43572
S'Advanced'
p43573
sa(dp43574
S'description'
p43575
S'The auxiliary variable to store the transferred values in.\n'
p43576
sS'cpp_type'
p43577
S'AuxVariableName'
p43578
sS'default'
p43579
g3
sS'name'
p43580
S'variable'
p43581
sS'required'
p43582
I01
sS'group_name'
p43583
NsasS'name'
p43584
S'/Transfers/MultiAppNearestNodeTransfer'
p43585
sa(dp43586
S'description'
p43587
g3
sS'subblocks'
p43588
NsS'parameters'
p43589
(lp43590
(dp43591
S'description'
p43592
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43593
sS'cpp_type'
p43594
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p43595
sS'default'
p43596
g3
sS'name'
p43597
S'control_tags'
p43598
sS'required'
p43599
I00
sS'group_name'
p43600
S'Advanced'
p43601
sa(dp43602
S'name'
p43603
S'direction'
p43604
sS'cpp_type'
p43605
S'MooseEnum'
p43606
sS'default'
p43607
g3
sS'description'
p43608
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p43609
sS'required'
p43610
I01
sS'options'
p43611
S'to_multiapp from_multiapp'
p43612
sS'group_name'
p43613
Nsa(dp43614
S'description'
p43615
S'Whether or not to use the displaced mesh for the source mesh.\n'
p43616
sS'cpp_type'
p43617
S'bool'
p43618
sS'default'
p43619
S'0'
p43620
sS'name'
p43621
S'displaced_source_mesh'
p43622
sS'required'
p43623
I00
sS'group_name'
p43624
Nsa(dp43625
S'description'
p43626
S'Whether or not to use the displaced mesh for the target mesh.\n'
p43627
sS'cpp_type'
p43628
S'bool'
p43629
sS'default'
p43630
S'0'
p43631
sS'name'
p43632
S'displaced_target_mesh'
p43633
sS'required'
p43634
I00
sS'group_name'
p43635
Nsa(dp43636
S'description'
p43637
S'Set the enabled status of the MooseObject.\n'
p43638
sS'cpp_type'
p43639
S'bool'
p43640
sS'default'
p43641
S'1'
p43642
sS'name'
p43643
S'enable'
p43644
sS'required'
p43645
I00
sS'group_name'
p43646
S'Advanced'
p43647
sa(dp43648
S'name'
p43649
S'execute_on'
p43650
sS'cpp_type'
p43651
S'MultiMooseEnum'
p43652
sS'default'
p43653
S'SAME_AS_MULTIAPP'
p43654
sS'description'
p43655
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p43656
sS'required'
p43657
I00
sS'options'
p43658
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p43659
sS'group_name'
p43660
Nsa(dp43661
S'name'
p43662
S'interp_type'
p43663
sS'cpp_type'
p43664
S'MooseEnum'
p43665
sS'default'
p43666
S'inverse_distance'
p43667
sS'description'
p43668
S'The algorithm to use for interpolation.\n'
p43669
sS'required'
p43670
I00
sS'options'
p43671
S'inverse_distance radial_basis'
p43672
sS'group_name'
p43673
Nsa(dp43674
S'description'
p43675
S'The name of the MultiApp to use.\n'
p43676
sS'cpp_type'
p43677
S'MultiAppName'
p43678
sS'default'
p43679
g3
sS'name'
p43680
S'multi_app'
p43681
sS'required'
p43682
I01
sS'group_name'
p43683
Nsa(dp43684
S'description'
p43685
S'The number of nearest points to use for interpolation.\n'
p43686
sS'cpp_type'
p43687
S'unsigned int'
p43688
sS'default'
p43689
S'3'
p43690
sS'name'
p43691
S'num_points'
p43692
sS'required'
p43693
I00
sS'group_name'
p43694
Nsa(dp43695
S'description'
p43696
S'The Postprocessor to interpolate.\n'
p43697
sS'cpp_type'
p43698
S'PostprocessorName'
p43699
sS'default'
p43700
g3
sS'name'
p43701
S'postprocessor'
p43702
sS'required'
p43703
I01
sS'group_name'
p43704
Nsa(dp43705
S'description'
p43706
S'The polynomial power to use for calculation of the decay in the interpolation.\n'
p43707
sS'cpp_type'
p43708
S'double'
p43709
sS'default'
p43710
S'2'
p43711
sS'name'
p43712
S'power'
p43713
sS'required'
p43714
I00
sS'group_name'
p43715
Nsa(dp43716
S'description'
p43717
S'Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n'
p43718
sS'cpp_type'
p43719
S'double'
p43720
sS'default'
p43721
S'-1'
p43722
sS'name'
p43723
S'radius'
p43724
sS'required'
p43725
I00
sS'group_name'
p43726
Nsa(dp43727
S'description'
p43728
g3
sS'cpp_type'
p43729
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43730
sS'default'
p43731
S'MultiAppPostprocessorInterpolationTransfer'
p43732
sS'name'
p43733
S'type'
p43734
sS'required'
p43735
I00
sS'group_name'
p43736
Nsa(dp43737
S'description'
p43738
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43739
sS'cpp_type'
p43740
S'bool'
p43741
sS'default'
p43742
S'0'
p43743
sS'name'
p43744
S'use_displaced_mesh'
p43745
sS'required'
p43746
I00
sS'group_name'
p43747
S'Advanced'
p43748
sa(dp43749
S'description'
p43750
S'The auxiliary variable to store the transferred values in.\n'
p43751
sS'cpp_type'
p43752
S'AuxVariableName'
p43753
sS'default'
p43754
g3
sS'name'
p43755
S'variable'
p43756
sS'required'
p43757
I01
sS'group_name'
p43758
NsasS'name'
p43759
S'/Transfers/MultiAppPostprocessorInterpolationTransfer'
p43760
sa(dp43761
S'description'
p43762
g3
sS'subblocks'
p43763
NsS'parameters'
p43764
(lp43765
(dp43766
S'description'
p43767
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43768
sS'cpp_type'
p43769
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p43770
sS'default'
p43771
g3
sS'name'
p43772
S'control_tags'
p43773
sS'required'
p43774
I00
sS'group_name'
p43775
S'Advanced'
p43776
sa(dp43777
S'name'
p43778
S'direction'
p43779
sS'cpp_type'
p43780
S'MooseEnum'
p43781
sS'default'
p43782
g3
sS'description'
p43783
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p43784
sS'required'
p43785
I01
sS'options'
p43786
S'to_multiapp from_multiapp'
p43787
sS'group_name'
p43788
Nsa(dp43789
S'description'
p43790
S'Whether or not to use the displaced mesh for the source mesh.\n'
p43791
sS'cpp_type'
p43792
S'bool'
p43793
sS'default'
p43794
S'0'
p43795
sS'name'
p43796
S'displaced_source_mesh'
p43797
sS'required'
p43798
I00
sS'group_name'
p43799
Nsa(dp43800
S'description'
p43801
S'Whether or not to use the displaced mesh for the target mesh.\n'
p43802
sS'cpp_type'
p43803
S'bool'
p43804
sS'default'
p43805
S'0'
p43806
sS'name'
p43807
S'displaced_target_mesh'
p43808
sS'required'
p43809
I00
sS'group_name'
p43810
Nsa(dp43811
S'description'
p43812
S'Set the enabled status of the MooseObject.\n'
p43813
sS'cpp_type'
p43814
S'bool'
p43815
sS'default'
p43816
S'1'
p43817
sS'name'
p43818
S'enable'
p43819
sS'required'
p43820
I00
sS'group_name'
p43821
S'Advanced'
p43822
sa(dp43823
S'name'
p43824
S'execute_on'
p43825
sS'cpp_type'
p43826
S'MultiMooseEnum'
p43827
sS'default'
p43828
S'SAME_AS_MULTIAPP'
p43829
sS'description'
p43830
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p43831
sS'required'
p43832
I00
sS'options'
p43833
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p43834
sS'group_name'
p43835
Nsa(dp43836
S'description'
p43837
S'The name of the Postprocessor in the Master to transfer the value from.\n'
p43838
sS'cpp_type'
p43839
S'PostprocessorName'
p43840
sS'default'
p43841
g3
sS'name'
p43842
S'from_postprocessor'
p43843
sS'required'
p43844
I01
sS'group_name'
p43845
Nsa(dp43846
S'description'
p43847
S'The name of the MultiApp to use.\n'
p43848
sS'cpp_type'
p43849
S'MultiAppName'
p43850
sS'default'
p43851
g3
sS'name'
p43852
S'multi_app'
p43853
sS'required'
p43854
I01
sS'group_name'
p43855
Nsa(dp43856
S'description'
p43857
S'The name of the scalar Aux variable in the MultiApp to transfer the value to.\n'
p43858
sS'cpp_type'
p43859
S'VariableName'
p43860
sS'default'
p43861
g3
sS'name'
p43862
S'to_aux_scalar'
p43863
sS'required'
p43864
I01
sS'group_name'
p43865
Nsa(dp43866
S'description'
p43867
g3
sS'cpp_type'
p43868
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43869
sS'default'
p43870
S'MultiAppPostprocessorToAuxScalarTransfer'
p43871
sS'name'
p43872
S'type'
p43873
sS'required'
p43874
I00
sS'group_name'
p43875
Nsa(dp43876
S'description'
p43877
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43878
sS'cpp_type'
p43879
S'bool'
p43880
sS'default'
p43881
S'0'
p43882
sS'name'
p43883
S'use_displaced_mesh'
p43884
sS'required'
p43885
I00
sS'group_name'
p43886
S'Advanced'
p43887
sasS'name'
p43888
S'/Transfers/MultiAppPostprocessorToAuxScalarTransfer'
p43889
sa(dp43890
S'description'
p43891
g3
sS'subblocks'
p43892
NsS'parameters'
p43893
(lp43894
(dp43895
S'description'
p43896
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43897
sS'cpp_type'
p43898
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p43899
sS'default'
p43900
g3
sS'name'
p43901
S'control_tags'
p43902
sS'required'
p43903
I00
sS'group_name'
p43904
S'Advanced'
p43905
sa(dp43906
S'name'
p43907
S'direction'
p43908
sS'cpp_type'
p43909
S'MooseEnum'
p43910
sS'default'
p43911
g3
sS'description'
p43912
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p43913
sS'required'
p43914
I01
sS'options'
p43915
S'to_multiapp from_multiapp'
p43916
sS'group_name'
p43917
Nsa(dp43918
S'description'
p43919
S'Whether or not to use the displaced mesh for the source mesh.\n'
p43920
sS'cpp_type'
p43921
S'bool'
p43922
sS'default'
p43923
S'0'
p43924
sS'name'
p43925
S'displaced_source_mesh'
p43926
sS'required'
p43927
I00
sS'group_name'
p43928
Nsa(dp43929
S'description'
p43930
S'Whether or not to use the displaced mesh for the target mesh.\n'
p43931
sS'cpp_type'
p43932
S'bool'
p43933
sS'default'
p43934
S'0'
p43935
sS'name'
p43936
S'displaced_target_mesh'
p43937
sS'required'
p43938
I00
sS'group_name'
p43939
Nsa(dp43940
S'description'
p43941
S'Set the enabled status of the MooseObject.\n'
p43942
sS'cpp_type'
p43943
S'bool'
p43944
sS'default'
p43945
S'1'
p43946
sS'name'
p43947
S'enable'
p43948
sS'required'
p43949
I00
sS'group_name'
p43950
S'Advanced'
p43951
sa(dp43952
S'name'
p43953
S'execute_on'
p43954
sS'cpp_type'
p43955
S'MultiMooseEnum'
p43956
sS'default'
p43957
S'SAME_AS_MULTIAPP'
p43958
sS'description'
p43959
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p43960
sS'required'
p43961
I00
sS'options'
p43962
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p43963
sS'group_name'
p43964
Nsa(dp43965
S'description'
p43966
S'The name of the Postprocessor in the Master to transfer the value from.\n'
p43967
sS'cpp_type'
p43968
S'PostprocessorName'
p43969
sS'default'
p43970
g3
sS'name'
p43971
S'from_postprocessor'
p43972
sS'required'
p43973
I01
sS'group_name'
p43974
Nsa(dp43975
S'description'
p43976
S'The name of the MultiApp to use.\n'
p43977
sS'cpp_type'
p43978
S'MultiAppName'
p43979
sS'default'
p43980
g3
sS'name'
p43981
S'multi_app'
p43982
sS'required'
p43983
I01
sS'group_name'
p43984
Nsa(dp43985
S'name'
p43986
S'reduction_type'
p43987
sS'cpp_type'
p43988
S'MooseEnum'
p43989
sS'default'
p43990
g3
sS'description'
p43991
S'The type of reduction to perform to reduce postprocessor values from multiple SubApps to a single value\n'
p43992
sS'required'
p43993
I00
sS'options'
p43994
S'average sum maximum minimum'
p43995
sS'group_name'
p43996
Nsa(dp43997
S'description'
p43998
S'The name of the Postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n'
p43999
sS'cpp_type'
p44000
S'PostprocessorName'
p44001
sS'default'
p44002
g3
sS'name'
p44003
S'to_postprocessor'
p44004
sS'required'
p44005
I01
sS'group_name'
p44006
Nsa(dp44007
S'description'
p44008
g3
sS'cpp_type'
p44009
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44010
sS'default'
p44011
S'MultiAppPostprocessorTransfer'
p44012
sS'name'
p44013
S'type'
p44014
sS'required'
p44015
I00
sS'group_name'
p44016
Nsa(dp44017
S'description'
p44018
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44019
sS'cpp_type'
p44020
S'bool'
p44021
sS'default'
p44022
S'0'
p44023
sS'name'
p44024
S'use_displaced_mesh'
p44025
sS'required'
p44026
I00
sS'group_name'
p44027
S'Advanced'
p44028
sasS'name'
p44029
S'/Transfers/MultiAppPostprocessorTransfer'
p44030
sa(dp44031
S'description'
p44032
g3
sS'subblocks'
p44033
NsS'parameters'
p44034
(lp44035
(dp44036
S'description'
p44037
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44038
sS'cpp_type'
p44039
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44040
sS'default'
p44041
g3
sS'name'
p44042
S'control_tags'
p44043
sS'required'
p44044
I00
sS'group_name'
p44045
S'Advanced'
p44046
sa(dp44047
S'name'
p44048
S'direction'
p44049
sS'cpp_type'
p44050
S'MooseEnum'
p44051
sS'default'
p44052
g3
sS'description'
p44053
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p44054
sS'required'
p44055
I01
sS'options'
p44056
S'to_multiapp from_multiapp'
p44057
sS'group_name'
p44058
Nsa(dp44059
S'description'
p44060
S'Whether or not to use the displaced mesh for the source mesh.\n'
p44061
sS'cpp_type'
p44062
S'bool'
p44063
sS'default'
p44064
S'0'
p44065
sS'name'
p44066
S'displaced_source_mesh'
p44067
sS'required'
p44068
I00
sS'group_name'
p44069
Nsa(dp44070
S'description'
p44071
S'Whether or not to use the displaced mesh for the target mesh.\n'
p44072
sS'cpp_type'
p44073
S'bool'
p44074
sS'default'
p44075
S'0'
p44076
sS'name'
p44077
S'displaced_target_mesh'
p44078
sS'required'
p44079
I00
sS'group_name'
p44080
Nsa(dp44081
S'description'
p44082
S'Set the enabled status of the MooseObject.\n'
p44083
sS'cpp_type'
p44084
S'bool'
p44085
sS'default'
p44086
S'1'
p44087
sS'name'
p44088
S'enable'
p44089
sS'required'
p44090
I00
sS'group_name'
p44091
S'Advanced'
p44092
sa(dp44093
S'name'
p44094
S'execute_on'
p44095
sS'cpp_type'
p44096
S'MultiMooseEnum'
p44097
sS'default'
p44098
S'SAME_AS_MULTIAPP'
p44099
sS'description'
p44100
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44101
sS'required'
p44102
I00
sS'options'
p44103
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p44104
sS'group_name'
p44105
Nsa(dp44106
S'description'
p44107
S'Set to true when the meshes are not changing (ie, no movement or adaptivity).  This will cache some information to speed up the transfer.\n'
p44108
sS'cpp_type'
p44109
S'bool'
p44110
sS'default'
p44111
S'0'
p44112
sS'name'
p44113
S'fixed_meshes'
p44114
sS'required'
p44115
I00
sS'group_name'
p44116
Nsa(dp44117
S'description'
p44118
S'The name of the MultiApp to use.\n'
p44119
sS'cpp_type'
p44120
S'MultiAppName'
p44121
sS'default'
p44122
g3
sS'name'
p44123
S'multi_app'
p44124
sS'required'
p44125
I01
sS'group_name'
p44126
Nsa(dp44127
S'name'
p44128
S'proj_type'
p44129
sS'cpp_type'
p44130
S'MooseEnum'
p44131
sS'default'
p44132
S'l2'
p44133
sS'description'
p44134
S'The type of the projection.\n'
p44135
sS'required'
p44136
I00
sS'options'
p44137
S'l2'
p44138
sS'group_name'
p44139
Nsa(dp44140
S'description'
p44141
S'The variable to transfer from.\n'
p44142
sS'cpp_type'
p44143
S'VariableName'
p44144
sS'default'
p44145
g3
sS'name'
p44146
S'source_variable'
p44147
sS'required'
p44148
I01
sS'group_name'
p44149
Nsa(dp44150
S'description'
p44151
g3
sS'cpp_type'
p44152
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44153
sS'default'
p44154
S'MultiAppProjectionTransfer'
p44155
sS'name'
p44156
S'type'
p44157
sS'required'
p44158
I00
sS'group_name'
p44159
Nsa(dp44160
S'description'
p44161
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44162
sS'cpp_type'
p44163
S'bool'
p44164
sS'default'
p44165
S'0'
p44166
sS'name'
p44167
S'use_displaced_mesh'
p44168
sS'required'
p44169
I00
sS'group_name'
p44170
S'Advanced'
p44171
sa(dp44172
S'description'
p44173
S'The auxiliary variable to store the transferred values in.\n'
p44174
sS'cpp_type'
p44175
S'AuxVariableName'
p44176
sS'default'
p44177
g3
sS'name'
p44178
S'variable'
p44179
sS'required'
p44180
I01
sS'group_name'
p44181
NsasS'name'
p44182
S'/Transfers/MultiAppProjectionTransfer'
p44183
sa(dp44184
S'description'
p44185
g3
sS'subblocks'
p44186
NsS'parameters'
p44187
(lp44188
(dp44189
S'description'
p44190
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44191
sS'cpp_type'
p44192
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44193
sS'default'
p44194
g3
sS'name'
p44195
S'control_tags'
p44196
sS'required'
p44197
I00
sS'group_name'
p44198
S'Advanced'
p44199
sa(dp44200
S'name'
p44201
S'direction'
p44202
sS'cpp_type'
p44203
S'MooseEnum'
p44204
sS'default'
p44205
g3
sS'description'
p44206
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p44207
sS'required'
p44208
I01
sS'options'
p44209
S'to_multiapp from_multiapp'
p44210
sS'group_name'
p44211
Nsa(dp44212
S'description'
p44213
S'Whether or not to use the displaced mesh for the source mesh.\n'
p44214
sS'cpp_type'
p44215
S'bool'
p44216
sS'default'
p44217
S'0'
p44218
sS'name'
p44219
S'displaced_source_mesh'
p44220
sS'required'
p44221
I00
sS'group_name'
p44222
Nsa(dp44223
S'description'
p44224
S'Whether or not to use the displaced mesh for the target mesh.\n'
p44225
sS'cpp_type'
p44226
S'bool'
p44227
sS'default'
p44228
S'0'
p44229
sS'name'
p44230
S'displaced_target_mesh'
p44231
sS'required'
p44232
I00
sS'group_name'
p44233
Nsa(dp44234
S'description'
p44235
S'Set the enabled status of the MooseObject.\n'
p44236
sS'cpp_type'
p44237
S'bool'
p44238
sS'default'
p44239
S'1'
p44240
sS'name'
p44241
S'enable'
p44242
sS'required'
p44243
I00
sS'group_name'
p44244
S'Advanced'
p44245
sa(dp44246
S'name'
p44247
S'execute_on'
p44248
sS'cpp_type'
p44249
S'MultiMooseEnum'
p44250
sS'default'
p44251
S'SAME_AS_MULTIAPP'
p44252
sS'description'
p44253
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44254
sS'required'
p44255
I00
sS'options'
p44256
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p44257
sS'group_name'
p44258
Nsa(dp44259
S'description'
p44260
S'The name of the MultiApp to use.\n'
p44261
sS'cpp_type'
p44262
S'MultiAppName'
p44263
sS'default'
p44264
g3
sS'name'
p44265
S'multi_app'
p44266
sS'required'
p44267
I01
sS'group_name'
p44268
Nsa(dp44269
S'description'
p44270
g3
sS'cpp_type'
p44271
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44272
sS'default'
p44273
S'MultiAppUserObjectTransfer'
p44274
sS'name'
p44275
S'type'
p44276
sS'required'
p44277
I00
sS'group_name'
p44278
Nsa(dp44279
S'description'
p44280
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44281
sS'cpp_type'
p44282
S'bool'
p44283
sS'default'
p44284
S'0'
p44285
sS'name'
p44286
S'use_displaced_mesh'
p44287
sS'required'
p44288
I00
sS'group_name'
p44289
S'Advanced'
p44290
sa(dp44291
S'description'
p44292
S"The UserObject you want to transfer values from.  Note: This might be a UserObject from your MultiApp's input file!\n"
p44293
sS'cpp_type'
p44294
S'UserObjectName'
p44295
sS'default'
p44296
g3
sS'name'
p44297
S'user_object'
p44298
sS'required'
p44299
I01
sS'group_name'
p44300
Nsa(dp44301
S'description'
p44302
S'The auxiliary variable to store the transferred values in.\n'
p44303
sS'cpp_type'
p44304
S'AuxVariableName'
p44305
sS'default'
p44306
g3
sS'name'
p44307
S'variable'
p44308
sS'required'
p44309
I01
sS'group_name'
p44310
NsasS'name'
p44311
S'/Transfers/MultiAppUserObjectTransfer'
p44312
sa(dp44313
S'description'
p44314
g3
sS'subblocks'
p44315
NsS'parameters'
p44316
(lp44317
(dp44318
S'description'
p44319
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44320
sS'cpp_type'
p44321
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44322
sS'default'
p44323
g3
sS'name'
p44324
S'control_tags'
p44325
sS'required'
p44326
I00
sS'group_name'
p44327
S'Advanced'
p44328
sa(dp44329
S'name'
p44330
S'direction'
p44331
sS'cpp_type'
p44332
S'MooseEnum'
p44333
sS'default'
p44334
g3
sS'description'
p44335
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p44336
sS'required'
p44337
I01
sS'options'
p44338
S'to_multiapp from_multiapp'
p44339
sS'group_name'
p44340
Nsa(dp44341
S'description'
p44342
S'Whether or not to use the displaced mesh for the source mesh.\n'
p44343
sS'cpp_type'
p44344
S'bool'
p44345
sS'default'
p44346
S'0'
p44347
sS'name'
p44348
S'displaced_source_mesh'
p44349
sS'required'
p44350
I00
sS'group_name'
p44351
Nsa(dp44352
S'description'
p44353
S'Whether or not to use the displaced mesh for the target mesh.\n'
p44354
sS'cpp_type'
p44355
S'bool'
p44356
sS'default'
p44357
S'0'
p44358
sS'name'
p44359
S'displaced_target_mesh'
p44360
sS'required'
p44361
I00
sS'group_name'
p44362
Nsa(dp44363
S'description'
p44364
S'Set the enabled status of the MooseObject.\n'
p44365
sS'cpp_type'
p44366
S'bool'
p44367
sS'default'
p44368
S'1'
p44369
sS'name'
p44370
S'enable'
p44371
sS'required'
p44372
I00
sS'group_name'
p44373
S'Advanced'
p44374
sa(dp44375
S'name'
p44376
S'execute_on'
p44377
sS'cpp_type'
p44378
S'MultiMooseEnum'
p44379
sS'default'
p44380
S'SAME_AS_MULTIAPP'
p44381
sS'description'
p44382
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44383
sS'required'
p44384
I00
sS'options'
p44385
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p44386
sS'group_name'
p44387
Nsa(dp44388
S'description'
p44389
S'The name of the MultiApp to use.\n'
p44390
sS'cpp_type'
p44391
S'MultiAppName'
p44392
sS'default'
p44393
g3
sS'name'
p44394
S'multi_app'
p44395
sS'required'
p44396
I01
sS'group_name'
p44397
Nsa(dp44398
S'description'
p44399
S'The name of the postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n'
p44400
sS'cpp_type'
p44401
S'PostprocessorName'
p44402
sS'default'
p44403
g3
sS'name'
p44404
S'postprocessor'
p44405
sS'required'
p44406
I01
sS'group_name'
p44407
Nsa(dp44408
S'description'
p44409
S'The variable to transfer from.\n'
p44410
sS'cpp_type'
p44411
S'VariableName'
p44412
sS'default'
p44413
g3
sS'name'
p44414
S'source_variable'
p44415
sS'required'
p44416
I01
sS'group_name'
p44417
Nsa(dp44418
S'description'
p44419
g3
sS'cpp_type'
p44420
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44421
sS'default'
p44422
S'MultiAppVariableValueSamplePostprocessorTransfer'
p44423
sS'name'
p44424
S'type'
p44425
sS'required'
p44426
I00
sS'group_name'
p44427
Nsa(dp44428
S'description'
p44429
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44430
sS'cpp_type'
p44431
S'bool'
p44432
sS'default'
p44433
S'0'
p44434
sS'name'
p44435
S'use_displaced_mesh'
p44436
sS'required'
p44437
I00
sS'group_name'
p44438
S'Advanced'
p44439
sasS'name'
p44440
S'/Transfers/MultiAppVariableValueSamplePostprocessorTransfer'
p44441
sa(dp44442
S'description'
p44443
g3
sS'subblocks'
p44444
NsS'parameters'
p44445
(lp44446
(dp44447
S'description'
p44448
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44449
sS'cpp_type'
p44450
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44451
sS'default'
p44452
g3
sS'name'
p44453
S'control_tags'
p44454
sS'required'
p44455
I00
sS'group_name'
p44456
S'Advanced'
p44457
sa(dp44458
S'name'
p44459
S'direction'
p44460
sS'cpp_type'
p44461
S'MooseEnum'
p44462
sS'default'
p44463
g3
sS'description'
p44464
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p44465
sS'required'
p44466
I01
sS'options'
p44467
S'to_multiapp from_multiapp'
p44468
sS'group_name'
p44469
Nsa(dp44470
S'description'
p44471
S'Whether or not to use the displaced mesh for the source mesh.\n'
p44472
sS'cpp_type'
p44473
S'bool'
p44474
sS'default'
p44475
S'0'
p44476
sS'name'
p44477
S'displaced_source_mesh'
p44478
sS'required'
p44479
I00
sS'group_name'
p44480
Nsa(dp44481
S'description'
p44482
S'Whether or not to use the displaced mesh for the target mesh.\n'
p44483
sS'cpp_type'
p44484
S'bool'
p44485
sS'default'
p44486
S'0'
p44487
sS'name'
p44488
S'displaced_target_mesh'
p44489
sS'required'
p44490
I00
sS'group_name'
p44491
Nsa(dp44492
S'description'
p44493
S'Set the enabled status of the MooseObject.\n'
p44494
sS'cpp_type'
p44495
S'bool'
p44496
sS'default'
p44497
S'1'
p44498
sS'name'
p44499
S'enable'
p44500
sS'required'
p44501
I00
sS'group_name'
p44502
S'Advanced'
p44503
sa(dp44504
S'name'
p44505
S'execute_on'
p44506
sS'cpp_type'
p44507
S'MultiMooseEnum'
p44508
sS'default'
p44509
S'SAME_AS_MULTIAPP'
p44510
sS'description'
p44511
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44512
sS'required'
p44513
I00
sS'options'
p44514
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p44515
sS'group_name'
p44516
Nsa(dp44517
S'description'
p44518
S'The name of the MultiApp to use.\n'
p44519
sS'cpp_type'
p44520
S'MultiAppName'
p44521
sS'default'
p44522
g3
sS'name'
p44523
S'multi_app'
p44524
sS'required'
p44525
I01
sS'group_name'
p44526
Nsa(dp44527
S'description'
p44528
S'The variable to transfer from.\n'
p44529
sS'cpp_type'
p44530
S'VariableName'
p44531
sS'default'
p44532
g3
sS'name'
p44533
S'source_variable'
p44534
sS'required'
p44535
I01
sS'group_name'
p44536
Nsa(dp44537
S'description'
p44538
g3
sS'cpp_type'
p44539
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44540
sS'default'
p44541
S'MultiAppVariableValueSampleTransfer'
p44542
sS'name'
p44543
S'type'
p44544
sS'required'
p44545
I00
sS'group_name'
p44546
Nsa(dp44547
S'description'
p44548
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44549
sS'cpp_type'
p44550
S'bool'
p44551
sS'default'
p44552
S'0'
p44553
sS'name'
p44554
S'use_displaced_mesh'
p44555
sS'required'
p44556
I00
sS'group_name'
p44557
S'Advanced'
p44558
sa(dp44559
S'description'
p44560
S'The auxiliary variable to store the transferred values in.\n'
p44561
sS'cpp_type'
p44562
S'AuxVariableName'
p44563
sS'default'
p44564
g3
sS'name'
p44565
S'variable'
p44566
sS'required'
p44567
I01
sS'group_name'
p44568
NsasS'name'
p44569
S'/Transfers/MultiAppVariableValueSampleTransfer'
p44570
sasS'parameters'
p44571
NsS'name'
p44572
S'/Transfers'
p44573
sa(dp44574
S'description'
p44575
g3
sS'subblocks'
p44576
(lp44577
(dp44578
S'description'
p44579
g3
sS'subblocks'
p44580
NsS'parameters'
p44581
(lp44582
(dp44583
S'description'
p44584
S'A string representing the Moose Object that will be built by this Action\n'
p44585
sS'cpp_type'
p44586
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44587
sS'default'
p44588
g3
sS'name'
p44589
S'type'
p44590
sS'required'
p44591
I01
sS'group_name'
p44592
NsasS'name'
p44593
S'/UserObjects/*'
p44594
sa(dp44595
S'description'
p44596
g3
sS'subblocks'
p44597
NsS'parameters'
p44598
(lp44599
(dp44600
S'description'
p44601
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p44602
sS'cpp_type'
p44603
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p44604
sS'default'
p44605
g3
sS'name'
p44606
S'boundary'
p44607
sS'required'
p44608
I01
sS'group_name'
p44609
Nsa(dp44610
S'description'
p44611
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44612
sS'cpp_type'
p44613
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44614
sS'default'
p44615
g3
sS'name'
p44616
S'control_tags'
p44617
sS'required'
p44618
I00
sS'group_name'
p44619
S'Advanced'
p44620
sa(dp44621
S'description'
p44622
S'Set the enabled status of the MooseObject.\n'
p44623
sS'cpp_type'
p44624
S'bool'
p44625
sS'default'
p44626
S'1'
p44627
sS'name'
p44628
S'enable'
p44629
sS'required'
p44630
I00
sS'group_name'
p44631
S'Advanced'
p44632
sa(dp44633
S'name'
p44634
S'execute_on'
p44635
sS'cpp_type'
p44636
S'MultiMooseEnum'
p44637
sS'default'
p44638
S'TIMESTEP_END'
p44639
sS'description'
p44640
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44641
sS'required'
p44642
I00
sS'options'
p44643
S'none initial linear nonlinear timestep_end timestep_begin custom'
p44644
sS'group_name'
p44645
Nsa(dp44646
S'description'
p44647
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p44648
sS'cpp_type'
p44649
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p44650
sS'default'
p44651
g3
sS'name'
p44652
S'outputs'
p44653
sS'required'
p44654
I00
sS'group_name'
p44655
S'Advanced'
p44656
sa(dp44657
S'description'
p44658
g3
sS'cpp_type'
p44659
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44660
sS'default'
p44661
S'AreaPostprocessor'
p44662
sS'name'
p44663
S'type'
p44664
sS'required'
p44665
I00
sS'group_name'
p44666
Nsa(dp44667
S'description'
p44668
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44669
sS'cpp_type'
p44670
S'bool'
p44671
sS'default'
p44672
S'0'
p44673
sS'name'
p44674
S'use_displaced_mesh'
p44675
sS'required'
p44676
I00
sS'group_name'
p44677
S'Advanced'
p44678
sasS'name'
p44679
S'/UserObjects/AreaPostprocessor'
p44680
sa(dp44681
S'description'
p44682
g3
sS'subblocks'
p44683
NsS'parameters'
p44684
(lp44685
(dp44686
S'description'
p44687
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44688
sS'cpp_type'
p44689
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p44690
sS'default'
p44691
g3
sS'name'
p44692
S'block'
p44693
sS'required'
p44694
I00
sS'group_name'
p44695
Nsa(dp44696
S'description'
p44697
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44698
sS'cpp_type'
p44699
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44700
sS'default'
p44701
g3
sS'name'
p44702
S'control_tags'
p44703
sS'required'
p44704
I00
sS'group_name'
p44705
S'Advanced'
p44706
sa(dp44707
S'description'
p44708
S'Set the enabled status of the MooseObject.\n'
p44709
sS'cpp_type'
p44710
S'bool'
p44711
sS'default'
p44712
S'1'
p44713
sS'name'
p44714
S'enable'
p44715
sS'required'
p44716
I00
sS'group_name'
p44717
S'Advanced'
p44718
sa(dp44719
S'name'
p44720
S'execute_on'
p44721
sS'cpp_type'
p44722
S'MultiMooseEnum'
p44723
sS'default'
p44724
S'TIMESTEP_END'
p44725
sS'description'
p44726
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44727
sS'required'
p44728
I00
sS'options'
p44729
S'none initial linear nonlinear timestep_end timestep_begin custom'
p44730
sS'group_name'
p44731
Nsa(dp44732
S'description'
p44733
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p44734
sS'cpp_type'
p44735
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p44736
sS'default'
p44737
g3
sS'name'
p44738
S'outputs'
p44739
sS'required'
p44740
I00
sS'group_name'
p44741
S'Advanced'
p44742
sa(dp44743
S'description'
p44744
S'The seed for the master random number generator\n'
p44745
sS'cpp_type'
p44746
S'unsigned int'
p44747
sS'default'
p44748
S'0'
p44749
sS'name'
p44750
S'seed'
p44751
sS'required'
p44752
I00
sS'group_name'
p44753
S'Advanced'
p44754
sa(dp44755
S'description'
p44756
g3
sS'cpp_type'
p44757
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44758
sS'default'
p44759
S'AverageElementSize'
p44760
sS'name'
p44761
S'type'
p44762
sS'required'
p44763
I00
sS'group_name'
p44764
Nsa(dp44765
S'description'
p44766
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44767
sS'cpp_type'
p44768
S'bool'
p44769
sS'default'
p44770
S'0'
p44771
sS'name'
p44772
S'use_displaced_mesh'
p44773
sS'required'
p44774
I00
sS'group_name'
p44775
S'Advanced'
p44776
sa(dp44777
S'description'
p44778
S'The name of the variable that this object operates on\n'
p44779
sS'cpp_type'
p44780
S'std::vector<VariableName>'
p44781
sS'default'
p44782
g3
sS'name'
p44783
S'variable'
p44784
sS'required'
p44785
I01
sS'group_name'
p44786
NsasS'name'
p44787
S'/UserObjects/AverageElementSize'
p44788
sa(dp44789
S'description'
p44790
g3
sS'subblocks'
p44791
NsS'parameters'
p44792
(lp44793
(dp44794
S'description'
p44795
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44796
sS'cpp_type'
p44797
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p44798
sS'default'
p44799
g3
sS'name'
p44800
S'block'
p44801
sS'required'
p44802
I00
sS'group_name'
p44803
Nsa(dp44804
S'description'
p44805
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p44806
sS'cpp_type'
p44807
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p44808
sS'default'
p44809
g3
sS'name'
p44810
S'boundary'
p44811
sS'required'
p44812
I00
sS'group_name'
p44813
Nsa(dp44814
S'description'
p44815
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44816
sS'cpp_type'
p44817
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44818
sS'default'
p44819
g3
sS'name'
p44820
S'control_tags'
p44821
sS'required'
p44822
I00
sS'group_name'
p44823
S'Advanced'
p44824
sa(dp44825
S'description'
p44826
S'Set the enabled status of the MooseObject.\n'
p44827
sS'cpp_type'
p44828
S'bool'
p44829
sS'default'
p44830
S'1'
p44831
sS'name'
p44832
S'enable'
p44833
sS'required'
p44834
I00
sS'group_name'
p44835
S'Advanced'
p44836
sa(dp44837
S'name'
p44838
S'execute_on'
p44839
sS'cpp_type'
p44840
S'MultiMooseEnum'
p44841
sS'default'
p44842
S'TIMESTEP_END'
p44843
sS'description'
p44844
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44845
sS'required'
p44846
I00
sS'options'
p44847
S'none initial linear nonlinear timestep_end timestep_begin custom'
p44848
sS'group_name'
p44849
Nsa(dp44850
S'description'
p44851
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p44852
sS'cpp_type'
p44853
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p44854
sS'default'
p44855
g3
sS'name'
p44856
S'outputs'
p44857
sS'required'
p44858
I00
sS'group_name'
p44859
S'Advanced'
p44860
sa(dp44861
S'description'
p44862
S'The seed for the master random number generator\n'
p44863
sS'cpp_type'
p44864
S'unsigned int'
p44865
sS'default'
p44866
S'0'
p44867
sS'name'
p44868
S'seed'
p44869
sS'required'
p44870
I00
sS'group_name'
p44871
S'Advanced'
p44872
sa(dp44873
S'description'
p44874
g3
sS'cpp_type'
p44875
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44876
sS'default'
p44877
S'AverageNodalVariableValue'
p44878
sS'name'
p44879
S'type'
p44880
sS'required'
p44881
I00
sS'group_name'
p44882
Nsa(dp44883
S'description'
p44884
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p44885
sS'cpp_type'
p44886
S'bool'
p44887
sS'default'
p44888
S'0'
p44889
sS'name'
p44890
S'unique_node_execute'
p44891
sS'required'
p44892
I00
sS'group_name'
p44893
Nsa(dp44894
S'description'
p44895
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44896
sS'cpp_type'
p44897
S'bool'
p44898
sS'default'
p44899
S'0'
p44900
sS'name'
p44901
S'use_displaced_mesh'
p44902
sS'required'
p44903
I00
sS'group_name'
p44904
S'Advanced'
p44905
sa(dp44906
S'description'
p44907
S'The name of the variable that this postprocessor operates on\n'
p44908
sS'cpp_type'
p44909
S'std::vector<VariableName>'
p44910
sS'default'
p44911
g3
sS'name'
p44912
S'variable'
p44913
sS'required'
p44914
I01
sS'group_name'
p44915
NsasS'name'
p44916
S'/UserObjects/AverageNodalVariableValue'
p44917
sa(dp44918
S'description'
p44919
g3
sS'subblocks'
p44920
NsS'parameters'
p44921
(lp44922
(dp44923
S'description'
p44924
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p44925
sS'cpp_type'
p44926
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p44927
sS'default'
p44928
g3
sS'name'
p44929
S'boundary'
p44930
sS'required'
p44931
I01
sS'group_name'
p44932
Nsa(dp44933
S'description'
p44934
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44935
sS'cpp_type'
p44936
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44937
sS'default'
p44938
g3
sS'name'
p44939
S'control_tags'
p44940
sS'required'
p44941
I00
sS'group_name'
p44942
S'Advanced'
p44943
sa(dp44944
S'description'
p44945
S'Set the enabled status of the MooseObject.\n'
p44946
sS'cpp_type'
p44947
S'bool'
p44948
sS'default'
p44949
S'1'
p44950
sS'name'
p44951
S'enable'
p44952
sS'required'
p44953
I00
sS'group_name'
p44954
S'Advanced'
p44955
sa(dp44956
S'name'
p44957
S'execute_on'
p44958
sS'cpp_type'
p44959
S'MultiMooseEnum'
p44960
sS'default'
p44961
S'TIMESTEP_END'
p44962
sS'description'
p44963
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44964
sS'required'
p44965
I00
sS'options'
p44966
S'none initial linear nonlinear timestep_end timestep_begin custom'
p44967
sS'group_name'
p44968
Nsa(dp44969
S'description'
p44970
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p44971
sS'cpp_type'
p44972
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p44973
sS'default'
p44974
g3
sS'name'
p44975
S'outputs'
p44976
sS'required'
p44977
I00
sS'group_name'
p44978
S'Advanced'
p44979
sa(dp44980
S'description'
p44981
g3
sS'cpp_type'
p44982
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44983
sS'default'
p44984
S'AxisymmetricCenterlineAverageValue'
p44985
sS'name'
p44986
S'type'
p44987
sS'required'
p44988
I00
sS'group_name'
p44989
Nsa(dp44990
S'description'
p44991
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44992
sS'cpp_type'
p44993
S'bool'
p44994
sS'default'
p44995
S'0'
p44996
sS'name'
p44997
S'use_displaced_mesh'
p44998
sS'required'
p44999
I00
sS'group_name'
p45000
S'Advanced'
p45001
sa(dp45002
S'description'
p45003
S'The name of the variable that this boundary condition applies to\n'
p45004
sS'cpp_type'
p45005
S'std::vector<VariableName>'
p45006
sS'default'
p45007
g3
sS'name'
p45008
S'variable'
p45009
sS'required'
p45010
I01
sS'group_name'
p45011
NsasS'name'
p45012
S'/UserObjects/AxisymmetricCenterlineAverageValue'
p45013
sa(dp45014
S'description'
p45015
g3
sS'subblocks'
p45016
NsS'parameters'
p45017
(lp45018
(dp45019
S'description'
p45020
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45021
sS'cpp_type'
p45022
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45023
sS'default'
p45024
g3
sS'name'
p45025
S'control_tags'
p45026
sS'required'
p45027
I00
sS'group_name'
p45028
S'Advanced'
p45029
sa(dp45030
S'description'
p45031
S'Set the enabled status of the MooseObject.\n'
p45032
sS'cpp_type'
p45033
S'bool'
p45034
sS'default'
p45035
S'1'
p45036
sS'name'
p45037
S'enable'
p45038
sS'required'
p45039
I00
sS'group_name'
p45040
S'Advanced'
p45041
sa(dp45042
S'name'
p45043
S'execute_on'
p45044
sS'cpp_type'
p45045
S'MultiMooseEnum'
p45046
sS'default'
p45047
S'TIMESTEP_END'
p45048
sS'description'
p45049
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45050
sS'required'
p45051
I00
sS'options'
p45052
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45053
sS'group_name'
p45054
Nsa(dp45055
S'description'
p45056
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45057
sS'cpp_type'
p45058
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45059
sS'default'
p45060
g3
sS'name'
p45061
S'outputs'
p45062
sS'required'
p45063
I00
sS'group_name'
p45064
S'Advanced'
p45065
sa(dp45066
S'description'
p45067
S'The name of the postprocessor\n'
p45068
sS'cpp_type'
p45069
S'PostprocessorName'
p45070
sS'default'
p45071
g3
sS'name'
p45072
S'postprocessor'
p45073
sS'required'
p45074
I01
sS'group_name'
p45075
Nsa(dp45076
S'description'
p45077
g3
sS'cpp_type'
p45078
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45079
sS'default'
p45080
S'CumulativeValuePostprocessor'
p45081
sS'name'
p45082
S'type'
p45083
sS'required'
p45084
I00
sS'group_name'
p45085
Nsa(dp45086
S'description'
p45087
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45088
sS'cpp_type'
p45089
S'bool'
p45090
sS'default'
p45091
S'0'
p45092
sS'name'
p45093
S'use_displaced_mesh'
p45094
sS'required'
p45095
I00
sS'group_name'
p45096
S'Advanced'
p45097
sasS'name'
p45098
S'/UserObjects/CumulativeValuePostprocessor'
p45099
sa(dp45100
S'description'
p45101
g3
sS'subblocks'
p45102
NsS'parameters'
p45103
(lp45104
(dp45105
S'description'
p45106
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45107
sS'cpp_type'
p45108
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45109
sS'default'
p45110
g3
sS'name'
p45111
S'control_tags'
p45112
sS'required'
p45113
I00
sS'group_name'
p45114
S'Advanced'
p45115
sa(dp45116
S'description'
p45117
S'Set the enabled status of the MooseObject.\n'
p45118
sS'cpp_type'
p45119
S'bool'
p45120
sS'default'
p45121
S'1'
p45122
sS'name'
p45123
S'enable'
p45124
sS'required'
p45125
I00
sS'group_name'
p45126
S'Advanced'
p45127
sa(dp45128
S'name'
p45129
S'execute_on'
p45130
sS'cpp_type'
p45131
S'MultiMooseEnum'
p45132
sS'default'
p45133
S'TIMESTEP_END'
p45134
sS'description'
p45135
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45136
sS'required'
p45137
I00
sS'options'
p45138
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45139
sS'group_name'
p45140
Nsa(dp45141
S'description'
p45142
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45143
sS'cpp_type'
p45144
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45145
sS'default'
p45146
g3
sS'name'
p45147
S'outputs'
p45148
sS'required'
p45149
I00
sS'group_name'
p45150
S'Advanced'
p45151
sa(dp45152
S'description'
p45153
g3
sS'cpp_type'
p45154
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45155
sS'default'
p45156
S'DifferencePostprocessor'
p45157
sS'name'
p45158
S'type'
p45159
sS'required'
p45160
I00
sS'group_name'
p45161
Nsa(dp45162
S'description'
p45163
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45164
sS'cpp_type'
p45165
S'bool'
p45166
sS'default'
p45167
S'0'
p45168
sS'name'
p45169
S'use_displaced_mesh'
p45170
sS'required'
p45171
I00
sS'group_name'
p45172
S'Advanced'
p45173
sa(dp45174
S'description'
p45175
S'First value\n'
p45176
sS'cpp_type'
p45177
S'PostprocessorName'
p45178
sS'default'
p45179
g3
sS'name'
p45180
S'value1'
p45181
sS'required'
p45182
I01
sS'group_name'
p45183
Nsa(dp45184
S'description'
p45185
S'Second value\n'
p45186
sS'cpp_type'
p45187
S'PostprocessorName'
p45188
sS'default'
p45189
g3
sS'name'
p45190
S'value2'
p45191
sS'required'
p45192
I01
sS'group_name'
p45193
NsasS'name'
p45194
S'/UserObjects/DifferencePostprocessor'
p45195
sa(dp45196
S'description'
p45197
g3
sS'subblocks'
p45198
NsS'parameters'
p45199
(lp45200
(dp45201
S'description'
p45202
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45203
sS'cpp_type'
p45204
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45205
sS'default'
p45206
g3
sS'name'
p45207
S'block'
p45208
sS'required'
p45209
I00
sS'group_name'
p45210
Nsa(dp45211
S'description'
p45212
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45213
sS'cpp_type'
p45214
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45215
sS'default'
p45216
g3
sS'name'
p45217
S'control_tags'
p45218
sS'required'
p45219
I00
sS'group_name'
p45220
S'Advanced'
p45221
sa(dp45222
S'description'
p45223
S'Set the enabled status of the MooseObject.\n'
p45224
sS'cpp_type'
p45225
S'bool'
p45226
sS'default'
p45227
S'1'
p45228
sS'name'
p45229
S'enable'
p45230
sS'required'
p45231
I00
sS'group_name'
p45232
S'Advanced'
p45233
sa(dp45234
S'name'
p45235
S'execute_on'
p45236
sS'cpp_type'
p45237
S'MultiMooseEnum'
p45238
sS'default'
p45239
S'TIMESTEP_END'
p45240
sS'description'
p45241
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45242
sS'required'
p45243
I00
sS'options'
p45244
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45245
sS'group_name'
p45246
Nsa(dp45247
S'description'
p45248
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45249
sS'cpp_type'
p45250
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45251
sS'default'
p45252
g3
sS'name'
p45253
S'outputs'
p45254
sS'required'
p45255
I00
sS'group_name'
p45256
S'Advanced'
p45257
sa(dp45258
S'description'
p45259
S'The seed for the master random number generator\n'
p45260
sS'cpp_type'
p45261
S'unsigned int'
p45262
sS'default'
p45263
S'0'
p45264
sS'name'
p45265
S'seed'
p45266
sS'required'
p45267
I00
sS'group_name'
p45268
S'Advanced'
p45269
sa(dp45270
S'description'
p45271
g3
sS'cpp_type'
p45272
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45273
sS'default'
p45274
S'ElementAverageTimeDerivative'
p45275
sS'name'
p45276
S'type'
p45277
sS'required'
p45278
I00
sS'group_name'
p45279
Nsa(dp45280
S'description'
p45281
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45282
sS'cpp_type'
p45283
S'bool'
p45284
sS'default'
p45285
S'0'
p45286
sS'name'
p45287
S'use_displaced_mesh'
p45288
sS'required'
p45289
I00
sS'group_name'
p45290
S'Advanced'
p45291
sa(dp45292
S'description'
p45293
S'The name of the variable that this object operates on\n'
p45294
sS'cpp_type'
p45295
S'std::vector<VariableName>'
p45296
sS'default'
p45297
g3
sS'name'
p45298
S'variable'
p45299
sS'required'
p45300
I01
sS'group_name'
p45301
NsasS'name'
p45302
S'/UserObjects/ElementAverageTimeDerivative'
p45303
sa(dp45304
S'description'
p45305
g3
sS'subblocks'
p45306
NsS'parameters'
p45307
(lp45308
(dp45309
S'description'
p45310
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45311
sS'cpp_type'
p45312
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45313
sS'default'
p45314
g3
sS'name'
p45315
S'block'
p45316
sS'required'
p45317
I00
sS'group_name'
p45318
Nsa(dp45319
S'description'
p45320
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45321
sS'cpp_type'
p45322
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45323
sS'default'
p45324
g3
sS'name'
p45325
S'control_tags'
p45326
sS'required'
p45327
I00
sS'group_name'
p45328
S'Advanced'
p45329
sa(dp45330
S'description'
p45331
S'Set the enabled status of the MooseObject.\n'
p45332
sS'cpp_type'
p45333
S'bool'
p45334
sS'default'
p45335
S'1'
p45336
sS'name'
p45337
S'enable'
p45338
sS'required'
p45339
I00
sS'group_name'
p45340
S'Advanced'
p45341
sa(dp45342
S'name'
p45343
S'execute_on'
p45344
sS'cpp_type'
p45345
S'MultiMooseEnum'
p45346
sS'default'
p45347
S'TIMESTEP_END'
p45348
sS'description'
p45349
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45350
sS'required'
p45351
I00
sS'options'
p45352
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45353
sS'group_name'
p45354
Nsa(dp45355
S'description'
p45356
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45357
sS'cpp_type'
p45358
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45359
sS'default'
p45360
g3
sS'name'
p45361
S'outputs'
p45362
sS'required'
p45363
I00
sS'group_name'
p45364
S'Advanced'
p45365
sa(dp45366
S'description'
p45367
S'The seed for the master random number generator\n'
p45368
sS'cpp_type'
p45369
S'unsigned int'
p45370
sS'default'
p45371
S'0'
p45372
sS'name'
p45373
S'seed'
p45374
sS'required'
p45375
I00
sS'group_name'
p45376
S'Advanced'
p45377
sa(dp45378
S'description'
p45379
g3
sS'cpp_type'
p45380
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45381
sS'default'
p45382
S'ElementAverageValue'
p45383
sS'name'
p45384
S'type'
p45385
sS'required'
p45386
I00
sS'group_name'
p45387
Nsa(dp45388
S'description'
p45389
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45390
sS'cpp_type'
p45391
S'bool'
p45392
sS'default'
p45393
S'0'
p45394
sS'name'
p45395
S'use_displaced_mesh'
p45396
sS'required'
p45397
I00
sS'group_name'
p45398
S'Advanced'
p45399
sa(dp45400
S'description'
p45401
S'The name of the variable that this object operates on\n'
p45402
sS'cpp_type'
p45403
S'std::vector<VariableName>'
p45404
sS'default'
p45405
g3
sS'name'
p45406
S'variable'
p45407
sS'required'
p45408
I01
sS'group_name'
p45409
NsasS'name'
p45410
S'/UserObjects/ElementAverageValue'
p45411
sa(dp45412
S'description'
p45413
g3
sS'subblocks'
p45414
NsS'parameters'
p45415
(lp45416
(dp45417
S'description'
p45418
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45419
sS'cpp_type'
p45420
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45421
sS'default'
p45422
g3
sS'name'
p45423
S'block'
p45424
sS'required'
p45425
I00
sS'group_name'
p45426
Nsa(dp45427
S'description'
p45428
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45429
sS'cpp_type'
p45430
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45431
sS'default'
p45432
g3
sS'name'
p45433
S'control_tags'
p45434
sS'required'
p45435
I00
sS'group_name'
p45436
S'Advanced'
p45437
sa(dp45438
S'description'
p45439
S'Set the enabled status of the MooseObject.\n'
p45440
sS'cpp_type'
p45441
S'bool'
p45442
sS'default'
p45443
S'1'
p45444
sS'name'
p45445
S'enable'
p45446
sS'required'
p45447
I00
sS'group_name'
p45448
S'Advanced'
p45449
sa(dp45450
S'name'
p45451
S'execute_on'
p45452
sS'cpp_type'
p45453
S'MultiMooseEnum'
p45454
sS'default'
p45455
S'TIMESTEP_END'
p45456
sS'description'
p45457
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45458
sS'required'
p45459
I00
sS'options'
p45460
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45461
sS'group_name'
p45462
Nsa(dp45463
S'description'
p45464
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45465
sS'cpp_type'
p45466
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45467
sS'default'
p45468
g3
sS'name'
p45469
S'outputs'
p45470
sS'required'
p45471
I00
sS'group_name'
p45472
S'Advanced'
p45473
sa(dp45474
S'description'
p45475
S'The seed for the master random number generator\n'
p45476
sS'cpp_type'
p45477
S'unsigned int'
p45478
sS'default'
p45479
S'0'
p45480
sS'name'
p45481
S'seed'
p45482
sS'required'
p45483
I00
sS'group_name'
p45484
S'Advanced'
p45485
sa(dp45486
S'description'
p45487
g3
sS'cpp_type'
p45488
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45489
sS'default'
p45490
S'ElementExtremeValue'
p45491
sS'name'
p45492
S'type'
p45493
sS'required'
p45494
I00
sS'group_name'
p45495
Nsa(dp45496
S'description'
p45497
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45498
sS'cpp_type'
p45499
S'bool'
p45500
sS'default'
p45501
S'0'
p45502
sS'name'
p45503
S'use_displaced_mesh'
p45504
sS'required'
p45505
I00
sS'group_name'
p45506
S'Advanced'
p45507
sa(dp45508
S'name'
p45509
S'value_type'
p45510
sS'cpp_type'
p45511
S'MooseEnum'
p45512
sS'default'
p45513
S'max'
p45514
sS'description'
p45515
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p45516
sS'required'
p45517
I00
sS'options'
p45518
S'max min'
p45519
sS'group_name'
p45520
Nsa(dp45521
S'description'
p45522
S'The name of the variable that this postprocessor operates on\n'
p45523
sS'cpp_type'
p45524
S'std::vector<VariableName>'
p45525
sS'default'
p45526
g3
sS'name'
p45527
S'variable'
p45528
sS'required'
p45529
I01
sS'group_name'
p45530
NsasS'name'
p45531
S'/UserObjects/ElementExtremeValue'
p45532
sa(dp45533
S'description'
p45534
g3
sS'subblocks'
p45535
NsS'parameters'
p45536
(lp45537
(dp45538
S'description'
p45539
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45540
sS'cpp_type'
p45541
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45542
sS'default'
p45543
g3
sS'name'
p45544
S'block'
p45545
sS'required'
p45546
I00
sS'group_name'
p45547
Nsa(dp45548
S'description'
p45549
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45550
sS'cpp_type'
p45551
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45552
sS'default'
p45553
g3
sS'name'
p45554
S'control_tags'
p45555
sS'required'
p45556
I00
sS'group_name'
p45557
S'Advanced'
p45558
sa(dp45559
S'description'
p45560
S'Set the enabled status of the MooseObject.\n'
p45561
sS'cpp_type'
p45562
S'bool'
p45563
sS'default'
p45564
S'1'
p45565
sS'name'
p45566
S'enable'
p45567
sS'required'
p45568
I00
sS'group_name'
p45569
S'Advanced'
p45570
sa(dp45571
S'name'
p45572
S'execute_on'
p45573
sS'cpp_type'
p45574
S'MultiMooseEnum'
p45575
sS'default'
p45576
S'TIMESTEP_END'
p45577
sS'description'
p45578
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45579
sS'required'
p45580
I00
sS'options'
p45581
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45582
sS'group_name'
p45583
Nsa(dp45584
S'description'
p45585
S'The analytic solution to compare against\n'
p45586
sS'cpp_type'
p45587
S'FunctionName'
p45588
sS'default'
p45589
g3
sS'name'
p45590
S'function'
p45591
sS'required'
p45592
I01
sS'group_name'
p45593
Nsa(dp45594
S'description'
p45595
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45596
sS'cpp_type'
p45597
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45598
sS'default'
p45599
g3
sS'name'
p45600
S'outputs'
p45601
sS'required'
p45602
I00
sS'group_name'
p45603
S'Advanced'
p45604
sa(dp45605
S'description'
p45606
S'The exponent used in the norm.\n'
p45607
sS'cpp_type'
p45608
S'double'
p45609
sS'default'
p45610
S'2'
p45611
sS'name'
p45612
S'p'
p45613
sS'required'
p45614
I00
sS'group_name'
p45615
Nsa(dp45616
S'description'
p45617
S'The seed for the master random number generator\n'
p45618
sS'cpp_type'
p45619
S'unsigned int'
p45620
sS'default'
p45621
S'0'
p45622
sS'name'
p45623
S'seed'
p45624
sS'required'
p45625
I00
sS'group_name'
p45626
S'Advanced'
p45627
sa(dp45628
S'description'
p45629
g3
sS'cpp_type'
p45630
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45631
sS'default'
p45632
S'ElementH1Error'
p45633
sS'name'
p45634
S'type'
p45635
sS'required'
p45636
I00
sS'group_name'
p45637
Nsa(dp45638
S'description'
p45639
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45640
sS'cpp_type'
p45641
S'bool'
p45642
sS'default'
p45643
S'0'
p45644
sS'name'
p45645
S'use_displaced_mesh'
p45646
sS'required'
p45647
I00
sS'group_name'
p45648
S'Advanced'
p45649
sa(dp45650
S'description'
p45651
S'The name of the variable that this object operates on\n'
p45652
sS'cpp_type'
p45653
S'std::vector<VariableName>'
p45654
sS'default'
p45655
g3
sS'name'
p45656
S'variable'
p45657
sS'required'
p45658
I01
sS'group_name'
p45659
NsasS'name'
p45660
S'/UserObjects/ElementH1Error'
p45661
sa(dp45662
S'description'
p45663
g3
sS'subblocks'
p45664
NsS'parameters'
p45665
(lp45666
(dp45667
S'description'
p45668
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45669
sS'cpp_type'
p45670
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45671
sS'default'
p45672
g3
sS'name'
p45673
S'block'
p45674
sS'required'
p45675
I00
sS'group_name'
p45676
Nsa(dp45677
S'description'
p45678
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45679
sS'cpp_type'
p45680
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45681
sS'default'
p45682
g3
sS'name'
p45683
S'control_tags'
p45684
sS'required'
p45685
I00
sS'group_name'
p45686
S'Advanced'
p45687
sa(dp45688
S'description'
p45689
S'Set the enabled status of the MooseObject.\n'
p45690
sS'cpp_type'
p45691
S'bool'
p45692
sS'default'
p45693
S'1'
p45694
sS'name'
p45695
S'enable'
p45696
sS'required'
p45697
I00
sS'group_name'
p45698
S'Advanced'
p45699
sa(dp45700
S'name'
p45701
S'execute_on'
p45702
sS'cpp_type'
p45703
S'MultiMooseEnum'
p45704
sS'default'
p45705
S'TIMESTEP_END'
p45706
sS'description'
p45707
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45708
sS'required'
p45709
I00
sS'options'
p45710
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45711
sS'group_name'
p45712
Nsa(dp45713
S'description'
p45714
S'The analytic solution to compare against\n'
p45715
sS'cpp_type'
p45716
S'FunctionName'
p45717
sS'default'
p45718
g3
sS'name'
p45719
S'function'
p45720
sS'required'
p45721
I01
sS'group_name'
p45722
Nsa(dp45723
S'description'
p45724
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45725
sS'cpp_type'
p45726
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45727
sS'default'
p45728
g3
sS'name'
p45729
S'outputs'
p45730
sS'required'
p45731
I00
sS'group_name'
p45732
S'Advanced'
p45733
sa(dp45734
S'description'
p45735
S'The seed for the master random number generator\n'
p45736
sS'cpp_type'
p45737
S'unsigned int'
p45738
sS'default'
p45739
S'0'
p45740
sS'name'
p45741
S'seed'
p45742
sS'required'
p45743
I00
sS'group_name'
p45744
S'Advanced'
p45745
sa(dp45746
S'description'
p45747
g3
sS'cpp_type'
p45748
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45749
sS'default'
p45750
S'ElementH1SemiError'
p45751
sS'name'
p45752
S'type'
p45753
sS'required'
p45754
I00
sS'group_name'
p45755
Nsa(dp45756
S'description'
p45757
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45758
sS'cpp_type'
p45759
S'bool'
p45760
sS'default'
p45761
S'0'
p45762
sS'name'
p45763
S'use_displaced_mesh'
p45764
sS'required'
p45765
I00
sS'group_name'
p45766
S'Advanced'
p45767
sa(dp45768
S'description'
p45769
S'The name of the variable that this object operates on\n'
p45770
sS'cpp_type'
p45771
S'std::vector<VariableName>'
p45772
sS'default'
p45773
g3
sS'name'
p45774
S'variable'
p45775
sS'required'
p45776
I01
sS'group_name'
p45777
NsasS'name'
p45778
S'/UserObjects/ElementH1SemiError'
p45779
sa(dp45780
S'description'
p45781
g3
sS'subblocks'
p45782
NsS'parameters'
p45783
(lp45784
(dp45785
S'description'
p45786
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45787
sS'cpp_type'
p45788
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45789
sS'default'
p45790
g3
sS'name'
p45791
S'block'
p45792
sS'required'
p45793
I00
sS'group_name'
p45794
Nsa(dp45795
S'description'
p45796
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45797
sS'cpp_type'
p45798
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45799
sS'default'
p45800
g3
sS'name'
p45801
S'control_tags'
p45802
sS'required'
p45803
I00
sS'group_name'
p45804
S'Advanced'
p45805
sa(dp45806
S'description'
p45807
S'Set the enabled status of the MooseObject.\n'
p45808
sS'cpp_type'
p45809
S'bool'
p45810
sS'default'
p45811
S'1'
p45812
sS'name'
p45813
S'enable'
p45814
sS'required'
p45815
I00
sS'group_name'
p45816
S'Advanced'
p45817
sa(dp45818
S'name'
p45819
S'execute_on'
p45820
sS'cpp_type'
p45821
S'MultiMooseEnum'
p45822
sS'default'
p45823
S'TIMESTEP_END'
p45824
sS'description'
p45825
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45826
sS'required'
p45827
I00
sS'options'
p45828
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45829
sS'group_name'
p45830
Nsa(dp45831
S'description'
p45832
S'The name of the material property\n'
p45833
sS'cpp_type'
p45834
S'MaterialPropertyName'
p45835
sS'default'
p45836
g3
sS'name'
p45837
S'mat_prop'
p45838
sS'required'
p45839
I01
sS'group_name'
p45840
Nsa(dp45841
S'description'
p45842
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45843
sS'cpp_type'
p45844
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45845
sS'default'
p45846
g3
sS'name'
p45847
S'outputs'
p45848
sS'required'
p45849
I00
sS'group_name'
p45850
S'Advanced'
p45851
sa(dp45852
S'description'
p45853
S'The seed for the master random number generator\n'
p45854
sS'cpp_type'
p45855
S'unsigned int'
p45856
sS'default'
p45857
S'0'
p45858
sS'name'
p45859
S'seed'
p45860
sS'required'
p45861
I00
sS'group_name'
p45862
S'Advanced'
p45863
sa(dp45864
S'description'
p45865
g3
sS'cpp_type'
p45866
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45867
sS'default'
p45868
S'ElementIntegralMaterialProperty'
p45869
sS'name'
p45870
S'type'
p45871
sS'required'
p45872
I00
sS'group_name'
p45873
Nsa(dp45874
S'description'
p45875
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45876
sS'cpp_type'
p45877
S'bool'
p45878
sS'default'
p45879
S'0'
p45880
sS'name'
p45881
S'use_displaced_mesh'
p45882
sS'required'
p45883
I00
sS'group_name'
p45884
S'Advanced'
p45885
sasS'name'
p45886
S'/UserObjects/ElementIntegralMaterialProperty'
p45887
sa(dp45888
S'description'
p45889
g3
sS'subblocks'
p45890
NsS'parameters'
p45891
(lp45892
(dp45893
S'description'
p45894
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45895
sS'cpp_type'
p45896
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45897
sS'default'
p45898
g3
sS'name'
p45899
S'block'
p45900
sS'required'
p45901
I00
sS'group_name'
p45902
Nsa(dp45903
S'description'
p45904
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45905
sS'cpp_type'
p45906
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45907
sS'default'
p45908
g3
sS'name'
p45909
S'control_tags'
p45910
sS'required'
p45911
I00
sS'group_name'
p45912
S'Advanced'
p45913
sa(dp45914
S'description'
p45915
S'Set the enabled status of the MooseObject.\n'
p45916
sS'cpp_type'
p45917
S'bool'
p45918
sS'default'
p45919
S'1'
p45920
sS'name'
p45921
S'enable'
p45922
sS'required'
p45923
I00
sS'group_name'
p45924
S'Advanced'
p45925
sa(dp45926
S'name'
p45927
S'execute_on'
p45928
sS'cpp_type'
p45929
S'MultiMooseEnum'
p45930
sS'default'
p45931
S'TIMESTEP_END'
p45932
sS'description'
p45933
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45934
sS'required'
p45935
I00
sS'options'
p45936
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45937
sS'group_name'
p45938
Nsa(dp45939
S'description'
p45940
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45941
sS'cpp_type'
p45942
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45943
sS'default'
p45944
g3
sS'name'
p45945
S'outputs'
p45946
sS'required'
p45947
I00
sS'group_name'
p45948
S'Advanced'
p45949
sa(dp45950
S'description'
p45951
S'The seed for the master random number generator\n'
p45952
sS'cpp_type'
p45953
S'unsigned int'
p45954
sS'default'
p45955
S'0'
p45956
sS'name'
p45957
S'seed'
p45958
sS'required'
p45959
I00
sS'group_name'
p45960
S'Advanced'
p45961
sa(dp45962
S'description'
p45963
g3
sS'cpp_type'
p45964
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45965
sS'default'
p45966
S'ElementIntegralVariablePostprocessor'
p45967
sS'name'
p45968
S'type'
p45969
sS'required'
p45970
I00
sS'group_name'
p45971
Nsa(dp45972
S'description'
p45973
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45974
sS'cpp_type'
p45975
S'bool'
p45976
sS'default'
p45977
S'0'
p45978
sS'name'
p45979
S'use_displaced_mesh'
p45980
sS'required'
p45981
I00
sS'group_name'
p45982
S'Advanced'
p45983
sa(dp45984
S'description'
p45985
S'The name of the variable that this object operates on\n'
p45986
sS'cpp_type'
p45987
S'std::vector<VariableName>'
p45988
sS'default'
p45989
g3
sS'name'
p45990
S'variable'
p45991
sS'required'
p45992
I01
sS'group_name'
p45993
NsasS'name'
p45994
S'/UserObjects/ElementIntegralVariablePostprocessor'
p45995
sa(dp45996
S'description'
p45997
g3
sS'subblocks'
p45998
NsS'parameters'
p45999
(lp46000
(dp46001
S'description'
p46002
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46003
sS'cpp_type'
p46004
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p46005
sS'default'
p46006
g3
sS'name'
p46007
S'block'
p46008
sS'required'
p46009
I00
sS'group_name'
p46010
Nsa(dp46011
S'description'
p46012
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46013
sS'cpp_type'
p46014
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46015
sS'default'
p46016
g3
sS'name'
p46017
S'control_tags'
p46018
sS'required'
p46019
I00
sS'group_name'
p46020
S'Advanced'
p46021
sa(dp46022
S'description'
p46023
S'Set the enabled status of the MooseObject.\n'
p46024
sS'cpp_type'
p46025
S'bool'
p46026
sS'default'
p46027
S'1'
p46028
sS'name'
p46029
S'enable'
p46030
sS'required'
p46031
I00
sS'group_name'
p46032
S'Advanced'
p46033
sa(dp46034
S'name'
p46035
S'execute_on'
p46036
sS'cpp_type'
p46037
S'MultiMooseEnum'
p46038
sS'default'
p46039
S'TIMESTEP_END'
p46040
sS'description'
p46041
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46042
sS'required'
p46043
I00
sS'options'
p46044
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46045
sS'group_name'
p46046
Nsa(dp46047
S'description'
p46048
S'The seed for the master random number generator\n'
p46049
sS'cpp_type'
p46050
S'unsigned int'
p46051
sS'default'
p46052
S'0'
p46053
sS'name'
p46054
S'seed'
p46055
sS'required'
p46056
I00
sS'group_name'
p46057
S'Advanced'
p46058
sa(dp46059
S'description'
p46060
g3
sS'cpp_type'
p46061
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46062
sS'default'
p46063
S'ElementIntegralVariableUserObject'
p46064
sS'name'
p46065
S'type'
p46066
sS'required'
p46067
I00
sS'group_name'
p46068
Nsa(dp46069
S'description'
p46070
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46071
sS'cpp_type'
p46072
S'bool'
p46073
sS'default'
p46074
S'0'
p46075
sS'name'
p46076
S'use_displaced_mesh'
p46077
sS'required'
p46078
I00
sS'group_name'
p46079
S'Advanced'
p46080
sa(dp46081
S'description'
p46082
S'The name of the variable that this object operates on\n'
p46083
sS'cpp_type'
p46084
S'std::vector<VariableName>'
p46085
sS'default'
p46086
g3
sS'name'
p46087
S'variable'
p46088
sS'required'
p46089
I01
sS'group_name'
p46090
NsasS'name'
p46091
S'/UserObjects/ElementIntegralVariableUserObject'
p46092
sa(dp46093
S'description'
p46094
g3
sS'subblocks'
p46095
NsS'parameters'
p46096
(lp46097
(dp46098
S'description'
p46099
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46100
sS'cpp_type'
p46101
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p46102
sS'default'
p46103
g3
sS'name'
p46104
S'block'
p46105
sS'required'
p46106
I00
sS'group_name'
p46107
Nsa(dp46108
S'description'
p46109
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46110
sS'cpp_type'
p46111
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46112
sS'default'
p46113
g3
sS'name'
p46114
S'control_tags'
p46115
sS'required'
p46116
I00
sS'group_name'
p46117
S'Advanced'
p46118
sa(dp46119
S'description'
p46120
S'Set the enabled status of the MooseObject.\n'
p46121
sS'cpp_type'
p46122
S'bool'
p46123
sS'default'
p46124
S'1'
p46125
sS'name'
p46126
S'enable'
p46127
sS'required'
p46128
I00
sS'group_name'
p46129
S'Advanced'
p46130
sa(dp46131
S'name'
p46132
S'execute_on'
p46133
sS'cpp_type'
p46134
S'MultiMooseEnum'
p46135
sS'default'
p46136
S'TIMESTEP_END'
p46137
sS'description'
p46138
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46139
sS'required'
p46140
I00
sS'options'
p46141
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46142
sS'group_name'
p46143
Nsa(dp46144
S'description'
p46145
S'The variable to compare to\n'
p46146
sS'cpp_type'
p46147
S'std::vector<VariableName>'
p46148
sS'default'
p46149
g3
sS'name'
p46150
S'other_variable'
p46151
sS'required'
p46152
I01
sS'group_name'
p46153
Nsa(dp46154
S'description'
p46155
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46156
sS'cpp_type'
p46157
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46158
sS'default'
p46159
g3
sS'name'
p46160
S'outputs'
p46161
sS'required'
p46162
I00
sS'group_name'
p46163
S'Advanced'
p46164
sa(dp46165
S'description'
p46166
S'The seed for the master random number generator\n'
p46167
sS'cpp_type'
p46168
S'unsigned int'
p46169
sS'default'
p46170
S'0'
p46171
sS'name'
p46172
S'seed'
p46173
sS'required'
p46174
I00
sS'group_name'
p46175
S'Advanced'
p46176
sa(dp46177
S'description'
p46178
g3
sS'cpp_type'
p46179
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46180
sS'default'
p46181
S'ElementL2Difference'
p46182
sS'name'
p46183
S'type'
p46184
sS'required'
p46185
I00
sS'group_name'
p46186
Nsa(dp46187
S'description'
p46188
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46189
sS'cpp_type'
p46190
S'bool'
p46191
sS'default'
p46192
S'0'
p46193
sS'name'
p46194
S'use_displaced_mesh'
p46195
sS'required'
p46196
I00
sS'group_name'
p46197
S'Advanced'
p46198
sa(dp46199
S'description'
p46200
S'The name of the variable that this object operates on\n'
p46201
sS'cpp_type'
p46202
S'std::vector<VariableName>'
p46203
sS'default'
p46204
g3
sS'name'
p46205
S'variable'
p46206
sS'required'
p46207
I01
sS'group_name'
p46208
NsasS'name'
p46209
S'/UserObjects/ElementL2Difference'
p46210
sa(dp46211
S'description'
p46212
g3
sS'subblocks'
p46213
NsS'parameters'
p46214
(lp46215
(dp46216
S'description'
p46217
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46218
sS'cpp_type'
p46219
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p46220
sS'default'
p46221
g3
sS'name'
p46222
S'block'
p46223
sS'required'
p46224
I00
sS'group_name'
p46225
Nsa(dp46226
S'description'
p46227
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46228
sS'cpp_type'
p46229
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46230
sS'default'
p46231
g3
sS'name'
p46232
S'control_tags'
p46233
sS'required'
p46234
I00
sS'group_name'
p46235
S'Advanced'
p46236
sa(dp46237
S'description'
p46238
S'Set the enabled status of the MooseObject.\n'
p46239
sS'cpp_type'
p46240
S'bool'
p46241
sS'default'
p46242
S'1'
p46243
sS'name'
p46244
S'enable'
p46245
sS'required'
p46246
I00
sS'group_name'
p46247
S'Advanced'
p46248
sa(dp46249
S'name'
p46250
S'execute_on'
p46251
sS'cpp_type'
p46252
S'MultiMooseEnum'
p46253
sS'default'
p46254
S'TIMESTEP_END'
p46255
sS'description'
p46256
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46257
sS'required'
p46258
I00
sS'options'
p46259
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46260
sS'group_name'
p46261
Nsa(dp46262
S'description'
p46263
S'The analytic solution to compare against\n'
p46264
sS'cpp_type'
p46265
S'FunctionName'
p46266
sS'default'
p46267
g3
sS'name'
p46268
S'function'
p46269
sS'required'
p46270
I01
sS'group_name'
p46271
Nsa(dp46272
S'description'
p46273
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46274
sS'cpp_type'
p46275
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46276
sS'default'
p46277
g3
sS'name'
p46278
S'outputs'
p46279
sS'required'
p46280
I00
sS'group_name'
p46281
S'Advanced'
p46282
sa(dp46283
S'description'
p46284
S'The seed for the master random number generator\n'
p46285
sS'cpp_type'
p46286
S'unsigned int'
p46287
sS'default'
p46288
S'0'
p46289
sS'name'
p46290
S'seed'
p46291
sS'required'
p46292
I00
sS'group_name'
p46293
S'Advanced'
p46294
sa(dp46295
S'description'
p46296
g3
sS'cpp_type'
p46297
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46298
sS'default'
p46299
S'ElementL2Error'
p46300
sS'name'
p46301
S'type'
p46302
sS'required'
p46303
I00
sS'group_name'
p46304
Nsa(dp46305
S'description'
p46306
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46307
sS'cpp_type'
p46308
S'bool'
p46309
sS'default'
p46310
S'0'
p46311
sS'name'
p46312
S'use_displaced_mesh'
p46313
sS'required'
p46314
I00
sS'group_name'
p46315
S'Advanced'
p46316
sa(dp46317
S'description'
p46318
S'The name of the variable that this object operates on\n'
p46319
sS'cpp_type'
p46320
S'std::vector<VariableName>'
p46321
sS'default'
p46322
g3
sS'name'
p46323
S'variable'
p46324
sS'required'
p46325
I01
sS'group_name'
p46326
NsasS'name'
p46327
S'/UserObjects/ElementL2Error'
p46328
sa(dp46329
S'description'
p46330
g3
sS'subblocks'
p46331
NsS'parameters'
p46332
(lp46333
(dp46334
S'description'
p46335
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46336
sS'cpp_type'
p46337
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p46338
sS'default'
p46339
g3
sS'name'
p46340
S'block'
p46341
sS'required'
p46342
I00
sS'group_name'
p46343
Nsa(dp46344
S'description'
p46345
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46346
sS'cpp_type'
p46347
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46348
sS'default'
p46349
g3
sS'name'
p46350
S'control_tags'
p46351
sS'required'
p46352
I00
sS'group_name'
p46353
S'Advanced'
p46354
sa(dp46355
S'description'
p46356
S'Set the enabled status of the MooseObject.\n'
p46357
sS'cpp_type'
p46358
S'bool'
p46359
sS'default'
p46360
S'1'
p46361
sS'name'
p46362
S'enable'
p46363
sS'required'
p46364
I00
sS'group_name'
p46365
S'Advanced'
p46366
sa(dp46367
S'name'
p46368
S'execute_on'
p46369
sS'cpp_type'
p46370
S'MultiMooseEnum'
p46371
sS'default'
p46372
S'TIMESTEP_END'
p46373
sS'description'
p46374
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46375
sS'required'
p46376
I00
sS'options'
p46377
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46378
sS'group_name'
p46379
Nsa(dp46380
S'description'
p46381
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46382
sS'cpp_type'
p46383
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46384
sS'default'
p46385
g3
sS'name'
p46386
S'outputs'
p46387
sS'required'
p46388
I00
sS'group_name'
p46389
S'Advanced'
p46390
sa(dp46391
S'description'
p46392
S'The seed for the master random number generator\n'
p46393
sS'cpp_type'
p46394
S'unsigned int'
p46395
sS'default'
p46396
S'0'
p46397
sS'name'
p46398
S'seed'
p46399
sS'required'
p46400
I00
sS'group_name'
p46401
S'Advanced'
p46402
sa(dp46403
S'description'
p46404
g3
sS'cpp_type'
p46405
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46406
sS'default'
p46407
S'ElementL2Norm'
p46408
sS'name'
p46409
S'type'
p46410
sS'required'
p46411
I00
sS'group_name'
p46412
Nsa(dp46413
S'description'
p46414
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46415
sS'cpp_type'
p46416
S'bool'
p46417
sS'default'
p46418
S'0'
p46419
sS'name'
p46420
S'use_displaced_mesh'
p46421
sS'required'
p46422
I00
sS'group_name'
p46423
S'Advanced'
p46424
sa(dp46425
S'description'
p46426
S'The name of the variable that this object operates on\n'
p46427
sS'cpp_type'
p46428
S'std::vector<VariableName>'
p46429
sS'default'
p46430
g3
sS'name'
p46431
S'variable'
p46432
sS'required'
p46433
I01
sS'group_name'
p46434
NsasS'name'
p46435
S'/UserObjects/ElementL2Norm'
p46436
sa(dp46437
S'description'
p46438
g3
sS'subblocks'
p46439
NsS'parameters'
p46440
(lp46441
(dp46442
S'description'
p46443
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46444
sS'cpp_type'
p46445
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p46446
sS'default'
p46447
g3
sS'name'
p46448
S'block'
p46449
sS'required'
p46450
I00
sS'group_name'
p46451
Nsa(dp46452
S'description'
p46453
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46454
sS'cpp_type'
p46455
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46456
sS'default'
p46457
g3
sS'name'
p46458
S'control_tags'
p46459
sS'required'
p46460
I00
sS'group_name'
p46461
S'Advanced'
p46462
sa(dp46463
S'description'
p46464
S'Set the enabled status of the MooseObject.\n'
p46465
sS'cpp_type'
p46466
S'bool'
p46467
sS'default'
p46468
S'1'
p46469
sS'name'
p46470
S'enable'
p46471
sS'required'
p46472
I00
sS'group_name'
p46473
S'Advanced'
p46474
sa(dp46475
S'name'
p46476
S'execute_on'
p46477
sS'cpp_type'
p46478
S'MultiMooseEnum'
p46479
sS'default'
p46480
S'TIMESTEP_END'
p46481
sS'description'
p46482
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46483
sS'required'
p46484
I00
sS'options'
p46485
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46486
sS'group_name'
p46487
Nsa(dp46488
S'description'
p46489
S'The analytic solution to compare against\n'
p46490
sS'cpp_type'
p46491
S'FunctionName'
p46492
sS'default'
p46493
g3
sS'name'
p46494
S'function_x'
p46495
sS'required'
p46496
I01
sS'group_name'
p46497
Nsa(dp46498
S'description'
p46499
S'The analytic solution to compare against\n'
p46500
sS'cpp_type'
p46501
S'FunctionName'
p46502
sS'default'
p46503
S'0'
p46504
sS'name'
p46505
S'function_y'
p46506
sS'required'
p46507
I00
sS'group_name'
p46508
Nsa(dp46509
S'description'
p46510
S'The analytic solution to compare against\n'
p46511
sS'cpp_type'
p46512
S'FunctionName'
p46513
sS'default'
p46514
S'0'
p46515
sS'name'
p46516
S'function_z'
p46517
sS'required'
p46518
I00
sS'group_name'
p46519
Nsa(dp46520
S'description'
p46521
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46522
sS'cpp_type'
p46523
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46524
sS'default'
p46525
g3
sS'name'
p46526
S'outputs'
p46527
sS'required'
p46528
I00
sS'group_name'
p46529
S'Advanced'
p46530
sa(dp46531
S'description'
p46532
S'The seed for the master random number generator\n'
p46533
sS'cpp_type'
p46534
S'unsigned int'
p46535
sS'default'
p46536
S'0'
p46537
sS'name'
p46538
S'seed'
p46539
sS'required'
p46540
I00
sS'group_name'
p46541
S'Advanced'
p46542
sa(dp46543
S'description'
p46544
g3
sS'cpp_type'
p46545
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46546
sS'default'
p46547
S'ElementVectorL2Error'
p46548
sS'name'
p46549
S'type'
p46550
sS'required'
p46551
I00
sS'group_name'
p46552
Nsa(dp46553
S'description'
p46554
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46555
sS'cpp_type'
p46556
S'bool'
p46557
sS'default'
p46558
S'0'
p46559
sS'name'
p46560
S'use_displaced_mesh'
p46561
sS'required'
p46562
I00
sS'group_name'
p46563
S'Advanced'
p46564
sa(dp46565
S'description'
p46566
S'The FE solution in x direction\n'
p46567
sS'cpp_type'
p46568
S'std::vector<VariableName>'
p46569
sS'default'
p46570
g3
sS'name'
p46571
S'var_x'
p46572
sS'required'
p46573
I01
sS'group_name'
p46574
Nsa(dp46575
S'description'
p46576
S'The FE solution in y direction\n'
p46577
sS'cpp_type'
p46578
S'std::vector<VariableName>'
p46579
sS'default'
p46580
S'0'
p46581
sS'name'
p46582
S'var_y'
p46583
sS'required'
p46584
I00
sS'group_name'
p46585
Nsa(dp46586
S'description'
p46587
S'The FE solution in z direction\n'
p46588
sS'cpp_type'
p46589
S'std::vector<VariableName>'
p46590
sS'default'
p46591
S'0'
p46592
sS'name'
p46593
S'var_z'
p46594
sS'required'
p46595
I00
sS'group_name'
p46596
NsasS'name'
p46597
S'/UserObjects/ElementVectorL2Error'
p46598
sa(dp46599
S'description'
p46600
g3
sS'subblocks'
p46601
NsS'parameters'
p46602
(lp46603
(dp46604
S'description'
p46605
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46606
sS'cpp_type'
p46607
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p46608
sS'default'
p46609
g3
sS'name'
p46610
S'block'
p46611
sS'required'
p46612
I00
sS'group_name'
p46613
Nsa(dp46614
S'description'
p46615
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46616
sS'cpp_type'
p46617
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46618
sS'default'
p46619
g3
sS'name'
p46620
S'control_tags'
p46621
sS'required'
p46622
I00
sS'group_name'
p46623
S'Advanced'
p46624
sa(dp46625
S'description'
p46626
S'Set the enabled status of the MooseObject.\n'
p46627
sS'cpp_type'
p46628
S'bool'
p46629
sS'default'
p46630
S'1'
p46631
sS'name'
p46632
S'enable'
p46633
sS'required'
p46634
I00
sS'group_name'
p46635
S'Advanced'
p46636
sa(dp46637
S'name'
p46638
S'execute_on'
p46639
sS'cpp_type'
p46640
S'MultiMooseEnum'
p46641
sS'default'
p46642
S'TIMESTEP_END'
p46643
sS'description'
p46644
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46645
sS'required'
p46646
I00
sS'options'
p46647
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46648
sS'group_name'
p46649
Nsa(dp46650
S'description'
p46651
S'The analytic solution to compare against\n'
p46652
sS'cpp_type'
p46653
S'FunctionName'
p46654
sS'default'
p46655
g3
sS'name'
p46656
S'function'
p46657
sS'required'
p46658
I01
sS'group_name'
p46659
Nsa(dp46660
S'description'
p46661
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46662
sS'cpp_type'
p46663
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46664
sS'default'
p46665
g3
sS'name'
p46666
S'outputs'
p46667
sS'required'
p46668
I00
sS'group_name'
p46669
S'Advanced'
p46670
sa(dp46671
S'description'
p46672
S'The exponent used in the norm.\n'
p46673
sS'cpp_type'
p46674
S'double'
p46675
sS'default'
p46676
S'2'
p46677
sS'name'
p46678
S'p'
p46679
sS'required'
p46680
I00
sS'group_name'
p46681
Nsa(dp46682
S'description'
p46683
S'The seed for the master random number generator\n'
p46684
sS'cpp_type'
p46685
S'unsigned int'
p46686
sS'default'
p46687
S'0'
p46688
sS'name'
p46689
S'seed'
p46690
sS'required'
p46691
I00
sS'group_name'
p46692
S'Advanced'
p46693
sa(dp46694
S'description'
p46695
g3
sS'cpp_type'
p46696
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46697
sS'default'
p46698
S'ElementW1pError'
p46699
sS'name'
p46700
S'type'
p46701
sS'required'
p46702
I00
sS'group_name'
p46703
Nsa(dp46704
S'description'
p46705
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46706
sS'cpp_type'
p46707
S'bool'
p46708
sS'default'
p46709
S'0'
p46710
sS'name'
p46711
S'use_displaced_mesh'
p46712
sS'required'
p46713
I00
sS'group_name'
p46714
S'Advanced'
p46715
sa(dp46716
S'description'
p46717
S'The name of the variable that this object operates on\n'
p46718
sS'cpp_type'
p46719
S'std::vector<VariableName>'
p46720
sS'default'
p46721
g3
sS'name'
p46722
S'variable'
p46723
sS'required'
p46724
I01
sS'group_name'
p46725
NsasS'name'
p46726
S'/UserObjects/ElementW1pError'
p46727
sa(dp46728
S'description'
p46729
g3
sS'subblocks'
p46730
NsS'parameters'
p46731
(lp46732
(dp46733
S'description'
p46734
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46735
sS'cpp_type'
p46736
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46737
sS'default'
p46738
g3
sS'name'
p46739
S'control_tags'
p46740
sS'required'
p46741
I00
sS'group_name'
p46742
S'Advanced'
p46743
sa(dp46744
S'description'
p46745
S'The ID of the element where we monitor\n'
p46746
sS'cpp_type'
p46747
S'unsigned int'
p46748
sS'default'
p46749
g3
sS'name'
p46750
S'elementid'
p46751
sS'required'
p46752
I01
sS'group_name'
p46753
Nsa(dp46754
S'description'
p46755
S'Set the enabled status of the MooseObject.\n'
p46756
sS'cpp_type'
p46757
S'bool'
p46758
sS'default'
p46759
S'1'
p46760
sS'name'
p46761
S'enable'
p46762
sS'required'
p46763
I00
sS'group_name'
p46764
S'Advanced'
p46765
sa(dp46766
S'name'
p46767
S'execute_on'
p46768
sS'cpp_type'
p46769
S'MultiMooseEnum'
p46770
sS'default'
p46771
S'TIMESTEP_END'
p46772
sS'description'
p46773
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46774
sS'required'
p46775
I00
sS'options'
p46776
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46777
sS'group_name'
p46778
Nsa(dp46779
S'description'
p46780
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46781
sS'cpp_type'
p46782
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46783
sS'default'
p46784
g3
sS'name'
p46785
S'outputs'
p46786
sS'required'
p46787
I00
sS'group_name'
p46788
S'Advanced'
p46789
sa(dp46790
S'description'
p46791
g3
sS'cpp_type'
p46792
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46793
sS'default'
p46794
S'ElementalVariableValue'
p46795
sS'name'
p46796
S'type'
p46797
sS'required'
p46798
I00
sS'group_name'
p46799
Nsa(dp46800
S'description'
p46801
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46802
sS'cpp_type'
p46803
S'bool'
p46804
sS'default'
p46805
S'0'
p46806
sS'name'
p46807
S'use_displaced_mesh'
p46808
sS'required'
p46809
I00
sS'group_name'
p46810
S'Advanced'
p46811
sa(dp46812
S'description'
p46813
S'The variable to be monitored\n'
p46814
sS'cpp_type'
p46815
S'VariableName'
p46816
sS'default'
p46817
g3
sS'name'
p46818
S'variable'
p46819
sS'required'
p46820
I01
sS'group_name'
p46821
NsasS'name'
p46822
S'/UserObjects/ElementalVariableValue'
p46823
sa(dp46824
S'description'
p46825
g3
sS'subblocks'
p46826
NsS'parameters'
p46827
(lp46828
(dp46829
S'description'
p46830
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46831
sS'cpp_type'
p46832
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46833
sS'default'
p46834
g3
sS'name'
p46835
S'control_tags'
p46836
sS'required'
p46837
I00
sS'group_name'
p46838
S'Advanced'
p46839
sa(dp46840
S'description'
p46841
S'Set the enabled status of the MooseObject.\n'
p46842
sS'cpp_type'
p46843
S'bool'
p46844
sS'default'
p46845
S'1'
p46846
sS'name'
p46847
S'enable'
p46848
sS'required'
p46849
I00
sS'group_name'
p46850
S'Advanced'
p46851
sa(dp46852
S'name'
p46853
S'execute_on'
p46854
sS'cpp_type'
p46855
S'MultiMooseEnum'
p46856
sS'default'
p46857
S'TIMESTEP_END'
p46858
sS'description'
p46859
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46860
sS'required'
p46861
I00
sS'options'
p46862
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46863
sS'group_name'
p46864
Nsa(dp46865
S'description'
p46866
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46867
sS'cpp_type'
p46868
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46869
sS'default'
p46870
g3
sS'name'
p46871
S'outputs'
p46872
sS'required'
p46873
I00
sS'group_name'
p46874
S'Advanced'
p46875
sa(dp46876
S'description'
p46877
g3
sS'cpp_type'
p46878
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46879
sS'default'
p46880
S'EmptyPostprocessor'
p46881
sS'name'
p46882
S'type'
p46883
sS'required'
p46884
I00
sS'group_name'
p46885
Nsa(dp46886
S'description'
p46887
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46888
sS'cpp_type'
p46889
S'bool'
p46890
sS'default'
p46891
S'0'
p46892
sS'name'
p46893
S'use_displaced_mesh'
p46894
sS'required'
p46895
I00
sS'group_name'
p46896
S'Advanced'
p46897
sasS'name'
p46898
S'/UserObjects/EmptyPostprocessor'
p46899
sa(dp46900
S'description'
p46901
g3
sS'subblocks'
p46902
NsS'parameters'
p46903
(lp46904
(dp46905
S'description'
p46906
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46907
sS'cpp_type'
p46908
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46909
sS'default'
p46910
g3
sS'name'
p46911
S'control_tags'
p46912
sS'required'
p46913
I00
sS'group_name'
p46914
S'Advanced'
p46915
sa(dp46916
S'description'
p46917
S'Set the enabled status of the MooseObject.\n'
p46918
sS'cpp_type'
p46919
S'bool'
p46920
sS'default'
p46921
S'1'
p46922
sS'name'
p46923
S'enable'
p46924
sS'required'
p46925
I00
sS'group_name'
p46926
S'Advanced'
p46927
sa(dp46928
S'name'
p46929
S'execute_on'
p46930
sS'cpp_type'
p46931
S'MultiMooseEnum'
p46932
sS'default'
p46933
S'TIMESTEP_END'
p46934
sS'description'
p46935
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46936
sS'required'
p46937
I00
sS'options'
p46938
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46939
sS'group_name'
p46940
Nsa(dp46941
S'description'
p46942
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46943
sS'cpp_type'
p46944
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46945
sS'default'
p46946
g3
sS'name'
p46947
S'outputs'
p46948
sS'required'
p46949
I00
sS'group_name'
p46950
S'Advanced'
p46951
sa(dp46952
S'description'
p46953
g3
sS'cpp_type'
p46954
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46955
sS'default'
p46956
S'ExecutionerAttributeReporter'
p46957
sS'name'
p46958
S'type'
p46959
sS'required'
p46960
I00
sS'group_name'
p46961
Nsa(dp46962
S'description'
p46963
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46964
sS'cpp_type'
p46965
S'bool'
p46966
sS'default'
p46967
S'0'
p46968
sS'name'
p46969
S'use_displaced_mesh'
p46970
sS'required'
p46971
I00
sS'group_name'
p46972
S'Advanced'
p46973
sasS'name'
p46974
S'/UserObjects/ExecutionerAttributeReporter'
p46975
sa(dp46976
S'description'
p46977
S'Find a specific target value along a sampling line. The variable values along the line should change monotonically. The target value is searched using a bisection algorithm.\n'
p46978
sS'subblocks'
p46979
NsS'parameters'
p46980
(lp46981
(dp46982
S'description'
p46983
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46984
sS'cpp_type'
p46985
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46986
sS'default'
p46987
g3
sS'name'
p46988
S'control_tags'
p46989
sS'required'
p46990
I00
sS'group_name'
p46991
S'Advanced'
p46992
sa(dp46993
S'description'
p46994
S'Maximum number of bisections to perform.\n'
p46995
sS'cpp_type'
p46996
S'unsigned int'
p46997
sS'default'
p46998
S'36'
p46999
sS'name'
p47000
S'depth'
p47001
sS'required'
p47002
I00
sS'group_name'
p47003
Nsa(dp47004
S'description'
p47005
S'Set the enabled status of the MooseObject.\n'
p47006
sS'cpp_type'
p47007
S'bool'
p47008
sS'default'
p47009
S'1'
p47010
sS'name'
p47011
S'enable'
p47012
sS'required'
p47013
I00
sS'group_name'
p47014
S'Advanced'
p47015
sa(dp47016
S'description'
p47017
S'End point of the sampling line.\n'
p47018
sS'cpp_type'
p47019
S'libMesh::Point'
p47020
sS'default'
p47021
g3
sS'name'
p47022
S'end_point'
p47023
sS'required'
p47024
I00
sS'group_name'
p47025
Nsa(dp47026
S'name'
p47027
S'execute_on'
p47028
sS'cpp_type'
p47029
S'MultiMooseEnum'
p47030
sS'default'
p47031
S'TIMESTEP_END'
p47032
sS'description'
p47033
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p47034
sS'required'
p47035
I00
sS'options'
p47036
S'none initial linear nonlinear timestep_end timestep_begin custom'
p47037
sS'group_name'
p47038
Nsa(dp47039
S'description'
p47040
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p47041
sS'cpp_type'
p47042
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p47043
sS'default'
p47044
g3
sS'name'
p47045
S'outputs'
p47046
sS'required'
p47047
I00
sS'group_name'
p47048
S'Advanced'
p47049
sa(dp47050
S'description'
p47051
S'Start point of the sampling line.\n'
p47052
sS'cpp_type'
p47053
S'libMesh::Point'
p47054
sS'default'
p47055
g3
sS'name'
p47056
S'start_point'
p47057
sS'required'
p47058
I00
sS'group_name'
p47059
Nsa(dp47060
S'description'
p47061
S'Target value to locate.\n'
p47062
sS'cpp_type'
p47063
S'double'
p47064
sS'default'
p47065
g3
sS'name'
p47066
S'target'
p47067
sS'required'
p47068
I00
sS'group_name'
p47069
Nsa(dp47070
S'description'
p47071
S'Stop search if a value is found that is equal to the target with this tolerance applied.\n'
p47072
sS'cpp_type'
p47073
S'double'
p47074
sS'default'
p47075
S'1e-10'
p47076
sS'name'
p47077
S'tol'
p47078
sS'required'
p47079
I00
sS'group_name'
p47080
Nsa(dp47081
S'description'
p47082
g3
sS'cpp_type'
p47083
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47084
sS'default'
p47085
S'FindValueOnLine'
p47086
sS'name'
p47087
S'type'
p47088
sS'required'
p47089
I00
sS'group_name'
p47090
Nsa(dp47091
S'description'
p47092
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47093
sS'cpp_type'
p47094
S'bool'
p47095
sS'default'
p47096
S'0'
p47097
sS'name'
p47098
S'use_displaced_mesh'
p47099
sS'required'
p47100
I00
sS'group_name'
p47101
S'Advanced'
p47102
sa(dp47103
S'description'
p47104
S'Variable to inspect\n'
p47105
sS'cpp_type'
p47106
S'std::vector<VariableName>'
p47107
sS'default'
p47108
g3
sS'name'
p47109
S'v'
p47110
sS'required'
p47111
I00
sS'group_name'
p47112
NsasS'name'
p47113
S'/UserObjects/FindValueOnLine'
p47114
sa(dp47115
S'description'
p47116
g3
sS'subblocks'
p47117
NsS'parameters'
p47118
(lp47119
(dp47120
S'description'
p47121
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p47122
sS'cpp_type'
p47123
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p47124
sS'default'
p47125
g3
sS'name'
p47126
S'boundary'
p47127
sS'required'
p47128
I01
sS'group_name'
p47129
Nsa(dp47130
S'description'
p47131
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47132
sS'cpp_type'
p47133
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p47134
sS'default'
p47135
g3
sS'name'
p47136
S'control_tags'
p47137
sS'required'
p47138
I00
sS'group_name'
p47139
S'Advanced'
p47140
sa(dp47141
S'description'
p47142
S'Set the enabled status of the MooseObject.\n'
p47143
sS'cpp_type'
p47144
S'bool'
p47145
sS'default'
p47146
S'1'
p47147
sS'name'
p47148
S'enable'
p47149
sS'required'
p47150
I00
sS'group_name'
p47151
S'Advanced'
p47152
sa(dp47153
S'name'
p47154
S'execute_on'
p47155
sS'cpp_type'
p47156
S'MultiMooseEnum'
p47157
sS'default'
p47158
S'TIMESTEP_END'
p47159
sS'description'
p47160
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p47161
sS'required'
p47162
I00
sS'options'
p47163
S'none initial linear nonlinear timestep_end timestep_begin custom'
p47164
sS'group_name'
p47165
Nsa(dp47166
S'description'
p47167
S'This postprocessor will return the integral of this function over the boundary\n'
p47168
sS'cpp_type'
p47169
S'FunctionName'
p47170
sS'default'
p47171
S'1'
p47172
sS'name'
p47173
S'function'
p47174
sS'required'
p47175
I00
sS'group_name'
p47176
Nsa(dp47177
S'description'
p47178
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p47179
sS'cpp_type'
p47180
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p47181
sS'default'
p47182
g3
sS'name'
p47183
S'outputs'
p47184
sS'required'
p47185
I00
sS'group_name'
p47186
S'Advanced'
p47187
sa(dp47188
S'description'
p47189
g3
sS'cpp_type'
p47190
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47191
sS'default'
p47192
S'FunctionSideIntegral'
p47193
sS'name'
p47194
S'type'
p47195
sS'required'
p47196
I00
sS'group_name'
p47197
Nsa(dp47198
S'description'
p47199
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47200
sS'cpp_type'
p47201
S'bool'
p47202
sS'default'
p47203
S'0'
p47204
sS'name'
p47205
S'use_displaced_mesh'
p47206
sS'required'
p47207
I00
sS'group_name'
p47208
S'Advanced'
p47209
sasS'name'
p47210
S'/UserObjects/FunctionSideIntegral'
p47211
sa(dp47212
S'description'
p47213
g3
sS'subblocks'
p47214
NsS'parameters'
p47215
(lp47216
(dp47217
S'description'
p47218
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47219
sS'cpp_type'
p47220
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p47221
sS'default'
p47222
g3
sS'name'
p47223
S'control_tags'
p47224
sS'required'
p47225
I00
sS'group_name'
p47226
S'Advanced'
p47227
sa(dp47228
S'description'
p47229
S'Set the enabled status of the MooseObject.\n'
p47230
sS'cpp_type'
p47231
S'bool'
p47232
sS'default'
p47233
S'1'
p47234
sS'name'
p47235
S'enable'
p47236
sS'required'
p47237
I00
sS'group_name'
p47238
S'Advanced'
p47239
sa(dp47240
S'name'
p47241
S'execute_on'
p47242
sS'cpp_type'
p47243
S'MultiMooseEnum'
p47244
sS'default'
p47245
S'TIMESTEP_END'
p47246
sS'description'
p47247
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p47248
sS'required'
p47249
I00
sS'options'
p47250
S'none initial linear nonlinear timestep_end timestep_begin custom'
p47251
sS'group_name'
p47252
Nsa(dp47253
S'description'
p47254
S'The function which supplies the postprocessor value.\n'
p47255
sS'cpp_type'
p47256
S'FunctionName'
p47257
sS'default'
p47258
g3
sS'name'
p47259
S'function'
p47260
sS'required'
p47261
I01
sS'group_name'
p47262
Nsa(dp47263
S'description'
p47264
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p47265
sS'cpp_type'
p47266
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p47267
sS'default'
p47268
g3
sS'name'
p47269
S'outputs'
p47270
sS'required'
p47271
I00
sS'group_name'
p47272
S'Advanced'
p47273
sa(dp47274
S'description'
p47275
S'A point in space to be given to the function Default: (0, 0, 0)\n'
p47276
sS'cpp_type'
p47277
S'libMesh::Point'
p47278
sS'default'
p47279
S'0 0 0'
p47280
sS'name'
p47281
S'point'
p47282
sS'required'
p47283
I00
sS'group_name'
p47284
Nsa(dp47285
S'description'
p47286
S'A scale factor to be applied to the function\n'
p47287
sS'cpp_type'
p47288
S'double'
p47289
sS'default'
p47290
S'1'
p47291
sS'name'
p47292
S'scale_factor'
p47293
sS'required'
p47294
I00
sS'group_name'
p47295
Nsa(dp47296
S'description'
p47297
g3
sS'cpp_type'
p47298
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47299
sS'default'
p47300
S'FunctionValuePostprocessor'
p47301
sS'name'
p47302
S'type'
p47303
sS'required'
p47304
I00
sS'group_name'
p47305
Nsa(dp47306
S'description'
p47307
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47308
sS'cpp_type'
p47309
S'bool'
p47310
sS'default'
p47311
S'0'
p47312
sS'name'
p47313
S'use_displaced_mesh'
p47314
sS'required'
p47315
I00
sS'group_name'
p47316
S'Advanced'
p47317
sasS'name'
p47318
S'/UserObjects/FunctionValuePostprocessor'
p47319
sa(dp47320
S'description'
p47321
g3
sS'subblocks'
p47322
NsS'parameters'
p47323
(lp47324
(dp47325
S'description'
p47326
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p47327
sS'cpp_type'
p47328
S'unsigned int'
p47329
sS'default'
p47330
S'1'
p47331
sS'name'
p47332
S'average_radius'
p47333
sS'required'
p47334
I00
sS'group_name'
p47335
Nsa(dp47336
S'description'
p47337
S'The list of block ids (SubdomainID) that this object will be applied\n'
p47338
sS'cpp_type'
p47339
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p47340
sS'default'
p47341
g3
sS'name'
p47342
S'block'
p47343
sS'required'
p47344
I00
sS'group_name'
p47345
Nsa(dp47346
S'description'
p47347
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p47348
sS'cpp_type'
p47349
S'std::__1::vector<double, std::__1::allocator<double> >'
p47350
sS'default'
p47351
g3
sS'name'
p47352
S'bounds'
p47353
sS'required'
p47354
I00
sS'group_name'
p47355
Nsa(dp47356
S'description'
p47357
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47358
sS'cpp_type'
p47359
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p47360
sS'default'
p47361
g3
sS'name'
p47362
S'control_tags'
p47363
sS'required'
p47364
I00
sS'group_name'
p47365
S'Advanced'
p47366
sa(dp47367
S'description'
p47368
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p47369
sS'cpp_type'
p47370
S'bool'
p47371
sS'default'
p47372
S'0'
p47373
sS'name'
p47374
S'cumulative'
p47375
sS'required'
p47376
I00
sS'group_name'
p47377
Nsa(dp47378
S'name'
p47379
S'direction'
p47380
sS'cpp_type'
p47381
S'MooseEnum'
p47382
sS'default'
p47383
g3
sS'description'
p47384
S'The direction of the layers.\n'
p47385
sS'required'
p47386
I01
sS'options'
p47387
S'x y z'
p47388
sS'group_name'
p47389
Nsa(dp47390
S'description'
p47391
S'Set the enabled status of the MooseObject.\n'
p47392
sS'cpp_type'
p47393
S'bool'
p47394
sS'default'
p47395
S'1'
p47396
sS'name'
p47397
S'enable'
p47398
sS'required'
p47399
I00
sS'group_name'
p47400
S'Advanced'
p47401
sa(dp47402
S'name'
p47403
S'execute_on'
p47404
sS'cpp_type'
p47405
S'MultiMooseEnum'
p47406
sS'default'
p47407
S'TIMESTEP_END'
p47408
sS'description'
p47409
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p47410
sS'required'
p47411
I00
sS'options'
p47412
S'none initial linear nonlinear timestep_end timestep_begin custom'
p47413
sS'group_name'
p47414
Nsa(dp47415
S'description'
p47416
S'The number of layers.\n'
p47417
sS'cpp_type'
p47418
S'unsigned int'
p47419
sS'default'
p47420
g3
sS'name'
p47421
S'num_layers'
p47422
sS'required'
p47423
I00
sS'group_name'
p47424
Nsa(dp47425
S'name'
p47426
S'sample_type'
p47427
sS'cpp_type'
p47428
S'MooseEnum'
p47429
sS'default'
p47430
S'direct'
p47431
sS'description'
p47432
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p47433
sS'required'
p47434
I00
sS'options'
p47435
S'direct interpolate average'
p47436
sS'group_name'
p47437
Nsa(dp47438
S'description'
p47439
S'The seed for the master random number generator\n'
p47440
sS'cpp_type'
p47441
S'unsigned int'
p47442
sS'default'
p47443
S'0'
p47444
sS'name'
p47445
S'seed'
p47446
sS'required'
p47447
I00
sS'group_name'
p47448
S'Advanced'
p47449
sa(dp47450
S'description'
p47451
g3
sS'cpp_type'
p47452
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47453
sS'default'
p47454
S'LayeredAverage'
p47455
sS'name'
p47456
S'type'
p47457
sS'required'
p47458
I00
sS'group_name'
p47459
Nsa(dp47460
S'description'
p47461
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47462
sS'cpp_type'
p47463
S'bool'
p47464
sS'default'
p47465
S'0'
p47466
sS'name'
p47467
S'use_displaced_mesh'
p47468
sS'required'
p47469
I00
sS'group_name'
p47470
S'Advanced'
p47471
sa(dp47472
S'description'
p47473
S'The name of the variable that this object operates on\n'
p47474
sS'cpp_type'
p47475
S'std::vector<VariableName>'
p47476
sS'default'
p47477
g3
sS'name'
p47478
S'variable'
p47479
sS'required'
p47480
I01
sS'group_name'
p47481
NsasS'name'
p47482
S'/UserObjects/LayeredAverage'
p47483
sa(dp47484
S'description'
p47485
g3
sS'subblocks'
p47486
NsS'parameters'
p47487
(lp47488
(dp47489
S'description'
p47490
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p47491
sS'cpp_type'
p47492
S'unsigned int'
p47493
sS'default'
p47494
S'1'
p47495
sS'name'
p47496
S'average_radius'
p47497
sS'required'
p47498
I00
sS'group_name'
p47499
Nsa(dp47500
S'description'
p47501
S'The list of block ids (SubdomainID) that this object will be applied\n'
p47502
sS'cpp_type'
p47503
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p47504
sS'default'
p47505
g3
sS'name'
p47506
S'block'
p47507
sS'required'
p47508
I00
sS'group_name'
p47509
Nsa(dp47510
S'description'
p47511
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p47512
sS'cpp_type'
p47513
S'std::__1::vector<double, std::__1::allocator<double> >'
p47514
sS'default'
p47515
g3
sS'name'
p47516
S'bounds'
p47517
sS'required'
p47518
I00
sS'group_name'
p47519
Nsa(dp47520
S'description'
p47521
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47522
sS'cpp_type'
p47523
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p47524
sS'default'
p47525
g3
sS'name'
p47526
S'control_tags'
p47527
sS'required'
p47528
I00
sS'group_name'
p47529
S'Advanced'
p47530
sa(dp47531
S'description'
p47532
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p47533
sS'cpp_type'
p47534
S'bool'
p47535
sS'default'
p47536
S'0'
p47537
sS'name'
p47538
S'cumulative'
p47539
sS'required'
p47540
I00
sS'group_name'
p47541
Nsa(dp47542
S'name'
p47543
S'direction'
p47544
sS'cpp_type'
p47545
S'MooseEnum'
p47546
sS'default'
p47547
g3
sS'description'
p47548
S'The direction of the layers.\n'
p47549
sS'required'
p47550
I01
sS'options'
p47551
S'x y z'
p47552
sS'group_name'
p47553
Nsa(dp47554
S'description'
p47555
S'Set the enabled status of the MooseObject.\n'
p47556
sS'cpp_type'
p47557
S'bool'
p47558
sS'default'
p47559
S'1'
p47560
sS'name'
p47561
S'enable'
p47562
sS'required'
p47563
I00
sS'group_name'
p47564
S'Advanced'
p47565
sa(dp47566
S'name'
p47567
S'execute_on'
p47568
sS'cpp_type'
p47569
S'MultiMooseEnum'
p47570
sS'default'
p47571
S'TIMESTEP_END'
p47572
sS'description'
p47573
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p47574
sS'required'
p47575
I00
sS'options'
p47576
S'none initial linear nonlinear timestep_end timestep_begin custom'
p47577
sS'group_name'
p47578
Nsa(dp47579
S'description'
p47580
S'The number of layers.\n'
p47581
sS'cpp_type'
p47582
S'unsigned int'
p47583
sS'default'
p47584
g3
sS'name'
p47585
S'num_layers'
p47586
sS'required'
p47587
I00
sS'group_name'
p47588
Nsa(dp47589
S'name'
p47590
S'sample_type'
p47591
sS'cpp_type'
p47592
S'MooseEnum'
p47593
sS'default'
p47594
S'direct'
p47595
sS'description'
p47596
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p47597
sS'required'
p47598
I00
sS'options'
p47599
S'direct interpolate average'
p47600
sS'group_name'
p47601
Nsa(dp47602
S'description'
p47603
S'The seed for the master random number generator\n'
p47604
sS'cpp_type'
p47605
S'unsigned int'
p47606
sS'default'
p47607
S'0'
p47608
sS'name'
p47609
S'seed'
p47610
sS'required'
p47611
I00
sS'group_name'
p47612
S'Advanced'
p47613
sa(dp47614
S'description'
p47615
g3
sS'cpp_type'
p47616
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47617
sS'default'
p47618
S'LayeredIntegral'
p47619
sS'name'
p47620
S'type'
p47621
sS'required'
p47622
I00
sS'group_name'
p47623
Nsa(dp47624
S'description'
p47625
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47626
sS'cpp_type'
p47627
S'bool'
p47628
sS'default'
p47629
S'0'
p47630
sS'name'
p47631
S'use_displaced_mesh'
p47632
sS'required'
p47633
I00
sS'group_name'
p47634
S'Advanced'
p47635
sa(dp47636
S'description'
p47637
S'The name of the variable that this object operates on\n'
p47638
sS'cpp_type'
p47639
S'std::vector<VariableName>'
p47640
sS'default'
p47641
g3
sS'name'
p47642
S'variable'
p47643
sS'required'
p47644
I01
sS'group_name'
p47645
NsasS'name'
p47646
S'/UserObjects/LayeredIntegral'
p47647
sa(dp47648
S'description'
p47649
g3
sS'subblocks'
p47650
NsS'parameters'
p47651
(lp47652
(dp47653
S'description'
p47654
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p47655
sS'cpp_type'
p47656
S'unsigned int'
p47657
sS'default'
p47658
S'1'
p47659
sS'name'
p47660
S'average_radius'
p47661
sS'required'
p47662
I00
sS'group_name'
p47663
Nsa(dp47664
S'description'
p47665
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p47666
sS'cpp_type'
p47667
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p47668
sS'default'
p47669
g3
sS'name'
p47670
S'boundary'
p47671
sS'required'
p47672
I01
sS'group_name'
p47673
Nsa(dp47674
S'description'
p47675
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p47676
sS'cpp_type'
p47677
S'std::__1::vector<double, std::__1::allocator<double> >'
p47678
sS'default'
p47679
g3
sS'name'
p47680
S'bounds'
p47681
sS'required'
p47682
I00
sS'group_name'
p47683
Nsa(dp47684
S'description'
p47685
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47686
sS'cpp_type'
p47687
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p47688
sS'default'
p47689
g3
sS'name'
p47690
S'control_tags'
p47691
sS'required'
p47692
I00
sS'group_name'
p47693
S'Advanced'
p47694
sa(dp47695
S'description'
p47696
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p47697
sS'cpp_type'
p47698
S'bool'
p47699
sS'default'
p47700
S'0'
p47701
sS'name'
p47702
S'cumulative'
p47703
sS'required'
p47704
I00
sS'group_name'
p47705
Nsa(dp47706
S'name'
p47707
S'direction'
p47708
sS'cpp_type'
p47709
S'MooseEnum'
p47710
sS'default'
p47711
g3
sS'description'
p47712
S'The direction of the layers.\n'
p47713
sS'required'
p47714
I01
sS'options'
p47715
S'x y z'
p47716
sS'group_name'
p47717
Nsa(dp47718
S'description'
p47719
S'Set the enabled status of the MooseObject.\n'
p47720
sS'cpp_type'
p47721
S'bool'
p47722
sS'default'
p47723
S'1'
p47724
sS'name'
p47725
S'enable'
p47726
sS'required'
p47727
I00
sS'group_name'
p47728
S'Advanced'
p47729
sa(dp47730
S'name'
p47731
S'execute_on'
p47732
sS'cpp_type'
p47733
S'MultiMooseEnum'
p47734
sS'default'
p47735
S'TIMESTEP_END'
p47736
sS'description'
p47737
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p47738
sS'required'
p47739
I00
sS'options'
p47740
S'none initial linear nonlinear timestep_end timestep_begin custom'
p47741
sS'group_name'
p47742
Nsa(dp47743
S'description'
p47744
S'The number of layers.\n'
p47745
sS'cpp_type'
p47746
S'unsigned int'
p47747
sS'default'
p47748
g3
sS'name'
p47749
S'num_layers'
p47750
sS'required'
p47751
I00
sS'group_name'
p47752
Nsa(dp47753
S'name'
p47754
S'sample_type'
p47755
sS'cpp_type'
p47756
S'MooseEnum'
p47757
sS'default'
p47758
S'direct'
p47759
sS'description'
p47760
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p47761
sS'required'
p47762
I00
sS'options'
p47763
S'direct interpolate average'
p47764
sS'group_name'
p47765
Nsa(dp47766
S'description'
p47767
g3
sS'cpp_type'
p47768
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47769
sS'default'
p47770
S'LayeredSideAverage'
p47771
sS'name'
p47772
S'type'
p47773
sS'required'
p47774
I00
sS'group_name'
p47775
Nsa(dp47776
S'description'
p47777
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47778
sS'cpp_type'
p47779
S'bool'
p47780
sS'default'
p47781
S'0'
p47782
sS'name'
p47783
S'use_displaced_mesh'
p47784
sS'required'
p47785
I00
sS'group_name'
p47786
S'Advanced'
p47787
sa(dp47788
S'description'
p47789
S'The name of the variable that this boundary condition applies to\n'
p47790
sS'cpp_type'
p47791
S'std::vector<VariableName>'
p47792
sS'default'
p47793
g3
sS'name'
p47794
S'variable'
p47795
sS'required'
p47796
I01
sS'group_name'
p47797
NsasS'name'
p47798
S'/UserObjects/LayeredSideAverage'
p47799
sa(dp47800
S'description'
p47801
g3
sS'subblocks'
p47802
NsS'parameters'
p47803
(lp47804
(dp47805
S'description'
p47806
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p47807
sS'cpp_type'
p47808
S'unsigned int'
p47809
sS'default'
p47810
S'1'
p47811
sS'name'
p47812
S'average_radius'
p47813
sS'required'
p47814
I00
sS'group_name'
p47815
Nsa(dp47816
S'description'
p47817
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p47818
sS'cpp_type'
p47819
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p47820
sS'default'
p47821
g3
sS'name'
p47822
S'boundary'
p47823
sS'required'
p47824
I01
sS'group_name'
p47825
Nsa(dp47826
S'description'
p47827
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p47828
sS'cpp_type'
p47829
S'std::__1::vector<double, std::__1::allocator<double> >'
p47830
sS'default'
p47831
g3
sS'name'
p47832
S'bounds'
p47833
sS'required'
p47834
I00
sS'group_name'
p47835
Nsa(dp47836
S'description'
p47837
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47838
sS'cpp_type'
p47839
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p47840
sS'default'
p47841
g3
sS'name'
p47842
S'control_tags'
p47843
sS'required'
p47844
I00
sS'group_name'
p47845
S'Advanced'
p47846
sa(dp47847
S'description'
p47848
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p47849
sS'cpp_type'
p47850
S'bool'
p47851
sS'default'
p47852
S'0'
p47853
sS'name'
p47854
S'cumulative'
p47855
sS'required'
p47856
I00
sS'group_name'
p47857
Nsa(dp47858
S'description'
p47859
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p47860
sS'cpp_type'
p47861
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47862
sS'default'
p47863
g3
sS'name'
p47864
S'diffusivity'
p47865
sS'required'
p47866
I01
sS'group_name'
p47867
Nsa(dp47868
S'name'
p47869
S'direction'
p47870
sS'cpp_type'
p47871
S'MooseEnum'
p47872
sS'default'
p47873
g3
sS'description'
p47874
S'The direction of the layers.\n'
p47875
sS'required'
p47876
I01
sS'options'
p47877
S'x y z'
p47878
sS'group_name'
p47879
Nsa(dp47880
S'description'
p47881
S'Set the enabled status of the MooseObject.\n'
p47882
sS'cpp_type'
p47883
S'bool'
p47884
sS'default'
p47885
S'1'
p47886
sS'name'
p47887
S'enable'
p47888
sS'required'
p47889
I00
sS'group_name'
p47890
S'Advanced'
p47891
sa(dp47892
S'name'
p47893
S'execute_on'
p47894
sS'cpp_type'
p47895
S'MultiMooseEnum'
p47896
sS'default'
p47897
S'TIMESTEP_END'
p47898
sS'description'
p47899
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p47900
sS'required'
p47901
I00
sS'options'
p47902
S'none initial linear nonlinear timestep_end timestep_begin custom'
p47903
sS'group_name'
p47904
Nsa(dp47905
S'description'
p47906
S'The number of layers.\n'
p47907
sS'cpp_type'
p47908
S'unsigned int'
p47909
sS'default'
p47910
g3
sS'name'
p47911
S'num_layers'
p47912
sS'required'
p47913
I00
sS'group_name'
p47914
Nsa(dp47915
S'name'
p47916
S'sample_type'
p47917
sS'cpp_type'
p47918
S'MooseEnum'
p47919
sS'default'
p47920
S'direct'
p47921
sS'description'
p47922
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p47923
sS'required'
p47924
I00
sS'options'
p47925
S'direct interpolate average'
p47926
sS'group_name'
p47927
Nsa(dp47928
S'description'
p47929
g3
sS'cpp_type'
p47930
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47931
sS'default'
p47932
S'LayeredSideFluxAverage'
p47933
sS'name'
p47934
S'type'
p47935
sS'required'
p47936
I00
sS'group_name'
p47937
Nsa(dp47938
S'description'
p47939
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47940
sS'cpp_type'
p47941
S'bool'
p47942
sS'default'
p47943
S'0'
p47944
sS'name'
p47945
S'use_displaced_mesh'
p47946
sS'required'
p47947
I00
sS'group_name'
p47948
S'Advanced'
p47949
sa(dp47950
S'description'
p47951
S'The name of the variable that this boundary condition applies to\n'
p47952
sS'cpp_type'
p47953
S'std::vector<VariableName>'
p47954
sS'default'
p47955
g3
sS'name'
p47956
S'variable'
p47957
sS'required'
p47958
I01
sS'group_name'
p47959
NsasS'name'
p47960
S'/UserObjects/LayeredSideFluxAverage'
p47961
sa(dp47962
S'description'
p47963
g3
sS'subblocks'
p47964
NsS'parameters'
p47965
(lp47966
(dp47967
S'description'
p47968
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p47969
sS'cpp_type'
p47970
S'unsigned int'
p47971
sS'default'
p47972
S'1'
p47973
sS'name'
p47974
S'average_radius'
p47975
sS'required'
p47976
I00
sS'group_name'
p47977
Nsa(dp47978
S'description'
p47979
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p47980
sS'cpp_type'
p47981
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p47982
sS'default'
p47983
g3
sS'name'
p47984
S'boundary'
p47985
sS'required'
p47986
I01
sS'group_name'
p47987
Nsa(dp47988
S'description'
p47989
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p47990
sS'cpp_type'
p47991
S'std::__1::vector<double, std::__1::allocator<double> >'
p47992
sS'default'
p47993
g3
sS'name'
p47994
S'bounds'
p47995
sS'required'
p47996
I00
sS'group_name'
p47997
Nsa(dp47998
S'description'
p47999
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48000
sS'cpp_type'
p48001
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p48002
sS'default'
p48003
g3
sS'name'
p48004
S'control_tags'
p48005
sS'required'
p48006
I00
sS'group_name'
p48007
S'Advanced'
p48008
sa(dp48009
S'description'
p48010
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p48011
sS'cpp_type'
p48012
S'bool'
p48013
sS'default'
p48014
S'0'
p48015
sS'name'
p48016
S'cumulative'
p48017
sS'required'
p48018
I00
sS'group_name'
p48019
Nsa(dp48020
S'name'
p48021
S'direction'
p48022
sS'cpp_type'
p48023
S'MooseEnum'
p48024
sS'default'
p48025
g3
sS'description'
p48026
S'The direction of the layers.\n'
p48027
sS'required'
p48028
I01
sS'options'
p48029
S'x y z'
p48030
sS'group_name'
p48031
Nsa(dp48032
S'description'
p48033
S'Set the enabled status of the MooseObject.\n'
p48034
sS'cpp_type'
p48035
S'bool'
p48036
sS'default'
p48037
S'1'
p48038
sS'name'
p48039
S'enable'
p48040
sS'required'
p48041
I00
sS'group_name'
p48042
S'Advanced'
p48043
sa(dp48044
S'name'
p48045
S'execute_on'
p48046
sS'cpp_type'
p48047
S'MultiMooseEnum'
p48048
sS'default'
p48049
S'TIMESTEP_END'
p48050
sS'description'
p48051
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48052
sS'required'
p48053
I00
sS'options'
p48054
S'none initial linear nonlinear timestep_end timestep_begin custom'
p48055
sS'group_name'
p48056
Nsa(dp48057
S'description'
p48058
S'The number of layers.\n'
p48059
sS'cpp_type'
p48060
S'unsigned int'
p48061
sS'default'
p48062
g3
sS'name'
p48063
S'num_layers'
p48064
sS'required'
p48065
I00
sS'group_name'
p48066
Nsa(dp48067
S'name'
p48068
S'sample_type'
p48069
sS'cpp_type'
p48070
S'MooseEnum'
p48071
sS'default'
p48072
S'direct'
p48073
sS'description'
p48074
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p48075
sS'required'
p48076
I00
sS'options'
p48077
S'direct interpolate average'
p48078
sS'group_name'
p48079
Nsa(dp48080
S'description'
p48081
g3
sS'cpp_type'
p48082
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p48083
sS'default'
p48084
S'LayeredSideIntegral'
p48085
sS'name'
p48086
S'type'
p48087
sS'required'
p48088
I00
sS'group_name'
p48089
Nsa(dp48090
S'description'
p48091
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48092
sS'cpp_type'
p48093
S'bool'
p48094
sS'default'
p48095
S'0'
p48096
sS'name'
p48097
S'use_displaced_mesh'
p48098
sS'required'
p48099
I00
sS'group_name'
p48100
S'Advanced'
p48101
sa(dp48102
S'description'
p48103
S'The name of the variable that this boundary condition applies to\n'
p48104
sS'cpp_type'
p48105
S'std::vector<VariableName>'
p48106
sS'default'
p48107
g3
sS'name'
p48108
S'variable'
p48109
sS'required'
p48110
I01
sS'group_name'
p48111
NsasS'name'
p48112
S'/UserObjects/LayeredSideIntegral'
p48113
sa(dp48114
S'description'
p48115
g3
sS'subblocks'
p48116
NsS'parameters'
p48117
(lp48118
(dp48119
S'description'
p48120
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p48121
sS'cpp_type'
p48122
S'unsigned int'
p48123
sS'default'
p48124
S'1'
p48125
sS'name'
p48126
S'average_radius'
p48127
sS'required'
p48128
I00
sS'group_name'
p48129
Nsa(dp48130
S'description'
p48131
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48132
sS'cpp_type'
p48133
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p48134
sS'default'
p48135
g3
sS'name'
p48136
S'block'
p48137
sS'required'
p48138
I00
sS'group_name'
p48139
Nsa(dp48140
S'description'
p48141
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p48142
sS'cpp_type'
p48143
S'std::__1::vector<double, std::__1::allocator<double> >'
p48144
sS'default'
p48145
g3
sS'name'
p48146
S'bounds'
p48147
sS'required'
p48148
I00
sS'group_name'
p48149
Nsa(dp48150
S'description'
p48151
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48152
sS'cpp_type'
p48153
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p48154
sS'default'
p48155
g3
sS'name'
p48156
S'control_tags'
p48157
sS'required'
p48158
I00
sS'group_name'
p48159
S'Advanced'
p48160
sa(dp48161
S'description'
p48162
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p48163
sS'cpp_type'
p48164
S'bool'
p48165
sS'default'
p48166
S'0'
p48167
sS'name'
p48168
S'cumulative'
p48169
sS'required'
p48170
I00
sS'group_name'
p48171
Nsa(dp48172
S'name'
p48173
S'direction'
p48174
sS'cpp_type'
p48175
S'MooseEnum'
p48176
sS'default'
p48177
g3
sS'description'
p48178
S'The direction of the layers.\n'
p48179
sS'required'
p48180
I01
sS'options'
p48181
S'x y z'
p48182
sS'group_name'
p48183
Nsa(dp48184
S'description'
p48185
S'Set the enabled status of the MooseObject.\n'
p48186
sS'cpp_type'
p48187
S'bool'
p48188
sS'default'
p48189
S'1'
p48190
sS'name'
p48191
S'enable'
p48192
sS'required'
p48193
I00
sS'group_name'
p48194
S'Advanced'
p48195
sa(dp48196
S'name'
p48197
S'execute_on'
p48198
sS'cpp_type'
p48199
S'MultiMooseEnum'
p48200
sS'default'
p48201
S'TIMESTEP_END'
p48202
sS'description'
p48203
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48204
sS'required'
p48205
I00
sS'options'
p48206
S'none initial linear nonlinear timestep_end timestep_begin custom'
p48207
sS'group_name'
p48208
Nsa(dp48209
S'description'
p48210
S'The number of layers.\n'
p48211
sS'cpp_type'
p48212
S'unsigned int'
p48213
sS'default'
p48214
g3
sS'name'
p48215
S'num_layers'
p48216
sS'required'
p48217
I00
sS'group_name'
p48218
Nsa(dp48219
S'description'
p48220
S'Computations will be lumped into values at these points.\n'
p48221
sS'cpp_type'
p48222
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p48223
sS'default'
p48224
g3
sS'name'
p48225
S'points'
p48226
sS'required'
p48227
I01
sS'group_name'
p48228
Nsa(dp48229
S'name'
p48230
S'sample_type'
p48231
sS'cpp_type'
p48232
S'MooseEnum'
p48233
sS'default'
p48234
S'direct'
p48235
sS'description'
p48236
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p48237
sS'required'
p48238
I00
sS'options'
p48239
S'direct interpolate average'
p48240
sS'group_name'
p48241
Nsa(dp48242
S'description'
p48243
S'The seed for the master random number generator\n'
p48244
sS'cpp_type'
p48245
S'unsigned int'
p48246
sS'default'
p48247
S'0'
p48248
sS'name'
p48249
S'seed'
p48250
sS'required'
p48251
I00
sS'group_name'
p48252
S'Advanced'
p48253
sa(dp48254
S'description'
p48255
g3
sS'cpp_type'
p48256
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p48257
sS'default'
p48258
S'NearestPointLayeredAverage'
p48259
sS'name'
p48260
S'type'
p48261
sS'required'
p48262
I00
sS'group_name'
p48263
Nsa(dp48264
S'description'
p48265
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48266
sS'cpp_type'
p48267
S'bool'
p48268
sS'default'
p48269
S'0'
p48270
sS'name'
p48271
S'use_displaced_mesh'
p48272
sS'required'
p48273
I00
sS'group_name'
p48274
S'Advanced'
p48275
sa(dp48276
S'description'
p48277
S'The name of the variable that this object operates on\n'
p48278
sS'cpp_type'
p48279
S'std::vector<VariableName>'
p48280
sS'default'
p48281
g3
sS'name'
p48282
S'variable'
p48283
sS'required'
p48284
I01
sS'group_name'
p48285
NsasS'name'
p48286
S'/UserObjects/NearestPointLayeredAverage'
p48287
sa(dp48288
S'description'
p48289
g3
sS'subblocks'
p48290
NsS'parameters'
p48291
(lp48292
(dp48293
S'description'
p48294
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48295
sS'cpp_type'
p48296
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p48297
sS'default'
p48298
g3
sS'name'
p48299
S'block'
p48300
sS'required'
p48301
I00
sS'group_name'
p48302
Nsa(dp48303
S'description'
p48304
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p48305
sS'cpp_type'
p48306
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p48307
sS'default'
p48308
g3
sS'name'
p48309
S'boundary'
p48310
sS'required'
p48311
I00
sS'group_name'
p48312
Nsa(dp48313
S'description'
p48314
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48315
sS'cpp_type'
p48316
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p48317
sS'default'
p48318
g3
sS'name'
p48319
S'control_tags'
p48320
sS'required'
p48321
I00
sS'group_name'
p48322
S'Advanced'
p48323
sa(dp48324
S'description'
p48325
S'Set the enabled status of the MooseObject.\n'
p48326
sS'cpp_type'
p48327
S'bool'
p48328
sS'default'
p48329
S'1'
p48330
sS'name'
p48331
S'enable'
p48332
sS'required'
p48333
I00
sS'group_name'
p48334
S'Advanced'
p48335
sa(dp48336
S'name'
p48337
S'execute_on'
p48338
sS'cpp_type'
p48339
S'MultiMooseEnum'
p48340
sS'default'
p48341
S'TIMESTEP_END'
p48342
sS'description'
p48343
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48344
sS'required'
p48345
I00
sS'options'
p48346
S'none initial linear nonlinear timestep_end timestep_begin custom'
p48347
sS'group_name'
p48348
Nsa(dp48349
S'description'
p48350
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p48351
sS'cpp_type'
p48352
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p48353
sS'default'
p48354
g3
sS'name'
p48355
S'outputs'
p48356
sS'required'
p48357
I00
sS'group_name'
p48358
S'Advanced'
p48359
sa(dp48360
S'description'
p48361
S'The seed for the master random number generator\n'
p48362
sS'cpp_type'
p48363
S'unsigned int'
p48364
sS'default'
p48365
S'0'
p48366
sS'name'
p48367
S'seed'
p48368
sS'required'
p48369
I00
sS'group_name'
p48370
S'Advanced'
p48371
sa(dp48372
S'description'
p48373
g3
sS'cpp_type'
p48374
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p48375
sS'default'
p48376
S'NodalExtremeValue'
p48377
sS'name'
p48378
S'type'
p48379
sS'required'
p48380
I00
sS'group_name'
p48381
Nsa(dp48382
S'description'
p48383
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p48384
sS'cpp_type'
p48385
S'bool'
p48386
sS'default'
p48387
S'0'
p48388
sS'name'
p48389
S'unique_node_execute'
p48390
sS'required'
p48391
I00
sS'group_name'
p48392
Nsa(dp48393
S'description'
p48394
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48395
sS'cpp_type'
p48396
S'bool'
p48397
sS'default'
p48398
S'0'
p48399
sS'name'
p48400
S'use_displaced_mesh'
p48401
sS'required'
p48402
I00
sS'group_name'
p48403
S'Advanced'
p48404
sa(dp48405
S'name'
p48406
S'value_type'
p48407
sS'cpp_type'
p48408
S'MooseEnum'
p48409
sS'default'
p48410
S'max'
p48411
sS'description'
p48412
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p48413
sS'required'
p48414
I00
sS'options'
p48415
S'max min'
p48416
sS'group_name'
p48417
Nsa(dp48418
S'description'
p48419
S'The name of the variable that this postprocessor operates on\n'
p48420
sS'cpp_type'
p48421
S'std::vector<VariableName>'
p48422
sS'default'
p48423
g3
sS'name'
p48424
S'variable'
p48425
sS'required'
p48426
I01
sS'group_name'
p48427
NsasS'name'
p48428
S'/UserObjects/NodalExtremeValue'
p48429
sa(dp48430
S'description'
p48431
g3
sS'subblocks'
p48432
NsS'parameters'
p48433
(lp48434
(dp48435
S'description'
p48436
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48437
sS'cpp_type'
p48438
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p48439
sS'default'
p48440
g3
sS'name'
p48441
S'block'
p48442
sS'required'
p48443
I00
sS'group_name'
p48444
Nsa(dp48445
S'description'
p48446
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p48447
sS'cpp_type'
p48448
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p48449
sS'default'
p48450
g3
sS'name'
p48451
S'boundary'
p48452
sS'required'
p48453
I00
sS'group_name'
p48454
Nsa(dp48455
S'description'
p48456
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48457
sS'cpp_type'
p48458
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p48459
sS'default'
p48460
g3
sS'name'
p48461
S'control_tags'
p48462
sS'required'
p48463
I00
sS'group_name'
p48464
S'Advanced'
p48465
sa(dp48466
S'description'
p48467
S'Set the enabled status of the MooseObject.\n'
p48468
sS'cpp_type'
p48469
S'bool'
p48470
sS'default'
p48471
S'1'
p48472
sS'name'
p48473
S'enable'
p48474
sS'required'
p48475
I00
sS'group_name'
p48476
S'Advanced'
p48477
sa(dp48478
S'name'
p48479
S'execute_on'
p48480
sS'cpp_type'
p48481
S'MultiMooseEnum'
p48482
sS'default'
p48483
S'TIMESTEP_END'
p48484
sS'description'
p48485
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48486
sS'required'
p48487
I00
sS'options'
p48488
S'none initial linear nonlinear timestep_end timestep_begin custom'
p48489
sS'group_name'
p48490
Nsa(dp48491
S'description'
p48492
S'The analytic solution to compare against\n'
p48493
sS'cpp_type'
p48494
S'FunctionName'
p48495
sS'default'
p48496
g3
sS'name'
p48497
S'function'
p48498
sS'required'
p48499
I01
sS'group_name'
p48500
Nsa(dp48501
S'description'
p48502
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p48503
sS'cpp_type'
p48504
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p48505
sS'default'
p48506
g3
sS'name'
p48507
S'outputs'
p48508
sS'required'
p48509
I00
sS'group_name'
p48510
S'Advanced'
p48511
sa(dp48512
S'description'
p48513
S'The seed for the master random number generator\n'
p48514
sS'cpp_type'
p48515
S'unsigned int'
p48516
sS'default'
p48517
S'0'
p48518
sS'name'
p48519
S'seed'
p48520
sS'required'
p48521
I00
sS'group_name'
p48522
S'Advanced'
p48523
sa(dp48524
S'description'
p48525
g3
sS'cpp_type'
p48526
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p48527
sS'default'
p48528
S'NodalL2Error'
p48529
sS'name'
p48530
S'type'
p48531
sS'required'
p48532
I00
sS'group_name'
p48533
Nsa(dp48534
S'description'
p48535
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p48536
sS'cpp_type'
p48537
S'bool'
p48538
sS'default'
p48539
S'0'
p48540
sS'name'
p48541
S'unique_node_execute'
p48542
sS'required'
p48543
I00
sS'group_name'
p48544
Nsa(dp48545
S'description'
p48546
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48547
sS'cpp_type'
p48548
S'bool'
p48549
sS'default'
p48550
S'0'
p48551
sS'name'
p48552
S'use_displaced_mesh'
p48553
sS'required'
p48554
I00
sS'group_name'
p48555
S'Advanced'
p48556
sa(dp48557
S'description'
p48558
S'The name of the variable that this postprocessor operates on\n'
p48559
sS'cpp_type'
p48560
S'std::vector<VariableName>'
p48561
sS'default'
p48562
g3
sS'name'
p48563
S'variable'
p48564
sS'required'
p48565
I01
sS'group_name'
p48566
NsasS'name'
p48567
S'/UserObjects/NodalL2Error'
p48568
sa(dp48569
S'description'
p48570
g3
sS'subblocks'
p48571
NsS'parameters'
p48572
(lp48573
(dp48574
S'description'
p48575
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48576
sS'cpp_type'
p48577
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p48578
sS'default'
p48579
g3
sS'name'
p48580
S'block'
p48581
sS'required'
p48582
I00
sS'group_name'
p48583
Nsa(dp48584
S'description'
p48585
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p48586
sS'cpp_type'
p48587
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p48588
sS'default'
p48589
g3
sS'name'
p48590
S'boundary'
p48591
sS'required'
p48592
I00
sS'group_name'
p48593
Nsa(dp48594
S'description'
p48595
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48596
sS'cpp_type'
p48597
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p48598
sS'default'
p48599
g3
sS'name'
p48600
S'control_tags'
p48601
sS'required'
p48602
I00
sS'group_name'
p48603
S'Advanced'
p48604
sa(dp48605
S'description'
p48606
S'Set the enabled status of the MooseObject.\n'
p48607
sS'cpp_type'
p48608
S'bool'
p48609
sS'default'
p48610
S'1'
p48611
sS'name'
p48612
S'enable'
p48613
sS'required'
p48614
I00
sS'group_name'
p48615
S'Advanced'
p48616
sa(dp48617
S'name'
p48618
S'execute_on'
p48619
sS'cpp_type'
p48620
S'MultiMooseEnum'
p48621
sS'default'
p48622
S'TIMESTEP_END'
p48623
sS'description'
p48624
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48625
sS'required'
p48626
I00
sS'options'
p48627
S'none initial linear nonlinear timestep_end timestep_begin custom'
p48628
sS'group_name'
p48629
Nsa(dp48630
S'description'
p48631
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p48632
sS'cpp_type'
p48633
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p48634
sS'default'
p48635
g3
sS'name'
p48636
S'outputs'
p48637
sS'required'
p48638
I00
sS'group_name'
p48639
S'Advanced'
p48640
sa(dp48641
S'description'
p48642
S'The seed for the master random number generator\n'
p48643
sS'cpp_type'
p48644
S'unsigned int'
p48645
sS'default'
p48646
S'0'
p48647
sS'name'
p48648
S'seed'
p48649
sS'required'
p48650
I00
sS'group_name'
p48651
S'Advanced'
p48652
sa(dp48653
S'description'
p48654
g3
sS'cpp_type'
p48655
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p48656
sS'default'
p48657
S'NodalL2Norm'
p48658
sS'name'
p48659
S'type'
p48660
sS'required'
p48661
I00
sS'group_name'
p48662
Nsa(dp48663
S'description'
p48664
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p48665
sS'cpp_type'
p48666
S'bool'
p48667
sS'default'
p48668
S'1'
p48669
sS'name'
p48670
S'unique_node_execute'
p48671
sS'required'
p48672
I00
sS'group_name'
p48673
Nsa(dp48674
S'description'
p48675
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48676
sS'cpp_type'
p48677
S'bool'
p48678
sS'default'
p48679
S'0'
p48680
sS'name'
p48681
S'use_displaced_mesh'
p48682
sS'required'
p48683
I00
sS'group_name'
p48684
S'Advanced'
p48685
sa(dp48686
S'description'
p48687
S'The name of the variable that this postprocessor operates on\n'
p48688
sS'cpp_type'
p48689
S'std::vector<VariableName>'
p48690
sS'default'
p48691
g3
sS'name'
p48692
S'variable'
p48693
sS'required'
p48694
I01
sS'group_name'
p48695
NsasS'name'
p48696
S'/UserObjects/NodalL2Norm'
p48697
sa(dp48698
S'description'
p48699
g3
sS'subblocks'
p48700
NsS'parameters'
p48701
(lp48702
(dp48703
S'description'
p48704
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48705
sS'cpp_type'
p48706
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p48707
sS'default'
p48708
g3
sS'name'
p48709
S'block'
p48710
sS'required'
p48711
I00
sS'group_name'
p48712
Nsa(dp48713
S'description'
p48714
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p48715
sS'cpp_type'
p48716
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p48717
sS'default'
p48718
g3
sS'name'
p48719
S'boundary'
p48720
sS'required'
p48721
I00
sS'group_name'
p48722
Nsa(dp48723
S'description'
p48724
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48725
sS'cpp_type'
p48726
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p48727
sS'default'
p48728
g3
sS'name'
p48729
S'control_tags'
p48730
sS'required'
p48731
I00
sS'group_name'
p48732
S'Advanced'
p48733
sa(dp48734
S'description'
p48735
S'Set the enabled status of the MooseObject.\n'
p48736
sS'cpp_type'
p48737
S'bool'
p48738
sS'default'
p48739
S'1'
p48740
sS'name'
p48741
S'enable'
p48742
sS'required'
p48743
I00
sS'group_name'
p48744
S'Advanced'
p48745
sa(dp48746
S'name'
p48747
S'execute_on'
p48748
sS'cpp_type'
p48749
S'MultiMooseEnum'
p48750
sS'default'
p48751
S'TIMESTEP_END'
p48752
sS'description'
p48753
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48754
sS'required'
p48755
I00
sS'options'
p48756
S'none initial linear nonlinear timestep_end timestep_begin custom'
p48757
sS'group_name'
p48758
Nsa(dp48759
S'description'
p48760
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p48761
sS'cpp_type'
p48762
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p48763
sS'default'
p48764
g3
sS'name'
p48765
S'outputs'
p48766
sS'required'
p48767
I00
sS'group_name'
p48768
S'Advanced'
p48769
sa(dp48770
S'description'
p48771
S'The seed for the master random number generator\n'
p48772
sS'cpp_type'
p48773
S'unsigned int'
p48774
sS'default'
p48775
S'0'
p48776
sS'name'
p48777
S'seed'
p48778
sS'required'
p48779
I00
sS'group_name'
p48780
S'Advanced'
p48781
sa(dp48782
S'description'
p48783
g3
sS'cpp_type'
p48784
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p48785
sS'default'
p48786
S'NodalMaxValue'
p48787
sS'name'
p48788
S'type'
p48789
sS'required'
p48790
I00
sS'group_name'
p48791
Nsa(dp48792
S'description'
p48793
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p48794
sS'cpp_type'
p48795
S'bool'
p48796
sS'default'
p48797
S'0'
p48798
sS'name'
p48799
S'unique_node_execute'
p48800
sS'required'
p48801
I00
sS'group_name'
p48802
Nsa(dp48803
S'description'
p48804
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48805
sS'cpp_type'
p48806
S'bool'
p48807
sS'default'
p48808
S'0'
p48809
sS'name'
p48810
S'use_displaced_mesh'
p48811
sS'required'
p48812
I00
sS'group_name'
p48813
S'Advanced'
p48814
sa(dp48815
S'description'
p48816
S'The name of the variable that this postprocessor operates on\n'
p48817
sS'cpp_type'
p48818
S'std::vector<VariableName>'
p48819
sS'default'
p48820
g3
sS'name'
p48821
S'variable'
p48822
sS'required'
p48823
I01
sS'group_name'
p48824
NsasS'name'
p48825
S'/UserObjects/NodalMaxValue'
p48826
sa(dp48827
S'description'
p48828
g3
sS'subblocks'
p48829
NsS'parameters'
p48830
(lp48831
(dp48832
S'description'
p48833
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p48834
sS'cpp_type'
p48835
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p48836
sS'default'
p48837
g3
sS'name'
p48838
S'boundary'
p48839
sS'required'
p48840
I01
sS'group_name'
p48841
Nsa(dp48842
S'description'
p48843
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48844
sS'cpp_type'
p48845
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p48846
sS'default'
p48847
g3
sS'name'
p48848
S'control_tags'
p48849
sS'required'
p48850
I00
sS'group_name'
p48851
S'Advanced'
p48852
sa(dp48853
S'description'
p48854
S"Node set ID which contains the nodes that are in 'corners'.\n"
p48855
sS'cpp_type'
p48856
S'BoundaryName'
p48857
sS'default'
p48858
g3
sS'name'
p48859
S'corner_boundary'
p48860
sS'required'
p48861
I01
sS'group_name'
p48862
Nsa(dp48863
S'description'
p48864
S'Set the enabled status of the MooseObject.\n'
p48865
sS'cpp_type'
p48866
S'bool'
p48867
sS'default'
p48868
S'1'
p48869
sS'name'
p48870
S'enable'
p48871
sS'required'
p48872
I00
sS'group_name'
p48873
S'Advanced'
p48874
sa(dp48875
S'name'
p48876
S'execute_on'
p48877
sS'cpp_type'
p48878
S'MultiMooseEnum'
p48879
sS'default'
p48880
S'TIMESTEP_END'
p48881
sS'description'
p48882
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48883
sS'required'
p48884
I00
sS'options'
p48885
S'none initial linear nonlinear timestep_end timestep_begin custom'
p48886
sS'group_name'
p48887
Nsa(dp48888
S'description'
p48889
g3
sS'cpp_type'
p48890
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p48891
sS'default'
p48892
S'NodalNormalsCorner'
p48893
sS'name'
p48894
S'type'
p48895
sS'required'
p48896
I00
sS'group_name'
p48897
Nsa(dp48898
S'description'
p48899
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48900
sS'cpp_type'
p48901
S'bool'
p48902
sS'default'
p48903
S'0'
p48904
sS'name'
p48905
S'use_displaced_mesh'
p48906
sS'required'
p48907
I00
sS'group_name'
p48908
S'Advanced'
p48909
sasS'name'
p48910
S'/UserObjects/NodalNormalsCorner'
p48911
sa(dp48912
S'description'
p48913
g3
sS'subblocks'
p48914
NsS'parameters'
p48915
(lp48916
(dp48917
S'description'
p48918
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48919
sS'cpp_type'
p48920
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p48921
sS'default'
p48922
g3
sS'name'
p48923
S'block'
p48924
sS'required'
p48925
I00
sS'group_name'
p48926
Nsa(dp48927
S'description'
p48928
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p48929
sS'cpp_type'
p48930
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p48931
sS'default'
p48932
g3
sS'name'
p48933
S'boundary'
p48934
sS'required'
p48935
I00
sS'group_name'
p48936
Nsa(dp48937
S'description'
p48938
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48939
sS'cpp_type'
p48940
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p48941
sS'default'
p48942
g3
sS'name'
p48943
S'control_tags'
p48944
sS'required'
p48945
I00
sS'group_name'
p48946
S'Advanced'
p48947
sa(dp48948
S'description'
p48949
S'Set the enabled status of the MooseObject.\n'
p48950
sS'cpp_type'
p48951
S'bool'
p48952
sS'default'
p48953
S'1'
p48954
sS'name'
p48955
S'enable'
p48956
sS'required'
p48957
I00
sS'group_name'
p48958
S'Advanced'
p48959
sa(dp48960
S'name'
p48961
S'execute_on'
p48962
sS'cpp_type'
p48963
S'MultiMooseEnum'
p48964
sS'default'
p48965
S'TIMESTEP_END'
p48966
sS'description'
p48967
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48968
sS'required'
p48969
I00
sS'options'
p48970
S'none initial linear nonlinear timestep_end timestep_begin custom'
p48971
sS'group_name'
p48972
Nsa(dp48973
S'description'
p48974
S'The seed for the master random number generator\n'
p48975
sS'cpp_type'
p48976
S'unsigned int'
p48977
sS'default'
p48978
S'0'
p48979
sS'name'
p48980
S'seed'
p48981
sS'required'
p48982
I00
sS'group_name'
p48983
S'Advanced'
p48984
sa(dp48985
S'description'
p48986
g3
sS'cpp_type'
p48987
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p48988
sS'default'
p48989
S'NodalNormalsEvaluator'
p48990
sS'name'
p48991
S'type'
p48992
sS'required'
p48993
I00
sS'group_name'
p48994
Nsa(dp48995
S'description'
p48996
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p48997
sS'cpp_type'
p48998
S'bool'
p48999
sS'default'
p49000
S'0'
p49001
sS'name'
p49002
S'unique_node_execute'
p49003
sS'required'
p49004
I00
sS'group_name'
p49005
Nsa(dp49006
S'description'
p49007
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49008
sS'cpp_type'
p49009
S'bool'
p49010
sS'default'
p49011
S'0'
p49012
sS'name'
p49013
S'use_displaced_mesh'
p49014
sS'required'
p49015
I00
sS'group_name'
p49016
S'Advanced'
p49017
sasS'name'
p49018
S'/UserObjects/NodalNormalsEvaluator'
p49019
sa(dp49020
S'description'
p49021
g3
sS'subblocks'
p49022
NsS'parameters'
p49023
(lp49024
(dp49025
S'description'
p49026
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49027
sS'cpp_type'
p49028
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p49029
sS'default'
p49030
g3
sS'name'
p49031
S'block'
p49032
sS'required'
p49033
I00
sS'group_name'
p49034
Nsa(dp49035
S'description'
p49036
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p49037
sS'cpp_type'
p49038
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p49039
sS'default'
p49040
g3
sS'name'
p49041
S'boundary'
p49042
sS'required'
p49043
I00
sS'group_name'
p49044
Nsa(dp49045
S'description'
p49046
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49047
sS'cpp_type'
p49048
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49049
sS'default'
p49050
g3
sS'name'
p49051
S'control_tags'
p49052
sS'required'
p49053
I00
sS'group_name'
p49054
S'Advanced'
p49055
sa(dp49056
S'description'
p49057
S"Node set ID which contains the nodes that are in 'corners'.\n"
p49058
sS'cpp_type'
p49059
S'BoundaryName'
p49060
sS'default'
p49061
g3
sS'name'
p49062
S'corner_boundary'
p49063
sS'required'
p49064
I00
sS'group_name'
p49065
Nsa(dp49066
S'description'
p49067
S'Set the enabled status of the MooseObject.\n'
p49068
sS'cpp_type'
p49069
S'bool'
p49070
sS'default'
p49071
S'1'
p49072
sS'name'
p49073
S'enable'
p49074
sS'required'
p49075
I00
sS'group_name'
p49076
S'Advanced'
p49077
sa(dp49078
S'name'
p49079
S'execute_on'
p49080
sS'cpp_type'
p49081
S'MultiMooseEnum'
p49082
sS'default'
p49083
S'TIMESTEP_END'
p49084
sS'description'
p49085
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49086
sS'required'
p49087
I00
sS'options'
p49088
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49089
sS'group_name'
p49090
Nsa(dp49091
S'description'
p49092
S'The seed for the master random number generator\n'
p49093
sS'cpp_type'
p49094
S'unsigned int'
p49095
sS'default'
p49096
S'0'
p49097
sS'name'
p49098
S'seed'
p49099
sS'required'
p49100
I00
sS'group_name'
p49101
S'Advanced'
p49102
sa(dp49103
S'description'
p49104
g3
sS'cpp_type'
p49105
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49106
sS'default'
p49107
S'NodalNormalsPreprocessor'
p49108
sS'name'
p49109
S'type'
p49110
sS'required'
p49111
I00
sS'group_name'
p49112
Nsa(dp49113
S'description'
p49114
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49115
sS'cpp_type'
p49116
S'bool'
p49117
sS'default'
p49118
S'0'
p49119
sS'name'
p49120
S'use_displaced_mesh'
p49121
sS'required'
p49122
I00
sS'group_name'
p49123
S'Advanced'
p49124
sasS'name'
p49125
S'/UserObjects/NodalNormalsPreprocessor'
p49126
sa(dp49127
S'description'
p49128
g3
sS'subblocks'
p49129
NsS'parameters'
p49130
(lp49131
(dp49132
S'description'
p49133
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49134
sS'cpp_type'
p49135
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p49136
sS'default'
p49137
g3
sS'name'
p49138
S'block'
p49139
sS'required'
p49140
I00
sS'group_name'
p49141
Nsa(dp49142
S'description'
p49143
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p49144
sS'cpp_type'
p49145
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p49146
sS'default'
p49147
g3
sS'name'
p49148
S'boundary'
p49149
sS'required'
p49150
I00
sS'group_name'
p49151
Nsa(dp49152
S'description'
p49153
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49154
sS'cpp_type'
p49155
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49156
sS'default'
p49157
g3
sS'name'
p49158
S'control_tags'
p49159
sS'required'
p49160
I00
sS'group_name'
p49161
S'Advanced'
p49162
sa(dp49163
S'description'
p49164
S'Set the enabled status of the MooseObject.\n'
p49165
sS'cpp_type'
p49166
S'bool'
p49167
sS'default'
p49168
S'1'
p49169
sS'name'
p49170
S'enable'
p49171
sS'required'
p49172
I00
sS'group_name'
p49173
S'Advanced'
p49174
sa(dp49175
S'name'
p49176
S'execute_on'
p49177
sS'cpp_type'
p49178
S'MultiMooseEnum'
p49179
sS'default'
p49180
S'TIMESTEP_END'
p49181
sS'description'
p49182
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49183
sS'required'
p49184
I00
sS'options'
p49185
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49186
sS'group_name'
p49187
Nsa(dp49188
S'description'
p49189
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49190
sS'cpp_type'
p49191
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49192
sS'default'
p49193
g3
sS'name'
p49194
S'outputs'
p49195
sS'required'
p49196
I00
sS'group_name'
p49197
S'Advanced'
p49198
sa(dp49199
S'description'
p49200
S'The seed for the master random number generator\n'
p49201
sS'cpp_type'
p49202
S'unsigned int'
p49203
sS'default'
p49204
S'0'
p49205
sS'name'
p49206
S'seed'
p49207
sS'required'
p49208
I00
sS'group_name'
p49209
S'Advanced'
p49210
sa(dp49211
S'description'
p49212
g3
sS'cpp_type'
p49213
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49214
sS'default'
p49215
S'NodalProxyMaxValue'
p49216
sS'name'
p49217
S'type'
p49218
sS'required'
p49219
I00
sS'group_name'
p49220
Nsa(dp49221
S'description'
p49222
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p49223
sS'cpp_type'
p49224
S'bool'
p49225
sS'default'
p49226
S'0'
p49227
sS'name'
p49228
S'unique_node_execute'
p49229
sS'required'
p49230
I00
sS'group_name'
p49231
Nsa(dp49232
S'description'
p49233
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49234
sS'cpp_type'
p49235
S'bool'
p49236
sS'default'
p49237
S'0'
p49238
sS'name'
p49239
S'use_displaced_mesh'
p49240
sS'required'
p49241
I00
sS'group_name'
p49242
S'Advanced'
p49243
sa(dp49244
S'description'
p49245
S'The name of the variable that this postprocessor operates on\n'
p49246
sS'cpp_type'
p49247
S'std::vector<VariableName>'
p49248
sS'default'
p49249
g3
sS'name'
p49250
S'variable'
p49251
sS'required'
p49252
I01
sS'group_name'
p49253
NsasS'name'
p49254
S'/UserObjects/NodalProxyMaxValue'
p49255
sa(dp49256
S'description'
p49257
g3
sS'subblocks'
p49258
NsS'parameters'
p49259
(lp49260
(dp49261
S'description'
p49262
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49263
sS'cpp_type'
p49264
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p49265
sS'default'
p49266
g3
sS'name'
p49267
S'block'
p49268
sS'required'
p49269
I00
sS'group_name'
p49270
Nsa(dp49271
S'description'
p49272
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p49273
sS'cpp_type'
p49274
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p49275
sS'default'
p49276
g3
sS'name'
p49277
S'boundary'
p49278
sS'required'
p49279
I00
sS'group_name'
p49280
Nsa(dp49281
S'description'
p49282
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49283
sS'cpp_type'
p49284
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49285
sS'default'
p49286
g3
sS'name'
p49287
S'control_tags'
p49288
sS'required'
p49289
I00
sS'group_name'
p49290
S'Advanced'
p49291
sa(dp49292
S'description'
p49293
S'Set the enabled status of the MooseObject.\n'
p49294
sS'cpp_type'
p49295
S'bool'
p49296
sS'default'
p49297
S'1'
p49298
sS'name'
p49299
S'enable'
p49300
sS'required'
p49301
I00
sS'group_name'
p49302
S'Advanced'
p49303
sa(dp49304
S'name'
p49305
S'execute_on'
p49306
sS'cpp_type'
p49307
S'MultiMooseEnum'
p49308
sS'default'
p49309
S'TIMESTEP_END'
p49310
sS'description'
p49311
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49312
sS'required'
p49313
I00
sS'options'
p49314
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49315
sS'group_name'
p49316
Nsa(dp49317
S'description'
p49318
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49319
sS'cpp_type'
p49320
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49321
sS'default'
p49322
g3
sS'name'
p49323
S'outputs'
p49324
sS'required'
p49325
I00
sS'group_name'
p49326
S'Advanced'
p49327
sa(dp49328
S'description'
p49329
S'The seed for the master random number generator\n'
p49330
sS'cpp_type'
p49331
S'unsigned int'
p49332
sS'default'
p49333
S'0'
p49334
sS'name'
p49335
S'seed'
p49336
sS'required'
p49337
I00
sS'group_name'
p49338
S'Advanced'
p49339
sa(dp49340
S'description'
p49341
g3
sS'cpp_type'
p49342
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49343
sS'default'
p49344
S'NodalSum'
p49345
sS'name'
p49346
S'type'
p49347
sS'required'
p49348
I00
sS'group_name'
p49349
Nsa(dp49350
S'description'
p49351
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p49352
sS'cpp_type'
p49353
S'bool'
p49354
sS'default'
p49355
S'1'
p49356
sS'name'
p49357
S'unique_node_execute'
p49358
sS'required'
p49359
I00
sS'group_name'
p49360
Nsa(dp49361
S'description'
p49362
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49363
sS'cpp_type'
p49364
S'bool'
p49365
sS'default'
p49366
S'0'
p49367
sS'name'
p49368
S'use_displaced_mesh'
p49369
sS'required'
p49370
I00
sS'group_name'
p49371
S'Advanced'
p49372
sa(dp49373
S'description'
p49374
S'The name of the variable that this postprocessor operates on\n'
p49375
sS'cpp_type'
p49376
S'std::vector<VariableName>'
p49377
sS'default'
p49378
g3
sS'name'
p49379
S'variable'
p49380
sS'required'
p49381
I01
sS'group_name'
p49382
NsasS'name'
p49383
S'/UserObjects/NodalSum'
p49384
sa(dp49385
S'description'
p49386
g3
sS'subblocks'
p49387
NsS'parameters'
p49388
(lp49389
(dp49390
S'description'
p49391
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49392
sS'cpp_type'
p49393
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49394
sS'default'
p49395
g3
sS'name'
p49396
S'control_tags'
p49397
sS'required'
p49398
I00
sS'group_name'
p49399
S'Advanced'
p49400
sa(dp49401
S'description'
p49402
S'Set the enabled status of the MooseObject.\n'
p49403
sS'cpp_type'
p49404
S'bool'
p49405
sS'default'
p49406
S'1'
p49407
sS'name'
p49408
S'enable'
p49409
sS'required'
p49410
I00
sS'group_name'
p49411
S'Advanced'
p49412
sa(dp49413
S'name'
p49414
S'execute_on'
p49415
sS'cpp_type'
p49416
S'MultiMooseEnum'
p49417
sS'default'
p49418
S'TIMESTEP_END'
p49419
sS'description'
p49420
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49421
sS'required'
p49422
I00
sS'options'
p49423
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49424
sS'group_name'
p49425
Nsa(dp49426
S'description'
p49427
S'The ID of the node where we monitor\n'
p49428
sS'cpp_type'
p49429
S'unsigned int'
p49430
sS'default'
p49431
g3
sS'name'
p49432
S'nodeid'
p49433
sS'required'
p49434
I01
sS'group_name'
p49435
Nsa(dp49436
S'description'
p49437
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49438
sS'cpp_type'
p49439
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49440
sS'default'
p49441
g3
sS'name'
p49442
S'outputs'
p49443
sS'required'
p49444
I00
sS'group_name'
p49445
S'Advanced'
p49446
sa(dp49447
S'description'
p49448
S'A scale factor to be applied to the variable\n'
p49449
sS'cpp_type'
p49450
S'double'
p49451
sS'default'
p49452
S'1'
p49453
sS'name'
p49454
S'scale_factor'
p49455
sS'required'
p49456
I00
sS'group_name'
p49457
Nsa(dp49458
S'description'
p49459
g3
sS'cpp_type'
p49460
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49461
sS'default'
p49462
S'NodalVariableValue'
p49463
sS'name'
p49464
S'type'
p49465
sS'required'
p49466
I00
sS'group_name'
p49467
Nsa(dp49468
S'description'
p49469
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49470
sS'cpp_type'
p49471
S'bool'
p49472
sS'default'
p49473
S'0'
p49474
sS'name'
p49475
S'use_displaced_mesh'
p49476
sS'required'
p49477
I00
sS'group_name'
p49478
S'Advanced'
p49479
sa(dp49480
S'description'
p49481
S'The variable to be monitored\n'
p49482
sS'cpp_type'
p49483
S'VariableName'
p49484
sS'default'
p49485
g3
sS'name'
p49486
S'variable'
p49487
sS'required'
p49488
I01
sS'group_name'
p49489
NsasS'name'
p49490
S'/UserObjects/NodalVariableValue'
p49491
sa(dp49492
S'description'
p49493
g3
sS'subblocks'
p49494
NsS'parameters'
p49495
(lp49496
(dp49497
S'description'
p49498
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49499
sS'cpp_type'
p49500
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49501
sS'default'
p49502
g3
sS'name'
p49503
S'control_tags'
p49504
sS'required'
p49505
I00
sS'group_name'
p49506
S'Advanced'
p49507
sa(dp49508
S'description'
p49509
S'Set the enabled status of the MooseObject.\n'
p49510
sS'cpp_type'
p49511
S'bool'
p49512
sS'default'
p49513
S'1'
p49514
sS'name'
p49515
S'enable'
p49516
sS'required'
p49517
I00
sS'group_name'
p49518
S'Advanced'
p49519
sa(dp49520
S'name'
p49521
S'execute_on'
p49522
sS'cpp_type'
p49523
S'MultiMooseEnum'
p49524
sS'default'
p49525
S'TIMESTEP_END'
p49526
sS'description'
p49527
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49528
sS'required'
p49529
I00
sS'options'
p49530
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49531
sS'group_name'
p49532
Nsa(dp49533
S'description'
p49534
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49535
sS'cpp_type'
p49536
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49537
sS'default'
p49538
g3
sS'name'
p49539
S'outputs'
p49540
sS'required'
p49541
I00
sS'group_name'
p49542
S'Advanced'
p49543
sa(dp49544
S'name'
p49545
S'system'
p49546
sS'cpp_type'
p49547
S'MooseEnum'
p49548
sS'default'
p49549
S'ALL'
p49550
sS'description'
p49551
S'The system(s) to retrieve the number of DOFs from (NL, AUX, ALL). Default == ALL\n'
p49552
sS'required'
p49553
I00
sS'options'
p49554
S'NL AUX ALL'
p49555
sS'group_name'
p49556
Nsa(dp49557
S'description'
p49558
g3
sS'cpp_type'
p49559
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49560
sS'default'
p49561
S'NumDOFs'
p49562
sS'name'
p49563
S'type'
p49564
sS'required'
p49565
I00
sS'group_name'
p49566
Nsa(dp49567
S'description'
p49568
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49569
sS'cpp_type'
p49570
S'bool'
p49571
sS'default'
p49572
S'0'
p49573
sS'name'
p49574
S'use_displaced_mesh'
p49575
sS'required'
p49576
I00
sS'group_name'
p49577
S'Advanced'
p49578
sasS'name'
p49579
S'/UserObjects/NumDOFs'
p49580
sa(dp49581
S'description'
p49582
g3
sS'subblocks'
p49583
NsS'parameters'
p49584
(lp49585
(dp49586
S'description'
p49587
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49588
sS'cpp_type'
p49589
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49590
sS'default'
p49591
g3
sS'name'
p49592
S'control_tags'
p49593
sS'required'
p49594
I00
sS'group_name'
p49595
S'Advanced'
p49596
sa(dp49597
S'name'
p49598
S'elem_filter'
p49599
sS'cpp_type'
p49600
S'MooseEnum'
p49601
sS'default'
p49602
S'active'
p49603
sS'description'
p49604
S'The type of elements to include in the count (active, total). Default == active\n'
p49605
sS'required'
p49606
I00
sS'options'
p49607
S'active total'
p49608
sS'group_name'
p49609
Nsa(dp49610
S'description'
p49611
S'Set the enabled status of the MooseObject.\n'
p49612
sS'cpp_type'
p49613
S'bool'
p49614
sS'default'
p49615
S'1'
p49616
sS'name'
p49617
S'enable'
p49618
sS'required'
p49619
I00
sS'group_name'
p49620
S'Advanced'
p49621
sa(dp49622
S'name'
p49623
S'execute_on'
p49624
sS'cpp_type'
p49625
S'MultiMooseEnum'
p49626
sS'default'
p49627
S'TIMESTEP_END'
p49628
sS'description'
p49629
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49630
sS'required'
p49631
I00
sS'options'
p49632
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49633
sS'group_name'
p49634
Nsa(dp49635
S'description'
p49636
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49637
sS'cpp_type'
p49638
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49639
sS'default'
p49640
g3
sS'name'
p49641
S'outputs'
p49642
sS'required'
p49643
I00
sS'group_name'
p49644
S'Advanced'
p49645
sa(dp49646
S'description'
p49647
g3
sS'cpp_type'
p49648
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49649
sS'default'
p49650
S'NumElems'
p49651
sS'name'
p49652
S'type'
p49653
sS'required'
p49654
I00
sS'group_name'
p49655
Nsa(dp49656
S'description'
p49657
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49658
sS'cpp_type'
p49659
S'bool'
p49660
sS'default'
p49661
S'0'
p49662
sS'name'
p49663
S'use_displaced_mesh'
p49664
sS'required'
p49665
I00
sS'group_name'
p49666
S'Advanced'
p49667
sasS'name'
p49668
S'/UserObjects/NumElems'
p49669
sa(dp49670
S'description'
p49671
g3
sS'subblocks'
p49672
NsS'parameters'
p49673
(lp49674
(dp49675
S'description'
p49676
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49677
sS'cpp_type'
p49678
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49679
sS'default'
p49680
g3
sS'name'
p49681
S'control_tags'
p49682
sS'required'
p49683
I00
sS'group_name'
p49684
S'Advanced'
p49685
sa(dp49686
S'description'
p49687
S'Set the enabled status of the MooseObject.\n'
p49688
sS'cpp_type'
p49689
S'bool'
p49690
sS'default'
p49691
S'1'
p49692
sS'name'
p49693
S'enable'
p49694
sS'required'
p49695
I00
sS'group_name'
p49696
S'Advanced'
p49697
sa(dp49698
S'name'
p49699
S'execute_on'
p49700
sS'cpp_type'
p49701
S'MultiMooseEnum'
p49702
sS'default'
p49703
S'TIMESTEP_END'
p49704
sS'description'
p49705
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49706
sS'required'
p49707
I00
sS'options'
p49708
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49709
sS'group_name'
p49710
Nsa(dp49711
S'description'
p49712
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49713
sS'cpp_type'
p49714
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49715
sS'default'
p49716
g3
sS'name'
p49717
S'outputs'
p49718
sS'required'
p49719
I00
sS'group_name'
p49720
S'Advanced'
p49721
sa(dp49722
S'description'
p49723
g3
sS'cpp_type'
p49724
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49725
sS'default'
p49726
S'NumLinearIterations'
p49727
sS'name'
p49728
S'type'
p49729
sS'required'
p49730
I00
sS'group_name'
p49731
Nsa(dp49732
S'description'
p49733
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49734
sS'cpp_type'
p49735
S'bool'
p49736
sS'default'
p49737
S'0'
p49738
sS'name'
p49739
S'use_displaced_mesh'
p49740
sS'required'
p49741
I00
sS'group_name'
p49742
S'Advanced'
p49743
sasS'name'
p49744
S'/UserObjects/NumLinearIterations'
p49745
sa(dp49746
S'description'
p49747
g3
sS'subblocks'
p49748
NsS'parameters'
p49749
(lp49750
(dp49751
S'description'
p49752
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49753
sS'cpp_type'
p49754
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49755
sS'default'
p49756
g3
sS'name'
p49757
S'control_tags'
p49758
sS'required'
p49759
I00
sS'group_name'
p49760
S'Advanced'
p49761
sa(dp49762
S'description'
p49763
S'Set the enabled status of the MooseObject.\n'
p49764
sS'cpp_type'
p49765
S'bool'
p49766
sS'default'
p49767
S'1'
p49768
sS'name'
p49769
S'enable'
p49770
sS'required'
p49771
I00
sS'group_name'
p49772
S'Advanced'
p49773
sa(dp49774
S'name'
p49775
S'execute_on'
p49776
sS'cpp_type'
p49777
S'MultiMooseEnum'
p49778
sS'default'
p49779
S'TIMESTEP_END'
p49780
sS'description'
p49781
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49782
sS'required'
p49783
I00
sS'options'
p49784
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49785
sS'group_name'
p49786
Nsa(dp49787
S'description'
p49788
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49789
sS'cpp_type'
p49790
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49791
sS'default'
p49792
g3
sS'name'
p49793
S'outputs'
p49794
sS'required'
p49795
I00
sS'group_name'
p49796
S'Advanced'
p49797
sa(dp49798
S'description'
p49799
g3
sS'cpp_type'
p49800
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49801
sS'default'
p49802
S'NumNodes'
p49803
sS'name'
p49804
S'type'
p49805
sS'required'
p49806
I00
sS'group_name'
p49807
Nsa(dp49808
S'description'
p49809
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49810
sS'cpp_type'
p49811
S'bool'
p49812
sS'default'
p49813
S'0'
p49814
sS'name'
p49815
S'use_displaced_mesh'
p49816
sS'required'
p49817
I00
sS'group_name'
p49818
S'Advanced'
p49819
sasS'name'
p49820
S'/UserObjects/NumNodes'
p49821
sa(dp49822
S'description'
p49823
g3
sS'subblocks'
p49824
NsS'parameters'
p49825
(lp49826
(dp49827
S'description'
p49828
S'When set to true, accumulates to count the total over all Picard iterations for each step\n'
p49829
sS'cpp_type'
p49830
S'bool'
p49831
sS'default'
p49832
S'0'
p49833
sS'name'
p49834
S'accumulate_over_step'
p49835
sS'required'
p49836
I00
sS'group_name'
p49837
Nsa(dp49838
S'description'
p49839
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49840
sS'cpp_type'
p49841
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49842
sS'default'
p49843
g3
sS'name'
p49844
S'control_tags'
p49845
sS'required'
p49846
I00
sS'group_name'
p49847
S'Advanced'
p49848
sa(dp49849
S'description'
p49850
S'Set the enabled status of the MooseObject.\n'
p49851
sS'cpp_type'
p49852
S'bool'
p49853
sS'default'
p49854
S'1'
p49855
sS'name'
p49856
S'enable'
p49857
sS'required'
p49858
I00
sS'group_name'
p49859
S'Advanced'
p49860
sa(dp49861
S'name'
p49862
S'execute_on'
p49863
sS'cpp_type'
p49864
S'MultiMooseEnum'
p49865
sS'default'
p49866
S'TIMESTEP_END'
p49867
sS'description'
p49868
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49869
sS'required'
p49870
I00
sS'options'
p49871
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49872
sS'group_name'
p49873
Nsa(dp49874
S'description'
p49875
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49876
sS'cpp_type'
p49877
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49878
sS'default'
p49879
g3
sS'name'
p49880
S'outputs'
p49881
sS'required'
p49882
I00
sS'group_name'
p49883
S'Advanced'
p49884
sa(dp49885
S'description'
p49886
g3
sS'cpp_type'
p49887
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49888
sS'default'
p49889
S'NumNonlinearIterations'
p49890
sS'name'
p49891
S'type'
p49892
sS'required'
p49893
I00
sS'group_name'
p49894
Nsa(dp49895
S'description'
p49896
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49897
sS'cpp_type'
p49898
S'bool'
p49899
sS'default'
p49900
S'0'
p49901
sS'name'
p49902
S'use_displaced_mesh'
p49903
sS'required'
p49904
I00
sS'group_name'
p49905
S'Advanced'
p49906
sasS'name'
p49907
S'/UserObjects/NumNonlinearIterations'
p49908
sa(dp49909
S'description'
p49910
g3
sS'subblocks'
p49911
NsS'parameters'
p49912
(lp49913
(dp49914
S'description'
p49915
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49916
sS'cpp_type'
p49917
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49918
sS'default'
p49919
g3
sS'name'
p49920
S'control_tags'
p49921
sS'required'
p49922
I00
sS'group_name'
p49923
S'Advanced'
p49924
sa(dp49925
S'description'
p49926
S'Set the enabled status of the MooseObject.\n'
p49927
sS'cpp_type'
p49928
S'bool'
p49929
sS'default'
p49930
S'1'
p49931
sS'name'
p49932
S'enable'
p49933
sS'required'
p49934
I00
sS'group_name'
p49935
S'Advanced'
p49936
sa(dp49937
S'name'
p49938
S'execute_on'
p49939
sS'cpp_type'
p49940
S'MultiMooseEnum'
p49941
sS'default'
p49942
S'TIMESTEP_END'
p49943
sS'description'
p49944
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49945
sS'required'
p49946
I00
sS'options'
p49947
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49948
sS'group_name'
p49949
Nsa(dp49950
S'description'
p49951
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49952
sS'cpp_type'
p49953
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49954
sS'default'
p49955
g3
sS'name'
p49956
S'outputs'
p49957
sS'required'
p49958
I00
sS'group_name'
p49959
S'Advanced'
p49960
sa(dp49961
S'description'
p49962
g3
sS'cpp_type'
p49963
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49964
sS'default'
p49965
S'NumPicardIterations'
p49966
sS'name'
p49967
S'type'
p49968
sS'required'
p49969
I00
sS'group_name'
p49970
Nsa(dp49971
S'description'
p49972
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49973
sS'cpp_type'
p49974
S'bool'
p49975
sS'default'
p49976
S'0'
p49977
sS'name'
p49978
S'use_displaced_mesh'
p49979
sS'required'
p49980
I00
sS'group_name'
p49981
S'Advanced'
p49982
sasS'name'
p49983
S'/UserObjects/NumPicardIterations'
p49984
sa(dp49985
S'description'
p49986
g3
sS'subblocks'
p49987
NsS'parameters'
p49988
(lp49989
(dp49990
S'description'
p49991
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49992
sS'cpp_type'
p49993
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49994
sS'default'
p49995
g3
sS'name'
p49996
S'control_tags'
p49997
sS'required'
p49998
I00
sS'group_name'
p49999
S'Advanced'
p50000
sa(dp50001
S'description'
p50002
S'Set the enabled status of the MooseObject.\n'
p50003
sS'cpp_type'
p50004
S'bool'
p50005
sS'default'
p50006
S'1'
p50007
sS'name'
p50008
S'enable'
p50009
sS'required'
p50010
I00
sS'group_name'
p50011
S'Advanced'
p50012
sa(dp50013
S'name'
p50014
S'execute_on'
p50015
sS'cpp_type'
p50016
S'MultiMooseEnum'
p50017
sS'default'
p50018
S'TIMESTEP_END'
p50019
sS'description'
p50020
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50021
sS'required'
p50022
I00
sS'options'
p50023
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50024
sS'group_name'
p50025
Nsa(dp50026
S'description'
p50027
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50028
sS'cpp_type'
p50029
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50030
sS'default'
p50031
g3
sS'name'
p50032
S'outputs'
p50033
sS'required'
p50034
I00
sS'group_name'
p50035
S'Advanced'
p50036
sa(dp50037
S'description'
p50038
g3
sS'cpp_type'
p50039
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50040
sS'default'
p50041
S'NumResidualEvaluations'
p50042
sS'name'
p50043
S'type'
p50044
sS'required'
p50045
I00
sS'group_name'
p50046
Nsa(dp50047
S'description'
p50048
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50049
sS'cpp_type'
p50050
S'bool'
p50051
sS'default'
p50052
S'0'
p50053
sS'name'
p50054
S'use_displaced_mesh'
p50055
sS'required'
p50056
I00
sS'group_name'
p50057
S'Advanced'
p50058
sasS'name'
p50059
S'/UserObjects/NumResidualEvaluations'
p50060
sa(dp50061
S'description'
p50062
g3
sS'subblocks'
p50063
NsS'parameters'
p50064
(lp50065
(dp50066
S'description'
p50067
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50068
sS'cpp_type'
p50069
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50070
sS'default'
p50071
g3
sS'name'
p50072
S'control_tags'
p50073
sS'required'
p50074
I00
sS'group_name'
p50075
S'Advanced'
p50076
sa(dp50077
S'description'
p50078
S'Set the enabled status of the MooseObject.\n'
p50079
sS'cpp_type'
p50080
S'bool'
p50081
sS'default'
p50082
S'1'
p50083
sS'name'
p50084
S'enable'
p50085
sS'required'
p50086
I00
sS'group_name'
p50087
S'Advanced'
p50088
sa(dp50089
S'name'
p50090
S'execute_on'
p50091
sS'cpp_type'
p50092
S'MultiMooseEnum'
p50093
sS'default'
p50094
S'TIMESTEP_END'
p50095
sS'description'
p50096
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50097
sS'required'
p50098
I00
sS'options'
p50099
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50100
sS'group_name'
p50101
Nsa(dp50102
S'description'
p50103
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50104
sS'cpp_type'
p50105
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50106
sS'default'
p50107
g3
sS'name'
p50108
S'outputs'
p50109
sS'required'
p50110
I00
sS'group_name'
p50111
S'Advanced'
p50112
sa(dp50113
S'name'
p50114
S'system'
p50115
sS'cpp_type'
p50116
S'MooseEnum'
p50117
sS'default'
p50118
S'nonlinear'
p50119
sS'description'
p50120
S'The system for which you want to print the number of variables.\n'
p50121
sS'required'
p50122
I00
sS'options'
p50123
S'nonlinear auxiliary'
p50124
sS'group_name'
p50125
Nsa(dp50126
S'description'
p50127
g3
sS'cpp_type'
p50128
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50129
sS'default'
p50130
S'NumVars'
p50131
sS'name'
p50132
S'type'
p50133
sS'required'
p50134
I00
sS'group_name'
p50135
Nsa(dp50136
S'description'
p50137
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50138
sS'cpp_type'
p50139
S'bool'
p50140
sS'default'
p50141
S'0'
p50142
sS'name'
p50143
S'use_displaced_mesh'
p50144
sS'required'
p50145
I00
sS'group_name'
p50146
S'Advanced'
p50147
sasS'name'
p50148
S'/UserObjects/NumVars'
p50149
sa(dp50150
S'description'
p50151
g3
sS'subblocks'
p50152
NsS'parameters'
p50153
(lp50154
(dp50155
S'description'
p50156
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50157
sS'cpp_type'
p50158
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50159
sS'default'
p50160
g3
sS'name'
p50161
S'control_tags'
p50162
sS'required'
p50163
I00
sS'group_name'
p50164
S'Advanced'
p50165
sa(dp50166
S'description'
p50167
S'Set the enabled status of the MooseObject.\n'
p50168
sS'cpp_type'
p50169
S'bool'
p50170
sS'default'
p50171
S'1'
p50172
sS'name'
p50173
S'enable'
p50174
sS'required'
p50175
I00
sS'group_name'
p50176
S'Advanced'
p50177
sa(dp50178
S'name'
p50179
S'execute_on'
p50180
sS'cpp_type'
p50181
S'MultiMooseEnum'
p50182
sS'default'
p50183
S'TIMESTEP_END'
p50184
sS'description'
p50185
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50186
sS'required'
p50187
I00
sS'options'
p50188
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50189
sS'group_name'
p50190
Nsa(dp50191
S'description'
p50192
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50193
sS'cpp_type'
p50194
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50195
sS'default'
p50196
g3
sS'name'
p50197
S'outputs'
p50198
sS'required'
p50199
I00
sS'group_name'
p50200
S'Advanced'
p50201
sa(dp50202
S'description'
p50203
S'The name of the postprocessor used for exit criterion\n'
p50204
sS'cpp_type'
p50205
S'PostprocessorName'
p50206
sS'default'
p50207
g3
sS'name'
p50208
S'postprocessor'
p50209
sS'required'
p50210
I01
sS'group_name'
p50211
Nsa(dp50212
S'description'
p50213
g3
sS'cpp_type'
p50214
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50215
sS'default'
p50216
S'PercentChangePostprocessor'
p50217
sS'name'
p50218
S'type'
p50219
sS'required'
p50220
I00
sS'group_name'
p50221
Nsa(dp50222
S'description'
p50223
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50224
sS'cpp_type'
p50225
S'bool'
p50226
sS'default'
p50227
S'0'
p50228
sS'name'
p50229
S'use_displaced_mesh'
p50230
sS'required'
p50231
I00
sS'group_name'
p50232
S'Advanced'
p50233
sasS'name'
p50234
S'/UserObjects/PercentChangePostprocessor'
p50235
sa(dp50236
S'description'
p50237
g3
sS'subblocks'
p50238
NsS'parameters'
p50239
(lp50240
(dp50241
S'description'
p50242
S'The category or "Header" for the event\n'
p50243
sS'cpp_type'
p50244
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50245
sS'default'
p50246
S'Execution'
p50247
sS'name'
p50248
S'category'
p50249
sS'required'
p50250
I00
sS'group_name'
p50251
Nsa(dp50252
S'name'
p50253
S'column'
p50254
sS'cpp_type'
p50255
S'MooseEnum'
p50256
sS'default'
p50257
S'total_time_with_sub'
p50258
sS'description'
p50259
S'The column you want the value of (Default: total_time_with_sub).\n'
p50260
sS'required'
p50261
I00
sS'options'
p50262
S'n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub'
p50263
sS'group_name'
p50264
Nsa(dp50265
S'description'
p50266
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50267
sS'cpp_type'
p50268
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50269
sS'default'
p50270
g3
sS'name'
p50271
S'control_tags'
p50272
sS'required'
p50273
I00
sS'group_name'
p50274
S'Advanced'
p50275
sa(dp50276
S'description'
p50277
S'Set the enabled status of the MooseObject.\n'
p50278
sS'cpp_type'
p50279
S'bool'
p50280
sS'default'
p50281
S'1'
p50282
sS'name'
p50283
S'enable'
p50284
sS'required'
p50285
I00
sS'group_name'
p50286
S'Advanced'
p50287
sa(dp50288
S'description'
p50289
S'The name or "label" of the event ("ALIVE" and "ACTIVE" are also valid events, category and column are ignored for these cases).\n'
p50290
sS'cpp_type'
p50291
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50292
sS'default'
p50293
g3
sS'name'
p50294
S'event'
p50295
sS'required'
p50296
I01
sS'group_name'
p50297
Nsa(dp50298
S'name'
p50299
S'execute_on'
p50300
sS'cpp_type'
p50301
S'MultiMooseEnum'
p50302
sS'default'
p50303
S'TIMESTEP_END'
p50304
sS'description'
p50305
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50306
sS'required'
p50307
I00
sS'options'
p50308
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50309
sS'group_name'
p50310
Nsa(dp50311
S'description'
p50312
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50313
sS'cpp_type'
p50314
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50315
sS'default'
p50316
g3
sS'name'
p50317
S'outputs'
p50318
sS'required'
p50319
I00
sS'group_name'
p50320
S'Advanced'
p50321
sa(dp50322
S'description'
p50323
g3
sS'cpp_type'
p50324
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50325
sS'default'
p50326
S'PerformanceData'
p50327
sS'name'
p50328
S'type'
p50329
sS'required'
p50330
I00
sS'group_name'
p50331
Nsa(dp50332
S'description'
p50333
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50334
sS'cpp_type'
p50335
S'bool'
p50336
sS'default'
p50337
S'0'
p50338
sS'name'
p50339
S'use_displaced_mesh'
p50340
sS'required'
p50341
I00
sS'group_name'
p50342
S'Advanced'
p50343
sasS'name'
p50344
S'/UserObjects/PerformanceData'
p50345
sa(dp50346
S'description'
p50347
g3
sS'subblocks'
p50348
NsS'parameters'
p50349
(lp50350
(dp50351
S'description'
p50352
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50353
sS'cpp_type'
p50354
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50355
sS'default'
p50356
g3
sS'name'
p50357
S'control_tags'
p50358
sS'required'
p50359
I00
sS'group_name'
p50360
S'Advanced'
p50361
sa(dp50362
S'description'
p50363
S'Set the enabled status of the MooseObject.\n'
p50364
sS'cpp_type'
p50365
S'bool'
p50366
sS'default'
p50367
S'1'
p50368
sS'name'
p50369
S'enable'
p50370
sS'required'
p50371
I00
sS'group_name'
p50372
S'Advanced'
p50373
sa(dp50374
S'name'
p50375
S'execute_on'
p50376
sS'cpp_type'
p50377
S'MultiMooseEnum'
p50378
sS'default'
p50379
S'TIMESTEP_END'
p50380
sS'description'
p50381
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50382
sS'required'
p50383
I00
sS'options'
p50384
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50385
sS'group_name'
p50386
Nsa(dp50387
S'description'
p50388
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50389
sS'cpp_type'
p50390
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50391
sS'default'
p50392
g3
sS'name'
p50393
S'outputs'
p50394
sS'required'
p50395
I00
sS'group_name'
p50396
S'Advanced'
p50397
sa(dp50398
S'description'
p50399
S'The physical point where the solution will be evaluated.\n'
p50400
sS'cpp_type'
p50401
S'libMesh::Point'
p50402
sS'default'
p50403
g3
sS'name'
p50404
S'point'
p50405
sS'required'
p50406
I01
sS'group_name'
p50407
Nsa(dp50408
S'description'
p50409
g3
sS'cpp_type'
p50410
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50411
sS'default'
p50412
S'PointValue'
p50413
sS'name'
p50414
S'type'
p50415
sS'required'
p50416
I00
sS'group_name'
p50417
Nsa(dp50418
S'description'
p50419
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50420
sS'cpp_type'
p50421
S'bool'
p50422
sS'default'
p50423
S'0'
p50424
sS'name'
p50425
S'use_displaced_mesh'
p50426
sS'required'
p50427
I00
sS'group_name'
p50428
S'Advanced'
p50429
sa(dp50430
S'description'
p50431
S'The name of the variable that this postprocessor operates on.\n'
p50432
sS'cpp_type'
p50433
S'VariableName'
p50434
sS'default'
p50435
g3
sS'name'
p50436
S'variable'
p50437
sS'required'
p50438
I01
sS'group_name'
p50439
NsasS'name'
p50440
S'/UserObjects/PointValue'
p50441
sa(dp50442
S'description'
p50443
g3
sS'subblocks'
p50444
NsS'parameters'
p50445
(lp50446
(dp50447
S'description'
p50448
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50449
sS'cpp_type'
p50450
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50451
sS'default'
p50452
g3
sS'name'
p50453
S'control_tags'
p50454
sS'required'
p50455
I00
sS'group_name'
p50456
S'Advanced'
p50457
sa(dp50458
S'description'
p50459
S'The default value\n'
p50460
sS'cpp_type'
p50461
S'double'
p50462
sS'default'
p50463
g3
sS'name'
p50464
S'default'
p50465
sS'required'
p50466
I00
sS'group_name'
p50467
Nsa(dp50468
S'description'
p50469
S'Set the enabled status of the MooseObject.\n'
p50470
sS'cpp_type'
p50471
S'bool'
p50472
sS'default'
p50473
S'1'
p50474
sS'name'
p50475
S'enable'
p50476
sS'required'
p50477
I00
sS'group_name'
p50478
S'Advanced'
p50479
sa(dp50480
S'name'
p50481
S'execute_on'
p50482
sS'cpp_type'
p50483
S'MultiMooseEnum'
p50484
sS'default'
p50485
S'TIMESTEP_END'
p50486
sS'description'
p50487
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50488
sS'required'
p50489
I00
sS'options'
p50490
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50491
sS'group_name'
p50492
Nsa(dp50493
S'description'
p50494
S'Initialize the old postprocessor value with the default value\n'
p50495
sS'cpp_type'
p50496
S'bool'
p50497
sS'default'
p50498
S'1'
p50499
sS'name'
p50500
S'initialize_old'
p50501
sS'required'
p50502
I00
sS'group_name'
p50503
Nsa(dp50504
S'description'
p50505
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50506
sS'cpp_type'
p50507
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50508
sS'default'
p50509
g3
sS'name'
p50510
S'outputs'
p50511
sS'required'
p50512
I00
sS'group_name'
p50513
S'Advanced'
p50514
sa(dp50515
S'description'
p50516
g3
sS'cpp_type'
p50517
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50518
sS'default'
p50519
S'Receiver'
p50520
sS'name'
p50521
S'type'
p50522
sS'required'
p50523
I00
sS'group_name'
p50524
Nsa(dp50525
S'description'
p50526
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50527
sS'cpp_type'
p50528
S'bool'
p50529
sS'default'
p50530
S'0'
p50531
sS'name'
p50532
S'use_displaced_mesh'
p50533
sS'required'
p50534
I00
sS'group_name'
p50535
S'Advanced'
p50536
sasS'name'
p50537
S'/UserObjects/Receiver'
p50538
sa(dp50539
S'description'
p50540
g3
sS'subblocks'
p50541
NsS'parameters'
p50542
(lp50543
(dp50544
S'description'
p50545
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50546
sS'cpp_type'
p50547
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50548
sS'default'
p50549
g3
sS'name'
p50550
S'control_tags'
p50551
sS'required'
p50552
I00
sS'group_name'
p50553
S'Advanced'
p50554
sa(dp50555
S'description'
p50556
S'Set the enabled status of the MooseObject.\n'
p50557
sS'cpp_type'
p50558
S'bool'
p50559
sS'default'
p50560
S'1'
p50561
sS'name'
p50562
S'enable'
p50563
sS'required'
p50564
I00
sS'group_name'
p50565
S'Advanced'
p50566
sa(dp50567
S'name'
p50568
S'execute_on'
p50569
sS'cpp_type'
p50570
S'MultiMooseEnum'
p50571
sS'default'
p50572
S'TIMESTEP_END'
p50573
sS'description'
p50574
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50575
sS'required'
p50576
I00
sS'options'
p50577
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50578
sS'group_name'
p50579
Nsa(dp50580
S'description'
p50581
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50582
sS'cpp_type'
p50583
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50584
sS'default'
p50585
g3
sS'name'
p50586
S'outputs'
p50587
sS'required'
p50588
I00
sS'group_name'
p50589
S'Advanced'
p50590
sa(dp50591
S'description'
p50592
g3
sS'cpp_type'
p50593
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50594
sS'default'
p50595
S'RelativeSolutionDifferenceNorm'
p50596
sS'name'
p50597
S'type'
p50598
sS'required'
p50599
I00
sS'group_name'
p50600
Nsa(dp50601
S'description'
p50602
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50603
sS'cpp_type'
p50604
S'bool'
p50605
sS'default'
p50606
S'0'
p50607
sS'name'
p50608
S'use_displaced_mesh'
p50609
sS'required'
p50610
I00
sS'group_name'
p50611
S'Advanced'
p50612
sasS'name'
p50613
S'/UserObjects/RelativeSolutionDifferenceNorm'
p50614
sa(dp50615
S'description'
p50616
g3
sS'subblocks'
p50617
NsS'parameters'
p50618
(lp50619
(dp50620
S'description'
p50621
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50622
sS'cpp_type'
p50623
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50624
sS'default'
p50625
g3
sS'name'
p50626
S'control_tags'
p50627
sS'required'
p50628
I00
sS'group_name'
p50629
S'Advanced'
p50630
sa(dp50631
S'description'
p50632
S'Set the enabled status of the MooseObject.\n'
p50633
sS'cpp_type'
p50634
S'bool'
p50635
sS'default'
p50636
S'1'
p50637
sS'name'
p50638
S'enable'
p50639
sS'required'
p50640
I00
sS'group_name'
p50641
S'Advanced'
p50642
sa(dp50643
S'name'
p50644
S'execute_on'
p50645
sS'cpp_type'
p50646
S'MultiMooseEnum'
p50647
sS'default'
p50648
S'TIMESTEP_END'
p50649
sS'description'
p50650
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50651
sS'required'
p50652
I00
sS'options'
p50653
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50654
sS'group_name'
p50655
Nsa(dp50656
S'description'
p50657
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50658
sS'cpp_type'
p50659
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50660
sS'default'
p50661
g3
sS'name'
p50662
S'outputs'
p50663
sS'required'
p50664
I00
sS'group_name'
p50665
S'Advanced'
p50666
sa(dp50667
S'name'
p50668
S'residual_type'
p50669
sS'cpp_type'
p50670
S'MooseEnum'
p50671
sS'default'
p50672
S'FINAL'
p50673
sS'description'
p50674
S'Type of residual to be reported.  Choices are: FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET\n'
p50675
sS'required'
p50676
I00
sS'options'
p50677
S'FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET'
p50678
sS'group_name'
p50679
Nsa(dp50680
S'description'
p50681
g3
sS'cpp_type'
p50682
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50683
sS'default'
p50684
S'Residual'
p50685
sS'name'
p50686
S'type'
p50687
sS'required'
p50688
I00
sS'group_name'
p50689
Nsa(dp50690
S'description'
p50691
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50692
sS'cpp_type'
p50693
S'bool'
p50694
sS'default'
p50695
S'0'
p50696
sS'name'
p50697
S'use_displaced_mesh'
p50698
sS'required'
p50699
I00
sS'group_name'
p50700
S'Advanced'
p50701
sasS'name'
p50702
S'/UserObjects/Residual'
p50703
sa(dp50704
S'description'
p50705
g3
sS'subblocks'
p50706
NsS'parameters'
p50707
(lp50708
(dp50709
S'description'
p50710
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50711
sS'cpp_type'
p50712
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50713
sS'default'
p50714
g3
sS'name'
p50715
S'control_tags'
p50716
sS'required'
p50717
I00
sS'group_name'
p50718
S'Advanced'
p50719
sa(dp50720
S'description'
p50721
S'Set the enabled status of the MooseObject.\n'
p50722
sS'cpp_type'
p50723
S'bool'
p50724
sS'default'
p50725
S'1'
p50726
sS'name'
p50727
S'enable'
p50728
sS'required'
p50729
I00
sS'group_name'
p50730
S'Advanced'
p50731
sa(dp50732
S'name'
p50733
S'execute_on'
p50734
sS'cpp_type'
p50735
S'MultiMooseEnum'
p50736
sS'default'
p50737
S'TIMESTEP_END'
p50738
sS'description'
p50739
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50740
sS'required'
p50741
I00
sS'options'
p50742
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50743
sS'group_name'
p50744
Nsa(dp50745
S'description'
p50746
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50747
sS'cpp_type'
p50748
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50749
sS'default'
p50750
g3
sS'name'
p50751
S'outputs'
p50752
sS'required'
p50753
I00
sS'group_name'
p50754
S'Advanced'
p50755
sa(dp50756
S'name'
p50757
S'time_type'
p50758
sS'cpp_type'
p50759
S'MooseEnum'
p50760
sS'default'
p50761
g3
sS'description'
p50762
S'Whether to output the total elapsed or just the active time\n'
p50763
sS'required'
p50764
I01
sS'options'
p50765
S'alive active'
p50766
sS'group_name'
p50767
Nsa(dp50768
S'description'
p50769
g3
sS'cpp_type'
p50770
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50771
sS'default'
p50772
S'RunTime'
p50773
sS'name'
p50774
S'type'
p50775
sS'required'
p50776
I00
sS'group_name'
p50777
Nsa(dp50778
S'description'
p50779
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50780
sS'cpp_type'
p50781
S'bool'
p50782
sS'default'
p50783
S'0'
p50784
sS'name'
p50785
S'use_displaced_mesh'
p50786
sS'required'
p50787
I00
sS'group_name'
p50788
S'Advanced'
p50789
sasS'name'
p50790
S'/UserObjects/RunTime'
p50791
sa(dp50792
S'description'
p50793
g3
sS'subblocks'
p50794
NsS'parameters'
p50795
(lp50796
(dp50797
S'description'
p50798
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50799
sS'cpp_type'
p50800
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50801
sS'default'
p50802
g3
sS'name'
p50803
S'control_tags'
p50804
sS'required'
p50805
I00
sS'group_name'
p50806
S'Advanced'
p50807
sa(dp50808
S'description'
p50809
S'Set the enabled status of the MooseObject.\n'
p50810
sS'cpp_type'
p50811
S'bool'
p50812
sS'default'
p50813
S'1'
p50814
sS'name'
p50815
S'enable'
p50816
sS'required'
p50817
I00
sS'group_name'
p50818
S'Advanced'
p50819
sa(dp50820
S'name'
p50821
S'execute_on'
p50822
sS'cpp_type'
p50823
S'MultiMooseEnum'
p50824
sS'default'
p50825
S'TIMESTEP_END'
p50826
sS'description'
p50827
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50828
sS'required'
p50829
I00
sS'options'
p50830
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50831
sS'group_name'
p50832
Nsa(dp50833
S'description'
p50834
S'The analytic solution to compare against\n'
p50835
sS'cpp_type'
p50836
S'FunctionName'
p50837
sS'default'
p50838
g3
sS'name'
p50839
S'function'
p50840
sS'required'
p50841
I01
sS'group_name'
p50842
Nsa(dp50843
S'description'
p50844
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50845
sS'cpp_type'
p50846
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50847
sS'default'
p50848
g3
sS'name'
p50849
S'outputs'
p50850
sS'required'
p50851
I00
sS'group_name'
p50852
S'Advanced'
p50853
sa(dp50854
S'description'
p50855
g3
sS'cpp_type'
p50856
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50857
sS'default'
p50858
S'ScalarL2Error'
p50859
sS'name'
p50860
S'type'
p50861
sS'required'
p50862
I00
sS'group_name'
p50863
Nsa(dp50864
S'description'
p50865
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50866
sS'cpp_type'
p50867
S'bool'
p50868
sS'default'
p50869
S'0'
p50870
sS'name'
p50871
S'use_displaced_mesh'
p50872
sS'required'
p50873
I00
sS'group_name'
p50874
S'Advanced'
p50875
sa(dp50876
S'description'
p50877
S'The name of the scalar variable\n'
p50878
sS'cpp_type'
p50879
S'VariableName'
p50880
sS'default'
p50881
g3
sS'name'
p50882
S'variable'
p50883
sS'required'
p50884
I01
sS'group_name'
p50885
NsasS'name'
p50886
S'/UserObjects/ScalarL2Error'
p50887
sa(dp50888
S'description'
p50889
g3
sS'subblocks'
p50890
NsS'parameters'
p50891
(lp50892
(dp50893
S'description'
p50894
S'Component to output for this variable\n'
p50895
sS'cpp_type'
p50896
S'unsigned int'
p50897
sS'default'
p50898
S'0'
p50899
sS'name'
p50900
S'component'
p50901
sS'required'
p50902
I00
sS'group_name'
p50903
Nsa(dp50904
S'description'
p50905
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50906
sS'cpp_type'
p50907
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50908
sS'default'
p50909
g3
sS'name'
p50910
S'control_tags'
p50911
sS'required'
p50912
I00
sS'group_name'
p50913
S'Advanced'
p50914
sa(dp50915
S'description'
p50916
S'Set the enabled status of the MooseObject.\n'
p50917
sS'cpp_type'
p50918
S'bool'
p50919
sS'default'
p50920
S'1'
p50921
sS'name'
p50922
S'enable'
p50923
sS'required'
p50924
I00
sS'group_name'
p50925
S'Advanced'
p50926
sa(dp50927
S'name'
p50928
S'execute_on'
p50929
sS'cpp_type'
p50930
S'MultiMooseEnum'
p50931
sS'default'
p50932
S'TIMESTEP_END'
p50933
sS'description'
p50934
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50935
sS'required'
p50936
I00
sS'options'
p50937
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50938
sS'group_name'
p50939
Nsa(dp50940
S'description'
p50941
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50942
sS'cpp_type'
p50943
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50944
sS'default'
p50945
g3
sS'name'
p50946
S'outputs'
p50947
sS'required'
p50948
I00
sS'group_name'
p50949
S'Advanced'
p50950
sa(dp50951
S'description'
p50952
g3
sS'cpp_type'
p50953
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50954
sS'default'
p50955
S'ScalarVariable'
p50956
sS'name'
p50957
S'type'
p50958
sS'required'
p50959
I00
sS'group_name'
p50960
Nsa(dp50961
S'description'
p50962
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50963
sS'cpp_type'
p50964
S'bool'
p50965
sS'default'
p50966
S'0'
p50967
sS'name'
p50968
S'use_displaced_mesh'
p50969
sS'required'
p50970
I00
sS'group_name'
p50971
S'Advanced'
p50972
sa(dp50973
S'description'
p50974
S'Name of the variable\n'
p50975
sS'cpp_type'
p50976
S'VariableName'
p50977
sS'default'
p50978
g3
sS'name'
p50979
S'variable'
p50980
sS'required'
p50981
I01
sS'group_name'
p50982
NsasS'name'
p50983
S'/UserObjects/ScalarVariable'
p50984
sa(dp50985
S'description'
p50986
g3
sS'subblocks'
p50987
NsS'parameters'
p50988
(lp50989
(dp50990
S'description'
p50991
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50992
sS'cpp_type'
p50993
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50994
sS'default'
p50995
g3
sS'name'
p50996
S'control_tags'
p50997
sS'required'
p50998
I00
sS'group_name'
p50999
S'Advanced'
p51000
sa(dp51001
S'description'
p51002
S'Set the enabled status of the MooseObject.\n'
p51003
sS'cpp_type'
p51004
S'bool'
p51005
sS'default'
p51006
S'1'
p51007
sS'name'
p51008
S'enable'
p51009
sS'required'
p51010
I00
sS'group_name'
p51011
S'Advanced'
p51012
sa(dp51013
S'name'
p51014
S'execute_on'
p51015
sS'cpp_type'
p51016
S'MultiMooseEnum'
p51017
sS'default'
p51018
S'TIMESTEP_END'
p51019
sS'description'
p51020
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51021
sS'required'
p51022
I00
sS'options'
p51023
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51024
sS'group_name'
p51025
Nsa(dp51026
S'description'
p51027
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p51028
sS'cpp_type'
p51029
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p51030
sS'default'
p51031
g3
sS'name'
p51032
S'outputs'
p51033
sS'required'
p51034
I00
sS'group_name'
p51035
S'Advanced'
p51036
sa(dp51037
S'description'
p51038
S'The scaling factor\n'
p51039
sS'cpp_type'
p51040
S'double'
p51041
sS'default'
p51042
S'1'
p51043
sS'name'
p51044
S'scaling_factor'
p51045
sS'required'
p51046
I00
sS'group_name'
p51047
Nsa(dp51048
S'description'
p51049
g3
sS'cpp_type'
p51050
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51051
sS'default'
p51052
S'ScalePostprocessor'
p51053
sS'name'
p51054
S'type'
p51055
sS'required'
p51056
I00
sS'group_name'
p51057
Nsa(dp51058
S'description'
p51059
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51060
sS'cpp_type'
p51061
S'bool'
p51062
sS'default'
p51063
S'0'
p51064
sS'name'
p51065
S'use_displaced_mesh'
p51066
sS'required'
p51067
I00
sS'group_name'
p51068
S'Advanced'
p51069
sa(dp51070
S'description'
p51071
S'The postprocessor to be scaled\n'
p51072
sS'cpp_type'
p51073
S'PostprocessorName'
p51074
sS'default'
p51075
g3
sS'name'
p51076
S'value'
p51077
sS'required'
p51078
I01
sS'group_name'
p51079
NsasS'name'
p51080
S'/UserObjects/ScalePostprocessor'
p51081
sa(dp51082
S'description'
p51083
g3
sS'subblocks'
p51084
NsS'parameters'
p51085
(lp51086
(dp51087
S'description'
p51088
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p51089
sS'cpp_type'
p51090
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p51091
sS'default'
p51092
g3
sS'name'
p51093
S'boundary'
p51094
sS'required'
p51095
I01
sS'group_name'
p51096
Nsa(dp51097
S'description'
p51098
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51099
sS'cpp_type'
p51100
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51101
sS'default'
p51102
g3
sS'name'
p51103
S'control_tags'
p51104
sS'required'
p51105
I00
sS'group_name'
p51106
S'Advanced'
p51107
sa(dp51108
S'description'
p51109
S'Set the enabled status of the MooseObject.\n'
p51110
sS'cpp_type'
p51111
S'bool'
p51112
sS'default'
p51113
S'1'
p51114
sS'name'
p51115
S'enable'
p51116
sS'required'
p51117
I00
sS'group_name'
p51118
S'Advanced'
p51119
sa(dp51120
S'name'
p51121
S'execute_on'
p51122
sS'cpp_type'
p51123
S'MultiMooseEnum'
p51124
sS'default'
p51125
S'TIMESTEP_END'
p51126
sS'description'
p51127
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51128
sS'required'
p51129
I00
sS'options'
p51130
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51131
sS'group_name'
p51132
Nsa(dp51133
S'description'
p51134
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p51135
sS'cpp_type'
p51136
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p51137
sS'default'
p51138
g3
sS'name'
p51139
S'outputs'
p51140
sS'required'
p51141
I00
sS'group_name'
p51142
S'Advanced'
p51143
sa(dp51144
S'description'
p51145
g3
sS'cpp_type'
p51146
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51147
sS'default'
p51148
S'SideAverageValue'
p51149
sS'name'
p51150
S'type'
p51151
sS'required'
p51152
I00
sS'group_name'
p51153
Nsa(dp51154
S'description'
p51155
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51156
sS'cpp_type'
p51157
S'bool'
p51158
sS'default'
p51159
S'0'
p51160
sS'name'
p51161
S'use_displaced_mesh'
p51162
sS'required'
p51163
I00
sS'group_name'
p51164
S'Advanced'
p51165
sa(dp51166
S'description'
p51167
S'The name of the variable that this boundary condition applies to\n'
p51168
sS'cpp_type'
p51169
S'std::vector<VariableName>'
p51170
sS'default'
p51171
g3
sS'name'
p51172
S'variable'
p51173
sS'required'
p51174
I01
sS'group_name'
p51175
NsasS'name'
p51176
S'/UserObjects/SideAverageValue'
p51177
sa(dp51178
S'description'
p51179
g3
sS'subblocks'
p51180
NsS'parameters'
p51181
(lp51182
(dp51183
S'description'
p51184
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p51185
sS'cpp_type'
p51186
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p51187
sS'default'
p51188
g3
sS'name'
p51189
S'boundary'
p51190
sS'required'
p51191
I01
sS'group_name'
p51192
Nsa(dp51193
S'description'
p51194
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51195
sS'cpp_type'
p51196
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51197
sS'default'
p51198
g3
sS'name'
p51199
S'control_tags'
p51200
sS'required'
p51201
I00
sS'group_name'
p51202
S'Advanced'
p51203
sa(dp51204
S'description'
p51205
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p51206
sS'cpp_type'
p51207
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51208
sS'default'
p51209
g3
sS'name'
p51210
S'diffusivity'
p51211
sS'required'
p51212
I01
sS'group_name'
p51213
Nsa(dp51214
S'description'
p51215
S'Set the enabled status of the MooseObject.\n'
p51216
sS'cpp_type'
p51217
S'bool'
p51218
sS'default'
p51219
S'1'
p51220
sS'name'
p51221
S'enable'
p51222
sS'required'
p51223
I00
sS'group_name'
p51224
S'Advanced'
p51225
sa(dp51226
S'name'
p51227
S'execute_on'
p51228
sS'cpp_type'
p51229
S'MultiMooseEnum'
p51230
sS'default'
p51231
S'TIMESTEP_END'
p51232
sS'description'
p51233
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51234
sS'required'
p51235
I00
sS'options'
p51236
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51237
sS'group_name'
p51238
Nsa(dp51239
S'description'
p51240
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p51241
sS'cpp_type'
p51242
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p51243
sS'default'
p51244
g3
sS'name'
p51245
S'outputs'
p51246
sS'required'
p51247
I00
sS'group_name'
p51248
S'Advanced'
p51249
sa(dp51250
S'description'
p51251
g3
sS'cpp_type'
p51252
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51253
sS'default'
p51254
S'SideFluxAverage'
p51255
sS'name'
p51256
S'type'
p51257
sS'required'
p51258
I00
sS'group_name'
p51259
Nsa(dp51260
S'description'
p51261
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51262
sS'cpp_type'
p51263
S'bool'
p51264
sS'default'
p51265
S'0'
p51266
sS'name'
p51267
S'use_displaced_mesh'
p51268
sS'required'
p51269
I00
sS'group_name'
p51270
S'Advanced'
p51271
sa(dp51272
S'description'
p51273
S'The name of the variable that this boundary condition applies to\n'
p51274
sS'cpp_type'
p51275
S'std::vector<VariableName>'
p51276
sS'default'
p51277
g3
sS'name'
p51278
S'variable'
p51279
sS'required'
p51280
I01
sS'group_name'
p51281
NsasS'name'
p51282
S'/UserObjects/SideFluxAverage'
p51283
sa(dp51284
S'description'
p51285
g3
sS'subblocks'
p51286
NsS'parameters'
p51287
(lp51288
(dp51289
S'description'
p51290
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p51291
sS'cpp_type'
p51292
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p51293
sS'default'
p51294
g3
sS'name'
p51295
S'boundary'
p51296
sS'required'
p51297
I01
sS'group_name'
p51298
Nsa(dp51299
S'description'
p51300
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51301
sS'cpp_type'
p51302
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51303
sS'default'
p51304
g3
sS'name'
p51305
S'control_tags'
p51306
sS'required'
p51307
I00
sS'group_name'
p51308
S'Advanced'
p51309
sa(dp51310
S'description'
p51311
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p51312
sS'cpp_type'
p51313
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51314
sS'default'
p51315
g3
sS'name'
p51316
S'diffusivity'
p51317
sS'required'
p51318
I01
sS'group_name'
p51319
Nsa(dp51320
S'description'
p51321
S'Set the enabled status of the MooseObject.\n'
p51322
sS'cpp_type'
p51323
S'bool'
p51324
sS'default'
p51325
S'1'
p51326
sS'name'
p51327
S'enable'
p51328
sS'required'
p51329
I00
sS'group_name'
p51330
S'Advanced'
p51331
sa(dp51332
S'name'
p51333
S'execute_on'
p51334
sS'cpp_type'
p51335
S'MultiMooseEnum'
p51336
sS'default'
p51337
S'TIMESTEP_END'
p51338
sS'description'
p51339
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51340
sS'required'
p51341
I00
sS'options'
p51342
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51343
sS'group_name'
p51344
Nsa(dp51345
S'description'
p51346
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p51347
sS'cpp_type'
p51348
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p51349
sS'default'
p51350
g3
sS'name'
p51351
S'outputs'
p51352
sS'required'
p51353
I00
sS'group_name'
p51354
S'Advanced'
p51355
sa(dp51356
S'description'
p51357
g3
sS'cpp_type'
p51358
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51359
sS'default'
p51360
S'SideFluxIntegral'
p51361
sS'name'
p51362
S'type'
p51363
sS'required'
p51364
I00
sS'group_name'
p51365
Nsa(dp51366
S'description'
p51367
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51368
sS'cpp_type'
p51369
S'bool'
p51370
sS'default'
p51371
S'0'
p51372
sS'name'
p51373
S'use_displaced_mesh'
p51374
sS'required'
p51375
I00
sS'group_name'
p51376
S'Advanced'
p51377
sa(dp51378
S'description'
p51379
S'The name of the variable that this boundary condition applies to\n'
p51380
sS'cpp_type'
p51381
S'std::vector<VariableName>'
p51382
sS'default'
p51383
g3
sS'name'
p51384
S'variable'
p51385
sS'required'
p51386
I01
sS'group_name'
p51387
NsasS'name'
p51388
S'/UserObjects/SideFluxIntegral'
p51389
sa(dp51390
S'description'
p51391
g3
sS'subblocks'
p51392
NsS'parameters'
p51393
(lp51394
(dp51395
S'description'
p51396
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p51397
sS'cpp_type'
p51398
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p51399
sS'default'
p51400
g3
sS'name'
p51401
S'boundary'
p51402
sS'required'
p51403
I01
sS'group_name'
p51404
Nsa(dp51405
S'description'
p51406
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51407
sS'cpp_type'
p51408
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51409
sS'default'
p51410
g3
sS'name'
p51411
S'control_tags'
p51412
sS'required'
p51413
I00
sS'group_name'
p51414
S'Advanced'
p51415
sa(dp51416
S'description'
p51417
S'Set the enabled status of the MooseObject.\n'
p51418
sS'cpp_type'
p51419
S'bool'
p51420
sS'default'
p51421
S'1'
p51422
sS'name'
p51423
S'enable'
p51424
sS'required'
p51425
I00
sS'group_name'
p51426
S'Advanced'
p51427
sa(dp51428
S'name'
p51429
S'execute_on'
p51430
sS'cpp_type'
p51431
S'MultiMooseEnum'
p51432
sS'default'
p51433
S'TIMESTEP_END'
p51434
sS'description'
p51435
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51436
sS'required'
p51437
I00
sS'options'
p51438
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51439
sS'group_name'
p51440
Nsa(dp51441
S'description'
p51442
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p51443
sS'cpp_type'
p51444
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p51445
sS'default'
p51446
g3
sS'name'
p51447
S'outputs'
p51448
sS'required'
p51449
I00
sS'group_name'
p51450
S'Advanced'
p51451
sa(dp51452
S'description'
p51453
g3
sS'cpp_type'
p51454
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51455
sS'default'
p51456
S'SideIntegralVariablePostprocessor'
p51457
sS'name'
p51458
S'type'
p51459
sS'required'
p51460
I00
sS'group_name'
p51461
Nsa(dp51462
S'description'
p51463
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51464
sS'cpp_type'
p51465
S'bool'
p51466
sS'default'
p51467
S'0'
p51468
sS'name'
p51469
S'use_displaced_mesh'
p51470
sS'required'
p51471
I00
sS'group_name'
p51472
S'Advanced'
p51473
sa(dp51474
S'description'
p51475
S'The name of the variable that this boundary condition applies to\n'
p51476
sS'cpp_type'
p51477
S'std::vector<VariableName>'
p51478
sS'default'
p51479
g3
sS'name'
p51480
S'variable'
p51481
sS'required'
p51482
I01
sS'group_name'
p51483
NsasS'name'
p51484
S'/UserObjects/SideIntegralVariablePostprocessor'
p51485
sa(dp51486
S'description'
p51487
g3
sS'subblocks'
p51488
NsS'parameters'
p51489
(lp51490
(dp51491
S'description'
p51492
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51493
sS'cpp_type'
p51494
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51495
sS'default'
p51496
g3
sS'name'
p51497
S'control_tags'
p51498
sS'required'
p51499
I00
sS'group_name'
p51500
S'Advanced'
p51501
sa(dp51502
S'description'
p51503
S'Set the enabled status of the MooseObject.\n'
p51504
sS'cpp_type'
p51505
S'bool'
p51506
sS'default'
p51507
S'1'
p51508
sS'name'
p51509
S'enable'
p51510
sS'required'
p51511
I00
sS'group_name'
p51512
S'Advanced'
p51513
sa(dp51514
S'description'
p51515
S'The name of the file holding the equation system info in xda format (xda only).\n'
p51516
sS'cpp_type'
p51517
S'FileName'
p51518
sS'default'
p51519
S'<not supplied>'
p51520
sS'name'
p51521
S'es'
p51522
sS'required'
p51523
I00
sS'group_name'
p51524
Nsa(dp51525
S'name'
p51526
S'execute_on'
p51527
sS'cpp_type'
p51528
S'MultiMooseEnum'
p51529
sS'default'
p51530
S'TIMESTEP_END'
p51531
sS'description'
p51532
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51533
sS'required'
p51534
I00
sS'options'
p51535
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51536
sS'group_name'
p51537
Nsa(dp51538
S'description'
p51539
S'The name of the mesh file (must be xda or exodusII file).\n'
p51540
sS'cpp_type'
p51541
S'MeshFileName'
p51542
sS'default'
p51543
g3
sS'name'
p51544
S'mesh'
p51545
sS'required'
p51546
I01
sS'group_name'
p51547
Nsa(dp51548
S'description'
p51549
S'Anticlockwise rotation angle (in degrees) to use for rotation about rotation0_vector.\n'
p51550
sS'cpp_type'
p51551
S'double'
p51552
sS'default'
p51553
S'0'
p51554
sS'name'
p51555
S'rotation0_angle'
p51556
sS'required'
p51557
I00
sS'group_name'
p51558
Nsa(dp51559
S'description'
p51560
S'Vector about which to rotate points of the simulation.\n'
p51561
sS'cpp_type'
p51562
S'libMesh::VectorValue<double>'
p51563
sS'default'
p51564
S'0 0 1'
p51565
sS'name'
p51566
S'rotation0_vector'
p51567
sS'required'
p51568
I00
sS'group_name'
p51569
Nsa(dp51570
S'description'
p51571
S'Anticlockwise rotation angle (in degrees) to use for rotation about rotation1_vector.\n'
p51572
sS'cpp_type'
p51573
S'double'
p51574
sS'default'
p51575
S'0'
p51576
sS'name'
p51577
S'rotation1_angle'
p51578
sS'required'
p51579
I00
sS'group_name'
p51580
Nsa(dp51581
S'description'
p51582
S'Vector about which to rotate points of the simulation.\n'
p51583
sS'cpp_type'
p51584
S'libMesh::VectorValue<double>'
p51585
sS'default'
p51586
S'0 0 1'
p51587
sS'name'
p51588
S'rotation1_vector'
p51589
sS'required'
p51590
I00
sS'group_name'
p51591
Nsa(dp51592
S'description'
p51593
S'Scale factor for points in the simulation\n'
p51594
sS'cpp_type'
p51595
S'std::__1::vector<double, std::__1::allocator<double> >'
p51596
sS'default'
p51597
S'1 1 1'
p51598
sS'name'
p51599
S'scale'
p51600
sS'required'
p51601
I00
sS'group_name'
p51602
Nsa(dp51603
S'description'
p51604
S'Scale multiplying factor for points in the simulation\n'
p51605
sS'cpp_type'
p51606
S'std::__1::vector<double, std::__1::allocator<double> >'
p51607
sS'default'
p51608
S'1 1 1'
p51609
sS'name'
p51610
S'scale_multiplier'
p51611
sS'required'
p51612
I00
sS'group_name'
p51613
Nsa(dp51614
S'description'
p51615
S'The name of the system to pull values out of (xda only).\n'
p51616
sS'cpp_type'
p51617
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51618
sS'default'
p51619
S'nl0'
p51620
sS'name'
p51621
S'system'
p51622
sS'required'
p51623
I00
sS'group_name'
p51624
Nsa(dp51625
S'description'
p51626
S'The name of the nodal and elemental variables from the file you want to use for values\n'
p51627
sS'cpp_type'
p51628
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51629
sS'default'
p51630
g3
sS'name'
p51631
S'system_variables'
p51632
sS'required'
p51633
I00
sS'group_name'
p51634
Nsa(dp51635
S'description'
p51636
S'Index of the single timestep used or "LATEST" for the last timestep (exodusII only).  If not supplied, time interpolation will occur.\n'
p51637
sS'cpp_type'
p51638
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51639
sS'default'
p51640
g3
sS'name'
p51641
S'timestep'
p51642
sS'required'
p51643
I00
sS'group_name'
p51644
Nsa(dp51645
S'name'
p51646
S'transformation_order'
p51647
sS'cpp_type'
p51648
S'MultiMooseEnum'
p51649
sS'default'
p51650
S'SCALE TRANSLATION'
p51651
sS'description'
p51652
S"The order to perform the operations in.  Define R0 to be the rotation matrix encoded by rotation0_vector and rotation0_angle.  Similarly for R1.  Denote the scale by s, the scale_multiplier by m, and the translation by t.  Then, given a point x in the simulation, if transformation_order = 'rotation0 scale_multiplier translation scale rotation1' then form p = R1*(R0*x*m - t)/s.  Then the values provided by the SolutionUserObject at point x in the simulation are the variable values at point p in the mesh.\n"
p51653
sS'required'
p51654
I00
sS'options'
p51655
S'rotation0 translation scale rotation1 scale_multiplier'
p51656
sS'group_name'
p51657
Nsa(dp51658
S'description'
p51659
S'Translation factors for x,y,z coordinates of the simulation\n'
p51660
sS'cpp_type'
p51661
S'std::__1::vector<double, std::__1::allocator<double> >'
p51662
sS'default'
p51663
S'0 0 0'
p51664
sS'name'
p51665
S'translation'
p51666
sS'required'
p51667
I00
sS'group_name'
p51668
Nsa(dp51669
S'description'
p51670
g3
sS'cpp_type'
p51671
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51672
sS'default'
p51673
S'SolutionUserObject'
p51674
sS'name'
p51675
S'type'
p51676
sS'required'
p51677
I00
sS'group_name'
p51678
Nsa(dp51679
S'description'
p51680
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51681
sS'cpp_type'
p51682
S'bool'
p51683
sS'default'
p51684
S'0'
p51685
sS'name'
p51686
S'use_displaced_mesh'
p51687
sS'required'
p51688
I00
sS'group_name'
p51689
S'Advanced'
p51690
sasS'name'
p51691
S'/UserObjects/SolutionUserObject'
p51692
sa(dp51693
S'description'
p51694
g3
sS'subblocks'
p51695
NsS'parameters'
p51696
(lp51697
(dp51698
S'description'
p51699
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51700
sS'cpp_type'
p51701
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51702
sS'default'
p51703
g3
sS'name'
p51704
S'control_tags'
p51705
sS'required'
p51706
I00
sS'group_name'
p51707
S'Advanced'
p51708
sa(dp51709
S'description'
p51710
S'Set the enabled status of the MooseObject.\n'
p51711
sS'cpp_type'
p51712
S'bool'
p51713
sS'default'
p51714
S'1'
p51715
sS'name'
p51716
S'enable'
p51717
sS'required'
p51718
I00
sS'group_name'
p51719
S'Advanced'
p51720
sa(dp51721
S'name'
p51722
S'execute_on'
p51723
sS'cpp_type'
p51724
S'MultiMooseEnum'
p51725
sS'default'
p51726
S'TIMESTEP_END'
p51727
sS'description'
p51728
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51729
sS'required'
p51730
I00
sS'options'
p51731
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51732
sS'group_name'
p51733
Nsa(dp51734
S'description'
p51735
S'FParser expression to process Postprocessor values into a boolean value. Termination of the simulation occurs when this returns true.\n'
p51736
sS'cpp_type'
p51737
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51738
sS'default'
p51739
g3
sS'name'
p51740
S'expression'
p51741
sS'required'
p51742
I01
sS'group_name'
p51743
Nsa(dp51744
S'description'
p51745
g3
sS'cpp_type'
p51746
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51747
sS'default'
p51748
S'Terminator'
p51749
sS'name'
p51750
S'type'
p51751
sS'required'
p51752
I00
sS'group_name'
p51753
Nsa(dp51754
S'description'
p51755
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51756
sS'cpp_type'
p51757
S'bool'
p51758
sS'default'
p51759
S'0'
p51760
sS'name'
p51761
S'use_displaced_mesh'
p51762
sS'required'
p51763
I00
sS'group_name'
p51764
S'Advanced'
p51765
sasS'name'
p51766
S'/UserObjects/Terminator'
p51767
sa(dp51768
S'description'
p51769
S'A postprocessor for reporting the extreme value of another postprocessor over time.\n'
p51770
sS'subblocks'
p51771
NsS'parameters'
p51772
(lp51773
(dp51774
S'description'
p51775
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51776
sS'cpp_type'
p51777
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51778
sS'default'
p51779
g3
sS'name'
p51780
S'control_tags'
p51781
sS'required'
p51782
I00
sS'group_name'
p51783
S'Advanced'
p51784
sa(dp51785
S'description'
p51786
S'Set the enabled status of the MooseObject.\n'
p51787
sS'cpp_type'
p51788
S'bool'
p51789
sS'default'
p51790
S'1'
p51791
sS'name'
p51792
S'enable'
p51793
sS'required'
p51794
I00
sS'group_name'
p51795
S'Advanced'
p51796
sa(dp51797
S'name'
p51798
S'execute_on'
p51799
sS'cpp_type'
p51800
S'MultiMooseEnum'
p51801
sS'default'
p51802
S'TIMESTEP_END'
p51803
sS'description'
p51804
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51805
sS'required'
p51806
I00
sS'options'
p51807
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51808
sS'group_name'
p51809
Nsa(dp51810
S'description'
p51811
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p51812
sS'cpp_type'
p51813
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p51814
sS'default'
p51815
g3
sS'name'
p51816
S'outputs'
p51817
sS'required'
p51818
I00
sS'group_name'
p51819
S'Advanced'
p51820
sa(dp51821
S'description'
p51822
S'The name of the postprocessor used for reporting time extreme values\n'
p51823
sS'cpp_type'
p51824
S'PostprocessorName'
p51825
sS'default'
p51826
g3
sS'name'
p51827
S'postprocessor'
p51828
sS'required'
p51829
I01
sS'group_name'
p51830
Nsa(dp51831
S'description'
p51832
g3
sS'cpp_type'
p51833
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51834
sS'default'
p51835
S'TimeExtremeValue'
p51836
sS'name'
p51837
S'type'
p51838
sS'required'
p51839
I00
sS'group_name'
p51840
Nsa(dp51841
S'description'
p51842
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51843
sS'cpp_type'
p51844
S'bool'
p51845
sS'default'
p51846
S'0'
p51847
sS'name'
p51848
S'use_displaced_mesh'
p51849
sS'required'
p51850
I00
sS'group_name'
p51851
S'Advanced'
p51852
sa(dp51853
S'name'
p51854
S'value_type'
p51855
sS'cpp_type'
p51856
S'MooseEnum'
p51857
sS'default'
p51858
S'max'
p51859
sS'description'
p51860
S"Type of extreme value to return.'max' returns the maximum value.'min' returns the minimum value.'abs_max' returns the maximum absolute value.'abs_min' returns the minimum absolute value.\n"
p51861
sS'required'
p51862
I00
sS'options'
p51863
S'max min abs_max abs_min'
p51864
sS'group_name'
p51865
NsasS'name'
p51866
S'/UserObjects/TimeExtremeValue'
p51867
sa(dp51868
S'description'
p51869
g3
sS'subblocks'
p51870
NsS'parameters'
p51871
(lp51872
(dp51873
S'description'
p51874
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51875
sS'cpp_type'
p51876
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51877
sS'default'
p51878
g3
sS'name'
p51879
S'control_tags'
p51880
sS'required'
p51881
I00
sS'group_name'
p51882
S'Advanced'
p51883
sa(dp51884
S'description'
p51885
S'Set the enabled status of the MooseObject.\n'
p51886
sS'cpp_type'
p51887
S'bool'
p51888
sS'default'
p51889
S'1'
p51890
sS'name'
p51891
S'enable'
p51892
sS'required'
p51893
I00
sS'group_name'
p51894
S'Advanced'
p51895
sa(dp51896
S'name'
p51897
S'execute_on'
p51898
sS'cpp_type'
p51899
S'MultiMooseEnum'
p51900
sS'default'
p51901
S'TIMESTEP_END'
p51902
sS'description'
p51903
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51904
sS'required'
p51905
I00
sS'options'
p51906
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51907
sS'group_name'
p51908
Nsa(dp51909
S'description'
p51910
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p51911
sS'cpp_type'
p51912
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p51913
sS'default'
p51914
g3
sS'name'
p51915
S'outputs'
p51916
sS'required'
p51917
I00
sS'group_name'
p51918
S'Advanced'
p51919
sa(dp51920
S'description'
p51921
g3
sS'cpp_type'
p51922
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51923
sS'default'
p51924
S'TimestepSize'
p51925
sS'name'
p51926
S'type'
p51927
sS'required'
p51928
I00
sS'group_name'
p51929
Nsa(dp51930
S'description'
p51931
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51932
sS'cpp_type'
p51933
S'bool'
p51934
sS'default'
p51935
S'0'
p51936
sS'name'
p51937
S'use_displaced_mesh'
p51938
sS'required'
p51939
I00
sS'group_name'
p51940
S'Advanced'
p51941
sasS'name'
p51942
S'/UserObjects/TimestepSize'
p51943
sa(dp51944
S'description'
p51945
g3
sS'subblocks'
p51946
NsS'parameters'
p51947
(lp51948
(dp51949
S'description'
p51950
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51951
sS'cpp_type'
p51952
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51953
sS'default'
p51954
g3
sS'name'
p51955
S'control_tags'
p51956
sS'required'
p51957
I00
sS'group_name'
p51958
S'Advanced'
p51959
sa(dp51960
S'description'
p51961
S'Set the enabled status of the MooseObject.\n'
p51962
sS'cpp_type'
p51963
S'bool'
p51964
sS'default'
p51965
S'1'
p51966
sS'name'
p51967
S'enable'
p51968
sS'required'
p51969
I00
sS'group_name'
p51970
S'Advanced'
p51971
sa(dp51972
S'name'
p51973
S'execute_on'
p51974
sS'cpp_type'
p51975
S'MultiMooseEnum'
p51976
sS'default'
p51977
S'TIMESTEP_END'
p51978
sS'description'
p51979
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51980
sS'required'
p51981
I00
sS'options'
p51982
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51983
sS'group_name'
p51984
Nsa(dp51985
S'description'
p51986
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p51987
sS'cpp_type'
p51988
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p51989
sS'default'
p51990
g3
sS'name'
p51991
S'outputs'
p51992
sS'required'
p51993
I00
sS'group_name'
p51994
S'Advanced'
p51995
sa(dp51996
S'description'
p51997
g3
sS'cpp_type'
p51998
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51999
sS'default'
p52000
S'TotalVariableValue'
p52001
sS'name'
p52002
S'type'
p52003
sS'required'
p52004
I00
sS'group_name'
p52005
Nsa(dp52006
S'description'
p52007
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52008
sS'cpp_type'
p52009
S'bool'
p52010
sS'default'
p52011
S'0'
p52012
sS'name'
p52013
S'use_displaced_mesh'
p52014
sS'required'
p52015
I00
sS'group_name'
p52016
S'Advanced'
p52017
sa(dp52018
S'description'
p52019
S'The name of the postprocessor\n'
p52020
sS'cpp_type'
p52021
S'PostprocessorName'
p52022
sS'default'
p52023
g3
sS'name'
p52024
S'value'
p52025
sS'required'
p52026
I00
sS'group_name'
p52027
NsasS'name'
p52028
S'/UserObjects/TotalVariableValue'
p52029
sa(dp52030
S'description'
p52031
g3
sS'subblocks'
p52032
NsS'parameters'
p52033
(lp52034
(dp52035
S'description'
p52036
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52037
sS'cpp_type'
p52038
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p52039
sS'default'
p52040
g3
sS'name'
p52041
S'block'
p52042
sS'required'
p52043
I00
sS'group_name'
p52044
Nsa(dp52045
S'description'
p52046
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52047
sS'cpp_type'
p52048
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52049
sS'default'
p52050
g3
sS'name'
p52051
S'control_tags'
p52052
sS'required'
p52053
I00
sS'group_name'
p52054
S'Advanced'
p52055
sa(dp52056
S'description'
p52057
S'Set the enabled status of the MooseObject.\n'
p52058
sS'cpp_type'
p52059
S'bool'
p52060
sS'default'
p52061
S'1'
p52062
sS'name'
p52063
S'enable'
p52064
sS'required'
p52065
I00
sS'group_name'
p52066
S'Advanced'
p52067
sa(dp52068
S'name'
p52069
S'execute_on'
p52070
sS'cpp_type'
p52071
S'MultiMooseEnum'
p52072
sS'default'
p52073
S'TIMESTEP_END'
p52074
sS'description'
p52075
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p52076
sS'required'
p52077
I00
sS'options'
p52078
S'none initial linear nonlinear timestep_end timestep_begin custom'
p52079
sS'group_name'
p52080
Nsa(dp52081
S'description'
p52082
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p52083
sS'cpp_type'
p52084
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p52085
sS'default'
p52086
g3
sS'name'
p52087
S'outputs'
p52088
sS'required'
p52089
I00
sS'group_name'
p52090
S'Advanced'
p52091
sa(dp52092
S'description'
p52093
S'The name of the second variable in the inner product (variable, second_variable)\n'
p52094
sS'cpp_type'
p52095
S'std::vector<VariableName>'
p52096
sS'default'
p52097
g3
sS'name'
p52098
S'second_variable'
p52099
sS'required'
p52100
I01
sS'group_name'
p52101
Nsa(dp52102
S'description'
p52103
S'The seed for the master random number generator\n'
p52104
sS'cpp_type'
p52105
S'unsigned int'
p52106
sS'default'
p52107
S'0'
p52108
sS'name'
p52109
S'seed'
p52110
sS'required'
p52111
I00
sS'group_name'
p52112
S'Advanced'
p52113
sa(dp52114
S'description'
p52115
g3
sS'cpp_type'
p52116
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52117
sS'default'
p52118
S'VariableInnerProduct'
p52119
sS'name'
p52120
S'type'
p52121
sS'required'
p52122
I00
sS'group_name'
p52123
Nsa(dp52124
S'description'
p52125
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52126
sS'cpp_type'
p52127
S'bool'
p52128
sS'default'
p52129
S'0'
p52130
sS'name'
p52131
S'use_displaced_mesh'
p52132
sS'required'
p52133
I00
sS'group_name'
p52134
S'Advanced'
p52135
sa(dp52136
S'description'
p52137
S'The name of the variable that this object operates on\n'
p52138
sS'cpp_type'
p52139
S'std::vector<VariableName>'
p52140
sS'default'
p52141
g3
sS'name'
p52142
S'variable'
p52143
sS'required'
p52144
I01
sS'group_name'
p52145
NsasS'name'
p52146
S'/UserObjects/VariableInnerProduct'
p52147
sa(dp52148
S'description'
p52149
g3
sS'subblocks'
p52150
NsS'parameters'
p52151
(lp52152
(dp52153
S'description'
p52154
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52155
sS'cpp_type'
p52156
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p52157
sS'default'
p52158
g3
sS'name'
p52159
S'block'
p52160
sS'required'
p52161
I00
sS'group_name'
p52162
Nsa(dp52163
S'description'
p52164
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52165
sS'cpp_type'
p52166
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52167
sS'default'
p52168
g3
sS'name'
p52169
S'control_tags'
p52170
sS'required'
p52171
I00
sS'group_name'
p52172
S'Advanced'
p52173
sa(dp52174
S'description'
p52175
S'Set the enabled status of the MooseObject.\n'
p52176
sS'cpp_type'
p52177
S'bool'
p52178
sS'default'
p52179
S'1'
p52180
sS'name'
p52181
S'enable'
p52182
sS'required'
p52183
I00
sS'group_name'
p52184
S'Advanced'
p52185
sa(dp52186
S'name'
p52187
S'execute_on'
p52188
sS'cpp_type'
p52189
S'MultiMooseEnum'
p52190
sS'default'
p52191
S'TIMESTEP_END'
p52192
sS'description'
p52193
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p52194
sS'required'
p52195
I00
sS'options'
p52196
S'none initial linear nonlinear timestep_end timestep_begin custom'
p52197
sS'group_name'
p52198
Nsa(dp52199
S'description'
p52200
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p52201
sS'cpp_type'
p52202
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p52203
sS'default'
p52204
g3
sS'name'
p52205
S'outputs'
p52206
sS'required'
p52207
I00
sS'group_name'
p52208
S'Advanced'
p52209
sa(dp52210
S'description'
p52211
S'The seed for the master random number generator\n'
p52212
sS'cpp_type'
p52213
S'unsigned int'
p52214
sS'default'
p52215
S'0'
p52216
sS'name'
p52217
S'seed'
p52218
sS'required'
p52219
I00
sS'group_name'
p52220
S'Advanced'
p52221
sa(dp52222
S'description'
p52223
g3
sS'cpp_type'
p52224
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52225
sS'default'
p52226
S'VolumePostprocessor'
p52227
sS'name'
p52228
S'type'
p52229
sS'required'
p52230
I00
sS'group_name'
p52231
Nsa(dp52232
S'description'
p52233
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52234
sS'cpp_type'
p52235
S'bool'
p52236
sS'default'
p52237
S'0'
p52238
sS'name'
p52239
S'use_displaced_mesh'
p52240
sS'required'
p52241
I00
sS'group_name'
p52242
S'Advanced'
p52243
sasS'name'
p52244
S'/UserObjects/VolumePostprocessor'
p52245
sasS'parameters'
p52246
NsS'name'
p52247
S'/UserObjects'
p52248
sa(dp52249
S'description'
p52250
g3
sS'subblocks'
p52251
(lp52252
(dp52253
S'description'
p52254
g3
sS'subblocks'
p52255
(lp52256
(dp52257
S'description'
p52258
g3
sS'subblocks'
p52259
(lp52260
(dp52261
S'description'
p52262
g3
sS'subblocks'
p52263
(lp52264
(dp52265
S'description'
p52266
g3
sS'subblocks'
p52267
NsS'parameters'
p52268
(lp52269
(dp52270
S'description'
p52271
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52272
sS'cpp_type'
p52273
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p52274
sS'default'
p52275
g3
sS'name'
p52276
S'block'
p52277
sS'required'
p52278
I00
sS'group_name'
p52279
Nsa(dp52280
S'description'
p52281
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p52282
sS'cpp_type'
p52283
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p52284
sS'default'
p52285
g3
sS'name'
p52286
S'boundary'
p52287
sS'required'
p52288
I00
sS'group_name'
p52289
Nsa(dp52290
S'description'
p52291
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52292
sS'cpp_type'
p52293
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52294
sS'default'
p52295
g3
sS'name'
p52296
S'control_tags'
p52297
sS'required'
p52298
I00
sS'group_name'
p52299
S'Advanced'
p52300
sa(dp52301
S'description'
p52302
S'Set the enabled status of the MooseObject.\n'
p52303
sS'cpp_type'
p52304
S'bool'
p52305
sS'default'
p52306
S'1'
p52307
sS'name'
p52308
S'enable'
p52309
sS'required'
p52310
I00
sS'group_name'
p52311
S'Advanced'
p52312
sa(dp52313
S'description'
p52314
S'The value of the variable inside the box\n'
p52315
sS'cpp_type'
p52316
S'double'
p52317
sS'default'
p52318
S'0'
p52319
sS'name'
p52320
S'inside'
p52321
sS'required'
p52322
I00
sS'group_name'
p52323
Nsa(dp52324
S'description'
p52325
S'The value of the variable outside the box\n'
p52326
sS'cpp_type'
p52327
S'double'
p52328
sS'default'
p52329
S'0'
p52330
sS'name'
p52331
S'outside'
p52332
sS'required'
p52333
I00
sS'group_name'
p52334
Nsa(dp52335
S'description'
p52336
g3
sS'cpp_type'
p52337
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52338
sS'default'
p52339
S'BoundingBoxIC'
p52340
sS'name'
p52341
S'type'
p52342
sS'required'
p52343
I00
sS'group_name'
p52344
Nsa(dp52345
S'description'
p52346
S'The variable this initial condition is supposed to provide values for.\n'
p52347
sS'cpp_type'
p52348
S'VariableName'
p52349
sS'default'
p52350
g3
sS'name'
p52351
S'variable'
p52352
sS'required'
p52353
I01
sS'group_name'
p52354
Nsa(dp52355
S'description'
p52356
S'The x coordinate of the lower left-hand corner of the box\n'
p52357
sS'cpp_type'
p52358
S'double'
p52359
sS'default'
p52360
g3
sS'name'
p52361
S'x1'
p52362
sS'required'
p52363
I01
sS'group_name'
p52364
Nsa(dp52365
S'description'
p52366
S'The x coordinate of the upper right-hand corner of the box\n'
p52367
sS'cpp_type'
p52368
S'double'
p52369
sS'default'
p52370
g3
sS'name'
p52371
S'x2'
p52372
sS'required'
p52373
I01
sS'group_name'
p52374
Nsa(dp52375
S'description'
p52376
S'The y coordinate of the lower left-hand corner of the box\n'
p52377
sS'cpp_type'
p52378
S'double'
p52379
sS'default'
p52380
g3
sS'name'
p52381
S'y1'
p52382
sS'required'
p52383
I01
sS'group_name'
p52384
Nsa(dp52385
S'description'
p52386
S'The y coordinate of the upper right-hand corner of the box\n'
p52387
sS'cpp_type'
p52388
S'double'
p52389
sS'default'
p52390
g3
sS'name'
p52391
S'y2'
p52392
sS'required'
p52393
I01
sS'group_name'
p52394
Nsa(dp52395
S'description'
p52396
S'The z coordinate of the lower left-hand corner of the box\n'
p52397
sS'cpp_type'
p52398
S'double'
p52399
sS'default'
p52400
S'0'
p52401
sS'name'
p52402
S'z1'
p52403
sS'required'
p52404
I00
sS'group_name'
p52405
Nsa(dp52406
S'description'
p52407
S'The z coordinate of the upper right-hand corner of the box\n'
p52408
sS'cpp_type'
p52409
S'double'
p52410
sS'default'
p52411
S'0'
p52412
sS'name'
p52413
S'z2'
p52414
sS'required'
p52415
I00
sS'group_name'
p52416
NsasS'name'
p52417
S'/Variables/*/InitialCondition/<type>/BoundingBoxIC'
p52418
sa(dp52419
S'description'
p52420
g3
sS'subblocks'
p52421
NsS'parameters'
p52422
(lp52423
(dp52424
S'description'
p52425
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52426
sS'cpp_type'
p52427
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p52428
sS'default'
p52429
g3
sS'name'
p52430
S'block'
p52431
sS'required'
p52432
I00
sS'group_name'
p52433
Nsa(dp52434
S'description'
p52435
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p52436
sS'cpp_type'
p52437
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p52438
sS'default'
p52439
g3
sS'name'
p52440
S'boundary'
p52441
sS'required'
p52442
I00
sS'group_name'
p52443
Nsa(dp52444
S'description'
p52445
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52446
sS'cpp_type'
p52447
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52448
sS'default'
p52449
g3
sS'name'
p52450
S'control_tags'
p52451
sS'required'
p52452
I00
sS'group_name'
p52453
S'Advanced'
p52454
sa(dp52455
S'description'
p52456
S'Set the enabled status of the MooseObject.\n'
p52457
sS'cpp_type'
p52458
S'bool'
p52459
sS'default'
p52460
S'1'
p52461
sS'name'
p52462
S'enable'
p52463
sS'required'
p52464
I00
sS'group_name'
p52465
S'Advanced'
p52466
sa(dp52467
S'description'
p52468
g3
sS'cpp_type'
p52469
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52470
sS'default'
p52471
S'ConstantIC'
p52472
sS'name'
p52473
S'type'
p52474
sS'required'
p52475
I00
sS'group_name'
p52476
Nsa(dp52477
S'description'
p52478
S'The value to be set in IC\n'
p52479
sS'cpp_type'
p52480
S'double'
p52481
sS'default'
p52482
g3
sS'name'
p52483
S'value'
p52484
sS'required'
p52485
I01
sS'group_name'
p52486
Nsa(dp52487
S'description'
p52488
S'The variable this initial condition is supposed to provide values for.\n'
p52489
sS'cpp_type'
p52490
S'VariableName'
p52491
sS'default'
p52492
g3
sS'name'
p52493
S'variable'
p52494
sS'required'
p52495
I01
sS'group_name'
p52496
NsasS'name'
p52497
S'/Variables/*/InitialCondition/<type>/ConstantIC'
p52498
sa(dp52499
S'description'
p52500
g3
sS'subblocks'
p52501
NsS'parameters'
p52502
(lp52503
(dp52504
S'description'
p52505
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52506
sS'cpp_type'
p52507
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p52508
sS'default'
p52509
g3
sS'name'
p52510
S'block'
p52511
sS'required'
p52512
I00
sS'group_name'
p52513
Nsa(dp52514
S'description'
p52515
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p52516
sS'cpp_type'
p52517
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p52518
sS'default'
p52519
g3
sS'name'
p52520
S'boundary'
p52521
sS'required'
p52522
I00
sS'group_name'
p52523
Nsa(dp52524
S'description'
p52525
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52526
sS'cpp_type'
p52527
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52528
sS'default'
p52529
g3
sS'name'
p52530
S'control_tags'
p52531
sS'required'
p52532
I00
sS'group_name'
p52533
S'Advanced'
p52534
sa(dp52535
S'description'
p52536
S'Set the enabled status of the MooseObject.\n'
p52537
sS'cpp_type'
p52538
S'bool'
p52539
sS'default'
p52540
S'1'
p52541
sS'name'
p52542
S'enable'
p52543
sS'required'
p52544
I00
sS'group_name'
p52545
S'Advanced'
p52546
sa(dp52547
S'description'
p52548
S'The initial condition function.\n'
p52549
sS'cpp_type'
p52550
S'FunctionName'
p52551
sS'default'
p52552
g3
sS'name'
p52553
S'function'
p52554
sS'required'
p52555
I01
sS'group_name'
p52556
Nsa(dp52557
S'description'
p52558
g3
sS'cpp_type'
p52559
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52560
sS'default'
p52561
S'FunctionIC'
p52562
sS'name'
p52563
S'type'
p52564
sS'required'
p52565
I00
sS'group_name'
p52566
Nsa(dp52567
S'description'
p52568
S'The variable this initial condition is supposed to provide values for.\n'
p52569
sS'cpp_type'
p52570
S'VariableName'
p52571
sS'default'
p52572
g3
sS'name'
p52573
S'variable'
p52574
sS'required'
p52575
I01
sS'group_name'
p52576
NsasS'name'
p52577
S'/Variables/*/InitialCondition/<type>/FunctionIC'
p52578
sa(dp52579
S'description'
p52580
g3
sS'subblocks'
p52581
NsS'parameters'
p52582
(lp52583
(dp52584
S'description'
p52585
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52586
sS'cpp_type'
p52587
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52588
sS'default'
p52589
g3
sS'name'
p52590
S'control_tags'
p52591
sS'required'
p52592
I00
sS'group_name'
p52593
S'Advanced'
p52594
sa(dp52595
S'description'
p52596
S'Set the enabled status of the MooseObject.\n'
p52597
sS'cpp_type'
p52598
S'bool'
p52599
sS'default'
p52600
S'1'
p52601
sS'name'
p52602
S'enable'
p52603
sS'required'
p52604
I00
sS'group_name'
p52605
S'Advanced'
p52606
sa(dp52607
S'description'
p52608
S'The initial condition function.\n'
p52609
sS'cpp_type'
p52610
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p52611
sS'default'
p52612
g3
sS'name'
p52613
S'function'
p52614
sS'required'
p52615
I01
sS'group_name'
p52616
Nsa(dp52617
S'description'
p52618
g3
sS'cpp_type'
p52619
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52620
sS'default'
p52621
S'FunctionScalarIC'
p52622
sS'name'
p52623
S'type'
p52624
sS'required'
p52625
I00
sS'group_name'
p52626
Nsa(dp52627
S'description'
p52628
S'The variable this initial condition is supposed to provide values for.\n'
p52629
sS'cpp_type'
p52630
S'VariableName'
p52631
sS'default'
p52632
g3
sS'name'
p52633
S'variable'
p52634
sS'required'
p52635
I00
sS'group_name'
p52636
NsasS'name'
p52637
S'/Variables/*/InitialCondition/<type>/FunctionScalarIC'
p52638
sa(dp52639
S'description'
p52640
g3
sS'subblocks'
p52641
NsS'parameters'
p52642
(lp52643
(dp52644
S'description'
p52645
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52646
sS'cpp_type'
p52647
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p52648
sS'default'
p52649
g3
sS'name'
p52650
S'block'
p52651
sS'required'
p52652
I00
sS'group_name'
p52653
Nsa(dp52654
S'description'
p52655
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p52656
sS'cpp_type'
p52657
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p52658
sS'default'
p52659
g3
sS'name'
p52660
S'boundary'
p52661
sS'required'
p52662
I00
sS'group_name'
p52663
Nsa(dp52664
S'description'
p52665
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52666
sS'cpp_type'
p52667
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52668
sS'default'
p52669
g3
sS'name'
p52670
S'control_tags'
p52671
sS'required'
p52672
I00
sS'group_name'
p52673
S'Advanced'
p52674
sa(dp52675
S'description'
p52676
S'Set the enabled status of the MooseObject.\n'
p52677
sS'cpp_type'
p52678
S'bool'
p52679
sS'default'
p52680
S'1'
p52681
sS'name'
p52682
S'enable'
p52683
sS'required'
p52684
I00
sS'group_name'
p52685
S'Advanced'
p52686
sa(dp52687
S'description'
p52688
S'Upper bound of the randomly generated values\n'
p52689
sS'cpp_type'
p52690
S'double'
p52691
sS'default'
p52692
S'1'
p52693
sS'name'
p52694
S'max'
p52695
sS'required'
p52696
I00
sS'group_name'
p52697
Nsa(dp52698
S'description'
p52699
S'Lower bound of the randomly generated values\n'
p52700
sS'cpp_type'
p52701
S'double'
p52702
sS'default'
p52703
S'0'
p52704
sS'name'
p52705
S'min'
p52706
sS'required'
p52707
I00
sS'group_name'
p52708
Nsa(dp52709
S'description'
p52710
S'Seed value for the random number generator\n'
p52711
sS'cpp_type'
p52712
S'unsigned int'
p52713
sS'default'
p52714
S'0'
p52715
sS'name'
p52716
S'seed'
p52717
sS'required'
p52718
I00
sS'group_name'
p52719
Nsa(dp52720
S'description'
p52721
g3
sS'cpp_type'
p52722
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52723
sS'default'
p52724
S'RandomIC'
p52725
sS'name'
p52726
S'type'
p52727
sS'required'
p52728
I00
sS'group_name'
p52729
Nsa(dp52730
S'description'
p52731
S'The variable this initial condition is supposed to provide values for.\n'
p52732
sS'cpp_type'
p52733
S'VariableName'
p52734
sS'default'
p52735
g3
sS'name'
p52736
S'variable'
p52737
sS'required'
p52738
I01
sS'group_name'
p52739
NsasS'name'
p52740
S'/Variables/*/InitialCondition/<type>/RandomIC'
p52741
sa(dp52742
S'description'
p52743
g3
sS'subblocks'
p52744
NsS'parameters'
p52745
(lp52746
(dp52747
S'description'
p52748
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52749
sS'cpp_type'
p52750
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52751
sS'default'
p52752
g3
sS'name'
p52753
S'control_tags'
p52754
sS'required'
p52755
I00
sS'group_name'
p52756
S'Advanced'
p52757
sa(dp52758
S'description'
p52759
S'Set the enabled status of the MooseObject.\n'
p52760
sS'cpp_type'
p52761
S'bool'
p52762
sS'default'
p52763
S'1'
p52764
sS'name'
p52765
S'enable'
p52766
sS'required'
p52767
I00
sS'group_name'
p52768
S'Advanced'
p52769
sa(dp52770
S'description'
p52771
g3
sS'cpp_type'
p52772
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52773
sS'default'
p52774
S'ScalarComponentIC'
p52775
sS'name'
p52776
S'type'
p52777
sS'required'
p52778
I00
sS'group_name'
p52779
Nsa(dp52780
S'description'
p52781
S'Initial values to initialize the scalar variable.\n'
p52782
sS'cpp_type'
p52783
S'std::__1::vector<double, std::__1::allocator<double> >'
p52784
sS'default'
p52785
g3
sS'name'
p52786
S'values'
p52787
sS'required'
p52788
I01
sS'group_name'
p52789
Nsa(dp52790
S'description'
p52791
S'The variable this initial condition is supposed to provide values for.\n'
p52792
sS'cpp_type'
p52793
S'VariableName'
p52794
sS'default'
p52795
g3
sS'name'
p52796
S'variable'
p52797
sS'required'
p52798
I00
sS'group_name'
p52799
NsasS'name'
p52800
S'/Variables/*/InitialCondition/<type>/ScalarComponentIC'
p52801
sa(dp52802
S'description'
p52803
g3
sS'subblocks'
p52804
NsS'parameters'
p52805
(lp52806
(dp52807
S'description'
p52808
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52809
sS'cpp_type'
p52810
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52811
sS'default'
p52812
g3
sS'name'
p52813
S'control_tags'
p52814
sS'required'
p52815
I00
sS'group_name'
p52816
S'Advanced'
p52817
sa(dp52818
S'description'
p52819
S'Set the enabled status of the MooseObject.\n'
p52820
sS'cpp_type'
p52821
S'bool'
p52822
sS'default'
p52823
S'1'
p52824
sS'name'
p52825
S'enable'
p52826
sS'required'
p52827
I00
sS'group_name'
p52828
S'Advanced'
p52829
sa(dp52830
S'description'
p52831
g3
sS'cpp_type'
p52832
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52833
sS'default'
p52834
S'ScalarConstantIC'
p52835
sS'name'
p52836
S'type'
p52837
sS'required'
p52838
I00
sS'group_name'
p52839
Nsa(dp52840
S'description'
p52841
g3
sS'cpp_type'
p52842
S'double'
p52843
sS'default'
p52844
S'0'
p52845
sS'name'
p52846
S'value'
p52847
sS'required'
p52848
I00
sS'group_name'
p52849
Nsa(dp52850
S'description'
p52851
S'The variable this initial condition is supposed to provide values for.\n'
p52852
sS'cpp_type'
p52853
S'VariableName'
p52854
sS'default'
p52855
g3
sS'name'
p52856
S'variable'
p52857
sS'required'
p52858
I00
sS'group_name'
p52859
NsasS'name'
p52860
S'/Variables/*/InitialCondition/<type>/ScalarConstantIC'
p52861
sasS'parameters'
p52862
NsS'name'
p52863
S'/Variables/*/InitialCondition/<type>'
p52864
sasS'parameters'
p52865
(lp52866
(dp52867
S'description'
p52868
S'A string representing the Moose Object that will be built by this Action\n'
p52869
sS'cpp_type'
p52870
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52871
sS'default'
p52872
g3
sS'name'
p52873
S'type'
p52874
sS'required'
p52875
I01
sS'group_name'
p52876
NsasS'name'
p52877
S'/Variables/*/InitialCondition'
p52878
sasS'parameters'
p52879
(lp52880
(dp52881
S'description'
p52882
S'The block id where this variable lives\n'
p52883
sS'cpp_type'
p52884
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p52885
sS'default'
p52886
g3
sS'name'
p52887
S'block'
p52888
sS'required'
p52889
I00
sS'group_name'
p52890
Nsa(dp52891
S'description'
p52892
S'True to make this variable an eigen variable\n'
p52893
sS'cpp_type'
p52894
S'bool'
p52895
sS'default'
p52896
S'0'
p52897
sS'name'
p52898
S'eigen'
p52899
sS'required'
p52900
I00
sS'group_name'
p52901
S'Advanced'
p52902
sa(dp52903
S'name'
p52904
S'family'
p52905
sS'cpp_type'
p52906
S'MooseEnum'
p52907
sS'default'
p52908
S'LAGRANGE'
p52909
sS'description'
p52910
S'Specifies the family of FE shape functions to use for this variable\n'
p52911
sS'required'
p52912
I00
sS'options'
p52913
S'LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC'
p52914
sS'group_name'
p52915
Nsa(dp52916
S'description'
p52917
S'Specifies the initial condition for this variable\n'
p52918
sS'cpp_type'
p52919
S'double'
p52920
sS'default'
p52921
g3
sS'name'
p52922
S'initial_condition'
p52923
sS'required'
p52924
I00
sS'group_name'
p52925
Nsa(dp52926
S'name'
p52927
S'order'
p52928
sS'cpp_type'
p52929
S'MooseEnum'
p52930
sS'default'
p52931
S'FIRST'
p52932
sS'description'
p52933
S'Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n'
p52934
sS'required'
p52935
I00
sS'options'
p52936
S'CONSTANT FIRST SECOND THIRD FOURTH'
p52937
sS'group_name'
p52938
Nsa(dp52939
S'description'
p52940
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p52941
sS'cpp_type'
p52942
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p52943
sS'default'
p52944
g3
sS'name'
p52945
S'outputs'
p52946
sS'required'
p52947
I00
sS'group_name'
p52948
S'Advanced'
p52949
sa(dp52950
S'description'
p52951
S'Specifies a scaling factor to apply to this variable\n'
p52952
sS'cpp_type'
p52953
S'double'
p52954
sS'default'
p52955
S'1'
p52956
sS'name'
p52957
S'scaling'
p52958
sS'required'
p52959
I00
sS'group_name'
p52960
S'Advanced'
p52961
sa(dp52962
S'description'
p52963
S'Gives the timestep (or "LATEST") for which to read a solution from a file for a given variable. (Default: LATEST)\n'
p52964
sS'cpp_type'
p52965
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52966
sS'default'
p52967
S'LATEST'
p52968
sS'name'
p52969
S'initial_from_file_timestep'
p52970
sS'required'
p52971
I00
sS'group_name'
p52972
S'Initial From File'
p52973
sa(dp52974
S'description'
p52975
S'Gives the name of a variable for which to read an initial condition from a mesh file\n'
p52976
sS'cpp_type'
p52977
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52978
sS'default'
p52979
g3
sS'name'
p52980
S'initial_from_file_var'
p52981
sS'required'
p52982
I00
sS'group_name'
p52983
S'Initial From File'
p52984
sasS'name'
p52985
S'/Variables/*'
p52986
sasS'parameters'
p52987
NsS'name'
p52988
S'/Variables'
p52989
sa(dp52990
S'description'
p52991
g3
sS'subblocks'
p52992
(lp52993
(dp52994
S'description'
p52995
g3
sS'subblocks'
p52996
NsS'parameters'
p52997
(lp52998
(dp52999
S'description'
p53000
S'A string representing the Moose Object that will be built by this Action\n'
p53001
sS'cpp_type'
p53002
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53003
sS'default'
p53004
g3
sS'name'
p53005
S'type'
p53006
sS'required'
p53007
I01
sS'group_name'
p53008
NsasS'name'
p53009
S'/VectorPostprocessors/*'
p53010
sa(dp53011
S'description'
p53012
g3
sS'subblocks'
p53013
NsS'parameters'
p53014
(lp53015
(dp53016
S'description'
p53017
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53018
sS'cpp_type'
p53019
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53020
sS'default'
p53021
g3
sS'name'
p53022
S'control_tags'
p53023
sS'required'
p53024
I00
sS'group_name'
p53025
S'Advanced'
p53026
sa(dp53027
S'description'
p53028
S'Set the enabled status of the MooseObject.\n'
p53029
sS'cpp_type'
p53030
S'bool'
p53031
sS'default'
p53032
S'1'
p53033
sS'name'
p53034
S'enable'
p53035
sS'required'
p53036
I00
sS'group_name'
p53037
S'Advanced'
p53038
sa(dp53039
S'name'
p53040
S'execute_on'
p53041
sS'cpp_type'
p53042
S'MultiMooseEnum'
p53043
sS'default'
p53044
S'TIMESTEP_END'
p53045
sS'description'
p53046
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53047
sS'required'
p53048
I00
sS'options'
p53049
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53050
sS'group_name'
p53051
Nsa(dp53052
S'description'
p53053
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53054
sS'cpp_type'
p53055
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53056
sS'default'
p53057
g3
sS'name'
p53058
S'outputs'
p53059
sS'required'
p53060
I00
sS'group_name'
p53061
S'Advanced'
p53062
sa(dp53063
S'description'
p53064
g3
sS'cpp_type'
p53065
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53066
sS'default'
p53067
S'ConstantVectorPostprocessor'
p53068
sS'name'
p53069
S'type'
p53070
sS'required'
p53071
I00
sS'group_name'
p53072
Nsa(dp53073
S'description'
p53074
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53075
sS'cpp_type'
p53076
S'bool'
p53077
sS'default'
p53078
S'0'
p53079
sS'name'
p53080
S'use_displaced_mesh'
p53081
sS'required'
p53082
I00
sS'group_name'
p53083
S'Advanced'
p53084
sa(dp53085
S'description'
p53086
S'The vector value this object will have.\n'
p53087
sS'cpp_type'
p53088
S'std::__1::vector<double, std::__1::allocator<double> >'
p53089
sS'default'
p53090
g3
sS'name'
p53091
S'value'
p53092
sS'required'
p53093
I01
sS'group_name'
p53094
NsasS'name'
p53095
S'/VectorPostprocessors/ConstantVectorPostprocessor'
p53096
sa(dp53097
S'description'
p53098
g3
sS'subblocks'
p53099
NsS'parameters'
p53100
(lp53101
(dp53102
S'description'
p53103
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53104
sS'cpp_type'
p53105
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53106
sS'default'
p53107
g3
sS'name'
p53108
S'control_tags'
p53109
sS'required'
p53110
I00
sS'group_name'
p53111
S'Advanced'
p53112
sa(dp53113
S'description'
p53114
S'Set the enabled status of the MooseObject.\n'
p53115
sS'cpp_type'
p53116
S'bool'
p53117
sS'default'
p53118
S'1'
p53119
sS'name'
p53120
S'enable'
p53121
sS'required'
p53122
I00
sS'group_name'
p53123
S'Advanced'
p53124
sa(dp53125
S'name'
p53126
S'execute_on'
p53127
sS'cpp_type'
p53128
S'MultiMooseEnum'
p53129
sS'default'
p53130
S'TIMESTEP_END'
p53131
sS'description'
p53132
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53133
sS'required'
p53134
I00
sS'options'
p53135
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53136
sS'group_name'
p53137
Nsa(dp53138
S'description'
p53139
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53140
sS'cpp_type'
p53141
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53142
sS'default'
p53143
g3
sS'name'
p53144
S'outputs'
p53145
sS'required'
p53146
I00
sS'group_name'
p53147
S'Advanced'
p53148
sa(dp53149
S'description'
p53150
g3
sS'cpp_type'
p53151
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53152
sS'default'
p53153
S'Eigenvalues'
p53154
sS'name'
p53155
S'type'
p53156
sS'required'
p53157
I00
sS'group_name'
p53158
Nsa(dp53159
S'description'
p53160
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53161
sS'cpp_type'
p53162
S'bool'
p53163
sS'default'
p53164
S'0'
p53165
sS'name'
p53166
S'use_displaced_mesh'
p53167
sS'required'
p53168
I00
sS'group_name'
p53169
S'Advanced'
p53170
sasS'name'
p53171
S'/VectorPostprocessors/Eigenvalues'
p53172
sa(dp53173
S'description'
p53174
g3
sS'subblocks'
p53175
NsS'parameters'
p53176
(lp53177
(dp53178
S'description'
p53179
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53180
sS'cpp_type'
p53181
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53182
sS'default'
p53183
g3
sS'name'
p53184
S'control_tags'
p53185
sS'required'
p53186
I00
sS'group_name'
p53187
S'Advanced'
p53188
sa(dp53189
S'description'
p53190
S'Set the enabled status of the MooseObject.\n'
p53191
sS'cpp_type'
p53192
S'bool'
p53193
sS'default'
p53194
S'1'
p53195
sS'name'
p53196
S'enable'
p53197
sS'required'
p53198
I00
sS'group_name'
p53199
S'Advanced'
p53200
sa(dp53201
S'description'
p53202
S'The end of the line\n'
p53203
sS'cpp_type'
p53204
S'libMesh::Point'
p53205
sS'default'
p53206
g3
sS'name'
p53207
S'end'
p53208
sS'required'
p53209
I01
sS'group_name'
p53210
Nsa(dp53211
S'name'
p53212
S'execute_on'
p53213
sS'cpp_type'
p53214
S'MultiMooseEnum'
p53215
sS'default'
p53216
S'TIMESTEP_END'
p53217
sS'description'
p53218
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53219
sS'required'
p53220
I00
sS'options'
p53221
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53222
sS'group_name'
p53223
Nsa(dp53224
S'description'
p53225
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53226
sS'cpp_type'
p53227
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53228
sS'default'
p53229
g3
sS'name'
p53230
S'outputs'
p53231
sS'required'
p53232
I00
sS'group_name'
p53233
S'Advanced'
p53234
sa(dp53235
S'description'
p53236
S'The beginning of the line\n'
p53237
sS'cpp_type'
p53238
S'libMesh::Point'
p53239
sS'default'
p53240
g3
sS'name'
p53241
S'start'
p53242
sS'required'
p53243
I01
sS'group_name'
p53244
Nsa(dp53245
S'description'
p53246
g3
sS'cpp_type'
p53247
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53248
sS'default'
p53249
S'ElementsAlongLine'
p53250
sS'name'
p53251
S'type'
p53252
sS'required'
p53253
I00
sS'group_name'
p53254
Nsa(dp53255
S'description'
p53256
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53257
sS'cpp_type'
p53258
S'bool'
p53259
sS'default'
p53260
S'0'
p53261
sS'name'
p53262
S'use_displaced_mesh'
p53263
sS'required'
p53264
I00
sS'group_name'
p53265
S'Advanced'
p53266
sasS'name'
p53267
S'/VectorPostprocessors/ElementsAlongLine'
p53268
sa(dp53269
S'description'
p53270
g3
sS'subblocks'
p53271
NsS'parameters'
p53272
(lp53273
(dp53274
S'description'
p53275
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53276
sS'cpp_type'
p53277
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53278
sS'default'
p53279
g3
sS'name'
p53280
S'control_tags'
p53281
sS'required'
p53282
I00
sS'group_name'
p53283
S'Advanced'
p53284
sa(dp53285
S'description'
p53286
S'Set the enabled status of the MooseObject.\n'
p53287
sS'cpp_type'
p53288
S'bool'
p53289
sS'default'
p53290
S'1'
p53291
sS'name'
p53292
S'enable'
p53293
sS'required'
p53294
I00
sS'group_name'
p53295
S'Advanced'
p53296
sa(dp53297
S'name'
p53298
S'execute_on'
p53299
sS'cpp_type'
p53300
S'MultiMooseEnum'
p53301
sS'default'
p53302
S'TIMESTEP_END'
p53303
sS'description'
p53304
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53305
sS'required'
p53306
I00
sS'options'
p53307
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53308
sS'group_name'
p53309
Nsa(dp53310
S'description'
p53311
S'Normal vector to the plane\n'
p53312
sS'cpp_type'
p53313
S'libMesh::Point'
p53314
sS'default'
p53315
g3
sS'name'
p53316
S'normal'
p53317
sS'required'
p53318
I01
sS'group_name'
p53319
Nsa(dp53320
S'description'
p53321
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53322
sS'cpp_type'
p53323
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53324
sS'default'
p53325
g3
sS'name'
p53326
S'outputs'
p53327
sS'required'
p53328
I00
sS'group_name'
p53329
S'Advanced'
p53330
sa(dp53331
S'description'
p53332
S'Point in the plane\n'
p53333
sS'cpp_type'
p53334
S'libMesh::Point'
p53335
sS'default'
p53336
g3
sS'name'
p53337
S'point'
p53338
sS'required'
p53339
I01
sS'group_name'
p53340
Nsa(dp53341
S'description'
p53342
g3
sS'cpp_type'
p53343
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53344
sS'default'
p53345
S'ElementsAlongPlane'
p53346
sS'name'
p53347
S'type'
p53348
sS'required'
p53349
I00
sS'group_name'
p53350
Nsa(dp53351
S'description'
p53352
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53353
sS'cpp_type'
p53354
S'bool'
p53355
sS'default'
p53356
S'0'
p53357
sS'name'
p53358
S'use_displaced_mesh'
p53359
sS'required'
p53360
I00
sS'group_name'
p53361
S'Advanced'
p53362
sasS'name'
p53363
S'/VectorPostprocessors/ElementsAlongPlane'
p53364
sa(dp53365
S'description'
p53366
g3
sS'subblocks'
p53367
NsS'parameters'
p53368
(lp53369
(dp53370
S'description'
p53371
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53372
sS'cpp_type'
p53373
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53374
sS'default'
p53375
g3
sS'name'
p53376
S'control_tags'
p53377
sS'required'
p53378
I00
sS'group_name'
p53379
S'Advanced'
p53380
sa(dp53381
S'description'
p53382
S'Set the enabled status of the MooseObject.\n'
p53383
sS'cpp_type'
p53384
S'bool'
p53385
sS'default'
p53386
S'1'
p53387
sS'name'
p53388
S'enable'
p53389
sS'required'
p53390
I00
sS'group_name'
p53391
S'Advanced'
p53392
sa(dp53393
S'description'
p53394
S'The end of the line\n'
p53395
sS'cpp_type'
p53396
S'libMesh::Point'
p53397
sS'default'
p53398
g3
sS'name'
p53399
S'end'
p53400
sS'required'
p53401
I01
sS'group_name'
p53402
Nsa(dp53403
S'name'
p53404
S'execute_on'
p53405
sS'cpp_type'
p53406
S'MultiMooseEnum'
p53407
sS'default'
p53408
S'TIMESTEP_END'
p53409
sS'description'
p53410
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53411
sS'required'
p53412
I00
sS'options'
p53413
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53414
sS'group_name'
p53415
Nsa(dp53416
S'description'
p53417
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53418
sS'cpp_type'
p53419
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53420
sS'default'
p53421
g3
sS'name'
p53422
S'outputs'
p53423
sS'required'
p53424
I00
sS'group_name'
p53425
S'Advanced'
p53426
sa(dp53427
S'description'
p53428
S'The beginning of the line\n'
p53429
sS'cpp_type'
p53430
S'libMesh::Point'
p53431
sS'default'
p53432
g3
sS'name'
p53433
S'start'
p53434
sS'required'
p53435
I01
sS'group_name'
p53436
Nsa(dp53437
S'description'
p53438
g3
sS'cpp_type'
p53439
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53440
sS'default'
p53441
S'IntersectionPointsAlongLine'
p53442
sS'name'
p53443
S'type'
p53444
sS'required'
p53445
I00
sS'group_name'
p53446
Nsa(dp53447
S'description'
p53448
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53449
sS'cpp_type'
p53450
S'bool'
p53451
sS'default'
p53452
S'0'
p53453
sS'name'
p53454
S'use_displaced_mesh'
p53455
sS'required'
p53456
I00
sS'group_name'
p53457
S'Advanced'
p53458
sasS'name'
p53459
S'/VectorPostprocessors/IntersectionPointsAlongLine'
p53460
sa(dp53461
S'description'
p53462
S'Performs a polynomial least squares fit on the data contained in another VectorPostprocessor\n'
p53463
sS'subblocks'
p53464
NsS'parameters'
p53465
(lp53466
(dp53467
S'description'
p53468
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53469
sS'cpp_type'
p53470
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53471
sS'default'
p53472
g3
sS'name'
p53473
S'control_tags'
p53474
sS'required'
p53475
I00
sS'group_name'
p53476
S'Advanced'
p53477
sa(dp53478
S'description'
p53479
S'Set the enabled status of the MooseObject.\n'
p53480
sS'cpp_type'
p53481
S'bool'
p53482
sS'default'
p53483
S'1'
p53484
sS'name'
p53485
S'enable'
p53486
sS'required'
p53487
I00
sS'group_name'
p53488
S'Advanced'
p53489
sa(dp53490
S'name'
p53491
S'execute_on'
p53492
sS'cpp_type'
p53493
S'MultiMooseEnum'
p53494
sS'default'
p53495
S'TIMESTEP_END'
p53496
sS'description'
p53497
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53498
sS'required'
p53499
I00
sS'options'
p53500
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53501
sS'group_name'
p53502
Nsa(dp53503
S'description'
p53504
S'The number of samples to be output\n'
p53505
sS'cpp_type'
p53506
S'unsigned int'
p53507
sS'default'
p53508
g3
sS'name'
p53509
S'num_samples'
p53510
sS'required'
p53511
I00
sS'group_name'
p53512
Nsa(dp53513
S'description'
p53514
S'The order of the polynomial fit\n'
p53515
sS'cpp_type'
p53516
S'unsigned int'
p53517
sS'default'
p53518
g3
sS'name'
p53519
S'order'
p53520
sS'required'
p53521
I01
sS'group_name'
p53522
Nsa(dp53523
S'name'
p53524
S'output'
p53525
sS'cpp_type'
p53526
S'MooseEnum'
p53527
sS'default'
p53528
S'Coefficients'
p53529
sS'description'
p53530
S'The quantity to output.  Options are: Coefficients Samples\n'
p53531
sS'required'
p53532
I00
sS'options'
p53533
S'Coefficients Samples'
p53534
sS'group_name'
p53535
Nsa(dp53536
S'description'
p53537
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53538
sS'cpp_type'
p53539
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53540
sS'default'
p53541
g3
sS'name'
p53542
S'outputs'
p53543
sS'required'
p53544
I00
sS'group_name'
p53545
S'Advanced'
p53546
sa(dp53547
S'description'
p53548
S'The maximum x value of the of samples to be output\n'
p53549
sS'cpp_type'
p53550
S'double'
p53551
sS'default'
p53552
g3
sS'name'
p53553
S'sample_x_max'
p53554
sS'required'
p53555
I00
sS'group_name'
p53556
Nsa(dp53557
S'description'
p53558
S'The minimum x value of the of samples to be output\n'
p53559
sS'cpp_type'
p53560
S'double'
p53561
sS'default'
p53562
g3
sS'name'
p53563
S'sample_x_min'
p53564
sS'required'
p53565
I00
sS'group_name'
p53566
Nsa(dp53567
S'description'
p53568
g3
sS'cpp_type'
p53569
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53570
sS'default'
p53571
S'LeastSquaresFit'
p53572
sS'name'
p53573
S'type'
p53574
sS'required'
p53575
I00
sS'group_name'
p53576
Nsa(dp53577
S'description'
p53578
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53579
sS'cpp_type'
p53580
S'bool'
p53581
sS'default'
p53582
S'0'
p53583
sS'name'
p53584
S'use_displaced_mesh'
p53585
sS'required'
p53586
I00
sS'group_name'
p53587
S'Advanced'
p53588
sa(dp53589
S'description'
p53590
S'The vectorpostprocessor on whose values we perform a least squares fit\n'
p53591
sS'cpp_type'
p53592
S'VectorPostprocessorName'
p53593
sS'default'
p53594
g3
sS'name'
p53595
S'vectorpostprocessor'
p53596
sS'required'
p53597
I01
sS'group_name'
p53598
Nsa(dp53599
S'description'
p53600
S'The name of the independent variable\n'
p53601
sS'cpp_type'
p53602
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53603
sS'default'
p53604
g3
sS'name'
p53605
S'x_name'
p53606
sS'required'
p53607
I01
sS'group_name'
p53608
Nsa(dp53609
S'description'
p53610
S'Value used to scale x values (scaling is done after shifting)\n'
p53611
sS'cpp_type'
p53612
S'double'
p53613
sS'default'
p53614
S'1'
p53615
sS'name'
p53616
S'x_scale'
p53617
sS'required'
p53618
I00
sS'group_name'
p53619
Nsa(dp53620
S'description'
p53621
S'Value used to shift x values (shifting is done before scaling)\n'
p53622
sS'cpp_type'
p53623
S'double'
p53624
sS'default'
p53625
S'0'
p53626
sS'name'
p53627
S'x_shift'
p53628
sS'required'
p53629
I00
sS'group_name'
p53630
Nsa(dp53631
S'description'
p53632
S'The name of the dependent variable\n'
p53633
sS'cpp_type'
p53634
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53635
sS'default'
p53636
g3
sS'name'
p53637
S'y_name'
p53638
sS'required'
p53639
I01
sS'group_name'
p53640
Nsa(dp53641
S'description'
p53642
S'Value used to scale y values (scaling is done after shifting)\n'
p53643
sS'cpp_type'
p53644
S'double'
p53645
sS'default'
p53646
S'1'
p53647
sS'name'
p53648
S'y_scale'
p53649
sS'required'
p53650
I00
sS'group_name'
p53651
Nsa(dp53652
S'description'
p53653
S'Value used to shift y values (shifting is done before scaling)\n'
p53654
sS'cpp_type'
p53655
S'double'
p53656
sS'default'
p53657
S'0'
p53658
sS'name'
p53659
S'y_shift'
p53660
sS'required'
p53661
I00
sS'group_name'
p53662
NsasS'name'
p53663
S'/VectorPostprocessors/LeastSquaresFit'
p53664
sa(dp53665
S'description'
p53666
g3
sS'subblocks'
p53667
NsS'parameters'
p53668
(lp53669
(dp53670
S'description'
p53671
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53672
sS'cpp_type'
p53673
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53674
sS'default'
p53675
g3
sS'name'
p53676
S'control_tags'
p53677
sS'required'
p53678
I00
sS'group_name'
p53679
S'Advanced'
p53680
sa(dp53681
S'description'
p53682
S'Set the enabled status of the MooseObject.\n'
p53683
sS'cpp_type'
p53684
S'bool'
p53685
sS'default'
p53686
S'1'
p53687
sS'name'
p53688
S'enable'
p53689
sS'required'
p53690
I00
sS'group_name'
p53691
S'Advanced'
p53692
sa(dp53693
S'description'
p53694
S'The ending of the line\n'
p53695
sS'cpp_type'
p53696
S'libMesh::Point'
p53697
sS'default'
p53698
g3
sS'name'
p53699
S'end_point'
p53700
sS'required'
p53701
I01
sS'group_name'
p53702
Nsa(dp53703
S'name'
p53704
S'execute_on'
p53705
sS'cpp_type'
p53706
S'MultiMooseEnum'
p53707
sS'default'
p53708
S'TIMESTEP_END'
p53709
sS'description'
p53710
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53711
sS'required'
p53712
I00
sS'options'
p53713
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53714
sS'group_name'
p53715
Nsa(dp53716
S'description'
p53717
S'The Functions to sample along the line\n'
p53718
sS'cpp_type'
p53719
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p53720
sS'default'
p53721
g3
sS'name'
p53722
S'functions'
p53723
sS'required'
p53724
I01
sS'group_name'
p53725
Nsa(dp53726
S'description'
p53727
S'The number of points to sample along the line\n'
p53728
sS'cpp_type'
p53729
S'unsigned int'
p53730
sS'default'
p53731
g3
sS'name'
p53732
S'num_points'
p53733
sS'required'
p53734
I01
sS'group_name'
p53735
Nsa(dp53736
S'description'
p53737
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53738
sS'cpp_type'
p53739
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53740
sS'default'
p53741
g3
sS'name'
p53742
S'outputs'
p53743
sS'required'
p53744
I00
sS'group_name'
p53745
S'Advanced'
p53746
sa(dp53747
S'name'
p53748
S'sort_by'
p53749
sS'cpp_type'
p53750
S'MooseEnum'
p53751
sS'default'
p53752
g3
sS'description'
p53753
S'What to sort the samples by\n'
p53754
sS'required'
p53755
I01
sS'options'
p53756
S'x y z id'
p53757
sS'group_name'
p53758
Nsa(dp53759
S'description'
p53760
S'The beginning of the line\n'
p53761
sS'cpp_type'
p53762
S'libMesh::Point'
p53763
sS'default'
p53764
g3
sS'name'
p53765
S'start_point'
p53766
sS'required'
p53767
I01
sS'group_name'
p53768
Nsa(dp53769
S'description'
p53770
g3
sS'cpp_type'
p53771
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53772
sS'default'
p53773
S'LineFunctionSampler'
p53774
sS'name'
p53775
S'type'
p53776
sS'required'
p53777
I00
sS'group_name'
p53778
Nsa(dp53779
S'description'
p53780
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53781
sS'cpp_type'
p53782
S'bool'
p53783
sS'default'
p53784
S'0'
p53785
sS'name'
p53786
S'use_displaced_mesh'
p53787
sS'required'
p53788
I00
sS'group_name'
p53789
S'Advanced'
p53790
sasS'name'
p53791
S'/VectorPostprocessors/LineFunctionSampler'
p53792
sa(dp53793
S'description'
p53794
g3
sS'subblocks'
p53795
NsS'parameters'
p53796
(lp53797
(dp53798
S'description'
p53799
S'The list of block ids (SubdomainID) that this object will be applied\n'
p53800
sS'cpp_type'
p53801
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p53802
sS'default'
p53803
g3
sS'name'
p53804
S'block'
p53805
sS'required'
p53806
I00
sS'group_name'
p53807
Nsa(dp53808
S'description'
p53809
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53810
sS'cpp_type'
p53811
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53812
sS'default'
p53813
g3
sS'name'
p53814
S'control_tags'
p53815
sS'required'
p53816
I00
sS'group_name'
p53817
S'Advanced'
p53818
sa(dp53819
S'description'
p53820
S'Set the enabled status of the MooseObject.\n'
p53821
sS'cpp_type'
p53822
S'bool'
p53823
sS'default'
p53824
S'1'
p53825
sS'name'
p53826
S'enable'
p53827
sS'required'
p53828
I00
sS'group_name'
p53829
S'Advanced'
p53830
sa(dp53831
S'description'
p53832
S'The end of the line\n'
p53833
sS'cpp_type'
p53834
S'libMesh::Point'
p53835
sS'default'
p53836
g3
sS'name'
p53837
S'end'
p53838
sS'required'
p53839
I01
sS'group_name'
p53840
Nsa(dp53841
S'name'
p53842
S'execute_on'
p53843
sS'cpp_type'
p53844
S'MultiMooseEnum'
p53845
sS'default'
p53846
S'TIMESTEP_END'
p53847
sS'description'
p53848
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53849
sS'required'
p53850
I00
sS'options'
p53851
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53852
sS'group_name'
p53853
Nsa(dp53854
S'description'
p53855
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53856
sS'cpp_type'
p53857
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53858
sS'default'
p53859
g3
sS'name'
p53860
S'outputs'
p53861
sS'required'
p53862
I00
sS'group_name'
p53863
S'Advanced'
p53864
sa(dp53865
S'description'
p53866
S'Name of the material property to be output along a line\n'
p53867
sS'cpp_type'
p53868
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53869
sS'default'
p53870
g3
sS'name'
p53871
S'property'
p53872
sS'required'
p53873
I01
sS'group_name'
p53874
Nsa(dp53875
S'name'
p53876
S'sort_by'
p53877
sS'cpp_type'
p53878
S'MooseEnum'
p53879
sS'default'
p53880
g3
sS'description'
p53881
S'What to sort the samples by\n'
p53882
sS'required'
p53883
I01
sS'options'
p53884
S'x y z id'
p53885
sS'group_name'
p53886
Nsa(dp53887
S'description'
p53888
S'The beginning of the line\n'
p53889
sS'cpp_type'
p53890
S'libMesh::Point'
p53891
sS'default'
p53892
g3
sS'name'
p53893
S'start'
p53894
sS'required'
p53895
I01
sS'group_name'
p53896
Nsa(dp53897
S'description'
p53898
g3
sS'cpp_type'
p53899
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53900
sS'default'
p53901
S'LineMaterialRealSampler'
p53902
sS'name'
p53903
S'type'
p53904
sS'required'
p53905
I00
sS'group_name'
p53906
Nsa(dp53907
S'description'
p53908
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53909
sS'cpp_type'
p53910
S'bool'
p53911
sS'default'
p53912
S'0'
p53913
sS'name'
p53914
S'use_displaced_mesh'
p53915
sS'required'
p53916
I00
sS'group_name'
p53917
S'Advanced'
p53918
sasS'name'
p53919
S'/VectorPostprocessors/LineMaterialRealSampler'
p53920
sa(dp53921
S'description'
p53922
g3
sS'subblocks'
p53923
NsS'parameters'
p53924
(lp53925
(dp53926
S'description'
p53927
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53928
sS'cpp_type'
p53929
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53930
sS'default'
p53931
g3
sS'name'
p53932
S'control_tags'
p53933
sS'required'
p53934
I00
sS'group_name'
p53935
S'Advanced'
p53936
sa(dp53937
S'description'
p53938
S'Set the enabled status of the MooseObject.\n'
p53939
sS'cpp_type'
p53940
S'bool'
p53941
sS'default'
p53942
S'1'
p53943
sS'name'
p53944
S'enable'
p53945
sS'required'
p53946
I00
sS'group_name'
p53947
S'Advanced'
p53948
sa(dp53949
S'description'
p53950
S'The ending of the line\n'
p53951
sS'cpp_type'
p53952
S'libMesh::Point'
p53953
sS'default'
p53954
g3
sS'name'
p53955
S'end_point'
p53956
sS'required'
p53957
I01
sS'group_name'
p53958
Nsa(dp53959
S'name'
p53960
S'execute_on'
p53961
sS'cpp_type'
p53962
S'MultiMooseEnum'
p53963
sS'default'
p53964
S'TIMESTEP_END'
p53965
sS'description'
p53966
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53967
sS'required'
p53968
I00
sS'options'
p53969
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53970
sS'group_name'
p53971
Nsa(dp53972
S'description'
p53973
S'The number of points to sample along the line\n'
p53974
sS'cpp_type'
p53975
S'unsigned int'
p53976
sS'default'
p53977
g3
sS'name'
p53978
S'num_points'
p53979
sS'required'
p53980
I01
sS'group_name'
p53981
Nsa(dp53982
S'description'
p53983
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53984
sS'cpp_type'
p53985
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53986
sS'default'
p53987
g3
sS'name'
p53988
S'outputs'
p53989
sS'required'
p53990
I00
sS'group_name'
p53991
S'Advanced'
p53992
sa(dp53993
S'name'
p53994
S'sort_by'
p53995
sS'cpp_type'
p53996
S'MooseEnum'
p53997
sS'default'
p53998
g3
sS'description'
p53999
S'What to sort the samples by\n'
p54000
sS'required'
p54001
I01
sS'options'
p54002
S'x y z id'
p54003
sS'group_name'
p54004
Nsa(dp54005
S'description'
p54006
S'The beginning of the line\n'
p54007
sS'cpp_type'
p54008
S'libMesh::Point'
p54009
sS'default'
p54010
g3
sS'name'
p54011
S'start_point'
p54012
sS'required'
p54013
I01
sS'group_name'
p54014
Nsa(dp54015
S'description'
p54016
g3
sS'cpp_type'
p54017
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p54018
sS'default'
p54019
S'LineValueSampler'
p54020
sS'name'
p54021
S'type'
p54022
sS'required'
p54023
I00
sS'group_name'
p54024
Nsa(dp54025
S'description'
p54026
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54027
sS'cpp_type'
p54028
S'bool'
p54029
sS'default'
p54030
S'0'
p54031
sS'name'
p54032
S'use_displaced_mesh'
p54033
sS'required'
p54034
I00
sS'group_name'
p54035
S'Advanced'
p54036
sa(dp54037
S'description'
p54038
S'The names of the variables that this VectorPostprocessor operates on\n'
p54039
sS'cpp_type'
p54040
S'std::vector<VariableName>'
p54041
sS'default'
p54042
g3
sS'name'
p54043
S'variable'
p54044
sS'required'
p54045
I01
sS'group_name'
p54046
NsasS'name'
p54047
S'/VectorPostprocessors/LineValueSampler'
p54048
sa(dp54049
S'description'
p54050
g3
sS'subblocks'
p54051
NsS'parameters'
p54052
(lp54053
(dp54054
S'description'
p54055
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54056
sS'cpp_type'
p54057
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p54058
sS'default'
p54059
g3
sS'name'
p54060
S'block'
p54061
sS'required'
p54062
I00
sS'group_name'
p54063
Nsa(dp54064
S'description'
p54065
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p54066
sS'cpp_type'
p54067
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p54068
sS'default'
p54069
g3
sS'name'
p54070
S'boundary'
p54071
sS'required'
p54072
I00
sS'group_name'
p54073
Nsa(dp54074
S'description'
p54075
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54076
sS'cpp_type'
p54077
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p54078
sS'default'
p54079
g3
sS'name'
p54080
S'control_tags'
p54081
sS'required'
p54082
I00
sS'group_name'
p54083
S'Advanced'
p54084
sa(dp54085
S'description'
p54086
S'Set the enabled status of the MooseObject.\n'
p54087
sS'cpp_type'
p54088
S'bool'
p54089
sS'default'
p54090
S'1'
p54091
sS'name'
p54092
S'enable'
p54093
sS'required'
p54094
I00
sS'group_name'
p54095
S'Advanced'
p54096
sa(dp54097
S'name'
p54098
S'execute_on'
p54099
sS'cpp_type'
p54100
S'MultiMooseEnum'
p54101
sS'default'
p54102
S'TIMESTEP_END'
p54103
sS'description'
p54104
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p54105
sS'required'
p54106
I00
sS'options'
p54107
S'none initial linear nonlinear timestep_end timestep_begin custom'
p54108
sS'group_name'
p54109
Nsa(dp54110
S'description'
p54111
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p54112
sS'cpp_type'
p54113
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p54114
sS'default'
p54115
g3
sS'name'
p54116
S'outputs'
p54117
sS'required'
p54118
I00
sS'group_name'
p54119
S'Advanced'
p54120
sa(dp54121
S'description'
p54122
S'The seed for the master random number generator\n'
p54123
sS'cpp_type'
p54124
S'unsigned int'
p54125
sS'default'
p54126
S'0'
p54127
sS'name'
p54128
S'seed'
p54129
sS'required'
p54130
I00
sS'group_name'
p54131
S'Advanced'
p54132
sa(dp54133
S'name'
p54134
S'sort_by'
p54135
sS'cpp_type'
p54136
S'MooseEnum'
p54137
sS'default'
p54138
g3
sS'description'
p54139
S'What to sort the samples by\n'
p54140
sS'required'
p54141
I01
sS'options'
p54142
S'x y z id'
p54143
sS'group_name'
p54144
Nsa(dp54145
S'description'
p54146
g3
sS'cpp_type'
p54147
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p54148
sS'default'
p54149
S'NodalValueSampler'
p54150
sS'name'
p54151
S'type'
p54152
sS'required'
p54153
I00
sS'group_name'
p54154
Nsa(dp54155
S'description'
p54156
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p54157
sS'cpp_type'
p54158
S'bool'
p54159
sS'default'
p54160
S'0'
p54161
sS'name'
p54162
S'unique_node_execute'
p54163
sS'required'
p54164
I00
sS'group_name'
p54165
Nsa(dp54166
S'description'
p54167
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54168
sS'cpp_type'
p54169
S'bool'
p54170
sS'default'
p54171
S'0'
p54172
sS'name'
p54173
S'use_displaced_mesh'
p54174
sS'required'
p54175
I00
sS'group_name'
p54176
S'Advanced'
p54177
sa(dp54178
S'description'
p54179
S'The names of the variables that this VectorPostprocessor operates on\n'
p54180
sS'cpp_type'
p54181
S'std::vector<VariableName>'
p54182
sS'default'
p54183
g3
sS'name'
p54184
S'variable'
p54185
sS'required'
p54186
I01
sS'group_name'
p54187
NsasS'name'
p54188
S'/VectorPostprocessors/NodalValueSampler'
p54189
sa(dp54190
S'description'
p54191
g3
sS'subblocks'
p54192
NsS'parameters'
p54193
(lp54194
(dp54195
S'description'
p54196
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54197
sS'cpp_type'
p54198
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p54199
sS'default'
p54200
g3
sS'name'
p54201
S'control_tags'
p54202
sS'required'
p54203
I00
sS'group_name'
p54204
S'Advanced'
p54205
sa(dp54206
S'description'
p54207
S'Set the enabled status of the MooseObject.\n'
p54208
sS'cpp_type'
p54209
S'bool'
p54210
sS'default'
p54211
S'1'
p54212
sS'name'
p54213
S'enable'
p54214
sS'required'
p54215
I00
sS'group_name'
p54216
S'Advanced'
p54217
sa(dp54218
S'name'
p54219
S'execute_on'
p54220
sS'cpp_type'
p54221
S'MultiMooseEnum'
p54222
sS'default'
p54223
S'TIMESTEP_END'
p54224
sS'description'
p54225
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p54226
sS'required'
p54227
I00
sS'options'
p54228
S'none initial linear nonlinear timestep_end timestep_begin custom'
p54229
sS'group_name'
p54230
Nsa(dp54231
S'description'
p54232
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p54233
sS'cpp_type'
p54234
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p54235
sS'default'
p54236
g3
sS'name'
p54237
S'outputs'
p54238
sS'required'
p54239
I00
sS'group_name'
p54240
S'Advanced'
p54241
sa(dp54242
S'description'
p54243
S'The points where you want to evaluate the variables\n'
p54244
sS'cpp_type'
p54245
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p54246
sS'default'
p54247
g3
sS'name'
p54248
S'points'
p54249
sS'required'
p54250
I01
sS'group_name'
p54251
Nsa(dp54252
S'name'
p54253
S'sort_by'
p54254
sS'cpp_type'
p54255
S'MooseEnum'
p54256
sS'default'
p54257
g3
sS'description'
p54258
S'What to sort the samples by\n'
p54259
sS'required'
p54260
I01
sS'options'
p54261
S'x y z id'
p54262
sS'group_name'
p54263
Nsa(dp54264
S'description'
p54265
g3
sS'cpp_type'
p54266
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p54267
sS'default'
p54268
S'PointValueSampler'
p54269
sS'name'
p54270
S'type'
p54271
sS'required'
p54272
I00
sS'group_name'
p54273
Nsa(dp54274
S'description'
p54275
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54276
sS'cpp_type'
p54277
S'bool'
p54278
sS'default'
p54279
S'0'
p54280
sS'name'
p54281
S'use_displaced_mesh'
p54282
sS'required'
p54283
I00
sS'group_name'
p54284
S'Advanced'
p54285
sa(dp54286
S'description'
p54287
S'The names of the variables that this VectorPostprocessor operates on\n'
p54288
sS'cpp_type'
p54289
S'std::vector<VariableName>'
p54290
sS'default'
p54291
g3
sS'name'
p54292
S'variable'
p54293
sS'required'
p54294
I01
sS'group_name'
p54295
NsasS'name'
p54296
S'/VectorPostprocessors/PointValueSampler'
p54297
sa(dp54298
S'description'
p54299
g3
sS'subblocks'
p54300
NsS'parameters'
p54301
(lp54302
(dp54303
S'description'
p54304
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p54305
sS'cpp_type'
p54306
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p54307
sS'default'
p54308
g3
sS'name'
p54309
S'boundary'
p54310
sS'required'
p54311
I01
sS'group_name'
p54312
Nsa(dp54313
S'description'
p54314
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54315
sS'cpp_type'
p54316
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p54317
sS'default'
p54318
g3
sS'name'
p54319
S'control_tags'
p54320
sS'required'
p54321
I00
sS'group_name'
p54322
S'Advanced'
p54323
sa(dp54324
S'description'
p54325
S'Set the enabled status of the MooseObject.\n'
p54326
sS'cpp_type'
p54327
S'bool'
p54328
sS'default'
p54329
S'1'
p54330
sS'name'
p54331
S'enable'
p54332
sS'required'
p54333
I00
sS'group_name'
p54334
S'Advanced'
p54335
sa(dp54336
S'name'
p54337
S'execute_on'
p54338
sS'cpp_type'
p54339
S'MultiMooseEnum'
p54340
sS'default'
p54341
S'TIMESTEP_END'
p54342
sS'description'
p54343
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p54344
sS'required'
p54345
I00
sS'options'
p54346
S'none initial linear nonlinear timestep_end timestep_begin custom'
p54347
sS'group_name'
p54348
Nsa(dp54349
S'description'
p54350
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p54351
sS'cpp_type'
p54352
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p54353
sS'default'
p54354
g3
sS'name'
p54355
S'outputs'
p54356
sS'required'
p54357
I00
sS'group_name'
p54358
S'Advanced'
p54359
sa(dp54360
S'name'
p54361
S'sort_by'
p54362
sS'cpp_type'
p54363
S'MooseEnum'
p54364
sS'default'
p54365
g3
sS'description'
p54366
S'What to sort the samples by\n'
p54367
sS'required'
p54368
I01
sS'options'
p54369
S'x y z id'
p54370
sS'group_name'
p54371
Nsa(dp54372
S'description'
p54373
g3
sS'cpp_type'
p54374
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p54375
sS'default'
p54376
S'SideValueSampler'
p54377
sS'name'
p54378
S'type'
p54379
sS'required'
p54380
I00
sS'group_name'
p54381
Nsa(dp54382
S'description'
p54383
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54384
sS'cpp_type'
p54385
S'bool'
p54386
sS'default'
p54387
S'0'
p54388
sS'name'
p54389
S'use_displaced_mesh'
p54390
sS'required'
p54391
I00
sS'group_name'
p54392
S'Advanced'
p54393
sa(dp54394
S'description'
p54395
S'The names of the variables that this VectorPostprocessor operates on\n'
p54396
sS'cpp_type'
p54397
S'std::vector<VariableName>'
p54398
sS'default'
p54399
g3
sS'name'
p54400
S'variable'
p54401
sS'required'
p54402
I01
sS'group_name'
p54403
NsasS'name'
p54404
S'/VectorPostprocessors/SideValueSampler'
p54405
sa(dp54406
S'description'
p54407
g3
sS'subblocks'
p54408
NsS'parameters'
p54409
(lp54410
(dp54411
S'description'
p54412
S'Number of histogram bins\n'
p54413
sS'cpp_type'
p54414
S'unsigned int'
p54415
sS'default'
p54416
S'50'
p54417
sS'name'
p54418
S'bin_number'
p54419
sS'required'
p54420
I00
sS'group_name'
p54421
Nsa(dp54422
S'description'
p54423
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54424
sS'cpp_type'
p54425
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p54426
sS'default'
p54427
g3
sS'name'
p54428
S'block'
p54429
sS'required'
p54430
I00
sS'group_name'
p54431
Nsa(dp54432
S'description'
p54433
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54434
sS'cpp_type'
p54435
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p54436
sS'default'
p54437
g3
sS'name'
p54438
S'control_tags'
p54439
sS'required'
p54440
I00
sS'group_name'
p54441
S'Advanced'
p54442
sa(dp54443
S'description'
p54444
S'Value to assign to bins into which no datapoints fall\n'
p54445
sS'cpp_type'
p54446
S'double'
p54447
sS'default'
p54448
S'0'
p54449
sS'name'
p54450
S'empty_bin_value'
p54451
sS'required'
p54452
I00
sS'group_name'
p54453
Nsa(dp54454
S'description'
p54455
S'Set the enabled status of the MooseObject.\n'
p54456
sS'cpp_type'
p54457
S'bool'
p54458
sS'default'
p54459
S'1'
p54460
sS'name'
p54461
S'enable'
p54462
sS'required'
p54463
I00
sS'group_name'
p54464
S'Advanced'
p54465
sa(dp54466
S'name'
p54467
S'execute_on'
p54468
sS'cpp_type'
p54469
S'MultiMooseEnum'
p54470
sS'default'
p54471
S'TIMESTEP_END'
p54472
sS'description'
p54473
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p54474
sS'required'
p54475
I00
sS'options'
p54476
S'none initial linear nonlinear timestep_end timestep_begin custom'
p54477
sS'group_name'
p54478
Nsa(dp54479
S'description'
p54480
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p54481
sS'cpp_type'
p54482
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p54483
sS'default'
p54484
g3
sS'name'
p54485
S'outputs'
p54486
sS'required'
p54487
I00
sS'group_name'
p54488
S'Advanced'
p54489
sa(dp54490
S'description'
p54491
S'Radius to average out to\n'
p54492
sS'cpp_type'
p54493
S'double'
p54494
sS'default'
p54495
g3
sS'name'
p54496
S'radius'
p54497
sS'required'
p54498
I01
sS'group_name'
p54499
Nsa(dp54500
S'description'
p54501
S'The seed for the master random number generator\n'
p54502
sS'cpp_type'
p54503
S'unsigned int'
p54504
sS'default'
p54505
S'0'
p54506
sS'name'
p54507
S'seed'
p54508
sS'required'
p54509
I00
sS'group_name'
p54510
S'Advanced'
p54511
sa(dp54512
S'description'
p54513
g3
sS'cpp_type'
p54514
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p54515
sS'default'
p54516
S'SphericalAverage'
p54517
sS'name'
p54518
S'type'
p54519
sS'required'
p54520
I00
sS'group_name'
p54521
Nsa(dp54522
S'description'
p54523
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54524
sS'cpp_type'
p54525
S'bool'
p54526
sS'default'
p54527
S'0'
p54528
sS'name'
p54529
S'use_displaced_mesh'
p54530
sS'required'
p54531
I00
sS'group_name'
p54532
S'Advanced'
p54533
sa(dp54534
S'description'
p54535
S'Variables to average radially\n'
p54536
sS'cpp_type'
p54537
S'std::vector<VariableName>'
p54538
sS'default'
p54539
g3
sS'name'
p54540
S'variable'
p54541
sS'required'
p54542
I00
sS'group_name'
p54543
NsasS'name'
p54544
S'/VectorPostprocessors/SphericalAverage'
p54545
sa(dp54546
S'description'
p54547
S'Outputs the values of an arbitrary user-specified set of postprocessors as a vector in the order specified by the user\n'
p54548
sS'subblocks'
p54549
NsS'parameters'
p54550
(lp54551
(dp54552
S'description'
p54553
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54554
sS'cpp_type'
p54555
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p54556
sS'default'
p54557
g3
sS'name'
p54558
S'control_tags'
p54559
sS'required'
p54560
I00
sS'group_name'
p54561
S'Advanced'
p54562
sa(dp54563
S'description'
p54564
S'Set the enabled status of the MooseObject.\n'
p54565
sS'cpp_type'
p54566
S'bool'
p54567
sS'default'
p54568
S'1'
p54569
sS'name'
p54570
S'enable'
p54571
sS'required'
p54572
I00
sS'group_name'
p54573
S'Advanced'
p54574
sa(dp54575
S'name'
p54576
S'execute_on'
p54577
sS'cpp_type'
p54578
S'MultiMooseEnum'
p54579
sS'default'
p54580
S'TIMESTEP_END'
p54581
sS'description'
p54582
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p54583
sS'required'
p54584
I00
sS'options'
p54585
S'none initial linear nonlinear timestep_end timestep_begin custom'
p54586
sS'group_name'
p54587
Nsa(dp54588
S'description'
p54589
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p54590
sS'cpp_type'
p54591
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p54592
sS'default'
p54593
g3
sS'name'
p54594
S'outputs'
p54595
sS'required'
p54596
I00
sS'group_name'
p54597
S'Advanced'
p54598
sa(dp54599
S'description'
p54600
S'The postprocessors whose values are to be reported\n'
p54601
sS'cpp_type'
p54602
S'std::__1::vector<PostprocessorName, std::__1::allocator<PostprocessorName> >'
p54603
sS'default'
p54604
g3
sS'name'
p54605
S'postprocessors'
p54606
sS'required'
p54607
I01
sS'group_name'
p54608
Nsa(dp54609
S'description'
p54610
g3
sS'cpp_type'
p54611
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p54612
sS'default'
p54613
S'VectorOfPostprocessors'
p54614
sS'name'
p54615
S'type'
p54616
sS'required'
p54617
I00
sS'group_name'
p54618
Nsa(dp54619
S'description'
p54620
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54621
sS'cpp_type'
p54622
S'bool'
p54623
sS'default'
p54624
S'0'
p54625
sS'name'
p54626
S'use_displaced_mesh'
p54627
sS'required'
p54628
I00
sS'group_name'
p54629
S'Advanced'
p54630
sasS'name'
p54631
S'/VectorPostprocessors/VectorOfPostprocessors'
p54632
sa(dp54633
S'description'
p54634
g3
sS'subblocks'
p54635
NsS'parameters'
p54636
(lp54637
(dp54638
S'description'
p54639
S'Number of histogram bins\n'
p54640
sS'cpp_type'
p54641
S'unsigned int'
p54642
sS'default'
p54643
S'50'
p54644
sS'name'
p54645
S'bin_number'
p54646
sS'required'
p54647
I00
sS'group_name'
p54648
Nsa(dp54649
S'description'
p54650
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54651
sS'cpp_type'
p54652
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p54653
sS'default'
p54654
g3
sS'name'
p54655
S'block'
p54656
sS'required'
p54657
I00
sS'group_name'
p54658
Nsa(dp54659
S'description'
p54660
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54661
sS'cpp_type'
p54662
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p54663
sS'default'
p54664
g3
sS'name'
p54665
S'control_tags'
p54666
sS'required'
p54667
I00
sS'group_name'
p54668
S'Advanced'
p54669
sa(dp54670
S'description'
p54671
S'Set the enabled status of the MooseObject.\n'
p54672
sS'cpp_type'
p54673
S'bool'
p54674
sS'default'
p54675
S'1'
p54676
sS'name'
p54677
S'enable'
p54678
sS'required'
p54679
I00
sS'group_name'
p54680
S'Advanced'
p54681
sa(dp54682
S'name'
p54683
S'execute_on'
p54684
sS'cpp_type'
p54685
S'MultiMooseEnum'
p54686
sS'default'
p54687
S'TIMESTEP_END'
p54688
sS'description'
p54689
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p54690
sS'required'
p54691
I00
sS'options'
p54692
S'none initial linear nonlinear timestep_end timestep_begin custom'
p54693
sS'group_name'
p54694
Nsa(dp54695
S'description'
p54696
S'Maximum variable value\n'
p54697
sS'cpp_type'
p54698
S'double'
p54699
sS'default'
p54700
g3
sS'name'
p54701
S'max_value'
p54702
sS'required'
p54703
I01
sS'group_name'
p54704
Nsa(dp54705
S'description'
p54706
S'Minimum variable value\n'
p54707
sS'cpp_type'
p54708
S'double'
p54709
sS'default'
p54710
g3
sS'name'
p54711
S'min_value'
p54712
sS'required'
p54713
I01
sS'group_name'
p54714
Nsa(dp54715
S'description'
p54716
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p54717
sS'cpp_type'
p54718
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p54719
sS'default'
p54720
g3
sS'name'
p54721
S'outputs'
p54722
sS'required'
p54723
I00
sS'group_name'
p54724
S'Advanced'
p54725
sa(dp54726
S'description'
p54727
S'The seed for the master random number generator\n'
p54728
sS'cpp_type'
p54729
S'unsigned int'
p54730
sS'default'
p54731
S'0'
p54732
sS'name'
p54733
S'seed'
p54734
sS'required'
p54735
I00
sS'group_name'
p54736
S'Advanced'
p54737
sa(dp54738
S'description'
p54739
g3
sS'cpp_type'
p54740
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p54741
sS'default'
p54742
S'VolumeHistogram'
p54743
sS'name'
p54744
S'type'
p54745
sS'required'
p54746
I00
sS'group_name'
p54747
Nsa(dp54748
S'description'
p54749
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54750
sS'cpp_type'
p54751
S'bool'
p54752
sS'default'
p54753
S'0'
p54754
sS'name'
p54755
S'use_displaced_mesh'
p54756
sS'required'
p54757
I00
sS'group_name'
p54758
S'Advanced'
p54759
sa(dp54760
S'description'
p54761
S'Variable to bin the volume of\n'
p54762
sS'cpp_type'
p54763
S'std::vector<VariableName>'
p54764
sS'default'
p54765
g3
sS'name'
p54766
S'variable'
p54767
sS'required'
p54768
I00
sS'group_name'
p54769
NsasS'name'
p54770
S'/VectorPostprocessors/VolumeHistogram'
p54771
sasS'parameters'
p54772
NsS'name'
p54773
S'/VectorPostprocessors'
p54774
sa.