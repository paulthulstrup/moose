(lp0
(dp1
S'description'
p2
S''
p3
sS'subblocks'
p4
(lp5
(dp6
S'description'
p7
g3
sS'subblocks'
p8
(lp9
(dp10
S'description'
p11
g3
sS'subblocks'
p12
NsS'parameters'
p13
(lp14
(dp15
S'description'
p16
S'The block id where this object lives.\n'
p17
sS'cpp_type'
p18
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p19
sS'default'
p20
g3
sS'name'
p21
S'block'
p22
sS'required'
p23
I00
sS'group_name'
p24
Nsa(dp25
S'description'
p26
S'A string representing the Moose Object that will be built by this Action\n'
p27
sS'cpp_type'
p28
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29
sS'default'
p30
g3
sS'name'
p31
S'type'
p32
sS'required'
p33
I01
sS'group_name'
p34
NsasS'name'
p35
S'/Adaptivity/Indicators/*'
p36
sa(dp37
S'description'
p38
g3
sS'subblocks'
p39
NsS'parameters'
p40
(lp41
(dp42
S'description'
p43
S'block ID or name where the object works\n'
p44
sS'cpp_type'
p45
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p46
sS'default'
p47
S'ANY_BLOCK_ID'
p48
sS'name'
p49
S'block'
p50
sS'required'
p51
I00
sS'group_name'
p52
Nsa(dp53
S'description'
p54
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55
sS'cpp_type'
p56
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p57
sS'default'
p58
g3
sS'name'
p59
S'control_tags'
p60
sS'required'
p61
I00
sS'group_name'
p62
S'Advanced'
p63
sa(dp64
S'description'
p65
S'Set the enabled status of the MooseObject.\n'
p66
sS'cpp_type'
p67
S'bool'
p68
sS'default'
p69
S'1'
p70
sS'name'
p71
S'enable'
p72
sS'required'
p73
I00
sS'group_name'
p74
S'Advanced'
p75
sa(dp76
S'description'
p77
S'The analytic solution to compare against\n'
p78
sS'cpp_type'
p79
S'FunctionName'
p80
sS'default'
p81
g3
sS'name'
p82
S'function'
p83
sS'required'
p84
I01
sS'group_name'
p85
Nsa(dp86
S'description'
p87
S'Determines whether this object is calculated using an implicit or explicit form\n'
p88
sS'cpp_type'
p89
S'bool'
p90
sS'default'
p91
S'1'
p92
sS'name'
p93
S'implicit'
p94
sS'required'
p95
I00
sS'group_name'
p96
S'Advanced'
p97
sa(dp98
S'description'
p99
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p100
sS'cpp_type'
p101
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p102
sS'default'
p103
g3
sS'name'
p104
S'outputs'
p105
sS'required'
p106
I00
sS'group_name'
p107
S'Advanced'
p108
sa(dp109
S'description'
p110
g3
sS'cpp_type'
p111
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p112
sS'default'
p113
S'AnalyticalIndicator'
p114
sS'name'
p115
S'type'
p116
sS'required'
p117
I00
sS'group_name'
p118
Nsa(dp119
S'description'
p120
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121
sS'cpp_type'
p122
S'bool'
p123
sS'default'
p124
S'0'
p125
sS'name'
p126
S'use_displaced_mesh'
p127
sS'required'
p128
I00
sS'group_name'
p129
S'Advanced'
p130
sa(dp131
S'description'
p132
S'The name of the variable that this Indicator operates on\n'
p133
sS'cpp_type'
p134
S'VariableName'
p135
sS'default'
p136
g3
sS'name'
p137
S'variable'
p138
sS'required'
p139
I01
sS'group_name'
p140
NsasS'name'
p141
S'/Adaptivity/Indicators/AnalyticalIndicator'
p142
sa(dp143
S'description'
p144
g3
sS'subblocks'
p145
NsS'parameters'
p146
(lp147
(dp148
S'description'
p149
S'The list of block ids (SubdomainID) that this object will be applied\n'
p150
sS'cpp_type'
p151
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p152
sS'default'
p153
g3
sS'name'
p154
S'block'
p155
sS'required'
p156
I00
sS'group_name'
p157
Nsa(dp158
S'description'
p159
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p160
sS'cpp_type'
p161
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p162
sS'default'
p163
g3
sS'name'
p164
S'control_tags'
p165
sS'required'
p166
I00
sS'group_name'
p167
S'Advanced'
p168
sa(dp169
S'description'
p170
S'Set the enabled status of the MooseObject.\n'
p171
sS'cpp_type'
p172
S'bool'
p173
sS'default'
p174
S'1'
p175
sS'name'
p176
S'enable'
p177
sS'required'
p178
I00
sS'group_name'
p179
S'Advanced'
p180
sa(dp181
S'description'
p182
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p183
sS'cpp_type'
p184
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p185
sS'default'
p186
g3
sS'name'
p187
S'outputs'
p188
sS'required'
p189
I00
sS'group_name'
p190
S'Advanced'
p191
sa(dp192
S'description'
p193
S'Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n'
p194
sS'cpp_type'
p195
S'bool'
p196
sS'default'
p197
S'0'
p198
sS'name'
p199
S'scale_by_flux_faces'
p200
sS'required'
p201
I00
sS'group_name'
p202
Nsa(dp203
S'description'
p204
g3
sS'cpp_type'
p205
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p206
sS'default'
p207
S'GradientJumpIndicator'
p208
sS'name'
p209
S'type'
p210
sS'required'
p211
I00
sS'group_name'
p212
Nsa(dp213
S'description'
p214
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p215
sS'cpp_type'
p216
S'bool'
p217
sS'default'
p218
S'0'
p219
sS'name'
p220
S'use_displaced_mesh'
p221
sS'required'
p222
I00
sS'group_name'
p223
S'Advanced'
p224
sa(dp225
S'description'
p226
S'The name of the variable that this side indicator applies to\n'
p227
sS'cpp_type'
p228
S'VariableName'
p229
sS'default'
p230
g3
sS'name'
p231
S'variable'
p232
sS'required'
p233
I01
sS'group_name'
p234
NsasS'name'
p235
S'/Adaptivity/Indicators/GradientJumpIndicator'
p236
sa(dp237
S'description'
p238
g3
sS'subblocks'
p239
NsS'parameters'
p240
(lp241
(dp242
S'description'
p243
S'The list of block ids (SubdomainID) that this object will be applied\n'
p244
sS'cpp_type'
p245
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p246
sS'default'
p247
g3
sS'name'
p248
S'block'
p249
sS'required'
p250
I00
sS'group_name'
p251
Nsa(dp252
S'description'
p253
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p254
sS'cpp_type'
p255
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p256
sS'default'
p257
g3
sS'name'
p258
S'control_tags'
p259
sS'required'
p260
I00
sS'group_name'
p261
S'Advanced'
p262
sa(dp263
S'description'
p264
S'Set the enabled status of the MooseObject.\n'
p265
sS'cpp_type'
p266
S'bool'
p267
sS'default'
p268
S'1'
p269
sS'name'
p270
S'enable'
p271
sS'required'
p272
I00
sS'group_name'
p273
S'Advanced'
p274
sa(dp275
S'description'
p276
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p277
sS'cpp_type'
p278
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p279
sS'default'
p280
g3
sS'name'
p281
S'outputs'
p282
sS'required'
p283
I00
sS'group_name'
p284
S'Advanced'
p285
sa(dp286
S'description'
p287
S'Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n'
p288
sS'cpp_type'
p289
S'bool'
p290
sS'default'
p291
S'0'
p292
sS'name'
p293
S'scale_by_flux_faces'
p294
sS'required'
p295
I00
sS'group_name'
p296
Nsa(dp297
S'description'
p298
g3
sS'cpp_type'
p299
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p300
sS'default'
p301
S'LaplacianJumpIndicator'
p302
sS'name'
p303
S'type'
p304
sS'required'
p305
I00
sS'group_name'
p306
Nsa(dp307
S'description'
p308
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p309
sS'cpp_type'
p310
S'bool'
p311
sS'default'
p312
S'0'
p313
sS'name'
p314
S'use_displaced_mesh'
p315
sS'required'
p316
I00
sS'group_name'
p317
S'Advanced'
p318
sa(dp319
S'description'
p320
S'The name of the variable that this side indicator applies to\n'
p321
sS'cpp_type'
p322
S'VariableName'
p323
sS'default'
p324
g3
sS'name'
p325
S'variable'
p326
sS'required'
p327
I01
sS'group_name'
p328
NsasS'name'
p329
S'/Adaptivity/Indicators/LaplacianJumpIndicator'
p330
sasS'parameters'
p331
NsS'name'
p332
S'/Adaptivity/Indicators'
p333
sa(dp334
S'description'
p335
g3
sS'subblocks'
p336
(lp337
(dp338
S'description'
p339
g3
sS'subblocks'
p340
NsS'parameters'
p341
(lp342
(dp343
S'description'
p344
S'The block id where this object lives.\n'
p345
sS'cpp_type'
p346
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p347
sS'default'
p348
g3
sS'name'
p349
S'block'
p350
sS'required'
p351
I00
sS'group_name'
p352
Nsa(dp353
S'description'
p354
S'A string representing the Moose Object that will be built by this Action\n'
p355
sS'cpp_type'
p356
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p357
sS'default'
p358
g3
sS'name'
p359
S'type'
p360
sS'required'
p361
I01
sS'group_name'
p362
NsasS'name'
p363
S'/Adaptivity/Markers/*'
p364
sa(dp365
S'description'
p366
S"Marks the region inside and outside of a 'box' domain for refinement or coarsening.\n"
p367
sS'subblocks'
p368
NsS'parameters'
p369
(lp370
(dp371
S'description'
p372
S'The list of block ids (SubdomainID) that this object will be applied\n'
p373
sS'cpp_type'
p374
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p375
sS'default'
p376
g3
sS'name'
p377
S'block'
p378
sS'required'
p379
I00
sS'group_name'
p380
Nsa(dp381
S'description'
p382
S'The bottom left point (in x,y,z with spaces in-between).\n'
p383
sS'cpp_type'
p384
S'libMesh::VectorValue<double>'
p385
sS'default'
p386
g3
sS'name'
p387
S'bottom_left'
p388
sS'required'
p389
I01
sS'group_name'
p390
Nsa(dp391
S'description'
p392
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p393
sS'cpp_type'
p394
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p395
sS'default'
p396
g3
sS'name'
p397
S'control_tags'
p398
sS'required'
p399
I00
sS'group_name'
p400
S'Advanced'
p401
sa(dp402
S'description'
p403
S'Set the enabled status of the MooseObject.\n'
p404
sS'cpp_type'
p405
S'bool'
p406
sS'default'
p407
S'1'
p408
sS'name'
p409
S'enable'
p410
sS'required'
p411
I00
sS'group_name'
p412
S'Advanced'
p413
sa(dp414
S'name'
p415
S'inside'
p416
sS'cpp_type'
p417
S'MooseEnum'
p418
sS'default'
p419
g3
sS'description'
p420
S'How to mark elements inside the box.\n'
p421
sS'required'
p422
I01
sS'options'
p423
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p424
sS'group_name'
p425
Nsa(dp426
S'description'
p427
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p428
sS'cpp_type'
p429
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p430
sS'default'
p431
g3
sS'name'
p432
S'outputs'
p433
sS'required'
p434
I00
sS'group_name'
p435
S'Advanced'
p436
sa(dp437
S'name'
p438
S'outside'
p439
sS'cpp_type'
p440
S'MooseEnum'
p441
sS'default'
p442
g3
sS'description'
p443
S'How to mark elements outside the box.\n'
p444
sS'required'
p445
I01
sS'options'
p446
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p447
sS'group_name'
p448
Nsa(dp449
S'description'
p450
S'The bottom left point (in x,y,z with spaces in-between).\n'
p451
sS'cpp_type'
p452
S'libMesh::VectorValue<double>'
p453
sS'default'
p454
g3
sS'name'
p455
S'top_right'
p456
sS'required'
p457
I01
sS'group_name'
p458
Nsa(dp459
S'description'
p460
g3
sS'cpp_type'
p461
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p462
sS'default'
p463
S'BoxMarker'
p464
sS'name'
p465
S'type'
p466
sS'required'
p467
I00
sS'group_name'
p468
Nsa(dp469
S'description'
p470
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p471
sS'cpp_type'
p472
S'bool'
p473
sS'default'
p474
S'0'
p475
sS'name'
p476
S'use_displaced_mesh'
p477
sS'required'
p478
I00
sS'group_name'
p479
S'Advanced'
p480
sasS'name'
p481
S'/Adaptivity/Markers/BoxMarker'
p482
sa(dp483
S'description'
p484
S'A marker that converts many markers into a single marker by considering the maximum value of the listed markers (i.e., refinement takes precedent).\n'
p485
sS'subblocks'
p486
NsS'parameters'
p487
(lp488
(dp489
S'description'
p490
S'The list of block ids (SubdomainID) that this object will be applied\n'
p491
sS'cpp_type'
p492
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p493
sS'default'
p494
g3
sS'name'
p495
S'block'
p496
sS'required'
p497
I00
sS'group_name'
p498
Nsa(dp499
S'description'
p500
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p501
sS'cpp_type'
p502
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p503
sS'default'
p504
g3
sS'name'
p505
S'control_tags'
p506
sS'required'
p507
I00
sS'group_name'
p508
S'Advanced'
p509
sa(dp510
S'description'
p511
S'Set the enabled status of the MooseObject.\n'
p512
sS'cpp_type'
p513
S'bool'
p514
sS'default'
p515
S'1'
p516
sS'name'
p517
S'enable'
p518
sS'required'
p519
I00
sS'group_name'
p520
S'Advanced'
p521
sa(dp522
S'description'
p523
S'A list of marker names to combine into a single marker.\n'
p524
sS'cpp_type'
p525
S'std::__1::vector<MarkerName, std::__1::allocator<MarkerName> >'
p526
sS'default'
p527
g3
sS'name'
p528
S'markers'
p529
sS'required'
p530
I01
sS'group_name'
p531
Nsa(dp532
S'description'
p533
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p534
sS'cpp_type'
p535
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p536
sS'default'
p537
g3
sS'name'
p538
S'outputs'
p539
sS'required'
p540
I00
sS'group_name'
p541
S'Advanced'
p542
sa(dp543
S'description'
p544
g3
sS'cpp_type'
p545
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p546
sS'default'
p547
S'ComboMarker'
p548
sS'name'
p549
S'type'
p550
sS'required'
p551
I00
sS'group_name'
p552
Nsa(dp553
S'description'
p554
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p555
sS'cpp_type'
p556
S'bool'
p557
sS'default'
p558
S'0'
p559
sS'name'
p560
S'use_displaced_mesh'
p561
sS'required'
p562
I00
sS'group_name'
p563
S'Advanced'
p564
sasS'name'
p565
S'/Adaptivity/Markers/ComboMarker'
p566
sa(dp567
S'description'
p568
S'Marks elements for refinement or coarsening based on the fraction of the total error from the supplied indicator.\n'
p569
sS'subblocks'
p570
NsS'parameters'
p571
(lp572
(dp573
S'description'
p574
S'The list of block ids (SubdomainID) that this object will be applied\n'
p575
sS'cpp_type'
p576
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p577
sS'default'
p578
g3
sS'name'
p579
S'block'
p580
sS'required'
p581
I00
sS'group_name'
p582
Nsa(dp583
S'description'
p584
S'Elements within this percentage of the min error will be coarsened.  Must be between 0 and 1!\n'
p585
sS'cpp_type'
p586
S'double'
p587
sS'default'
p588
S'0'
p589
sS'name'
p590
S'coarsen'
p591
sS'required'
p592
I00
sS'group_name'
p593
Nsa(dp594
S'description'
p595
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p596
sS'cpp_type'
p597
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p598
sS'default'
p599
g3
sS'name'
p600
S'control_tags'
p601
sS'required'
p602
I00
sS'group_name'
p603
S'Advanced'
p604
sa(dp605
S'description'
p606
S'Set the enabled status of the MooseObject.\n'
p607
sS'cpp_type'
p608
S'bool'
p609
sS'default'
p610
S'1'
p611
sS'name'
p612
S'enable'
p613
sS'required'
p614
I00
sS'group_name'
p615
S'Advanced'
p616
sa(dp617
S'description'
p618
S'The name of the Indicator that this Marker uses.\n'
p619
sS'cpp_type'
p620
S'IndicatorName'
p621
sS'default'
p622
g3
sS'name'
p623
S'indicator'
p624
sS'required'
p625
I01
sS'group_name'
p626
Nsa(dp627
S'description'
p628
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p629
sS'cpp_type'
p630
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p631
sS'default'
p632
g3
sS'name'
p633
S'outputs'
p634
sS'required'
p635
I00
sS'group_name'
p636
S'Advanced'
p637
sa(dp638
S'description'
p639
S'Elements within this percentage of the max error will be refined.  Must be between 0 and 1!\n'
p640
sS'cpp_type'
p641
S'double'
p642
sS'default'
p643
S'0'
p644
sS'name'
p645
S'refine'
p646
sS'required'
p647
I00
sS'group_name'
p648
Nsa(dp649
S'description'
p650
g3
sS'cpp_type'
p651
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p652
sS'default'
p653
S'ErrorFractionMarker'
p654
sS'name'
p655
S'type'
p656
sS'required'
p657
I00
sS'group_name'
p658
Nsa(dp659
S'description'
p660
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p661
sS'cpp_type'
p662
S'bool'
p663
sS'default'
p664
S'0'
p665
sS'name'
p666
S'use_displaced_mesh'
p667
sS'required'
p668
I00
sS'group_name'
p669
S'Advanced'
p670
sasS'name'
p671
S'/Adaptivity/Markers/ErrorFractionMarker'
p672
sa(dp673
S'description'
p674
S'Coarsen or refine elements based on an absolute tolerance allowed from the supplied indicator.\n'
p675
sS'subblocks'
p676
NsS'parameters'
p677
(lp678
(dp679
S'description'
p680
S'The list of block ids (SubdomainID) that this object will be applied\n'
p681
sS'cpp_type'
p682
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p683
sS'default'
p684
g3
sS'name'
p685
S'block'
p686
sS'required'
p687
I00
sS'group_name'
p688
Nsa(dp689
S'description'
p690
S'Elements with error less than this will be coarsened.\n'
p691
sS'cpp_type'
p692
S'double'
p693
sS'default'
p694
S'0'
p695
sS'name'
p696
S'coarsen'
p697
sS'required'
p698
I00
sS'group_name'
p699
Nsa(dp700
S'description'
p701
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p702
sS'cpp_type'
p703
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p704
sS'default'
p705
g3
sS'name'
p706
S'control_tags'
p707
sS'required'
p708
I00
sS'group_name'
p709
S'Advanced'
p710
sa(dp711
S'description'
p712
S'Set the enabled status of the MooseObject.\n'
p713
sS'cpp_type'
p714
S'bool'
p715
sS'default'
p716
S'1'
p717
sS'name'
p718
S'enable'
p719
sS'required'
p720
I00
sS'group_name'
p721
S'Advanced'
p722
sa(dp723
S'description'
p724
S'The name of the Indicator that this Marker uses.\n'
p725
sS'cpp_type'
p726
S'IndicatorName'
p727
sS'default'
p728
g3
sS'name'
p729
S'indicator'
p730
sS'required'
p731
I01
sS'group_name'
p732
Nsa(dp733
S'description'
p734
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p735
sS'cpp_type'
p736
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p737
sS'default'
p738
g3
sS'name'
p739
S'outputs'
p740
sS'required'
p741
I00
sS'group_name'
p742
S'Advanced'
p743
sa(dp744
S'description'
p745
S'Elements with error more than this will be refined.\n'
p746
sS'cpp_type'
p747
S'double'
p748
sS'default'
p749
S'1.79769e+308'
p750
sS'name'
p751
S'refine'
p752
sS'required'
p753
I00
sS'group_name'
p754
Nsa(dp755
S'description'
p756
g3
sS'cpp_type'
p757
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p758
sS'default'
p759
S'ErrorToleranceMarker'
p760
sS'name'
p761
S'type'
p762
sS'required'
p763
I00
sS'group_name'
p764
Nsa(dp765
S'description'
p766
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p767
sS'cpp_type'
p768
S'bool'
p769
sS'default'
p770
S'0'
p771
sS'name'
p772
S'use_displaced_mesh'
p773
sS'required'
p774
I00
sS'group_name'
p775
S'Advanced'
p776
sasS'name'
p777
S'/Adaptivity/Markers/ErrorToleranceMarker'
p778
sa(dp779
S'description'
p780
S'Marks inside and outside a box that can have arbitrary orientation and center point.\n'
p781
sS'subblocks'
p782
NsS'parameters'
p783
(lp784
(dp785
S'description'
p786
S'The list of block ids (SubdomainID) that this object will be applied\n'
p787
sS'cpp_type'
p788
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p789
sS'default'
p790
g3
sS'name'
p791
S'block'
p792
sS'required'
p793
I00
sS'group_name'
p794
Nsa(dp795
S'description'
p796
S"The center (many people spell this 'center') of the box.\n"
p797
sS'cpp_type'
p798
S'libMesh::Point'
p799
sS'default'
p800
g3
sS'name'
p801
S'center'
p802
sS'required'
p803
I01
sS'group_name'
p804
Nsa(dp805
S'description'
p806
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p807
sS'cpp_type'
p808
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p809
sS'default'
p810
g3
sS'name'
p811
S'control_tags'
p812
sS'required'
p813
I00
sS'group_name'
p814
S'Advanced'
p815
sa(dp816
S'description'
p817
S'Set the enabled status of the MooseObject.\n'
p818
sS'cpp_type'
p819
S'bool'
p820
sS'default'
p821
S'1'
p822
sS'name'
p823
S'enable'
p824
sS'required'
p825
I00
sS'group_name'
p826
S'Advanced'
p827
sa(dp828
S'description'
p829
S'The height of the box\n'
p830
sS'cpp_type'
p831
S'double'
p832
sS'default'
p833
g3
sS'name'
p834
S'height'
p835
sS'required'
p836
I01
sS'group_name'
p837
Nsa(dp838
S'name'
p839
S'inside'
p840
sS'cpp_type'
p841
S'MooseEnum'
p842
sS'default'
p843
g3
sS'description'
p844
S'How to mark elements inside the box.\n'
p845
sS'required'
p846
I01
sS'options'
p847
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p848
sS'group_name'
p849
Nsa(dp850
S'description'
p851
S'The length of the box\n'
p852
sS'cpp_type'
p853
S'double'
p854
sS'default'
p855
g3
sS'name'
p856
S'length'
p857
sS'required'
p858
I01
sS'group_name'
p859
Nsa(dp860
S'description'
p861
S'The direction along which the length is oriented (must be perpendicular to width_direction).\n'
p862
sS'cpp_type'
p863
S'libMesh::VectorValue<double>'
p864
sS'default'
p865
g3
sS'name'
p866
S'length_direction'
p867
sS'required'
p868
I01
sS'group_name'
p869
Nsa(dp870
S'description'
p871
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p872
sS'cpp_type'
p873
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p874
sS'default'
p875
g3
sS'name'
p876
S'outputs'
p877
sS'required'
p878
I00
sS'group_name'
p879
S'Advanced'
p880
sa(dp881
S'name'
p882
S'outside'
p883
sS'cpp_type'
p884
S'MooseEnum'
p885
sS'default'
p886
g3
sS'description'
p887
S'How to mark elements outside the box.\n'
p888
sS'required'
p889
I01
sS'options'
p890
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p891
sS'group_name'
p892
Nsa(dp893
S'description'
p894
g3
sS'cpp_type'
p895
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p896
sS'default'
p897
S'OrientedBoxMarker'
p898
sS'name'
p899
S'type'
p900
sS'required'
p901
I00
sS'group_name'
p902
Nsa(dp903
S'description'
p904
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p905
sS'cpp_type'
p906
S'bool'
p907
sS'default'
p908
S'0'
p909
sS'name'
p910
S'use_displaced_mesh'
p911
sS'required'
p912
I00
sS'group_name'
p913
S'Advanced'
p914
sa(dp915
S'description'
p916
S'The width of the box\n'
p917
sS'cpp_type'
p918
S'double'
p919
sS'default'
p920
g3
sS'name'
p921
S'width'
p922
sS'required'
p923
I01
sS'group_name'
p924
Nsa(dp925
S'description'
p926
S'The direction along which the width is oriented.\n'
p927
sS'cpp_type'
p928
S'libMesh::VectorValue<double>'
p929
sS'default'
p930
g3
sS'name'
p931
S'width_direction'
p932
sS'required'
p933
I01
sS'group_name'
p934
NsasS'name'
p935
S'/Adaptivity/Markers/OrientedBoxMarker'
p936
sa(dp937
S'description'
p938
S'Uniformly mark all elements for refinement or coarsening.\n'
p939
sS'subblocks'
p940
NsS'parameters'
p941
(lp942
(dp943
S'description'
p944
S'The list of block ids (SubdomainID) that this object will be applied\n'
p945
sS'cpp_type'
p946
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p947
sS'default'
p948
g3
sS'name'
p949
S'block'
p950
sS'required'
p951
I00
sS'group_name'
p952
Nsa(dp953
S'description'
p954
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p955
sS'cpp_type'
p956
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p957
sS'default'
p958
g3
sS'name'
p959
S'control_tags'
p960
sS'required'
p961
I00
sS'group_name'
p962
S'Advanced'
p963
sa(dp964
S'description'
p965
S'Set the enabled status of the MooseObject.\n'
p966
sS'cpp_type'
p967
S'bool'
p968
sS'default'
p969
S'1'
p970
sS'name'
p971
S'enable'
p972
sS'required'
p973
I00
sS'group_name'
p974
S'Advanced'
p975
sa(dp976
S'name'
p977
S'mark'
p978
sS'cpp_type'
p979
S'MooseEnum'
p980
sS'default'
p981
g3
sS'description'
p982
S'How to mark elements.\n'
p983
sS'required'
p984
I01
sS'options'
p985
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p986
sS'group_name'
p987
Nsa(dp988
S'description'
p989
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p990
sS'cpp_type'
p991
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p992
sS'default'
p993
g3
sS'name'
p994
S'outputs'
p995
sS'required'
p996
I00
sS'group_name'
p997
S'Advanced'
p998
sa(dp999
S'description'
p1000
g3
sS'cpp_type'
p1001
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1002
sS'default'
p1003
S'UniformMarker'
p1004
sS'name'
p1005
S'type'
p1006
sS'required'
p1007
I00
sS'group_name'
p1008
Nsa(dp1009
S'description'
p1010
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1011
sS'cpp_type'
p1012
S'bool'
p1013
sS'default'
p1014
S'0'
p1015
sS'name'
p1016
S'use_displaced_mesh'
p1017
sS'required'
p1018
I00
sS'group_name'
p1019
S'Advanced'
p1020
sasS'name'
p1021
S'/Adaptivity/Markers/UniformMarker'
p1022
sa(dp1023
S'description'
p1024
S'Mark elements for adaptivity based on the supplied upper and lower bounds and the specified variable.\n'
p1025
sS'subblocks'
p1026
NsS'parameters'
p1027
(lp1028
(dp1029
S'description'
p1030
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1031
sS'cpp_type'
p1032
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1033
sS'default'
p1034
g3
sS'name'
p1035
S'block'
p1036
sS'required'
p1037
I00
sS'group_name'
p1038
Nsa(dp1039
S'description'
p1040
S'A buffer zone value added to both ends of the range where a third_state marker can be returned.\n'
p1041
sS'cpp_type'
p1042
S'double'
p1043
sS'default'
p1044
S'0'
p1045
sS'name'
p1046
S'buffer_size'
p1047
sS'required'
p1048
I00
sS'group_name'
p1049
Nsa(dp1050
S'description'
p1051
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1052
sS'cpp_type'
p1053
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p1054
sS'default'
p1055
g3
sS'name'
p1056
S'control_tags'
p1057
sS'required'
p1058
I00
sS'group_name'
p1059
S'Advanced'
p1060
sa(dp1061
S'description'
p1062
S'Set the enabled status of the MooseObject.\n'
p1063
sS'cpp_type'
p1064
S'bool'
p1065
sS'default'
p1066
S'1'
p1067
sS'name'
p1068
S'enable'
p1069
sS'required'
p1070
I00
sS'group_name'
p1071
S'Advanced'
p1072
sa(dp1073
S'description'
p1074
S'If this is true then values inside the range will be coarsened, and values outside the range will be refined.\n'
p1075
sS'cpp_type'
p1076
S'bool'
p1077
sS'default'
p1078
S'0'
p1079
sS'name'
p1080
S'invert'
p1081
sS'required'
p1082
I00
sS'group_name'
p1083
Nsa(dp1084
S'description'
p1085
S'The lower bound value for the range.\n'
p1086
sS'cpp_type'
p1087
S'double'
p1088
sS'default'
p1089
g3
sS'name'
p1090
S'lower_bound'
p1091
sS'required'
p1092
I01
sS'group_name'
p1093
Nsa(dp1094
S'description'
p1095
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p1096
sS'cpp_type'
p1097
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p1098
sS'default'
p1099
g3
sS'name'
p1100
S'outputs'
p1101
sS'required'
p1102
I00
sS'group_name'
p1103
S'Advanced'
p1104
sa(dp1105
S'name'
p1106
S'third_state'
p1107
sS'cpp_type'
p1108
S'MooseEnum'
p1109
sS'default'
p1110
S'DONT_MARK'
p1111
sS'description'
p1112
S'The Marker state to apply to values in the buffer zone (both ends of the range).\n'
p1113
sS'required'
p1114
I00
sS'options'
p1115
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p1116
sS'group_name'
p1117
Nsa(dp1118
S'description'
p1119
g3
sS'cpp_type'
p1120
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1121
sS'default'
p1122
S'ValueRangeMarker'
p1123
sS'name'
p1124
S'type'
p1125
sS'required'
p1126
I00
sS'group_name'
p1127
Nsa(dp1128
S'description'
p1129
S'The upper bound value for the range.\n'
p1130
sS'cpp_type'
p1131
S'double'
p1132
sS'default'
p1133
g3
sS'name'
p1134
S'upper_bound'
p1135
sS'required'
p1136
I01
sS'group_name'
p1137
Nsa(dp1138
S'description'
p1139
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1140
sS'cpp_type'
p1141
S'bool'
p1142
sS'default'
p1143
S'0'
p1144
sS'name'
p1145
S'use_displaced_mesh'
p1146
sS'required'
p1147
I00
sS'group_name'
p1148
S'Advanced'
p1149
sa(dp1150
S'description'
p1151
S'The variable whose values are used in this marker.\n'
p1152
sS'cpp_type'
p1153
S'std::vector<VariableName>'
p1154
sS'default'
p1155
g3
sS'name'
p1156
S'variable'
p1157
sS'required'
p1158
I01
sS'group_name'
p1159
NsasS'name'
p1160
S'/Adaptivity/Markers/ValueRangeMarker'
p1161
sa(dp1162
S'description'
p1163
S'The the refinement state based on a threshold value compared to the specified variable.\n'
p1164
sS'subblocks'
p1165
NsS'parameters'
p1166
(lp1167
(dp1168
S'description'
p1169
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1170
sS'cpp_type'
p1171
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1172
sS'default'
p1173
g3
sS'name'
p1174
S'block'
p1175
sS'required'
p1176
I00
sS'group_name'
p1177
Nsa(dp1178
S'description'
p1179
S'The threshold value for coarsening.  Elements with variable values beyond this will be marked for coarsening.\n'
p1180
sS'cpp_type'
p1181
S'double'
p1182
sS'default'
p1183
g3
sS'name'
p1184
S'coarsen'
p1185
sS'required'
p1186
I00
sS'group_name'
p1187
Nsa(dp1188
S'description'
p1189
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1190
sS'cpp_type'
p1191
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p1192
sS'default'
p1193
g3
sS'name'
p1194
S'control_tags'
p1195
sS'required'
p1196
I00
sS'group_name'
p1197
S'Advanced'
p1198
sa(dp1199
S'description'
p1200
S'Set the enabled status of the MooseObject.\n'
p1201
sS'cpp_type'
p1202
S'bool'
p1203
sS'default'
p1204
S'1'
p1205
sS'name'
p1206
S'enable'
p1207
sS'required'
p1208
I00
sS'group_name'
p1209
S'Advanced'
p1210
sa(dp1211
S'description'
p1212
S"If this is true then values _below_ 'refine' will be refined and _above_ 'coarsen' will be coarsened.\n"
p1213
sS'cpp_type'
p1214
S'bool'
p1215
sS'default'
p1216
S'0'
p1217
sS'name'
p1218
S'invert'
p1219
sS'required'
p1220
I00
sS'group_name'
p1221
Nsa(dp1222
S'description'
p1223
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p1224
sS'cpp_type'
p1225
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p1226
sS'default'
p1227
g3
sS'name'
p1228
S'outputs'
p1229
sS'required'
p1230
I00
sS'group_name'
p1231
S'Advanced'
p1232
sa(dp1233
S'description'
p1234
S'The threshold value for refinement.  Elements with variable values beyond this will be marked for refinement.\n'
p1235
sS'cpp_type'
p1236
S'double'
p1237
sS'default'
p1238
g3
sS'name'
p1239
S'refine'
p1240
sS'required'
p1241
I00
sS'group_name'
p1242
Nsa(dp1243
S'name'
p1244
S'third_state'
p1245
sS'cpp_type'
p1246
S'MooseEnum'
p1247
sS'default'
p1248
S'DONT_MARK'
p1249
sS'description'
p1250
S'The Marker state to apply to values falling in-between the coarsen and refine thresholds.\n'
p1251
sS'required'
p1252
I00
sS'options'
p1253
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p1254
sS'group_name'
p1255
Nsa(dp1256
S'description'
p1257
g3
sS'cpp_type'
p1258
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1259
sS'default'
p1260
S'ValueThresholdMarker'
p1261
sS'name'
p1262
S'type'
p1263
sS'required'
p1264
I00
sS'group_name'
p1265
Nsa(dp1266
S'description'
p1267
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1268
sS'cpp_type'
p1269
S'bool'
p1270
sS'default'
p1271
S'0'
p1272
sS'name'
p1273
S'use_displaced_mesh'
p1274
sS'required'
p1275
I00
sS'group_name'
p1276
S'Advanced'
p1277
sa(dp1278
S'description'
p1279
S"The values of this variable will be compared to 'refine' and 'coarsen' to see what should be done with the element\n"
p1280
sS'cpp_type'
p1281
S'std::vector<VariableName>'
p1282
sS'default'
p1283
g3
sS'name'
p1284
S'variable'
p1285
sS'required'
p1286
I01
sS'group_name'
p1287
NsasS'name'
p1288
S'/Adaptivity/Markers/ValueThresholdMarker'
p1289
sasS'parameters'
p1290
NsS'name'
p1291
S'/Adaptivity/Markers'
p1292
sasS'parameters'
p1293
(lp1294
(dp1295
S'description'
p1296
S'The number of adaptive steps to use when on each timestep during a Transient simulation.\n'
p1297
sS'cpp_type'
p1298
S'unsigned int'
p1299
sS'default'
p1300
S'1'
p1301
sS'name'
p1302
S'cycles_per_step'
p1303
sS'required'
p1304
I00
sS'group_name'
p1305
Nsa(dp1306
S'description'
p1307
S'The name of the Marker to use to adapt the mesh during initial refinement.\n'
p1308
sS'cpp_type'
p1309
S'MarkerName'
p1310
sS'default'
p1311
g3
sS'name'
p1312
S'initial_marker'
p1313
sS'required'
p1314
I00
sS'group_name'
p1315
Nsa(dp1316
S'description'
p1317
S'The number of adaptive steps to do based on the initial condition.\n'
p1318
sS'cpp_type'
p1319
S'unsigned int'
p1320
sS'default'
p1321
S'0'
p1322
sS'name'
p1323
S'initial_steps'
p1324
sS'required'
p1325
I00
sS'group_name'
p1326
Nsa(dp1327
S'description'
p1328
S'The name of the Marker to use to actually adapt the mesh.\n'
p1329
sS'cpp_type'
p1330
S'MarkerName'
p1331
sS'default'
p1332
g3
sS'name'
p1333
S'marker'
p1334
sS'required'
p1335
I00
sS'group_name'
p1336
Nsa(dp1337
S'description'
p1338
S'Maximum number of times a single element can be refined. If 0 then infinite.\n'
p1339
sS'cpp_type'
p1340
S'unsigned int'
p1341
sS'default'
p1342
S'0'
p1343
sS'name'
p1344
S'max_h_level'
p1345
sS'required'
p1346
I00
sS'group_name'
p1347
Nsa(dp1348
S'description'
p1349
S'Recompute markers during adaptivity cycles\n'
p1350
sS'cpp_type'
p1351
S'bool'
p1352
sS'default'
p1353
S'0'
p1354
sS'name'
p1355
S'recompute_markers_during_cycles'
p1356
sS'required'
p1357
I00
sS'group_name'
p1358
Nsa(dp1359
S'description'
p1360
S'The time that adaptivity will be active after.\n'
p1361
sS'cpp_type'
p1362
S'double'
p1363
sS'default'
p1364
S'-1.79769e+308'
p1365
sS'name'
p1366
S'start_time'
p1367
sS'required'
p1368
I00
sS'group_name'
p1369
Nsa(dp1370
S'description'
p1371
S'The number of adaptive steps to use when doing a Steady simulation.\n'
p1372
sS'cpp_type'
p1373
S'unsigned int'
p1374
sS'default'
p1375
S'0'
p1376
sS'name'
p1377
S'steps'
p1378
sS'required'
p1379
I00
sS'group_name'
p1380
Nsa(dp1381
S'description'
p1382
S'The time after which adaptivity will no longer be active.\n'
p1383
sS'cpp_type'
p1384
S'double'
p1385
sS'default'
p1386
S'1.79769e+308'
p1387
sS'name'
p1388
S'stop_time'
p1389
sS'required'
p1390
I00
sS'group_name'
p1391
NsasS'name'
p1392
S'/Adaptivity'
p1393
sa(dp1394
S'description'
p1395
g3
sS'subblocks'
p1396
(lp1397
(dp1398
S'description'
p1399
g3
sS'subblocks'
p1400
NsS'parameters'
p1401
(lp1402
(dp1403
S'description'
p1404
S'A string representing the Moose Object that will be built by this Action\n'
p1405
sS'cpp_type'
p1406
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1407
sS'default'
p1408
g3
sS'name'
p1409
S'type'
p1410
sS'required'
p1411
I01
sS'group_name'
p1412
NsasS'name'
p1413
S'/AuxKernels/*'
p1414
sa(dp1415
S'description'
p1416
g3
sS'subblocks'
p1417
NsS'parameters'
p1418
(lp1419
(dp1420
S'description'
p1421
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1422
sS'cpp_type'
p1423
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1424
sS'default'
p1425
g3
sS'name'
p1426
S'block'
p1427
sS'required'
p1428
I00
sS'group_name'
p1429
Nsa(dp1430
S'description'
p1431
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1432
sS'cpp_type'
p1433
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p1434
sS'default'
p1435
g3
sS'name'
p1436
S'boundary'
p1437
sS'required'
p1438
I00
sS'group_name'
p1439
Nsa(dp1440
S'description'
p1441
S'The variable to be bounded\n'
p1442
sS'cpp_type'
p1443
S'std::vector<VariableName>'
p1444
sS'default'
p1445
g3
sS'name'
p1446
S'bounded_variable'
p1447
sS'required'
p1448
I01
sS'group_name'
p1449
Nsa(dp1450
S'description'
p1451
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1452
sS'cpp_type'
p1453
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p1454
sS'default'
p1455
g3
sS'name'
p1456
S'control_tags'
p1457
sS'required'
p1458
I00
sS'group_name'
p1459
S'Advanced'
p1460
sa(dp1461
S'description'
p1462
S'Set the enabled status of the MooseObject.\n'
p1463
sS'cpp_type'
p1464
S'bool'
p1465
sS'default'
p1466
S'1'
p1467
sS'name'
p1468
S'enable'
p1469
sS'required'
p1470
I00
sS'group_name'
p1471
S'Advanced'
p1472
sa(dp1473
S'name'
p1474
S'execute_on'
p1475
sS'cpp_type'
p1476
S'MultiMooseEnum'
p1477
sS'default'
p1478
S'LINEAR'
p1479
sS'description'
p1480
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1481
sS'required'
p1482
I00
sS'options'
p1483
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1484
sS'group_name'
p1485
Nsa(dp1486
S'description'
p1487
S'The lower bound for the variable\n'
p1488
sS'cpp_type'
p1489
S'double'
p1490
sS'default'
p1491
g3
sS'name'
p1492
S'lower'
p1493
sS'required'
p1494
I00
sS'group_name'
p1495
Nsa(dp1496
S'description'
p1497
S'The seed for the master random number generator\n'
p1498
sS'cpp_type'
p1499
S'unsigned int'
p1500
sS'default'
p1501
S'0'
p1502
sS'name'
p1503
S'seed'
p1504
sS'required'
p1505
I00
sS'group_name'
p1506
S'Advanced'
p1507
sa(dp1508
S'description'
p1509
g3
sS'cpp_type'
p1510
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1511
sS'default'
p1512
S'BoundsAux'
p1513
sS'name'
p1514
S'type'
p1515
sS'required'
p1516
I00
sS'group_name'
p1517
Nsa(dp1518
S'description'
p1519
S'The upper bound for the variable\n'
p1520
sS'cpp_type'
p1521
S'double'
p1522
sS'default'
p1523
g3
sS'name'
p1524
S'upper'
p1525
sS'required'
p1526
I00
sS'group_name'
p1527
Nsa(dp1528
S'description'
p1529
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1530
sS'cpp_type'
p1531
S'bool'
p1532
sS'default'
p1533
S'0'
p1534
sS'name'
p1535
S'use_displaced_mesh'
p1536
sS'required'
p1537
I00
sS'group_name'
p1538
S'Advanced'
p1539
sa(dp1540
S'description'
p1541
S'The name of the variable that this object applies to\n'
p1542
sS'cpp_type'
p1543
S'AuxVariableName'
p1544
sS'default'
p1545
g3
sS'name'
p1546
S'variable'
p1547
sS'required'
p1548
I01
sS'group_name'
p1549
NsasS'name'
p1550
S'/AuxKernels/BoundsAux'
p1551
sa(dp1552
S'description'
p1553
g3
sS'subblocks'
p1554
NsS'parameters'
p1555
(lp1556
(dp1557
S'description'
p1558
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1559
sS'cpp_type'
p1560
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1561
sS'default'
p1562
g3
sS'name'
p1563
S'block'
p1564
sS'required'
p1565
I00
sS'group_name'
p1566
Nsa(dp1567
S'description'
p1568
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1569
sS'cpp_type'
p1570
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p1571
sS'default'
p1572
g3
sS'name'
p1573
S'boundary'
p1574
sS'required'
p1575
I00
sS'group_name'
p1576
Nsa(dp1577
S'description'
p1578
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1579
sS'cpp_type'
p1580
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p1581
sS'default'
p1582
g3
sS'name'
p1583
S'control_tags'
p1584
sS'required'
p1585
I00
sS'group_name'
p1586
S'Advanced'
p1587
sa(dp1588
S'description'
p1589
S'Set the enabled status of the MooseObject.\n'
p1590
sS'cpp_type'
p1591
S'bool'
p1592
sS'default'
p1593
S'1'
p1594
sS'name'
p1595
S'enable'
p1596
sS'required'
p1597
I00
sS'group_name'
p1598
S'Advanced'
p1599
sa(dp1600
S'name'
p1601
S'execute_on'
p1602
sS'cpp_type'
p1603
S'MultiMooseEnum'
p1604
sS'default'
p1605
S'LINEAR'
p1606
sS'description'
p1607
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1608
sS'required'
p1609
I00
sS'options'
p1610
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1611
sS'group_name'
p1612
Nsa(dp1613
S'description'
p1614
S'The seed for the master random number generator\n'
p1615
sS'cpp_type'
p1616
S'unsigned int'
p1617
sS'default'
p1618
S'0'
p1619
sS'name'
p1620
S'seed'
p1621
sS'required'
p1622
I00
sS'group_name'
p1623
S'Advanced'
p1624
sa(dp1625
S'description'
p1626
g3
sS'cpp_type'
p1627
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1628
sS'default'
p1629
S'ConstantAux'
p1630
sS'name'
p1631
S'type'
p1632
sS'required'
p1633
I00
sS'group_name'
p1634
Nsa(dp1635
S'description'
p1636
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1637
sS'cpp_type'
p1638
S'bool'
p1639
sS'default'
p1640
S'0'
p1641
sS'name'
p1642
S'use_displaced_mesh'
p1643
sS'required'
p1644
I00
sS'group_name'
p1645
S'Advanced'
p1646
sa(dp1647
S'description'
p1648
S'Some constant value that can be read from the input file\n'
p1649
sS'cpp_type'
p1650
S'double'
p1651
sS'default'
p1652
S'0'
p1653
sS'name'
p1654
S'value'
p1655
sS'required'
p1656
I00
sS'group_name'
p1657
Nsa(dp1658
S'description'
p1659
S'The name of the variable that this object applies to\n'
p1660
sS'cpp_type'
p1661
S'AuxVariableName'
p1662
sS'default'
p1663
g3
sS'name'
p1664
S'variable'
p1665
sS'required'
p1666
I01
sS'group_name'
p1667
NsasS'name'
p1668
S'/AuxKernels/ConstantAux'
p1669
sa(dp1670
S'description'
p1671
g3
sS'subblocks'
p1672
NsS'parameters'
p1673
(lp1674
(dp1675
S'description'
p1676
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1677
sS'cpp_type'
p1678
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1679
sS'default'
p1680
g3
sS'name'
p1681
S'block'
p1682
sS'required'
p1683
I00
sS'group_name'
p1684
Nsa(dp1685
S'description'
p1686
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1687
sS'cpp_type'
p1688
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p1689
sS'default'
p1690
g3
sS'name'
p1691
S'boundary'
p1692
sS'required'
p1693
I00
sS'group_name'
p1694
Nsa(dp1695
S'description'
p1696
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1697
sS'cpp_type'
p1698
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p1699
sS'default'
p1700
g3
sS'name'
p1701
S'control_tags'
p1702
sS'required'
p1703
I00
sS'group_name'
p1704
S'Advanced'
p1705
sa(dp1706
S'description'
p1707
S'The variable that is being debugged.\n'
p1708
sS'cpp_type'
p1709
S'NonlinearVariableName'
p1710
sS'default'
p1711
g3
sS'name'
p1712
S'debug_variable'
p1713
sS'required'
p1714
I01
sS'group_name'
p1715
Nsa(dp1716
S'description'
p1717
S'Set the enabled status of the MooseObject.\n'
p1718
sS'cpp_type'
p1719
S'bool'
p1720
sS'default'
p1721
S'1'
p1722
sS'name'
p1723
S'enable'
p1724
sS'required'
p1725
I00
sS'group_name'
p1726
S'Advanced'
p1727
sa(dp1728
S'name'
p1729
S'execute_on'
p1730
sS'cpp_type'
p1731
S'MultiMooseEnum'
p1732
sS'default'
p1733
S'LINEAR'
p1734
sS'description'
p1735
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1736
sS'required'
p1737
I00
sS'options'
p1738
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1739
sS'group_name'
p1740
Nsa(dp1741
S'description'
p1742
S'The seed for the master random number generator\n'
p1743
sS'cpp_type'
p1744
S'unsigned int'
p1745
sS'default'
p1746
S'0'
p1747
sS'name'
p1748
S'seed'
p1749
sS'required'
p1750
I00
sS'group_name'
p1751
S'Advanced'
p1752
sa(dp1753
S'description'
p1754
g3
sS'cpp_type'
p1755
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1756
sS'default'
p1757
S'DebugResidualAux'
p1758
sS'name'
p1759
S'type'
p1760
sS'required'
p1761
I00
sS'group_name'
p1762
Nsa(dp1763
S'description'
p1764
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1765
sS'cpp_type'
p1766
S'bool'
p1767
sS'default'
p1768
S'0'
p1769
sS'name'
p1770
S'use_displaced_mesh'
p1771
sS'required'
p1772
I00
sS'group_name'
p1773
S'Advanced'
p1774
sa(dp1775
S'description'
p1776
S'The name of the variable that this object applies to\n'
p1777
sS'cpp_type'
p1778
S'AuxVariableName'
p1779
sS'default'
p1780
g3
sS'name'
p1781
S'variable'
p1782
sS'required'
p1783
I01
sS'group_name'
p1784
NsasS'name'
p1785
S'/AuxKernels/DebugResidualAux'
p1786
sa(dp1787
S'description'
p1788
g3
sS'subblocks'
p1789
NsS'parameters'
p1790
(lp1791
(dp1792
S'description'
p1793
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1794
sS'cpp_type'
p1795
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1796
sS'default'
p1797
g3
sS'name'
p1798
S'block'
p1799
sS'required'
p1800
I00
sS'group_name'
p1801
Nsa(dp1802
S'description'
p1803
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1804
sS'cpp_type'
p1805
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p1806
sS'default'
p1807
g3
sS'name'
p1808
S'boundary'
p1809
sS'required'
p1810
I00
sS'group_name'
p1811
Nsa(dp1812
S'description'
p1813
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1814
sS'cpp_type'
p1815
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p1816
sS'default'
p1817
g3
sS'name'
p1818
S'control_tags'
p1819
sS'required'
p1820
I00
sS'group_name'
p1821
S'Advanced'
p1822
sa(dp1823
S'description'
p1824
S'The variable to compute the norm of.\n'
p1825
sS'cpp_type'
p1826
S'std::vector<VariableName>'
p1827
sS'default'
p1828
g3
sS'name'
p1829
S'coupled_variable'
p1830
sS'required'
p1831
I01
sS'group_name'
p1832
Nsa(dp1833
S'description'
p1834
S'Set the enabled status of the MooseObject.\n'
p1835
sS'cpp_type'
p1836
S'bool'
p1837
sS'default'
p1838
S'1'
p1839
sS'name'
p1840
S'enable'
p1841
sS'required'
p1842
I00
sS'group_name'
p1843
S'Advanced'
p1844
sa(dp1845
S'name'
p1846
S'execute_on'
p1847
sS'cpp_type'
p1848
S'MultiMooseEnum'
p1849
sS'default'
p1850
S'LINEAR'
p1851
sS'description'
p1852
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1853
sS'required'
p1854
I00
sS'options'
p1855
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1856
sS'group_name'
p1857
Nsa(dp1858
S'description'
p1859
S'Function representing the exact solution\n'
p1860
sS'cpp_type'
p1861
S'FunctionName'
p1862
sS'default'
p1863
g3
sS'name'
p1864
S'function'
p1865
sS'required'
p1866
I01
sS'group_name'
p1867
Nsa(dp1868
S'description'
p1869
S'The exponent used in the norm.\n'
p1870
sS'cpp_type'
p1871
S'double'
p1872
sS'default'
p1873
S'2'
p1874
sS'name'
p1875
S'p'
p1876
sS'required'
p1877
I00
sS'group_name'
p1878
Nsa(dp1879
S'description'
p1880
S'The seed for the master random number generator\n'
p1881
sS'cpp_type'
p1882
S'unsigned int'
p1883
sS'default'
p1884
S'0'
p1885
sS'name'
p1886
S'seed'
p1887
sS'required'
p1888
I00
sS'group_name'
p1889
S'Advanced'
p1890
sa(dp1891
S'description'
p1892
g3
sS'cpp_type'
p1893
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1894
sS'default'
p1895
S'ElementH1ErrorFunctionAux'
p1896
sS'name'
p1897
S'type'
p1898
sS'required'
p1899
I00
sS'group_name'
p1900
Nsa(dp1901
S'description'
p1902
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1903
sS'cpp_type'
p1904
S'bool'
p1905
sS'default'
p1906
S'0'
p1907
sS'name'
p1908
S'use_displaced_mesh'
p1909
sS'required'
p1910
I00
sS'group_name'
p1911
S'Advanced'
p1912
sa(dp1913
S'description'
p1914
S'The name of the variable that this object applies to\n'
p1915
sS'cpp_type'
p1916
S'AuxVariableName'
p1917
sS'default'
p1918
g3
sS'name'
p1919
S'variable'
p1920
sS'required'
p1921
I01
sS'group_name'
p1922
NsasS'name'
p1923
S'/AuxKernels/ElementH1ErrorFunctionAux'
p1924
sa(dp1925
S'description'
p1926
g3
sS'subblocks'
p1927
NsS'parameters'
p1928
(lp1929
(dp1930
S'description'
p1931
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1932
sS'cpp_type'
p1933
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1934
sS'default'
p1935
g3
sS'name'
p1936
S'block'
p1937
sS'required'
p1938
I00
sS'group_name'
p1939
Nsa(dp1940
S'description'
p1941
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1942
sS'cpp_type'
p1943
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p1944
sS'default'
p1945
g3
sS'name'
p1946
S'boundary'
p1947
sS'required'
p1948
I00
sS'group_name'
p1949
Nsa(dp1950
S'description'
p1951
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1952
sS'cpp_type'
p1953
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p1954
sS'default'
p1955
g3
sS'name'
p1956
S'control_tags'
p1957
sS'required'
p1958
I00
sS'group_name'
p1959
S'Advanced'
p1960
sa(dp1961
S'description'
p1962
S'The variable to compute the norm of.\n'
p1963
sS'cpp_type'
p1964
S'std::vector<VariableName>'
p1965
sS'default'
p1966
g3
sS'name'
p1967
S'coupled_variable'
p1968
sS'required'
p1969
I01
sS'group_name'
p1970
Nsa(dp1971
S'description'
p1972
S'Set the enabled status of the MooseObject.\n'
p1973
sS'cpp_type'
p1974
S'bool'
p1975
sS'default'
p1976
S'1'
p1977
sS'name'
p1978
S'enable'
p1979
sS'required'
p1980
I00
sS'group_name'
p1981
S'Advanced'
p1982
sa(dp1983
S'name'
p1984
S'execute_on'
p1985
sS'cpp_type'
p1986
S'MultiMooseEnum'
p1987
sS'default'
p1988
S'LINEAR'
p1989
sS'description'
p1990
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1991
sS'required'
p1992
I00
sS'options'
p1993
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1994
sS'group_name'
p1995
Nsa(dp1996
S'description'
p1997
S'Function representing the exact solution\n'
p1998
sS'cpp_type'
p1999
S'FunctionName'
p2000
sS'default'
p2001
g3
sS'name'
p2002
S'function'
p2003
sS'required'
p2004
I01
sS'group_name'
p2005
Nsa(dp2006
S'description'
p2007
S'The exponent used in the norm.\n'
p2008
sS'cpp_type'
p2009
S'double'
p2010
sS'default'
p2011
S'2'
p2012
sS'name'
p2013
S'p'
p2014
sS'required'
p2015
I00
sS'group_name'
p2016
Nsa(dp2017
S'description'
p2018
S'The seed for the master random number generator\n'
p2019
sS'cpp_type'
p2020
S'unsigned int'
p2021
sS'default'
p2022
S'0'
p2023
sS'name'
p2024
S'seed'
p2025
sS'required'
p2026
I00
sS'group_name'
p2027
S'Advanced'
p2028
sa(dp2029
S'description'
p2030
g3
sS'cpp_type'
p2031
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2032
sS'default'
p2033
S'ElementL2ErrorFunctionAux'
p2034
sS'name'
p2035
S'type'
p2036
sS'required'
p2037
I00
sS'group_name'
p2038
Nsa(dp2039
S'description'
p2040
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2041
sS'cpp_type'
p2042
S'bool'
p2043
sS'default'
p2044
S'0'
p2045
sS'name'
p2046
S'use_displaced_mesh'
p2047
sS'required'
p2048
I00
sS'group_name'
p2049
S'Advanced'
p2050
sa(dp2051
S'description'
p2052
S'The name of the variable that this object applies to\n'
p2053
sS'cpp_type'
p2054
S'AuxVariableName'
p2055
sS'default'
p2056
g3
sS'name'
p2057
S'variable'
p2058
sS'required'
p2059
I01
sS'group_name'
p2060
NsasS'name'
p2061
S'/AuxKernels/ElementL2ErrorFunctionAux'
p2062
sa(dp2063
S'description'
p2064
S'Compute the element size using Elem::hmin() or Elem::hmax() from libMesh.\n'
p2065
sS'subblocks'
p2066
NsS'parameters'
p2067
(lp2068
(dp2069
S'description'
p2070
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2071
sS'cpp_type'
p2072
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2073
sS'default'
p2074
g3
sS'name'
p2075
S'block'
p2076
sS'required'
p2077
I00
sS'group_name'
p2078
Nsa(dp2079
S'description'
p2080
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2081
sS'cpp_type'
p2082
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2083
sS'default'
p2084
g3
sS'name'
p2085
S'boundary'
p2086
sS'required'
p2087
I00
sS'group_name'
p2088
Nsa(dp2089
S'description'
p2090
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2091
sS'cpp_type'
p2092
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p2093
sS'default'
p2094
g3
sS'name'
p2095
S'control_tags'
p2096
sS'required'
p2097
I00
sS'group_name'
p2098
S'Advanced'
p2099
sa(dp2100
S'description'
p2101
S'Set the enabled status of the MooseObject.\n'
p2102
sS'cpp_type'
p2103
S'bool'
p2104
sS'default'
p2105
S'1'
p2106
sS'name'
p2107
S'enable'
p2108
sS'required'
p2109
I00
sS'group_name'
p2110
S'Advanced'
p2111
sa(dp2112
S'name'
p2113
S'execute_on'
p2114
sS'cpp_type'
p2115
S'MultiMooseEnum'
p2116
sS'default'
p2117
S'LINEAR'
p2118
sS'description'
p2119
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2120
sS'required'
p2121
I00
sS'options'
p2122
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2123
sS'group_name'
p2124
Nsa(dp2125
S'name'
p2126
S'method'
p2127
sS'cpp_type'
p2128
S'MooseEnum'
p2129
sS'default'
p2130
g3
sS'description'
p2131
S"The size calculation to perform ('min' or 'max').\n"
p2132
sS'required'
p2133
I01
sS'options'
p2134
S'min max'
p2135
sS'group_name'
p2136
Nsa(dp2137
S'description'
p2138
S'The seed for the master random number generator\n'
p2139
sS'cpp_type'
p2140
S'unsigned int'
p2141
sS'default'
p2142
S'0'
p2143
sS'name'
p2144
S'seed'
p2145
sS'required'
p2146
I00
sS'group_name'
p2147
S'Advanced'
p2148
sa(dp2149
S'description'
p2150
g3
sS'cpp_type'
p2151
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2152
sS'default'
p2153
S'ElementLengthAux'
p2154
sS'name'
p2155
S'type'
p2156
sS'required'
p2157
I00
sS'group_name'
p2158
Nsa(dp2159
S'description'
p2160
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2161
sS'cpp_type'
p2162
S'bool'
p2163
sS'default'
p2164
S'0'
p2165
sS'name'
p2166
S'use_displaced_mesh'
p2167
sS'required'
p2168
I00
sS'group_name'
p2169
S'Advanced'
p2170
sa(dp2171
S'description'
p2172
S'The name of the variable that this object applies to\n'
p2173
sS'cpp_type'
p2174
S'AuxVariableName'
p2175
sS'default'
p2176
g3
sS'name'
p2177
S'variable'
p2178
sS'required'
p2179
I01
sS'group_name'
p2180
NsasS'name'
p2181
S'/AuxKernels/ElementLengthAux'
p2182
sa(dp2183
S'description'
p2184
g3
sS'subblocks'
p2185
NsS'parameters'
p2186
(lp2187
(dp2188
S'description'
p2189
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2190
sS'cpp_type'
p2191
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2192
sS'default'
p2193
g3
sS'name'
p2194
S'block'
p2195
sS'required'
p2196
I00
sS'group_name'
p2197
Nsa(dp2198
S'description'
p2199
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2200
sS'cpp_type'
p2201
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2202
sS'default'
p2203
g3
sS'name'
p2204
S'boundary'
p2205
sS'required'
p2206
I00
sS'group_name'
p2207
Nsa(dp2208
S'description'
p2209
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2210
sS'cpp_type'
p2211
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p2212
sS'default'
p2213
g3
sS'name'
p2214
S'control_tags'
p2215
sS'required'
p2216
I00
sS'group_name'
p2217
S'Advanced'
p2218
sa(dp2219
S'description'
p2220
S'The variable to compute the norm of.\n'
p2221
sS'cpp_type'
p2222
S'std::vector<VariableName>'
p2223
sS'default'
p2224
g3
sS'name'
p2225
S'coupled_variable'
p2226
sS'required'
p2227
I01
sS'group_name'
p2228
Nsa(dp2229
S'description'
p2230
S'Set the enabled status of the MooseObject.\n'
p2231
sS'cpp_type'
p2232
S'bool'
p2233
sS'default'
p2234
S'1'
p2235
sS'name'
p2236
S'enable'
p2237
sS'required'
p2238
I00
sS'group_name'
p2239
S'Advanced'
p2240
sa(dp2241
S'name'
p2242
S'execute_on'
p2243
sS'cpp_type'
p2244
S'MultiMooseEnum'
p2245
sS'default'
p2246
S'LINEAR'
p2247
sS'description'
p2248
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2249
sS'required'
p2250
I00
sS'options'
p2251
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2252
sS'group_name'
p2253
Nsa(dp2254
S'description'
p2255
S'The exponent used in the norm.\n'
p2256
sS'cpp_type'
p2257
S'double'
p2258
sS'default'
p2259
S'2'
p2260
sS'name'
p2261
S'p'
p2262
sS'required'
p2263
I00
sS'group_name'
p2264
Nsa(dp2265
S'description'
p2266
S'The seed for the master random number generator\n'
p2267
sS'cpp_type'
p2268
S'unsigned int'
p2269
sS'default'
p2270
S'0'
p2271
sS'name'
p2272
S'seed'
p2273
sS'required'
p2274
I00
sS'group_name'
p2275
S'Advanced'
p2276
sa(dp2277
S'description'
p2278
g3
sS'cpp_type'
p2279
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2280
sS'default'
p2281
S'ElementLpNormAux'
p2282
sS'name'
p2283
S'type'
p2284
sS'required'
p2285
I00
sS'group_name'
p2286
Nsa(dp2287
S'description'
p2288
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2289
sS'cpp_type'
p2290
S'bool'
p2291
sS'default'
p2292
S'0'
p2293
sS'name'
p2294
S'use_displaced_mesh'
p2295
sS'required'
p2296
I00
sS'group_name'
p2297
S'Advanced'
p2298
sa(dp2299
S'description'
p2300
S'The name of the variable that this object applies to\n'
p2301
sS'cpp_type'
p2302
S'AuxVariableName'
p2303
sS'default'
p2304
g3
sS'name'
p2305
S'variable'
p2306
sS'required'
p2307
I01
sS'group_name'
p2308
NsasS'name'
p2309
S'/AuxKernels/ElementLpNormAux'
p2310
sa(dp2311
S'description'
p2312
g3
sS'subblocks'
p2313
NsS'parameters'
p2314
(lp2315
(dp2316
S'description'
p2317
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2318
sS'cpp_type'
p2319
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2320
sS'default'
p2321
g3
sS'name'
p2322
S'block'
p2323
sS'required'
p2324
I00
sS'group_name'
p2325
Nsa(dp2326
S'description'
p2327
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2328
sS'cpp_type'
p2329
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2330
sS'default'
p2331
g3
sS'name'
p2332
S'boundary'
p2333
sS'required'
p2334
I00
sS'group_name'
p2335
Nsa(dp2336
S'description'
p2337
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2338
sS'cpp_type'
p2339
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p2340
sS'default'
p2341
g3
sS'name'
p2342
S'control_tags'
p2343
sS'required'
p2344
I00
sS'group_name'
p2345
S'Advanced'
p2346
sa(dp2347
S'description'
p2348
S'Set the enabled status of the MooseObject.\n'
p2349
sS'cpp_type'
p2350
S'bool'
p2351
sS'default'
p2352
S'1'
p2353
sS'name'
p2354
S'enable'
p2355
sS'required'
p2356
I00
sS'group_name'
p2357
S'Advanced'
p2358
sa(dp2359
S'name'
p2360
S'execute_on'
p2361
sS'cpp_type'
p2362
S'MultiMooseEnum'
p2363
sS'default'
p2364
S'LINEAR'
p2365
sS'description'
p2366
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2367
sS'required'
p2368
I00
sS'options'
p2369
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2370
sS'group_name'
p2371
Nsa(dp2372
S'description'
p2373
S'The function to use as the value\n'
p2374
sS'cpp_type'
p2375
S'FunctionName'
p2376
sS'default'
p2377
g3
sS'name'
p2378
S'function'
p2379
sS'required'
p2380
I01
sS'group_name'
p2381
Nsa(dp2382
S'description'
p2383
S'The seed for the master random number generator\n'
p2384
sS'cpp_type'
p2385
S'unsigned int'
p2386
sS'default'
p2387
S'0'
p2388
sS'name'
p2389
S'seed'
p2390
sS'required'
p2391
I00
sS'group_name'
p2392
S'Advanced'
p2393
sa(dp2394
S'description'
p2395
g3
sS'cpp_type'
p2396
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2397
sS'default'
p2398
S'FunctionAux'
p2399
sS'name'
p2400
S'type'
p2401
sS'required'
p2402
I00
sS'group_name'
p2403
Nsa(dp2404
S'description'
p2405
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2406
sS'cpp_type'
p2407
S'bool'
p2408
sS'default'
p2409
S'0'
p2410
sS'name'
p2411
S'use_displaced_mesh'
p2412
sS'required'
p2413
I00
sS'group_name'
p2414
S'Advanced'
p2415
sa(dp2416
S'description'
p2417
S'The name of the variable that this object applies to\n'
p2418
sS'cpp_type'
p2419
S'AuxVariableName'
p2420
sS'default'
p2421
g3
sS'name'
p2422
S'variable'
p2423
sS'required'
p2424
I01
sS'group_name'
p2425
NsasS'name'
p2426
S'/AuxKernels/FunctionAux'
p2427
sa(dp2428
S'description'
p2429
g3
sS'subblocks'
p2430
NsS'parameters'
p2431
(lp2432
(dp2433
S'description'
p2434
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2435
sS'cpp_type'
p2436
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2437
sS'default'
p2438
g3
sS'name'
p2439
S'block'
p2440
sS'required'
p2441
I00
sS'group_name'
p2442
Nsa(dp2443
S'description'
p2444
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2445
sS'cpp_type'
p2446
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2447
sS'default'
p2448
g3
sS'name'
p2449
S'boundary'
p2450
sS'required'
p2451
I00
sS'group_name'
p2452
Nsa(dp2453
S'description'
p2454
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2455
sS'cpp_type'
p2456
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p2457
sS'default'
p2458
g3
sS'name'
p2459
S'control_tags'
p2460
sS'required'
p2461
I00
sS'group_name'
p2462
S'Advanced'
p2463
sa(dp2464
S'description'
p2465
S'Set the enabled status of the MooseObject.\n'
p2466
sS'cpp_type'
p2467
S'bool'
p2468
sS'default'
p2469
S'1'
p2470
sS'name'
p2471
S'enable'
p2472
sS'required'
p2473
I00
sS'group_name'
p2474
S'Advanced'
p2475
sa(dp2476
S'name'
p2477
S'execute_on'
p2478
sS'cpp_type'
p2479
S'MultiMooseEnum'
p2480
sS'default'
p2481
S'LINEAR'
p2482
sS'description'
p2483
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2484
sS'required'
p2485
I00
sS'options'
p2486
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2487
sS'group_name'
p2488
Nsa(dp2489
S'description'
p2490
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p2491
sS'cpp_type'
p2492
S'double'
p2493
sS'default'
p2494
g3
sS'name'
p2495
S'normal_smoothing_distance'
p2496
sS'required'
p2497
I00
sS'group_name'
p2498
Nsa(dp2499
S'description'
p2500
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p2501
sS'cpp_type'
p2502
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2503
sS'default'
p2504
g3
sS'name'
p2505
S'normal_smoothing_method'
p2506
sS'required'
p2507
I00
sS'group_name'
p2508
Nsa(dp2509
S'name'
p2510
S'order'
p2511
sS'cpp_type'
p2512
S'MooseEnum'
p2513
sS'default'
p2514
S'FIRST'
p2515
sS'description'
p2516
S'The finite element order\n'
p2517
sS'required'
p2518
I00
sS'options'
p2519
S'FIRST SECOND THIRD FOURTH'
p2520
sS'group_name'
p2521
Nsa(dp2522
S'description'
p2523
S'The boundary on the other side of a gap.\n'
p2524
sS'cpp_type'
p2525
S'BoundaryName'
p2526
sS'default'
p2527
g3
sS'name'
p2528
S'paired_boundary'
p2529
sS'required'
p2530
I01
sS'group_name'
p2531
Nsa(dp2532
S'description'
p2533
S'The variable to get the value of.\n'
p2534
sS'cpp_type'
p2535
S'VariableName'
p2536
sS'default'
p2537
g3
sS'name'
p2538
S'paired_variable'
p2539
sS'required'
p2540
I01
sS'group_name'
p2541
Nsa(dp2542
S'description'
p2543
S'The seed for the master random number generator\n'
p2544
sS'cpp_type'
p2545
S'unsigned int'
p2546
sS'default'
p2547
S'0'
p2548
sS'name'
p2549
S'seed'
p2550
sS'required'
p2551
I00
sS'group_name'
p2552
S'Advanced'
p2553
sa(dp2554
S'description'
p2555
S'Tangential distance to extend edges of contact surfaces\n'
p2556
sS'cpp_type'
p2557
S'double'
p2558
sS'default'
p2559
g3
sS'name'
p2560
S'tangential_tolerance'
p2561
sS'required'
p2562
I00
sS'group_name'
p2563
Nsa(dp2564
S'description'
p2565
g3
sS'cpp_type'
p2566
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2567
sS'default'
p2568
S'GapValueAux'
p2569
sS'name'
p2570
S'type'
p2571
sS'required'
p2572
I00
sS'group_name'
p2573
Nsa(dp2574
S'description'
p2575
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2576
sS'cpp_type'
p2577
S'bool'
p2578
sS'default'
p2579
S'1'
p2580
sS'name'
p2581
S'use_displaced_mesh'
p2582
sS'required'
p2583
I00
sS'group_name'
p2584
S'Advanced'
p2585
sa(dp2586
S'description'
p2587
S'The name of the variable that this object applies to\n'
p2588
sS'cpp_type'
p2589
S'AuxVariableName'
p2590
sS'default'
p2591
g3
sS'name'
p2592
S'variable'
p2593
sS'required'
p2594
I01
sS'group_name'
p2595
Nsa(dp2596
S'description'
p2597
S'Whether to output warning messages concerning nodes not being found\n'
p2598
sS'cpp_type'
p2599
S'bool'
p2600
sS'default'
p2601
S'0'
p2602
sS'name'
p2603
S'warnings'
p2604
sS'required'
p2605
I00
sS'group_name'
p2606
NsasS'name'
p2607
S'/AuxKernels/GapValueAux'
p2608
sa(dp2609
S'description'
p2610
g3
sS'subblocks'
p2611
NsS'parameters'
p2612
(lp2613
(dp2614
S'description'
p2615
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2616
sS'cpp_type'
p2617
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2618
sS'default'
p2619
g3
sS'name'
p2620
S'block'
p2621
sS'required'
p2622
I00
sS'group_name'
p2623
Nsa(dp2624
S'description'
p2625
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2626
sS'cpp_type'
p2627
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2628
sS'default'
p2629
g3
sS'name'
p2630
S'boundary'
p2631
sS'required'
p2632
I00
sS'group_name'
p2633
Nsa(dp2634
S'description'
p2635
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2636
sS'cpp_type'
p2637
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p2638
sS'default'
p2639
g3
sS'name'
p2640
S'control_tags'
p2641
sS'required'
p2642
I00
sS'group_name'
p2643
S'Advanced'
p2644
sa(dp2645
S'description'
p2646
S'Set the enabled status of the MooseObject.\n'
p2647
sS'cpp_type'
p2648
S'bool'
p2649
sS'default'
p2650
S'1'
p2651
sS'name'
p2652
S'enable'
p2653
sS'required'
p2654
I00
sS'group_name'
p2655
S'Advanced'
p2656
sa(dp2657
S'name'
p2658
S'execute_on'
p2659
sS'cpp_type'
p2660
S'MultiMooseEnum'
p2661
sS'default'
p2662
S'LINEAR'
p2663
sS'description'
p2664
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2665
sS'required'
p2666
I00
sS'options'
p2667
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2668
sS'group_name'
p2669
Nsa(dp2670
S'description'
p2671
S'The factor by which to multiply your material property for visualization\n'
p2672
sS'cpp_type'
p2673
S'double'
p2674
sS'default'
p2675
S'1'
p2676
sS'name'
p2677
S'factor'
p2678
sS'required'
p2679
I00
sS'group_name'
p2680
Nsa(dp2681
S'description'
p2682
S'The offset to add to your material property for visualization\n'
p2683
sS'cpp_type'
p2684
S'double'
p2685
sS'default'
p2686
S'0'
p2687
sS'name'
p2688
S'offset'
p2689
sS'required'
p2690
I00
sS'group_name'
p2691
Nsa(dp2692
S'description'
p2693
S'The scalar material property name\n'
p2694
sS'cpp_type'
p2695
S'MaterialPropertyName'
p2696
sS'default'
p2697
g3
sS'name'
p2698
S'property'
p2699
sS'required'
p2700
I01
sS'group_name'
p2701
Nsa(dp2702
S'description'
p2703
S'The seed for the master random number generator\n'
p2704
sS'cpp_type'
p2705
S'unsigned int'
p2706
sS'default'
p2707
S'0'
p2708
sS'name'
p2709
S'seed'
p2710
sS'required'
p2711
I00
sS'group_name'
p2712
S'Advanced'
p2713
sa(dp2714
S'description'
p2715
g3
sS'cpp_type'
p2716
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2717
sS'default'
p2718
S'MaterialRealAux'
p2719
sS'name'
p2720
S'type'
p2721
sS'required'
p2722
I00
sS'group_name'
p2723
Nsa(dp2724
S'description'
p2725
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2726
sS'cpp_type'
p2727
S'bool'
p2728
sS'default'
p2729
S'0'
p2730
sS'name'
p2731
S'use_displaced_mesh'
p2732
sS'required'
p2733
I00
sS'group_name'
p2734
S'Advanced'
p2735
sa(dp2736
S'description'
p2737
S'The name of the variable that this object applies to\n'
p2738
sS'cpp_type'
p2739
S'AuxVariableName'
p2740
sS'default'
p2741
g3
sS'name'
p2742
S'variable'
p2743
sS'required'
p2744
I01
sS'group_name'
p2745
NsasS'name'
p2746
S'/AuxKernels/MaterialRealAux'
p2747
sa(dp2748
S'description'
p2749
g3
sS'subblocks'
p2750
NsS'parameters'
p2751
(lp2752
(dp2753
S'description'
p2754
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2755
sS'cpp_type'
p2756
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2757
sS'default'
p2758
g3
sS'name'
p2759
S'block'
p2760
sS'required'
p2761
I00
sS'group_name'
p2762
Nsa(dp2763
S'description'
p2764
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2765
sS'cpp_type'
p2766
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2767
sS'default'
p2768
g3
sS'name'
p2769
S'boundary'
p2770
sS'required'
p2771
I00
sS'group_name'
p2772
Nsa(dp2773
S'description'
p2774
S'The column component to consider for this kernel\n'
p2775
sS'cpp_type'
p2776
S'unsigned int'
p2777
sS'default'
p2778
S'0'
p2779
sS'name'
p2780
S'column'
p2781
sS'required'
p2782
I00
sS'group_name'
p2783
Nsa(dp2784
S'description'
p2785
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2786
sS'cpp_type'
p2787
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p2788
sS'default'
p2789
g3
sS'name'
p2790
S'control_tags'
p2791
sS'required'
p2792
I00
sS'group_name'
p2793
S'Advanced'
p2794
sa(dp2795
S'description'
p2796
S'Set the enabled status of the MooseObject.\n'
p2797
sS'cpp_type'
p2798
S'bool'
p2799
sS'default'
p2800
S'1'
p2801
sS'name'
p2802
S'enable'
p2803
sS'required'
p2804
I00
sS'group_name'
p2805
S'Advanced'
p2806
sa(dp2807
S'name'
p2808
S'execute_on'
p2809
sS'cpp_type'
p2810
S'MultiMooseEnum'
p2811
sS'default'
p2812
S'LINEAR'
p2813
sS'description'
p2814
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2815
sS'required'
p2816
I00
sS'options'
p2817
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2818
sS'group_name'
p2819
Nsa(dp2820
S'description'
p2821
S'The factor by which to multiply your material property for visualization\n'
p2822
sS'cpp_type'
p2823
S'double'
p2824
sS'default'
p2825
S'1'
p2826
sS'name'
p2827
S'factor'
p2828
sS'required'
p2829
I00
sS'group_name'
p2830
Nsa(dp2831
S'description'
p2832
S'The offset to add to your material property for visualization\n'
p2833
sS'cpp_type'
p2834
S'double'
p2835
sS'default'
p2836
S'0'
p2837
sS'name'
p2838
S'offset'
p2839
sS'required'
p2840
I00
sS'group_name'
p2841
Nsa(dp2842
S'description'
p2843
S'The scalar material property name\n'
p2844
sS'cpp_type'
p2845
S'MaterialPropertyName'
p2846
sS'default'
p2847
g3
sS'name'
p2848
S'property'
p2849
sS'required'
p2850
I01
sS'group_name'
p2851
Nsa(dp2852
S'description'
p2853
S'The row component to consider for this kernel\n'
p2854
sS'cpp_type'
p2855
S'unsigned int'
p2856
sS'default'
p2857
S'0'
p2858
sS'name'
p2859
S'row'
p2860
sS'required'
p2861
I00
sS'group_name'
p2862
Nsa(dp2863
S'description'
p2864
S'The seed for the master random number generator\n'
p2865
sS'cpp_type'
p2866
S'unsigned int'
p2867
sS'default'
p2868
S'0'
p2869
sS'name'
p2870
S'seed'
p2871
sS'required'
p2872
I00
sS'group_name'
p2873
S'Advanced'
p2874
sa(dp2875
S'description'
p2876
g3
sS'cpp_type'
p2877
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2878
sS'default'
p2879
S'MaterialRealDenseMatrixAux'
p2880
sS'name'
p2881
S'type'
p2882
sS'required'
p2883
I00
sS'group_name'
p2884
Nsa(dp2885
S'description'
p2886
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2887
sS'cpp_type'
p2888
S'bool'
p2889
sS'default'
p2890
S'0'
p2891
sS'name'
p2892
S'use_displaced_mesh'
p2893
sS'required'
p2894
I00
sS'group_name'
p2895
S'Advanced'
p2896
sa(dp2897
S'description'
p2898
S'The name of the variable that this object applies to\n'
p2899
sS'cpp_type'
p2900
S'AuxVariableName'
p2901
sS'default'
p2902
g3
sS'name'
p2903
S'variable'
p2904
sS'required'
p2905
I01
sS'group_name'
p2906
NsasS'name'
p2907
S'/AuxKernels/MaterialRealDenseMatrixAux'
p2908
sa(dp2909
S'description'
p2910
g3
sS'subblocks'
p2911
NsS'parameters'
p2912
(lp2913
(dp2914
S'description'
p2915
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2916
sS'cpp_type'
p2917
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2918
sS'default'
p2919
g3
sS'name'
p2920
S'block'
p2921
sS'required'
p2922
I00
sS'group_name'
p2923
Nsa(dp2924
S'description'
p2925
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2926
sS'cpp_type'
p2927
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2928
sS'default'
p2929
g3
sS'name'
p2930
S'boundary'
p2931
sS'required'
p2932
I00
sS'group_name'
p2933
Nsa(dp2934
S'description'
p2935
S'The column component to consider for this kernel\n'
p2936
sS'cpp_type'
p2937
S'unsigned int'
p2938
sS'default'
p2939
S'0'
p2940
sS'name'
p2941
S'column'
p2942
sS'required'
p2943
I00
sS'group_name'
p2944
Nsa(dp2945
S'description'
p2946
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2947
sS'cpp_type'
p2948
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p2949
sS'default'
p2950
g3
sS'name'
p2951
S'control_tags'
p2952
sS'required'
p2953
I00
sS'group_name'
p2954
S'Advanced'
p2955
sa(dp2956
S'description'
p2957
S'Set the enabled status of the MooseObject.\n'
p2958
sS'cpp_type'
p2959
S'bool'
p2960
sS'default'
p2961
S'1'
p2962
sS'name'
p2963
S'enable'
p2964
sS'required'
p2965
I00
sS'group_name'
p2966
S'Advanced'
p2967
sa(dp2968
S'name'
p2969
S'execute_on'
p2970
sS'cpp_type'
p2971
S'MultiMooseEnum'
p2972
sS'default'
p2973
S'LINEAR'
p2974
sS'description'
p2975
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2976
sS'required'
p2977
I00
sS'options'
p2978
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2979
sS'group_name'
p2980
Nsa(dp2981
S'description'
p2982
S'The factor by which to multiply your material property for visualization\n'
p2983
sS'cpp_type'
p2984
S'double'
p2985
sS'default'
p2986
S'1'
p2987
sS'name'
p2988
S'factor'
p2989
sS'required'
p2990
I00
sS'group_name'
p2991
Nsa(dp2992
S'description'
p2993
S'The offset to add to your material property for visualization\n'
p2994
sS'cpp_type'
p2995
S'double'
p2996
sS'default'
p2997
S'0'
p2998
sS'name'
p2999
S'offset'
p3000
sS'required'
p3001
I00
sS'group_name'
p3002
Nsa(dp3003
S'description'
p3004
S'The scalar material property name\n'
p3005
sS'cpp_type'
p3006
S'MaterialPropertyName'
p3007
sS'default'
p3008
g3
sS'name'
p3009
S'property'
p3010
sS'required'
p3011
I01
sS'group_name'
p3012
Nsa(dp3013
S'description'
p3014
S'The row component to consider for this kernel\n'
p3015
sS'cpp_type'
p3016
S'unsigned int'
p3017
sS'default'
p3018
S'0'
p3019
sS'name'
p3020
S'row'
p3021
sS'required'
p3022
I00
sS'group_name'
p3023
Nsa(dp3024
S'description'
p3025
S'The seed for the master random number generator\n'
p3026
sS'cpp_type'
p3027
S'unsigned int'
p3028
sS'default'
p3029
S'0'
p3030
sS'name'
p3031
S'seed'
p3032
sS'required'
p3033
I00
sS'group_name'
p3034
S'Advanced'
p3035
sa(dp3036
S'description'
p3037
g3
sS'cpp_type'
p3038
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3039
sS'default'
p3040
S'MaterialRealTensorValueAux'
p3041
sS'name'
p3042
S'type'
p3043
sS'required'
p3044
I00
sS'group_name'
p3045
Nsa(dp3046
S'description'
p3047
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3048
sS'cpp_type'
p3049
S'bool'
p3050
sS'default'
p3051
S'0'
p3052
sS'name'
p3053
S'use_displaced_mesh'
p3054
sS'required'
p3055
I00
sS'group_name'
p3056
S'Advanced'
p3057
sa(dp3058
S'description'
p3059
S'The name of the variable that this object applies to\n'
p3060
sS'cpp_type'
p3061
S'AuxVariableName'
p3062
sS'default'
p3063
g3
sS'name'
p3064
S'variable'
p3065
sS'required'
p3066
I01
sS'group_name'
p3067
NsasS'name'
p3068
S'/AuxKernels/MaterialRealTensorValueAux'
p3069
sa(dp3070
S'description'
p3071
g3
sS'subblocks'
p3072
NsS'parameters'
p3073
(lp3074
(dp3075
S'description'
p3076
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3077
sS'cpp_type'
p3078
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3079
sS'default'
p3080
g3
sS'name'
p3081
S'block'
p3082
sS'required'
p3083
I00
sS'group_name'
p3084
Nsa(dp3085
S'description'
p3086
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3087
sS'cpp_type'
p3088
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3089
sS'default'
p3090
g3
sS'name'
p3091
S'boundary'
p3092
sS'required'
p3093
I00
sS'group_name'
p3094
Nsa(dp3095
S'description'
p3096
S'The vector component to consider for this kernel\n'
p3097
sS'cpp_type'
p3098
S'unsigned int'
p3099
sS'default'
p3100
S'0'
p3101
sS'name'
p3102
S'component'
p3103
sS'required'
p3104
I00
sS'group_name'
p3105
Nsa(dp3106
S'description'
p3107
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3108
sS'cpp_type'
p3109
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3110
sS'default'
p3111
g3
sS'name'
p3112
S'control_tags'
p3113
sS'required'
p3114
I00
sS'group_name'
p3115
S'Advanced'
p3116
sa(dp3117
S'description'
p3118
S'Set the enabled status of the MooseObject.\n'
p3119
sS'cpp_type'
p3120
S'bool'
p3121
sS'default'
p3122
S'1'
p3123
sS'name'
p3124
S'enable'
p3125
sS'required'
p3126
I00
sS'group_name'
p3127
S'Advanced'
p3128
sa(dp3129
S'name'
p3130
S'execute_on'
p3131
sS'cpp_type'
p3132
S'MultiMooseEnum'
p3133
sS'default'
p3134
S'LINEAR'
p3135
sS'description'
p3136
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3137
sS'required'
p3138
I00
sS'options'
p3139
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3140
sS'group_name'
p3141
Nsa(dp3142
S'description'
p3143
S'The factor by which to multiply your material property for visualization\n'
p3144
sS'cpp_type'
p3145
S'double'
p3146
sS'default'
p3147
S'1'
p3148
sS'name'
p3149
S'factor'
p3150
sS'required'
p3151
I00
sS'group_name'
p3152
Nsa(dp3153
S'description'
p3154
S'The offset to add to your material property for visualization\n'
p3155
sS'cpp_type'
p3156
S'double'
p3157
sS'default'
p3158
S'0'
p3159
sS'name'
p3160
S'offset'
p3161
sS'required'
p3162
I00
sS'group_name'
p3163
Nsa(dp3164
S'description'
p3165
S'The scalar material property name\n'
p3166
sS'cpp_type'
p3167
S'MaterialPropertyName'
p3168
sS'default'
p3169
g3
sS'name'
p3170
S'property'
p3171
sS'required'
p3172
I01
sS'group_name'
p3173
Nsa(dp3174
S'description'
p3175
S'The seed for the master random number generator\n'
p3176
sS'cpp_type'
p3177
S'unsigned int'
p3178
sS'default'
p3179
S'0'
p3180
sS'name'
p3181
S'seed'
p3182
sS'required'
p3183
I00
sS'group_name'
p3184
S'Advanced'
p3185
sa(dp3186
S'description'
p3187
g3
sS'cpp_type'
p3188
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3189
sS'default'
p3190
S'MaterialRealVectorValueAux'
p3191
sS'name'
p3192
S'type'
p3193
sS'required'
p3194
I00
sS'group_name'
p3195
Nsa(dp3196
S'description'
p3197
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3198
sS'cpp_type'
p3199
S'bool'
p3200
sS'default'
p3201
S'0'
p3202
sS'name'
p3203
S'use_displaced_mesh'
p3204
sS'required'
p3205
I00
sS'group_name'
p3206
S'Advanced'
p3207
sa(dp3208
S'description'
p3209
S'The name of the variable that this object applies to\n'
p3210
sS'cpp_type'
p3211
S'AuxVariableName'
p3212
sS'default'
p3213
g3
sS'name'
p3214
S'variable'
p3215
sS'required'
p3216
I01
sS'group_name'
p3217
NsasS'name'
p3218
S'/AuxKernels/MaterialRealVectorValueAux'
p3219
sa(dp3220
S'description'
p3221
S'Extracts a component of a material type std::vector<Real> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n'
p3222
sS'subblocks'
p3223
NsS'parameters'
p3224
(lp3225
(dp3226
S'description'
p3227
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3228
sS'cpp_type'
p3229
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3230
sS'default'
p3231
g3
sS'name'
p3232
S'block'
p3233
sS'required'
p3234
I00
sS'group_name'
p3235
Nsa(dp3236
S'description'
p3237
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3238
sS'cpp_type'
p3239
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3240
sS'default'
p3241
g3
sS'name'
p3242
S'boundary'
p3243
sS'required'
p3244
I00
sS'group_name'
p3245
Nsa(dp3246
S'description'
p3247
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3248
sS'cpp_type'
p3249
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3250
sS'default'
p3251
g3
sS'name'
p3252
S'control_tags'
p3253
sS'required'
p3254
I00
sS'group_name'
p3255
S'Advanced'
p3256
sa(dp3257
S'description'
p3258
S'Set the enabled status of the MooseObject.\n'
p3259
sS'cpp_type'
p3260
S'bool'
p3261
sS'default'
p3262
S'1'
p3263
sS'name'
p3264
S'enable'
p3265
sS'required'
p3266
I00
sS'group_name'
p3267
S'Advanced'
p3268
sa(dp3269
S'name'
p3270
S'execute_on'
p3271
sS'cpp_type'
p3272
S'MultiMooseEnum'
p3273
sS'default'
p3274
S'LINEAR'
p3275
sS'description'
p3276
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3277
sS'required'
p3278
I00
sS'options'
p3279
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3280
sS'group_name'
p3281
Nsa(dp3282
S'description'
p3283
S'The factor by which to multiply your material property for visualization\n'
p3284
sS'cpp_type'
p3285
S'double'
p3286
sS'default'
p3287
S'1'
p3288
sS'name'
p3289
S'factor'
p3290
sS'required'
p3291
I00
sS'group_name'
p3292
Nsa(dp3293
S'description'
p3294
S'The index to consider for this kernel\n'
p3295
sS'cpp_type'
p3296
S'unsigned int'
p3297
sS'default'
p3298
S'0'
p3299
sS'name'
p3300
S'index'
p3301
sS'required'
p3302
I00
sS'group_name'
p3303
Nsa(dp3304
S'description'
p3305
S'The offset to add to your material property for visualization\n'
p3306
sS'cpp_type'
p3307
S'double'
p3308
sS'default'
p3309
S'0'
p3310
sS'name'
p3311
S'offset'
p3312
sS'required'
p3313
I00
sS'group_name'
p3314
Nsa(dp3315
S'description'
p3316
S'The scalar material property name\n'
p3317
sS'cpp_type'
p3318
S'MaterialPropertyName'
p3319
sS'default'
p3320
g3
sS'name'
p3321
S'property'
p3322
sS'required'
p3323
I01
sS'group_name'
p3324
Nsa(dp3325
S'description'
p3326
S'The seed for the master random number generator\n'
p3327
sS'cpp_type'
p3328
S'unsigned int'
p3329
sS'default'
p3330
S'0'
p3331
sS'name'
p3332
S'seed'
p3333
sS'required'
p3334
I00
sS'group_name'
p3335
S'Advanced'
p3336
sa(dp3337
S'description'
p3338
S'Evaluate the std::vector<Real> at this quadpoint.  This only needs to be used if you are interested in a particular quadpoint in each element: otherwise do not include this parameter in your input file\n'
p3339
sS'cpp_type'
p3340
S'unsigned int'
p3341
sS'default'
p3342
g3
sS'name'
p3343
S'selected_qp'
p3344
sS'required'
p3345
I00
sS'group_name'
p3346
S'Advanced'
p3347
sa(dp3348
S'description'
p3349
g3
sS'cpp_type'
p3350
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3351
sS'default'
p3352
S'MaterialStdVectorAux'
p3353
sS'name'
p3354
S'type'
p3355
sS'required'
p3356
I00
sS'group_name'
p3357
Nsa(dp3358
S'description'
p3359
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3360
sS'cpp_type'
p3361
S'bool'
p3362
sS'default'
p3363
S'0'
p3364
sS'name'
p3365
S'use_displaced_mesh'
p3366
sS'required'
p3367
I00
sS'group_name'
p3368
S'Advanced'
p3369
sa(dp3370
S'description'
p3371
S'The name of the variable that this object applies to\n'
p3372
sS'cpp_type'
p3373
S'AuxVariableName'
p3374
sS'default'
p3375
g3
sS'name'
p3376
S'variable'
p3377
sS'required'
p3378
I01
sS'group_name'
p3379
NsasS'name'
p3380
S'/AuxKernels/MaterialStdVectorAux'
p3381
sa(dp3382
S'description'
p3383
S"Extracts a component of a material's std::vector<RealGradient> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n"
p3384
sS'subblocks'
p3385
NsS'parameters'
p3386
(lp3387
(dp3388
S'description'
p3389
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3390
sS'cpp_type'
p3391
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3392
sS'default'
p3393
g3
sS'name'
p3394
S'block'
p3395
sS'required'
p3396
I00
sS'group_name'
p3397
Nsa(dp3398
S'description'
p3399
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3400
sS'cpp_type'
p3401
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3402
sS'default'
p3403
g3
sS'name'
p3404
S'boundary'
p3405
sS'required'
p3406
I00
sS'group_name'
p3407
Nsa(dp3408
S'description'
p3409
S'The gradient component to be extracted for this kernel\n'
p3410
sS'cpp_type'
p3411
S'unsigned int'
p3412
sS'default'
p3413
S'0'
p3414
sS'name'
p3415
S'component'
p3416
sS'required'
p3417
I00
sS'group_name'
p3418
Nsa(dp3419
S'description'
p3420
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3421
sS'cpp_type'
p3422
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3423
sS'default'
p3424
g3
sS'name'
p3425
S'control_tags'
p3426
sS'required'
p3427
I00
sS'group_name'
p3428
S'Advanced'
p3429
sa(dp3430
S'description'
p3431
S'Set the enabled status of the MooseObject.\n'
p3432
sS'cpp_type'
p3433
S'bool'
p3434
sS'default'
p3435
S'1'
p3436
sS'name'
p3437
S'enable'
p3438
sS'required'
p3439
I00
sS'group_name'
p3440
S'Advanced'
p3441
sa(dp3442
S'name'
p3443
S'execute_on'
p3444
sS'cpp_type'
p3445
S'MultiMooseEnum'
p3446
sS'default'
p3447
S'LINEAR'
p3448
sS'description'
p3449
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3450
sS'required'
p3451
I00
sS'options'
p3452
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3453
sS'group_name'
p3454
Nsa(dp3455
S'description'
p3456
S'The factor by which to multiply your material property for visualization\n'
p3457
sS'cpp_type'
p3458
S'double'
p3459
sS'default'
p3460
S'1'
p3461
sS'name'
p3462
S'factor'
p3463
sS'required'
p3464
I00
sS'group_name'
p3465
Nsa(dp3466
S'description'
p3467
S'The index to consider for this kernel\n'
p3468
sS'cpp_type'
p3469
S'unsigned int'
p3470
sS'default'
p3471
S'0'
p3472
sS'name'
p3473
S'index'
p3474
sS'required'
p3475
I00
sS'group_name'
p3476
Nsa(dp3477
S'description'
p3478
S'The offset to add to your material property for visualization\n'
p3479
sS'cpp_type'
p3480
S'double'
p3481
sS'default'
p3482
S'0'
p3483
sS'name'
p3484
S'offset'
p3485
sS'required'
p3486
I00
sS'group_name'
p3487
Nsa(dp3488
S'description'
p3489
S'The scalar material property name\n'
p3490
sS'cpp_type'
p3491
S'MaterialPropertyName'
p3492
sS'default'
p3493
g3
sS'name'
p3494
S'property'
p3495
sS'required'
p3496
I01
sS'group_name'
p3497
Nsa(dp3498
S'description'
p3499
S'The seed for the master random number generator\n'
p3500
sS'cpp_type'
p3501
S'unsigned int'
p3502
sS'default'
p3503
S'0'
p3504
sS'name'
p3505
S'seed'
p3506
sS'required'
p3507
I00
sS'group_name'
p3508
S'Advanced'
p3509
sa(dp3510
S'description'
p3511
g3
sS'cpp_type'
p3512
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3513
sS'default'
p3514
S'MaterialStdVectorRealGradientAux'
p3515
sS'name'
p3516
S'type'
p3517
sS'required'
p3518
I00
sS'group_name'
p3519
Nsa(dp3520
S'description'
p3521
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3522
sS'cpp_type'
p3523
S'bool'
p3524
sS'default'
p3525
S'0'
p3526
sS'name'
p3527
S'use_displaced_mesh'
p3528
sS'required'
p3529
I00
sS'group_name'
p3530
S'Advanced'
p3531
sa(dp3532
S'description'
p3533
S'The name of the variable that this object applies to\n'
p3534
sS'cpp_type'
p3535
S'AuxVariableName'
p3536
sS'default'
p3537
g3
sS'name'
p3538
S'variable'
p3539
sS'required'
p3540
I01
sS'group_name'
p3541
NsasS'name'
p3542
S'/AuxKernels/MaterialStdVectorRealGradientAux'
p3543
sa(dp3544
S'description'
p3545
g3
sS'subblocks'
p3546
NsS'parameters'
p3547
(lp3548
(dp3549
S'description'
p3550
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3551
sS'cpp_type'
p3552
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3553
sS'default'
p3554
g3
sS'name'
p3555
S'block'
p3556
sS'required'
p3557
I00
sS'group_name'
p3558
Nsa(dp3559
S'description'
p3560
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3561
sS'cpp_type'
p3562
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3563
sS'default'
p3564
g3
sS'name'
p3565
S'boundary'
p3566
sS'required'
p3567
I00
sS'group_name'
p3568
Nsa(dp3569
S'description'
p3570
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3571
sS'cpp_type'
p3572
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3573
sS'default'
p3574
g3
sS'name'
p3575
S'control_tags'
p3576
sS'required'
p3577
I00
sS'group_name'
p3578
S'Advanced'
p3579
sa(dp3580
S'description'
p3581
S'Set the enabled status of the MooseObject.\n'
p3582
sS'cpp_type'
p3583
S'bool'
p3584
sS'default'
p3585
S'1'
p3586
sS'name'
p3587
S'enable'
p3588
sS'required'
p3589
I00
sS'group_name'
p3590
S'Advanced'
p3591
sa(dp3592
S'name'
p3593
S'execute_on'
p3594
sS'cpp_type'
p3595
S'MultiMooseEnum'
p3596
sS'default'
p3597
S'LINEAR'
p3598
sS'description'
p3599
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3600
sS'required'
p3601
I00
sS'options'
p3602
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3603
sS'group_name'
p3604
Nsa(dp3605
S'description'
p3606
S'The boundary to find the distance to.\n'
p3607
sS'cpp_type'
p3608
S'BoundaryName'
p3609
sS'default'
p3610
g3
sS'name'
p3611
S'paired_boundary'
p3612
sS'required'
p3613
I01
sS'group_name'
p3614
Nsa(dp3615
S'description'
p3616
S'The seed for the master random number generator\n'
p3617
sS'cpp_type'
p3618
S'unsigned int'
p3619
sS'default'
p3620
S'0'
p3621
sS'name'
p3622
S'seed'
p3623
sS'required'
p3624
I00
sS'group_name'
p3625
S'Advanced'
p3626
sa(dp3627
S'description'
p3628
g3
sS'cpp_type'
p3629
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3630
sS'default'
p3631
S'NearestNodeDistanceAux'
p3632
sS'name'
p3633
S'type'
p3634
sS'required'
p3635
I00
sS'group_name'
p3636
Nsa(dp3637
S'description'
p3638
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3639
sS'cpp_type'
p3640
S'bool'
p3641
sS'default'
p3642
S'1'
p3643
sS'name'
p3644
S'use_displaced_mesh'
p3645
sS'required'
p3646
I00
sS'group_name'
p3647
S'Advanced'
p3648
sa(dp3649
S'description'
p3650
S'The name of the variable that this object applies to\n'
p3651
sS'cpp_type'
p3652
S'AuxVariableName'
p3653
sS'default'
p3654
g3
sS'name'
p3655
S'variable'
p3656
sS'required'
p3657
I01
sS'group_name'
p3658
NsasS'name'
p3659
S'/AuxKernels/NearestNodeDistanceAux'
p3660
sa(dp3661
S'description'
p3662
g3
sS'subblocks'
p3663
NsS'parameters'
p3664
(lp3665
(dp3666
S'description'
p3667
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3668
sS'cpp_type'
p3669
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3670
sS'default'
p3671
g3
sS'name'
p3672
S'block'
p3673
sS'required'
p3674
I00
sS'group_name'
p3675
Nsa(dp3676
S'description'
p3677
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3678
sS'cpp_type'
p3679
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3680
sS'default'
p3681
g3
sS'name'
p3682
S'boundary'
p3683
sS'required'
p3684
I00
sS'group_name'
p3685
Nsa(dp3686
S'description'
p3687
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3688
sS'cpp_type'
p3689
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3690
sS'default'
p3691
g3
sS'name'
p3692
S'control_tags'
p3693
sS'required'
p3694
I00
sS'group_name'
p3695
S'Advanced'
p3696
sa(dp3697
S'description'
p3698
S'Set the enabled status of the MooseObject.\n'
p3699
sS'cpp_type'
p3700
S'bool'
p3701
sS'default'
p3702
S'1'
p3703
sS'name'
p3704
S'enable'
p3705
sS'required'
p3706
I00
sS'group_name'
p3707
S'Advanced'
p3708
sa(dp3709
S'name'
p3710
S'execute_on'
p3711
sS'cpp_type'
p3712
S'MultiMooseEnum'
p3713
sS'default'
p3714
S'LINEAR'
p3715
sS'description'
p3716
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3717
sS'required'
p3718
I00
sS'options'
p3719
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3720
sS'group_name'
p3721
Nsa(dp3722
S'description'
p3723
S'The boundary to get the value from.\n'
p3724
sS'cpp_type'
p3725
S'BoundaryName'
p3726
sS'default'
p3727
g3
sS'name'
p3728
S'paired_boundary'
p3729
sS'required'
p3730
I01
sS'group_name'
p3731
Nsa(dp3732
S'description'
p3733
S'The variable to get the value of.\n'
p3734
sS'cpp_type'
p3735
S'std::vector<VariableName>'
p3736
sS'default'
p3737
g3
sS'name'
p3738
S'paired_variable'
p3739
sS'required'
p3740
I01
sS'group_name'
p3741
Nsa(dp3742
S'description'
p3743
S'The seed for the master random number generator\n'
p3744
sS'cpp_type'
p3745
S'unsigned int'
p3746
sS'default'
p3747
S'0'
p3748
sS'name'
p3749
S'seed'
p3750
sS'required'
p3751
I00
sS'group_name'
p3752
S'Advanced'
p3753
sa(dp3754
S'description'
p3755
g3
sS'cpp_type'
p3756
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3757
sS'default'
p3758
S'NearestNodeValueAux'
p3759
sS'name'
p3760
S'type'
p3761
sS'required'
p3762
I00
sS'group_name'
p3763
Nsa(dp3764
S'description'
p3765
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3766
sS'cpp_type'
p3767
S'bool'
p3768
sS'default'
p3769
S'1'
p3770
sS'name'
p3771
S'use_displaced_mesh'
p3772
sS'required'
p3773
I00
sS'group_name'
p3774
S'Advanced'
p3775
sa(dp3776
S'description'
p3777
S'The name of the variable that this object applies to\n'
p3778
sS'cpp_type'
p3779
S'AuxVariableName'
p3780
sS'default'
p3781
g3
sS'name'
p3782
S'variable'
p3783
sS'required'
p3784
I01
sS'group_name'
p3785
NsasS'name'
p3786
S'/AuxKernels/NearestNodeValueAux'
p3787
sa(dp3788
S'description'
p3789
g3
sS'subblocks'
p3790
NsS'parameters'
p3791
(lp3792
(dp3793
S'description'
p3794
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3795
sS'cpp_type'
p3796
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3797
sS'default'
p3798
g3
sS'name'
p3799
S'block'
p3800
sS'required'
p3801
I00
sS'group_name'
p3802
Nsa(dp3803
S'description'
p3804
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3805
sS'cpp_type'
p3806
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3807
sS'default'
p3808
g3
sS'name'
p3809
S'boundary'
p3810
sS'required'
p3811
I00
sS'group_name'
p3812
Nsa(dp3813
S'description'
p3814
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3815
sS'cpp_type'
p3816
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3817
sS'default'
p3818
g3
sS'name'
p3819
S'control_tags'
p3820
sS'required'
p3821
I00
sS'group_name'
p3822
S'Advanced'
p3823
sa(dp3824
S'description'
p3825
S'Set the enabled status of the MooseObject.\n'
p3826
sS'cpp_type'
p3827
S'bool'
p3828
sS'default'
p3829
S'1'
p3830
sS'name'
p3831
S'enable'
p3832
sS'required'
p3833
I00
sS'group_name'
p3834
S'Advanced'
p3835
sa(dp3836
S'name'
p3837
S'execute_on'
p3838
sS'cpp_type'
p3839
S'MultiMooseEnum'
p3840
sS'default'
p3841
S'LINEAR'
p3842
sS'description'
p3843
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3844
sS'required'
p3845
I00
sS'options'
p3846
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3847
sS'group_name'
p3848
Nsa(dp3849
S'description'
p3850
S'The normalization factor\n'
p3851
sS'cpp_type'
p3852
S'double'
p3853
sS'default'
p3854
S'1'
p3855
sS'name'
p3856
S'normal_factor'
p3857
sS'required'
p3858
I00
sS'group_name'
p3859
Nsa(dp3860
S'description'
p3861
S'The postprocessor on the source\n'
p3862
sS'cpp_type'
p3863
S'PostprocessorName'
p3864
sS'default'
p3865
g3
sS'name'
p3866
S'normalization'
p3867
sS'required'
p3868
I01
sS'group_name'
p3869
Nsa(dp3870
S'description'
p3871
S'The seed for the master random number generator\n'
p3872
sS'cpp_type'
p3873
S'unsigned int'
p3874
sS'default'
p3875
S'0'
p3876
sS'name'
p3877
S'seed'
p3878
sS'required'
p3879
I00
sS'group_name'
p3880
S'Advanced'
p3881
sa(dp3882
S'description'
p3883
S'The variable to be normalized\n'
p3884
sS'cpp_type'
p3885
S'std::vector<VariableName>'
p3886
sS'default'
p3887
g3
sS'name'
p3888
S'source_variable'
p3889
sS'required'
p3890
I01
sS'group_name'
p3891
Nsa(dp3892
S'description'
p3893
g3
sS'cpp_type'
p3894
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3895
sS'default'
p3896
S'NormalizationAux'
p3897
sS'name'
p3898
S'type'
p3899
sS'required'
p3900
I00
sS'group_name'
p3901
Nsa(dp3902
S'description'
p3903
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3904
sS'cpp_type'
p3905
S'bool'
p3906
sS'default'
p3907
S'0'
p3908
sS'name'
p3909
S'use_displaced_mesh'
p3910
sS'required'
p3911
I00
sS'group_name'
p3912
S'Advanced'
p3913
sa(dp3914
S'description'
p3915
S'The name of the variable that this object applies to\n'
p3916
sS'cpp_type'
p3917
S'AuxVariableName'
p3918
sS'default'
p3919
g3
sS'name'
p3920
S'variable'
p3921
sS'required'
p3922
I01
sS'group_name'
p3923
NsasS'name'
p3924
S'/AuxKernels/NormalizationAux'
p3925
sa(dp3926
S'description'
p3927
S'Parsed function AuxKernel.\n'
p3928
sS'subblocks'
p3929
NsS'parameters'
p3930
(lp3931
(dp3932
S'description'
p3933
S'coupled variables\n'
p3934
sS'cpp_type'
p3935
S'std::vector<VariableName>'
p3936
sS'default'
p3937
g3
sS'name'
p3938
S'args'
p3939
sS'required'
p3940
I00
sS'group_name'
p3941
Nsa(dp3942
S'description'
p3943
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3944
sS'cpp_type'
p3945
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3946
sS'default'
p3947
g3
sS'name'
p3948
S'block'
p3949
sS'required'
p3950
I00
sS'group_name'
p3951
Nsa(dp3952
S'description'
p3953
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3954
sS'cpp_type'
p3955
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3956
sS'default'
p3957
g3
sS'name'
p3958
S'boundary'
p3959
sS'required'
p3960
I00
sS'group_name'
p3961
Nsa(dp3962
S'description'
p3963
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p3964
sS'cpp_type'
p3965
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3966
sS'default'
p3967
g3
sS'name'
p3968
S'constant_expressions'
p3969
sS'required'
p3970
I00
sS'group_name'
p3971
Nsa(dp3972
S'description'
p3973
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p3974
sS'cpp_type'
p3975
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3976
sS'default'
p3977
g3
sS'name'
p3978
S'constant_names'
p3979
sS'required'
p3980
I00
sS'group_name'
p3981
Nsa(dp3982
S'description'
p3983
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3984
sS'cpp_type'
p3985
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3986
sS'default'
p3987
g3
sS'name'
p3988
S'control_tags'
p3989
sS'required'
p3990
I00
sS'group_name'
p3991
S'Advanced'
p3992
sa(dp3993
S'description'
p3994
S'Disable the function parser algebraic optimizer\n'
p3995
sS'cpp_type'
p3996
S'bool'
p3997
sS'default'
p3998
S'0'
p3999
sS'name'
p4000
S'disable_fpoptimizer'
p4001
sS'required'
p4002
I00
sS'group_name'
p4003
S'Advanced'
p4004
sa(dp4005
S'description'
p4006
S'Set the enabled status of the MooseObject.\n'
p4007
sS'cpp_type'
p4008
S'bool'
p4009
sS'default'
p4010
S'1'
p4011
sS'name'
p4012
S'enable'
p4013
sS'required'
p4014
I00
sS'group_name'
p4015
S'Advanced'
p4016
sa(dp4017
S'description'
p4018
S'Enable cacheing of function derivatives for faster startup time\n'
p4019
sS'cpp_type'
p4020
S'bool'
p4021
sS'default'
p4022
S'1'
p4023
sS'name'
p4024
S'enable_ad_cache'
p4025
sS'required'
p4026
I00
sS'group_name'
p4027
S'Advanced'
p4028
sa(dp4029
S'description'
p4030
S'Enable automatic immediate optimization of derivatives\n'
p4031
sS'cpp_type'
p4032
S'bool'
p4033
sS'default'
p4034
S'1'
p4035
sS'name'
p4036
S'enable_auto_optimize'
p4037
sS'required'
p4038
I00
sS'group_name'
p4039
S'Advanced'
p4040
sa(dp4041
S'description'
p4042
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p4043
sS'cpp_type'
p4044
S'bool'
p4045
sS'default'
p4046
S'1'
p4047
sS'name'
p4048
S'enable_jit'
p4049
sS'required'
p4050
I00
sS'group_name'
p4051
S'Advanced'
p4052
sa(dp4053
S'name'
p4054
S'execute_on'
p4055
sS'cpp_type'
p4056
S'MultiMooseEnum'
p4057
sS'default'
p4058
S'LINEAR'
p4059
sS'description'
p4060
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4061
sS'required'
p4062
I00
sS'options'
p4063
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4064
sS'group_name'
p4065
Nsa(dp4066
S'description'
p4067
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p4068
sS'cpp_type'
p4069
S'bool'
p4070
sS'default'
p4071
S'0'
p4072
sS'name'
p4073
S'fail_on_evalerror'
p4074
sS'required'
p4075
I00
sS'group_name'
p4076
S'Advanced'
p4077
sa(dp4078
S'description'
p4079
S'function expression\n'
p4080
sS'cpp_type'
p4081
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4082
sS'default'
p4083
g3
sS'name'
p4084
S'function'
p4085
sS'required'
p4086
I01
sS'group_name'
p4087
Nsa(dp4088
S'description'
p4089
S'The seed for the master random number generator\n'
p4090
sS'cpp_type'
p4091
S'unsigned int'
p4092
sS'default'
p4093
S'0'
p4094
sS'name'
p4095
S'seed'
p4096
sS'required'
p4097
I00
sS'group_name'
p4098
S'Advanced'
p4099
sa(dp4100
S'description'
p4101
g3
sS'cpp_type'
p4102
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4103
sS'default'
p4104
S'ParsedAux'
p4105
sS'name'
p4106
S'type'
p4107
sS'required'
p4108
I00
sS'group_name'
p4109
Nsa(dp4110
S'description'
p4111
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4112
sS'cpp_type'
p4113
S'bool'
p4114
sS'default'
p4115
S'0'
p4116
sS'name'
p4117
S'use_displaced_mesh'
p4118
sS'required'
p4119
I00
sS'group_name'
p4120
S'Advanced'
p4121
sa(dp4122
S'description'
p4123
S'The name of the variable that this object applies to\n'
p4124
sS'cpp_type'
p4125
S'AuxVariableName'
p4126
sS'default'
p4127
g3
sS'name'
p4128
S'variable'
p4129
sS'required'
p4130
I01
sS'group_name'
p4131
NsasS'name'
p4132
S'/AuxKernels/ParsedAux'
p4133
sa(dp4134
S'description'
p4135
g3
sS'subblocks'
p4136
NsS'parameters'
p4137
(lp4138
(dp4139
S'description'
p4140
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4141
sS'cpp_type'
p4142
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4143
sS'default'
p4144
g3
sS'name'
p4145
S'block'
p4146
sS'required'
p4147
I00
sS'group_name'
p4148
Nsa(dp4149
S'description'
p4150
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4151
sS'cpp_type'
p4152
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4153
sS'default'
p4154
g3
sS'name'
p4155
S'boundary'
p4156
sS'required'
p4157
I00
sS'group_name'
p4158
Nsa(dp4159
S'description'
p4160
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4161
sS'cpp_type'
p4162
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p4163
sS'default'
p4164
g3
sS'name'
p4165
S'control_tags'
p4166
sS'required'
p4167
I00
sS'group_name'
p4168
S'Advanced'
p4169
sa(dp4170
S'description'
p4171
S'Set the enabled status of the MooseObject.\n'
p4172
sS'cpp_type'
p4173
S'bool'
p4174
sS'default'
p4175
S'1'
p4176
sS'name'
p4177
S'enable'
p4178
sS'required'
p4179
I00
sS'group_name'
p4180
S'Advanced'
p4181
sa(dp4182
S'name'
p4183
S'execute_on'
p4184
sS'cpp_type'
p4185
S'MultiMooseEnum'
p4186
sS'default'
p4187
S'LINEAR'
p4188
sS'description'
p4189
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4190
sS'required'
p4191
I00
sS'options'
p4192
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4193
sS'group_name'
p4194
Nsa(dp4195
S'description'
p4196
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p4197
sS'cpp_type'
p4198
S'double'
p4199
sS'default'
p4200
g3
sS'name'
p4201
S'normal_smoothing_distance'
p4202
sS'required'
p4203
I00
sS'group_name'
p4204
Nsa(dp4205
S'description'
p4206
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p4207
sS'cpp_type'
p4208
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4209
sS'default'
p4210
g3
sS'name'
p4211
S'normal_smoothing_method'
p4212
sS'required'
p4213
I00
sS'group_name'
p4214
Nsa(dp4215
S'name'
p4216
S'order'
p4217
sS'cpp_type'
p4218
S'MooseEnum'
p4219
sS'default'
p4220
S'FIRST'
p4221
sS'description'
p4222
S'The finite element order\n'
p4223
sS'required'
p4224
I00
sS'options'
p4225
S'FIRST SECOND THIRD FOURTH'
p4226
sS'group_name'
p4227
Nsa(dp4228
S'description'
p4229
S'The boundary to be penetrated\n'
p4230
sS'cpp_type'
p4231
S'BoundaryName'
p4232
sS'default'
p4233
g3
sS'name'
p4234
S'paired_boundary'
p4235
sS'required'
p4236
I01
sS'group_name'
p4237
Nsa(dp4238
S'name'
p4239
S'quantity'
p4240
sS'cpp_type'
p4241
S'MooseEnum'
p4242
sS'default'
p4243
S'distance'
p4244
sS'description'
p4245
S'The quantity to recover from the available penetration information\n'
p4246
sS'required'
p4247
I00
sS'options'
p4248
S'distance tangential_distance normal_x normal_y normal_z closest_point_x closest_point_y closest_point_z element_id side incremental_slip_magnitude incremental_slip_x incremental_slip_y incremental_slip_z accumulated_slip force_x force_y force_z normal_force_magnitude normal_force_x normal_force_y normal_force_z tangential_force_magnitude tangential_force_x tangential_force_y tangential_force_z frictional_energy lagrange_multiplier mechanical_status'
p4249
sS'group_name'
p4250
Nsa(dp4251
S'description'
p4252
S'The seed for the master random number generator\n'
p4253
sS'cpp_type'
p4254
S'unsigned int'
p4255
sS'default'
p4256
S'0'
p4257
sS'name'
p4258
S'seed'
p4259
sS'required'
p4260
I00
sS'group_name'
p4261
S'Advanced'
p4262
sa(dp4263
S'description'
p4264
S'Tangential distance to extend edges of contact surfaces\n'
p4265
sS'cpp_type'
p4266
S'double'
p4267
sS'default'
p4268
g3
sS'name'
p4269
S'tangential_tolerance'
p4270
sS'required'
p4271
I00
sS'group_name'
p4272
Nsa(dp4273
S'description'
p4274
g3
sS'cpp_type'
p4275
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4276
sS'default'
p4277
S'PenetrationAux'
p4278
sS'name'
p4279
S'type'
p4280
sS'required'
p4281
I00
sS'group_name'
p4282
Nsa(dp4283
S'description'
p4284
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4285
sS'cpp_type'
p4286
S'bool'
p4287
sS'default'
p4288
S'1'
p4289
sS'name'
p4290
S'use_displaced_mesh'
p4291
sS'required'
p4292
I00
sS'group_name'
p4293
S'Advanced'
p4294
sa(dp4295
S'description'
p4296
S'The name of the variable that this object applies to\n'
p4297
sS'cpp_type'
p4298
S'AuxVariableName'
p4299
sS'default'
p4300
g3
sS'name'
p4301
S'variable'
p4302
sS'required'
p4303
I01
sS'group_name'
p4304
NsasS'name'
p4305
S'/AuxKernels/PenetrationAux'
p4306
sa(dp4307
S'description'
p4308
g3
sS'subblocks'
p4309
NsS'parameters'
p4310
(lp4311
(dp4312
S'description'
p4313
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4314
sS'cpp_type'
p4315
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4316
sS'default'
p4317
g3
sS'name'
p4318
S'block'
p4319
sS'required'
p4320
I00
sS'group_name'
p4321
Nsa(dp4322
S'description'
p4323
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4324
sS'cpp_type'
p4325
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4326
sS'default'
p4327
g3
sS'name'
p4328
S'boundary'
p4329
sS'required'
p4330
I00
sS'group_name'
p4331
Nsa(dp4332
S'description'
p4333
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4334
sS'cpp_type'
p4335
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p4336
sS'default'
p4337
g3
sS'name'
p4338
S'control_tags'
p4339
sS'required'
p4340
I00
sS'group_name'
p4341
S'Advanced'
p4342
sa(dp4343
S'description'
p4344
S'Set the enabled status of the MooseObject.\n'
p4345
sS'cpp_type'
p4346
S'bool'
p4347
sS'default'
p4348
S'1'
p4349
sS'name'
p4350
S'enable'
p4351
sS'required'
p4352
I00
sS'group_name'
p4353
S'Advanced'
p4354
sa(dp4355
S'name'
p4356
S'execute_on'
p4357
sS'cpp_type'
p4358
S'MultiMooseEnum'
p4359
sS'default'
p4360
S'LINEAR'
p4361
sS'description'
p4362
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4363
sS'required'
p4364
I00
sS'options'
p4365
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4366
sS'group_name'
p4367
Nsa(dp4368
S'description'
p4369
S'The seed for the master random number generator\n'
p4370
sS'cpp_type'
p4371
S'unsigned int'
p4372
sS'default'
p4373
S'0'
p4374
sS'name'
p4375
S'seed'
p4376
sS'required'
p4377
I00
sS'group_name'
p4378
S'Advanced'
p4379
sa(dp4380
S'description'
p4381
g3
sS'cpp_type'
p4382
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4383
sS'default'
p4384
S'ProcessorIDAux'
p4385
sS'name'
p4386
S'type'
p4387
sS'required'
p4388
I00
sS'group_name'
p4389
Nsa(dp4390
S'description'
p4391
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4392
sS'cpp_type'
p4393
S'bool'
p4394
sS'default'
p4395
S'0'
p4396
sS'name'
p4397
S'use_displaced_mesh'
p4398
sS'required'
p4399
I00
sS'group_name'
p4400
S'Advanced'
p4401
sa(dp4402
S'description'
p4403
S'The name of the variable that this object applies to\n'
p4404
sS'cpp_type'
p4405
S'AuxVariableName'
p4406
sS'default'
p4407
g3
sS'name'
p4408
S'variable'
p4409
sS'required'
p4410
I01
sS'group_name'
p4411
NsasS'name'
p4412
S'/AuxKernels/ProcessorIDAux'
p4413
sa(dp4414
S'description'
p4415
g3
sS'subblocks'
p4416
NsS'parameters'
p4417
(lp4418
(dp4419
S'description'
p4420
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4421
sS'cpp_type'
p4422
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4423
sS'default'
p4424
g3
sS'name'
p4425
S'block'
p4426
sS'required'
p4427
I00
sS'group_name'
p4428
Nsa(dp4429
S'description'
p4430
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4431
sS'cpp_type'
p4432
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4433
sS'default'
p4434
g3
sS'name'
p4435
S'boundary'
p4436
sS'required'
p4437
I00
sS'group_name'
p4438
Nsa(dp4439
S'description'
p4440
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4441
sS'cpp_type'
p4442
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p4443
sS'default'
p4444
g3
sS'name'
p4445
S'control_tags'
p4446
sS'required'
p4447
I00
sS'group_name'
p4448
S'Advanced'
p4449
sa(dp4450
S'description'
p4451
S'The downstairs of the quotient variable\n'
p4452
sS'cpp_type'
p4453
S'std::vector<VariableName>'
p4454
sS'default'
p4455
g3
sS'name'
p4456
S'denominator'
p4457
sS'required'
p4458
I00
sS'group_name'
p4459
Nsa(dp4460
S'description'
p4461
S'Set the enabled status of the MooseObject.\n'
p4462
sS'cpp_type'
p4463
S'bool'
p4464
sS'default'
p4465
S'1'
p4466
sS'name'
p4467
S'enable'
p4468
sS'required'
p4469
I00
sS'group_name'
p4470
S'Advanced'
p4471
sa(dp4472
S'name'
p4473
S'execute_on'
p4474
sS'cpp_type'
p4475
S'MultiMooseEnum'
p4476
sS'default'
p4477
S'LINEAR'
p4478
sS'description'
p4479
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4480
sS'required'
p4481
I00
sS'options'
p4482
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4483
sS'group_name'
p4484
Nsa(dp4485
S'description'
p4486
S'The upstairs of the quotient variable\n'
p4487
sS'cpp_type'
p4488
S'std::vector<VariableName>'
p4489
sS'default'
p4490
g3
sS'name'
p4491
S'numerator'
p4492
sS'required'
p4493
I00
sS'group_name'
p4494
Nsa(dp4495
S'description'
p4496
S'The seed for the master random number generator\n'
p4497
sS'cpp_type'
p4498
S'unsigned int'
p4499
sS'default'
p4500
S'0'
p4501
sS'name'
p4502
S'seed'
p4503
sS'required'
p4504
I00
sS'group_name'
p4505
S'Advanced'
p4506
sa(dp4507
S'description'
p4508
g3
sS'cpp_type'
p4509
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4510
sS'default'
p4511
S'QuotientAux'
p4512
sS'name'
p4513
S'type'
p4514
sS'required'
p4515
I00
sS'group_name'
p4516
Nsa(dp4517
S'description'
p4518
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4519
sS'cpp_type'
p4520
S'bool'
p4521
sS'default'
p4522
S'0'
p4523
sS'name'
p4524
S'use_displaced_mesh'
p4525
sS'required'
p4526
I00
sS'group_name'
p4527
S'Advanced'
p4528
sa(dp4529
S'description'
p4530
S'The name of the variable that this object applies to\n'
p4531
sS'cpp_type'
p4532
S'AuxVariableName'
p4533
sS'default'
p4534
g3
sS'name'
p4535
S'variable'
p4536
sS'required'
p4537
I01
sS'group_name'
p4538
NsasS'name'
p4539
S'/AuxKernels/QuotientAux'
p4540
sa(dp4541
S'description'
p4542
g3
sS'subblocks'
p4543
NsS'parameters'
p4544
(lp4545
(dp4546
S'description'
p4547
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4548
sS'cpp_type'
p4549
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4550
sS'default'
p4551
g3
sS'name'
p4552
S'block'
p4553
sS'required'
p4554
I00
sS'group_name'
p4555
Nsa(dp4556
S'description'
p4557
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4558
sS'cpp_type'
p4559
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4560
sS'default'
p4561
g3
sS'name'
p4562
S'boundary'
p4563
sS'required'
p4564
I00
sS'group_name'
p4565
Nsa(dp4566
S'description'
p4567
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4568
sS'cpp_type'
p4569
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p4570
sS'default'
p4571
g3
sS'name'
p4572
S'control_tags'
p4573
sS'required'
p4574
I00
sS'group_name'
p4575
S'Advanced'
p4576
sa(dp4577
S'description'
p4578
S'Set the enabled status of the MooseObject.\n'
p4579
sS'cpp_type'
p4580
S'bool'
p4581
sS'default'
p4582
S'1'
p4583
sS'name'
p4584
S'enable'
p4585
sS'required'
p4586
I00
sS'group_name'
p4587
S'Advanced'
p4588
sa(dp4589
S'name'
p4590
S'execute_on'
p4591
sS'cpp_type'
p4592
S'MultiMooseEnum'
p4593
sS'default'
p4594
S'LINEAR'
p4595
sS'description'
p4596
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4597
sS'required'
p4598
I00
sS'options'
p4599
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4600
sS'group_name'
p4601
Nsa(dp4602
S'description'
p4603
S'The seed for the master random number generator\n'
p4604
sS'cpp_type'
p4605
S'unsigned int'
p4606
sS'default'
p4607
S'0'
p4608
sS'name'
p4609
S'seed'
p4610
sS'required'
p4611
I00
sS'group_name'
p4612
S'Advanced'
p4613
sa(dp4614
S'description'
p4615
g3
sS'cpp_type'
p4616
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4617
sS'default'
p4618
S'SelfAux'
p4619
sS'name'
p4620
S'type'
p4621
sS'required'
p4622
I00
sS'group_name'
p4623
Nsa(dp4624
S'description'
p4625
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4626
sS'cpp_type'
p4627
S'bool'
p4628
sS'default'
p4629
S'0'
p4630
sS'name'
p4631
S'use_displaced_mesh'
p4632
sS'required'
p4633
I00
sS'group_name'
p4634
S'Advanced'
p4635
sa(dp4636
S'description'
p4637
S'The name of the variable that this object applies to\n'
p4638
sS'cpp_type'
p4639
S'AuxVariableName'
p4640
sS'default'
p4641
g3
sS'name'
p4642
S'variable'
p4643
sS'required'
p4644
I01
sS'group_name'
p4645
NsasS'name'
p4646
S'/AuxKernels/SelfAux'
p4647
sa(dp4648
S'description'
p4649
g3
sS'subblocks'
p4650
NsS'parameters'
p4651
(lp4652
(dp4653
S'description'
p4654
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p4655
sS'cpp_type'
p4656
S'double'
p4657
sS'default'
p4658
S'0'
p4659
sS'name'
p4660
S'add_factor'
p4661
sS'required'
p4662
I00
sS'group_name'
p4663
Nsa(dp4664
S'description'
p4665
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4666
sS'cpp_type'
p4667
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4668
sS'default'
p4669
g3
sS'name'
p4670
S'block'
p4671
sS'required'
p4672
I00
sS'group_name'
p4673
Nsa(dp4674
S'description'
p4675
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4676
sS'cpp_type'
p4677
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4678
sS'default'
p4679
g3
sS'name'
p4680
S'boundary'
p4681
sS'required'
p4682
I00
sS'group_name'
p4683
Nsa(dp4684
S'description'
p4685
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4686
sS'cpp_type'
p4687
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p4688
sS'default'
p4689
g3
sS'name'
p4690
S'control_tags'
p4691
sS'required'
p4692
I00
sS'group_name'
p4693
S'Advanced'
p4694
sa(dp4695
S'description'
p4696
S'If true the meshes must be the same and then the values are simply copied over.\n'
p4697
sS'cpp_type'
p4698
S'bool'
p4699
sS'default'
p4700
S'0'
p4701
sS'name'
p4702
S'direct'
p4703
sS'required'
p4704
I00
sS'group_name'
p4705
Nsa(dp4706
S'description'
p4707
S'Set the enabled status of the MooseObject.\n'
p4708
sS'cpp_type'
p4709
S'bool'
p4710
sS'default'
p4711
S'1'
p4712
sS'name'
p4713
S'enable'
p4714
sS'required'
p4715
I00
sS'group_name'
p4716
S'Advanced'
p4717
sa(dp4718
S'name'
p4719
S'execute_on'
p4720
sS'cpp_type'
p4721
S'MultiMooseEnum'
p4722
sS'default'
p4723
S'LINEAR'
p4724
sS'description'
p4725
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4726
sS'required'
p4727
I00
sS'options'
p4728
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4729
sS'group_name'
p4730
Nsa(dp4731
S'description'
p4732
S'The name of the variable to extract from the file\n'
p4733
sS'cpp_type'
p4734
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4735
sS'default'
p4736
g3
sS'name'
p4737
S'from_variable'
p4738
sS'required'
p4739
I00
sS'group_name'
p4740
Nsa(dp4741
S'description'
p4742
S"Scale factor (a)  to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p4743
sS'cpp_type'
p4744
S'double'
p4745
sS'default'
p4746
S'1'
p4747
sS'name'
p4748
S'scale_factor'
p4749
sS'required'
p4750
I00
sS'group_name'
p4751
Nsa(dp4752
S'description'
p4753
S'The seed for the master random number generator\n'
p4754
sS'cpp_type'
p4755
S'unsigned int'
p4756
sS'default'
p4757
S'0'
p4758
sS'name'
p4759
S'seed'
p4760
sS'required'
p4761
I00
sS'group_name'
p4762
S'Advanced'
p4763
sa(dp4764
S'description'
p4765
S'The name of the SolutionUserObject\n'
p4766
sS'cpp_type'
p4767
S'UserObjectName'
p4768
sS'default'
p4769
g3
sS'name'
p4770
S'solution'
p4771
sS'required'
p4772
I01
sS'group_name'
p4773
Nsa(dp4774
S'description'
p4775
g3
sS'cpp_type'
p4776
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4777
sS'default'
p4778
S'SolutionAux'
p4779
sS'name'
p4780
S'type'
p4781
sS'required'
p4782
I00
sS'group_name'
p4783
Nsa(dp4784
S'description'
p4785
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4786
sS'cpp_type'
p4787
S'bool'
p4788
sS'default'
p4789
S'0'
p4790
sS'name'
p4791
S'use_displaced_mesh'
p4792
sS'required'
p4793
I00
sS'group_name'
p4794
S'Advanced'
p4795
sa(dp4796
S'description'
p4797
S'The name of the variable that this object applies to\n'
p4798
sS'cpp_type'
p4799
S'AuxVariableName'
p4800
sS'default'
p4801
g3
sS'name'
p4802
S'variable'
p4803
sS'required'
p4804
I01
sS'group_name'
p4805
NsasS'name'
p4806
S'/AuxKernels/SolutionAux'
p4807
sa(dp4808
S'description'
p4809
g3
sS'subblocks'
p4810
NsS'parameters'
p4811
(lp4812
(dp4813
S'description'
p4814
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4815
sS'cpp_type'
p4816
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4817
sS'default'
p4818
g3
sS'name'
p4819
S'block'
p4820
sS'required'
p4821
I00
sS'group_name'
p4822
Nsa(dp4823
S'description'
p4824
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4825
sS'cpp_type'
p4826
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4827
sS'default'
p4828
g3
sS'name'
p4829
S'boundary'
p4830
sS'required'
p4831
I00
sS'group_name'
p4832
Nsa(dp4833
S'description'
p4834
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4835
sS'cpp_type'
p4836
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p4837
sS'default'
p4838
g3
sS'name'
p4839
S'control_tags'
p4840
sS'required'
p4841
I00
sS'group_name'
p4842
S'Advanced'
p4843
sa(dp4844
S'description'
p4845
S'Set the enabled status of the MooseObject.\n'
p4846
sS'cpp_type'
p4847
S'bool'
p4848
sS'default'
p4849
S'1'
p4850
sS'name'
p4851
S'enable'
p4852
sS'required'
p4853
I00
sS'group_name'
p4854
S'Advanced'
p4855
sa(dp4856
S'name'
p4857
S'execute_on'
p4858
sS'cpp_type'
p4859
S'MultiMooseEnum'
p4860
sS'default'
p4861
S'LINEAR'
p4862
sS'description'
p4863
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4864
sS'required'
p4865
I00
sS'options'
p4866
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4867
sS'group_name'
p4868
Nsa(dp4869
S'description'
p4870
S'The seed for the master random number generator\n'
p4871
sS'cpp_type'
p4872
S'unsigned int'
p4873
sS'default'
p4874
S'0'
p4875
sS'name'
p4876
S'seed'
p4877
sS'required'
p4878
I00
sS'group_name'
p4879
S'Advanced'
p4880
sa(dp4881
S'description'
p4882
g3
sS'cpp_type'
p4883
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4884
sS'default'
p4885
S'SpatialUserObjectAux'
p4886
sS'name'
p4887
S'type'
p4888
sS'required'
p4889
I00
sS'group_name'
p4890
Nsa(dp4891
S'description'
p4892
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4893
sS'cpp_type'
p4894
S'bool'
p4895
sS'default'
p4896
S'0'
p4897
sS'name'
p4898
S'use_displaced_mesh'
p4899
sS'required'
p4900
I00
sS'group_name'
p4901
S'Advanced'
p4902
sa(dp4903
S'description'
p4904
S'The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n'
p4905
sS'cpp_type'
p4906
S'UserObjectName'
p4907
sS'default'
p4908
g3
sS'name'
p4909
S'user_object'
p4910
sS'required'
p4911
I01
sS'group_name'
p4912
Nsa(dp4913
S'description'
p4914
S'The name of the variable that this object applies to\n'
p4915
sS'cpp_type'
p4916
S'AuxVariableName'
p4917
sS'default'
p4918
g3
sS'name'
p4919
S'variable'
p4920
sS'required'
p4921
I01
sS'group_name'
p4922
NsasS'name'
p4923
S'/AuxKernels/SpatialUserObjectAux'
p4924
sa(dp4925
S'description'
p4926
g3
sS'subblocks'
p4927
NsS'parameters'
p4928
(lp4929
(dp4930
S'description'
p4931
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4932
sS'cpp_type'
p4933
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4934
sS'default'
p4935
g3
sS'name'
p4936
S'block'
p4937
sS'required'
p4938
I00
sS'group_name'
p4939
Nsa(dp4940
S'description'
p4941
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4942
sS'cpp_type'
p4943
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4944
sS'default'
p4945
g3
sS'name'
p4946
S'boundary'
p4947
sS'required'
p4948
I00
sS'group_name'
p4949
Nsa(dp4950
S'name'
p4951
S'component'
p4952
sS'cpp_type'
p4953
S'MooseEnum'
p4954
sS'default'
p4955
g3
sS'description'
p4956
S'The gradient component to compute\n'
p4957
sS'required'
p4958
I00
sS'options'
p4959
S'x y z'
p4960
sS'group_name'
p4961
Nsa(dp4962
S'description'
p4963
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4964
sS'cpp_type'
p4965
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p4966
sS'default'
p4967
g3
sS'name'
p4968
S'control_tags'
p4969
sS'required'
p4970
I00
sS'group_name'
p4971
S'Advanced'
p4972
sa(dp4973
S'description'
p4974
S'Set the enabled status of the MooseObject.\n'
p4975
sS'cpp_type'
p4976
S'bool'
p4977
sS'default'
p4978
S'1'
p4979
sS'name'
p4980
S'enable'
p4981
sS'required'
p4982
I00
sS'group_name'
p4983
S'Advanced'
p4984
sa(dp4985
S'name'
p4986
S'execute_on'
p4987
sS'cpp_type'
p4988
S'MultiMooseEnum'
p4989
sS'default'
p4990
S'LINEAR'
p4991
sS'description'
p4992
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4993
sS'required'
p4994
I00
sS'options'
p4995
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4996
sS'group_name'
p4997
Nsa(dp4998
S'description'
p4999
S'The variable from which to compute the gradient component\n'
p5000
sS'cpp_type'
p5001
S'std::vector<VariableName>'
p5002
sS'default'
p5003
g3
sS'name'
p5004
S'gradient_variable'
p5005
sS'required'
p5006
I01
sS'group_name'
p5007
Nsa(dp5008
S'description'
p5009
S'The seed for the master random number generator\n'
p5010
sS'cpp_type'
p5011
S'unsigned int'
p5012
sS'default'
p5013
S'0'
p5014
sS'name'
p5015
S'seed'
p5016
sS'required'
p5017
I00
sS'group_name'
p5018
S'Advanced'
p5019
sa(dp5020
S'description'
p5021
g3
sS'cpp_type'
p5022
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5023
sS'default'
p5024
S'VariableGradientComponent'
p5025
sS'name'
p5026
S'type'
p5027
sS'required'
p5028
I00
sS'group_name'
p5029
Nsa(dp5030
S'description'
p5031
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5032
sS'cpp_type'
p5033
S'bool'
p5034
sS'default'
p5035
S'0'
p5036
sS'name'
p5037
S'use_displaced_mesh'
p5038
sS'required'
p5039
I00
sS'group_name'
p5040
S'Advanced'
p5041
sa(dp5042
S'description'
p5043
S'The name of the variable that this object applies to\n'
p5044
sS'cpp_type'
p5045
S'AuxVariableName'
p5046
sS'default'
p5047
g3
sS'name'
p5048
S'variable'
p5049
sS'required'
p5050
I01
sS'group_name'
p5051
NsasS'name'
p5052
S'/AuxKernels/VariableGradientComponent'
p5053
sa(dp5054
S'description'
p5055
g3
sS'subblocks'
p5056
NsS'parameters'
p5057
(lp5058
(dp5059
S'description'
p5060
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5061
sS'cpp_type'
p5062
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p5063
sS'default'
p5064
g3
sS'name'
p5065
S'block'
p5066
sS'required'
p5067
I00
sS'group_name'
p5068
Nsa(dp5069
S'description'
p5070
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5071
sS'cpp_type'
p5072
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p5073
sS'default'
p5074
g3
sS'name'
p5075
S'boundary'
p5076
sS'required'
p5077
I00
sS'group_name'
p5078
Nsa(dp5079
S'description'
p5080
S'A simple coefficient\n'
p5081
sS'cpp_type'
p5082
S'double'
p5083
sS'default'
p5084
S'1'
p5085
sS'name'
p5086
S'coefficient'
p5087
sS'required'
p5088
I00
sS'group_name'
p5089
Nsa(dp5090
S'description'
p5091
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5092
sS'cpp_type'
p5093
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5094
sS'default'
p5095
g3
sS'name'
p5096
S'control_tags'
p5097
sS'required'
p5098
I00
sS'group_name'
p5099
S'Advanced'
p5100
sa(dp5101
S'description'
p5102
S'Set the enabled status of the MooseObject.\n'
p5103
sS'cpp_type'
p5104
S'bool'
p5105
sS'default'
p5106
S'1'
p5107
sS'name'
p5108
S'enable'
p5109
sS'required'
p5110
I00
sS'group_name'
p5111
S'Advanced'
p5112
sa(dp5113
S'name'
p5114
S'execute_on'
p5115
sS'cpp_type'
p5116
S'MultiMooseEnum'
p5117
sS'default'
p5118
S'LINEAR'
p5119
sS'description'
p5120
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5121
sS'required'
p5122
I00
sS'options'
p5123
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5124
sS'group_name'
p5125
Nsa(dp5126
S'description'
p5127
S'The order of global truncation error: midpoint=1, trapazoidal=2, Simpson=3\n'
p5128
sS'cpp_type'
p5129
S'unsigned int'
p5130
sS'default'
p5131
S'2'
p5132
sS'name'
p5133
S'order'
p5134
sS'required'
p5135
I00
sS'group_name'
p5136
Nsa(dp5137
S'description'
p5138
S'The seed for the master random number generator\n'
p5139
sS'cpp_type'
p5140
S'unsigned int'
p5141
sS'default'
p5142
S'0'
p5143
sS'name'
p5144
S'seed'
p5145
sS'required'
p5146
I00
sS'group_name'
p5147
S'Advanced'
p5148
sa(dp5149
S'description'
p5150
g3
sS'cpp_type'
p5151
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5152
sS'default'
p5153
S'VariableTimeIntegrationAux'
p5154
sS'name'
p5155
S'type'
p5156
sS'required'
p5157
I00
sS'group_name'
p5158
Nsa(dp5159
S'description'
p5160
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5161
sS'cpp_type'
p5162
S'bool'
p5163
sS'default'
p5164
S'0'
p5165
sS'name'
p5166
S'use_displaced_mesh'
p5167
sS'required'
p5168
I00
sS'group_name'
p5169
S'Advanced'
p5170
sa(dp5171
S'description'
p5172
S'The name of the variable that this object applies to\n'
p5173
sS'cpp_type'
p5174
S'AuxVariableName'
p5175
sS'default'
p5176
g3
sS'name'
p5177
S'variable'
p5178
sS'required'
p5179
I01
sS'group_name'
p5180
Nsa(dp5181
S'description'
p5182
S'The variable to be integrated\n'
p5183
sS'cpp_type'
p5184
S'std::vector<VariableName>'
p5185
sS'default'
p5186
g3
sS'name'
p5187
S'variable_to_integrate'
p5188
sS'required'
p5189
I01
sS'group_name'
p5190
NsasS'name'
p5191
S'/AuxKernels/VariableTimeIntegrationAux'
p5192
sa(dp5193
S'description'
p5194
g3
sS'subblocks'
p5195
NsS'parameters'
p5196
(lp5197
(dp5198
S'description'
p5199
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5200
sS'cpp_type'
p5201
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p5202
sS'default'
p5203
g3
sS'name'
p5204
S'block'
p5205
sS'required'
p5206
I00
sS'group_name'
p5207
Nsa(dp5208
S'description'
p5209
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5210
sS'cpp_type'
p5211
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p5212
sS'default'
p5213
g3
sS'name'
p5214
S'boundary'
p5215
sS'required'
p5216
I00
sS'group_name'
p5217
Nsa(dp5218
S'description'
p5219
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5220
sS'cpp_type'
p5221
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5222
sS'default'
p5223
g3
sS'name'
p5224
S'control_tags'
p5225
sS'required'
p5226
I00
sS'group_name'
p5227
S'Advanced'
p5228
sa(dp5229
S'description'
p5230
S'Set the enabled status of the MooseObject.\n'
p5231
sS'cpp_type'
p5232
S'bool'
p5233
sS'default'
p5234
S'1'
p5235
sS'name'
p5236
S'enable'
p5237
sS'required'
p5238
I00
sS'group_name'
p5239
S'Advanced'
p5240
sa(dp5241
S'name'
p5242
S'execute_on'
p5243
sS'cpp_type'
p5244
S'MultiMooseEnum'
p5245
sS'default'
p5246
S'LINEAR'
p5247
sS'description'
p5248
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5249
sS'required'
p5250
I00
sS'options'
p5251
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5252
sS'group_name'
p5253
Nsa(dp5254
S'description'
p5255
S'The seed for the master random number generator\n'
p5256
sS'cpp_type'
p5257
S'unsigned int'
p5258
sS'default'
p5259
S'0'
p5260
sS'name'
p5261
S'seed'
p5262
sS'required'
p5263
I00
sS'group_name'
p5264
S'Advanced'
p5265
sa(dp5266
S'description'
p5267
g3
sS'cpp_type'
p5268
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5269
sS'default'
p5270
S'VectorMagnitudeAux'
p5271
sS'name'
p5272
S'type'
p5273
sS'required'
p5274
I00
sS'group_name'
p5275
Nsa(dp5276
S'description'
p5277
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5278
sS'cpp_type'
p5279
S'bool'
p5280
sS'default'
p5281
S'0'
p5282
sS'name'
p5283
S'use_displaced_mesh'
p5284
sS'required'
p5285
I00
sS'group_name'
p5286
S'Advanced'
p5287
sa(dp5288
S'description'
p5289
S'The name of the variable that this object applies to\n'
p5290
sS'cpp_type'
p5291
S'AuxVariableName'
p5292
sS'default'
p5293
g3
sS'name'
p5294
S'variable'
p5295
sS'required'
p5296
I01
sS'group_name'
p5297
Nsa(dp5298
S'description'
p5299
S'x-component of the vector\n'
p5300
sS'cpp_type'
p5301
S'std::vector<VariableName>'
p5302
sS'default'
p5303
g3
sS'name'
p5304
S'x'
p5305
sS'required'
p5306
I01
sS'group_name'
p5307
Nsa(dp5308
S'description'
p5309
S'y-component of the vector\n'
p5310
sS'cpp_type'
p5311
S'std::vector<VariableName>'
p5312
sS'default'
p5313
g3
sS'name'
p5314
S'y'
p5315
sS'required'
p5316
I00
sS'group_name'
p5317
Nsa(dp5318
S'description'
p5319
S'z-component of the vector\n'
p5320
sS'cpp_type'
p5321
S'std::vector<VariableName>'
p5322
sS'default'
p5323
g3
sS'name'
p5324
S'z'
p5325
sS'required'
p5326
I00
sS'group_name'
p5327
NsasS'name'
p5328
S'/AuxKernels/VectorMagnitudeAux'
p5329
sasS'parameters'
p5330
NsS'name'
p5331
S'/AuxKernels'
p5332
sa(dp5333
S'description'
p5334
g3
sS'subblocks'
p5335
(lp5336
(dp5337
S'description'
p5338
g3
sS'subblocks'
p5339
NsS'parameters'
p5340
(lp5341
(dp5342
S'description'
p5343
S'A string representing the Moose Object that will be built by this Action\n'
p5344
sS'cpp_type'
p5345
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5346
sS'default'
p5347
g3
sS'name'
p5348
S'type'
p5349
sS'required'
p5350
I01
sS'group_name'
p5351
NsasS'name'
p5352
S'/AuxScalarKernels/*'
p5353
sa(dp5354
S'description'
p5355
g3
sS'subblocks'
p5356
NsS'parameters'
p5357
(lp5358
(dp5359
S'description'
p5360
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5361
sS'cpp_type'
p5362
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5363
sS'default'
p5364
g3
sS'name'
p5365
S'control_tags'
p5366
sS'required'
p5367
I00
sS'group_name'
p5368
S'Advanced'
p5369
sa(dp5370
S'description'
p5371
S'Set the enabled status of the MooseObject.\n'
p5372
sS'cpp_type'
p5373
S'bool'
p5374
sS'default'
p5375
S'1'
p5376
sS'name'
p5377
S'enable'
p5378
sS'required'
p5379
I00
sS'group_name'
p5380
S'Advanced'
p5381
sa(dp5382
S'name'
p5383
S'execute_on'
p5384
sS'cpp_type'
p5385
S'MultiMooseEnum'
p5386
sS'default'
p5387
S'LINEAR'
p5388
sS'description'
p5389
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5390
sS'required'
p5391
I00
sS'options'
p5392
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5393
sS'group_name'
p5394
Nsa(dp5395
S'description'
p5396
g3
sS'cpp_type'
p5397
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5398
sS'default'
p5399
S'ConstantScalarAux'
p5400
sS'name'
p5401
S'type'
p5402
sS'required'
p5403
I00
sS'group_name'
p5404
Nsa(dp5405
S'description'
p5406
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5407
sS'cpp_type'
p5408
S'bool'
p5409
sS'default'
p5410
S'0'
p5411
sS'name'
p5412
S'use_displaced_mesh'
p5413
sS'required'
p5414
I00
sS'group_name'
p5415
S'Advanced'
p5416
sa(dp5417
S'description'
p5418
S'The value to be set to the scalar variable.\n'
p5419
sS'cpp_type'
p5420
S'double'
p5421
sS'default'
p5422
g3
sS'name'
p5423
S'value'
p5424
sS'required'
p5425
I01
sS'group_name'
p5426
Nsa(dp5427
S'description'
p5428
S'The name of the variable that this kernel operates on\n'
p5429
sS'cpp_type'
p5430
S'AuxVariableName'
p5431
sS'default'
p5432
g3
sS'name'
p5433
S'variable'
p5434
sS'required'
p5435
I01
sS'group_name'
p5436
NsasS'name'
p5437
S'/AuxScalarKernels/ConstantScalarAux'
p5438
sa(dp5439
S'description'
p5440
g3
sS'subblocks'
p5441
NsS'parameters'
p5442
(lp5443
(dp5444
S'description'
p5445
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5446
sS'cpp_type'
p5447
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5448
sS'default'
p5449
g3
sS'name'
p5450
S'control_tags'
p5451
sS'required'
p5452
I00
sS'group_name'
p5453
S'Advanced'
p5454
sa(dp5455
S'description'
p5456
S'Set the enabled status of the MooseObject.\n'
p5457
sS'cpp_type'
p5458
S'bool'
p5459
sS'default'
p5460
S'1'
p5461
sS'name'
p5462
S'enable'
p5463
sS'required'
p5464
I00
sS'group_name'
p5465
S'Advanced'
p5466
sa(dp5467
S'name'
p5468
S'execute_on'
p5469
sS'cpp_type'
p5470
S'MultiMooseEnum'
p5471
sS'default'
p5472
S'LINEAR'
p5473
sS'description'
p5474
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5475
sS'required'
p5476
I00
sS'options'
p5477
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5478
sS'group_name'
p5479
Nsa(dp5480
S'description'
p5481
S'The functions to set the scalar variable components.\n'
p5482
sS'cpp_type'
p5483
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p5484
sS'default'
p5485
g3
sS'name'
p5486
S'function'
p5487
sS'required'
p5488
I01
sS'group_name'
p5489
Nsa(dp5490
S'description'
p5491
g3
sS'cpp_type'
p5492
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5493
sS'default'
p5494
S'FunctionScalarAux'
p5495
sS'name'
p5496
S'type'
p5497
sS'required'
p5498
I00
sS'group_name'
p5499
Nsa(dp5500
S'description'
p5501
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5502
sS'cpp_type'
p5503
S'bool'
p5504
sS'default'
p5505
S'0'
p5506
sS'name'
p5507
S'use_displaced_mesh'
p5508
sS'required'
p5509
I00
sS'group_name'
p5510
S'Advanced'
p5511
sa(dp5512
S'description'
p5513
S'The name of the variable that this kernel operates on\n'
p5514
sS'cpp_type'
p5515
S'AuxVariableName'
p5516
sS'default'
p5517
g3
sS'name'
p5518
S'variable'
p5519
sS'required'
p5520
I01
sS'group_name'
p5521
NsasS'name'
p5522
S'/AuxScalarKernels/FunctionScalarAux'
p5523
sa(dp5524
S'description'
p5525
g3
sS'subblocks'
p5526
NsS'parameters'
p5527
(lp5528
(dp5529
S'description'
p5530
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5531
sS'cpp_type'
p5532
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5533
sS'default'
p5534
g3
sS'name'
p5535
S'control_tags'
p5536
sS'required'
p5537
I00
sS'group_name'
p5538
S'Advanced'
p5539
sa(dp5540
S'description'
p5541
S'The downstairs of the quotient variable\n'
p5542
sS'cpp_type'
p5543
S'std::vector<VariableName>'
p5544
sS'default'
p5545
g3
sS'name'
p5546
S'denominator'
p5547
sS'required'
p5548
I00
sS'group_name'
p5549
Nsa(dp5550
S'description'
p5551
S'Set the enabled status of the MooseObject.\n'
p5552
sS'cpp_type'
p5553
S'bool'
p5554
sS'default'
p5555
S'1'
p5556
sS'name'
p5557
S'enable'
p5558
sS'required'
p5559
I00
sS'group_name'
p5560
S'Advanced'
p5561
sa(dp5562
S'name'
p5563
S'execute_on'
p5564
sS'cpp_type'
p5565
S'MultiMooseEnum'
p5566
sS'default'
p5567
S'LINEAR'
p5568
sS'description'
p5569
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5570
sS'required'
p5571
I00
sS'options'
p5572
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5573
sS'group_name'
p5574
Nsa(dp5575
S'description'
p5576
S'The upstairs of the quotient variable\n'
p5577
sS'cpp_type'
p5578
S'std::vector<VariableName>'
p5579
sS'default'
p5580
g3
sS'name'
p5581
S'numerator'
p5582
sS'required'
p5583
I00
sS'group_name'
p5584
Nsa(dp5585
S'description'
p5586
g3
sS'cpp_type'
p5587
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5588
sS'default'
p5589
S'QuotientScalarAux'
p5590
sS'name'
p5591
S'type'
p5592
sS'required'
p5593
I00
sS'group_name'
p5594
Nsa(dp5595
S'description'
p5596
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5597
sS'cpp_type'
p5598
S'bool'
p5599
sS'default'
p5600
S'0'
p5601
sS'name'
p5602
S'use_displaced_mesh'
p5603
sS'required'
p5604
I00
sS'group_name'
p5605
S'Advanced'
p5606
sa(dp5607
S'description'
p5608
S'The name of the variable that this kernel operates on\n'
p5609
sS'cpp_type'
p5610
S'AuxVariableName'
p5611
sS'default'
p5612
g3
sS'name'
p5613
S'variable'
p5614
sS'required'
p5615
I01
sS'group_name'
p5616
NsasS'name'
p5617
S'/AuxScalarKernels/QuotientScalarAux'
p5618
sasS'parameters'
p5619
NsS'name'
p5620
S'/AuxScalarKernels'
p5621
sa(dp5622
S'description'
p5623
g3
sS'subblocks'
p5624
(lp5625
(dp5626
S'description'
p5627
g3
sS'subblocks'
p5628
(lp5629
(dp5630
S'description'
p5631
g3
sS'subblocks'
p5632
(lp5633
(dp5634
S'description'
p5635
g3
sS'subblocks'
p5636
(lp5637
(dp5638
S'description'
p5639
g3
sS'subblocks'
p5640
NsS'parameters'
p5641
(lp5642
(dp5643
S'description'
p5644
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5645
sS'cpp_type'
p5646
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p5647
sS'default'
p5648
g3
sS'name'
p5649
S'block'
p5650
sS'required'
p5651
I00
sS'group_name'
p5652
Nsa(dp5653
S'description'
p5654
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5655
sS'cpp_type'
p5656
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p5657
sS'default'
p5658
g3
sS'name'
p5659
S'boundary'
p5660
sS'required'
p5661
I00
sS'group_name'
p5662
Nsa(dp5663
S'description'
p5664
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5665
sS'cpp_type'
p5666
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5667
sS'default'
p5668
g3
sS'name'
p5669
S'control_tags'
p5670
sS'required'
p5671
I00
sS'group_name'
p5672
S'Advanced'
p5673
sa(dp5674
S'description'
p5675
S'Set the enabled status of the MooseObject.\n'
p5676
sS'cpp_type'
p5677
S'bool'
p5678
sS'default'
p5679
S'1'
p5680
sS'name'
p5681
S'enable'
p5682
sS'required'
p5683
I00
sS'group_name'
p5684
S'Advanced'
p5685
sa(dp5686
S'description'
p5687
S'The value of the variable inside the box\n'
p5688
sS'cpp_type'
p5689
S'double'
p5690
sS'default'
p5691
S'0'
p5692
sS'name'
p5693
S'inside'
p5694
sS'required'
p5695
I00
sS'group_name'
p5696
Nsa(dp5697
S'description'
p5698
S'The value of the variable outside the box\n'
p5699
sS'cpp_type'
p5700
S'double'
p5701
sS'default'
p5702
S'0'
p5703
sS'name'
p5704
S'outside'
p5705
sS'required'
p5706
I00
sS'group_name'
p5707
Nsa(dp5708
S'description'
p5709
g3
sS'cpp_type'
p5710
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5711
sS'default'
p5712
S'BoundingBoxIC'
p5713
sS'name'
p5714
S'type'
p5715
sS'required'
p5716
I00
sS'group_name'
p5717
Nsa(dp5718
S'description'
p5719
S'The variable this initial condition is supposed to provide values for.\n'
p5720
sS'cpp_type'
p5721
S'VariableName'
p5722
sS'default'
p5723
g3
sS'name'
p5724
S'variable'
p5725
sS'required'
p5726
I01
sS'group_name'
p5727
Nsa(dp5728
S'description'
p5729
S'The x coordinate of the lower left-hand corner of the box\n'
p5730
sS'cpp_type'
p5731
S'double'
p5732
sS'default'
p5733
g3
sS'name'
p5734
S'x1'
p5735
sS'required'
p5736
I01
sS'group_name'
p5737
Nsa(dp5738
S'description'
p5739
S'The x coordinate of the upper right-hand corner of the box\n'
p5740
sS'cpp_type'
p5741
S'double'
p5742
sS'default'
p5743
g3
sS'name'
p5744
S'x2'
p5745
sS'required'
p5746
I01
sS'group_name'
p5747
Nsa(dp5748
S'description'
p5749
S'The y coordinate of the lower left-hand corner of the box\n'
p5750
sS'cpp_type'
p5751
S'double'
p5752
sS'default'
p5753
g3
sS'name'
p5754
S'y1'
p5755
sS'required'
p5756
I01
sS'group_name'
p5757
Nsa(dp5758
S'description'
p5759
S'The y coordinate of the upper right-hand corner of the box\n'
p5760
sS'cpp_type'
p5761
S'double'
p5762
sS'default'
p5763
g3
sS'name'
p5764
S'y2'
p5765
sS'required'
p5766
I01
sS'group_name'
p5767
Nsa(dp5768
S'description'
p5769
S'The z coordinate of the lower left-hand corner of the box\n'
p5770
sS'cpp_type'
p5771
S'double'
p5772
sS'default'
p5773
S'0'
p5774
sS'name'
p5775
S'z1'
p5776
sS'required'
p5777
I00
sS'group_name'
p5778
Nsa(dp5779
S'description'
p5780
S'The z coordinate of the upper right-hand corner of the box\n'
p5781
sS'cpp_type'
p5782
S'double'
p5783
sS'default'
p5784
S'0'
p5785
sS'name'
p5786
S'z2'
p5787
sS'required'
p5788
I00
sS'group_name'
p5789
NsasS'name'
p5790
S'/AuxVariables/*/InitialCondition/<type>/BoundingBoxIC'
p5791
sa(dp5792
S'description'
p5793
g3
sS'subblocks'
p5794
NsS'parameters'
p5795
(lp5796
(dp5797
S'description'
p5798
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5799
sS'cpp_type'
p5800
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p5801
sS'default'
p5802
g3
sS'name'
p5803
S'block'
p5804
sS'required'
p5805
I00
sS'group_name'
p5806
Nsa(dp5807
S'description'
p5808
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5809
sS'cpp_type'
p5810
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p5811
sS'default'
p5812
g3
sS'name'
p5813
S'boundary'
p5814
sS'required'
p5815
I00
sS'group_name'
p5816
Nsa(dp5817
S'description'
p5818
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5819
sS'cpp_type'
p5820
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5821
sS'default'
p5822
g3
sS'name'
p5823
S'control_tags'
p5824
sS'required'
p5825
I00
sS'group_name'
p5826
S'Advanced'
p5827
sa(dp5828
S'description'
p5829
S'Set the enabled status of the MooseObject.\n'
p5830
sS'cpp_type'
p5831
S'bool'
p5832
sS'default'
p5833
S'1'
p5834
sS'name'
p5835
S'enable'
p5836
sS'required'
p5837
I00
sS'group_name'
p5838
S'Advanced'
p5839
sa(dp5840
S'description'
p5841
g3
sS'cpp_type'
p5842
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5843
sS'default'
p5844
S'ConstantIC'
p5845
sS'name'
p5846
S'type'
p5847
sS'required'
p5848
I00
sS'group_name'
p5849
Nsa(dp5850
S'description'
p5851
S'The value to be set in IC\n'
p5852
sS'cpp_type'
p5853
S'double'
p5854
sS'default'
p5855
g3
sS'name'
p5856
S'value'
p5857
sS'required'
p5858
I01
sS'group_name'
p5859
Nsa(dp5860
S'description'
p5861
S'The variable this initial condition is supposed to provide values for.\n'
p5862
sS'cpp_type'
p5863
S'VariableName'
p5864
sS'default'
p5865
g3
sS'name'
p5866
S'variable'
p5867
sS'required'
p5868
I01
sS'group_name'
p5869
NsasS'name'
p5870
S'/AuxVariables/*/InitialCondition/<type>/ConstantIC'
p5871
sa(dp5872
S'description'
p5873
g3
sS'subblocks'
p5874
NsS'parameters'
p5875
(lp5876
(dp5877
S'description'
p5878
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5879
sS'cpp_type'
p5880
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p5881
sS'default'
p5882
g3
sS'name'
p5883
S'block'
p5884
sS'required'
p5885
I00
sS'group_name'
p5886
Nsa(dp5887
S'description'
p5888
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5889
sS'cpp_type'
p5890
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p5891
sS'default'
p5892
g3
sS'name'
p5893
S'boundary'
p5894
sS'required'
p5895
I00
sS'group_name'
p5896
Nsa(dp5897
S'description'
p5898
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5899
sS'cpp_type'
p5900
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5901
sS'default'
p5902
g3
sS'name'
p5903
S'control_tags'
p5904
sS'required'
p5905
I00
sS'group_name'
p5906
S'Advanced'
p5907
sa(dp5908
S'description'
p5909
S'Set the enabled status of the MooseObject.\n'
p5910
sS'cpp_type'
p5911
S'bool'
p5912
sS'default'
p5913
S'1'
p5914
sS'name'
p5915
S'enable'
p5916
sS'required'
p5917
I00
sS'group_name'
p5918
S'Advanced'
p5919
sa(dp5920
S'description'
p5921
S'The initial condition function.\n'
p5922
sS'cpp_type'
p5923
S'FunctionName'
p5924
sS'default'
p5925
g3
sS'name'
p5926
S'function'
p5927
sS'required'
p5928
I01
sS'group_name'
p5929
Nsa(dp5930
S'description'
p5931
g3
sS'cpp_type'
p5932
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5933
sS'default'
p5934
S'FunctionIC'
p5935
sS'name'
p5936
S'type'
p5937
sS'required'
p5938
I00
sS'group_name'
p5939
Nsa(dp5940
S'description'
p5941
S'The variable this initial condition is supposed to provide values for.\n'
p5942
sS'cpp_type'
p5943
S'VariableName'
p5944
sS'default'
p5945
g3
sS'name'
p5946
S'variable'
p5947
sS'required'
p5948
I01
sS'group_name'
p5949
NsasS'name'
p5950
S'/AuxVariables/*/InitialCondition/<type>/FunctionIC'
p5951
sa(dp5952
S'description'
p5953
g3
sS'subblocks'
p5954
NsS'parameters'
p5955
(lp5956
(dp5957
S'description'
p5958
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5959
sS'cpp_type'
p5960
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5961
sS'default'
p5962
g3
sS'name'
p5963
S'control_tags'
p5964
sS'required'
p5965
I00
sS'group_name'
p5966
S'Advanced'
p5967
sa(dp5968
S'description'
p5969
S'Set the enabled status of the MooseObject.\n'
p5970
sS'cpp_type'
p5971
S'bool'
p5972
sS'default'
p5973
S'1'
p5974
sS'name'
p5975
S'enable'
p5976
sS'required'
p5977
I00
sS'group_name'
p5978
S'Advanced'
p5979
sa(dp5980
S'description'
p5981
S'The initial condition function.\n'
p5982
sS'cpp_type'
p5983
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p5984
sS'default'
p5985
g3
sS'name'
p5986
S'function'
p5987
sS'required'
p5988
I01
sS'group_name'
p5989
Nsa(dp5990
S'description'
p5991
g3
sS'cpp_type'
p5992
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5993
sS'default'
p5994
S'FunctionScalarIC'
p5995
sS'name'
p5996
S'type'
p5997
sS'required'
p5998
I00
sS'group_name'
p5999
Nsa(dp6000
S'description'
p6001
S'The variable this initial condition is supposed to provide values for.\n'
p6002
sS'cpp_type'
p6003
S'VariableName'
p6004
sS'default'
p6005
g3
sS'name'
p6006
S'variable'
p6007
sS'required'
p6008
I00
sS'group_name'
p6009
NsasS'name'
p6010
S'/AuxVariables/*/InitialCondition/<type>/FunctionScalarIC'
p6011
sa(dp6012
S'description'
p6013
g3
sS'subblocks'
p6014
NsS'parameters'
p6015
(lp6016
(dp6017
S'description'
p6018
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6019
sS'cpp_type'
p6020
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p6021
sS'default'
p6022
g3
sS'name'
p6023
S'block'
p6024
sS'required'
p6025
I00
sS'group_name'
p6026
Nsa(dp6027
S'description'
p6028
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6029
sS'cpp_type'
p6030
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6031
sS'default'
p6032
g3
sS'name'
p6033
S'boundary'
p6034
sS'required'
p6035
I00
sS'group_name'
p6036
Nsa(dp6037
S'description'
p6038
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6039
sS'cpp_type'
p6040
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6041
sS'default'
p6042
g3
sS'name'
p6043
S'control_tags'
p6044
sS'required'
p6045
I00
sS'group_name'
p6046
S'Advanced'
p6047
sa(dp6048
S'description'
p6049
S'Set the enabled status of the MooseObject.\n'
p6050
sS'cpp_type'
p6051
S'bool'
p6052
sS'default'
p6053
S'1'
p6054
sS'name'
p6055
S'enable'
p6056
sS'required'
p6057
I00
sS'group_name'
p6058
S'Advanced'
p6059
sa(dp6060
S'description'
p6061
S'Upper bound of the randomly generated values\n'
p6062
sS'cpp_type'
p6063
S'double'
p6064
sS'default'
p6065
S'1'
p6066
sS'name'
p6067
S'max'
p6068
sS'required'
p6069
I00
sS'group_name'
p6070
Nsa(dp6071
S'description'
p6072
S'Lower bound of the randomly generated values\n'
p6073
sS'cpp_type'
p6074
S'double'
p6075
sS'default'
p6076
S'0'
p6077
sS'name'
p6078
S'min'
p6079
sS'required'
p6080
I00
sS'group_name'
p6081
Nsa(dp6082
S'description'
p6083
S'Seed value for the random number generator\n'
p6084
sS'cpp_type'
p6085
S'unsigned int'
p6086
sS'default'
p6087
S'0'
p6088
sS'name'
p6089
S'seed'
p6090
sS'required'
p6091
I00
sS'group_name'
p6092
Nsa(dp6093
S'description'
p6094
g3
sS'cpp_type'
p6095
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6096
sS'default'
p6097
S'RandomIC'
p6098
sS'name'
p6099
S'type'
p6100
sS'required'
p6101
I00
sS'group_name'
p6102
Nsa(dp6103
S'description'
p6104
S'The variable this initial condition is supposed to provide values for.\n'
p6105
sS'cpp_type'
p6106
S'VariableName'
p6107
sS'default'
p6108
g3
sS'name'
p6109
S'variable'
p6110
sS'required'
p6111
I01
sS'group_name'
p6112
NsasS'name'
p6113
S'/AuxVariables/*/InitialCondition/<type>/RandomIC'
p6114
sa(dp6115
S'description'
p6116
g3
sS'subblocks'
p6117
NsS'parameters'
p6118
(lp6119
(dp6120
S'description'
p6121
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6122
sS'cpp_type'
p6123
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6124
sS'default'
p6125
g3
sS'name'
p6126
S'control_tags'
p6127
sS'required'
p6128
I00
sS'group_name'
p6129
S'Advanced'
p6130
sa(dp6131
S'description'
p6132
S'Set the enabled status of the MooseObject.\n'
p6133
sS'cpp_type'
p6134
S'bool'
p6135
sS'default'
p6136
S'1'
p6137
sS'name'
p6138
S'enable'
p6139
sS'required'
p6140
I00
sS'group_name'
p6141
S'Advanced'
p6142
sa(dp6143
S'description'
p6144
g3
sS'cpp_type'
p6145
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6146
sS'default'
p6147
S'ScalarComponentIC'
p6148
sS'name'
p6149
S'type'
p6150
sS'required'
p6151
I00
sS'group_name'
p6152
Nsa(dp6153
S'description'
p6154
S'Initial values to initialize the scalar variable.\n'
p6155
sS'cpp_type'
p6156
S'std::__1::vector<double, std::__1::allocator<double> >'
p6157
sS'default'
p6158
g3
sS'name'
p6159
S'values'
p6160
sS'required'
p6161
I01
sS'group_name'
p6162
Nsa(dp6163
S'description'
p6164
S'The variable this initial condition is supposed to provide values for.\n'
p6165
sS'cpp_type'
p6166
S'VariableName'
p6167
sS'default'
p6168
g3
sS'name'
p6169
S'variable'
p6170
sS'required'
p6171
I00
sS'group_name'
p6172
NsasS'name'
p6173
S'/AuxVariables/*/InitialCondition/<type>/ScalarComponentIC'
p6174
sa(dp6175
S'description'
p6176
g3
sS'subblocks'
p6177
NsS'parameters'
p6178
(lp6179
(dp6180
S'description'
p6181
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6182
sS'cpp_type'
p6183
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6184
sS'default'
p6185
g3
sS'name'
p6186
S'control_tags'
p6187
sS'required'
p6188
I00
sS'group_name'
p6189
S'Advanced'
p6190
sa(dp6191
S'description'
p6192
S'Set the enabled status of the MooseObject.\n'
p6193
sS'cpp_type'
p6194
S'bool'
p6195
sS'default'
p6196
S'1'
p6197
sS'name'
p6198
S'enable'
p6199
sS'required'
p6200
I00
sS'group_name'
p6201
S'Advanced'
p6202
sa(dp6203
S'description'
p6204
g3
sS'cpp_type'
p6205
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6206
sS'default'
p6207
S'ScalarConstantIC'
p6208
sS'name'
p6209
S'type'
p6210
sS'required'
p6211
I00
sS'group_name'
p6212
Nsa(dp6213
S'description'
p6214
g3
sS'cpp_type'
p6215
S'double'
p6216
sS'default'
p6217
S'0'
p6218
sS'name'
p6219
S'value'
p6220
sS'required'
p6221
I00
sS'group_name'
p6222
Nsa(dp6223
S'description'
p6224
S'The variable this initial condition is supposed to provide values for.\n'
p6225
sS'cpp_type'
p6226
S'VariableName'
p6227
sS'default'
p6228
g3
sS'name'
p6229
S'variable'
p6230
sS'required'
p6231
I00
sS'group_name'
p6232
NsasS'name'
p6233
S'/AuxVariables/*/InitialCondition/<type>/ScalarConstantIC'
p6234
sasS'parameters'
p6235
NsS'name'
p6236
S'/AuxVariables/*/InitialCondition/<type>'
p6237
sasS'parameters'
p6238
(lp6239
(dp6240
S'description'
p6241
S'A string representing the Moose Object that will be built by this Action\n'
p6242
sS'cpp_type'
p6243
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6244
sS'default'
p6245
g3
sS'name'
p6246
S'type'
p6247
sS'required'
p6248
I01
sS'group_name'
p6249
NsasS'name'
p6250
S'/AuxVariables/*/InitialCondition'
p6251
sasS'parameters'
p6252
(lp6253
(dp6254
S'description'
p6255
S'The block id where this variable lives\n'
p6256
sS'cpp_type'
p6257
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p6258
sS'default'
p6259
g3
sS'name'
p6260
S'block'
p6261
sS'required'
p6262
I00
sS'group_name'
p6263
Nsa(dp6264
S'name'
p6265
S'family'
p6266
sS'cpp_type'
p6267
S'MooseEnum'
p6268
sS'default'
p6269
S'LAGRANGE'
p6270
sS'description'
p6271
S'Specifies the family of FE shape functions to use for this variable\n'
p6272
sS'required'
p6273
I00
sS'options'
p6274
S'LAGRANGE MONOMIAL SCALAR'
p6275
sS'group_name'
p6276
Nsa(dp6277
S'description'
p6278
S'Specifies the initial condition for this variable\n'
p6279
sS'cpp_type'
p6280
S'double'
p6281
sS'default'
p6282
g3
sS'name'
p6283
S'initial_condition'
p6284
sS'required'
p6285
I00
sS'group_name'
p6286
Nsa(dp6287
S'name'
p6288
S'order'
p6289
sS'cpp_type'
p6290
S'MooseEnum'
p6291
sS'default'
p6292
S'FIRST'
p6293
sS'description'
p6294
S'Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n'
p6295
sS'required'
p6296
I00
sS'options'
p6297
S'CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH'
p6298
sS'group_name'
p6299
Nsa(dp6300
S'description'
p6301
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p6302
sS'cpp_type'
p6303
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p6304
sS'default'
p6305
g3
sS'name'
p6306
S'outputs'
p6307
sS'required'
p6308
I00
sS'group_name'
p6309
S'Advanced'
p6310
sa(dp6311
S'description'
p6312
S'Gives the timestep (or "LATEST") for which to read a solution from a file for a given variable. (Default: LATEST)\n'
p6313
sS'cpp_type'
p6314
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6315
sS'default'
p6316
S'LATEST'
p6317
sS'name'
p6318
S'initial_from_file_timestep'
p6319
sS'required'
p6320
I00
sS'group_name'
p6321
S'Initial From File'
p6322
sa(dp6323
S'description'
p6324
S'Gives the name of a variable for which to read an initial condition from a mesh file\n'
p6325
sS'cpp_type'
p6326
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6327
sS'default'
p6328
g3
sS'name'
p6329
S'initial_from_file_var'
p6330
sS'required'
p6331
I00
sS'group_name'
p6332
S'Initial From File'
p6333
sasS'name'
p6334
S'/AuxVariables/*'
p6335
sasS'parameters'
p6336
NsS'name'
p6337
S'/AuxVariables'
p6338
sa(dp6339
S'description'
p6340
g3
sS'subblocks'
p6341
(lp6342
(dp6343
S'description'
p6344
g3
sS'subblocks'
p6345
NsS'parameters'
p6346
(lp6347
(dp6348
S'description'
p6349
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6350
sS'cpp_type'
p6351
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6352
sS'default'
p6353
g3
sS'name'
p6354
S'boundary'
p6355
sS'required'
p6356
I01
sS'group_name'
p6357
Nsa(dp6358
S'description'
p6359
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6360
sS'cpp_type'
p6361
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6362
sS'default'
p6363
g3
sS'name'
p6364
S'control_tags'
p6365
sS'required'
p6366
I00
sS'group_name'
p6367
S'Advanced'
p6368
sa(dp6369
S'description'
p6370
S'Set the enabled status of the MooseObject.\n'
p6371
sS'cpp_type'
p6372
S'bool'
p6373
sS'default'
p6374
S'1'
p6375
sS'name'
p6376
S'enable'
p6377
sS'required'
p6378
I00
sS'group_name'
p6379
S'Advanced'
p6380
sa(dp6381
S'description'
p6382
S'Determines whether this object is calculated using an implicit or explicit form\n'
p6383
sS'cpp_type'
p6384
S'bool'
p6385
sS'default'
p6386
S'1'
p6387
sS'name'
p6388
S'implicit'
p6389
sS'required'
p6390
I00
sS'group_name'
p6391
S'Advanced'
p6392
sa(dp6393
S'description'
p6394
S'A string representing the Moose Object that will be built by this Action\n'
p6395
sS'cpp_type'
p6396
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6397
sS'default'
p6398
g3
sS'name'
p6399
S'type'
p6400
sS'required'
p6401
I01
sS'group_name'
p6402
Nsa(dp6403
S'description'
p6404
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6405
sS'cpp_type'
p6406
S'bool'
p6407
sS'default'
p6408
S'0'
p6409
sS'name'
p6410
S'use_displaced_mesh'
p6411
sS'required'
p6412
I00
sS'group_name'
p6413
S'Advanced'
p6414
sa(dp6415
S'description'
p6416
S'The name of the variable that this boundary condition applies to\n'
p6417
sS'cpp_type'
p6418
S'NonlinearVariableName'
p6419
sS'default'
p6420
g3
sS'name'
p6421
S'variable'
p6422
sS'required'
p6423
I01
sS'group_name'
p6424
NsasS'name'
p6425
S'/BCs/*'
p6426
sa(dp6427
S'description'
p6428
g3
sS'subblocks'
p6429
NsS'parameters'
p6430
(lp6431
(dp6432
S'description'
p6433
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6434
sS'cpp_type'
p6435
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6436
sS'default'
p6437
g3
sS'name'
p6438
S'boundary'
p6439
sS'required'
p6440
I01
sS'group_name'
p6441
Nsa(dp6442
S'description'
p6443
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6444
sS'cpp_type'
p6445
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6446
sS'default'
p6447
g3
sS'name'
p6448
S'control_tags'
p6449
sS'required'
p6450
I00
sS'group_name'
p6451
S'Advanced'
p6452
sa(dp6453
S'description'
p6454
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6455
sS'cpp_type'
p6456
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6457
sS'default'
p6458
g3
sS'name'
p6459
S'diag_save_in'
p6460
sS'required'
p6461
I00
sS'group_name'
p6462
S'Advanced'
p6463
sa(dp6464
S'description'
p6465
g3
sS'cpp_type'
p6466
S'double'
p6467
sS'default'
p6468
S'0'
p6469
sS'name'
p6470
S'duration'
p6471
sS'required'
p6472
I00
sS'group_name'
p6473
Nsa(dp6474
S'description'
p6475
S'Set the enabled status of the MooseObject.\n'
p6476
sS'cpp_type'
p6477
S'bool'
p6478
sS'default'
p6479
S'1'
p6480
sS'name'
p6481
S'enable'
p6482
sS'required'
p6483
I00
sS'group_name'
p6484
S'Advanced'
p6485
sa(dp6486
S'description'
p6487
g3
sS'cpp_type'
p6488
S'double'
p6489
sS'default'
p6490
S'500'
p6491
sS'name'
p6492
S'final'
p6493
sS'required'
p6494
I00
sS'group_name'
p6495
Nsa(dp6496
S'description'
p6497
S'Determines whether this object is calculated using an implicit or explicit form\n'
p6498
sS'cpp_type'
p6499
S'bool'
p6500
sS'default'
p6501
S'1'
p6502
sS'name'
p6503
S'implicit'
p6504
sS'required'
p6505
I00
sS'group_name'
p6506
S'Advanced'
p6507
sa(dp6508
S'description'
p6509
g3
sS'cpp_type'
p6510
S'double'
p6511
sS'default'
p6512
S'500'
p6513
sS'name'
p6514
S'initial'
p6515
sS'required'
p6516
I00
sS'group_name'
p6517
Nsa(dp6518
S'description'
p6519
g3
sS'cpp_type'
p6520
S'double'
p6521
sS'default'
p6522
S'7500'
p6523
sS'name'
p6524
S'rate'
p6525
sS'required'
p6526
I00
sS'group_name'
p6527
Nsa(dp6528
S'description'
p6529
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6530
sS'cpp_type'
p6531
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6532
sS'default'
p6533
g3
sS'name'
p6534
S'save_in'
p6535
sS'required'
p6536
I00
sS'group_name'
p6537
S'Advanced'
p6538
sa(dp6539
S'description'
p6540
S'The seed for the master random number generator\n'
p6541
sS'cpp_type'
p6542
S'unsigned int'
p6543
sS'default'
p6544
S'0'
p6545
sS'name'
p6546
S'seed'
p6547
sS'required'
p6548
I00
sS'group_name'
p6549
S'Advanced'
p6550
sa(dp6551
S'description'
p6552
g3
sS'cpp_type'
p6553
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6554
sS'default'
p6555
S'ConvectiveFluxBC'
p6556
sS'name'
p6557
S'type'
p6558
sS'required'
p6559
I00
sS'group_name'
p6560
Nsa(dp6561
S'description'
p6562
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6563
sS'cpp_type'
p6564
S'bool'
p6565
sS'default'
p6566
S'0'
p6567
sS'name'
p6568
S'use_displaced_mesh'
p6569
sS'required'
p6570
I00
sS'group_name'
p6571
S'Advanced'
p6572
sa(dp6573
S'description'
p6574
S'The name of the variable that this boundary condition applies to\n'
p6575
sS'cpp_type'
p6576
S'NonlinearVariableName'
p6577
sS'default'
p6578
g3
sS'name'
p6579
S'variable'
p6580
sS'required'
p6581
I01
sS'group_name'
p6582
NsasS'name'
p6583
S'/BCs/ConvectiveFluxBC'
p6584
sa(dp6585
S'description'
p6586
g3
sS'subblocks'
p6587
NsS'parameters'
p6588
(lp6589
(dp6590
S'description'
p6591
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6592
sS'cpp_type'
p6593
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6594
sS'default'
p6595
g3
sS'name'
p6596
S'boundary'
p6597
sS'required'
p6598
I01
sS'group_name'
p6599
Nsa(dp6600
S'description'
p6601
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6602
sS'cpp_type'
p6603
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6604
sS'default'
p6605
g3
sS'name'
p6606
S'control_tags'
p6607
sS'required'
p6608
I00
sS'group_name'
p6609
S'Advanced'
p6610
sa(dp6611
S'description'
p6612
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6613
sS'cpp_type'
p6614
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6615
sS'default'
p6616
g3
sS'name'
p6617
S'diag_save_in'
p6618
sS'required'
p6619
I00
sS'group_name'
p6620
S'Advanced'
p6621
sa(dp6622
S'description'
p6623
S'The diffusion (or thermal conductivity or viscosity) coefficient.\n'
p6624
sS'cpp_type'
p6625
S'MaterialPropertyName'
p6626
sS'default'
p6627
S'1'
p6628
sS'name'
p6629
S'diff'
p6630
sS'required'
p6631
I00
sS'group_name'
p6632
Nsa(dp6633
S'description'
p6634
S'Set the enabled status of the MooseObject.\n'
p6635
sS'cpp_type'
p6636
S'bool'
p6637
sS'default'
p6638
S'1'
p6639
sS'name'
p6640
S'enable'
p6641
sS'required'
p6642
I00
sS'group_name'
p6643
S'Advanced'
p6644
sa(dp6645
S'description'
p6646
S'Epsilon\n'
p6647
sS'cpp_type'
p6648
S'double'
p6649
sS'default'
p6650
g3
sS'name'
p6651
S'epsilon'
p6652
sS'required'
p6653
I01
sS'group_name'
p6654
Nsa(dp6655
S'description'
p6656
S'The forcing function.\n'
p6657
sS'cpp_type'
p6658
S'FunctionName'
p6659
sS'default'
p6660
g3
sS'name'
p6661
S'function'
p6662
sS'required'
p6663
I01
sS'group_name'
p6664
Nsa(dp6665
S'description'
p6666
S'Determines whether this object is calculated using an implicit or explicit form\n'
p6667
sS'cpp_type'
p6668
S'bool'
p6669
sS'default'
p6670
S'1'
p6671
sS'name'
p6672
S'implicit'
p6673
sS'required'
p6674
I00
sS'group_name'
p6675
S'Advanced'
p6676
sa(dp6677
S'description'
p6678
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6679
sS'cpp_type'
p6680
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6681
sS'default'
p6682
g3
sS'name'
p6683
S'save_in'
p6684
sS'required'
p6685
I00
sS'group_name'
p6686
S'Advanced'
p6687
sa(dp6688
S'description'
p6689
S'The seed for the master random number generator\n'
p6690
sS'cpp_type'
p6691
S'unsigned int'
p6692
sS'default'
p6693
S'0'
p6694
sS'name'
p6695
S'seed'
p6696
sS'required'
p6697
I00
sS'group_name'
p6698
S'Advanced'
p6699
sa(dp6700
S'description'
p6701
S'Sigma\n'
p6702
sS'cpp_type'
p6703
S'double'
p6704
sS'default'
p6705
g3
sS'name'
p6706
S'sigma'
p6707
sS'required'
p6708
I01
sS'group_name'
p6709
Nsa(dp6710
S'description'
p6711
g3
sS'cpp_type'
p6712
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6713
sS'default'
p6714
S'DGFunctionDiffusionDirichletBC'
p6715
sS'name'
p6716
S'type'
p6717
sS'required'
p6718
I00
sS'group_name'
p6719
Nsa(dp6720
S'description'
p6721
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6722
sS'cpp_type'
p6723
S'bool'
p6724
sS'default'
p6725
S'0'
p6726
sS'name'
p6727
S'use_displaced_mesh'
p6728
sS'required'
p6729
I00
sS'group_name'
p6730
S'Advanced'
p6731
sa(dp6732
S'description'
p6733
S'The value the variable should have on the boundary\n'
p6734
sS'cpp_type'
p6735
S'double'
p6736
sS'default'
p6737
S'0'
p6738
sS'name'
p6739
S'value'
p6740
sS'required'
p6741
I00
sS'group_name'
p6742
Nsa(dp6743
S'description'
p6744
S'The name of the variable that this boundary condition applies to\n'
p6745
sS'cpp_type'
p6746
S'NonlinearVariableName'
p6747
sS'default'
p6748
g3
sS'name'
p6749
S'variable'
p6750
sS'required'
p6751
I01
sS'group_name'
p6752
NsasS'name'
p6753
S'/BCs/DGFunctionDiffusionDirichletBC'
p6754
sa(dp6755
S'description'
p6756
g3
sS'subblocks'
p6757
NsS'parameters'
p6758
(lp6759
(dp6760
S'description'
p6761
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6762
sS'cpp_type'
p6763
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6764
sS'default'
p6765
g3
sS'name'
p6766
S'boundary'
p6767
sS'required'
p6768
I01
sS'group_name'
p6769
Nsa(dp6770
S'description'
p6771
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6772
sS'cpp_type'
p6773
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6774
sS'default'
p6775
g3
sS'name'
p6776
S'control_tags'
p6777
sS'required'
p6778
I00
sS'group_name'
p6779
S'Advanced'
p6780
sa(dp6781
S'description'
p6782
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6783
sS'cpp_type'
p6784
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6785
sS'default'
p6786
g3
sS'name'
p6787
S'diag_save_in'
p6788
sS'required'
p6789
I00
sS'group_name'
p6790
S'Advanced'
p6791
sa(dp6792
S'description'
p6793
S'Set the enabled status of the MooseObject.\n'
p6794
sS'cpp_type'
p6795
S'bool'
p6796
sS'default'
p6797
S'1'
p6798
sS'name'
p6799
S'enable'
p6800
sS'required'
p6801
I00
sS'group_name'
p6802
S'Advanced'
p6803
sa(dp6804
S'description'
p6805
S'Determines whether this object is calculated using an implicit or explicit form\n'
p6806
sS'cpp_type'
p6807
S'bool'
p6808
sS'default'
p6809
S'1'
p6810
sS'name'
p6811
S'implicit'
p6812
sS'required'
p6813
I00
sS'group_name'
p6814
S'Advanced'
p6815
sa(dp6816
S'description'
p6817
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6818
sS'cpp_type'
p6819
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6820
sS'default'
p6821
g3
sS'name'
p6822
S'save_in'
p6823
sS'required'
p6824
I00
sS'group_name'
p6825
S'Advanced'
p6826
sa(dp6827
S'description'
p6828
S'The seed for the master random number generator\n'
p6829
sS'cpp_type'
p6830
S'unsigned int'
p6831
sS'default'
p6832
S'0'
p6833
sS'name'
p6834
S'seed'
p6835
sS'required'
p6836
I00
sS'group_name'
p6837
S'Advanced'
p6838
sa(dp6839
S'description'
p6840
g3
sS'cpp_type'
p6841
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6842
sS'default'
p6843
S'DiffusionFluxBC'
p6844
sS'name'
p6845
S'type'
p6846
sS'required'
p6847
I00
sS'group_name'
p6848
Nsa(dp6849
S'description'
p6850
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6851
sS'cpp_type'
p6852
S'bool'
p6853
sS'default'
p6854
S'0'
p6855
sS'name'
p6856
S'use_displaced_mesh'
p6857
sS'required'
p6858
I00
sS'group_name'
p6859
S'Advanced'
p6860
sa(dp6861
S'description'
p6862
S'The name of the variable that this boundary condition applies to\n'
p6863
sS'cpp_type'
p6864
S'NonlinearVariableName'
p6865
sS'default'
p6866
g3
sS'name'
p6867
S'variable'
p6868
sS'required'
p6869
I01
sS'group_name'
p6870
NsasS'name'
p6871
S'/BCs/DiffusionFluxBC'
p6872
sa(dp6873
S'description'
p6874
g3
sS'subblocks'
p6875
NsS'parameters'
p6876
(lp6877
(dp6878
S'description'
p6879
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6880
sS'cpp_type'
p6881
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6882
sS'default'
p6883
g3
sS'name'
p6884
S'boundary'
p6885
sS'required'
p6886
I01
sS'group_name'
p6887
Nsa(dp6888
S'description'
p6889
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6890
sS'cpp_type'
p6891
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6892
sS'default'
p6893
g3
sS'name'
p6894
S'control_tags'
p6895
sS'required'
p6896
I00
sS'group_name'
p6897
S'Advanced'
p6898
sa(dp6899
S'description'
p6900
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6901
sS'cpp_type'
p6902
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6903
sS'default'
p6904
g3
sS'name'
p6905
S'diag_save_in'
p6906
sS'required'
p6907
I00
sS'group_name'
p6908
Nsa(dp6909
S'description'
p6910
S'Set the enabled status of the MooseObject.\n'
p6911
sS'cpp_type'
p6912
S'bool'
p6913
sS'default'
p6914
S'1'
p6915
sS'name'
p6916
S'enable'
p6917
sS'required'
p6918
I00
sS'group_name'
p6919
S'Advanced'
p6920
sa(dp6921
S'description'
p6922
S'Determines whether this object is calculated using an implicit or explicit form\n'
p6923
sS'cpp_type'
p6924
S'bool'
p6925
sS'default'
p6926
S'1'
p6927
sS'name'
p6928
S'implicit'
p6929
sS'required'
p6930
I00
sS'group_name'
p6931
S'Advanced'
p6932
sa(dp6933
S'description'
p6934
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6935
sS'cpp_type'
p6936
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6937
sS'default'
p6938
g3
sS'name'
p6939
S'save_in'
p6940
sS'required'
p6941
I00
sS'group_name'
p6942
Nsa(dp6943
S'description'
p6944
S'The seed for the master random number generator\n'
p6945
sS'cpp_type'
p6946
S'unsigned int'
p6947
sS'default'
p6948
S'0'
p6949
sS'name'
p6950
S'seed'
p6951
sS'required'
p6952
I00
sS'group_name'
p6953
S'Advanced'
p6954
sa(dp6955
S'description'
p6956
g3
sS'cpp_type'
p6957
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6958
sS'default'
p6959
S'DirichletBC'
p6960
sS'name'
p6961
S'type'
p6962
sS'required'
p6963
I00
sS'group_name'
p6964
Nsa(dp6965
S'description'
p6966
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6967
sS'cpp_type'
p6968
S'bool'
p6969
sS'default'
p6970
S'0'
p6971
sS'name'
p6972
S'use_displaced_mesh'
p6973
sS'required'
p6974
I00
sS'group_name'
p6975
S'Advanced'
p6976
sa(dp6977
S'description'
p6978
S'Value of the BC\n'
p6979
sS'cpp_type'
p6980
S'double'
p6981
sS'default'
p6982
g3
sS'name'
p6983
S'value'
p6984
sS'required'
p6985
I01
sS'group_name'
p6986
Nsa(dp6987
S'description'
p6988
S'The name of the variable that this boundary condition applies to\n'
p6989
sS'cpp_type'
p6990
S'NonlinearVariableName'
p6991
sS'default'
p6992
g3
sS'name'
p6993
S'variable'
p6994
sS'required'
p6995
I01
sS'group_name'
p6996
NsasS'name'
p6997
S'/BCs/DirichletBC'
p6998
sa(dp6999
S'description'
p7000
g3
sS'subblocks'
p7001
NsS'parameters'
p7002
(lp7003
(dp7004
S'description'
p7005
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7006
sS'cpp_type'
p7007
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7008
sS'default'
p7009
g3
sS'name'
p7010
S'boundary'
p7011
sS'required'
p7012
I01
sS'group_name'
p7013
Nsa(dp7014
S'description'
p7015
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7016
sS'cpp_type'
p7017
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7018
sS'default'
p7019
g3
sS'name'
p7020
S'control_tags'
p7021
sS'required'
p7022
I00
sS'group_name'
p7023
S'Advanced'
p7024
sa(dp7025
S'description'
p7026
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7027
sS'cpp_type'
p7028
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7029
sS'default'
p7030
g3
sS'name'
p7031
S'diag_save_in'
p7032
sS'required'
p7033
I00
sS'group_name'
p7034
Nsa(dp7035
S'description'
p7036
S'Set the enabled status of the MooseObject.\n'
p7037
sS'cpp_type'
p7038
S'bool'
p7039
sS'default'
p7040
S'1'
p7041
sS'name'
p7042
S'enable'
p7043
sS'required'
p7044
I00
sS'group_name'
p7045
S'Advanced'
p7046
sa(dp7047
S'description'
p7048
S'The forcing function.\n'
p7049
sS'cpp_type'
p7050
S'FunctionName'
p7051
sS'default'
p7052
g3
sS'name'
p7053
S'function'
p7054
sS'required'
p7055
I01
sS'group_name'
p7056
Nsa(dp7057
S'description'
p7058
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7059
sS'cpp_type'
p7060
S'bool'
p7061
sS'default'
p7062
S'1'
p7063
sS'name'
p7064
S'implicit'
p7065
sS'required'
p7066
I00
sS'group_name'
p7067
S'Advanced'
p7068
sa(dp7069
S'description'
p7070
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7071
sS'cpp_type'
p7072
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7073
sS'default'
p7074
g3
sS'name'
p7075
S'save_in'
p7076
sS'required'
p7077
I00
sS'group_name'
p7078
Nsa(dp7079
S'description'
p7080
S'The seed for the master random number generator\n'
p7081
sS'cpp_type'
p7082
S'unsigned int'
p7083
sS'default'
p7084
S'0'
p7085
sS'name'
p7086
S'seed'
p7087
sS'required'
p7088
I00
sS'group_name'
p7089
S'Advanced'
p7090
sa(dp7091
S'description'
p7092
g3
sS'cpp_type'
p7093
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7094
sS'default'
p7095
S'FunctionDirichletBC'
p7096
sS'name'
p7097
S'type'
p7098
sS'required'
p7099
I00
sS'group_name'
p7100
Nsa(dp7101
S'description'
p7102
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7103
sS'cpp_type'
p7104
S'bool'
p7105
sS'default'
p7106
S'0'
p7107
sS'name'
p7108
S'use_displaced_mesh'
p7109
sS'required'
p7110
I00
sS'group_name'
p7111
S'Advanced'
p7112
sa(dp7113
S'description'
p7114
S'The name of the variable that this boundary condition applies to\n'
p7115
sS'cpp_type'
p7116
S'NonlinearVariableName'
p7117
sS'default'
p7118
g3
sS'name'
p7119
S'variable'
p7120
sS'required'
p7121
I01
sS'group_name'
p7122
NsasS'name'
p7123
S'/BCs/FunctionDirichletBC'
p7124
sa(dp7125
S'description'
p7126
g3
sS'subblocks'
p7127
NsS'parameters'
p7128
(lp7129
(dp7130
S'description'
p7131
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7132
sS'cpp_type'
p7133
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7134
sS'default'
p7135
g3
sS'name'
p7136
S'boundary'
p7137
sS'required'
p7138
I01
sS'group_name'
p7139
Nsa(dp7140
S'description'
p7141
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7142
sS'cpp_type'
p7143
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7144
sS'default'
p7145
g3
sS'name'
p7146
S'control_tags'
p7147
sS'required'
p7148
I00
sS'group_name'
p7149
S'Advanced'
p7150
sa(dp7151
S'description'
p7152
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7153
sS'cpp_type'
p7154
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7155
sS'default'
p7156
g3
sS'name'
p7157
S'diag_save_in'
p7158
sS'required'
p7159
I00
sS'group_name'
p7160
S'Advanced'
p7161
sa(dp7162
S'description'
p7163
S'Set the enabled status of the MooseObject.\n'
p7164
sS'cpp_type'
p7165
S'bool'
p7166
sS'default'
p7167
S'1'
p7168
sS'name'
p7169
S'enable'
p7170
sS'required'
p7171
I00
sS'group_name'
p7172
S'Advanced'
p7173
sa(dp7174
S'description'
p7175
S'The function.\n'
p7176
sS'cpp_type'
p7177
S'FunctionName'
p7178
sS'default'
p7179
g3
sS'name'
p7180
S'function'
p7181
sS'required'
p7182
I01
sS'group_name'
p7183
Nsa(dp7184
S'description'
p7185
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7186
sS'cpp_type'
p7187
S'bool'
p7188
sS'default'
p7189
S'1'
p7190
sS'name'
p7191
S'implicit'
p7192
sS'required'
p7193
I00
sS'group_name'
p7194
S'Advanced'
p7195
sa(dp7196
S'description'
p7197
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7198
sS'cpp_type'
p7199
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7200
sS'default'
p7201
g3
sS'name'
p7202
S'save_in'
p7203
sS'required'
p7204
I00
sS'group_name'
p7205
S'Advanced'
p7206
sa(dp7207
S'description'
p7208
S'The seed for the master random number generator\n'
p7209
sS'cpp_type'
p7210
S'unsigned int'
p7211
sS'default'
p7212
S'0'
p7213
sS'name'
p7214
S'seed'
p7215
sS'required'
p7216
I00
sS'group_name'
p7217
S'Advanced'
p7218
sa(dp7219
S'description'
p7220
g3
sS'cpp_type'
p7221
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7222
sS'default'
p7223
S'FunctionNeumannBC'
p7224
sS'name'
p7225
S'type'
p7226
sS'required'
p7227
I00
sS'group_name'
p7228
Nsa(dp7229
S'description'
p7230
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7231
sS'cpp_type'
p7232
S'bool'
p7233
sS'default'
p7234
S'0'
p7235
sS'name'
p7236
S'use_displaced_mesh'
p7237
sS'required'
p7238
I00
sS'group_name'
p7239
S'Advanced'
p7240
sa(dp7241
S'description'
p7242
S'The name of the variable that this boundary condition applies to\n'
p7243
sS'cpp_type'
p7244
S'NonlinearVariableName'
p7245
sS'default'
p7246
g3
sS'name'
p7247
S'variable'
p7248
sS'required'
p7249
I01
sS'group_name'
p7250
NsasS'name'
p7251
S'/BCs/FunctionNeumannBC'
p7252
sa(dp7253
S'description'
p7254
g3
sS'subblocks'
p7255
NsS'parameters'
p7256
(lp7257
(dp7258
S'description'
p7259
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7260
sS'cpp_type'
p7261
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7262
sS'default'
p7263
g3
sS'name'
p7264
S'boundary'
p7265
sS'required'
p7266
I01
sS'group_name'
p7267
Nsa(dp7268
S'description'
p7269
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7270
sS'cpp_type'
p7271
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7272
sS'default'
p7273
g3
sS'name'
p7274
S'control_tags'
p7275
sS'required'
p7276
I00
sS'group_name'
p7277
S'Advanced'
p7278
sa(dp7279
S'description'
p7280
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7281
sS'cpp_type'
p7282
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7283
sS'default'
p7284
g3
sS'name'
p7285
S'diag_save_in'
p7286
sS'required'
p7287
I00
sS'group_name'
p7288
S'Advanced'
p7289
sa(dp7290
S'description'
p7291
S'Set the enabled status of the MooseObject.\n'
p7292
sS'cpp_type'
p7293
S'bool'
p7294
sS'default'
p7295
S'1'
p7296
sS'name'
p7297
S'enable'
p7298
sS'required'
p7299
I00
sS'group_name'
p7300
S'Advanced'
p7301
sa(dp7302
S'description'
p7303
S'Forcing function\n'
p7304
sS'cpp_type'
p7305
S'FunctionName'
p7306
sS'default'
p7307
g3
sS'name'
p7308
S'function'
p7309
sS'required'
p7310
I01
sS'group_name'
p7311
Nsa(dp7312
S'description'
p7313
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7314
sS'cpp_type'
p7315
S'bool'
p7316
sS'default'
p7317
S'1'
p7318
sS'name'
p7319
S'implicit'
p7320
sS'required'
p7321
I00
sS'group_name'
p7322
S'Advanced'
p7323
sa(dp7324
S'description'
p7325
S'Penalty scalar\n'
p7326
sS'cpp_type'
p7327
S'double'
p7328
sS'default'
p7329
g3
sS'name'
p7330
S'penalty'
p7331
sS'required'
p7332
I01
sS'group_name'
p7333
Nsa(dp7334
S'description'
p7335
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7336
sS'cpp_type'
p7337
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7338
sS'default'
p7339
g3
sS'name'
p7340
S'save_in'
p7341
sS'required'
p7342
I00
sS'group_name'
p7343
S'Advanced'
p7344
sa(dp7345
S'description'
p7346
S'The seed for the master random number generator\n'
p7347
sS'cpp_type'
p7348
S'unsigned int'
p7349
sS'default'
p7350
S'0'
p7351
sS'name'
p7352
S'seed'
p7353
sS'required'
p7354
I00
sS'group_name'
p7355
S'Advanced'
p7356
sa(dp7357
S'description'
p7358
g3
sS'cpp_type'
p7359
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7360
sS'default'
p7361
S'FunctionPenaltyDirichletBC'
p7362
sS'name'
p7363
S'type'
p7364
sS'required'
p7365
I00
sS'group_name'
p7366
Nsa(dp7367
S'description'
p7368
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7369
sS'cpp_type'
p7370
S'bool'
p7371
sS'default'
p7372
S'0'
p7373
sS'name'
p7374
S'use_displaced_mesh'
p7375
sS'required'
p7376
I00
sS'group_name'
p7377
S'Advanced'
p7378
sa(dp7379
S'description'
p7380
S'The name of the variable that this boundary condition applies to\n'
p7381
sS'cpp_type'
p7382
S'NonlinearVariableName'
p7383
sS'default'
p7384
g3
sS'name'
p7385
S'variable'
p7386
sS'required'
p7387
I01
sS'group_name'
p7388
NsasS'name'
p7389
S'/BCs/FunctionPenaltyDirichletBC'
p7390
sa(dp7391
S'description'
p7392
g3
sS'subblocks'
p7393
NsS'parameters'
p7394
(lp7395
(dp7396
S'description'
p7397
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7398
sS'cpp_type'
p7399
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7400
sS'default'
p7401
g3
sS'name'
p7402
S'boundary'
p7403
sS'required'
p7404
I01
sS'group_name'
p7405
Nsa(dp7406
S'description'
p7407
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7408
sS'cpp_type'
p7409
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7410
sS'default'
p7411
g3
sS'name'
p7412
S'control_tags'
p7413
sS'required'
p7414
I00
sS'group_name'
p7415
S'Advanced'
p7416
sa(dp7417
S'description'
p7418
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7419
sS'cpp_type'
p7420
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7421
sS'default'
p7422
g3
sS'name'
p7423
S'diag_save_in'
p7424
sS'required'
p7425
I00
sS'group_name'
p7426
Nsa(dp7427
S'description'
p7428
S'Set the enabled status of the MooseObject.\n'
p7429
sS'cpp_type'
p7430
S'bool'
p7431
sS'default'
p7432
S'1'
p7433
sS'name'
p7434
S'enable'
p7435
sS'required'
p7436
I00
sS'group_name'
p7437
S'Advanced'
p7438
sa(dp7439
S'description'
p7440
S'The forcing function.\n'
p7441
sS'cpp_type'
p7442
S'FunctionName'
p7443
sS'default'
p7444
g3
sS'name'
p7445
S'function'
p7446
sS'required'
p7447
I01
sS'group_name'
p7448
Nsa(dp7449
S'description'
p7450
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7451
sS'cpp_type'
p7452
S'bool'
p7453
sS'default'
p7454
S'1'
p7455
sS'name'
p7456
S'implicit'
p7457
sS'required'
p7458
I00
sS'group_name'
p7459
S'Advanced'
p7460
sa(dp7461
S'description'
p7462
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7463
sS'cpp_type'
p7464
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7465
sS'default'
p7466
g3
sS'name'
p7467
S'save_in'
p7468
sS'required'
p7469
I00
sS'group_name'
p7470
Nsa(dp7471
S'description'
p7472
S'The seed for the master random number generator\n'
p7473
sS'cpp_type'
p7474
S'unsigned int'
p7475
sS'default'
p7476
S'0'
p7477
sS'name'
p7478
S'seed'
p7479
sS'required'
p7480
I00
sS'group_name'
p7481
S'Advanced'
p7482
sa(dp7483
S'description'
p7484
g3
sS'cpp_type'
p7485
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7486
sS'default'
p7487
S'FunctionPresetBC'
p7488
sS'name'
p7489
S'type'
p7490
sS'required'
p7491
I00
sS'group_name'
p7492
Nsa(dp7493
S'description'
p7494
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7495
sS'cpp_type'
p7496
S'bool'
p7497
sS'default'
p7498
S'0'
p7499
sS'name'
p7500
S'use_displaced_mesh'
p7501
sS'required'
p7502
I00
sS'group_name'
p7503
S'Advanced'
p7504
sa(dp7505
S'description'
p7506
S'The name of the variable that this boundary condition applies to\n'
p7507
sS'cpp_type'
p7508
S'NonlinearVariableName'
p7509
sS'default'
p7510
g3
sS'name'
p7511
S'variable'
p7512
sS'required'
p7513
I01
sS'group_name'
p7514
NsasS'name'
p7515
S'/BCs/FunctionPresetBC'
p7516
sa(dp7517
S'description'
p7518
g3
sS'subblocks'
p7519
NsS'parameters'
p7520
(lp7521
(dp7522
S'description'
p7523
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7524
sS'cpp_type'
p7525
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7526
sS'default'
p7527
g3
sS'name'
p7528
S'boundary'
p7529
sS'required'
p7530
I01
sS'group_name'
p7531
Nsa(dp7532
S'description'
p7533
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7534
sS'cpp_type'
p7535
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7536
sS'default'
p7537
g3
sS'name'
p7538
S'control_tags'
p7539
sS'required'
p7540
I00
sS'group_name'
p7541
S'Advanced'
p7542
sa(dp7543
S'description'
p7544
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7545
sS'cpp_type'
p7546
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7547
sS'default'
p7548
g3
sS'name'
p7549
S'diag_save_in'
p7550
sS'required'
p7551
I00
sS'group_name'
p7552
Nsa(dp7553
S'description'
p7554
S'Set the enabled status of the MooseObject.\n'
p7555
sS'cpp_type'
p7556
S'bool'
p7557
sS'default'
p7558
S'1'
p7559
sS'name'
p7560
S'enable'
p7561
sS'required'
p7562
I00
sS'group_name'
p7563
S'Advanced'
p7564
sa(dp7565
S'description'
p7566
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7567
sS'cpp_type'
p7568
S'bool'
p7569
sS'default'
p7570
S'1'
p7571
sS'name'
p7572
S'implicit'
p7573
sS'required'
p7574
I00
sS'group_name'
p7575
S'Advanced'
p7576
sa(dp7577
S'description'
p7578
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7579
sS'cpp_type'
p7580
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7581
sS'default'
p7582
g3
sS'name'
p7583
S'save_in'
p7584
sS'required'
p7585
I00
sS'group_name'
p7586
Nsa(dp7587
S'description'
p7588
S'The seed for the master random number generator\n'
p7589
sS'cpp_type'
p7590
S'unsigned int'
p7591
sS'default'
p7592
S'0'
p7593
sS'name'
p7594
S'seed'
p7595
sS'required'
p7596
I00
sS'group_name'
p7597
S'Advanced'
p7598
sa(dp7599
S'description'
p7600
g3
sS'cpp_type'
p7601
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7602
sS'default'
p7603
S'MatchedValueBC'
p7604
sS'name'
p7605
S'type'
p7606
sS'required'
p7607
I00
sS'group_name'
p7608
Nsa(dp7609
S'description'
p7610
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7611
sS'cpp_type'
p7612
S'bool'
p7613
sS'default'
p7614
S'0'
p7615
sS'name'
p7616
S'use_displaced_mesh'
p7617
sS'required'
p7618
I00
sS'group_name'
p7619
S'Advanced'
p7620
sa(dp7621
S'description'
p7622
S'The variable whose value we are to match.\n'
p7623
sS'cpp_type'
p7624
S'std::vector<VariableName>'
p7625
sS'default'
p7626
g3
sS'name'
p7627
S'v'
p7628
sS'required'
p7629
I01
sS'group_name'
p7630
Nsa(dp7631
S'description'
p7632
S'The name of the variable that this boundary condition applies to\n'
p7633
sS'cpp_type'
p7634
S'NonlinearVariableName'
p7635
sS'default'
p7636
g3
sS'name'
p7637
S'variable'
p7638
sS'required'
p7639
I01
sS'group_name'
p7640
NsasS'name'
p7641
S'/BCs/MatchedValueBC'
p7642
sa(dp7643
S'description'
p7644
g3
sS'subblocks'
p7645
NsS'parameters'
p7646
(lp7647
(dp7648
S'description'
p7649
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7650
sS'cpp_type'
p7651
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7652
sS'default'
p7653
g3
sS'name'
p7654
S'boundary'
p7655
sS'required'
p7656
I01
sS'group_name'
p7657
Nsa(dp7658
S'description'
p7659
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7660
sS'cpp_type'
p7661
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7662
sS'default'
p7663
g3
sS'name'
p7664
S'control_tags'
p7665
sS'required'
p7666
I00
sS'group_name'
p7667
S'Advanced'
p7668
sa(dp7669
S'description'
p7670
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7671
sS'cpp_type'
p7672
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7673
sS'default'
p7674
g3
sS'name'
p7675
S'diag_save_in'
p7676
sS'required'
p7677
I00
sS'group_name'
p7678
S'Advanced'
p7679
sa(dp7680
S'description'
p7681
S'Set the enabled status of the MooseObject.\n'
p7682
sS'cpp_type'
p7683
S'bool'
p7684
sS'default'
p7685
S'1'
p7686
sS'name'
p7687
S'enable'
p7688
sS'required'
p7689
I00
sS'group_name'
p7690
S'Advanced'
p7691
sa(dp7692
S'description'
p7693
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7694
sS'cpp_type'
p7695
S'bool'
p7696
sS'default'
p7697
S'1'
p7698
sS'name'
p7699
S'implicit'
p7700
sS'required'
p7701
I00
sS'group_name'
p7702
S'Advanced'
p7703
sa(dp7704
S'description'
p7705
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7706
sS'cpp_type'
p7707
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7708
sS'default'
p7709
g3
sS'name'
p7710
S'save_in'
p7711
sS'required'
p7712
I00
sS'group_name'
p7713
S'Advanced'
p7714
sa(dp7715
S'description'
p7716
S'The seed for the master random number generator\n'
p7717
sS'cpp_type'
p7718
S'unsigned int'
p7719
sS'default'
p7720
S'0'
p7721
sS'name'
p7722
S'seed'
p7723
sS'required'
p7724
I00
sS'group_name'
p7725
S'Advanced'
p7726
sa(dp7727
S'description'
p7728
g3
sS'cpp_type'
p7729
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7730
sS'default'
p7731
S'NeumannBC'
p7732
sS'name'
p7733
S'type'
p7734
sS'required'
p7735
I00
sS'group_name'
p7736
Nsa(dp7737
S'description'
p7738
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7739
sS'cpp_type'
p7740
S'bool'
p7741
sS'default'
p7742
S'0'
p7743
sS'name'
p7744
S'use_displaced_mesh'
p7745
sS'required'
p7746
I00
sS'group_name'
p7747
S'Advanced'
p7748
sa(dp7749
S'description'
p7750
S'The value of the gradient on the boundary.\n'
p7751
sS'cpp_type'
p7752
S'double'
p7753
sS'default'
p7754
S'0'
p7755
sS'name'
p7756
S'value'
p7757
sS'required'
p7758
I00
sS'group_name'
p7759
Nsa(dp7760
S'description'
p7761
S'The name of the variable that this boundary condition applies to\n'
p7762
sS'cpp_type'
p7763
S'NonlinearVariableName'
p7764
sS'default'
p7765
g3
sS'name'
p7766
S'variable'
p7767
sS'required'
p7768
I01
sS'group_name'
p7769
NsasS'name'
p7770
S'/BCs/NeumannBC'
p7771
sa(dp7772
S'description'
p7773
g3
sS'subblocks'
p7774
NsS'parameters'
p7775
(lp7776
(dp7777
S'description'
p7778
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7779
sS'cpp_type'
p7780
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7781
sS'default'
p7782
g3
sS'name'
p7783
S'boundary'
p7784
sS'required'
p7785
I01
sS'group_name'
p7786
Nsa(dp7787
S'description'
p7788
S'Component of the Lagrange multiplier\n'
p7789
sS'cpp_type'
p7790
S'unsigned int'
p7791
sS'default'
p7792
g3
sS'name'
p7793
S'component'
p7794
sS'required'
p7795
I01
sS'group_name'
p7796
Nsa(dp7797
S'description'
p7798
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7799
sS'cpp_type'
p7800
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7801
sS'default'
p7802
g3
sS'name'
p7803
S'control_tags'
p7804
sS'required'
p7805
I00
sS'group_name'
p7806
S'Advanced'
p7807
sa(dp7808
S'description'
p7809
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7810
sS'cpp_type'
p7811
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7812
sS'default'
p7813
g3
sS'name'
p7814
S'diag_save_in'
p7815
sS'required'
p7816
I00
sS'group_name'
p7817
S'Advanced'
p7818
sa(dp7819
S'description'
p7820
S'Set the enabled status of the MooseObject.\n'
p7821
sS'cpp_type'
p7822
S'bool'
p7823
sS'default'
p7824
S'1'
p7825
sS'name'
p7826
S'enable'
p7827
sS'required'
p7828
I00
sS'group_name'
p7829
S'Advanced'
p7830
sa(dp7831
S'description'
p7832
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7833
sS'cpp_type'
p7834
S'bool'
p7835
sS'default'
p7836
S'1'
p7837
sS'name'
p7838
S'implicit'
p7839
sS'required'
p7840
I00
sS'group_name'
p7841
S'Advanced'
p7842
sa(dp7843
S'description'
p7844
S'Lagrange multiplier\n'
p7845
sS'cpp_type'
p7846
S'std::vector<VariableName>'
p7847
sS'default'
p7848
g3
sS'name'
p7849
S'lambda'
p7850
sS'required'
p7851
I01
sS'group_name'
p7852
Nsa(dp7853
S'description'
p7854
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7855
sS'cpp_type'
p7856
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7857
sS'default'
p7858
g3
sS'name'
p7859
S'save_in'
p7860
sS'required'
p7861
I00
sS'group_name'
p7862
S'Advanced'
p7863
sa(dp7864
S'description'
p7865
S'The seed for the master random number generator\n'
p7866
sS'cpp_type'
p7867
S'unsigned int'
p7868
sS'default'
p7869
S'0'
p7870
sS'name'
p7871
S'seed'
p7872
sS'required'
p7873
I00
sS'group_name'
p7874
S'Advanced'
p7875
sa(dp7876
S'description'
p7877
g3
sS'cpp_type'
p7878
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7879
sS'default'
p7880
S'OneDEqualValueConstraintBC'
p7881
sS'name'
p7882
S'type'
p7883
sS'required'
p7884
I00
sS'group_name'
p7885
Nsa(dp7886
S'description'
p7887
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7888
sS'cpp_type'
p7889
S'bool'
p7890
sS'default'
p7891
S'0'
p7892
sS'name'
p7893
S'use_displaced_mesh'
p7894
sS'required'
p7895
I00
sS'group_name'
p7896
S'Advanced'
p7897
sa(dp7898
S'description'
p7899
S'The name of the variable that this boundary condition applies to\n'
p7900
sS'cpp_type'
p7901
S'NonlinearVariableName'
p7902
sS'default'
p7903
g3
sS'name'
p7904
S'variable'
p7905
sS'required'
p7906
I01
sS'group_name'
p7907
Nsa(dp7908
S'description'
p7909
S'Variation of the constraint g wrt this surface (+1 or -1). Note: g = value1 - value2 = 0 \n'
p7910
sS'cpp_type'
p7911
S'double'
p7912
sS'default'
p7913
g3
sS'name'
p7914
S'vg'
p7915
sS'required'
p7916
I01
sS'group_name'
p7917
NsasS'name'
p7918
S'/BCs/OneDEqualValueConstraintBC'
p7919
sa(dp7920
S'description'
p7921
g3
sS'subblocks'
p7922
NsS'parameters'
p7923
(lp7924
(dp7925
S'description'
p7926
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7927
sS'cpp_type'
p7928
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7929
sS'default'
p7930
g3
sS'name'
p7931
S'boundary'
p7932
sS'required'
p7933
I01
sS'group_name'
p7934
Nsa(dp7935
S'description'
p7936
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7937
sS'cpp_type'
p7938
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7939
sS'default'
p7940
g3
sS'name'
p7941
S'control_tags'
p7942
sS'required'
p7943
I00
sS'group_name'
p7944
S'Advanced'
p7945
sa(dp7946
S'description'
p7947
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7948
sS'cpp_type'
p7949
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7950
sS'default'
p7951
g3
sS'name'
p7952
S'diag_save_in'
p7953
sS'required'
p7954
I00
sS'group_name'
p7955
S'Advanced'
p7956
sa(dp7957
S'description'
p7958
S'Set the enabled status of the MooseObject.\n'
p7959
sS'cpp_type'
p7960
S'bool'
p7961
sS'default'
p7962
S'1'
p7963
sS'name'
p7964
S'enable'
p7965
sS'required'
p7966
I00
sS'group_name'
p7967
S'Advanced'
p7968
sa(dp7969
S'description'
p7970
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7971
sS'cpp_type'
p7972
S'bool'
p7973
sS'default'
p7974
S'1'
p7975
sS'name'
p7976
S'implicit'
p7977
sS'required'
p7978
I00
sS'group_name'
p7979
S'Advanced'
p7980
sa(dp7981
S'description'
p7982
S'Penalty scalar\n'
p7983
sS'cpp_type'
p7984
S'double'
p7985
sS'default'
p7986
g3
sS'name'
p7987
S'penalty'
p7988
sS'required'
p7989
I01
sS'group_name'
p7990
Nsa(dp7991
S'description'
p7992
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7993
sS'cpp_type'
p7994
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7995
sS'default'
p7996
g3
sS'name'
p7997
S'save_in'
p7998
sS'required'
p7999
I00
sS'group_name'
p8000
S'Advanced'
p8001
sa(dp8002
S'description'
p8003
S'The seed for the master random number generator\n'
p8004
sS'cpp_type'
p8005
S'unsigned int'
p8006
sS'default'
p8007
S'0'
p8008
sS'name'
p8009
S'seed'
p8010
sS'required'
p8011
I00
sS'group_name'
p8012
S'Advanced'
p8013
sa(dp8014
S'description'
p8015
g3
sS'cpp_type'
p8016
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8017
sS'default'
p8018
S'PenaltyDirichletBC'
p8019
sS'name'
p8020
S'type'
p8021
sS'required'
p8022
I00
sS'group_name'
p8023
Nsa(dp8024
S'description'
p8025
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8026
sS'cpp_type'
p8027
S'bool'
p8028
sS'default'
p8029
S'0'
p8030
sS'name'
p8031
S'use_displaced_mesh'
p8032
sS'required'
p8033
I00
sS'group_name'
p8034
S'Advanced'
p8035
sa(dp8036
S'description'
p8037
S'Boundary value of the variable\n'
p8038
sS'cpp_type'
p8039
S'double'
p8040
sS'default'
p8041
S'0'
p8042
sS'name'
p8043
S'value'
p8044
sS'required'
p8045
I00
sS'group_name'
p8046
Nsa(dp8047
S'description'
p8048
S'The name of the variable that this boundary condition applies to\n'
p8049
sS'cpp_type'
p8050
S'NonlinearVariableName'
p8051
sS'default'
p8052
g3
sS'name'
p8053
S'variable'
p8054
sS'required'
p8055
I01
sS'group_name'
p8056
NsasS'name'
p8057
S'/BCs/PenaltyDirichletBC'
p8058
sa(dp8059
S'description'
p8060
g3
sS'subblocks'
p8061
(lp8062
(dp8063
S'description'
p8064
g3
sS'subblocks'
p8065
NsS'parameters'
p8066
(lp8067
(dp8068
S'description'
p8069
S'If using a generated mesh, you can specifiy just the dimension(s) you want to mark as periodic\n'
p8070
sS'cpp_type'
p8071
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8072
sS'default'
p8073
g3
sS'name'
p8074
S'auto_direction'
p8075
sS'required'
p8076
I00
sS'group_name'
p8077
Nsa(dp8078
S'description'
p8079
S'Functions that specify the inverse transformation\n'
p8080
sS'cpp_type'
p8081
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8082
sS'default'
p8083
g3
sS'name'
p8084
S'inv_transform_func'
p8085
sS'required'
p8086
I00
sS'group_name'
p8087
Nsa(dp8088
S'description'
p8089
S'Boundary ID associated with the primary boundary.\n'
p8090
sS'cpp_type'
p8091
S'BoundaryName'
p8092
sS'default'
p8093
g3
sS'name'
p8094
S'primary'
p8095
sS'required'
p8096
I00
sS'group_name'
p8097
Nsa(dp8098
S'description'
p8099
S'Boundary ID associated with the secondary boundary.\n'
p8100
sS'cpp_type'
p8101
S'BoundaryName'
p8102
sS'default'
p8103
g3
sS'name'
p8104
S'secondary'
p8105
sS'required'
p8106
I00
sS'group_name'
p8107
Nsa(dp8108
S'description'
p8109
S'Functions that specify the transformation\n'
p8110
sS'cpp_type'
p8111
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8112
sS'default'
p8113
g3
sS'name'
p8114
S'transform_func'
p8115
sS'required'
p8116
I00
sS'group_name'
p8117
Nsa(dp8118
S'description'
p8119
S'Vector that translates coordinates on the primary boundary to coordinates on the secondary boundary.\n'
p8120
sS'cpp_type'
p8121
S'libMesh::VectorValue<double>'
p8122
sS'default'
p8123
g3
sS'name'
p8124
S'translation'
p8125
sS'required'
p8126
I00
sS'group_name'
p8127
Nsa(dp8128
S'description'
p8129
S'Variable for the periodic boundary\n'
p8130
sS'cpp_type'
p8131
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p8132
sS'default'
p8133
g3
sS'name'
p8134
S'variable'
p8135
sS'required'
p8136
I00
sS'group_name'
p8137
NsasS'name'
p8138
S'/BCs/Periodic/*'
p8139
sasS'parameters'
p8140
NsS'name'
p8141
S'/BCs/Periodic'
p8142
sa(dp8143
S'description'
p8144
g3
sS'subblocks'
p8145
NsS'parameters'
p8146
(lp8147
(dp8148
S'description'
p8149
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8150
sS'cpp_type'
p8151
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8152
sS'default'
p8153
g3
sS'name'
p8154
S'boundary'
p8155
sS'required'
p8156
I01
sS'group_name'
p8157
Nsa(dp8158
S'description'
p8159
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8160
sS'cpp_type'
p8161
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8162
sS'default'
p8163
g3
sS'name'
p8164
S'control_tags'
p8165
sS'required'
p8166
I00
sS'group_name'
p8167
S'Advanced'
p8168
sa(dp8169
S'description'
p8170
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8171
sS'cpp_type'
p8172
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8173
sS'default'
p8174
g3
sS'name'
p8175
S'diag_save_in'
p8176
sS'required'
p8177
I00
sS'group_name'
p8178
Nsa(dp8179
S'description'
p8180
S'Set the enabled status of the MooseObject.\n'
p8181
sS'cpp_type'
p8182
S'bool'
p8183
sS'default'
p8184
S'1'
p8185
sS'name'
p8186
S'enable'
p8187
sS'required'
p8188
I00
sS'group_name'
p8189
S'Advanced'
p8190
sa(dp8191
S'description'
p8192
S'Determines whether this object is calculated using an implicit or explicit form\n'
p8193
sS'cpp_type'
p8194
S'bool'
p8195
sS'default'
p8196
S'1'
p8197
sS'name'
p8198
S'implicit'
p8199
sS'required'
p8200
I00
sS'group_name'
p8201
S'Advanced'
p8202
sa(dp8203
S'description'
p8204
S'The postprocessor to set the value to on the boundary.\n'
p8205
sS'cpp_type'
p8206
S'PostprocessorName'
p8207
sS'default'
p8208
g3
sS'name'
p8209
S'postprocessor'
p8210
sS'required'
p8211
I01
sS'group_name'
p8212
Nsa(dp8213
S'description'
p8214
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8215
sS'cpp_type'
p8216
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8217
sS'default'
p8218
g3
sS'name'
p8219
S'save_in'
p8220
sS'required'
p8221
I00
sS'group_name'
p8222
Nsa(dp8223
S'description'
p8224
S'The seed for the master random number generator\n'
p8225
sS'cpp_type'
p8226
S'unsigned int'
p8227
sS'default'
p8228
S'0'
p8229
sS'name'
p8230
S'seed'
p8231
sS'required'
p8232
I00
sS'group_name'
p8233
S'Advanced'
p8234
sa(dp8235
S'description'
p8236
g3
sS'cpp_type'
p8237
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8238
sS'default'
p8239
S'PostprocessorDirichletBC'
p8240
sS'name'
p8241
S'type'
p8242
sS'required'
p8243
I00
sS'group_name'
p8244
Nsa(dp8245
S'description'
p8246
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8247
sS'cpp_type'
p8248
S'bool'
p8249
sS'default'
p8250
S'0'
p8251
sS'name'
p8252
S'use_displaced_mesh'
p8253
sS'required'
p8254
I00
sS'group_name'
p8255
S'Advanced'
p8256
sa(dp8257
S'description'
p8258
S'The name of the variable that this boundary condition applies to\n'
p8259
sS'cpp_type'
p8260
S'NonlinearVariableName'
p8261
sS'default'
p8262
g3
sS'name'
p8263
S'variable'
p8264
sS'required'
p8265
I01
sS'group_name'
p8266
NsasS'name'
p8267
S'/BCs/PostprocessorDirichletBC'
p8268
sa(dp8269
S'description'
p8270
g3
sS'subblocks'
p8271
NsS'parameters'
p8272
(lp8273
(dp8274
S'description'
p8275
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8276
sS'cpp_type'
p8277
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8278
sS'default'
p8279
g3
sS'name'
p8280
S'boundary'
p8281
sS'required'
p8282
I01
sS'group_name'
p8283
Nsa(dp8284
S'description'
p8285
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8286
sS'cpp_type'
p8287
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8288
sS'default'
p8289
g3
sS'name'
p8290
S'control_tags'
p8291
sS'required'
p8292
I00
sS'group_name'
p8293
S'Advanced'
p8294
sa(dp8295
S'description'
p8296
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8297
sS'cpp_type'
p8298
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8299
sS'default'
p8300
g3
sS'name'
p8301
S'diag_save_in'
p8302
sS'required'
p8303
I00
sS'group_name'
p8304
S'Advanced'
p8305
sa(dp8306
S'description'
p8307
S'Set the enabled status of the MooseObject.\n'
p8308
sS'cpp_type'
p8309
S'bool'
p8310
sS'default'
p8311
S'1'
p8312
sS'name'
p8313
S'enable'
p8314
sS'required'
p8315
I00
sS'group_name'
p8316
S'Advanced'
p8317
sa(dp8318
S'description'
p8319
S'Determines whether this object is calculated using an implicit or explicit form\n'
p8320
sS'cpp_type'
p8321
S'bool'
p8322
sS'default'
p8323
S'1'
p8324
sS'name'
p8325
S'implicit'
p8326
sS'required'
p8327
I00
sS'group_name'
p8328
S'Advanced'
p8329
sa(dp8330
S'description'
p8331
S'The postprocessor to use for value of the gradient on the boundary.\n'
p8332
sS'cpp_type'
p8333
S'PostprocessorName'
p8334
sS'default'
p8335
S'0'
p8336
sS'name'
p8337
S'postprocessor'
p8338
sS'required'
p8339
I00
sS'group_name'
p8340
Nsa(dp8341
S'description'
p8342
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8343
sS'cpp_type'
p8344
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8345
sS'default'
p8346
g3
sS'name'
p8347
S'save_in'
p8348
sS'required'
p8349
I00
sS'group_name'
p8350
S'Advanced'
p8351
sa(dp8352
S'description'
p8353
S'The seed for the master random number generator\n'
p8354
sS'cpp_type'
p8355
S'unsigned int'
p8356
sS'default'
p8357
S'0'
p8358
sS'name'
p8359
S'seed'
p8360
sS'required'
p8361
I00
sS'group_name'
p8362
S'Advanced'
p8363
sa(dp8364
S'description'
p8365
g3
sS'cpp_type'
p8366
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8367
sS'default'
p8368
S'PostprocessorNeumannBC'
p8369
sS'name'
p8370
S'type'
p8371
sS'required'
p8372
I00
sS'group_name'
p8373
Nsa(dp8374
S'description'
p8375
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8376
sS'cpp_type'
p8377
S'bool'
p8378
sS'default'
p8379
S'0'
p8380
sS'name'
p8381
S'use_displaced_mesh'
p8382
sS'required'
p8383
I00
sS'group_name'
p8384
S'Advanced'
p8385
sa(dp8386
S'description'
p8387
S'The name of the variable that this boundary condition applies to\n'
p8388
sS'cpp_type'
p8389
S'NonlinearVariableName'
p8390
sS'default'
p8391
g3
sS'name'
p8392
S'variable'
p8393
sS'required'
p8394
I01
sS'group_name'
p8395
NsasS'name'
p8396
S'/BCs/PostprocessorNeumannBC'
p8397
sa(dp8398
S'description'
p8399
g3
sS'subblocks'
p8400
NsS'parameters'
p8401
(lp8402
(dp8403
S'description'
p8404
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8405
sS'cpp_type'
p8406
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8407
sS'default'
p8408
g3
sS'name'
p8409
S'boundary'
p8410
sS'required'
p8411
I01
sS'group_name'
p8412
Nsa(dp8413
S'description'
p8414
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8415
sS'cpp_type'
p8416
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8417
sS'default'
p8418
g3
sS'name'
p8419
S'control_tags'
p8420
sS'required'
p8421
I00
sS'group_name'
p8422
S'Advanced'
p8423
sa(dp8424
S'description'
p8425
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8426
sS'cpp_type'
p8427
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8428
sS'default'
p8429
g3
sS'name'
p8430
S'diag_save_in'
p8431
sS'required'
p8432
I00
sS'group_name'
p8433
Nsa(dp8434
S'description'
p8435
S'Set the enabled status of the MooseObject.\n'
p8436
sS'cpp_type'
p8437
S'bool'
p8438
sS'default'
p8439
S'1'
p8440
sS'name'
p8441
S'enable'
p8442
sS'required'
p8443
I00
sS'group_name'
p8444
S'Advanced'
p8445
sa(dp8446
S'description'
p8447
S'Determines whether this object is calculated using an implicit or explicit form\n'
p8448
sS'cpp_type'
p8449
S'bool'
p8450
sS'default'
p8451
S'1'
p8452
sS'name'
p8453
S'implicit'
p8454
sS'required'
p8455
I00
sS'group_name'
p8456
S'Advanced'
p8457
sa(dp8458
S'description'
p8459
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8460
sS'cpp_type'
p8461
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8462
sS'default'
p8463
g3
sS'name'
p8464
S'save_in'
p8465
sS'required'
p8466
I00
sS'group_name'
p8467
Nsa(dp8468
S'description'
p8469
S'The seed for the master random number generator\n'
p8470
sS'cpp_type'
p8471
S'unsigned int'
p8472
sS'default'
p8473
S'0'
p8474
sS'name'
p8475
S'seed'
p8476
sS'required'
p8477
I00
sS'group_name'
p8478
S'Advanced'
p8479
sa(dp8480
S'description'
p8481
g3
sS'cpp_type'
p8482
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8483
sS'default'
p8484
S'PresetBC'
p8485
sS'name'
p8486
S'type'
p8487
sS'required'
p8488
I00
sS'group_name'
p8489
Nsa(dp8490
S'description'
p8491
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8492
sS'cpp_type'
p8493
S'bool'
p8494
sS'default'
p8495
S'0'
p8496
sS'name'
p8497
S'use_displaced_mesh'
p8498
sS'required'
p8499
I00
sS'group_name'
p8500
S'Advanced'
p8501
sa(dp8502
S'description'
p8503
S'Value of the BC\n'
p8504
sS'cpp_type'
p8505
S'double'
p8506
sS'default'
p8507
g3
sS'name'
p8508
S'value'
p8509
sS'required'
p8510
I01
sS'group_name'
p8511
Nsa(dp8512
S'description'
p8513
S'The name of the variable that this boundary condition applies to\n'
p8514
sS'cpp_type'
p8515
S'NonlinearVariableName'
p8516
sS'default'
p8517
g3
sS'name'
p8518
S'variable'
p8519
sS'required'
p8520
I01
sS'group_name'
p8521
NsasS'name'
p8522
S'/BCs/PresetBC'
p8523
sa(dp8524
S'description'
p8525
g3
sS'subblocks'
p8526
NsS'parameters'
p8527
(lp8528
(dp8529
S'description'
p8530
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8531
sS'cpp_type'
p8532
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8533
sS'default'
p8534
g3
sS'name'
p8535
S'boundary'
p8536
sS'required'
p8537
I01
sS'group_name'
p8538
Nsa(dp8539
S'description'
p8540
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8541
sS'cpp_type'
p8542
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8543
sS'default'
p8544
g3
sS'name'
p8545
S'control_tags'
p8546
sS'required'
p8547
I00
sS'group_name'
p8548
S'Advanced'
p8549
sa(dp8550
S'description'
p8551
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8552
sS'cpp_type'
p8553
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8554
sS'default'
p8555
g3
sS'name'
p8556
S'diag_save_in'
p8557
sS'required'
p8558
I00
sS'group_name'
p8559
Nsa(dp8560
S'description'
p8561
g3
sS'cpp_type'
p8562
S'double'
p8563
sS'default'
p8564
S'0'
p8565
sS'name'
p8566
S'duration'
p8567
sS'required'
p8568
I00
sS'group_name'
p8569
Nsa(dp8570
S'description'
p8571
S'Set the enabled status of the MooseObject.\n'
p8572
sS'cpp_type'
p8573
S'bool'
p8574
sS'default'
p8575
S'1'
p8576
sS'name'
p8577
S'enable'
p8578
sS'required'
p8579
I00
sS'group_name'
p8580
S'Advanced'
p8581
sa(dp8582
S'description'
p8583
g3
sS'cpp_type'
p8584
S'double'
p8585
sS'default'
p8586
S'0'
p8587
sS'name'
p8588
S'final'
p8589
sS'required'
p8590
I00
sS'group_name'
p8591
Nsa(dp8592
S'description'
p8593
S'Determines whether this object is calculated using an implicit or explicit form\n'
p8594
sS'cpp_type'
p8595
S'bool'
p8596
sS'default'
p8597
S'1'
p8598
sS'name'
p8599
S'implicit'
p8600
sS'required'
p8601
I00
sS'group_name'
p8602
S'Advanced'
p8603
sa(dp8604
S'description'
p8605
g3
sS'cpp_type'
p8606
S'double'
p8607
sS'default'
p8608
S'0'
p8609
sS'name'
p8610
S'initial'
p8611
sS'required'
p8612
I00
sS'group_name'
p8613
Nsa(dp8614
S'description'
p8615
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8616
sS'cpp_type'
p8617
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8618
sS'default'
p8619
g3
sS'name'
p8620
S'save_in'
p8621
sS'required'
p8622
I00
sS'group_name'
p8623
Nsa(dp8624
S'description'
p8625
S'The seed for the master random number generator\n'
p8626
sS'cpp_type'
p8627
S'unsigned int'
p8628
sS'default'
p8629
S'0'
p8630
sS'name'
p8631
S'seed'
p8632
sS'required'
p8633
I00
sS'group_name'
p8634
S'Advanced'
p8635
sa(dp8636
S'description'
p8637
g3
sS'cpp_type'
p8638
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8639
sS'default'
p8640
S'SinDirichletBC'
p8641
sS'name'
p8642
S'type'
p8643
sS'required'
p8644
I00
sS'group_name'
p8645
Nsa(dp8646
S'description'
p8647
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8648
sS'cpp_type'
p8649
S'bool'
p8650
sS'default'
p8651
S'0'
p8652
sS'name'
p8653
S'use_displaced_mesh'
p8654
sS'required'
p8655
I00
sS'group_name'
p8656
S'Advanced'
p8657
sa(dp8658
S'description'
p8659
S'The name of the variable that this boundary condition applies to\n'
p8660
sS'cpp_type'
p8661
S'NonlinearVariableName'
p8662
sS'default'
p8663
g3
sS'name'
p8664
S'variable'
p8665
sS'required'
p8666
I01
sS'group_name'
p8667
NsasS'name'
p8668
S'/BCs/SinDirichletBC'
p8669
sa(dp8670
S'description'
p8671
g3
sS'subblocks'
p8672
NsS'parameters'
p8673
(lp8674
(dp8675
S'description'
p8676
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8677
sS'cpp_type'
p8678
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8679
sS'default'
p8680
g3
sS'name'
p8681
S'boundary'
p8682
sS'required'
p8683
I01
sS'group_name'
p8684
Nsa(dp8685
S'description'
p8686
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8687
sS'cpp_type'
p8688
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8689
sS'default'
p8690
g3
sS'name'
p8691
S'control_tags'
p8692
sS'required'
p8693
I00
sS'group_name'
p8694
S'Advanced'
p8695
sa(dp8696
S'description'
p8697
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8698
sS'cpp_type'
p8699
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8700
sS'default'
p8701
g3
sS'name'
p8702
S'diag_save_in'
p8703
sS'required'
p8704
I00
sS'group_name'
p8705
S'Advanced'
p8706
sa(dp8707
S'description'
p8708
S'The duration of the ramp\n'
p8709
sS'cpp_type'
p8710
S'double'
p8711
sS'default'
p8712
S'0'
p8713
sS'name'
p8714
S'duration'
p8715
sS'required'
p8716
I00
sS'group_name'
p8717
Nsa(dp8718
S'description'
p8719
S'Set the enabled status of the MooseObject.\n'
p8720
sS'cpp_type'
p8721
S'bool'
p8722
sS'default'
p8723
S'1'
p8724
sS'name'
p8725
S'enable'
p8726
sS'required'
p8727
I00
sS'group_name'
p8728
S'Advanced'
p8729
sa(dp8730
S'description'
p8731
S'The final value of the gradient on the boundary\n'
p8732
sS'cpp_type'
p8733
S'double'
p8734
sS'default'
p8735
S'0'
p8736
sS'name'
p8737
S'final'
p8738
sS'required'
p8739
I00
sS'group_name'
p8740
Nsa(dp8741
S'description'
p8742
S'Determines whether this object is calculated using an implicit or explicit form\n'
p8743
sS'cpp_type'
p8744
S'bool'
p8745
sS'default'
p8746
S'1'
p8747
sS'name'
p8748
S'implicit'
p8749
sS'required'
p8750
I00
sS'group_name'
p8751
S'Advanced'
p8752
sa(dp8753
S'description'
p8754
S'The initial value of the gradient on the boundary\n'
p8755
sS'cpp_type'
p8756
S'double'
p8757
sS'default'
p8758
S'0'
p8759
sS'name'
p8760
S'initial'
p8761
sS'required'
p8762
I00
sS'group_name'
p8763
Nsa(dp8764
S'description'
p8765
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8766
sS'cpp_type'
p8767
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8768
sS'default'
p8769
g3
sS'name'
p8770
S'save_in'
p8771
sS'required'
p8772
I00
sS'group_name'
p8773
S'Advanced'
p8774
sa(dp8775
S'description'
p8776
S'The seed for the master random number generator\n'
p8777
sS'cpp_type'
p8778
S'unsigned int'
p8779
sS'default'
p8780
S'0'
p8781
sS'name'
p8782
S'seed'
p8783
sS'required'
p8784
I00
sS'group_name'
p8785
S'Advanced'
p8786
sa(dp8787
S'description'
p8788
g3
sS'cpp_type'
p8789
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8790
sS'default'
p8791
S'SinNeumannBC'
p8792
sS'name'
p8793
S'type'
p8794
sS'required'
p8795
I00
sS'group_name'
p8796
Nsa(dp8797
S'description'
p8798
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8799
sS'cpp_type'
p8800
S'bool'
p8801
sS'default'
p8802
S'0'
p8803
sS'name'
p8804
S'use_displaced_mesh'
p8805
sS'required'
p8806
I00
sS'group_name'
p8807
S'Advanced'
p8808
sa(dp8809
S'description'
p8810
S'The name of the variable that this boundary condition applies to\n'
p8811
sS'cpp_type'
p8812
S'NonlinearVariableName'
p8813
sS'default'
p8814
g3
sS'name'
p8815
S'variable'
p8816
sS'required'
p8817
I01
sS'group_name'
p8818
NsasS'name'
p8819
S'/BCs/SinNeumannBC'
p8820
sa(dp8821
S'description'
p8822
g3
sS'subblocks'
p8823
NsS'parameters'
p8824
(lp8825
(dp8826
S'description'
p8827
S'No idea.\n'
p8828
sS'cpp_type'
p8829
S'double'
p8830
sS'default'
p8831
S'1'
p8832
sS'name'
p8833
S'alpha'
p8834
sS'required'
p8835
I00
sS'group_name'
p8836
Nsa(dp8837
S'description'
p8838
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8839
sS'cpp_type'
p8840
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8841
sS'default'
p8842
g3
sS'name'
p8843
S'boundary'
p8844
sS'required'
p8845
I01
sS'group_name'
p8846
Nsa(dp8847
S'description'
p8848
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8849
sS'cpp_type'
p8850
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8851
sS'default'
p8852
g3
sS'name'
p8853
S'control_tags'
p8854
sS'required'
p8855
I00
sS'group_name'
p8856
S'Advanced'
p8857
sa(dp8858
S'description'
p8859
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8860
sS'cpp_type'
p8861
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8862
sS'default'
p8863
g3
sS'name'
p8864
S'diag_save_in'
p8865
sS'required'
p8866
I00
sS'group_name'
p8867
S'Advanced'
p8868
sa(dp8869
S'description'
p8870
S'Set the enabled status of the MooseObject.\n'
p8871
sS'cpp_type'
p8872
S'bool'
p8873
sS'default'
p8874
S'1'
p8875
sS'name'
p8876
S'enable'
p8877
sS'required'
p8878
I00
sS'group_name'
p8879
S'Advanced'
p8880
sa(dp8881
S'description'
p8882
S'Determines whether this object is calculated using an implicit or explicit form\n'
p8883
sS'cpp_type'
p8884
S'bool'
p8885
sS'default'
p8886
S'1'
p8887
sS'name'
p8888
S'implicit'
p8889
sS'required'
p8890
I00
sS'group_name'
p8891
S'Advanced'
p8892
sa(dp8893
S'description'
p8894
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8895
sS'cpp_type'
p8896
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8897
sS'default'
p8898
g3
sS'name'
p8899
S'save_in'
p8900
sS'required'
p8901
I00
sS'group_name'
p8902
S'Advanced'
p8903
sa(dp8904
S'description'
p8905
S'The seed for the master random number generator\n'
p8906
sS'cpp_type'
p8907
S'unsigned int'
p8908
sS'default'
p8909
S'0'
p8910
sS'name'
p8911
S'seed'
p8912
sS'required'
p8913
I00
sS'group_name'
p8914
S'Advanced'
p8915
sa(dp8916
S'description'
p8917
g3
sS'cpp_type'
p8918
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8919
sS'default'
p8920
S'VacuumBC'
p8921
sS'name'
p8922
S'type'
p8923
sS'required'
p8924
I00
sS'group_name'
p8925
Nsa(dp8926
S'description'
p8927
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8928
sS'cpp_type'
p8929
S'bool'
p8930
sS'default'
p8931
S'0'
p8932
sS'name'
p8933
S'use_displaced_mesh'
p8934
sS'required'
p8935
I00
sS'group_name'
p8936
S'Advanced'
p8937
sa(dp8938
S'description'
p8939
S'The name of the variable that this boundary condition applies to\n'
p8940
sS'cpp_type'
p8941
S'NonlinearVariableName'
p8942
sS'default'
p8943
g3
sS'name'
p8944
S'variable'
p8945
sS'required'
p8946
I01
sS'group_name'
p8947
NsasS'name'
p8948
S'/BCs/VacuumBC'
p8949
sa(dp8950
S'description'
p8951
g3
sS'subblocks'
p8952
NsS'parameters'
p8953
(lp8954
(dp8955
S'description'
p8956
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8957
sS'cpp_type'
p8958
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8959
sS'default'
p8960
g3
sS'name'
p8961
S'boundary'
p8962
sS'required'
p8963
I01
sS'group_name'
p8964
Nsa(dp8965
S'description'
p8966
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8967
sS'cpp_type'
p8968
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8969
sS'default'
p8970
g3
sS'name'
p8971
S'control_tags'
p8972
sS'required'
p8973
I00
sS'group_name'
p8974
S'Advanced'
p8975
sa(dp8976
S'description'
p8977
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8978
sS'cpp_type'
p8979
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8980
sS'default'
p8981
g3
sS'name'
p8982
S'diag_save_in'
p8983
sS'required'
p8984
I00
sS'group_name'
p8985
S'Advanced'
p8986
sa(dp8987
S'description'
p8988
S'Set the enabled status of the MooseObject.\n'
p8989
sS'cpp_type'
p8990
S'bool'
p8991
sS'default'
p8992
S'1'
p8993
sS'name'
p8994
S'enable'
p8995
sS'required'
p8996
I00
sS'group_name'
p8997
S'Advanced'
p8998
sa(dp8999
S'description'
p9000
S'Determines whether this object is calculated using an implicit or explicit form\n'
p9001
sS'cpp_type'
p9002
S'bool'
p9003
sS'default'
p9004
S'1'
p9005
sS'name'
p9006
S'implicit'
p9007
sS'required'
p9008
I00
sS'group_name'
p9009
S'Advanced'
p9010
sa(dp9011
S'description'
p9012
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p9013
sS'cpp_type'
p9014
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p9015
sS'default'
p9016
g3
sS'name'
p9017
S'save_in'
p9018
sS'required'
p9019
I00
sS'group_name'
p9020
S'Advanced'
p9021
sa(dp9022
S'description'
p9023
S'The seed for the master random number generator\n'
p9024
sS'cpp_type'
p9025
S'unsigned int'
p9026
sS'default'
p9027
S'0'
p9028
sS'name'
p9029
S'seed'
p9030
sS'required'
p9031
I00
sS'group_name'
p9032
S'Advanced'
p9033
sa(dp9034
S'description'
p9035
g3
sS'cpp_type'
p9036
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9037
sS'default'
p9038
S'VectorNeumannBC'
p9039
sS'name'
p9040
S'type'
p9041
sS'required'
p9042
I00
sS'group_name'
p9043
Nsa(dp9044
S'description'
p9045
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9046
sS'cpp_type'
p9047
S'bool'
p9048
sS'default'
p9049
S'0'
p9050
sS'name'
p9051
S'use_displaced_mesh'
p9052
sS'required'
p9053
I00
sS'group_name'
p9054
S'Advanced'
p9055
sa(dp9056
S'description'
p9057
S'The name of the variable that this boundary condition applies to\n'
p9058
sS'cpp_type'
p9059
S'NonlinearVariableName'
p9060
sS'default'
p9061
g3
sS'name'
p9062
S'variable'
p9063
sS'required'
p9064
I01
sS'group_name'
p9065
Nsa(dp9066
S'description'
p9067
S'vector this BC should act in\n'
p9068
sS'cpp_type'
p9069
S'libMesh::VectorValue<double>'
p9070
sS'default'
p9071
S'0 0 0'
p9072
sS'name'
p9073
S'vector_value'
p9074
sS'required'
p9075
I00
sS'group_name'
p9076
NsasS'name'
p9077
S'/BCs/VectorNeumannBC'
p9078
sa(dp9079
S'description'
p9080
g3
sS'subblocks'
p9081
NsS'parameters'
p9082
(lp9083
(dp9084
S'description'
p9085
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9086
sS'cpp_type'
p9087
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9088
sS'default'
p9089
g3
sS'name'
p9090
S'boundary'
p9091
sS'required'
p9092
I01
sS'group_name'
p9093
Nsa(dp9094
S'description'
p9095
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9096
sS'cpp_type'
p9097
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p9098
sS'default'
p9099
g3
sS'name'
p9100
S'control_tags'
p9101
sS'required'
p9102
I00
sS'group_name'
p9103
S'Advanced'
p9104
sa(dp9105
S'description'
p9106
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p9107
sS'cpp_type'
p9108
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p9109
sS'default'
p9110
g3
sS'name'
p9111
S'diag_save_in'
p9112
sS'required'
p9113
I00
sS'group_name'
p9114
S'Advanced'
p9115
sa(dp9116
S'description'
p9117
S'Set the enabled status of the MooseObject.\n'
p9118
sS'cpp_type'
p9119
S'bool'
p9120
sS'default'
p9121
S'1'
p9122
sS'name'
p9123
S'enable'
p9124
sS'required'
p9125
I00
sS'group_name'
p9126
S'Advanced'
p9127
sa(dp9128
S'description'
p9129
S'Determines whether this object is calculated using an implicit or explicit form\n'
p9130
sS'cpp_type'
p9131
S'bool'
p9132
sS'default'
p9133
S'1'
p9134
sS'name'
p9135
S'implicit'
p9136
sS'required'
p9137
I00
sS'group_name'
p9138
S'Advanced'
p9139
sa(dp9140
S'description'
p9141
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p9142
sS'cpp_type'
p9143
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p9144
sS'default'
p9145
g3
sS'name'
p9146
S'save_in'
p9147
sS'required'
p9148
I00
sS'group_name'
p9149
S'Advanced'
p9150
sa(dp9151
S'description'
p9152
S'The seed for the master random number generator\n'
p9153
sS'cpp_type'
p9154
S'unsigned int'
p9155
sS'default'
p9156
S'0'
p9157
sS'name'
p9158
S'seed'
p9159
sS'required'
p9160
I00
sS'group_name'
p9161
S'Advanced'
p9162
sa(dp9163
S'description'
p9164
g3
sS'cpp_type'
p9165
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9166
sS'default'
p9167
S'WeakGradientBC'
p9168
sS'name'
p9169
S'type'
p9170
sS'required'
p9171
I00
sS'group_name'
p9172
Nsa(dp9173
S'description'
p9174
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9175
sS'cpp_type'
p9176
S'bool'
p9177
sS'default'
p9178
S'0'
p9179
sS'name'
p9180
S'use_displaced_mesh'
p9181
sS'required'
p9182
I00
sS'group_name'
p9183
S'Advanced'
p9184
sa(dp9185
S'description'
p9186
S'The name of the variable that this boundary condition applies to\n'
p9187
sS'cpp_type'
p9188
S'NonlinearVariableName'
p9189
sS'default'
p9190
g3
sS'name'
p9191
S'variable'
p9192
sS'required'
p9193
I01
sS'group_name'
p9194
NsasS'name'
p9195
S'/BCs/WeakGradientBC'
p9196
sasS'parameters'
p9197
NsS'name'
p9198
S'/BCs'
p9199
sa(dp9200
S'description'
p9201
g3
sS'subblocks'
p9202
(lp9203
(dp9204
S'description'
p9205
g3
sS'subblocks'
p9206
NsS'parameters'
p9207
(lp9208
(dp9209
S'description'
p9210
S'A string representing the Moose Object that will be built by this Action\n'
p9211
sS'cpp_type'
p9212
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9213
sS'default'
p9214
g3
sS'name'
p9215
S'type'
p9216
sS'required'
p9217
I01
sS'group_name'
p9218
NsasS'name'
p9219
S'/Bounds/*'
p9220
sa(dp9221
S'description'
p9222
g3
sS'subblocks'
p9223
NsS'parameters'
p9224
(lp9225
(dp9226
S'description'
p9227
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9228
sS'cpp_type'
p9229
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9230
sS'default'
p9231
g3
sS'name'
p9232
S'block'
p9233
sS'required'
p9234
I00
sS'group_name'
p9235
Nsa(dp9236
S'description'
p9237
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9238
sS'cpp_type'
p9239
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9240
sS'default'
p9241
g3
sS'name'
p9242
S'boundary'
p9243
sS'required'
p9244
I00
sS'group_name'
p9245
Nsa(dp9246
S'description'
p9247
S'The variable to be bounded\n'
p9248
sS'cpp_type'
p9249
S'std::vector<VariableName>'
p9250
sS'default'
p9251
g3
sS'name'
p9252
S'bounded_variable'
p9253
sS'required'
p9254
I01
sS'group_name'
p9255
Nsa(dp9256
S'description'
p9257
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9258
sS'cpp_type'
p9259
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p9260
sS'default'
p9261
g3
sS'name'
p9262
S'control_tags'
p9263
sS'required'
p9264
I00
sS'group_name'
p9265
S'Advanced'
p9266
sa(dp9267
S'description'
p9268
S'Set the enabled status of the MooseObject.\n'
p9269
sS'cpp_type'
p9270
S'bool'
p9271
sS'default'
p9272
S'1'
p9273
sS'name'
p9274
S'enable'
p9275
sS'required'
p9276
I00
sS'group_name'
p9277
S'Advanced'
p9278
sa(dp9279
S'name'
p9280
S'execute_on'
p9281
sS'cpp_type'
p9282
S'MultiMooseEnum'
p9283
sS'default'
p9284
S'LINEAR'
p9285
sS'description'
p9286
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9287
sS'required'
p9288
I00
sS'options'
p9289
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9290
sS'group_name'
p9291
Nsa(dp9292
S'description'
p9293
S'The lower bound for the variable\n'
p9294
sS'cpp_type'
p9295
S'double'
p9296
sS'default'
p9297
g3
sS'name'
p9298
S'lower'
p9299
sS'required'
p9300
I00
sS'group_name'
p9301
Nsa(dp9302
S'description'
p9303
S'The seed for the master random number generator\n'
p9304
sS'cpp_type'
p9305
S'unsigned int'
p9306
sS'default'
p9307
S'0'
p9308
sS'name'
p9309
S'seed'
p9310
sS'required'
p9311
I00
sS'group_name'
p9312
S'Advanced'
p9313
sa(dp9314
S'description'
p9315
g3
sS'cpp_type'
p9316
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9317
sS'default'
p9318
S'BoundsAux'
p9319
sS'name'
p9320
S'type'
p9321
sS'required'
p9322
I00
sS'group_name'
p9323
Nsa(dp9324
S'description'
p9325
S'The upper bound for the variable\n'
p9326
sS'cpp_type'
p9327
S'double'
p9328
sS'default'
p9329
g3
sS'name'
p9330
S'upper'
p9331
sS'required'
p9332
I00
sS'group_name'
p9333
Nsa(dp9334
S'description'
p9335
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9336
sS'cpp_type'
p9337
S'bool'
p9338
sS'default'
p9339
S'0'
p9340
sS'name'
p9341
S'use_displaced_mesh'
p9342
sS'required'
p9343
I00
sS'group_name'
p9344
S'Advanced'
p9345
sa(dp9346
S'description'
p9347
S'The name of the variable that this object applies to\n'
p9348
sS'cpp_type'
p9349
S'AuxVariableName'
p9350
sS'default'
p9351
g3
sS'name'
p9352
S'variable'
p9353
sS'required'
p9354
I01
sS'group_name'
p9355
NsasS'name'
p9356
S'/Bounds/BoundsAux'
p9357
sa(dp9358
S'description'
p9359
g3
sS'subblocks'
p9360
NsS'parameters'
p9361
(lp9362
(dp9363
S'description'
p9364
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9365
sS'cpp_type'
p9366
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9367
sS'default'
p9368
g3
sS'name'
p9369
S'block'
p9370
sS'required'
p9371
I00
sS'group_name'
p9372
Nsa(dp9373
S'description'
p9374
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9375
sS'cpp_type'
p9376
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9377
sS'default'
p9378
g3
sS'name'
p9379
S'boundary'
p9380
sS'required'
p9381
I00
sS'group_name'
p9382
Nsa(dp9383
S'description'
p9384
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9385
sS'cpp_type'
p9386
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p9387
sS'default'
p9388
g3
sS'name'
p9389
S'control_tags'
p9390
sS'required'
p9391
I00
sS'group_name'
p9392
S'Advanced'
p9393
sa(dp9394
S'description'
p9395
S'Set the enabled status of the MooseObject.\n'
p9396
sS'cpp_type'
p9397
S'bool'
p9398
sS'default'
p9399
S'1'
p9400
sS'name'
p9401
S'enable'
p9402
sS'required'
p9403
I00
sS'group_name'
p9404
S'Advanced'
p9405
sa(dp9406
S'name'
p9407
S'execute_on'
p9408
sS'cpp_type'
p9409
S'MultiMooseEnum'
p9410
sS'default'
p9411
S'LINEAR'
p9412
sS'description'
p9413
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9414
sS'required'
p9415
I00
sS'options'
p9416
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9417
sS'group_name'
p9418
Nsa(dp9419
S'description'
p9420
S'The seed for the master random number generator\n'
p9421
sS'cpp_type'
p9422
S'unsigned int'
p9423
sS'default'
p9424
S'0'
p9425
sS'name'
p9426
S'seed'
p9427
sS'required'
p9428
I00
sS'group_name'
p9429
S'Advanced'
p9430
sa(dp9431
S'description'
p9432
g3
sS'cpp_type'
p9433
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9434
sS'default'
p9435
S'ConstantAux'
p9436
sS'name'
p9437
S'type'
p9438
sS'required'
p9439
I00
sS'group_name'
p9440
Nsa(dp9441
S'description'
p9442
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9443
sS'cpp_type'
p9444
S'bool'
p9445
sS'default'
p9446
S'0'
p9447
sS'name'
p9448
S'use_displaced_mesh'
p9449
sS'required'
p9450
I00
sS'group_name'
p9451
S'Advanced'
p9452
sa(dp9453
S'description'
p9454
S'Some constant value that can be read from the input file\n'
p9455
sS'cpp_type'
p9456
S'double'
p9457
sS'default'
p9458
S'0'
p9459
sS'name'
p9460
S'value'
p9461
sS'required'
p9462
I00
sS'group_name'
p9463
Nsa(dp9464
S'description'
p9465
S'The name of the variable that this object applies to\n'
p9466
sS'cpp_type'
p9467
S'AuxVariableName'
p9468
sS'default'
p9469
g3
sS'name'
p9470
S'variable'
p9471
sS'required'
p9472
I01
sS'group_name'
p9473
NsasS'name'
p9474
S'/Bounds/ConstantAux'
p9475
sa(dp9476
S'description'
p9477
g3
sS'subblocks'
p9478
NsS'parameters'
p9479
(lp9480
(dp9481
S'description'
p9482
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9483
sS'cpp_type'
p9484
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9485
sS'default'
p9486
g3
sS'name'
p9487
S'block'
p9488
sS'required'
p9489
I00
sS'group_name'
p9490
Nsa(dp9491
S'description'
p9492
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9493
sS'cpp_type'
p9494
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9495
sS'default'
p9496
g3
sS'name'
p9497
S'boundary'
p9498
sS'required'
p9499
I00
sS'group_name'
p9500
Nsa(dp9501
S'description'
p9502
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9503
sS'cpp_type'
p9504
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p9505
sS'default'
p9506
g3
sS'name'
p9507
S'control_tags'
p9508
sS'required'
p9509
I00
sS'group_name'
p9510
S'Advanced'
p9511
sa(dp9512
S'description'
p9513
S'The variable that is being debugged.\n'
p9514
sS'cpp_type'
p9515
S'NonlinearVariableName'
p9516
sS'default'
p9517
g3
sS'name'
p9518
S'debug_variable'
p9519
sS'required'
p9520
I01
sS'group_name'
p9521
Nsa(dp9522
S'description'
p9523
S'Set the enabled status of the MooseObject.\n'
p9524
sS'cpp_type'
p9525
S'bool'
p9526
sS'default'
p9527
S'1'
p9528
sS'name'
p9529
S'enable'
p9530
sS'required'
p9531
I00
sS'group_name'
p9532
S'Advanced'
p9533
sa(dp9534
S'name'
p9535
S'execute_on'
p9536
sS'cpp_type'
p9537
S'MultiMooseEnum'
p9538
sS'default'
p9539
S'LINEAR'
p9540
sS'description'
p9541
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9542
sS'required'
p9543
I00
sS'options'
p9544
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9545
sS'group_name'
p9546
Nsa(dp9547
S'description'
p9548
S'The seed for the master random number generator\n'
p9549
sS'cpp_type'
p9550
S'unsigned int'
p9551
sS'default'
p9552
S'0'
p9553
sS'name'
p9554
S'seed'
p9555
sS'required'
p9556
I00
sS'group_name'
p9557
S'Advanced'
p9558
sa(dp9559
S'description'
p9560
g3
sS'cpp_type'
p9561
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9562
sS'default'
p9563
S'DebugResidualAux'
p9564
sS'name'
p9565
S'type'
p9566
sS'required'
p9567
I00
sS'group_name'
p9568
Nsa(dp9569
S'description'
p9570
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9571
sS'cpp_type'
p9572
S'bool'
p9573
sS'default'
p9574
S'0'
p9575
sS'name'
p9576
S'use_displaced_mesh'
p9577
sS'required'
p9578
I00
sS'group_name'
p9579
S'Advanced'
p9580
sa(dp9581
S'description'
p9582
S'The name of the variable that this object applies to\n'
p9583
sS'cpp_type'
p9584
S'AuxVariableName'
p9585
sS'default'
p9586
g3
sS'name'
p9587
S'variable'
p9588
sS'required'
p9589
I01
sS'group_name'
p9590
NsasS'name'
p9591
S'/Bounds/DebugResidualAux'
p9592
sa(dp9593
S'description'
p9594
g3
sS'subblocks'
p9595
NsS'parameters'
p9596
(lp9597
(dp9598
S'description'
p9599
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9600
sS'cpp_type'
p9601
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9602
sS'default'
p9603
g3
sS'name'
p9604
S'block'
p9605
sS'required'
p9606
I00
sS'group_name'
p9607
Nsa(dp9608
S'description'
p9609
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9610
sS'cpp_type'
p9611
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9612
sS'default'
p9613
g3
sS'name'
p9614
S'boundary'
p9615
sS'required'
p9616
I00
sS'group_name'
p9617
Nsa(dp9618
S'description'
p9619
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9620
sS'cpp_type'
p9621
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p9622
sS'default'
p9623
g3
sS'name'
p9624
S'control_tags'
p9625
sS'required'
p9626
I00
sS'group_name'
p9627
S'Advanced'
p9628
sa(dp9629
S'description'
p9630
S'The variable to compute the norm of.\n'
p9631
sS'cpp_type'
p9632
S'std::vector<VariableName>'
p9633
sS'default'
p9634
g3
sS'name'
p9635
S'coupled_variable'
p9636
sS'required'
p9637
I01
sS'group_name'
p9638
Nsa(dp9639
S'description'
p9640
S'Set the enabled status of the MooseObject.\n'
p9641
sS'cpp_type'
p9642
S'bool'
p9643
sS'default'
p9644
S'1'
p9645
sS'name'
p9646
S'enable'
p9647
sS'required'
p9648
I00
sS'group_name'
p9649
S'Advanced'
p9650
sa(dp9651
S'name'
p9652
S'execute_on'
p9653
sS'cpp_type'
p9654
S'MultiMooseEnum'
p9655
sS'default'
p9656
S'LINEAR'
p9657
sS'description'
p9658
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9659
sS'required'
p9660
I00
sS'options'
p9661
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9662
sS'group_name'
p9663
Nsa(dp9664
S'description'
p9665
S'Function representing the exact solution\n'
p9666
sS'cpp_type'
p9667
S'FunctionName'
p9668
sS'default'
p9669
g3
sS'name'
p9670
S'function'
p9671
sS'required'
p9672
I01
sS'group_name'
p9673
Nsa(dp9674
S'description'
p9675
S'The exponent used in the norm.\n'
p9676
sS'cpp_type'
p9677
S'double'
p9678
sS'default'
p9679
S'2'
p9680
sS'name'
p9681
S'p'
p9682
sS'required'
p9683
I00
sS'group_name'
p9684
Nsa(dp9685
S'description'
p9686
S'The seed for the master random number generator\n'
p9687
sS'cpp_type'
p9688
S'unsigned int'
p9689
sS'default'
p9690
S'0'
p9691
sS'name'
p9692
S'seed'
p9693
sS'required'
p9694
I00
sS'group_name'
p9695
S'Advanced'
p9696
sa(dp9697
S'description'
p9698
g3
sS'cpp_type'
p9699
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9700
sS'default'
p9701
S'ElementH1ErrorFunctionAux'
p9702
sS'name'
p9703
S'type'
p9704
sS'required'
p9705
I00
sS'group_name'
p9706
Nsa(dp9707
S'description'
p9708
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9709
sS'cpp_type'
p9710
S'bool'
p9711
sS'default'
p9712
S'0'
p9713
sS'name'
p9714
S'use_displaced_mesh'
p9715
sS'required'
p9716
I00
sS'group_name'
p9717
S'Advanced'
p9718
sa(dp9719
S'description'
p9720
S'The name of the variable that this object applies to\n'
p9721
sS'cpp_type'
p9722
S'AuxVariableName'
p9723
sS'default'
p9724
g3
sS'name'
p9725
S'variable'
p9726
sS'required'
p9727
I01
sS'group_name'
p9728
NsasS'name'
p9729
S'/Bounds/ElementH1ErrorFunctionAux'
p9730
sa(dp9731
S'description'
p9732
g3
sS'subblocks'
p9733
NsS'parameters'
p9734
(lp9735
(dp9736
S'description'
p9737
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9738
sS'cpp_type'
p9739
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9740
sS'default'
p9741
g3
sS'name'
p9742
S'block'
p9743
sS'required'
p9744
I00
sS'group_name'
p9745
Nsa(dp9746
S'description'
p9747
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9748
sS'cpp_type'
p9749
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9750
sS'default'
p9751
g3
sS'name'
p9752
S'boundary'
p9753
sS'required'
p9754
I00
sS'group_name'
p9755
Nsa(dp9756
S'description'
p9757
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9758
sS'cpp_type'
p9759
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p9760
sS'default'
p9761
g3
sS'name'
p9762
S'control_tags'
p9763
sS'required'
p9764
I00
sS'group_name'
p9765
S'Advanced'
p9766
sa(dp9767
S'description'
p9768
S'The variable to compute the norm of.\n'
p9769
sS'cpp_type'
p9770
S'std::vector<VariableName>'
p9771
sS'default'
p9772
g3
sS'name'
p9773
S'coupled_variable'
p9774
sS'required'
p9775
I01
sS'group_name'
p9776
Nsa(dp9777
S'description'
p9778
S'Set the enabled status of the MooseObject.\n'
p9779
sS'cpp_type'
p9780
S'bool'
p9781
sS'default'
p9782
S'1'
p9783
sS'name'
p9784
S'enable'
p9785
sS'required'
p9786
I00
sS'group_name'
p9787
S'Advanced'
p9788
sa(dp9789
S'name'
p9790
S'execute_on'
p9791
sS'cpp_type'
p9792
S'MultiMooseEnum'
p9793
sS'default'
p9794
S'LINEAR'
p9795
sS'description'
p9796
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9797
sS'required'
p9798
I00
sS'options'
p9799
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9800
sS'group_name'
p9801
Nsa(dp9802
S'description'
p9803
S'Function representing the exact solution\n'
p9804
sS'cpp_type'
p9805
S'FunctionName'
p9806
sS'default'
p9807
g3
sS'name'
p9808
S'function'
p9809
sS'required'
p9810
I01
sS'group_name'
p9811
Nsa(dp9812
S'description'
p9813
S'The exponent used in the norm.\n'
p9814
sS'cpp_type'
p9815
S'double'
p9816
sS'default'
p9817
S'2'
p9818
sS'name'
p9819
S'p'
p9820
sS'required'
p9821
I00
sS'group_name'
p9822
Nsa(dp9823
S'description'
p9824
S'The seed for the master random number generator\n'
p9825
sS'cpp_type'
p9826
S'unsigned int'
p9827
sS'default'
p9828
S'0'
p9829
sS'name'
p9830
S'seed'
p9831
sS'required'
p9832
I00
sS'group_name'
p9833
S'Advanced'
p9834
sa(dp9835
S'description'
p9836
g3
sS'cpp_type'
p9837
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9838
sS'default'
p9839
S'ElementL2ErrorFunctionAux'
p9840
sS'name'
p9841
S'type'
p9842
sS'required'
p9843
I00
sS'group_name'
p9844
Nsa(dp9845
S'description'
p9846
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9847
sS'cpp_type'
p9848
S'bool'
p9849
sS'default'
p9850
S'0'
p9851
sS'name'
p9852
S'use_displaced_mesh'
p9853
sS'required'
p9854
I00
sS'group_name'
p9855
S'Advanced'
p9856
sa(dp9857
S'description'
p9858
S'The name of the variable that this object applies to\n'
p9859
sS'cpp_type'
p9860
S'AuxVariableName'
p9861
sS'default'
p9862
g3
sS'name'
p9863
S'variable'
p9864
sS'required'
p9865
I01
sS'group_name'
p9866
NsasS'name'
p9867
S'/Bounds/ElementL2ErrorFunctionAux'
p9868
sa(dp9869
S'description'
p9870
S'Compute the element size using Elem::hmin() or Elem::hmax() from libMesh.\n'
p9871
sS'subblocks'
p9872
NsS'parameters'
p9873
(lp9874
(dp9875
S'description'
p9876
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9877
sS'cpp_type'
p9878
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9879
sS'default'
p9880
g3
sS'name'
p9881
S'block'
p9882
sS'required'
p9883
I00
sS'group_name'
p9884
Nsa(dp9885
S'description'
p9886
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9887
sS'cpp_type'
p9888
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9889
sS'default'
p9890
g3
sS'name'
p9891
S'boundary'
p9892
sS'required'
p9893
I00
sS'group_name'
p9894
Nsa(dp9895
S'description'
p9896
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9897
sS'cpp_type'
p9898
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p9899
sS'default'
p9900
g3
sS'name'
p9901
S'control_tags'
p9902
sS'required'
p9903
I00
sS'group_name'
p9904
S'Advanced'
p9905
sa(dp9906
S'description'
p9907
S'Set the enabled status of the MooseObject.\n'
p9908
sS'cpp_type'
p9909
S'bool'
p9910
sS'default'
p9911
S'1'
p9912
sS'name'
p9913
S'enable'
p9914
sS'required'
p9915
I00
sS'group_name'
p9916
S'Advanced'
p9917
sa(dp9918
S'name'
p9919
S'execute_on'
p9920
sS'cpp_type'
p9921
S'MultiMooseEnum'
p9922
sS'default'
p9923
S'LINEAR'
p9924
sS'description'
p9925
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9926
sS'required'
p9927
I00
sS'options'
p9928
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9929
sS'group_name'
p9930
Nsa(dp9931
S'name'
p9932
S'method'
p9933
sS'cpp_type'
p9934
S'MooseEnum'
p9935
sS'default'
p9936
g3
sS'description'
p9937
S"The size calculation to perform ('min' or 'max').\n"
p9938
sS'required'
p9939
I01
sS'options'
p9940
S'min max'
p9941
sS'group_name'
p9942
Nsa(dp9943
S'description'
p9944
S'The seed for the master random number generator\n'
p9945
sS'cpp_type'
p9946
S'unsigned int'
p9947
sS'default'
p9948
S'0'
p9949
sS'name'
p9950
S'seed'
p9951
sS'required'
p9952
I00
sS'group_name'
p9953
S'Advanced'
p9954
sa(dp9955
S'description'
p9956
g3
sS'cpp_type'
p9957
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9958
sS'default'
p9959
S'ElementLengthAux'
p9960
sS'name'
p9961
S'type'
p9962
sS'required'
p9963
I00
sS'group_name'
p9964
Nsa(dp9965
S'description'
p9966
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9967
sS'cpp_type'
p9968
S'bool'
p9969
sS'default'
p9970
S'0'
p9971
sS'name'
p9972
S'use_displaced_mesh'
p9973
sS'required'
p9974
I00
sS'group_name'
p9975
S'Advanced'
p9976
sa(dp9977
S'description'
p9978
S'The name of the variable that this object applies to\n'
p9979
sS'cpp_type'
p9980
S'AuxVariableName'
p9981
sS'default'
p9982
g3
sS'name'
p9983
S'variable'
p9984
sS'required'
p9985
I01
sS'group_name'
p9986
NsasS'name'
p9987
S'/Bounds/ElementLengthAux'
p9988
sa(dp9989
S'description'
p9990
g3
sS'subblocks'
p9991
NsS'parameters'
p9992
(lp9993
(dp9994
S'description'
p9995
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9996
sS'cpp_type'
p9997
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9998
sS'default'
p9999
g3
sS'name'
p10000
S'block'
p10001
sS'required'
p10002
I00
sS'group_name'
p10003
Nsa(dp10004
S'description'
p10005
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10006
sS'cpp_type'
p10007
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10008
sS'default'
p10009
g3
sS'name'
p10010
S'boundary'
p10011
sS'required'
p10012
I00
sS'group_name'
p10013
Nsa(dp10014
S'description'
p10015
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10016
sS'cpp_type'
p10017
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p10018
sS'default'
p10019
g3
sS'name'
p10020
S'control_tags'
p10021
sS'required'
p10022
I00
sS'group_name'
p10023
S'Advanced'
p10024
sa(dp10025
S'description'
p10026
S'The variable to compute the norm of.\n'
p10027
sS'cpp_type'
p10028
S'std::vector<VariableName>'
p10029
sS'default'
p10030
g3
sS'name'
p10031
S'coupled_variable'
p10032
sS'required'
p10033
I01
sS'group_name'
p10034
Nsa(dp10035
S'description'
p10036
S'Set the enabled status of the MooseObject.\n'
p10037
sS'cpp_type'
p10038
S'bool'
p10039
sS'default'
p10040
S'1'
p10041
sS'name'
p10042
S'enable'
p10043
sS'required'
p10044
I00
sS'group_name'
p10045
S'Advanced'
p10046
sa(dp10047
S'name'
p10048
S'execute_on'
p10049
sS'cpp_type'
p10050
S'MultiMooseEnum'
p10051
sS'default'
p10052
S'LINEAR'
p10053
sS'description'
p10054
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10055
sS'required'
p10056
I00
sS'options'
p10057
S'none initial linear nonlinear timestep_end timestep_begin custom'
p10058
sS'group_name'
p10059
Nsa(dp10060
S'description'
p10061
S'The exponent used in the norm.\n'
p10062
sS'cpp_type'
p10063
S'double'
p10064
sS'default'
p10065
S'2'
p10066
sS'name'
p10067
S'p'
p10068
sS'required'
p10069
I00
sS'group_name'
p10070
Nsa(dp10071
S'description'
p10072
S'The seed for the master random number generator\n'
p10073
sS'cpp_type'
p10074
S'unsigned int'
p10075
sS'default'
p10076
S'0'
p10077
sS'name'
p10078
S'seed'
p10079
sS'required'
p10080
I00
sS'group_name'
p10081
S'Advanced'
p10082
sa(dp10083
S'description'
p10084
g3
sS'cpp_type'
p10085
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10086
sS'default'
p10087
S'ElementLpNormAux'
p10088
sS'name'
p10089
S'type'
p10090
sS'required'
p10091
I00
sS'group_name'
p10092
Nsa(dp10093
S'description'
p10094
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10095
sS'cpp_type'
p10096
S'bool'
p10097
sS'default'
p10098
S'0'
p10099
sS'name'
p10100
S'use_displaced_mesh'
p10101
sS'required'
p10102
I00
sS'group_name'
p10103
S'Advanced'
p10104
sa(dp10105
S'description'
p10106
S'The name of the variable that this object applies to\n'
p10107
sS'cpp_type'
p10108
S'AuxVariableName'
p10109
sS'default'
p10110
g3
sS'name'
p10111
S'variable'
p10112
sS'required'
p10113
I01
sS'group_name'
p10114
NsasS'name'
p10115
S'/Bounds/ElementLpNormAux'
p10116
sa(dp10117
S'description'
p10118
g3
sS'subblocks'
p10119
NsS'parameters'
p10120
(lp10121
(dp10122
S'description'
p10123
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10124
sS'cpp_type'
p10125
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10126
sS'default'
p10127
g3
sS'name'
p10128
S'block'
p10129
sS'required'
p10130
I00
sS'group_name'
p10131
Nsa(dp10132
S'description'
p10133
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10134
sS'cpp_type'
p10135
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10136
sS'default'
p10137
g3
sS'name'
p10138
S'boundary'
p10139
sS'required'
p10140
I00
sS'group_name'
p10141
Nsa(dp10142
S'description'
p10143
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10144
sS'cpp_type'
p10145
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p10146
sS'default'
p10147
g3
sS'name'
p10148
S'control_tags'
p10149
sS'required'
p10150
I00
sS'group_name'
p10151
S'Advanced'
p10152
sa(dp10153
S'description'
p10154
S'Set the enabled status of the MooseObject.\n'
p10155
sS'cpp_type'
p10156
S'bool'
p10157
sS'default'
p10158
S'1'
p10159
sS'name'
p10160
S'enable'
p10161
sS'required'
p10162
I00
sS'group_name'
p10163
S'Advanced'
p10164
sa(dp10165
S'name'
p10166
S'execute_on'
p10167
sS'cpp_type'
p10168
S'MultiMooseEnum'
p10169
sS'default'
p10170
S'LINEAR'
p10171
sS'description'
p10172
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10173
sS'required'
p10174
I00
sS'options'
p10175
S'none initial linear nonlinear timestep_end timestep_begin custom'
p10176
sS'group_name'
p10177
Nsa(dp10178
S'description'
p10179
S'The function to use as the value\n'
p10180
sS'cpp_type'
p10181
S'FunctionName'
p10182
sS'default'
p10183
g3
sS'name'
p10184
S'function'
p10185
sS'required'
p10186
I01
sS'group_name'
p10187
Nsa(dp10188
S'description'
p10189
S'The seed for the master random number generator\n'
p10190
sS'cpp_type'
p10191
S'unsigned int'
p10192
sS'default'
p10193
S'0'
p10194
sS'name'
p10195
S'seed'
p10196
sS'required'
p10197
I00
sS'group_name'
p10198
S'Advanced'
p10199
sa(dp10200
S'description'
p10201
g3
sS'cpp_type'
p10202
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10203
sS'default'
p10204
S'FunctionAux'
p10205
sS'name'
p10206
S'type'
p10207
sS'required'
p10208
I00
sS'group_name'
p10209
Nsa(dp10210
S'description'
p10211
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10212
sS'cpp_type'
p10213
S'bool'
p10214
sS'default'
p10215
S'0'
p10216
sS'name'
p10217
S'use_displaced_mesh'
p10218
sS'required'
p10219
I00
sS'group_name'
p10220
S'Advanced'
p10221
sa(dp10222
S'description'
p10223
S'The name of the variable that this object applies to\n'
p10224
sS'cpp_type'
p10225
S'AuxVariableName'
p10226
sS'default'
p10227
g3
sS'name'
p10228
S'variable'
p10229
sS'required'
p10230
I01
sS'group_name'
p10231
NsasS'name'
p10232
S'/Bounds/FunctionAux'
p10233
sa(dp10234
S'description'
p10235
g3
sS'subblocks'
p10236
NsS'parameters'
p10237
(lp10238
(dp10239
S'description'
p10240
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10241
sS'cpp_type'
p10242
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10243
sS'default'
p10244
g3
sS'name'
p10245
S'block'
p10246
sS'required'
p10247
I00
sS'group_name'
p10248
Nsa(dp10249
S'description'
p10250
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10251
sS'cpp_type'
p10252
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10253
sS'default'
p10254
g3
sS'name'
p10255
S'boundary'
p10256
sS'required'
p10257
I00
sS'group_name'
p10258
Nsa(dp10259
S'description'
p10260
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10261
sS'cpp_type'
p10262
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p10263
sS'default'
p10264
g3
sS'name'
p10265
S'control_tags'
p10266
sS'required'
p10267
I00
sS'group_name'
p10268
S'Advanced'
p10269
sa(dp10270
S'description'
p10271
S'Set the enabled status of the MooseObject.\n'
p10272
sS'cpp_type'
p10273
S'bool'
p10274
sS'default'
p10275
S'1'
p10276
sS'name'
p10277
S'enable'
p10278
sS'required'
p10279
I00
sS'group_name'
p10280
S'Advanced'
p10281
sa(dp10282
S'name'
p10283
S'execute_on'
p10284
sS'cpp_type'
p10285
S'MultiMooseEnum'
p10286
sS'default'
p10287
S'LINEAR'
p10288
sS'description'
p10289
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10290
sS'required'
p10291
I00
sS'options'
p10292
S'none initial linear nonlinear timestep_end timestep_begin custom'
p10293
sS'group_name'
p10294
Nsa(dp10295
S'description'
p10296
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p10297
sS'cpp_type'
p10298
S'double'
p10299
sS'default'
p10300
g3
sS'name'
p10301
S'normal_smoothing_distance'
p10302
sS'required'
p10303
I00
sS'group_name'
p10304
Nsa(dp10305
S'description'
p10306
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p10307
sS'cpp_type'
p10308
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10309
sS'default'
p10310
g3
sS'name'
p10311
S'normal_smoothing_method'
p10312
sS'required'
p10313
I00
sS'group_name'
p10314
Nsa(dp10315
S'name'
p10316
S'order'
p10317
sS'cpp_type'
p10318
S'MooseEnum'
p10319
sS'default'
p10320
S'FIRST'
p10321
sS'description'
p10322
S'The finite element order\n'
p10323
sS'required'
p10324
I00
sS'options'
p10325
S'FIRST SECOND THIRD FOURTH'
p10326
sS'group_name'
p10327
Nsa(dp10328
S'description'
p10329
S'The boundary on the other side of a gap.\n'
p10330
sS'cpp_type'
p10331
S'BoundaryName'
p10332
sS'default'
p10333
g3
sS'name'
p10334
S'paired_boundary'
p10335
sS'required'
p10336
I01
sS'group_name'
p10337
Nsa(dp10338
S'description'
p10339
S'The variable to get the value of.\n'
p10340
sS'cpp_type'
p10341
S'VariableName'
p10342
sS'default'
p10343
g3
sS'name'
p10344
S'paired_variable'
p10345
sS'required'
p10346
I01
sS'group_name'
p10347
Nsa(dp10348
S'description'
p10349
S'The seed for the master random number generator\n'
p10350
sS'cpp_type'
p10351
S'unsigned int'
p10352
sS'default'
p10353
S'0'
p10354
sS'name'
p10355
S'seed'
p10356
sS'required'
p10357
I00
sS'group_name'
p10358
S'Advanced'
p10359
sa(dp10360
S'description'
p10361
S'Tangential distance to extend edges of contact surfaces\n'
p10362
sS'cpp_type'
p10363
S'double'
p10364
sS'default'
p10365
g3
sS'name'
p10366
S'tangential_tolerance'
p10367
sS'required'
p10368
I00
sS'group_name'
p10369
Nsa(dp10370
S'description'
p10371
g3
sS'cpp_type'
p10372
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10373
sS'default'
p10374
S'GapValueAux'
p10375
sS'name'
p10376
S'type'
p10377
sS'required'
p10378
I00
sS'group_name'
p10379
Nsa(dp10380
S'description'
p10381
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10382
sS'cpp_type'
p10383
S'bool'
p10384
sS'default'
p10385
S'1'
p10386
sS'name'
p10387
S'use_displaced_mesh'
p10388
sS'required'
p10389
I00
sS'group_name'
p10390
S'Advanced'
p10391
sa(dp10392
S'description'
p10393
S'The name of the variable that this object applies to\n'
p10394
sS'cpp_type'
p10395
S'AuxVariableName'
p10396
sS'default'
p10397
g3
sS'name'
p10398
S'variable'
p10399
sS'required'
p10400
I01
sS'group_name'
p10401
Nsa(dp10402
S'description'
p10403
S'Whether to output warning messages concerning nodes not being found\n'
p10404
sS'cpp_type'
p10405
S'bool'
p10406
sS'default'
p10407
S'0'
p10408
sS'name'
p10409
S'warnings'
p10410
sS'required'
p10411
I00
sS'group_name'
p10412
NsasS'name'
p10413
S'/Bounds/GapValueAux'
p10414
sa(dp10415
S'description'
p10416
g3
sS'subblocks'
p10417
NsS'parameters'
p10418
(lp10419
(dp10420
S'description'
p10421
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10422
sS'cpp_type'
p10423
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10424
sS'default'
p10425
g3
sS'name'
p10426
S'block'
p10427
sS'required'
p10428
I00
sS'group_name'
p10429
Nsa(dp10430
S'description'
p10431
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10432
sS'cpp_type'
p10433
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10434
sS'default'
p10435
g3
sS'name'
p10436
S'boundary'
p10437
sS'required'
p10438
I00
sS'group_name'
p10439
Nsa(dp10440
S'description'
p10441
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10442
sS'cpp_type'
p10443
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p10444
sS'default'
p10445
g3
sS'name'
p10446
S'control_tags'
p10447
sS'required'
p10448
I00
sS'group_name'
p10449
S'Advanced'
p10450
sa(dp10451
S'description'
p10452
S'Set the enabled status of the MooseObject.\n'
p10453
sS'cpp_type'
p10454
S'bool'
p10455
sS'default'
p10456
S'1'
p10457
sS'name'
p10458
S'enable'
p10459
sS'required'
p10460
I00
sS'group_name'
p10461
S'Advanced'
p10462
sa(dp10463
S'name'
p10464
S'execute_on'
p10465
sS'cpp_type'
p10466
S'MultiMooseEnum'
p10467
sS'default'
p10468
S'LINEAR'
p10469
sS'description'
p10470
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10471
sS'required'
p10472
I00
sS'options'
p10473
S'none initial linear nonlinear timestep_end timestep_begin custom'
p10474
sS'group_name'
p10475
Nsa(dp10476
S'description'
p10477
S'The factor by which to multiply your material property for visualization\n'
p10478
sS'cpp_type'
p10479
S'double'
p10480
sS'default'
p10481
S'1'
p10482
sS'name'
p10483
S'factor'
p10484
sS'required'
p10485
I00
sS'group_name'
p10486
Nsa(dp10487
S'description'
p10488
S'The offset to add to your material property for visualization\n'
p10489
sS'cpp_type'
p10490
S'double'
p10491
sS'default'
p10492
S'0'
p10493
sS'name'
p10494
S'offset'
p10495
sS'required'
p10496
I00
sS'group_name'
p10497
Nsa(dp10498
S'description'
p10499
S'The scalar material property name\n'
p10500
sS'cpp_type'
p10501
S'MaterialPropertyName'
p10502
sS'default'
p10503
g3
sS'name'
p10504
S'property'
p10505
sS'required'
p10506
I01
sS'group_name'
p10507
Nsa(dp10508
S'description'
p10509
S'The seed for the master random number generator\n'
p10510
sS'cpp_type'
p10511
S'unsigned int'
p10512
sS'default'
p10513
S'0'
p10514
sS'name'
p10515
S'seed'
p10516
sS'required'
p10517
I00
sS'group_name'
p10518
S'Advanced'
p10519
sa(dp10520
S'description'
p10521
g3
sS'cpp_type'
p10522
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10523
sS'default'
p10524
S'MaterialRealAux'
p10525
sS'name'
p10526
S'type'
p10527
sS'required'
p10528
I00
sS'group_name'
p10529
Nsa(dp10530
S'description'
p10531
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10532
sS'cpp_type'
p10533
S'bool'
p10534
sS'default'
p10535
S'0'
p10536
sS'name'
p10537
S'use_displaced_mesh'
p10538
sS'required'
p10539
I00
sS'group_name'
p10540
S'Advanced'
p10541
sa(dp10542
S'description'
p10543
S'The name of the variable that this object applies to\n'
p10544
sS'cpp_type'
p10545
S'AuxVariableName'
p10546
sS'default'
p10547
g3
sS'name'
p10548
S'variable'
p10549
sS'required'
p10550
I01
sS'group_name'
p10551
NsasS'name'
p10552
S'/Bounds/MaterialRealAux'
p10553
sa(dp10554
S'description'
p10555
g3
sS'subblocks'
p10556
NsS'parameters'
p10557
(lp10558
(dp10559
S'description'
p10560
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10561
sS'cpp_type'
p10562
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10563
sS'default'
p10564
g3
sS'name'
p10565
S'block'
p10566
sS'required'
p10567
I00
sS'group_name'
p10568
Nsa(dp10569
S'description'
p10570
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10571
sS'cpp_type'
p10572
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10573
sS'default'
p10574
g3
sS'name'
p10575
S'boundary'
p10576
sS'required'
p10577
I00
sS'group_name'
p10578
Nsa(dp10579
S'description'
p10580
S'The column component to consider for this kernel\n'
p10581
sS'cpp_type'
p10582
S'unsigned int'
p10583
sS'default'
p10584
S'0'
p10585
sS'name'
p10586
S'column'
p10587
sS'required'
p10588
I00
sS'group_name'
p10589
Nsa(dp10590
S'description'
p10591
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10592
sS'cpp_type'
p10593
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p10594
sS'default'
p10595
g3
sS'name'
p10596
S'control_tags'
p10597
sS'required'
p10598
I00
sS'group_name'
p10599
S'Advanced'
p10600
sa(dp10601
S'description'
p10602
S'Set the enabled status of the MooseObject.\n'
p10603
sS'cpp_type'
p10604
S'bool'
p10605
sS'default'
p10606
S'1'
p10607
sS'name'
p10608
S'enable'
p10609
sS'required'
p10610
I00
sS'group_name'
p10611
S'Advanced'
p10612
sa(dp10613
S'name'
p10614
S'execute_on'
p10615
sS'cpp_type'
p10616
S'MultiMooseEnum'
p10617
sS'default'
p10618
S'LINEAR'
p10619
sS'description'
p10620
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10621
sS'required'
p10622
I00
sS'options'
p10623
S'none initial linear nonlinear timestep_end timestep_begin custom'
p10624
sS'group_name'
p10625
Nsa(dp10626
S'description'
p10627
S'The factor by which to multiply your material property for visualization\n'
p10628
sS'cpp_type'
p10629
S'double'
p10630
sS'default'
p10631
S'1'
p10632
sS'name'
p10633
S'factor'
p10634
sS'required'
p10635
I00
sS'group_name'
p10636
Nsa(dp10637
S'description'
p10638
S'The offset to add to your material property for visualization\n'
p10639
sS'cpp_type'
p10640
S'double'
p10641
sS'default'
p10642
S'0'
p10643
sS'name'
p10644
S'offset'
p10645
sS'required'
p10646
I00
sS'group_name'
p10647
Nsa(dp10648
S'description'
p10649
S'The scalar material property name\n'
p10650
sS'cpp_type'
p10651
S'MaterialPropertyName'
p10652
sS'default'
p10653
g3
sS'name'
p10654
S'property'
p10655
sS'required'
p10656
I01
sS'group_name'
p10657
Nsa(dp10658
S'description'
p10659
S'The row component to consider for this kernel\n'
p10660
sS'cpp_type'
p10661
S'unsigned int'
p10662
sS'default'
p10663
S'0'
p10664
sS'name'
p10665
S'row'
p10666
sS'required'
p10667
I00
sS'group_name'
p10668
Nsa(dp10669
S'description'
p10670
S'The seed for the master random number generator\n'
p10671
sS'cpp_type'
p10672
S'unsigned int'
p10673
sS'default'
p10674
S'0'
p10675
sS'name'
p10676
S'seed'
p10677
sS'required'
p10678
I00
sS'group_name'
p10679
S'Advanced'
p10680
sa(dp10681
S'description'
p10682
g3
sS'cpp_type'
p10683
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10684
sS'default'
p10685
S'MaterialRealDenseMatrixAux'
p10686
sS'name'
p10687
S'type'
p10688
sS'required'
p10689
I00
sS'group_name'
p10690
Nsa(dp10691
S'description'
p10692
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10693
sS'cpp_type'
p10694
S'bool'
p10695
sS'default'
p10696
S'0'
p10697
sS'name'
p10698
S'use_displaced_mesh'
p10699
sS'required'
p10700
I00
sS'group_name'
p10701
S'Advanced'
p10702
sa(dp10703
S'description'
p10704
S'The name of the variable that this object applies to\n'
p10705
sS'cpp_type'
p10706
S'AuxVariableName'
p10707
sS'default'
p10708
g3
sS'name'
p10709
S'variable'
p10710
sS'required'
p10711
I01
sS'group_name'
p10712
NsasS'name'
p10713
S'/Bounds/MaterialRealDenseMatrixAux'
p10714
sa(dp10715
S'description'
p10716
g3
sS'subblocks'
p10717
NsS'parameters'
p10718
(lp10719
(dp10720
S'description'
p10721
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10722
sS'cpp_type'
p10723
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10724
sS'default'
p10725
g3
sS'name'
p10726
S'block'
p10727
sS'required'
p10728
I00
sS'group_name'
p10729
Nsa(dp10730
S'description'
p10731
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10732
sS'cpp_type'
p10733
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10734
sS'default'
p10735
g3
sS'name'
p10736
S'boundary'
p10737
sS'required'
p10738
I00
sS'group_name'
p10739
Nsa(dp10740
S'description'
p10741
S'The column component to consider for this kernel\n'
p10742
sS'cpp_type'
p10743
S'unsigned int'
p10744
sS'default'
p10745
S'0'
p10746
sS'name'
p10747
S'column'
p10748
sS'required'
p10749
I00
sS'group_name'
p10750
Nsa(dp10751
S'description'
p10752
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10753
sS'cpp_type'
p10754
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p10755
sS'default'
p10756
g3
sS'name'
p10757
S'control_tags'
p10758
sS'required'
p10759
I00
sS'group_name'
p10760
S'Advanced'
p10761
sa(dp10762
S'description'
p10763
S'Set the enabled status of the MooseObject.\n'
p10764
sS'cpp_type'
p10765
S'bool'
p10766
sS'default'
p10767
S'1'
p10768
sS'name'
p10769
S'enable'
p10770
sS'required'
p10771
I00
sS'group_name'
p10772
S'Advanced'
p10773
sa(dp10774
S'name'
p10775
S'execute_on'
p10776
sS'cpp_type'
p10777
S'MultiMooseEnum'
p10778
sS'default'
p10779
S'LINEAR'
p10780
sS'description'
p10781
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10782
sS'required'
p10783
I00
sS'options'
p10784
S'none initial linear nonlinear timestep_end timestep_begin custom'
p10785
sS'group_name'
p10786
Nsa(dp10787
S'description'
p10788
S'The factor by which to multiply your material property for visualization\n'
p10789
sS'cpp_type'
p10790
S'double'
p10791
sS'default'
p10792
S'1'
p10793
sS'name'
p10794
S'factor'
p10795
sS'required'
p10796
I00
sS'group_name'
p10797
Nsa(dp10798
S'description'
p10799
S'The offset to add to your material property for visualization\n'
p10800
sS'cpp_type'
p10801
S'double'
p10802
sS'default'
p10803
S'0'
p10804
sS'name'
p10805
S'offset'
p10806
sS'required'
p10807
I00
sS'group_name'
p10808
Nsa(dp10809
S'description'
p10810
S'The scalar material property name\n'
p10811
sS'cpp_type'
p10812
S'MaterialPropertyName'
p10813
sS'default'
p10814
g3
sS'name'
p10815
S'property'
p10816
sS'required'
p10817
I01
sS'group_name'
p10818
Nsa(dp10819
S'description'
p10820
S'The row component to consider for this kernel\n'
p10821
sS'cpp_type'
p10822
S'unsigned int'
p10823
sS'default'
p10824
S'0'
p10825
sS'name'
p10826
S'row'
p10827
sS'required'
p10828
I00
sS'group_name'
p10829
Nsa(dp10830
S'description'
p10831
S'The seed for the master random number generator\n'
p10832
sS'cpp_type'
p10833
S'unsigned int'
p10834
sS'default'
p10835
S'0'
p10836
sS'name'
p10837
S'seed'
p10838
sS'required'
p10839
I00
sS'group_name'
p10840
S'Advanced'
p10841
sa(dp10842
S'description'
p10843
g3
sS'cpp_type'
p10844
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10845
sS'default'
p10846
S'MaterialRealTensorValueAux'
p10847
sS'name'
p10848
S'type'
p10849
sS'required'
p10850
I00
sS'group_name'
p10851
Nsa(dp10852
S'description'
p10853
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10854
sS'cpp_type'
p10855
S'bool'
p10856
sS'default'
p10857
S'0'
p10858
sS'name'
p10859
S'use_displaced_mesh'
p10860
sS'required'
p10861
I00
sS'group_name'
p10862
S'Advanced'
p10863
sa(dp10864
S'description'
p10865
S'The name of the variable that this object applies to\n'
p10866
sS'cpp_type'
p10867
S'AuxVariableName'
p10868
sS'default'
p10869
g3
sS'name'
p10870
S'variable'
p10871
sS'required'
p10872
I01
sS'group_name'
p10873
NsasS'name'
p10874
S'/Bounds/MaterialRealTensorValueAux'
p10875
sa(dp10876
S'description'
p10877
g3
sS'subblocks'
p10878
NsS'parameters'
p10879
(lp10880
(dp10881
S'description'
p10882
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10883
sS'cpp_type'
p10884
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10885
sS'default'
p10886
g3
sS'name'
p10887
S'block'
p10888
sS'required'
p10889
I00
sS'group_name'
p10890
Nsa(dp10891
S'description'
p10892
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10893
sS'cpp_type'
p10894
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10895
sS'default'
p10896
g3
sS'name'
p10897
S'boundary'
p10898
sS'required'
p10899
I00
sS'group_name'
p10900
Nsa(dp10901
S'description'
p10902
S'The vector component to consider for this kernel\n'
p10903
sS'cpp_type'
p10904
S'unsigned int'
p10905
sS'default'
p10906
S'0'
p10907
sS'name'
p10908
S'component'
p10909
sS'required'
p10910
I00
sS'group_name'
p10911
Nsa(dp10912
S'description'
p10913
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10914
sS'cpp_type'
p10915
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p10916
sS'default'
p10917
g3
sS'name'
p10918
S'control_tags'
p10919
sS'required'
p10920
I00
sS'group_name'
p10921
S'Advanced'
p10922
sa(dp10923
S'description'
p10924
S'Set the enabled status of the MooseObject.\n'
p10925
sS'cpp_type'
p10926
S'bool'
p10927
sS'default'
p10928
S'1'
p10929
sS'name'
p10930
S'enable'
p10931
sS'required'
p10932
I00
sS'group_name'
p10933
S'Advanced'
p10934
sa(dp10935
S'name'
p10936
S'execute_on'
p10937
sS'cpp_type'
p10938
S'MultiMooseEnum'
p10939
sS'default'
p10940
S'LINEAR'
p10941
sS'description'
p10942
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10943
sS'required'
p10944
I00
sS'options'
p10945
S'none initial linear nonlinear timestep_end timestep_begin custom'
p10946
sS'group_name'
p10947
Nsa(dp10948
S'description'
p10949
S'The factor by which to multiply your material property for visualization\n'
p10950
sS'cpp_type'
p10951
S'double'
p10952
sS'default'
p10953
S'1'
p10954
sS'name'
p10955
S'factor'
p10956
sS'required'
p10957
I00
sS'group_name'
p10958
Nsa(dp10959
S'description'
p10960
S'The offset to add to your material property for visualization\n'
p10961
sS'cpp_type'
p10962
S'double'
p10963
sS'default'
p10964
S'0'
p10965
sS'name'
p10966
S'offset'
p10967
sS'required'
p10968
I00
sS'group_name'
p10969
Nsa(dp10970
S'description'
p10971
S'The scalar material property name\n'
p10972
sS'cpp_type'
p10973
S'MaterialPropertyName'
p10974
sS'default'
p10975
g3
sS'name'
p10976
S'property'
p10977
sS'required'
p10978
I01
sS'group_name'
p10979
Nsa(dp10980
S'description'
p10981
S'The seed for the master random number generator\n'
p10982
sS'cpp_type'
p10983
S'unsigned int'
p10984
sS'default'
p10985
S'0'
p10986
sS'name'
p10987
S'seed'
p10988
sS'required'
p10989
I00
sS'group_name'
p10990
S'Advanced'
p10991
sa(dp10992
S'description'
p10993
g3
sS'cpp_type'
p10994
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10995
sS'default'
p10996
S'MaterialRealVectorValueAux'
p10997
sS'name'
p10998
S'type'
p10999
sS'required'
p11000
I00
sS'group_name'
p11001
Nsa(dp11002
S'description'
p11003
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11004
sS'cpp_type'
p11005
S'bool'
p11006
sS'default'
p11007
S'0'
p11008
sS'name'
p11009
S'use_displaced_mesh'
p11010
sS'required'
p11011
I00
sS'group_name'
p11012
S'Advanced'
p11013
sa(dp11014
S'description'
p11015
S'The name of the variable that this object applies to\n'
p11016
sS'cpp_type'
p11017
S'AuxVariableName'
p11018
sS'default'
p11019
g3
sS'name'
p11020
S'variable'
p11021
sS'required'
p11022
I01
sS'group_name'
p11023
NsasS'name'
p11024
S'/Bounds/MaterialRealVectorValueAux'
p11025
sa(dp11026
S'description'
p11027
S'Extracts a component of a material type std::vector<Real> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n'
p11028
sS'subblocks'
p11029
NsS'parameters'
p11030
(lp11031
(dp11032
S'description'
p11033
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11034
sS'cpp_type'
p11035
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11036
sS'default'
p11037
g3
sS'name'
p11038
S'block'
p11039
sS'required'
p11040
I00
sS'group_name'
p11041
Nsa(dp11042
S'description'
p11043
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11044
sS'cpp_type'
p11045
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11046
sS'default'
p11047
g3
sS'name'
p11048
S'boundary'
p11049
sS'required'
p11050
I00
sS'group_name'
p11051
Nsa(dp11052
S'description'
p11053
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11054
sS'cpp_type'
p11055
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11056
sS'default'
p11057
g3
sS'name'
p11058
S'control_tags'
p11059
sS'required'
p11060
I00
sS'group_name'
p11061
S'Advanced'
p11062
sa(dp11063
S'description'
p11064
S'Set the enabled status of the MooseObject.\n'
p11065
sS'cpp_type'
p11066
S'bool'
p11067
sS'default'
p11068
S'1'
p11069
sS'name'
p11070
S'enable'
p11071
sS'required'
p11072
I00
sS'group_name'
p11073
S'Advanced'
p11074
sa(dp11075
S'name'
p11076
S'execute_on'
p11077
sS'cpp_type'
p11078
S'MultiMooseEnum'
p11079
sS'default'
p11080
S'LINEAR'
p11081
sS'description'
p11082
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11083
sS'required'
p11084
I00
sS'options'
p11085
S'none initial linear nonlinear timestep_end timestep_begin custom'
p11086
sS'group_name'
p11087
Nsa(dp11088
S'description'
p11089
S'The factor by which to multiply your material property for visualization\n'
p11090
sS'cpp_type'
p11091
S'double'
p11092
sS'default'
p11093
S'1'
p11094
sS'name'
p11095
S'factor'
p11096
sS'required'
p11097
I00
sS'group_name'
p11098
Nsa(dp11099
S'description'
p11100
S'The index to consider for this kernel\n'
p11101
sS'cpp_type'
p11102
S'unsigned int'
p11103
sS'default'
p11104
S'0'
p11105
sS'name'
p11106
S'index'
p11107
sS'required'
p11108
I00
sS'group_name'
p11109
Nsa(dp11110
S'description'
p11111
S'The offset to add to your material property for visualization\n'
p11112
sS'cpp_type'
p11113
S'double'
p11114
sS'default'
p11115
S'0'
p11116
sS'name'
p11117
S'offset'
p11118
sS'required'
p11119
I00
sS'group_name'
p11120
Nsa(dp11121
S'description'
p11122
S'The scalar material property name\n'
p11123
sS'cpp_type'
p11124
S'MaterialPropertyName'
p11125
sS'default'
p11126
g3
sS'name'
p11127
S'property'
p11128
sS'required'
p11129
I01
sS'group_name'
p11130
Nsa(dp11131
S'description'
p11132
S'The seed for the master random number generator\n'
p11133
sS'cpp_type'
p11134
S'unsigned int'
p11135
sS'default'
p11136
S'0'
p11137
sS'name'
p11138
S'seed'
p11139
sS'required'
p11140
I00
sS'group_name'
p11141
S'Advanced'
p11142
sa(dp11143
S'description'
p11144
S'Evaluate the std::vector<Real> at this quadpoint.  This only needs to be used if you are interested in a particular quadpoint in each element: otherwise do not include this parameter in your input file\n'
p11145
sS'cpp_type'
p11146
S'unsigned int'
p11147
sS'default'
p11148
g3
sS'name'
p11149
S'selected_qp'
p11150
sS'required'
p11151
I00
sS'group_name'
p11152
S'Advanced'
p11153
sa(dp11154
S'description'
p11155
g3
sS'cpp_type'
p11156
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11157
sS'default'
p11158
S'MaterialStdVectorAux'
p11159
sS'name'
p11160
S'type'
p11161
sS'required'
p11162
I00
sS'group_name'
p11163
Nsa(dp11164
S'description'
p11165
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11166
sS'cpp_type'
p11167
S'bool'
p11168
sS'default'
p11169
S'0'
p11170
sS'name'
p11171
S'use_displaced_mesh'
p11172
sS'required'
p11173
I00
sS'group_name'
p11174
S'Advanced'
p11175
sa(dp11176
S'description'
p11177
S'The name of the variable that this object applies to\n'
p11178
sS'cpp_type'
p11179
S'AuxVariableName'
p11180
sS'default'
p11181
g3
sS'name'
p11182
S'variable'
p11183
sS'required'
p11184
I01
sS'group_name'
p11185
NsasS'name'
p11186
S'/Bounds/MaterialStdVectorAux'
p11187
sa(dp11188
S'description'
p11189
S"Extracts a component of a material's std::vector<RealGradient> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n"
p11190
sS'subblocks'
p11191
NsS'parameters'
p11192
(lp11193
(dp11194
S'description'
p11195
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11196
sS'cpp_type'
p11197
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11198
sS'default'
p11199
g3
sS'name'
p11200
S'block'
p11201
sS'required'
p11202
I00
sS'group_name'
p11203
Nsa(dp11204
S'description'
p11205
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11206
sS'cpp_type'
p11207
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11208
sS'default'
p11209
g3
sS'name'
p11210
S'boundary'
p11211
sS'required'
p11212
I00
sS'group_name'
p11213
Nsa(dp11214
S'description'
p11215
S'The gradient component to be extracted for this kernel\n'
p11216
sS'cpp_type'
p11217
S'unsigned int'
p11218
sS'default'
p11219
S'0'
p11220
sS'name'
p11221
S'component'
p11222
sS'required'
p11223
I00
sS'group_name'
p11224
Nsa(dp11225
S'description'
p11226
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11227
sS'cpp_type'
p11228
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11229
sS'default'
p11230
g3
sS'name'
p11231
S'control_tags'
p11232
sS'required'
p11233
I00
sS'group_name'
p11234
S'Advanced'
p11235
sa(dp11236
S'description'
p11237
S'Set the enabled status of the MooseObject.\n'
p11238
sS'cpp_type'
p11239
S'bool'
p11240
sS'default'
p11241
S'1'
p11242
sS'name'
p11243
S'enable'
p11244
sS'required'
p11245
I00
sS'group_name'
p11246
S'Advanced'
p11247
sa(dp11248
S'name'
p11249
S'execute_on'
p11250
sS'cpp_type'
p11251
S'MultiMooseEnum'
p11252
sS'default'
p11253
S'LINEAR'
p11254
sS'description'
p11255
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11256
sS'required'
p11257
I00
sS'options'
p11258
S'none initial linear nonlinear timestep_end timestep_begin custom'
p11259
sS'group_name'
p11260
Nsa(dp11261
S'description'
p11262
S'The factor by which to multiply your material property for visualization\n'
p11263
sS'cpp_type'
p11264
S'double'
p11265
sS'default'
p11266
S'1'
p11267
sS'name'
p11268
S'factor'
p11269
sS'required'
p11270
I00
sS'group_name'
p11271
Nsa(dp11272
S'description'
p11273
S'The index to consider for this kernel\n'
p11274
sS'cpp_type'
p11275
S'unsigned int'
p11276
sS'default'
p11277
S'0'
p11278
sS'name'
p11279
S'index'
p11280
sS'required'
p11281
I00
sS'group_name'
p11282
Nsa(dp11283
S'description'
p11284
S'The offset to add to your material property for visualization\n'
p11285
sS'cpp_type'
p11286
S'double'
p11287
sS'default'
p11288
S'0'
p11289
sS'name'
p11290
S'offset'
p11291
sS'required'
p11292
I00
sS'group_name'
p11293
Nsa(dp11294
S'description'
p11295
S'The scalar material property name\n'
p11296
sS'cpp_type'
p11297
S'MaterialPropertyName'
p11298
sS'default'
p11299
g3
sS'name'
p11300
S'property'
p11301
sS'required'
p11302
I01
sS'group_name'
p11303
Nsa(dp11304
S'description'
p11305
S'The seed for the master random number generator\n'
p11306
sS'cpp_type'
p11307
S'unsigned int'
p11308
sS'default'
p11309
S'0'
p11310
sS'name'
p11311
S'seed'
p11312
sS'required'
p11313
I00
sS'group_name'
p11314
S'Advanced'
p11315
sa(dp11316
S'description'
p11317
g3
sS'cpp_type'
p11318
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11319
sS'default'
p11320
S'MaterialStdVectorRealGradientAux'
p11321
sS'name'
p11322
S'type'
p11323
sS'required'
p11324
I00
sS'group_name'
p11325
Nsa(dp11326
S'description'
p11327
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11328
sS'cpp_type'
p11329
S'bool'
p11330
sS'default'
p11331
S'0'
p11332
sS'name'
p11333
S'use_displaced_mesh'
p11334
sS'required'
p11335
I00
sS'group_name'
p11336
S'Advanced'
p11337
sa(dp11338
S'description'
p11339
S'The name of the variable that this object applies to\n'
p11340
sS'cpp_type'
p11341
S'AuxVariableName'
p11342
sS'default'
p11343
g3
sS'name'
p11344
S'variable'
p11345
sS'required'
p11346
I01
sS'group_name'
p11347
NsasS'name'
p11348
S'/Bounds/MaterialStdVectorRealGradientAux'
p11349
sa(dp11350
S'description'
p11351
g3
sS'subblocks'
p11352
NsS'parameters'
p11353
(lp11354
(dp11355
S'description'
p11356
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11357
sS'cpp_type'
p11358
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11359
sS'default'
p11360
g3
sS'name'
p11361
S'block'
p11362
sS'required'
p11363
I00
sS'group_name'
p11364
Nsa(dp11365
S'description'
p11366
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11367
sS'cpp_type'
p11368
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11369
sS'default'
p11370
g3
sS'name'
p11371
S'boundary'
p11372
sS'required'
p11373
I00
sS'group_name'
p11374
Nsa(dp11375
S'description'
p11376
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11377
sS'cpp_type'
p11378
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11379
sS'default'
p11380
g3
sS'name'
p11381
S'control_tags'
p11382
sS'required'
p11383
I00
sS'group_name'
p11384
S'Advanced'
p11385
sa(dp11386
S'description'
p11387
S'Set the enabled status of the MooseObject.\n'
p11388
sS'cpp_type'
p11389
S'bool'
p11390
sS'default'
p11391
S'1'
p11392
sS'name'
p11393
S'enable'
p11394
sS'required'
p11395
I00
sS'group_name'
p11396
S'Advanced'
p11397
sa(dp11398
S'name'
p11399
S'execute_on'
p11400
sS'cpp_type'
p11401
S'MultiMooseEnum'
p11402
sS'default'
p11403
S'LINEAR'
p11404
sS'description'
p11405
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11406
sS'required'
p11407
I00
sS'options'
p11408
S'none initial linear nonlinear timestep_end timestep_begin custom'
p11409
sS'group_name'
p11410
Nsa(dp11411
S'description'
p11412
S'The boundary to find the distance to.\n'
p11413
sS'cpp_type'
p11414
S'BoundaryName'
p11415
sS'default'
p11416
g3
sS'name'
p11417
S'paired_boundary'
p11418
sS'required'
p11419
I01
sS'group_name'
p11420
Nsa(dp11421
S'description'
p11422
S'The seed for the master random number generator\n'
p11423
sS'cpp_type'
p11424
S'unsigned int'
p11425
sS'default'
p11426
S'0'
p11427
sS'name'
p11428
S'seed'
p11429
sS'required'
p11430
I00
sS'group_name'
p11431
S'Advanced'
p11432
sa(dp11433
S'description'
p11434
g3
sS'cpp_type'
p11435
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11436
sS'default'
p11437
S'NearestNodeDistanceAux'
p11438
sS'name'
p11439
S'type'
p11440
sS'required'
p11441
I00
sS'group_name'
p11442
Nsa(dp11443
S'description'
p11444
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11445
sS'cpp_type'
p11446
S'bool'
p11447
sS'default'
p11448
S'1'
p11449
sS'name'
p11450
S'use_displaced_mesh'
p11451
sS'required'
p11452
I00
sS'group_name'
p11453
S'Advanced'
p11454
sa(dp11455
S'description'
p11456
S'The name of the variable that this object applies to\n'
p11457
sS'cpp_type'
p11458
S'AuxVariableName'
p11459
sS'default'
p11460
g3
sS'name'
p11461
S'variable'
p11462
sS'required'
p11463
I01
sS'group_name'
p11464
NsasS'name'
p11465
S'/Bounds/NearestNodeDistanceAux'
p11466
sa(dp11467
S'description'
p11468
g3
sS'subblocks'
p11469
NsS'parameters'
p11470
(lp11471
(dp11472
S'description'
p11473
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11474
sS'cpp_type'
p11475
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11476
sS'default'
p11477
g3
sS'name'
p11478
S'block'
p11479
sS'required'
p11480
I00
sS'group_name'
p11481
Nsa(dp11482
S'description'
p11483
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11484
sS'cpp_type'
p11485
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11486
sS'default'
p11487
g3
sS'name'
p11488
S'boundary'
p11489
sS'required'
p11490
I00
sS'group_name'
p11491
Nsa(dp11492
S'description'
p11493
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11494
sS'cpp_type'
p11495
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11496
sS'default'
p11497
g3
sS'name'
p11498
S'control_tags'
p11499
sS'required'
p11500
I00
sS'group_name'
p11501
S'Advanced'
p11502
sa(dp11503
S'description'
p11504
S'Set the enabled status of the MooseObject.\n'
p11505
sS'cpp_type'
p11506
S'bool'
p11507
sS'default'
p11508
S'1'
p11509
sS'name'
p11510
S'enable'
p11511
sS'required'
p11512
I00
sS'group_name'
p11513
S'Advanced'
p11514
sa(dp11515
S'name'
p11516
S'execute_on'
p11517
sS'cpp_type'
p11518
S'MultiMooseEnum'
p11519
sS'default'
p11520
S'LINEAR'
p11521
sS'description'
p11522
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11523
sS'required'
p11524
I00
sS'options'
p11525
S'none initial linear nonlinear timestep_end timestep_begin custom'
p11526
sS'group_name'
p11527
Nsa(dp11528
S'description'
p11529
S'The boundary to get the value from.\n'
p11530
sS'cpp_type'
p11531
S'BoundaryName'
p11532
sS'default'
p11533
g3
sS'name'
p11534
S'paired_boundary'
p11535
sS'required'
p11536
I01
sS'group_name'
p11537
Nsa(dp11538
S'description'
p11539
S'The variable to get the value of.\n'
p11540
sS'cpp_type'
p11541
S'std::vector<VariableName>'
p11542
sS'default'
p11543
g3
sS'name'
p11544
S'paired_variable'
p11545
sS'required'
p11546
I01
sS'group_name'
p11547
Nsa(dp11548
S'description'
p11549
S'The seed for the master random number generator\n'
p11550
sS'cpp_type'
p11551
S'unsigned int'
p11552
sS'default'
p11553
S'0'
p11554
sS'name'
p11555
S'seed'
p11556
sS'required'
p11557
I00
sS'group_name'
p11558
S'Advanced'
p11559
sa(dp11560
S'description'
p11561
g3
sS'cpp_type'
p11562
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11563
sS'default'
p11564
S'NearestNodeValueAux'
p11565
sS'name'
p11566
S'type'
p11567
sS'required'
p11568
I00
sS'group_name'
p11569
Nsa(dp11570
S'description'
p11571
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11572
sS'cpp_type'
p11573
S'bool'
p11574
sS'default'
p11575
S'1'
p11576
sS'name'
p11577
S'use_displaced_mesh'
p11578
sS'required'
p11579
I00
sS'group_name'
p11580
S'Advanced'
p11581
sa(dp11582
S'description'
p11583
S'The name of the variable that this object applies to\n'
p11584
sS'cpp_type'
p11585
S'AuxVariableName'
p11586
sS'default'
p11587
g3
sS'name'
p11588
S'variable'
p11589
sS'required'
p11590
I01
sS'group_name'
p11591
NsasS'name'
p11592
S'/Bounds/NearestNodeValueAux'
p11593
sa(dp11594
S'description'
p11595
g3
sS'subblocks'
p11596
NsS'parameters'
p11597
(lp11598
(dp11599
S'description'
p11600
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11601
sS'cpp_type'
p11602
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11603
sS'default'
p11604
g3
sS'name'
p11605
S'block'
p11606
sS'required'
p11607
I00
sS'group_name'
p11608
Nsa(dp11609
S'description'
p11610
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11611
sS'cpp_type'
p11612
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11613
sS'default'
p11614
g3
sS'name'
p11615
S'boundary'
p11616
sS'required'
p11617
I00
sS'group_name'
p11618
Nsa(dp11619
S'description'
p11620
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11621
sS'cpp_type'
p11622
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11623
sS'default'
p11624
g3
sS'name'
p11625
S'control_tags'
p11626
sS'required'
p11627
I00
sS'group_name'
p11628
S'Advanced'
p11629
sa(dp11630
S'description'
p11631
S'Set the enabled status of the MooseObject.\n'
p11632
sS'cpp_type'
p11633
S'bool'
p11634
sS'default'
p11635
S'1'
p11636
sS'name'
p11637
S'enable'
p11638
sS'required'
p11639
I00
sS'group_name'
p11640
S'Advanced'
p11641
sa(dp11642
S'name'
p11643
S'execute_on'
p11644
sS'cpp_type'
p11645
S'MultiMooseEnum'
p11646
sS'default'
p11647
S'LINEAR'
p11648
sS'description'
p11649
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11650
sS'required'
p11651
I00
sS'options'
p11652
S'none initial linear nonlinear timestep_end timestep_begin custom'
p11653
sS'group_name'
p11654
Nsa(dp11655
S'description'
p11656
S'The normalization factor\n'
p11657
sS'cpp_type'
p11658
S'double'
p11659
sS'default'
p11660
S'1'
p11661
sS'name'
p11662
S'normal_factor'
p11663
sS'required'
p11664
I00
sS'group_name'
p11665
Nsa(dp11666
S'description'
p11667
S'The postprocessor on the source\n'
p11668
sS'cpp_type'
p11669
S'PostprocessorName'
p11670
sS'default'
p11671
g3
sS'name'
p11672
S'normalization'
p11673
sS'required'
p11674
I01
sS'group_name'
p11675
Nsa(dp11676
S'description'
p11677
S'The seed for the master random number generator\n'
p11678
sS'cpp_type'
p11679
S'unsigned int'
p11680
sS'default'
p11681
S'0'
p11682
sS'name'
p11683
S'seed'
p11684
sS'required'
p11685
I00
sS'group_name'
p11686
S'Advanced'
p11687
sa(dp11688
S'description'
p11689
S'The variable to be normalized\n'
p11690
sS'cpp_type'
p11691
S'std::vector<VariableName>'
p11692
sS'default'
p11693
g3
sS'name'
p11694
S'source_variable'
p11695
sS'required'
p11696
I01
sS'group_name'
p11697
Nsa(dp11698
S'description'
p11699
g3
sS'cpp_type'
p11700
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11701
sS'default'
p11702
S'NormalizationAux'
p11703
sS'name'
p11704
S'type'
p11705
sS'required'
p11706
I00
sS'group_name'
p11707
Nsa(dp11708
S'description'
p11709
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11710
sS'cpp_type'
p11711
S'bool'
p11712
sS'default'
p11713
S'0'
p11714
sS'name'
p11715
S'use_displaced_mesh'
p11716
sS'required'
p11717
I00
sS'group_name'
p11718
S'Advanced'
p11719
sa(dp11720
S'description'
p11721
S'The name of the variable that this object applies to\n'
p11722
sS'cpp_type'
p11723
S'AuxVariableName'
p11724
sS'default'
p11725
g3
sS'name'
p11726
S'variable'
p11727
sS'required'
p11728
I01
sS'group_name'
p11729
NsasS'name'
p11730
S'/Bounds/NormalizationAux'
p11731
sa(dp11732
S'description'
p11733
S'Parsed function AuxKernel.\n'
p11734
sS'subblocks'
p11735
NsS'parameters'
p11736
(lp11737
(dp11738
S'description'
p11739
S'coupled variables\n'
p11740
sS'cpp_type'
p11741
S'std::vector<VariableName>'
p11742
sS'default'
p11743
g3
sS'name'
p11744
S'args'
p11745
sS'required'
p11746
I00
sS'group_name'
p11747
Nsa(dp11748
S'description'
p11749
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11750
sS'cpp_type'
p11751
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11752
sS'default'
p11753
g3
sS'name'
p11754
S'block'
p11755
sS'required'
p11756
I00
sS'group_name'
p11757
Nsa(dp11758
S'description'
p11759
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11760
sS'cpp_type'
p11761
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11762
sS'default'
p11763
g3
sS'name'
p11764
S'boundary'
p11765
sS'required'
p11766
I00
sS'group_name'
p11767
Nsa(dp11768
S'description'
p11769
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p11770
sS'cpp_type'
p11771
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11772
sS'default'
p11773
g3
sS'name'
p11774
S'constant_expressions'
p11775
sS'required'
p11776
I00
sS'group_name'
p11777
Nsa(dp11778
S'description'
p11779
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p11780
sS'cpp_type'
p11781
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11782
sS'default'
p11783
g3
sS'name'
p11784
S'constant_names'
p11785
sS'required'
p11786
I00
sS'group_name'
p11787
Nsa(dp11788
S'description'
p11789
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11790
sS'cpp_type'
p11791
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11792
sS'default'
p11793
g3
sS'name'
p11794
S'control_tags'
p11795
sS'required'
p11796
I00
sS'group_name'
p11797
S'Advanced'
p11798
sa(dp11799
S'description'
p11800
S'Disable the function parser algebraic optimizer\n'
p11801
sS'cpp_type'
p11802
S'bool'
p11803
sS'default'
p11804
S'0'
p11805
sS'name'
p11806
S'disable_fpoptimizer'
p11807
sS'required'
p11808
I00
sS'group_name'
p11809
S'Advanced'
p11810
sa(dp11811
S'description'
p11812
S'Set the enabled status of the MooseObject.\n'
p11813
sS'cpp_type'
p11814
S'bool'
p11815
sS'default'
p11816
S'1'
p11817
sS'name'
p11818
S'enable'
p11819
sS'required'
p11820
I00
sS'group_name'
p11821
S'Advanced'
p11822
sa(dp11823
S'description'
p11824
S'Enable cacheing of function derivatives for faster startup time\n'
p11825
sS'cpp_type'
p11826
S'bool'
p11827
sS'default'
p11828
S'1'
p11829
sS'name'
p11830
S'enable_ad_cache'
p11831
sS'required'
p11832
I00
sS'group_name'
p11833
S'Advanced'
p11834
sa(dp11835
S'description'
p11836
S'Enable automatic immediate optimization of derivatives\n'
p11837
sS'cpp_type'
p11838
S'bool'
p11839
sS'default'
p11840
S'1'
p11841
sS'name'
p11842
S'enable_auto_optimize'
p11843
sS'required'
p11844
I00
sS'group_name'
p11845
S'Advanced'
p11846
sa(dp11847
S'description'
p11848
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p11849
sS'cpp_type'
p11850
S'bool'
p11851
sS'default'
p11852
S'1'
p11853
sS'name'
p11854
S'enable_jit'
p11855
sS'required'
p11856
I00
sS'group_name'
p11857
S'Advanced'
p11858
sa(dp11859
S'name'
p11860
S'execute_on'
p11861
sS'cpp_type'
p11862
S'MultiMooseEnum'
p11863
sS'default'
p11864
S'LINEAR'
p11865
sS'description'
p11866
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11867
sS'required'
p11868
I00
sS'options'
p11869
S'none initial linear nonlinear timestep_end timestep_begin custom'
p11870
sS'group_name'
p11871
Nsa(dp11872
S'description'
p11873
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p11874
sS'cpp_type'
p11875
S'bool'
p11876
sS'default'
p11877
S'0'
p11878
sS'name'
p11879
S'fail_on_evalerror'
p11880
sS'required'
p11881
I00
sS'group_name'
p11882
S'Advanced'
p11883
sa(dp11884
S'description'
p11885
S'function expression\n'
p11886
sS'cpp_type'
p11887
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11888
sS'default'
p11889
g3
sS'name'
p11890
S'function'
p11891
sS'required'
p11892
I01
sS'group_name'
p11893
Nsa(dp11894
S'description'
p11895
S'The seed for the master random number generator\n'
p11896
sS'cpp_type'
p11897
S'unsigned int'
p11898
sS'default'
p11899
S'0'
p11900
sS'name'
p11901
S'seed'
p11902
sS'required'
p11903
I00
sS'group_name'
p11904
S'Advanced'
p11905
sa(dp11906
S'description'
p11907
g3
sS'cpp_type'
p11908
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11909
sS'default'
p11910
S'ParsedAux'
p11911
sS'name'
p11912
S'type'
p11913
sS'required'
p11914
I00
sS'group_name'
p11915
Nsa(dp11916
S'description'
p11917
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11918
sS'cpp_type'
p11919
S'bool'
p11920
sS'default'
p11921
S'0'
p11922
sS'name'
p11923
S'use_displaced_mesh'
p11924
sS'required'
p11925
I00
sS'group_name'
p11926
S'Advanced'
p11927
sa(dp11928
S'description'
p11929
S'The name of the variable that this object applies to\n'
p11930
sS'cpp_type'
p11931
S'AuxVariableName'
p11932
sS'default'
p11933
g3
sS'name'
p11934
S'variable'
p11935
sS'required'
p11936
I01
sS'group_name'
p11937
NsasS'name'
p11938
S'/Bounds/ParsedAux'
p11939
sa(dp11940
S'description'
p11941
g3
sS'subblocks'
p11942
NsS'parameters'
p11943
(lp11944
(dp11945
S'description'
p11946
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11947
sS'cpp_type'
p11948
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11949
sS'default'
p11950
g3
sS'name'
p11951
S'block'
p11952
sS'required'
p11953
I00
sS'group_name'
p11954
Nsa(dp11955
S'description'
p11956
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11957
sS'cpp_type'
p11958
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11959
sS'default'
p11960
g3
sS'name'
p11961
S'boundary'
p11962
sS'required'
p11963
I00
sS'group_name'
p11964
Nsa(dp11965
S'description'
p11966
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11967
sS'cpp_type'
p11968
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11969
sS'default'
p11970
g3
sS'name'
p11971
S'control_tags'
p11972
sS'required'
p11973
I00
sS'group_name'
p11974
S'Advanced'
p11975
sa(dp11976
S'description'
p11977
S'Set the enabled status of the MooseObject.\n'
p11978
sS'cpp_type'
p11979
S'bool'
p11980
sS'default'
p11981
S'1'
p11982
sS'name'
p11983
S'enable'
p11984
sS'required'
p11985
I00
sS'group_name'
p11986
S'Advanced'
p11987
sa(dp11988
S'name'
p11989
S'execute_on'
p11990
sS'cpp_type'
p11991
S'MultiMooseEnum'
p11992
sS'default'
p11993
S'LINEAR'
p11994
sS'description'
p11995
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11996
sS'required'
p11997
I00
sS'options'
p11998
S'none initial linear nonlinear timestep_end timestep_begin custom'
p11999
sS'group_name'
p12000
Nsa(dp12001
S'description'
p12002
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p12003
sS'cpp_type'
p12004
S'double'
p12005
sS'default'
p12006
g3
sS'name'
p12007
S'normal_smoothing_distance'
p12008
sS'required'
p12009
I00
sS'group_name'
p12010
Nsa(dp12011
S'description'
p12012
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p12013
sS'cpp_type'
p12014
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12015
sS'default'
p12016
g3
sS'name'
p12017
S'normal_smoothing_method'
p12018
sS'required'
p12019
I00
sS'group_name'
p12020
Nsa(dp12021
S'name'
p12022
S'order'
p12023
sS'cpp_type'
p12024
S'MooseEnum'
p12025
sS'default'
p12026
S'FIRST'
p12027
sS'description'
p12028
S'The finite element order\n'
p12029
sS'required'
p12030
I00
sS'options'
p12031
S'FIRST SECOND THIRD FOURTH'
p12032
sS'group_name'
p12033
Nsa(dp12034
S'description'
p12035
S'The boundary to be penetrated\n'
p12036
sS'cpp_type'
p12037
S'BoundaryName'
p12038
sS'default'
p12039
g3
sS'name'
p12040
S'paired_boundary'
p12041
sS'required'
p12042
I01
sS'group_name'
p12043
Nsa(dp12044
S'name'
p12045
S'quantity'
p12046
sS'cpp_type'
p12047
S'MooseEnum'
p12048
sS'default'
p12049
S'distance'
p12050
sS'description'
p12051
S'The quantity to recover from the available penetration information\n'
p12052
sS'required'
p12053
I00
sS'options'
p12054
S'distance tangential_distance normal_x normal_y normal_z closest_point_x closest_point_y closest_point_z element_id side incremental_slip_magnitude incremental_slip_x incremental_slip_y incremental_slip_z accumulated_slip force_x force_y force_z normal_force_magnitude normal_force_x normal_force_y normal_force_z tangential_force_magnitude tangential_force_x tangential_force_y tangential_force_z frictional_energy lagrange_multiplier mechanical_status'
p12055
sS'group_name'
p12056
Nsa(dp12057
S'description'
p12058
S'The seed for the master random number generator\n'
p12059
sS'cpp_type'
p12060
S'unsigned int'
p12061
sS'default'
p12062
S'0'
p12063
sS'name'
p12064
S'seed'
p12065
sS'required'
p12066
I00
sS'group_name'
p12067
S'Advanced'
p12068
sa(dp12069
S'description'
p12070
S'Tangential distance to extend edges of contact surfaces\n'
p12071
sS'cpp_type'
p12072
S'double'
p12073
sS'default'
p12074
g3
sS'name'
p12075
S'tangential_tolerance'
p12076
sS'required'
p12077
I00
sS'group_name'
p12078
Nsa(dp12079
S'description'
p12080
g3
sS'cpp_type'
p12081
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12082
sS'default'
p12083
S'PenetrationAux'
p12084
sS'name'
p12085
S'type'
p12086
sS'required'
p12087
I00
sS'group_name'
p12088
Nsa(dp12089
S'description'
p12090
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12091
sS'cpp_type'
p12092
S'bool'
p12093
sS'default'
p12094
S'1'
p12095
sS'name'
p12096
S'use_displaced_mesh'
p12097
sS'required'
p12098
I00
sS'group_name'
p12099
S'Advanced'
p12100
sa(dp12101
S'description'
p12102
S'The name of the variable that this object applies to\n'
p12103
sS'cpp_type'
p12104
S'AuxVariableName'
p12105
sS'default'
p12106
g3
sS'name'
p12107
S'variable'
p12108
sS'required'
p12109
I01
sS'group_name'
p12110
NsasS'name'
p12111
S'/Bounds/PenetrationAux'
p12112
sa(dp12113
S'description'
p12114
g3
sS'subblocks'
p12115
NsS'parameters'
p12116
(lp12117
(dp12118
S'description'
p12119
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12120
sS'cpp_type'
p12121
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p12122
sS'default'
p12123
g3
sS'name'
p12124
S'block'
p12125
sS'required'
p12126
I00
sS'group_name'
p12127
Nsa(dp12128
S'description'
p12129
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12130
sS'cpp_type'
p12131
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p12132
sS'default'
p12133
g3
sS'name'
p12134
S'boundary'
p12135
sS'required'
p12136
I00
sS'group_name'
p12137
Nsa(dp12138
S'description'
p12139
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12140
sS'cpp_type'
p12141
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12142
sS'default'
p12143
g3
sS'name'
p12144
S'control_tags'
p12145
sS'required'
p12146
I00
sS'group_name'
p12147
S'Advanced'
p12148
sa(dp12149
S'description'
p12150
S'Set the enabled status of the MooseObject.\n'
p12151
sS'cpp_type'
p12152
S'bool'
p12153
sS'default'
p12154
S'1'
p12155
sS'name'
p12156
S'enable'
p12157
sS'required'
p12158
I00
sS'group_name'
p12159
S'Advanced'
p12160
sa(dp12161
S'name'
p12162
S'execute_on'
p12163
sS'cpp_type'
p12164
S'MultiMooseEnum'
p12165
sS'default'
p12166
S'LINEAR'
p12167
sS'description'
p12168
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p12169
sS'required'
p12170
I00
sS'options'
p12171
S'none initial linear nonlinear timestep_end timestep_begin custom'
p12172
sS'group_name'
p12173
Nsa(dp12174
S'description'
p12175
S'The seed for the master random number generator\n'
p12176
sS'cpp_type'
p12177
S'unsigned int'
p12178
sS'default'
p12179
S'0'
p12180
sS'name'
p12181
S'seed'
p12182
sS'required'
p12183
I00
sS'group_name'
p12184
S'Advanced'
p12185
sa(dp12186
S'description'
p12187
g3
sS'cpp_type'
p12188
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12189
sS'default'
p12190
S'ProcessorIDAux'
p12191
sS'name'
p12192
S'type'
p12193
sS'required'
p12194
I00
sS'group_name'
p12195
Nsa(dp12196
S'description'
p12197
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12198
sS'cpp_type'
p12199
S'bool'
p12200
sS'default'
p12201
S'0'
p12202
sS'name'
p12203
S'use_displaced_mesh'
p12204
sS'required'
p12205
I00
sS'group_name'
p12206
S'Advanced'
p12207
sa(dp12208
S'description'
p12209
S'The name of the variable that this object applies to\n'
p12210
sS'cpp_type'
p12211
S'AuxVariableName'
p12212
sS'default'
p12213
g3
sS'name'
p12214
S'variable'
p12215
sS'required'
p12216
I01
sS'group_name'
p12217
NsasS'name'
p12218
S'/Bounds/ProcessorIDAux'
p12219
sa(dp12220
S'description'
p12221
g3
sS'subblocks'
p12222
NsS'parameters'
p12223
(lp12224
(dp12225
S'description'
p12226
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12227
sS'cpp_type'
p12228
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p12229
sS'default'
p12230
g3
sS'name'
p12231
S'block'
p12232
sS'required'
p12233
I00
sS'group_name'
p12234
Nsa(dp12235
S'description'
p12236
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12237
sS'cpp_type'
p12238
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p12239
sS'default'
p12240
g3
sS'name'
p12241
S'boundary'
p12242
sS'required'
p12243
I00
sS'group_name'
p12244
Nsa(dp12245
S'description'
p12246
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12247
sS'cpp_type'
p12248
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12249
sS'default'
p12250
g3
sS'name'
p12251
S'control_tags'
p12252
sS'required'
p12253
I00
sS'group_name'
p12254
S'Advanced'
p12255
sa(dp12256
S'description'
p12257
S'The downstairs of the quotient variable\n'
p12258
sS'cpp_type'
p12259
S'std::vector<VariableName>'
p12260
sS'default'
p12261
g3
sS'name'
p12262
S'denominator'
p12263
sS'required'
p12264
I00
sS'group_name'
p12265
Nsa(dp12266
S'description'
p12267
S'Set the enabled status of the MooseObject.\n'
p12268
sS'cpp_type'
p12269
S'bool'
p12270
sS'default'
p12271
S'1'
p12272
sS'name'
p12273
S'enable'
p12274
sS'required'
p12275
I00
sS'group_name'
p12276
S'Advanced'
p12277
sa(dp12278
S'name'
p12279
S'execute_on'
p12280
sS'cpp_type'
p12281
S'MultiMooseEnum'
p12282
sS'default'
p12283
S'LINEAR'
p12284
sS'description'
p12285
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p12286
sS'required'
p12287
I00
sS'options'
p12288
S'none initial linear nonlinear timestep_end timestep_begin custom'
p12289
sS'group_name'
p12290
Nsa(dp12291
S'description'
p12292
S'The upstairs of the quotient variable\n'
p12293
sS'cpp_type'
p12294
S'std::vector<VariableName>'
p12295
sS'default'
p12296
g3
sS'name'
p12297
S'numerator'
p12298
sS'required'
p12299
I00
sS'group_name'
p12300
Nsa(dp12301
S'description'
p12302
S'The seed for the master random number generator\n'
p12303
sS'cpp_type'
p12304
S'unsigned int'
p12305
sS'default'
p12306
S'0'
p12307
sS'name'
p12308
S'seed'
p12309
sS'required'
p12310
I00
sS'group_name'
p12311
S'Advanced'
p12312
sa(dp12313
S'description'
p12314
g3
sS'cpp_type'
p12315
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12316
sS'default'
p12317
S'QuotientAux'
p12318
sS'name'
p12319
S'type'
p12320
sS'required'
p12321
I00
sS'group_name'
p12322
Nsa(dp12323
S'description'
p12324
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12325
sS'cpp_type'
p12326
S'bool'
p12327
sS'default'
p12328
S'0'
p12329
sS'name'
p12330
S'use_displaced_mesh'
p12331
sS'required'
p12332
I00
sS'group_name'
p12333
S'Advanced'
p12334
sa(dp12335
S'description'
p12336
S'The name of the variable that this object applies to\n'
p12337
sS'cpp_type'
p12338
S'AuxVariableName'
p12339
sS'default'
p12340
g3
sS'name'
p12341
S'variable'
p12342
sS'required'
p12343
I01
sS'group_name'
p12344
NsasS'name'
p12345
S'/Bounds/QuotientAux'
p12346
sa(dp12347
S'description'
p12348
g3
sS'subblocks'
p12349
NsS'parameters'
p12350
(lp12351
(dp12352
S'description'
p12353
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12354
sS'cpp_type'
p12355
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p12356
sS'default'
p12357
g3
sS'name'
p12358
S'block'
p12359
sS'required'
p12360
I00
sS'group_name'
p12361
Nsa(dp12362
S'description'
p12363
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12364
sS'cpp_type'
p12365
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p12366
sS'default'
p12367
g3
sS'name'
p12368
S'boundary'
p12369
sS'required'
p12370
I00
sS'group_name'
p12371
Nsa(dp12372
S'description'
p12373
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12374
sS'cpp_type'
p12375
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12376
sS'default'
p12377
g3
sS'name'
p12378
S'control_tags'
p12379
sS'required'
p12380
I00
sS'group_name'
p12381
S'Advanced'
p12382
sa(dp12383
S'description'
p12384
S'Set the enabled status of the MooseObject.\n'
p12385
sS'cpp_type'
p12386
S'bool'
p12387
sS'default'
p12388
S'1'
p12389
sS'name'
p12390
S'enable'
p12391
sS'required'
p12392
I00
sS'group_name'
p12393
S'Advanced'
p12394
sa(dp12395
S'name'
p12396
S'execute_on'
p12397
sS'cpp_type'
p12398
S'MultiMooseEnum'
p12399
sS'default'
p12400
S'LINEAR'
p12401
sS'description'
p12402
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p12403
sS'required'
p12404
I00
sS'options'
p12405
S'none initial linear nonlinear timestep_end timestep_begin custom'
p12406
sS'group_name'
p12407
Nsa(dp12408
S'description'
p12409
S'The seed for the master random number generator\n'
p12410
sS'cpp_type'
p12411
S'unsigned int'
p12412
sS'default'
p12413
S'0'
p12414
sS'name'
p12415
S'seed'
p12416
sS'required'
p12417
I00
sS'group_name'
p12418
S'Advanced'
p12419
sa(dp12420
S'description'
p12421
g3
sS'cpp_type'
p12422
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12423
sS'default'
p12424
S'SelfAux'
p12425
sS'name'
p12426
S'type'
p12427
sS'required'
p12428
I00
sS'group_name'
p12429
Nsa(dp12430
S'description'
p12431
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12432
sS'cpp_type'
p12433
S'bool'
p12434
sS'default'
p12435
S'0'
p12436
sS'name'
p12437
S'use_displaced_mesh'
p12438
sS'required'
p12439
I00
sS'group_name'
p12440
S'Advanced'
p12441
sa(dp12442
S'description'
p12443
S'The name of the variable that this object applies to\n'
p12444
sS'cpp_type'
p12445
S'AuxVariableName'
p12446
sS'default'
p12447
g3
sS'name'
p12448
S'variable'
p12449
sS'required'
p12450
I01
sS'group_name'
p12451
NsasS'name'
p12452
S'/Bounds/SelfAux'
p12453
sa(dp12454
S'description'
p12455
g3
sS'subblocks'
p12456
NsS'parameters'
p12457
(lp12458
(dp12459
S'description'
p12460
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p12461
sS'cpp_type'
p12462
S'double'
p12463
sS'default'
p12464
S'0'
p12465
sS'name'
p12466
S'add_factor'
p12467
sS'required'
p12468
I00
sS'group_name'
p12469
Nsa(dp12470
S'description'
p12471
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12472
sS'cpp_type'
p12473
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p12474
sS'default'
p12475
g3
sS'name'
p12476
S'block'
p12477
sS'required'
p12478
I00
sS'group_name'
p12479
Nsa(dp12480
S'description'
p12481
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12482
sS'cpp_type'
p12483
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p12484
sS'default'
p12485
g3
sS'name'
p12486
S'boundary'
p12487
sS'required'
p12488
I00
sS'group_name'
p12489
Nsa(dp12490
S'description'
p12491
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12492
sS'cpp_type'
p12493
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12494
sS'default'
p12495
g3
sS'name'
p12496
S'control_tags'
p12497
sS'required'
p12498
I00
sS'group_name'
p12499
S'Advanced'
p12500
sa(dp12501
S'description'
p12502
S'If true the meshes must be the same and then the values are simply copied over.\n'
p12503
sS'cpp_type'
p12504
S'bool'
p12505
sS'default'
p12506
S'0'
p12507
sS'name'
p12508
S'direct'
p12509
sS'required'
p12510
I00
sS'group_name'
p12511
Nsa(dp12512
S'description'
p12513
S'Set the enabled status of the MooseObject.\n'
p12514
sS'cpp_type'
p12515
S'bool'
p12516
sS'default'
p12517
S'1'
p12518
sS'name'
p12519
S'enable'
p12520
sS'required'
p12521
I00
sS'group_name'
p12522
S'Advanced'
p12523
sa(dp12524
S'name'
p12525
S'execute_on'
p12526
sS'cpp_type'
p12527
S'MultiMooseEnum'
p12528
sS'default'
p12529
S'LINEAR'
p12530
sS'description'
p12531
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p12532
sS'required'
p12533
I00
sS'options'
p12534
S'none initial linear nonlinear timestep_end timestep_begin custom'
p12535
sS'group_name'
p12536
Nsa(dp12537
S'description'
p12538
S'The name of the variable to extract from the file\n'
p12539
sS'cpp_type'
p12540
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12541
sS'default'
p12542
g3
sS'name'
p12543
S'from_variable'
p12544
sS'required'
p12545
I00
sS'group_name'
p12546
Nsa(dp12547
S'description'
p12548
S"Scale factor (a)  to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p12549
sS'cpp_type'
p12550
S'double'
p12551
sS'default'
p12552
S'1'
p12553
sS'name'
p12554
S'scale_factor'
p12555
sS'required'
p12556
I00
sS'group_name'
p12557
Nsa(dp12558
S'description'
p12559
S'The seed for the master random number generator\n'
p12560
sS'cpp_type'
p12561
S'unsigned int'
p12562
sS'default'
p12563
S'0'
p12564
sS'name'
p12565
S'seed'
p12566
sS'required'
p12567
I00
sS'group_name'
p12568
S'Advanced'
p12569
sa(dp12570
S'description'
p12571
S'The name of the SolutionUserObject\n'
p12572
sS'cpp_type'
p12573
S'UserObjectName'
p12574
sS'default'
p12575
g3
sS'name'
p12576
S'solution'
p12577
sS'required'
p12578
I01
sS'group_name'
p12579
Nsa(dp12580
S'description'
p12581
g3
sS'cpp_type'
p12582
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12583
sS'default'
p12584
S'SolutionAux'
p12585
sS'name'
p12586
S'type'
p12587
sS'required'
p12588
I00
sS'group_name'
p12589
Nsa(dp12590
S'description'
p12591
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12592
sS'cpp_type'
p12593
S'bool'
p12594
sS'default'
p12595
S'0'
p12596
sS'name'
p12597
S'use_displaced_mesh'
p12598
sS'required'
p12599
I00
sS'group_name'
p12600
S'Advanced'
p12601
sa(dp12602
S'description'
p12603
S'The name of the variable that this object applies to\n'
p12604
sS'cpp_type'
p12605
S'AuxVariableName'
p12606
sS'default'
p12607
g3
sS'name'
p12608
S'variable'
p12609
sS'required'
p12610
I01
sS'group_name'
p12611
NsasS'name'
p12612
S'/Bounds/SolutionAux'
p12613
sa(dp12614
S'description'
p12615
g3
sS'subblocks'
p12616
NsS'parameters'
p12617
(lp12618
(dp12619
S'description'
p12620
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12621
sS'cpp_type'
p12622
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p12623
sS'default'
p12624
g3
sS'name'
p12625
S'block'
p12626
sS'required'
p12627
I00
sS'group_name'
p12628
Nsa(dp12629
S'description'
p12630
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12631
sS'cpp_type'
p12632
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p12633
sS'default'
p12634
g3
sS'name'
p12635
S'boundary'
p12636
sS'required'
p12637
I00
sS'group_name'
p12638
Nsa(dp12639
S'description'
p12640
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12641
sS'cpp_type'
p12642
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12643
sS'default'
p12644
g3
sS'name'
p12645
S'control_tags'
p12646
sS'required'
p12647
I00
sS'group_name'
p12648
S'Advanced'
p12649
sa(dp12650
S'description'
p12651
S'Set the enabled status of the MooseObject.\n'
p12652
sS'cpp_type'
p12653
S'bool'
p12654
sS'default'
p12655
S'1'
p12656
sS'name'
p12657
S'enable'
p12658
sS'required'
p12659
I00
sS'group_name'
p12660
S'Advanced'
p12661
sa(dp12662
S'name'
p12663
S'execute_on'
p12664
sS'cpp_type'
p12665
S'MultiMooseEnum'
p12666
sS'default'
p12667
S'LINEAR'
p12668
sS'description'
p12669
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p12670
sS'required'
p12671
I00
sS'options'
p12672
S'none initial linear nonlinear timestep_end timestep_begin custom'
p12673
sS'group_name'
p12674
Nsa(dp12675
S'description'
p12676
S'The seed for the master random number generator\n'
p12677
sS'cpp_type'
p12678
S'unsigned int'
p12679
sS'default'
p12680
S'0'
p12681
sS'name'
p12682
S'seed'
p12683
sS'required'
p12684
I00
sS'group_name'
p12685
S'Advanced'
p12686
sa(dp12687
S'description'
p12688
g3
sS'cpp_type'
p12689
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12690
sS'default'
p12691
S'SpatialUserObjectAux'
p12692
sS'name'
p12693
S'type'
p12694
sS'required'
p12695
I00
sS'group_name'
p12696
Nsa(dp12697
S'description'
p12698
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12699
sS'cpp_type'
p12700
S'bool'
p12701
sS'default'
p12702
S'0'
p12703
sS'name'
p12704
S'use_displaced_mesh'
p12705
sS'required'
p12706
I00
sS'group_name'
p12707
S'Advanced'
p12708
sa(dp12709
S'description'
p12710
S'The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n'
p12711
sS'cpp_type'
p12712
S'UserObjectName'
p12713
sS'default'
p12714
g3
sS'name'
p12715
S'user_object'
p12716
sS'required'
p12717
I01
sS'group_name'
p12718
Nsa(dp12719
S'description'
p12720
S'The name of the variable that this object applies to\n'
p12721
sS'cpp_type'
p12722
S'AuxVariableName'
p12723
sS'default'
p12724
g3
sS'name'
p12725
S'variable'
p12726
sS'required'
p12727
I01
sS'group_name'
p12728
NsasS'name'
p12729
S'/Bounds/SpatialUserObjectAux'
p12730
sa(dp12731
S'description'
p12732
g3
sS'subblocks'
p12733
NsS'parameters'
p12734
(lp12735
(dp12736
S'description'
p12737
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12738
sS'cpp_type'
p12739
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p12740
sS'default'
p12741
g3
sS'name'
p12742
S'block'
p12743
sS'required'
p12744
I00
sS'group_name'
p12745
Nsa(dp12746
S'description'
p12747
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12748
sS'cpp_type'
p12749
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p12750
sS'default'
p12751
g3
sS'name'
p12752
S'boundary'
p12753
sS'required'
p12754
I00
sS'group_name'
p12755
Nsa(dp12756
S'name'
p12757
S'component'
p12758
sS'cpp_type'
p12759
S'MooseEnum'
p12760
sS'default'
p12761
g3
sS'description'
p12762
S'The gradient component to compute\n'
p12763
sS'required'
p12764
I00
sS'options'
p12765
S'x y z'
p12766
sS'group_name'
p12767
Nsa(dp12768
S'description'
p12769
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12770
sS'cpp_type'
p12771
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12772
sS'default'
p12773
g3
sS'name'
p12774
S'control_tags'
p12775
sS'required'
p12776
I00
sS'group_name'
p12777
S'Advanced'
p12778
sa(dp12779
S'description'
p12780
S'Set the enabled status of the MooseObject.\n'
p12781
sS'cpp_type'
p12782
S'bool'
p12783
sS'default'
p12784
S'1'
p12785
sS'name'
p12786
S'enable'
p12787
sS'required'
p12788
I00
sS'group_name'
p12789
S'Advanced'
p12790
sa(dp12791
S'name'
p12792
S'execute_on'
p12793
sS'cpp_type'
p12794
S'MultiMooseEnum'
p12795
sS'default'
p12796
S'LINEAR'
p12797
sS'description'
p12798
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p12799
sS'required'
p12800
I00
sS'options'
p12801
S'none initial linear nonlinear timestep_end timestep_begin custom'
p12802
sS'group_name'
p12803
Nsa(dp12804
S'description'
p12805
S'The variable from which to compute the gradient component\n'
p12806
sS'cpp_type'
p12807
S'std::vector<VariableName>'
p12808
sS'default'
p12809
g3
sS'name'
p12810
S'gradient_variable'
p12811
sS'required'
p12812
I01
sS'group_name'
p12813
Nsa(dp12814
S'description'
p12815
S'The seed for the master random number generator\n'
p12816
sS'cpp_type'
p12817
S'unsigned int'
p12818
sS'default'
p12819
S'0'
p12820
sS'name'
p12821
S'seed'
p12822
sS'required'
p12823
I00
sS'group_name'
p12824
S'Advanced'
p12825
sa(dp12826
S'description'
p12827
g3
sS'cpp_type'
p12828
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12829
sS'default'
p12830
S'VariableGradientComponent'
p12831
sS'name'
p12832
S'type'
p12833
sS'required'
p12834
I00
sS'group_name'
p12835
Nsa(dp12836
S'description'
p12837
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12838
sS'cpp_type'
p12839
S'bool'
p12840
sS'default'
p12841
S'0'
p12842
sS'name'
p12843
S'use_displaced_mesh'
p12844
sS'required'
p12845
I00
sS'group_name'
p12846
S'Advanced'
p12847
sa(dp12848
S'description'
p12849
S'The name of the variable that this object applies to\n'
p12850
sS'cpp_type'
p12851
S'AuxVariableName'
p12852
sS'default'
p12853
g3
sS'name'
p12854
S'variable'
p12855
sS'required'
p12856
I01
sS'group_name'
p12857
NsasS'name'
p12858
S'/Bounds/VariableGradientComponent'
p12859
sa(dp12860
S'description'
p12861
g3
sS'subblocks'
p12862
NsS'parameters'
p12863
(lp12864
(dp12865
S'description'
p12866
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12867
sS'cpp_type'
p12868
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p12869
sS'default'
p12870
g3
sS'name'
p12871
S'block'
p12872
sS'required'
p12873
I00
sS'group_name'
p12874
Nsa(dp12875
S'description'
p12876
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12877
sS'cpp_type'
p12878
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p12879
sS'default'
p12880
g3
sS'name'
p12881
S'boundary'
p12882
sS'required'
p12883
I00
sS'group_name'
p12884
Nsa(dp12885
S'description'
p12886
S'A simple coefficient\n'
p12887
sS'cpp_type'
p12888
S'double'
p12889
sS'default'
p12890
S'1'
p12891
sS'name'
p12892
S'coefficient'
p12893
sS'required'
p12894
I00
sS'group_name'
p12895
Nsa(dp12896
S'description'
p12897
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12898
sS'cpp_type'
p12899
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12900
sS'default'
p12901
g3
sS'name'
p12902
S'control_tags'
p12903
sS'required'
p12904
I00
sS'group_name'
p12905
S'Advanced'
p12906
sa(dp12907
S'description'
p12908
S'Set the enabled status of the MooseObject.\n'
p12909
sS'cpp_type'
p12910
S'bool'
p12911
sS'default'
p12912
S'1'
p12913
sS'name'
p12914
S'enable'
p12915
sS'required'
p12916
I00
sS'group_name'
p12917
S'Advanced'
p12918
sa(dp12919
S'name'
p12920
S'execute_on'
p12921
sS'cpp_type'
p12922
S'MultiMooseEnum'
p12923
sS'default'
p12924
S'LINEAR'
p12925
sS'description'
p12926
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p12927
sS'required'
p12928
I00
sS'options'
p12929
S'none initial linear nonlinear timestep_end timestep_begin custom'
p12930
sS'group_name'
p12931
Nsa(dp12932
S'description'
p12933
S'The order of global truncation error: midpoint=1, trapazoidal=2, Simpson=3\n'
p12934
sS'cpp_type'
p12935
S'unsigned int'
p12936
sS'default'
p12937
S'2'
p12938
sS'name'
p12939
S'order'
p12940
sS'required'
p12941
I00
sS'group_name'
p12942
Nsa(dp12943
S'description'
p12944
S'The seed for the master random number generator\n'
p12945
sS'cpp_type'
p12946
S'unsigned int'
p12947
sS'default'
p12948
S'0'
p12949
sS'name'
p12950
S'seed'
p12951
sS'required'
p12952
I00
sS'group_name'
p12953
S'Advanced'
p12954
sa(dp12955
S'description'
p12956
g3
sS'cpp_type'
p12957
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12958
sS'default'
p12959
S'VariableTimeIntegrationAux'
p12960
sS'name'
p12961
S'type'
p12962
sS'required'
p12963
I00
sS'group_name'
p12964
Nsa(dp12965
S'description'
p12966
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12967
sS'cpp_type'
p12968
S'bool'
p12969
sS'default'
p12970
S'0'
p12971
sS'name'
p12972
S'use_displaced_mesh'
p12973
sS'required'
p12974
I00
sS'group_name'
p12975
S'Advanced'
p12976
sa(dp12977
S'description'
p12978
S'The name of the variable that this object applies to\n'
p12979
sS'cpp_type'
p12980
S'AuxVariableName'
p12981
sS'default'
p12982
g3
sS'name'
p12983
S'variable'
p12984
sS'required'
p12985
I01
sS'group_name'
p12986
Nsa(dp12987
S'description'
p12988
S'The variable to be integrated\n'
p12989
sS'cpp_type'
p12990
S'std::vector<VariableName>'
p12991
sS'default'
p12992
g3
sS'name'
p12993
S'variable_to_integrate'
p12994
sS'required'
p12995
I01
sS'group_name'
p12996
NsasS'name'
p12997
S'/Bounds/VariableTimeIntegrationAux'
p12998
sa(dp12999
S'description'
p13000
g3
sS'subblocks'
p13001
NsS'parameters'
p13002
(lp13003
(dp13004
S'description'
p13005
S'The list of block ids (SubdomainID) that this object will be applied\n'
p13006
sS'cpp_type'
p13007
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p13008
sS'default'
p13009
g3
sS'name'
p13010
S'block'
p13011
sS'required'
p13012
I00
sS'group_name'
p13013
Nsa(dp13014
S'description'
p13015
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p13016
sS'cpp_type'
p13017
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p13018
sS'default'
p13019
g3
sS'name'
p13020
S'boundary'
p13021
sS'required'
p13022
I00
sS'group_name'
p13023
Nsa(dp13024
S'description'
p13025
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13026
sS'cpp_type'
p13027
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13028
sS'default'
p13029
g3
sS'name'
p13030
S'control_tags'
p13031
sS'required'
p13032
I00
sS'group_name'
p13033
S'Advanced'
p13034
sa(dp13035
S'description'
p13036
S'Set the enabled status of the MooseObject.\n'
p13037
sS'cpp_type'
p13038
S'bool'
p13039
sS'default'
p13040
S'1'
p13041
sS'name'
p13042
S'enable'
p13043
sS'required'
p13044
I00
sS'group_name'
p13045
S'Advanced'
p13046
sa(dp13047
S'name'
p13048
S'execute_on'
p13049
sS'cpp_type'
p13050
S'MultiMooseEnum'
p13051
sS'default'
p13052
S'LINEAR'
p13053
sS'description'
p13054
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p13055
sS'required'
p13056
I00
sS'options'
p13057
S'none initial linear nonlinear timestep_end timestep_begin custom'
p13058
sS'group_name'
p13059
Nsa(dp13060
S'description'
p13061
S'The seed for the master random number generator\n'
p13062
sS'cpp_type'
p13063
S'unsigned int'
p13064
sS'default'
p13065
S'0'
p13066
sS'name'
p13067
S'seed'
p13068
sS'required'
p13069
I00
sS'group_name'
p13070
S'Advanced'
p13071
sa(dp13072
S'description'
p13073
g3
sS'cpp_type'
p13074
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13075
sS'default'
p13076
S'VectorMagnitudeAux'
p13077
sS'name'
p13078
S'type'
p13079
sS'required'
p13080
I00
sS'group_name'
p13081
Nsa(dp13082
S'description'
p13083
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13084
sS'cpp_type'
p13085
S'bool'
p13086
sS'default'
p13087
S'0'
p13088
sS'name'
p13089
S'use_displaced_mesh'
p13090
sS'required'
p13091
I00
sS'group_name'
p13092
S'Advanced'
p13093
sa(dp13094
S'description'
p13095
S'The name of the variable that this object applies to\n'
p13096
sS'cpp_type'
p13097
S'AuxVariableName'
p13098
sS'default'
p13099
g3
sS'name'
p13100
S'variable'
p13101
sS'required'
p13102
I01
sS'group_name'
p13103
Nsa(dp13104
S'description'
p13105
S'x-component of the vector\n'
p13106
sS'cpp_type'
p13107
S'std::vector<VariableName>'
p13108
sS'default'
p13109
g3
sS'name'
p13110
S'x'
p13111
sS'required'
p13112
I01
sS'group_name'
p13113
Nsa(dp13114
S'description'
p13115
S'y-component of the vector\n'
p13116
sS'cpp_type'
p13117
S'std::vector<VariableName>'
p13118
sS'default'
p13119
g3
sS'name'
p13120
S'y'
p13121
sS'required'
p13122
I00
sS'group_name'
p13123
Nsa(dp13124
S'description'
p13125
S'z-component of the vector\n'
p13126
sS'cpp_type'
p13127
S'std::vector<VariableName>'
p13128
sS'default'
p13129
g3
sS'name'
p13130
S'z'
p13131
sS'required'
p13132
I00
sS'group_name'
p13133
NsasS'name'
p13134
S'/Bounds/VectorMagnitudeAux'
p13135
sasS'parameters'
p13136
NsS'name'
p13137
S'/Bounds'
p13138
sa(dp13139
S'description'
p13140
g3
sS'subblocks'
p13141
(lp13142
(dp13143
S'description'
p13144
g3
sS'subblocks'
p13145
NsS'parameters'
p13146
(lp13147
(dp13148
S'description'
p13149
S'A string representing the Moose Object that will be built by this Action\n'
p13150
sS'cpp_type'
p13151
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13152
sS'default'
p13153
g3
sS'name'
p13154
S'type'
p13155
sS'required'
p13156
I01
sS'group_name'
p13157
NsasS'name'
p13158
S'/Constraints/*'
p13159
sa(dp13160
S'description'
p13161
g3
sS'subblocks'
p13162
NsS'parameters'
p13163
(lp13164
(dp13165
S'description'
p13166
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13167
sS'cpp_type'
p13168
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13169
sS'default'
p13170
g3
sS'name'
p13171
S'control_tags'
p13172
sS'required'
p13173
I00
sS'group_name'
p13174
S'Advanced'
p13175
sa(dp13176
S'description'
p13177
S'Set the enabled status of the MooseObject.\n'
p13178
sS'cpp_type'
p13179
S'bool'
p13180
sS'default'
p13181
S'1'
p13182
sS'name'
p13183
S'enable'
p13184
sS'required'
p13185
I00
sS'group_name'
p13186
S'Advanced'
p13187
sa(dp13188
S'name'
p13189
S'execute_on'
p13190
sS'cpp_type'
p13191
S'MultiMooseEnum'
p13192
sS'default'
p13193
S'LINEAR'
p13194
sS'description'
p13195
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p13196
sS'required'
p13197
I00
sS'options'
p13198
S'none initial linear nonlinear timestep_end timestep_begin custom'
p13199
sS'group_name'
p13200
Nsa(dp13201
S'description'
p13202
S'The boundary ID associated with the master side\n'
p13203
sS'cpp_type'
p13204
S'BoundaryName'
p13205
sS'default'
p13206
g3
sS'name'
p13207
S'master'
p13208
sS'required'
p13209
I01
sS'group_name'
p13210
Nsa(dp13211
S'description'
p13212
S'The variable on the master side of the domain\n'
p13213
sS'cpp_type'
p13214
S'std::vector<VariableName>'
p13215
sS'default'
p13216
g3
sS'name'
p13217
S'master_variable'
p13218
sS'required'
p13219
I01
sS'group_name'
p13220
Nsa(dp13221
S'description'
p13222
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p13223
sS'cpp_type'
p13224
S'double'
p13225
sS'default'
p13226
g3
sS'name'
p13227
S'normal_smoothing_distance'
p13228
sS'required'
p13229
I00
sS'group_name'
p13230
Nsa(dp13231
S'description'
p13232
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p13233
sS'cpp_type'
p13234
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13235
sS'default'
p13236
g3
sS'name'
p13237
S'normal_smoothing_method'
p13238
sS'required'
p13239
I00
sS'group_name'
p13240
Nsa(dp13241
S'name'
p13242
S'order'
p13243
sS'cpp_type'
p13244
S'MooseEnum'
p13245
sS'default'
p13246
S'FIRST'
p13247
sS'description'
p13248
S'The finite element order used for projections\n'
p13249
sS'required'
p13250
I00
sS'options'
p13251
S'FIRST SECOND THIRD FOURTH'
p13252
sS'group_name'
p13253
Nsa(dp13254
S'description'
p13255
S'scaling factor to be applied to constraint equations\n'
p13256
sS'cpp_type'
p13257
S'double'
p13258
sS'default'
p13259
S'1'
p13260
sS'name'
p13261
S'scaling'
p13262
sS'required'
p13263
I00
sS'group_name'
p13264
Nsa(dp13265
S'description'
p13266
S'The boundary ID associated with the slave side\n'
p13267
sS'cpp_type'
p13268
S'BoundaryName'
p13269
sS'default'
p13270
g3
sS'name'
p13271
S'slave'
p13272
sS'required'
p13273
I01
sS'group_name'
p13274
Nsa(dp13275
S'description'
p13276
S'Tangential distance to extend edges of contact surfaces\n'
p13277
sS'cpp_type'
p13278
S'double'
p13279
sS'default'
p13280
g3
sS'name'
p13281
S'tangential_tolerance'
p13282
sS'required'
p13283
I00
sS'group_name'
p13284
Nsa(dp13285
S'description'
p13286
g3
sS'cpp_type'
p13287
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13288
sS'default'
p13289
S'CoupledTiedValueConstraint'
p13290
sS'name'
p13291
S'type'
p13292
sS'required'
p13293
I00
sS'group_name'
p13294
Nsa(dp13295
S'description'
p13296
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13297
sS'cpp_type'
p13298
S'bool'
p13299
sS'default'
p13300
S'1'
p13301
sS'name'
p13302
S'use_displaced_mesh'
p13303
sS'required'
p13304
I00
sS'group_name'
p13305
S'Advanced'
p13306
sa(dp13307
S'description'
p13308
S'The name of the variable that this constraint is applied to.\n'
p13309
sS'cpp_type'
p13310
S'NonlinearVariableName'
p13311
sS'default'
p13312
g3
sS'name'
p13313
S'variable'
p13314
sS'required'
p13315
I01
sS'group_name'
p13316
NsasS'name'
p13317
S'/Constraints/CoupledTiedValueConstraint'
p13318
sa(dp13319
S'description'
p13320
g3
sS'subblocks'
p13321
NsS'parameters'
p13322
(lp13323
(dp13324
S'description'
p13325
S'Gradient component to constrain\n'
p13326
sS'cpp_type'
p13327
S'unsigned int'
p13328
sS'default'
p13329
g3
sS'name'
p13330
S'component'
p13331
sS'required'
p13332
I01
sS'group_name'
p13333
Nsa(dp13334
S'description'
p13335
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13336
sS'cpp_type'
p13337
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13338
sS'default'
p13339
g3
sS'name'
p13340
S'control_tags'
p13341
sS'required'
p13342
I00
sS'group_name'
p13343
S'Advanced'
p13344
sa(dp13345
S'description'
p13346
S'Set the enabled status of the MooseObject.\n'
p13347
sS'cpp_type'
p13348
S'bool'
p13349
sS'default'
p13350
S'1'
p13351
sS'name'
p13352
S'enable'
p13353
sS'required'
p13354
I00
sS'group_name'
p13355
S'Advanced'
p13356
sa(dp13357
S'name'
p13358
S'execute_on'
p13359
sS'cpp_type'
p13360
S'MultiMooseEnum'
p13361
sS'default'
p13362
S'LINEAR'
p13363
sS'description'
p13364
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p13365
sS'required'
p13366
I00
sS'options'
p13367
S'none initial linear nonlinear timestep_end timestep_begin custom'
p13368
sS'group_name'
p13369
Nsa(dp13370
S'description'
p13371
S'The name of the interface.\n'
p13372
sS'cpp_type'
p13373
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13374
sS'default'
p13375
g3
sS'name'
p13376
S'interface'
p13377
sS'required'
p13378
I01
sS'group_name'
p13379
Nsa(dp13380
S'description'
p13381
S'Variable on master surface\n'
p13382
sS'cpp_type'
p13383
S'VariableName'
p13384
sS'default'
p13385
g3
sS'name'
p13386
S'master_variable'
p13387
sS'required'
p13388
I01
sS'group_name'
p13389
Nsa(dp13390
S'description'
p13391
S'Variable on master surface\n'
p13392
sS'cpp_type'
p13393
S'VariableName'
p13394
sS'default'
p13395
g3
sS'name'
p13396
S'slave_variable'
p13397
sS'required'
p13398
I00
sS'group_name'
p13399
Nsa(dp13400
S'description'
p13401
g3
sS'cpp_type'
p13402
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13403
sS'default'
p13404
S'EqualGradientConstraint'
p13405
sS'name'
p13406
S'type'
p13407
sS'required'
p13408
I00
sS'group_name'
p13409
Nsa(dp13410
S'description'
p13411
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13412
sS'cpp_type'
p13413
S'bool'
p13414
sS'default'
p13415
S'0'
p13416
sS'name'
p13417
S'use_displaced_mesh'
p13418
sS'required'
p13419
I00
sS'group_name'
p13420
S'Advanced'
p13421
sa(dp13422
S'description'
p13423
S'The name of the variable that this constraint is applied to.\n'
p13424
sS'cpp_type'
p13425
S'NonlinearVariableName'
p13426
sS'default'
p13427
g3
sS'name'
p13428
S'variable'
p13429
sS'required'
p13430
I01
sS'group_name'
p13431
NsasS'name'
p13432
S'/Constraints/EqualGradientConstraint'
p13433
sa(dp13434
S'description'
p13435
g3
sS'subblocks'
p13436
NsS'parameters'
p13437
(lp13438
(dp13439
S'description'
p13440
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13441
sS'cpp_type'
p13442
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13443
sS'default'
p13444
g3
sS'name'
p13445
S'control_tags'
p13446
sS'required'
p13447
I00
sS'group_name'
p13448
S'Advanced'
p13449
sa(dp13450
S'description'
p13451
S'Set the enabled status of the MooseObject.\n'
p13452
sS'cpp_type'
p13453
S'bool'
p13454
sS'default'
p13455
S'1'
p13456
sS'name'
p13457
S'enable'
p13458
sS'required'
p13459
I00
sS'group_name'
p13460
S'Advanced'
p13461
sa(dp13462
S'name'
p13463
S'execute_on'
p13464
sS'cpp_type'
p13465
S'MultiMooseEnum'
p13466
sS'default'
p13467
S'LINEAR'
p13468
sS'description'
p13469
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p13470
sS'required'
p13471
I00
sS'options'
p13472
S'none initial linear nonlinear timestep_end timestep_begin custom'
p13473
sS'group_name'
p13474
Nsa(dp13475
S'name'
p13476
S'formulation'
p13477
sS'cpp_type'
p13478
S'MooseEnum'
p13479
sS'default'
p13480
S'penalty'
p13481
sS'description'
p13482
S'Formulation used to calculate constraint - penalty or kinematic.\n'
p13483
sS'required'
p13484
I00
sS'options'
p13485
S'penalty kinematic'
p13486
sS'group_name'
p13487
Nsa(dp13488
S'description'
p13489
S'The ID of the master node. If no ID is provided, first node of slave set is chosen.\n'
p13490
sS'cpp_type'
p13491
S'unsigned int'
p13492
sS'default'
p13493
S'4294967295'
p13494
sS'name'
p13495
S'master'
p13496
sS'required'
p13497
I00
sS'group_name'
p13498
Nsa(dp13499
S'description'
p13500
S'The penalty used for the boundary term\n'
p13501
sS'cpp_type'
p13502
S'double'
p13503
sS'default'
p13504
g3
sS'name'
p13505
S'penalty'
p13506
sS'required'
p13507
I01
sS'group_name'
p13508
Nsa(dp13509
S'description'
p13510
S'The boundary ID associated with the slave side\n'
p13511
sS'cpp_type'
p13512
S'BoundaryName'
p13513
sS'default'
p13514
S'NaN'
p13515
sS'name'
p13516
S'slave'
p13517
sS'required'
p13518
I00
sS'group_name'
p13519
Nsa(dp13520
S'description'
p13521
S'The IDs of the slave node\n'
p13522
sS'cpp_type'
p13523
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p13524
sS'default'
p13525
g3
sS'name'
p13526
S'slave_node_ids'
p13527
sS'required'
p13528
I00
sS'group_name'
p13529
Nsa(dp13530
S'description'
p13531
g3
sS'cpp_type'
p13532
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13533
sS'default'
p13534
S'EqualValueBoundaryConstraint'
p13535
sS'name'
p13536
S'type'
p13537
sS'required'
p13538
I00
sS'group_name'
p13539
Nsa(dp13540
S'description'
p13541
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13542
sS'cpp_type'
p13543
S'bool'
p13544
sS'default'
p13545
S'0'
p13546
sS'name'
p13547
S'use_displaced_mesh'
p13548
sS'required'
p13549
I00
sS'group_name'
p13550
S'Advanced'
p13551
sa(dp13552
S'description'
p13553
S'The name of the variable that this constraint is applied to.\n'
p13554
sS'cpp_type'
p13555
S'NonlinearVariableName'
p13556
sS'default'
p13557
g3
sS'name'
p13558
S'variable'
p13559
sS'required'
p13560
I01
sS'group_name'
p13561
NsasS'name'
p13562
S'/Constraints/EqualValueBoundaryConstraint'
p13563
sa(dp13564
S'description'
p13565
g3
sS'subblocks'
p13566
NsS'parameters'
p13567
(lp13568
(dp13569
S'description'
p13570
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13571
sS'cpp_type'
p13572
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13573
sS'default'
p13574
g3
sS'name'
p13575
S'control_tags'
p13576
sS'required'
p13577
I00
sS'group_name'
p13578
S'Advanced'
p13579
sa(dp13580
S'description'
p13581
S'Set the enabled status of the MooseObject.\n'
p13582
sS'cpp_type'
p13583
S'bool'
p13584
sS'default'
p13585
S'1'
p13586
sS'name'
p13587
S'enable'
p13588
sS'required'
p13589
I00
sS'group_name'
p13590
S'Advanced'
p13591
sa(dp13592
S'name'
p13593
S'execute_on'
p13594
sS'cpp_type'
p13595
S'MultiMooseEnum'
p13596
sS'default'
p13597
S'LINEAR'
p13598
sS'description'
p13599
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p13600
sS'required'
p13601
I00
sS'options'
p13602
S'none initial linear nonlinear timestep_end timestep_begin custom'
p13603
sS'group_name'
p13604
Nsa(dp13605
S'description'
p13606
S'The name of the interface.\n'
p13607
sS'cpp_type'
p13608
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13609
sS'default'
p13610
g3
sS'name'
p13611
S'interface'
p13612
sS'required'
p13613
I01
sS'group_name'
p13614
Nsa(dp13615
S'description'
p13616
S'Variable on master surface\n'
p13617
sS'cpp_type'
p13618
S'VariableName'
p13619
sS'default'
p13620
g3
sS'name'
p13621
S'master_variable'
p13622
sS'required'
p13623
I01
sS'group_name'
p13624
Nsa(dp13625
S'description'
p13626
S'Variable on master surface\n'
p13627
sS'cpp_type'
p13628
S'VariableName'
p13629
sS'default'
p13630
g3
sS'name'
p13631
S'slave_variable'
p13632
sS'required'
p13633
I00
sS'group_name'
p13634
Nsa(dp13635
S'description'
p13636
g3
sS'cpp_type'
p13637
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13638
sS'default'
p13639
S'EqualValueConstraint'
p13640
sS'name'
p13641
S'type'
p13642
sS'required'
p13643
I00
sS'group_name'
p13644
Nsa(dp13645
S'description'
p13646
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13647
sS'cpp_type'
p13648
S'bool'
p13649
sS'default'
p13650
S'0'
p13651
sS'name'
p13652
S'use_displaced_mesh'
p13653
sS'required'
p13654
I00
sS'group_name'
p13655
S'Advanced'
p13656
sa(dp13657
S'description'
p13658
S'The name of the variable that this constraint is applied to.\n'
p13659
sS'cpp_type'
p13660
S'NonlinearVariableName'
p13661
sS'default'
p13662
g3
sS'name'
p13663
S'variable'
p13664
sS'required'
p13665
I01
sS'group_name'
p13666
NsasS'name'
p13667
S'/Constraints/EqualValueConstraint'
p13668
sa(dp13669
S'description'
p13670
g3
sS'subblocks'
p13671
NsS'parameters'
p13672
(lp13673
(dp13674
S'description'
p13675
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13676
sS'cpp_type'
p13677
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13678
sS'default'
p13679
g3
sS'name'
p13680
S'control_tags'
p13681
sS'required'
p13682
I00
sS'group_name'
p13683
S'Advanced'
p13684
sa(dp13685
S'description'
p13686
S'Set the enabled status of the MooseObject.\n'
p13687
sS'cpp_type'
p13688
S'bool'
p13689
sS'default'
p13690
S'1'
p13691
sS'name'
p13692
S'enable'
p13693
sS'required'
p13694
I00
sS'group_name'
p13695
S'Advanced'
p13696
sa(dp13697
S'name'
p13698
S'execute_on'
p13699
sS'cpp_type'
p13700
S'MultiMooseEnum'
p13701
sS'default'
p13702
S'LINEAR'
p13703
sS'description'
p13704
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p13705
sS'required'
p13706
I00
sS'options'
p13707
S'none initial linear nonlinear timestep_end timestep_begin custom'
p13708
sS'group_name'
p13709
Nsa(dp13710
S'name'
p13711
S'formulation'
p13712
sS'cpp_type'
p13713
S'MooseEnum'
p13714
sS'default'
p13715
S'penalty'
p13716
sS'description'
p13717
S'Formulation used to calculate constraint - penalty or kinematic.\n'
p13718
sS'required'
p13719
I00
sS'options'
p13720
S'penalty kinematic'
p13721
sS'group_name'
p13722
Nsa(dp13723
S'description'
p13724
S'The master node IDs.\n'
p13725
sS'cpp_type'
p13726
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p13727
sS'default'
p13728
g3
sS'name'
p13729
S'master'
p13730
sS'required'
p13731
I01
sS'group_name'
p13732
Nsa(dp13733
S'description'
p13734
S'The penalty used for the boundary term\n'
p13735
sS'cpp_type'
p13736
S'double'
p13737
sS'default'
p13738
g3
sS'name'
p13739
S'penalty'
p13740
sS'required'
p13741
I01
sS'group_name'
p13742
Nsa(dp13743
S'description'
p13744
S'The list of slave node ids\n'
p13745
sS'cpp_type'
p13746
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p13747
sS'default'
p13748
g3
sS'name'
p13749
S'slave_node_ids'
p13750
sS'required'
p13751
I00
sS'group_name'
p13752
Nsa(dp13753
S'description'
p13754
S'The boundary ID associated with the slave side\n'
p13755
sS'cpp_type'
p13756
S'BoundaryName'
p13757
sS'default'
p13758
S'NaN'
p13759
sS'name'
p13760
S'slave_node_set'
p13761
sS'required'
p13762
I00
sS'group_name'
p13763
Nsa(dp13764
S'description'
p13765
g3
sS'cpp_type'
p13766
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13767
sS'default'
p13768
S'LinearNodalConstraint'
p13769
sS'name'
p13770
S'type'
p13771
sS'required'
p13772
I00
sS'group_name'
p13773
Nsa(dp13774
S'description'
p13775
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13776
sS'cpp_type'
p13777
S'bool'
p13778
sS'default'
p13779
S'0'
p13780
sS'name'
p13781
S'use_displaced_mesh'
p13782
sS'required'
p13783
I00
sS'group_name'
p13784
S'Advanced'
p13785
sa(dp13786
S'description'
p13787
S'The name of the variable that this constraint is applied to.\n'
p13788
sS'cpp_type'
p13789
S'NonlinearVariableName'
p13790
sS'default'
p13791
g3
sS'name'
p13792
S'variable'
p13793
sS'required'
p13794
I01
sS'group_name'
p13795
Nsa(dp13796
S'description'
p13797
S'The weights associated with the master node ids. Must be of the same size as master nodes\n'
p13798
sS'cpp_type'
p13799
S'std::__1::vector<double, std::__1::allocator<double> >'
p13800
sS'default'
p13801
g3
sS'name'
p13802
S'weights'
p13803
sS'required'
p13804
I01
sS'group_name'
p13805
NsasS'name'
p13806
S'/Constraints/LinearNodalConstraint'
p13807
sa(dp13808
S'description'
p13809
g3
sS'subblocks'
p13810
NsS'parameters'
p13811
(lp13812
(dp13813
S'description'
p13814
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13815
sS'cpp_type'
p13816
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13817
sS'default'
p13818
g3
sS'name'
p13819
S'control_tags'
p13820
sS'required'
p13821
I00
sS'group_name'
p13822
S'Advanced'
p13823
sa(dp13824
S'description'
p13825
S'Set the enabled status of the MooseObject.\n'
p13826
sS'cpp_type'
p13827
S'bool'
p13828
sS'default'
p13829
S'1'
p13830
sS'name'
p13831
S'enable'
p13832
sS'required'
p13833
I00
sS'group_name'
p13834
S'Advanced'
p13835
sa(dp13836
S'name'
p13837
S'execute_on'
p13838
sS'cpp_type'
p13839
S'MultiMooseEnum'
p13840
sS'default'
p13841
S'LINEAR'
p13842
sS'description'
p13843
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p13844
sS'required'
p13845
I00
sS'options'
p13846
S'none initial linear nonlinear timestep_end timestep_begin custom'
p13847
sS'group_name'
p13848
Nsa(dp13849
S'description'
p13850
S'The boundary ID associated with the master side\n'
p13851
sS'cpp_type'
p13852
S'BoundaryName'
p13853
sS'default'
p13854
g3
sS'name'
p13855
S'master'
p13856
sS'required'
p13857
I01
sS'group_name'
p13858
Nsa(dp13859
S'description'
p13860
S'The variable on the master side of the domain\n'
p13861
sS'cpp_type'
p13862
S'std::vector<VariableName>'
p13863
sS'default'
p13864
g3
sS'name'
p13865
S'master_variable'
p13866
sS'required'
p13867
I01
sS'group_name'
p13868
Nsa(dp13869
S'description'
p13870
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p13871
sS'cpp_type'
p13872
S'double'
p13873
sS'default'
p13874
g3
sS'name'
p13875
S'normal_smoothing_distance'
p13876
sS'required'
p13877
I00
sS'group_name'
p13878
Nsa(dp13879
S'description'
p13880
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p13881
sS'cpp_type'
p13882
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13883
sS'default'
p13884
g3
sS'name'
p13885
S'normal_smoothing_method'
p13886
sS'required'
p13887
I00
sS'group_name'
p13888
Nsa(dp13889
S'name'
p13890
S'order'
p13891
sS'cpp_type'
p13892
S'MooseEnum'
p13893
sS'default'
p13894
S'FIRST'
p13895
sS'description'
p13896
S'The finite element order used for projections\n'
p13897
sS'required'
p13898
I00
sS'options'
p13899
S'FIRST SECOND THIRD FOURTH'
p13900
sS'group_name'
p13901
Nsa(dp13902
S'description'
p13903
S'scaling factor to be applied to constraint equations\n'
p13904
sS'cpp_type'
p13905
S'double'
p13906
sS'default'
p13907
S'1'
p13908
sS'name'
p13909
S'scaling'
p13910
sS'required'
p13911
I00
sS'group_name'
p13912
Nsa(dp13913
S'description'
p13914
S'The boundary ID associated with the slave side\n'
p13915
sS'cpp_type'
p13916
S'BoundaryName'
p13917
sS'default'
p13918
g3
sS'name'
p13919
S'slave'
p13920
sS'required'
p13921
I01
sS'group_name'
p13922
Nsa(dp13923
S'description'
p13924
S'Tangential distance to extend edges of contact surfaces\n'
p13925
sS'cpp_type'
p13926
S'double'
p13927
sS'default'
p13928
g3
sS'name'
p13929
S'tangential_tolerance'
p13930
sS'required'
p13931
I00
sS'group_name'
p13932
Nsa(dp13933
S'description'
p13934
g3
sS'cpp_type'
p13935
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13936
sS'default'
p13937
S'TiedValueConstraint'
p13938
sS'name'
p13939
S'type'
p13940
sS'required'
p13941
I00
sS'group_name'
p13942
Nsa(dp13943
S'description'
p13944
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13945
sS'cpp_type'
p13946
S'bool'
p13947
sS'default'
p13948
S'1'
p13949
sS'name'
p13950
S'use_displaced_mesh'
p13951
sS'required'
p13952
I00
sS'group_name'
p13953
S'Advanced'
p13954
sa(dp13955
S'description'
p13956
S'The name of the variable that this constraint is applied to.\n'
p13957
sS'cpp_type'
p13958
S'NonlinearVariableName'
p13959
sS'default'
p13960
g3
sS'name'
p13961
S'variable'
p13962
sS'required'
p13963
I01
sS'group_name'
p13964
NsasS'name'
p13965
S'/Constraints/TiedValueConstraint'
p13966
sasS'parameters'
p13967
NsS'name'
p13968
S'/Constraints'
p13969
sa(dp13970
S'description'
p13971
g3
sS'subblocks'
p13972
(lp13973
(dp13974
S'description'
p13975
g3
sS'subblocks'
p13976
NsS'parameters'
p13977
(lp13978
(dp13979
S'description'
p13980
S'A string representing the Moose Object that will be built by this Action\n'
p13981
sS'cpp_type'
p13982
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13983
sS'default'
p13984
g3
sS'name'
p13985
S'type'
p13986
sS'required'
p13987
I01
sS'group_name'
p13988
NsasS'name'
p13989
S'/Controls/*'
p13990
sa(dp13991
S'description'
p13992
g3
sS'subblocks'
p13993
NsS'parameters'
p13994
(lp13995
(dp13996
S'description'
p13997
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13998
sS'cpp_type'
p13999
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14000
sS'default'
p14001
g3
sS'name'
p14002
S'control_tags'
p14003
sS'required'
p14004
I00
sS'group_name'
p14005
S'Advanced'
p14006
sa(dp14007
S'description'
p14008
S'Set the enabled status of the MooseObject.\n'
p14009
sS'cpp_type'
p14010
S'bool'
p14011
sS'default'
p14012
S'1'
p14013
sS'name'
p14014
S'enable'
p14015
sS'required'
p14016
I00
sS'group_name'
p14017
S'Advanced'
p14018
sa(dp14019
S'name'
p14020
S'execute_on'
p14021
sS'cpp_type'
p14022
S'MultiMooseEnum'
p14023
sS'default'
p14024
S'INITIAL TIMESTEP_END'
p14025
sS'description'
p14026
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p14027
sS'required'
p14028
I00
sS'options'
p14029
S'none initial linear nonlinear timestep_end timestep_begin custom subdomain'
p14030
sS'group_name'
p14031
Nsa(dp14032
S'description'
p14033
S'The function to use for controlling the specified parameter.\n'
p14034
sS'cpp_type'
p14035
S'FunctionName'
p14036
sS'default'
p14037
g3
sS'name'
p14038
S'function'
p14039
sS'required'
p14040
I01
sS'group_name'
p14041
Nsa(dp14042
S'description'
p14043
S'Determines whether this object is calculated using an implicit or explicit form\n'
p14044
sS'cpp_type'
p14045
S'bool'
p14046
sS'default'
p14047
S'1'
p14048
sS'name'
p14049
S'implicit'
p14050
sS'required'
p14051
I00
sS'group_name'
p14052
S'Advanced'
p14053
sa(dp14054
S'description'
p14055
S'The input parameter(s) to control. Specify a single parameter name and all parameters in all objects matching the name will be updated\n'
p14056
sS'cpp_type'
p14057
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14058
sS'default'
p14059
g3
sS'name'
p14060
S'parameter'
p14061
sS'required'
p14062
I01
sS'group_name'
p14063
Nsa(dp14064
S'description'
p14065
g3
sS'cpp_type'
p14066
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14067
sS'default'
p14068
S'RealFunctionControl'
p14069
sS'name'
p14070
S'type'
p14071
sS'required'
p14072
I00
sS'group_name'
p14073
NsasS'name'
p14074
S'/Controls/RealFunctionControl'
p14075
sa(dp14076
S'description'
p14077
g3
sS'subblocks'
p14078
NsS'parameters'
p14079
(lp14080
(dp14081
S'description'
p14082
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14083
sS'cpp_type'
p14084
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14085
sS'default'
p14086
g3
sS'name'
p14087
S'control_tags'
p14088
sS'required'
p14089
I00
sS'group_name'
p14090
S'Advanced'
p14091
sa(dp14092
S'description'
p14093
S'A list of object tags to disable.\n'
p14094
sS'cpp_type'
p14095
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14096
sS'default'
p14097
g3
sS'name'
p14098
S'disable_objects'
p14099
sS'required'
p14100
I00
sS'group_name'
p14101
Nsa(dp14102
S'description'
p14103
S'Set the enabled status of the MooseObject.\n'
p14104
sS'cpp_type'
p14105
S'bool'
p14106
sS'default'
p14107
S'1'
p14108
sS'name'
p14109
S'enable'
p14110
sS'required'
p14111
I00
sS'group_name'
p14112
S'Advanced'
p14113
sa(dp14114
S'description'
p14115
S'A list of object tags to enable.\n'
p14116
sS'cpp_type'
p14117
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14118
sS'default'
p14119
g3
sS'name'
p14120
S'enable_objects'
p14121
sS'required'
p14122
I00
sS'group_name'
p14123
Nsa(dp14124
S'description'
p14125
S'The time at which the objects are to be enable/disabled.\n'
p14126
sS'cpp_type'
p14127
S'std::__1::vector<double, std::__1::allocator<double> >'
p14128
sS'default'
p14129
g3
sS'name'
p14130
S'end_time'
p14131
sS'required'
p14132
I00
sS'group_name'
p14133
Nsa(dp14134
S'name'
p14135
S'execute_on'
p14136
sS'cpp_type'
p14137
S'MultiMooseEnum'
p14138
sS'default'
p14139
S'INITIAL TIMESTEP_END'
p14140
sS'description'
p14141
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p14142
sS'required'
p14143
I00
sS'options'
p14144
S'none initial linear nonlinear timestep_end timestep_begin custom subdomain'
p14145
sS'group_name'
p14146
Nsa(dp14147
S'description'
p14148
S'Determines whether this object is calculated using an implicit or explicit form\n'
p14149
sS'cpp_type'
p14150
S'bool'
p14151
sS'default'
p14152
S'1'
p14153
sS'name'
p14154
S'implicit'
p14155
sS'required'
p14156
I00
sS'group_name'
p14157
S'Advanced'
p14158
sa(dp14159
S'description'
p14160
S'When true the disable/enable lists are set to opposite values when outside of the given time range.\n'
p14161
sS'cpp_type'
p14162
S'bool'
p14163
sS'default'
p14164
S'1'
p14165
sS'name'
p14166
S'set_outside_of_range'
p14167
sS'required'
p14168
I00
sS'group_name'
p14169
Nsa(dp14170
S'description'
p14171
S'Set the start and end time as execute sync times.\n'
p14172
sS'cpp_type'
p14173
S'bool'
p14174
sS'default'
p14175
S'0'
p14176
sS'name'
p14177
S'set_sync_times'
p14178
sS'required'
p14179
I00
sS'group_name'
p14180
Nsa(dp14181
S'description'
p14182
S'The time at which the objects are to be enabled/disabled.\n'
p14183
sS'cpp_type'
p14184
S'std::__1::vector<double, std::__1::allocator<double> >'
p14185
sS'default'
p14186
g3
sS'name'
p14187
S'start_time'
p14188
sS'required'
p14189
I00
sS'group_name'
p14190
Nsa(dp14191
S'description'
p14192
g3
sS'cpp_type'
p14193
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14194
sS'default'
p14195
S'TimePeriod'
p14196
sS'name'
p14197
S'type'
p14198
sS'required'
p14199
I00
sS'group_name'
p14200
NsasS'name'
p14201
S'/Controls/TimePeriod'
p14202
sasS'parameters'
p14203
NsS'name'
p14204
S'/Controls'
p14205
sa(dp14206
S'description'
p14207
g3
sS'subblocks'
p14208
(lp14209
(dp14210
S'description'
p14211
g3
sS'subblocks'
p14212
NsS'parameters'
p14213
(lp14214
(dp14215
S'description'
p14216
S'A string representing the Moose Object that will be built by this Action\n'
p14217
sS'cpp_type'
p14218
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14219
sS'default'
p14220
g3
sS'name'
p14221
S'type'
p14222
sS'required'
p14223
I01
sS'group_name'
p14224
NsasS'name'
p14225
S'/DGKernels/*'
p14226
sa(dp14227
S'description'
p14228
S'DG upwinding for the convection\n'
p14229
sS'subblocks'
p14230
NsS'parameters'
p14231
(lp14232
(dp14233
S'description'
p14234
S'The list of block ids (SubdomainID) that this object will be applied\n'
p14235
sS'cpp_type'
p14236
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p14237
sS'default'
p14238
g3
sS'name'
p14239
S'block'
p14240
sS'required'
p14241
I00
sS'group_name'
p14242
Nsa(dp14243
S'description'
p14244
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14245
sS'cpp_type'
p14246
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p14247
sS'default'
p14248
g3
sS'name'
p14249
S'boundary'
p14250
sS'required'
p14251
I00
sS'group_name'
p14252
Nsa(dp14253
S'description'
p14254
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14255
sS'cpp_type'
p14256
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14257
sS'default'
p14258
g3
sS'name'
p14259
S'control_tags'
p14260
sS'required'
p14261
I00
sS'group_name'
p14262
S'Advanced'
p14263
sa(dp14264
S'description'
p14265
S'Set the enabled status of the MooseObject.\n'
p14266
sS'cpp_type'
p14267
S'bool'
p14268
sS'default'
p14269
S'1'
p14270
sS'name'
p14271
S'enable'
p14272
sS'required'
p14273
I00
sS'group_name'
p14274
S'Advanced'
p14275
sa(dp14276
S'description'
p14277
S'Determines whether this object is calculated using an implicit or explicit form\n'
p14278
sS'cpp_type'
p14279
S'bool'
p14280
sS'default'
p14281
S'1'
p14282
sS'name'
p14283
S'implicit'
p14284
sS'required'
p14285
I00
sS'group_name'
p14286
S'Advanced'
p14287
sa(dp14288
S'description'
p14289
g3
sS'cpp_type'
p14290
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14291
sS'default'
p14292
S'DGConvection'
p14293
sS'name'
p14294
S'type'
p14295
sS'required'
p14296
I00
sS'group_name'
p14297
Nsa(dp14298
S'description'
p14299
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p14300
sS'cpp_type'
p14301
S'bool'
p14302
sS'default'
p14303
S'0'
p14304
sS'name'
p14305
S'use_displaced_mesh'
p14306
sS'required'
p14307
I00
sS'group_name'
p14308
S'Advanced'
p14309
sa(dp14310
S'description'
p14311
S'The name of the variable that this boundary condition applies to\n'
p14312
sS'cpp_type'
p14313
S'NonlinearVariableName'
p14314
sS'default'
p14315
g3
sS'name'
p14316
S'variable'
p14317
sS'required'
p14318
I01
sS'group_name'
p14319
Nsa(dp14320
S'description'
p14321
S'Velocity vector\n'
p14322
sS'cpp_type'
p14323
S'libMesh::VectorValue<double>'
p14324
sS'default'
p14325
g3
sS'name'
p14326
S'velocity'
p14327
sS'required'
p14328
I01
sS'group_name'
p14329
NsasS'name'
p14330
S'/DGKernels/DGConvection'
p14331
sa(dp14332
S'description'
p14333
g3
sS'subblocks'
p14334
NsS'parameters'
p14335
(lp14336
(dp14337
S'description'
p14338
S'The list of block ids (SubdomainID) that this object will be applied\n'
p14339
sS'cpp_type'
p14340
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p14341
sS'default'
p14342
g3
sS'name'
p14343
S'block'
p14344
sS'required'
p14345
I00
sS'group_name'
p14346
Nsa(dp14347
S'description'
p14348
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14349
sS'cpp_type'
p14350
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p14351
sS'default'
p14352
g3
sS'name'
p14353
S'boundary'
p14354
sS'required'
p14355
I00
sS'group_name'
p14356
Nsa(dp14357
S'description'
p14358
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14359
sS'cpp_type'
p14360
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14361
sS'default'
p14362
g3
sS'name'
p14363
S'control_tags'
p14364
sS'required'
p14365
I00
sS'group_name'
p14366
S'Advanced'
p14367
sa(dp14368
S'description'
p14369
S'The diffusion (or thermal conductivity or viscosity) coefficient.\n'
p14370
sS'cpp_type'
p14371
S'MaterialPropertyName'
p14372
sS'default'
p14373
S'1'
p14374
sS'name'
p14375
S'diff'
p14376
sS'required'
p14377
I00
sS'group_name'
p14378
Nsa(dp14379
S'description'
p14380
S'Set the enabled status of the MooseObject.\n'
p14381
sS'cpp_type'
p14382
S'bool'
p14383
sS'default'
p14384
S'1'
p14385
sS'name'
p14386
S'enable'
p14387
sS'required'
p14388
I00
sS'group_name'
p14389
S'Advanced'
p14390
sa(dp14391
S'description'
p14392
S'epsilon\n'
p14393
sS'cpp_type'
p14394
S'double'
p14395
sS'default'
p14396
g3
sS'name'
p14397
S'epsilon'
p14398
sS'required'
p14399
I01
sS'group_name'
p14400
Nsa(dp14401
S'description'
p14402
S'Determines whether this object is calculated using an implicit or explicit form\n'
p14403
sS'cpp_type'
p14404
S'bool'
p14405
sS'default'
p14406
S'1'
p14407
sS'name'
p14408
S'implicit'
p14409
sS'required'
p14410
I00
sS'group_name'
p14411
S'Advanced'
p14412
sa(dp14413
S'description'
p14414
S'sigma\n'
p14415
sS'cpp_type'
p14416
S'double'
p14417
sS'default'
p14418
g3
sS'name'
p14419
S'sigma'
p14420
sS'required'
p14421
I01
sS'group_name'
p14422
Nsa(dp14423
S'description'
p14424
g3
sS'cpp_type'
p14425
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14426
sS'default'
p14427
S'DGDiffusion'
p14428
sS'name'
p14429
S'type'
p14430
sS'required'
p14431
I00
sS'group_name'
p14432
Nsa(dp14433
S'description'
p14434
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p14435
sS'cpp_type'
p14436
S'bool'
p14437
sS'default'
p14438
S'0'
p14439
sS'name'
p14440
S'use_displaced_mesh'
p14441
sS'required'
p14442
I00
sS'group_name'
p14443
S'Advanced'
p14444
sa(dp14445
S'description'
p14446
S'The name of the variable that this boundary condition applies to\n'
p14447
sS'cpp_type'
p14448
S'NonlinearVariableName'
p14449
sS'default'
p14450
g3
sS'name'
p14451
S'variable'
p14452
sS'required'
p14453
I01
sS'group_name'
p14454
NsasS'name'
p14455
S'/DGKernels/DGDiffusion'
p14456
sasS'parameters'
p14457
NsS'name'
p14458
S'/DGKernels'
p14459
sa(dp14460
S'description'
p14461
g3
sS'subblocks'
p14462
(lp14463
(dp14464
S'description'
p14465
g3
sS'subblocks'
p14466
NsS'parameters'
p14467
(lp14468
(dp14469
S'description'
p14470
S'A string representing the Moose Object that will be built by this Action\n'
p14471
sS'cpp_type'
p14472
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14473
sS'default'
p14474
g3
sS'name'
p14475
S'type'
p14476
sS'required'
p14477
I01
sS'group_name'
p14478
NsasS'name'
p14479
S'/Dampers/*'
p14480
sa(dp14481
S'description'
p14482
g3
sS'subblocks'
p14483
NsS'parameters'
p14484
(lp14485
(dp14486
S'description'
p14487
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14488
sS'cpp_type'
p14489
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14490
sS'default'
p14491
g3
sS'name'
p14492
S'control_tags'
p14493
sS'required'
p14494
I00
sS'group_name'
p14495
S'Advanced'
p14496
sa(dp14497
S'description'
p14498
S'Set the enabled status of the MooseObject.\n'
p14499
sS'cpp_type'
p14500
S'bool'
p14501
sS'default'
p14502
S'1'
p14503
sS'name'
p14504
S'enable'
p14505
sS'required'
p14506
I00
sS'group_name'
p14507
S'Advanced'
p14508
sa(dp14509
S'description'
p14510
S'The maximum permissible iterative value for the variable.\n'
p14511
sS'cpp_type'
p14512
S'double'
p14513
sS'default'
p14514
S'1.79769e+308'
p14515
sS'name'
p14516
S'max_value'
p14517
sS'required'
p14518
I00
sS'group_name'
p14519
Nsa(dp14520
S'description'
p14521
S'The minimum permissible iterative value for the variable.\n'
p14522
sS'cpp_type'
p14523
S'double'
p14524
sS'default'
p14525
S'-1.79769e+308'
p14526
sS'name'
p14527
S'min_value'
p14528
sS'required'
p14529
I00
sS'group_name'
p14530
Nsa(dp14531
S'description'
p14532
g3
sS'cpp_type'
p14533
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14534
sS'default'
p14535
S'BoundingValueElementDamper'
p14536
sS'name'
p14537
S'type'
p14538
sS'required'
p14539
I00
sS'group_name'
p14540
Nsa(dp14541
S'description'
p14542
S'The name of the variable that this damper operates on\n'
p14543
sS'cpp_type'
p14544
S'NonlinearVariableName'
p14545
sS'default'
p14546
g3
sS'name'
p14547
S'variable'
p14548
sS'required'
p14549
I01
sS'group_name'
p14550
NsasS'name'
p14551
S'/Dampers/BoundingValueElementDamper'
p14552
sa(dp14553
S'description'
p14554
g3
sS'subblocks'
p14555
NsS'parameters'
p14556
(lp14557
(dp14558
S'description'
p14559
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14560
sS'cpp_type'
p14561
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14562
sS'default'
p14563
g3
sS'name'
p14564
S'control_tags'
p14565
sS'required'
p14566
I00
sS'group_name'
p14567
S'Advanced'
p14568
sa(dp14569
S'description'
p14570
S'Set the enabled status of the MooseObject.\n'
p14571
sS'cpp_type'
p14572
S'bool'
p14573
sS'default'
p14574
S'1'
p14575
sS'name'
p14576
S'enable'
p14577
sS'required'
p14578
I00
sS'group_name'
p14579
S'Advanced'
p14580
sa(dp14581
S'description'
p14582
S'The maximum permissible iterative value for the variable.\n'
p14583
sS'cpp_type'
p14584
S'double'
p14585
sS'default'
p14586
S'1.79769e+308'
p14587
sS'name'
p14588
S'max_value'
p14589
sS'required'
p14590
I00
sS'group_name'
p14591
Nsa(dp14592
S'description'
p14593
S'The minimum permissible iterative value for the variable.\n'
p14594
sS'cpp_type'
p14595
S'double'
p14596
sS'default'
p14597
S'-1.79769e+308'
p14598
sS'name'
p14599
S'min_value'
p14600
sS'required'
p14601
I00
sS'group_name'
p14602
Nsa(dp14603
S'description'
p14604
g3
sS'cpp_type'
p14605
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14606
sS'default'
p14607
S'BoundingValueNodalDamper'
p14608
sS'name'
p14609
S'type'
p14610
sS'required'
p14611
I00
sS'group_name'
p14612
Nsa(dp14613
S'description'
p14614
S'The name of the variable that this damper operates on\n'
p14615
sS'cpp_type'
p14616
S'NonlinearVariableName'
p14617
sS'default'
p14618
g3
sS'name'
p14619
S'variable'
p14620
sS'required'
p14621
I01
sS'group_name'
p14622
NsasS'name'
p14623
S'/Dampers/BoundingValueNodalDamper'
p14624
sa(dp14625
S'description'
p14626
g3
sS'subblocks'
p14627
NsS'parameters'
p14628
(lp14629
(dp14630
S'description'
p14631
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14632
sS'cpp_type'
p14633
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14634
sS'default'
p14635
g3
sS'name'
p14636
S'control_tags'
p14637
sS'required'
p14638
I00
sS'group_name'
p14639
S'Advanced'
p14640
sa(dp14641
S'description'
p14642
S'The percentage (between 0 and 1) of the newton update to take.\n'
p14643
sS'cpp_type'
p14644
S'double'
p14645
sS'default'
p14646
g3
sS'name'
p14647
S'damping'
p14648
sS'required'
p14649
I01
sS'group_name'
p14650
Nsa(dp14651
S'description'
p14652
S'Set the enabled status of the MooseObject.\n'
p14653
sS'cpp_type'
p14654
S'bool'
p14655
sS'default'
p14656
S'1'
p14657
sS'name'
p14658
S'enable'
p14659
sS'required'
p14660
I00
sS'group_name'
p14661
S'Advanced'
p14662
sa(dp14663
S'description'
p14664
g3
sS'cpp_type'
p14665
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14666
sS'default'
p14667
S'ConstantDamper'
p14668
sS'name'
p14669
S'type'
p14670
sS'required'
p14671
I00
sS'group_name'
p14672
NsasS'name'
p14673
S'/Dampers/ConstantDamper'
p14674
sa(dp14675
S'description'
p14676
g3
sS'subblocks'
p14677
NsS'parameters'
p14678
(lp14679
(dp14680
S'description'
p14681
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14682
sS'cpp_type'
p14683
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14684
sS'default'
p14685
g3
sS'name'
p14686
S'control_tags'
p14687
sS'required'
p14688
I00
sS'group_name'
p14689
S'Advanced'
p14690
sa(dp14691
S'description'
p14692
S'Set the enabled status of the MooseObject.\n'
p14693
sS'cpp_type'
p14694
S'bool'
p14695
sS'default'
p14696
S'1'
p14697
sS'name'
p14698
S'enable'
p14699
sS'required'
p14700
I00
sS'group_name'
p14701
S'Advanced'
p14702
sa(dp14703
S'description'
p14704
S'The maximum newton increment for the variable.\n'
p14705
sS'cpp_type'
p14706
S'double'
p14707
sS'default'
p14708
g3
sS'name'
p14709
S'max_increment'
p14710
sS'required'
p14711
I01
sS'group_name'
p14712
Nsa(dp14713
S'description'
p14714
g3
sS'cpp_type'
p14715
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14716
sS'default'
p14717
S'MaxIncrement'
p14718
sS'name'
p14719
S'type'
p14720
sS'required'
p14721
I00
sS'group_name'
p14722
Nsa(dp14723
S'description'
p14724
S'The name of the variable that this damper operates on\n'
p14725
sS'cpp_type'
p14726
S'NonlinearVariableName'
p14727
sS'default'
p14728
g3
sS'name'
p14729
S'variable'
p14730
sS'required'
p14731
I01
sS'group_name'
p14732
NsasS'name'
p14733
S'/Dampers/MaxIncrement'
p14734
sasS'parameters'
p14735
NsS'name'
p14736
S'/Dampers'
p14737
sa(dp14738
S'description'
p14739
g3
sS'subblocks'
p14740
NsS'parameters'
p14741
(lp14742
(dp14743
S'description'
p14744
S'Print out the actions being executed\n'
p14745
sS'cpp_type'
p14746
S'bool'
p14747
sS'default'
p14748
S'0'
p14749
sS'name'
p14750
S'show_actions'
p14751
sS'required'
p14752
I00
sS'group_name'
p14753
Nsa(dp14754
S'description'
p14755
S'Print out the material properties supplied for each block, face, neighbor, and/or sideset\n'
p14756
sS'cpp_type'
p14757
S'bool'
p14758
sS'default'
p14759
S'0'
p14760
sS'name'
p14761
S'show_material_props'
p14762
sS'required'
p14763
I00
sS'group_name'
p14764
Nsa(dp14765
S'description'
p14766
S'Shows parser block extraction and debugging information\n'
p14767
sS'cpp_type'
p14768
S'bool'
p14769
sS'default'
p14770
S'0'
p14771
sS'name'
p14772
S'show_parser'
p14773
sS'required'
p14774
I00
sS'group_name'
p14775
Nsa(dp14776
S'description'
p14777
S'The number of top residuals to print out (0 = no output)\n'
p14778
sS'cpp_type'
p14779
S'unsigned int'
p14780
sS'default'
p14781
S'0'
p14782
sS'name'
p14783
S'show_top_residuals'
p14784
sS'required'
p14785
I00
sS'group_name'
p14786
Nsa(dp14787
S'description'
p14788
S'Print the residual norms of the individual solution variables at each nonlinear iteration\n'
p14789
sS'cpp_type'
p14790
S'bool'
p14791
sS'default'
p14792
S'0'
p14793
sS'name'
p14794
S'show_var_residual_norms'
p14795
sS'required'
p14796
I00
sS'group_name'
p14797
Nsa(dp14798
S'description'
p14799
S'Variables for which residuals will be sent to the output file\n'
p14800
sS'cpp_type'
p14801
S'std::__1::vector<NonlinearVariableName, std::__1::allocator<NonlinearVariableName> >'
p14802
sS'default'
p14803
g3
sS'name'
p14804
S'show_var_residual'
p14805
sS'required'
p14806
I00
sS'group_name'
p14807
NsasS'name'
p14808
S'/Debug'
p14809
sa(dp14810
S'description'
p14811
g3
sS'subblocks'
p14812
NsS'parameters'
p14813
(lp14814
(dp14815
S'description'
p14816
S'*** WARNING: This block is deprecated - DO NOT USE ***\n'
p14817
sS'cpp_type'
p14818
S'bool'
p14819
sS'default'
p14820
g3
sS'name'
p14821
S'DEPRECATED'
p14822
sS'required'
p14823
I00
sS'group_name'
p14824
NsasS'name'
p14825
S'/DeprecatedBlock'
p14826
sa(dp14827
S'description'
p14828
g3
sS'subblocks'
p14829
(lp14830
(dp14831
S'description'
p14832
g3
sS'subblocks'
p14833
NsS'parameters'
p14834
(lp14835
(dp14836
S'description'
p14837
S'A string representing the Moose Object that will be built by this Action\n'
p14838
sS'cpp_type'
p14839
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14840
sS'default'
p14841
g3
sS'name'
p14842
S'type'
p14843
sS'required'
p14844
I01
sS'group_name'
p14845
NsasS'name'
p14846
S'/DiracKernels/*'
p14847
sa(dp14848
S'description'
p14849
g3
sS'subblocks'
p14850
NsS'parameters'
p14851
(lp14852
(dp14853
S'description'
p14854
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14855
sS'cpp_type'
p14856
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14857
sS'default'
p14858
g3
sS'name'
p14859
S'control_tags'
p14860
sS'required'
p14861
I00
sS'group_name'
p14862
S'Advanced'
p14863
sa(dp14864
S'description'
p14865
S'By default points added to a DiracKernel are dropped if a point at the same locationhas been added before. If this option is set to false duplicate points are retainedand contribute to residual and Jacobian.\n'
p14866
sS'cpp_type'
p14867
S'bool'
p14868
sS'default'
p14869
S'1'
p14870
sS'name'
p14871
S'drop_duplicate_points'
p14872
sS'required'
p14873
I00
sS'group_name'
p14874
S'Advanced'
p14875
sa(dp14876
S'description'
p14877
S'Set the enabled status of the MooseObject.\n'
p14878
sS'cpp_type'
p14879
S'bool'
p14880
sS'default'
p14881
S'1'
p14882
sS'name'
p14883
S'enable'
p14884
sS'required'
p14885
I00
sS'group_name'
p14886
S'Advanced'
p14887
sa(dp14888
S'description'
p14889
S'The x,y,z coordinates of the point\n'
p14890
sS'cpp_type'
p14891
S'std::__1::vector<double, std::__1::allocator<double> >'
p14892
sS'default'
p14893
g3
sS'name'
p14894
S'point'
p14895
sS'required'
p14896
I01
sS'group_name'
p14897
Nsa(dp14898
S'description'
p14899
g3
sS'cpp_type'
p14900
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14901
sS'default'
p14902
S'ConstantPointSource'
p14903
sS'name'
p14904
S'type'
p14905
sS'required'
p14906
I00
sS'group_name'
p14907
Nsa(dp14908
S'description'
p14909
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p14910
sS'cpp_type'
p14911
S'bool'
p14912
sS'default'
p14913
S'0'
p14914
sS'name'
p14915
S'use_displaced_mesh'
p14916
sS'required'
p14917
I00
sS'group_name'
p14918
S'Advanced'
p14919
sa(dp14920
S'description'
p14921
S'The value of the point source\n'
p14922
sS'cpp_type'
p14923
S'double'
p14924
sS'default'
p14925
g3
sS'name'
p14926
S'value'
p14927
sS'required'
p14928
I01
sS'group_name'
p14929
Nsa(dp14930
S'description'
p14931
S'The name of the variable that this kernel operates on\n'
p14932
sS'cpp_type'
p14933
S'NonlinearVariableName'
p14934
sS'default'
p14935
g3
sS'name'
p14936
S'variable'
p14937
sS'required'
p14938
I01
sS'group_name'
p14939
NsasS'name'
p14940
S'/DiracKernels/ConstantPointSource'
p14941
sa(dp14942
S'description'
p14943
g3
sS'subblocks'
p14944
NsS'parameters'
p14945
(lp14946
(dp14947
S'description'
p14948
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14949
sS'cpp_type'
p14950
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14951
sS'default'
p14952
g3
sS'name'
p14953
S'control_tags'
p14954
sS'required'
p14955
I00
sS'group_name'
p14956
S'Advanced'
p14957
sa(dp14958
S'description'
p14959
S'By default points added to a DiracKernel are dropped if a point at the same locationhas been added before. If this option is set to false duplicate points are retainedand contribute to residual and Jacobian.\n'
p14960
sS'cpp_type'
p14961
S'bool'
p14962
sS'default'
p14963
S'1'
p14964
sS'name'
p14965
S'drop_duplicate_points'
p14966
sS'required'
p14967
I00
sS'group_name'
p14968
S'Advanced'
p14969
sa(dp14970
S'description'
p14971
S'Set the enabled status of the MooseObject.\n'
p14972
sS'cpp_type'
p14973
S'bool'
p14974
sS'default'
p14975
S'1'
p14976
sS'name'
p14977
S'enable'
p14978
sS'required'
p14979
I00
sS'group_name'
p14980
S'Advanced'
p14981
sa(dp14982
S'description'
p14983
S'The x,y,z coordinates of the point\n'
p14984
sS'cpp_type'
p14985
S'libMesh::Point'
p14986
sS'default'
p14987
g3
sS'name'
p14988
S'point'
p14989
sS'required'
p14990
I01
sS'group_name'
p14991
Nsa(dp14992
S'description'
p14993
g3
sS'cpp_type'
p14994
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14995
sS'default'
p14996
S'ExampleDirac'
p14997
sS'name'
p14998
S'type'
p14999
sS'required'
p15000
I00
sS'group_name'
p15001
Nsa(dp15002
S'description'
p15003
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p15004
sS'cpp_type'
p15005
S'bool'
p15006
sS'default'
p15007
S'0'
p15008
sS'name'
p15009
S'use_displaced_mesh'
p15010
sS'required'
p15011
I00
sS'group_name'
p15012
S'Advanced'
p15013
sa(dp15014
S'description'
p15015
S'The value of the point source\n'
p15016
sS'cpp_type'
p15017
S'double'
p15018
sS'default'
p15019
g3
sS'name'
p15020
S'value'
p15021
sS'required'
p15022
I01
sS'group_name'
p15023
Nsa(dp15024
S'description'
p15025
S'The name of the variable that this kernel operates on\n'
p15026
sS'cpp_type'
p15027
S'NonlinearVariableName'
p15028
sS'default'
p15029
g3
sS'name'
p15030
S'variable'
p15031
sS'required'
p15032
I01
sS'group_name'
p15033
NsasS'name'
p15034
S'/DiracKernels/ExampleDirac'
p15035
sasS'parameters'
p15036
NsS'name'
p15037
S'/DiracKernels'
p15038
sa(dp15039
S'description'
p15040
g3
sS'subblocks'
p15041
(lp15042
(dp15043
S'description'
p15044
g3
sS'subblocks'
p15045
(lp15046
(dp15047
S'description'
p15048
g3
sS'subblocks'
p15049
NsS'parameters'
p15050
(lp15051
(dp15052
S'description'
p15053
S'If Chebyshev acceleration is turned on\n'
p15054
sS'cpp_type'
p15055
S'bool'
p15056
sS'default'
p15057
S'1'
p15058
sS'name'
p15059
S'Chebyshev_acceleration_on'
p15060
sS'required'
p15061
I00
sS'group_name'
p15062
Nsa(dp15063
S'description'
p15064
S'True to ask the solver to set initial\n'
p15065
sS'cpp_type'
p15066
S'bool'
p15067
sS'default'
p15068
S'1'
p15069
sS'name'
p15070
S'auto_initialization'
p15071
sS'required'
p15072
I00
sS'group_name'
p15073
S'Advanced'
p15074
sa(dp15075
S'description'
p15076
S'To evaluate |Bx| for the eigenvalue\n'
p15077
sS'cpp_type'
p15078
S'PostprocessorName'
p15079
sS'default'
p15080
g3
sS'name'
p15081
S'bx_norm'
p15082
sS'required'
p15083
I01
sS'group_name'
p15084
Nsa(dp15085
S'description'
p15086
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p15087
sS'cpp_type'
p15088
S'bool'
p15089
sS'default'
p15090
S'0'
p15091
sS'name'
p15092
S'compute_initial_residual_before_preset_bcs'
p15093
sS'required'
p15094
I00
sS'group_name'
p15095
S'Solver'
p15096
sa(dp15097
S'description'
p15098
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15099
sS'cpp_type'
p15100
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15101
sS'default'
p15102
g3
sS'name'
p15103
S'control_tags'
p15104
sS'required'
p15105
I00
sS'group_name'
p15106
S'Advanced'
p15107
sa(dp15108
S'description'
p15109
S'Eigenvalue convergence tolerance\n'
p15110
sS'cpp_type'
p15111
S'double'
p15112
sS'default'
p15113
S'1e-06'
p15114
sS'name'
p15115
S'eig_check_tol'
p15116
sS'required'
p15117
I00
sS'group_name'
p15118
Nsa(dp15119
S'description'
p15120
S'Set the enabled status of the MooseObject.\n'
p15121
sS'cpp_type'
p15122
S'bool'
p15123
sS'default'
p15124
S'1'
p15125
sS'name'
p15126
S'enable'
p15127
sS'required'
p15128
I00
sS'group_name'
p15129
S'Advanced'
p15130
sa(dp15131
S'description'
p15132
S'Initial guess of the eigenvalue\n'
p15133
sS'cpp_type'
p15134
S'double'
p15135
sS'default'
p15136
S'1'
p15137
sS'name'
p15138
S'k0'
p15139
sS'required'
p15140
I00
sS'group_name'
p15141
Nsa(dp15142
S'description'
p15143
S'Linear Absolute Step Tolerance\n'
p15144
sS'cpp_type'
p15145
S'double'
p15146
sS'default'
p15147
S'-1'
p15148
sS'name'
p15149
S'l_abs_step_tol'
p15150
sS'required'
p15151
I00
sS'group_name'
p15152
S'Solver'
p15153
sa(dp15154
S'description'
p15155
S'Max Linear Iterations\n'
p15156
sS'cpp_type'
p15157
S'unsigned int'
p15158
sS'default'
p15159
S'10000'
p15160
sS'name'
p15161
S'l_max_its'
p15162
sS'required'
p15163
I00
sS'group_name'
p15164
S'Solver'
p15165
sa(dp15166
S'description'
p15167
S'Linear Tolerance\n'
p15168
sS'cpp_type'
p15169
S'double'
p15170
sS'default'
p15171
S'1e-05'
p15172
sS'name'
p15173
S'l_tol'
p15174
sS'required'
p15175
I00
sS'group_name'
p15176
S'Solver'
p15177
sa(dp15178
S'name'
p15179
S'line_search'
p15180
sS'cpp_type'
p15181
S'MooseEnum'
p15182
sS'default'
p15183
S'default'
p15184
sS'description'
p15185
S'Specifies the line search type (Note: none = basic)\n'
p15186
sS'required'
p15187
I00
sS'options'
p15188
S'default shell none basic l2 bt cp'
p15189
sS'group_name'
p15190
Nsa(dp15191
S'description'
p15192
S'The maximum number of power iterations\n'
p15193
sS'cpp_type'
p15194
S'unsigned int'
p15195
sS'default'
p15196
S'300'
p15197
sS'name'
p15198
S'max_power_iterations'
p15199
sS'required'
p15200
I00
sS'group_name'
p15201
Nsa(dp15202
S'description'
p15203
S'Minimum number of power iterations\n'
p15204
sS'cpp_type'
p15205
S'unsigned int'
p15206
sS'default'
p15207
S'1'
p15208
sS'name'
p15209
S'min_power_iterations'
p15210
sS'required'
p15211
I00
sS'group_name'
p15212
Nsa(dp15213
S'description'
p15214
S'Nonlinear Absolute step Tolerance\n'
p15215
sS'cpp_type'
p15216
S'double'
p15217
sS'default'
p15218
S'1e-50'
p15219
sS'name'
p15220
S'nl_abs_step_tol'
p15221
sS'required'
p15222
I00
sS'group_name'
p15223
S'Solver'
p15224
sa(dp15225
S'description'
p15226
S'Nonlinear Absolute Tolerance\n'
p15227
sS'cpp_type'
p15228
S'double'
p15229
sS'default'
p15230
S'1e-50'
p15231
sS'name'
p15232
S'nl_abs_tol'
p15233
sS'required'
p15234
I00
sS'group_name'
p15235
S'Solver'
p15236
sa(dp15237
S'description'
p15238
S'Max Nonlinear solver function evaluations\n'
p15239
sS'cpp_type'
p15240
S'unsigned int'
p15241
sS'default'
p15242
S'10000'
p15243
sS'name'
p15244
S'nl_max_funcs'
p15245
sS'required'
p15246
I00
sS'group_name'
p15247
S'Solver'
p15248
sa(dp15249
S'description'
p15250
S'Max Nonlinear Iterations\n'
p15251
sS'cpp_type'
p15252
S'unsigned int'
p15253
sS'default'
p15254
S'50'
p15255
sS'name'
p15256
S'nl_max_its'
p15257
sS'required'
p15258
I00
sS'group_name'
p15259
S'Solver'
p15260
sa(dp15261
S'description'
p15262
S'Nonlinear Relative step Tolerance\n'
p15263
sS'cpp_type'
p15264
S'double'
p15265
sS'default'
p15266
S'1e-50'
p15267
sS'name'
p15268
S'nl_rel_step_tol'
p15269
sS'required'
p15270
I00
sS'group_name'
p15271
S'Solver'
p15272
sa(dp15273
S'description'
p15274
S'Nonlinear Relative Tolerance\n'
p15275
sS'cpp_type'
p15276
S'double'
p15277
sS'default'
p15278
S'1e-08'
p15279
sS'name'
p15280
S'nl_rel_tol'
p15281
sS'required'
p15282
I00
sS'group_name'
p15283
S'Solver'
p15284
sa(dp15285
S'description'
p15286
S'Specifies whether or not to reinitialize FEs\n'
p15287
sS'cpp_type'
p15288
S'bool'
p15289
sS'default'
p15290
S'0'
p15291
sS'name'
p15292
S'no_fe_reinit'
p15293
sS'required'
p15294
I00
sS'group_name'
p15295
S'Advanced'
p15296
sa(dp15297
S'description'
p15298
S'Normalize x to make |x| equal to this factor\n'
p15299
sS'cpp_type'
p15300
S'double'
p15301
sS'default'
p15302
g3
sS'name'
p15303
S'normal_factor'
p15304
sS'required'
p15305
I00
sS'group_name'
p15306
S'Normalization'
p15307
sa(dp15308
S'description'
p15309
S'To evaluate |x| for normalization\n'
p15310
sS'cpp_type'
p15311
S'PostprocessorName'
p15312
sS'default'
p15313
g3
sS'name'
p15314
S'normalization'
p15315
sS'required'
p15316
I00
sS'group_name'
p15317
S'Normalization'
p15318
sa(dp15319
S'description'
p15320
S'True to output a step before normalization\n'
p15321
sS'cpp_type'
p15322
S'bool'
p15323
sS'default'
p15324
S'1'
p15325
sS'name'
p15326
S'output_before_normalization'
p15327
sS'required'
p15328
I00
sS'group_name'
p15329
S'Normalization'
p15330
sa(dp15331
S'name'
p15332
S'petsc_options'
p15333
sS'cpp_type'
p15334
S'MultiMooseEnum'
p15335
sS'default'
p15336
g3
sS'description'
p15337
S'Singleton PETSc options\n'
p15338
sS'required'
p15339
I00
sS'options'
p15340
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p15341
sS'group_name'
p15342
Nsa(dp15343
S'name'
p15344
S'petsc_options_iname'
p15345
sS'cpp_type'
p15346
S'MultiMooseEnum'
p15347
sS'default'
p15348
g3
sS'description'
p15349
S'Names of PETSc name/value pairs\n'
p15350
sS'required'
p15351
I00
sS'options'
p15352
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p15353
sS'group_name'
p15354
Nsa(dp15355
S'description'
p15356
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p15357
sS'cpp_type'
p15358
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15359
sS'default'
p15360
g3
sS'name'
p15361
S'petsc_options_value'
p15362
sS'required'
p15363
I00
sS'group_name'
p15364
Nsa(dp15365
S'description'
p15366
S'Reduce residual norm per power iteration by this factor\n'
p15367
sS'cpp_type'
p15368
S'double'
p15369
sS'default'
p15370
S'0.01'
p15371
sS'name'
p15372
S'pfactor'
p15373
sS'required'
p15374
I00
sS'group_name'
p15375
Nsa(dp15376
S'description'
p15377
S'File base name used for restart\n'
p15378
sS'cpp_type'
p15379
S'FileNameNoExtension'
p15380
sS'default'
p15381
g3
sS'name'
p15382
S'restart_file_base'
p15383
sS'required'
p15384
I00
sS'group_name'
p15385
S'Restart'
p15386
sa(dp15387
S'description'
p15388
S'Convergence tolerance on |x-x_previous| when provided\n'
p15389
sS'cpp_type'
p15390
S'double'
p15391
sS'default'
p15392
S'1.79769e+308'
p15393
sS'name'
p15394
S'sol_check_tol'
p15395
sS'required'
p15396
I00
sS'group_name'
p15397
Nsa(dp15398
S'name'
p15399
S'solve_type'
p15400
sS'cpp_type'
p15401
S'MooseEnum'
p15402
sS'default'
p15403
g3
sS'description'
p15404
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p15405
sS'required'
p15406
I00
sS'options'
p15407
S'PJFNK JFNK NEWTON FD LINEAR'
p15408
sS'group_name'
p15409
Nsa(dp15410
S'description'
p15411
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p15412
sS'cpp_type'
p15413
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15414
sS'default'
p15415
g3
sS'name'
p15416
S'splitting'
p15417
sS'required'
p15418
I00
sS'group_name'
p15419
Nsa(dp15420
S'description'
p15421
S'System time\n'
p15422
sS'cpp_type'
p15423
S'double'
p15424
sS'default'
p15425
S'0'
p15426
sS'name'
p15427
S'time'
p15428
sS'required'
p15429
I00
sS'group_name'
p15430
S'Advanced'
p15431
sa(dp15432
S'description'
p15433
g3
sS'cpp_type'
p15434
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15435
sS'default'
p15436
S'InversePowerMethod'
p15437
sS'name'
p15438
S'type'
p15439
sS'required'
p15440
I00
sS'group_name'
p15441
Nsa(dp15442
S'description'
p15443
S'To evaluate |x-x_previous| for power iterations\n'
p15444
sS'cpp_type'
p15445
S'PostprocessorName'
p15446
sS'default'
p15447
g3
sS'name'
p15448
S'xdiff'
p15449
sS'required'
p15450
I00
sS'group_name'
p15451
NsasS'name'
p15452
S'/Executioner/<type>/InversePowerMethod'
p15453
sa(dp15454
S'description'
p15455
g3
sS'subblocks'
p15456
NsS'parameters'
p15457
(lp15458
(dp15459
S'description'
p15460
S'True to ask the solver to set initial\n'
p15461
sS'cpp_type'
p15462
S'bool'
p15463
sS'default'
p15464
S'1'
p15465
sS'name'
p15466
S'auto_initialization'
p15467
sS'required'
p15468
I00
sS'group_name'
p15469
S'Advanced'
p15470
sa(dp15471
S'description'
p15472
S'To evaluate |Bx| for the eigenvalue\n'
p15473
sS'cpp_type'
p15474
S'PostprocessorName'
p15475
sS'default'
p15476
g3
sS'name'
p15477
S'bx_norm'
p15478
sS'required'
p15479
I01
sS'group_name'
p15480
Nsa(dp15481
S'description'
p15482
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p15483
sS'cpp_type'
p15484
S'bool'
p15485
sS'default'
p15486
S'0'
p15487
sS'name'
p15488
S'compute_initial_residual_before_preset_bcs'
p15489
sS'required'
p15490
I00
sS'group_name'
p15491
S'Solver'
p15492
sa(dp15493
S'description'
p15494
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15495
sS'cpp_type'
p15496
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15497
sS'default'
p15498
g3
sS'name'
p15499
S'control_tags'
p15500
sS'required'
p15501
I00
sS'group_name'
p15502
S'Advanced'
p15503
sa(dp15504
S'description'
p15505
S'Set the enabled status of the MooseObject.\n'
p15506
sS'cpp_type'
p15507
S'bool'
p15508
sS'default'
p15509
S'1'
p15510
sS'name'
p15511
S'enable'
p15512
sS'required'
p15513
I00
sS'group_name'
p15514
S'Advanced'
p15515
sa(dp15516
S'description'
p15517
S'The number of free power iterations\n'
p15518
sS'cpp_type'
p15519
S'unsigned int'
p15520
sS'default'
p15521
S'4'
p15522
sS'name'
p15523
S'free_power_iterations'
p15524
sS'required'
p15525
I00
sS'group_name'
p15526
Nsa(dp15527
S'description'
p15528
S'Initial guess of the eigenvalue\n'
p15529
sS'cpp_type'
p15530
S'double'
p15531
sS'default'
p15532
S'1'
p15533
sS'name'
p15534
S'k0'
p15535
sS'required'
p15536
I00
sS'group_name'
p15537
Nsa(dp15538
S'description'
p15539
S'Linear Absolute Step Tolerance\n'
p15540
sS'cpp_type'
p15541
S'double'
p15542
sS'default'
p15543
S'-1'
p15544
sS'name'
p15545
S'l_abs_step_tol'
p15546
sS'required'
p15547
I00
sS'group_name'
p15548
S'Solver'
p15549
sa(dp15550
S'description'
p15551
S'Max Linear Iterations\n'
p15552
sS'cpp_type'
p15553
S'unsigned int'
p15554
sS'default'
p15555
S'10000'
p15556
sS'name'
p15557
S'l_max_its'
p15558
sS'required'
p15559
I00
sS'group_name'
p15560
S'Solver'
p15561
sa(dp15562
S'description'
p15563
S'Linear Tolerance\n'
p15564
sS'cpp_type'
p15565
S'double'
p15566
sS'default'
p15567
S'1e-05'
p15568
sS'name'
p15569
S'l_tol'
p15570
sS'required'
p15571
I00
sS'group_name'
p15572
S'Solver'
p15573
sa(dp15574
S'name'
p15575
S'line_search'
p15576
sS'cpp_type'
p15577
S'MooseEnum'
p15578
sS'default'
p15579
S'default'
p15580
sS'description'
p15581
S'Specifies the line search type (Note: none = basic)\n'
p15582
sS'required'
p15583
I00
sS'options'
p15584
S'default shell none basic l2 bt cp'
p15585
sS'group_name'
p15586
Nsa(dp15587
S'description'
p15588
S'Nonlinear Absolute step Tolerance\n'
p15589
sS'cpp_type'
p15590
S'double'
p15591
sS'default'
p15592
S'1e-50'
p15593
sS'name'
p15594
S'nl_abs_step_tol'
p15595
sS'required'
p15596
I00
sS'group_name'
p15597
S'Solver'
p15598
sa(dp15599
S'description'
p15600
S'Nonlinear Absolute Tolerance\n'
p15601
sS'cpp_type'
p15602
S'double'
p15603
sS'default'
p15604
S'1e-50'
p15605
sS'name'
p15606
S'nl_abs_tol'
p15607
sS'required'
p15608
I00
sS'group_name'
p15609
S'Solver'
p15610
sa(dp15611
S'description'
p15612
S'Max Nonlinear solver function evaluations\n'
p15613
sS'cpp_type'
p15614
S'unsigned int'
p15615
sS'default'
p15616
S'10000'
p15617
sS'name'
p15618
S'nl_max_funcs'
p15619
sS'required'
p15620
I00
sS'group_name'
p15621
S'Solver'
p15622
sa(dp15623
S'description'
p15624
S'Max Nonlinear Iterations\n'
p15625
sS'cpp_type'
p15626
S'unsigned int'
p15627
sS'default'
p15628
S'50'
p15629
sS'name'
p15630
S'nl_max_its'
p15631
sS'required'
p15632
I00
sS'group_name'
p15633
S'Solver'
p15634
sa(dp15635
S'description'
p15636
S'Nonlinear Relative step Tolerance\n'
p15637
sS'cpp_type'
p15638
S'double'
p15639
sS'default'
p15640
S'1e-50'
p15641
sS'name'
p15642
S'nl_rel_step_tol'
p15643
sS'required'
p15644
I00
sS'group_name'
p15645
S'Solver'
p15646
sa(dp15647
S'description'
p15648
S'Nonlinear Relative Tolerance\n'
p15649
sS'cpp_type'
p15650
S'double'
p15651
sS'default'
p15652
S'1e-08'
p15653
sS'name'
p15654
S'nl_rel_tol'
p15655
sS'required'
p15656
I00
sS'group_name'
p15657
S'Solver'
p15658
sa(dp15659
S'description'
p15660
S'Specifies whether or not to reinitialize FEs\n'
p15661
sS'cpp_type'
p15662
S'bool'
p15663
sS'default'
p15664
S'0'
p15665
sS'name'
p15666
S'no_fe_reinit'
p15667
sS'required'
p15668
I00
sS'group_name'
p15669
S'Advanced'
p15670
sa(dp15671
S'description'
p15672
S'Normalize x to make |x| equal to this factor\n'
p15673
sS'cpp_type'
p15674
S'double'
p15675
sS'default'
p15676
g3
sS'name'
p15677
S'normal_factor'
p15678
sS'required'
p15679
I00
sS'group_name'
p15680
S'Normalization'
p15681
sa(dp15682
S'description'
p15683
S'To evaluate |x| for normalization\n'
p15684
sS'cpp_type'
p15685
S'PostprocessorName'
p15686
sS'default'
p15687
g3
sS'name'
p15688
S'normalization'
p15689
sS'required'
p15690
I00
sS'group_name'
p15691
S'Normalization'
p15692
sa(dp15693
S'description'
p15694
S'True to output solution after free power iterations\n'
p15695
sS'cpp_type'
p15696
S'bool'
p15697
sS'default'
p15698
S'1'
p15699
sS'name'
p15700
S'output_after_power_iterations'
p15701
sS'required'
p15702
I00
sS'group_name'
p15703
Nsa(dp15704
S'description'
p15705
S'True to output a step before normalization\n'
p15706
sS'cpp_type'
p15707
S'bool'
p15708
sS'default'
p15709
S'1'
p15710
sS'name'
p15711
S'output_before_normalization'
p15712
sS'required'
p15713
I00
sS'group_name'
p15714
S'Normalization'
p15715
sa(dp15716
S'name'
p15717
S'petsc_options'
p15718
sS'cpp_type'
p15719
S'MultiMooseEnum'
p15720
sS'default'
p15721
g3
sS'description'
p15722
S'Singleton PETSc options\n'
p15723
sS'required'
p15724
I00
sS'options'
p15725
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p15726
sS'group_name'
p15727
Nsa(dp15728
S'name'
p15729
S'petsc_options_iname'
p15730
sS'cpp_type'
p15731
S'MultiMooseEnum'
p15732
sS'default'
p15733
g3
sS'description'
p15734
S'Names of PETSc name/value pairs\n'
p15735
sS'required'
p15736
I00
sS'options'
p15737
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p15738
sS'group_name'
p15739
Nsa(dp15740
S'description'
p15741
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p15742
sS'cpp_type'
p15743
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15744
sS'default'
p15745
g3
sS'name'
p15746
S'petsc_options_value'
p15747
sS'required'
p15748
I00
sS'group_name'
p15749
Nsa(dp15750
S'description'
p15751
S'The factor of residual to be reduced per free power iteration or per nonlinear step\n'
p15752
sS'cpp_type'
p15753
S'double'
p15754
sS'default'
p15755
S'0.01'
p15756
sS'name'
p15757
S'pfactor'
p15758
sS'required'
p15759
I00
sS'group_name'
p15760
Nsa(dp15761
S'description'
p15762
S'File base name used for restart\n'
p15763
sS'cpp_type'
p15764
S'FileNameNoExtension'
p15765
sS'default'
p15766
g3
sS'name'
p15767
S'restart_file_base'
p15768
sS'required'
p15769
I00
sS'group_name'
p15770
S'Restart'
p15771
sa(dp15772
S'name'
p15773
S'solve_type'
p15774
sS'cpp_type'
p15775
S'MooseEnum'
p15776
sS'default'
p15777
g3
sS'description'
p15778
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p15779
sS'required'
p15780
I00
sS'options'
p15781
S'PJFNK JFNK NEWTON FD LINEAR'
p15782
sS'group_name'
p15783
Nsa(dp15784
S'description'
p15785
S'Absolute tolernance on residual norm\n'
p15786
sS'cpp_type'
p15787
S'double'
p15788
sS'default'
p15789
S'1e-06'
p15790
sS'name'
p15791
S'source_abs_tol'
p15792
sS'required'
p15793
I00
sS'group_name'
p15794
Nsa(dp15795
S'description'
p15796
S'Relative tolernance on residual norm after free power iterations\n'
p15797
sS'cpp_type'
p15798
S'double'
p15799
sS'default'
p15800
S'1e-50'
p15801
sS'name'
p15802
S'source_rel_tol'
p15803
sS'required'
p15804
I00
sS'group_name'
p15805
Nsa(dp15806
S'description'
p15807
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p15808
sS'cpp_type'
p15809
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15810
sS'default'
p15811
g3
sS'name'
p15812
S'splitting'
p15813
sS'required'
p15814
I00
sS'group_name'
p15815
Nsa(dp15816
S'description'
p15817
S'System time\n'
p15818
sS'cpp_type'
p15819
S'double'
p15820
sS'default'
p15821
S'0'
p15822
sS'name'
p15823
S'time'
p15824
sS'required'
p15825
I00
sS'group_name'
p15826
S'Advanced'
p15827
sa(dp15828
S'description'
p15829
g3
sS'cpp_type'
p15830
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15831
sS'default'
p15832
S'NonlinearEigen'
p15833
sS'name'
p15834
S'type'
p15835
sS'required'
p15836
I00
sS'group_name'
p15837
NsasS'name'
p15838
S'/Executioner/<type>/NonlinearEigen'
p15839
sa(dp15840
S'description'
p15841
g3
sS'subblocks'
p15842
NsS'parameters'
p15843
(lp15844
(dp15845
S'description'
p15846
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p15847
sS'cpp_type'
p15848
S'bool'
p15849
sS'default'
p15850
S'0'
p15851
sS'name'
p15852
S'compute_initial_residual_before_preset_bcs'
p15853
sS'required'
p15854
I00
sS'group_name'
p15855
S'Solver'
p15856
sa(dp15857
S'description'
p15858
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15859
sS'cpp_type'
p15860
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15861
sS'default'
p15862
g3
sS'name'
p15863
S'control_tags'
p15864
sS'required'
p15865
I00
sS'group_name'
p15866
S'Advanced'
p15867
sa(dp15868
S'description'
p15869
S'Set the enabled status of the MooseObject.\n'
p15870
sS'cpp_type'
p15871
S'bool'
p15872
sS'default'
p15873
S'1'
p15874
sS'name'
p15875
S'enable'
p15876
sS'required'
p15877
I00
sS'group_name'
p15878
S'Advanced'
p15879
sa(dp15880
S'description'
p15881
S'Linear Absolute Step Tolerance\n'
p15882
sS'cpp_type'
p15883
S'double'
p15884
sS'default'
p15885
S'-1'
p15886
sS'name'
p15887
S'l_abs_step_tol'
p15888
sS'required'
p15889
I00
sS'group_name'
p15890
S'Solver'
p15891
sa(dp15892
S'description'
p15893
S'Max Linear Iterations\n'
p15894
sS'cpp_type'
p15895
S'unsigned int'
p15896
sS'default'
p15897
S'10000'
p15898
sS'name'
p15899
S'l_max_its'
p15900
sS'required'
p15901
I00
sS'group_name'
p15902
S'Solver'
p15903
sa(dp15904
S'description'
p15905
S'Linear Tolerance\n'
p15906
sS'cpp_type'
p15907
S'double'
p15908
sS'default'
p15909
S'1e-05'
p15910
sS'name'
p15911
S'l_tol'
p15912
sS'required'
p15913
I00
sS'group_name'
p15914
S'Solver'
p15915
sa(dp15916
S'name'
p15917
S'line_search'
p15918
sS'cpp_type'
p15919
S'MooseEnum'
p15920
sS'default'
p15921
S'default'
p15922
sS'description'
p15923
S'Specifies the line search type (Note: none = basic)\n'
p15924
sS'required'
p15925
I00
sS'options'
p15926
S'default shell none basic l2 bt cp'
p15927
sS'group_name'
p15928
Nsa(dp15929
S'description'
p15930
S'Nonlinear Absolute step Tolerance\n'
p15931
sS'cpp_type'
p15932
S'double'
p15933
sS'default'
p15934
S'1e-50'
p15935
sS'name'
p15936
S'nl_abs_step_tol'
p15937
sS'required'
p15938
I00
sS'group_name'
p15939
S'Solver'
p15940
sa(dp15941
S'description'
p15942
S'Nonlinear Absolute Tolerance\n'
p15943
sS'cpp_type'
p15944
S'double'
p15945
sS'default'
p15946
S'1e-50'
p15947
sS'name'
p15948
S'nl_abs_tol'
p15949
sS'required'
p15950
I00
sS'group_name'
p15951
S'Solver'
p15952
sa(dp15953
S'description'
p15954
S'Max Nonlinear solver function evaluations\n'
p15955
sS'cpp_type'
p15956
S'unsigned int'
p15957
sS'default'
p15958
S'10000'
p15959
sS'name'
p15960
S'nl_max_funcs'
p15961
sS'required'
p15962
I00
sS'group_name'
p15963
S'Solver'
p15964
sa(dp15965
S'description'
p15966
S'Max Nonlinear Iterations\n'
p15967
sS'cpp_type'
p15968
S'unsigned int'
p15969
sS'default'
p15970
S'50'
p15971
sS'name'
p15972
S'nl_max_its'
p15973
sS'required'
p15974
I00
sS'group_name'
p15975
S'Solver'
p15976
sa(dp15977
S'description'
p15978
S'Nonlinear Relative step Tolerance\n'
p15979
sS'cpp_type'
p15980
S'double'
p15981
sS'default'
p15982
S'1e-50'
p15983
sS'name'
p15984
S'nl_rel_step_tol'
p15985
sS'required'
p15986
I00
sS'group_name'
p15987
S'Solver'
p15988
sa(dp15989
S'description'
p15990
S'Nonlinear Relative Tolerance\n'
p15991
sS'cpp_type'
p15992
S'double'
p15993
sS'default'
p15994
S'1e-08'
p15995
sS'name'
p15996
S'nl_rel_tol'
p15997
sS'required'
p15998
I00
sS'group_name'
p15999
S'Solver'
p16000
sa(dp16001
S'description'
p16002
S'Specifies whether or not to reinitialize FEs\n'
p16003
sS'cpp_type'
p16004
S'bool'
p16005
sS'default'
p16006
S'0'
p16007
sS'name'
p16008
S'no_fe_reinit'
p16009
sS'required'
p16010
I00
sS'group_name'
p16011
S'Advanced'
p16012
sa(dp16013
S'name'
p16014
S'petsc_options'
p16015
sS'cpp_type'
p16016
S'MultiMooseEnum'
p16017
sS'default'
p16018
g3
sS'description'
p16019
S'Singleton PETSc options\n'
p16020
sS'required'
p16021
I00
sS'options'
p16022
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p16023
sS'group_name'
p16024
Nsa(dp16025
S'name'
p16026
S'petsc_options_iname'
p16027
sS'cpp_type'
p16028
S'MultiMooseEnum'
p16029
sS'default'
p16030
g3
sS'description'
p16031
S'Names of PETSc name/value pairs\n'
p16032
sS'required'
p16033
I00
sS'options'
p16034
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p16035
sS'group_name'
p16036
Nsa(dp16037
S'description'
p16038
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p16039
sS'cpp_type'
p16040
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16041
sS'default'
p16042
g3
sS'name'
p16043
S'petsc_options_value'
p16044
sS'required'
p16045
I00
sS'group_name'
p16046
Nsa(dp16047
S'description'
p16048
S'File base name used for restart\n'
p16049
sS'cpp_type'
p16050
S'FileNameNoExtension'
p16051
sS'default'
p16052
g3
sS'name'
p16053
S'restart_file_base'
p16054
sS'required'
p16055
I00
sS'group_name'
p16056
S'Restart'
p16057
sa(dp16058
S'name'
p16059
S'solve_type'
p16060
sS'cpp_type'
p16061
S'MooseEnum'
p16062
sS'default'
p16063
g3
sS'description'
p16064
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p16065
sS'required'
p16066
I00
sS'options'
p16067
S'PJFNK JFNK NEWTON FD LINEAR'
p16068
sS'group_name'
p16069
Nsa(dp16070
S'description'
p16071
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p16072
sS'cpp_type'
p16073
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16074
sS'default'
p16075
g3
sS'name'
p16076
S'splitting'
p16077
sS'required'
p16078
I00
sS'group_name'
p16079
Nsa(dp16080
S'description'
p16081
g3
sS'cpp_type'
p16082
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16083
sS'default'
p16084
S'Steady'
p16085
sS'name'
p16086
S'type'
p16087
sS'required'
p16088
I00
sS'group_name'
p16089
NsasS'name'
p16090
S'/Executioner/<type>/Steady'
p16091
sa(dp16092
S'description'
p16093
g3
sS'subblocks'
p16094
NsS'parameters'
p16095
(lp16096
(dp16097
S'description'
p16098
S'abort if solve not converged rather than cut timestep\n'
p16099
sS'cpp_type'
p16100
S'bool'
p16101
sS'default'
p16102
S'0'
p16103
sS'name'
p16104
S'abort_on_solve_fail'
p16105
sS'required'
p16106
I00
sS'group_name'
p16107
S'Advanced'
p16108
sa(dp16109
S'description'
p16110
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p16111
sS'cpp_type'
p16112
S'bool'
p16113
sS'default'
p16114
S'0'
p16115
sS'name'
p16116
S'compute_initial_residual_before_preset_bcs'
p16117
sS'required'
p16118
I00
sS'group_name'
p16119
S'Solver'
p16120
sa(dp16121
S'description'
p16122
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16123
sS'cpp_type'
p16124
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16125
sS'default'
p16126
g3
sS'name'
p16127
S'control_tags'
p16128
sS'required'
p16129
I00
sS'group_name'
p16130
S'Advanced'
p16131
sa(dp16132
S'description'
p16133
S'The timestep size between solves\n'
p16134
sS'cpp_type'
p16135
S'double'
p16136
sS'default'
p16137
S'1'
p16138
sS'name'
p16139
S'dt'
p16140
sS'required'
p16141
I00
sS'group_name'
p16142
Nsa(dp16143
S'description'
p16144
S'The maximum timestep size in an adaptive run\n'
p16145
sS'cpp_type'
p16146
S'double'
p16147
sS'default'
p16148
S'1e+30'
p16149
sS'name'
p16150
S'dtmax'
p16151
sS'required'
p16152
I00
sS'group_name'
p16153
S'Advanced'
p16154
sa(dp16155
S'description'
p16156
S'The minimum timestep size in an adaptive run\n'
p16157
sS'cpp_type'
p16158
S'double'
p16159
sS'default'
p16160
S'2e-14'
p16161
sS'name'
p16162
S'dtmin'
p16163
sS'required'
p16164
I00
sS'group_name'
p16165
S'Advanced'
p16166
sa(dp16167
S'description'
p16168
S'Set the enabled status of the MooseObject.\n'
p16169
sS'cpp_type'
p16170
S'bool'
p16171
sS'default'
p16172
S'1'
p16173
sS'name'
p16174
S'enable'
p16175
sS'required'
p16176
I00
sS'group_name'
p16177
S'Advanced'
p16178
sa(dp16179
S'description'
p16180
S'The end time of the simulation\n'
p16181
sS'cpp_type'
p16182
S'double'
p16183
sS'default'
p16184
S'1e+30'
p16185
sS'name'
p16186
S'end_time'
p16187
sS'required'
p16188
I00
sS'group_name'
p16189
Nsa(dp16190
S'description'
p16191
S'Linear Absolute Step Tolerance\n'
p16192
sS'cpp_type'
p16193
S'double'
p16194
sS'default'
p16195
S'-1'
p16196
sS'name'
p16197
S'l_abs_step_tol'
p16198
sS'required'
p16199
I00
sS'group_name'
p16200
S'Solver'
p16201
sa(dp16202
S'description'
p16203
S'Max Linear Iterations\n'
p16204
sS'cpp_type'
p16205
S'unsigned int'
p16206
sS'default'
p16207
S'10000'
p16208
sS'name'
p16209
S'l_max_its'
p16210
sS'required'
p16211
I00
sS'group_name'
p16212
S'Solver'
p16213
sa(dp16214
S'description'
p16215
S'Linear Tolerance\n'
p16216
sS'cpp_type'
p16217
S'double'
p16218
sS'default'
p16219
S'1e-05'
p16220
sS'name'
p16221
S'l_tol'
p16222
sS'required'
p16223
I00
sS'group_name'
p16224
S'Solver'
p16225
sa(dp16226
S'name'
p16227
S'line_search'
p16228
sS'cpp_type'
p16229
S'MooseEnum'
p16230
sS'default'
p16231
S'default'
p16232
sS'description'
p16233
S'Specifies the line search type (Note: none = basic)\n'
p16234
sS'required'
p16235
I00
sS'options'
p16236
S'default shell none basic l2 bt cp'
p16237
sS'group_name'
p16238
Nsa(dp16239
S'description'
p16240
S'Maximum number of times to update XFEM crack topology in a step due to evolving cracks\n'
p16241
sS'cpp_type'
p16242
S'unsigned int'
p16243
sS'default'
p16244
S'4294967295'
p16245
sS'name'
p16246
S'max_xfem_update'
p16247
sS'required'
p16248
I00
sS'group_name'
p16249
Nsa(dp16250
S'description'
p16251
S'The number of timesteps during startup\n'
p16252
sS'cpp_type'
p16253
S'int'
p16254
sS'default'
p16255
S'0'
p16256
sS'name'
p16257
S'n_startup_steps'
p16258
sS'required'
p16259
I00
sS'group_name'
p16260
S'Advanced'
p16261
sa(dp16262
S'description'
p16263
S'Nonlinear Absolute step Tolerance\n'
p16264
sS'cpp_type'
p16265
S'double'
p16266
sS'default'
p16267
S'1e-50'
p16268
sS'name'
p16269
S'nl_abs_step_tol'
p16270
sS'required'
p16271
I00
sS'group_name'
p16272
S'Solver'
p16273
sa(dp16274
S'description'
p16275
S'Nonlinear Absolute Tolerance\n'
p16276
sS'cpp_type'
p16277
S'double'
p16278
sS'default'
p16279
S'1e-50'
p16280
sS'name'
p16281
S'nl_abs_tol'
p16282
sS'required'
p16283
I00
sS'group_name'
p16284
S'Solver'
p16285
sa(dp16286
S'description'
p16287
S'Max Nonlinear solver function evaluations\n'
p16288
sS'cpp_type'
p16289
S'unsigned int'
p16290
sS'default'
p16291
S'10000'
p16292
sS'name'
p16293
S'nl_max_funcs'
p16294
sS'required'
p16295
I00
sS'group_name'
p16296
S'Solver'
p16297
sa(dp16298
S'description'
p16299
S'Max Nonlinear Iterations\n'
p16300
sS'cpp_type'
p16301
S'unsigned int'
p16302
sS'default'
p16303
S'50'
p16304
sS'name'
p16305
S'nl_max_its'
p16306
sS'required'
p16307
I00
sS'group_name'
p16308
S'Solver'
p16309
sa(dp16310
S'description'
p16311
S'Nonlinear Relative step Tolerance\n'
p16312
sS'cpp_type'
p16313
S'double'
p16314
sS'default'
p16315
S'1e-50'
p16316
sS'name'
p16317
S'nl_rel_step_tol'
p16318
sS'required'
p16319
I00
sS'group_name'
p16320
S'Solver'
p16321
sa(dp16322
S'description'
p16323
S'Nonlinear Relative Tolerance\n'
p16324
sS'cpp_type'
p16325
S'double'
p16326
sS'default'
p16327
S'1e-08'
p16328
sS'name'
p16329
S'nl_rel_tol'
p16330
sS'required'
p16331
I00
sS'group_name'
p16332
S'Solver'
p16333
sa(dp16334
S'description'
p16335
S'Specifies whether or not to reinitialize FEs\n'
p16336
sS'cpp_type'
p16337
S'bool'
p16338
sS'default'
p16339
S'0'
p16340
sS'name'
p16341
S'no_fe_reinit'
p16342
sS'required'
p16343
I00
sS'group_name'
p16344
S'Advanced'
p16345
sa(dp16346
S'description'
p16347
S'The number of timesteps in a transient run\n'
p16348
sS'cpp_type'
p16349
S'unsigned int'
p16350
sS'default'
p16351
S'4294967295'
p16352
sS'name'
p16353
S'num_steps'
p16354
sS'required'
p16355
I00
sS'group_name'
p16356
Nsa(dp16357
S'name'
p16358
S'petsc_options'
p16359
sS'cpp_type'
p16360
S'MultiMooseEnum'
p16361
sS'default'
p16362
g3
sS'description'
p16363
S'Singleton PETSc options\n'
p16364
sS'required'
p16365
I00
sS'options'
p16366
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p16367
sS'group_name'
p16368
Nsa(dp16369
S'name'
p16370
S'petsc_options_iname'
p16371
sS'cpp_type'
p16372
S'MultiMooseEnum'
p16373
sS'default'
p16374
g3
sS'description'
p16375
S'Names of PETSc name/value pairs\n'
p16376
sS'required'
p16377
I00
sS'options'
p16378
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p16379
sS'group_name'
p16380
Nsa(dp16381
S'description'
p16382
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p16383
sS'cpp_type'
p16384
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16385
sS'default'
p16386
g3
sS'name'
p16387
S'petsc_options_value'
p16388
sS'required'
p16389
I00
sS'group_name'
p16390
Nsa(dp16391
S'description'
p16392
S"The absolute nonlinear residual to shoot for during Picard iterations.  This check is performed based on the Master app's nonlinear residual.\n"
p16393
sS'cpp_type'
p16394
S'double'
p16395
sS'default'
p16396
S'1e-50'
p16397
sS'name'
p16398
S'picard_abs_tol'
p16399
sS'required'
p16400
I00
sS'group_name'
p16401
S'Picard'
p16402
sa(dp16403
S'description'
p16404
S'Number of times each timestep will be solved.  Mainly used when wanting to do Picard iterations with MultiApps that are set to execute_on timestep_end or timestep_begin\n'
p16405
sS'cpp_type'
p16406
S'unsigned int'
p16407
sS'default'
p16408
S'1'
p16409
sS'name'
p16410
S'picard_max_its'
p16411
sS'required'
p16412
I00
sS'group_name'
p16413
S'Picard'
p16414
sa(dp16415
S'description'
p16416
S"The relative nonlinear residual drop to shoot for during Picard iterations.  This check is performed based on the Master app's nonlinear residual.\n"
p16417
sS'cpp_type'
p16418
S'double'
p16419
sS'default'
p16420
S'1e-08'
p16421
sS'name'
p16422
S'picard_rel_tol'
p16423
sS'required'
p16424
I00
sS'group_name'
p16425
S'Picard'
p16426
sa(dp16427
S'description'
p16428
S'Use when restarting a calculation to force a change in dt.\n'
p16429
sS'cpp_type'
p16430
S'bool'
p16431
sS'default'
p16432
S'0'
p16433
sS'name'
p16434
S'reset_dt'
p16435
sS'required'
p16436
I00
sS'group_name'
p16437
Nsa(dp16438
S'description'
p16439
S'File base name used for restart\n'
p16440
sS'cpp_type'
p16441
S'FileNameNoExtension'
p16442
sS'default'
p16443
g3
sS'name'
p16444
S'restart_file_base'
p16445
sS'required'
p16446
I00
sS'group_name'
p16447
S'Restart'
p16448
sa(dp16449
S'name'
p16450
S'scheme'
p16451
sS'cpp_type'
p16452
S'MooseEnum'
p16453
sS'default'
p16454
g3
sS'description'
p16455
S'Time integration scheme used.\n'
p16456
sS'required'
p16457
I00
sS'options'
p16458
S'implicit-euler explicit-euler crank-nicolson bdf2 rk-2 dirk explicit-tvd-rk-2'
p16459
sS'group_name'
p16460
Nsa(dp16461
S'name'
p16462
S'solve_type'
p16463
sS'cpp_type'
p16464
S'MooseEnum'
p16465
sS'default'
p16466
g3
sS'description'
p16467
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p16468
sS'required'
p16469
I00
sS'options'
p16470
S'PJFNK JFNK NEWTON FD LINEAR'
p16471
sS'group_name'
p16472
Nsa(dp16473
S'description'
p16474
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p16475
sS'cpp_type'
p16476
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16477
sS'default'
p16478
g3
sS'name'
p16479
S'splitting'
p16480
sS'required'
p16481
I00
sS'group_name'
p16482
Nsa(dp16483
S'description'
p16484
S'Whenever the relative residual changes by less than this the solution will be considered to be at steady state.\n'
p16485
sS'cpp_type'
p16486
S'double'
p16487
sS'default'
p16488
S'1e-08'
p16489
sS'name'
p16490
S'ss_check_tol'
p16491
sS'required'
p16492
I00
sS'group_name'
p16493
S'Advanced'
p16494
sa(dp16495
S'description'
p16496
S'Minimum number of timesteps to take before checking for steady state conditions.\n'
p16497
sS'cpp_type'
p16498
S'double'
p16499
sS'default'
p16500
S'0'
p16501
sS'name'
p16502
S'ss_tmin'
p16503
sS'required'
p16504
I00
sS'group_name'
p16505
S'Advanced'
p16506
sa(dp16507
S'description'
p16508
S'The start time of the simulation\n'
p16509
sS'cpp_type'
p16510
S'double'
p16511
sS'default'
p16512
S'0'
p16513
sS'name'
p16514
S'start_time'
p16515
sS'required'
p16516
I00
sS'group_name'
p16517
S'Advanced'
p16518
sa(dp16519
S'description'
p16520
S'The end times of time periods\n'
p16521
sS'cpp_type'
p16522
S'std::__1::vector<double, std::__1::allocator<double> >'
p16523
sS'default'
p16524
g3
sS'name'
p16525
S'time_period_ends'
p16526
sS'required'
p16527
I00
sS'group_name'
p16528
S'Time Periods'
p16529
sa(dp16530
S'description'
p16531
S'The start times of time periods\n'
p16532
sS'cpp_type'
p16533
S'std::__1::vector<double, std::__1::allocator<double> >'
p16534
sS'default'
p16535
g3
sS'name'
p16536
S'time_period_starts'
p16537
sS'required'
p16538
I00
sS'group_name'
p16539
S'Time Periods'
p16540
sa(dp16541
S'description'
p16542
S'The names of periods\n'
p16543
sS'cpp_type'
p16544
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16545
sS'default'
p16546
g3
sS'name'
p16547
S'time_periods'
p16548
sS'required'
p16549
I00
sS'group_name'
p16550
S'Time Periods'
p16551
sa(dp16552
S'description'
p16553
S'the tolerance setting for final timestep size and sync times\n'
p16554
sS'cpp_type'
p16555
S'double'
p16556
sS'default'
p16557
S'2e-14'
p16558
sS'name'
p16559
S'timestep_tolerance'
p16560
sS'required'
p16561
I00
sS'group_name'
p16562
S'Advanced'
p16563
sa(dp16564
S'description'
p16565
S'Whether or not to check for steady state conditions\n'
p16566
sS'cpp_type'
p16567
S'bool'
p16568
sS'default'
p16569
S'0'
p16570
sS'name'
p16571
S'trans_ss_check'
p16572
sS'required'
p16573
I00
sS'group_name'
p16574
S'Advanced'
p16575
sa(dp16576
S'description'
p16577
g3
sS'cpp_type'
p16578
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16579
sS'default'
p16580
S'Transient'
p16581
sS'name'
p16582
S'type'
p16583
sS'required'
p16584
I00
sS'group_name'
p16585
Nsa(dp16586
S'description'
p16587
S'If true then the dt for the simulation will be chosen by the MultiApps.  If false (the default) then the minimum over the master dt and the MultiApps is used\n'
p16588
sS'cpp_type'
p16589
S'bool'
p16590
sS'default'
p16591
S'0'
p16592
sS'name'
p16593
S'use_multiapp_dt'
p16594
sS'required'
p16595
I00
sS'group_name'
p16596
S'Advanced'
p16597
sa(dp16598
S'description'
p16599
S'Print detailed diagnostics on timestep calculation\n'
p16600
sS'cpp_type'
p16601
S'bool'
p16602
sS'default'
p16603
S'0'
p16604
sS'name'
p16605
S'verbose'
p16606
sS'required'
p16607
I00
sS'group_name'
p16608
NsasS'name'
p16609
S'/Executioner/<type>/Transient'
p16610
sasS'parameters'
p16611
NsS'name'
p16612
S'/Executioner/<type>'
p16613
sa(dp16614
S'description'
p16615
g3
sS'subblocks'
p16616
NsS'parameters'
p16617
(lp16618
(dp16619
S'description'
p16620
S'The fraction of elements or error to coarsen. Should be between 0 and 1.\n'
p16621
sS'cpp_type'
p16622
S'double'
p16623
sS'default'
p16624
S'0'
p16625
sS'name'
p16626
S'coarsen_fraction'
p16627
sS'required'
p16628
I00
sS'group_name'
p16629
Nsa(dp16630
S'description'
p16631
S'The number of adaptivity cycles per step\n'
p16632
sS'cpp_type'
p16633
S'unsigned int'
p16634
sS'default'
p16635
S'1'
p16636
sS'name'
p16637
S'cycles_per_step'
p16638
sS'required'
p16639
I00
sS'group_name'
p16640
Nsa(dp16641
S'name'
p16642
S'error_estimator'
p16643
sS'cpp_type'
p16644
S'MooseEnum'
p16645
sS'default'
p16646
S'KellyErrorEstimator'
p16647
sS'description'
p16648
S'The class name of the error estimator you want to use.\n'
p16649
sS'required'
p16650
I00
sS'options'
p16651
S'KellyErrorEstimator LaplacianErrorEstimator PatchRecoveryErrorEstimator'
p16652
sS'group_name'
p16653
Nsa(dp16654
S'description'
p16655
S'The number of adaptivity steps to perform using the initial conditions\n'
p16656
sS'cpp_type'
p16657
S'unsigned int'
p16658
sS'default'
p16659
S'0'
p16660
sS'name'
p16661
S'initial_adaptivity'
p16662
sS'required'
p16663
I00
sS'group_name'
p16664
Nsa(dp16665
S'description'
p16666
S'The number of time steps betweeen each adaptivity phase\n'
p16667
sS'cpp_type'
p16668
S'unsigned int'
p16669
sS'default'
p16670
S'1'
p16671
sS'name'
p16672
S'interval'
p16673
sS'required'
p16674
I00
sS'group_name'
p16675
Nsa(dp16676
S'description'
p16677
S'Maximum number of times a single element can be refined. If 0 then infinite.\n'
p16678
sS'cpp_type'
p16679
S'unsigned int'
p16680
sS'default'
p16681
S'0'
p16682
sS'name'
p16683
S'max_h_level'
p16684
sS'required'
p16685
I00
sS'group_name'
p16686
Nsa(dp16687
S'description'
p16688
S'Determines whether information about the mesh is printed when adaptivity occurs\n'
p16689
sS'cpp_type'
p16690
S'bool'
p16691
sS'default'
p16692
S'0'
p16693
sS'name'
p16694
S'print_changed_info'
p16695
sS'required'
p16696
I00
sS'group_name'
p16697
Nsa(dp16698
S'description'
p16699
S'Recompute markers during adaptivity cycles\n'
p16700
sS'cpp_type'
p16701
S'bool'
p16702
sS'default'
p16703
S'0'
p16704
sS'name'
p16705
S'recompute_markers_during_cycles'
p16706
sS'required'
p16707
I00
sS'group_name'
p16708
Nsa(dp16709
S'description'
p16710
S'The fraction of elements or error to refine. Should be between 0 and 1.\n'
p16711
sS'cpp_type'
p16712
S'double'
p16713
sS'default'
p16714
S'0'
p16715
sS'name'
p16716
S'refine_fraction'
p16717
sS'required'
p16718
I00
sS'group_name'
p16719
Nsa(dp16720
S'description'
p16721
S'Show the progress of the initial adaptivity\n'
p16722
sS'cpp_type'
p16723
S'bool'
p16724
sS'default'
p16725
S'1'
p16726
sS'name'
p16727
S'show_initial_progress'
p16728
sS'required'
p16729
I00
sS'group_name'
p16730
Nsa(dp16731
S'description'
p16732
S'The time that adaptivity will be active after.\n'
p16733
sS'cpp_type'
p16734
S'double'
p16735
sS'default'
p16736
S'-1.79769e+308'
p16737
sS'name'
p16738
S'start_time'
p16739
sS'required'
p16740
I00
sS'group_name'
p16741
Nsa(dp16742
S'description'
p16743
S'The number of adaptivity steps to perform at any one time for steady state\n'
p16744
sS'cpp_type'
p16745
S'unsigned int'
p16746
sS'default'
p16747
S'0'
p16748
sS'name'
p16749
S'steps'
p16750
sS'required'
p16751
I00
sS'group_name'
p16752
Nsa(dp16753
S'description'
p16754
S'The time after which adaptivity will no longer be active.\n'
p16755
sS'cpp_type'
p16756
S'double'
p16757
sS'default'
p16758
S'1.79769e+308'
p16759
sS'name'
p16760
S'stop_time'
p16761
sS'required'
p16762
I00
sS'group_name'
p16763
Nsa(dp16764
S'description'
p16765
S'List of names of variables that will be associated with weight_values\n'
p16766
sS'cpp_type'
p16767
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16768
sS'default'
p16769
g3
sS'name'
p16770
S'weight_names'
p16771
sS'required'
p16772
I00
sS'group_name'
p16773
Nsa(dp16774
S'description'
p16775
S'List of values between 0 and 1 to weight the associated weight_names error by\n'
p16776
sS'cpp_type'
p16777
S'std::__1::vector<double, std::__1::allocator<double> >'
p16778
sS'default'
p16779
g3
sS'name'
p16780
S'weight_values'
p16781
sS'required'
p16782
I00
sS'group_name'
p16783
NsasS'name'
p16784
S'/Executioner/Adaptivity'
p16785
sa(dp16786
S'description'
p16787
g3
sS'subblocks'
p16788
(lp16789
(dp16790
S'description'
p16791
g3
sS'subblocks'
p16792
(lp16793
(dp16794
S'description'
p16795
g3
sS'subblocks'
p16796
NsS'parameters'
p16797
(lp16798
(dp16799
S'description'
p16800
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16801
sS'cpp_type'
p16802
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16803
sS'default'
p16804
g3
sS'name'
p16805
S'control_tags'
p16806
sS'required'
p16807
I00
sS'group_name'
p16808
S'Advanced'
p16809
sa(dp16810
S'description'
p16811
S'Set the enabled status of the MooseObject.\n'
p16812
sS'cpp_type'
p16813
S'bool'
p16814
sS'default'
p16815
S'1'
p16816
sS'name'
p16817
S'enable'
p16818
sS'required'
p16819
I00
sS'group_name'
p16820
S'Advanced'
p16821
sa(dp16822
S'description'
p16823
S'The maximum reachable order of the Adams-Bashforth Predictor\n'
p16824
sS'cpp_type'
p16825
S'int'
p16826
sS'default'
p16827
S'2'
p16828
sS'name'
p16829
S'order'
p16830
sS'required'
p16831
I00
sS'group_name'
p16832
Nsa(dp16833
S'description'
p16834
S'The scale factor for the predictor (can range from 0 to 1)\n'
p16835
sS'cpp_type'
p16836
S'double'
p16837
sS'default'
p16838
g3
sS'name'
p16839
S'scale'
p16840
sS'required'
p16841
I01
sS'group_name'
p16842
Nsa(dp16843
S'description'
p16844
S'Skip the predictor if the current solution time is in this list of times\n'
p16845
sS'cpp_type'
p16846
S'std::__1::vector<double, std::__1::allocator<double> >'
p16847
sS'default'
p16848
g3
sS'name'
p16849
S'skip_times'
p16850
sS'required'
p16851
I00
sS'group_name'
p16852
Nsa(dp16853
S'description'
p16854
S'Skip the predictor if the previous solution time is in this list of times\n'
p16855
sS'cpp_type'
p16856
S'std::__1::vector<double, std::__1::allocator<double> >'
p16857
sS'default'
p16858
g3
sS'name'
p16859
S'skip_times_old'
p16860
sS'required'
p16861
I00
sS'group_name'
p16862
Nsa(dp16863
S'description'
p16864
g3
sS'cpp_type'
p16865
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16866
sS'default'
p16867
S'AdamsPredictor'
p16868
sS'name'
p16869
S'type'
p16870
sS'required'
p16871
I00
sS'group_name'
p16872
NsasS'name'
p16873
S'/Executioner/Predictor/<type>/AdamsPredictor'
p16874
sa(dp16875
S'description'
p16876
g3
sS'subblocks'
p16877
NsS'parameters'
p16878
(lp16879
(dp16880
S'description'
p16881
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16882
sS'cpp_type'
p16883
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16884
sS'default'
p16885
g3
sS'name'
p16886
S'control_tags'
p16887
sS'required'
p16888
I00
sS'group_name'
p16889
S'Advanced'
p16890
sa(dp16891
S'description'
p16892
S'Set the enabled status of the MooseObject.\n'
p16893
sS'cpp_type'
p16894
S'bool'
p16895
sS'default'
p16896
S'1'
p16897
sS'name'
p16898
S'enable'
p16899
sS'required'
p16900
I00
sS'group_name'
p16901
S'Advanced'
p16902
sa(dp16903
S'description'
p16904
S'The scale factor for the predictor (can range from 0 to 1)\n'
p16905
sS'cpp_type'
p16906
S'double'
p16907
sS'default'
p16908
g3
sS'name'
p16909
S'scale'
p16910
sS'required'
p16911
I01
sS'group_name'
p16912
Nsa(dp16913
S'description'
p16914
S'Skip the predictor if the current solution time is in this list of times\n'
p16915
sS'cpp_type'
p16916
S'std::__1::vector<double, std::__1::allocator<double> >'
p16917
sS'default'
p16918
g3
sS'name'
p16919
S'skip_times'
p16920
sS'required'
p16921
I00
sS'group_name'
p16922
Nsa(dp16923
S'description'
p16924
S'Skip the predictor if the previous solution time is in this list of times\n'
p16925
sS'cpp_type'
p16926
S'std::__1::vector<double, std::__1::allocator<double> >'
p16927
sS'default'
p16928
g3
sS'name'
p16929
S'skip_times_old'
p16930
sS'required'
p16931
I00
sS'group_name'
p16932
Nsa(dp16933
S'description'
p16934
g3
sS'cpp_type'
p16935
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16936
sS'default'
p16937
S'SimplePredictor'
p16938
sS'name'
p16939
S'type'
p16940
sS'required'
p16941
I00
sS'group_name'
p16942
NsasS'name'
p16943
S'/Executioner/Predictor/<type>/SimplePredictor'
p16944
sasS'parameters'
p16945
NsS'name'
p16946
S'/Executioner/Predictor/<type>'
p16947
sasS'parameters'
p16948
(lp16949
(dp16950
S'description'
p16951
S'A string representing the Moose Object that will be built by this Action\n'
p16952
sS'cpp_type'
p16953
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16954
sS'default'
p16955
g3
sS'name'
p16956
S'type'
p16957
sS'required'
p16958
I01
sS'group_name'
p16959
NsasS'name'
p16960
S'/Executioner/Predictor'
p16961
sa(dp16962
S'description'
p16963
g3
sS'subblocks'
p16964
NsS'parameters'
p16965
(lp16966
(dp16967
S'name'
p16968
S'element_order'
p16969
sS'cpp_type'
p16970
S'MooseEnum'
p16971
sS'default'
p16972
S'AUTO'
p16973
sS'description'
p16974
S'Order of the quadrature for elements\n'
p16975
sS'required'
p16976
I00
sS'options'
p16977
S'AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH'
p16978
sS'group_name'
p16979
Nsa(dp16980
S'name'
p16981
S'order'
p16982
sS'cpp_type'
p16983
S'MooseEnum'
p16984
sS'default'
p16985
S'AUTO'
p16986
sS'description'
p16987
S'Order of the quadrature\n'
p16988
sS'required'
p16989
I00
sS'options'
p16990
S'AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH'
p16991
sS'group_name'
p16992
Nsa(dp16993
S'name'
p16994
S'side_order'
p16995
sS'cpp_type'
p16996
S'MooseEnum'
p16997
sS'default'
p16998
S'AUTO'
p16999
sS'description'
p17000
S'Order of the quadrature for sides\n'
p17001
sS'required'
p17002
I00
sS'options'
p17003
S'AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH'
p17004
sS'group_name'
p17005
Nsa(dp17006
S'name'
p17007
S'type'
p17008
sS'cpp_type'
p17009
S'MooseEnum'
p17010
sS'default'
p17011
S'GAUSS'
p17012
sS'description'
p17013
S'Type of the quadrature rule\n'
p17014
sS'required'
p17015
I00
sS'options'
p17016
S'CLOUGH CONICAL GAUSS GRID MONOMIAL SIMPSON TRAP GAUSS_LOBATTO'
p17017
sS'group_name'
p17018
NsasS'name'
p17019
S'/Executioner/Quadrature'
p17020
sa(dp17021
S'description'
p17022
g3
sS'subblocks'
p17023
(lp17024
(dp17025
S'description'
p17026
g3
sS'subblocks'
p17027
(lp17028
(dp17029
S'description'
p17030
g3
sS'subblocks'
p17031
NsS'parameters'
p17032
(lp17033
(dp17034
S'description'
p17035
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17036
sS'cpp_type'
p17037
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17038
sS'default'
p17039
g3
sS'name'
p17040
S'control_tags'
p17041
sS'required'
p17042
I00
sS'group_name'
p17043
S'Advanced'
p17044
sa(dp17045
S'description'
p17046
S'Set the enabled status of the MooseObject.\n'
p17047
sS'cpp_type'
p17048
S'bool'
p17049
sS'default'
p17050
S'1'
p17051
sS'name'
p17052
S'enable'
p17053
sS'required'
p17054
I00
sS'group_name'
p17055
S'Advanced'
p17056
sa(dp17057
S'description'
p17058
S'If true, use LStableDirk4 to bootstrap this method.\n'
p17059
sS'cpp_type'
p17060
S'bool'
p17061
sS'default'
p17062
S'1'
p17063
sS'name'
p17064
S'safe_start'
p17065
sS'required'
p17066
I00
sS'group_name'
p17067
Nsa(dp17068
S'description'
p17069
g3
sS'cpp_type'
p17070
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17071
sS'default'
p17072
S'AStableDirk4'
p17073
sS'name'
p17074
S'type'
p17075
sS'required'
p17076
I00
sS'group_name'
p17077
NsasS'name'
p17078
S'/Executioner/TimeIntegrator/<type>/AStableDirk4'
p17079
sa(dp17080
S'description'
p17081
g3
sS'subblocks'
p17082
NsS'parameters'
p17083
(lp17084
(dp17085
S'description'
p17086
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17087
sS'cpp_type'
p17088
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17089
sS'default'
p17090
g3
sS'name'
p17091
S'control_tags'
p17092
sS'required'
p17093
I00
sS'group_name'
p17094
S'Advanced'
p17095
sa(dp17096
S'description'
p17097
S'Set the enabled status of the MooseObject.\n'
p17098
sS'cpp_type'
p17099
S'bool'
p17100
sS'default'
p17101
S'1'
p17102
sS'name'
p17103
S'enable'
p17104
sS'required'
p17105
I00
sS'group_name'
p17106
S'Advanced'
p17107
sa(dp17108
S'description'
p17109
g3
sS'cpp_type'
p17110
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17111
sS'default'
p17112
S'BDF2'
p17113
sS'name'
p17114
S'type'
p17115
sS'required'
p17116
I00
sS'group_name'
p17117
NsasS'name'
p17118
S'/Executioner/TimeIntegrator/<type>/BDF2'
p17119
sa(dp17120
S'description'
p17121
g3
sS'subblocks'
p17122
NsS'parameters'
p17123
(lp17124
(dp17125
S'description'
p17126
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17127
sS'cpp_type'
p17128
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17129
sS'default'
p17130
g3
sS'name'
p17131
S'control_tags'
p17132
sS'required'
p17133
I00
sS'group_name'
p17134
S'Advanced'
p17135
sa(dp17136
S'description'
p17137
S'Set the enabled status of the MooseObject.\n'
p17138
sS'cpp_type'
p17139
S'bool'
p17140
sS'default'
p17141
S'1'
p17142
sS'name'
p17143
S'enable'
p17144
sS'required'
p17145
I00
sS'group_name'
p17146
S'Advanced'
p17147
sa(dp17148
S'description'
p17149
g3
sS'cpp_type'
p17150
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17151
sS'default'
p17152
S'CrankNicolson'
p17153
sS'name'
p17154
S'type'
p17155
sS'required'
p17156
I00
sS'group_name'
p17157
NsasS'name'
p17158
S'/Executioner/TimeIntegrator/<type>/CrankNicolson'
p17159
sa(dp17160
S'description'
p17161
g3
sS'subblocks'
p17162
NsS'parameters'
p17163
(lp17164
(dp17165
S'description'
p17166
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17167
sS'cpp_type'
p17168
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17169
sS'default'
p17170
g3
sS'name'
p17171
S'control_tags'
p17172
sS'required'
p17173
I00
sS'group_name'
p17174
S'Advanced'
p17175
sa(dp17176
S'description'
p17177
S'Set the enabled status of the MooseObject.\n'
p17178
sS'cpp_type'
p17179
S'bool'
p17180
sS'default'
p17181
S'1'
p17182
sS'name'
p17183
S'enable'
p17184
sS'required'
p17185
I00
sS'group_name'
p17186
S'Advanced'
p17187
sa(dp17188
S'description'
p17189
g3
sS'cpp_type'
p17190
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17191
sS'default'
p17192
S'ExplicitEuler'
p17193
sS'name'
p17194
S'type'
p17195
sS'required'
p17196
I00
sS'group_name'
p17197
NsasS'name'
p17198
S'/Executioner/TimeIntegrator/<type>/ExplicitEuler'
p17199
sa(dp17200
S'description'
p17201
g3
sS'subblocks'
p17202
NsS'parameters'
p17203
(lp17204
(dp17205
S'description'
p17206
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17207
sS'cpp_type'
p17208
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17209
sS'default'
p17210
g3
sS'name'
p17211
S'control_tags'
p17212
sS'required'
p17213
I00
sS'group_name'
p17214
S'Advanced'
p17215
sa(dp17216
S'description'
p17217
S'Set the enabled status of the MooseObject.\n'
p17218
sS'cpp_type'
p17219
S'bool'
p17220
sS'default'
p17221
S'1'
p17222
sS'name'
p17223
S'enable'
p17224
sS'required'
p17225
I00
sS'group_name'
p17226
S'Advanced'
p17227
sa(dp17228
S'description'
p17229
g3
sS'cpp_type'
p17230
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17231
sS'default'
p17232
S'ExplicitMidpoint'
p17233
sS'name'
p17234
S'type'
p17235
sS'required'
p17236
I00
sS'group_name'
p17237
NsasS'name'
p17238
S'/Executioner/TimeIntegrator/<type>/ExplicitMidpoint'
p17239
sa(dp17240
S'description'
p17241
g3
sS'subblocks'
p17242
NsS'parameters'
p17243
(lp17244
(dp17245
S'description'
p17246
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17247
sS'cpp_type'
p17248
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17249
sS'default'
p17250
g3
sS'name'
p17251
S'control_tags'
p17252
sS'required'
p17253
I00
sS'group_name'
p17254
S'Advanced'
p17255
sa(dp17256
S'description'
p17257
S'Set the enabled status of the MooseObject.\n'
p17258
sS'cpp_type'
p17259
S'bool'
p17260
sS'default'
p17261
S'1'
p17262
sS'name'
p17263
S'enable'
p17264
sS'required'
p17265
I00
sS'group_name'
p17266
S'Advanced'
p17267
sa(dp17268
S'description'
p17269
g3
sS'cpp_type'
p17270
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17271
sS'default'
p17272
S'ExplicitTVDRK2'
p17273
sS'name'
p17274
S'type'
p17275
sS'required'
p17276
I00
sS'group_name'
p17277
NsasS'name'
p17278
S'/Executioner/TimeIntegrator/<type>/ExplicitTVDRK2'
p17279
sa(dp17280
S'description'
p17281
g3
sS'subblocks'
p17282
NsS'parameters'
p17283
(lp17284
(dp17285
S'description'
p17286
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17287
sS'cpp_type'
p17288
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17289
sS'default'
p17290
g3
sS'name'
p17291
S'control_tags'
p17292
sS'required'
p17293
I00
sS'group_name'
p17294
S'Advanced'
p17295
sa(dp17296
S'description'
p17297
S'Set the enabled status of the MooseObject.\n'
p17298
sS'cpp_type'
p17299
S'bool'
p17300
sS'default'
p17301
S'1'
p17302
sS'name'
p17303
S'enable'
p17304
sS'required'
p17305
I00
sS'group_name'
p17306
S'Advanced'
p17307
sa(dp17308
S'description'
p17309
g3
sS'cpp_type'
p17310
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17311
sS'default'
p17312
S'Heun'
p17313
sS'name'
p17314
S'type'
p17315
sS'required'
p17316
I00
sS'group_name'
p17317
NsasS'name'
p17318
S'/Executioner/TimeIntegrator/<type>/Heun'
p17319
sa(dp17320
S'description'
p17321
g3
sS'subblocks'
p17322
NsS'parameters'
p17323
(lp17324
(dp17325
S'description'
p17326
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17327
sS'cpp_type'
p17328
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17329
sS'default'
p17330
g3
sS'name'
p17331
S'control_tags'
p17332
sS'required'
p17333
I00
sS'group_name'
p17334
S'Advanced'
p17335
sa(dp17336
S'description'
p17337
S'Set the enabled status of the MooseObject.\n'
p17338
sS'cpp_type'
p17339
S'bool'
p17340
sS'default'
p17341
S'1'
p17342
sS'name'
p17343
S'enable'
p17344
sS'required'
p17345
I00
sS'group_name'
p17346
S'Advanced'
p17347
sa(dp17348
S'description'
p17349
g3
sS'cpp_type'
p17350
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17351
sS'default'
p17352
S'ImplicitEuler'
p17353
sS'name'
p17354
S'type'
p17355
sS'required'
p17356
I00
sS'group_name'
p17357
NsasS'name'
p17358
S'/Executioner/TimeIntegrator/<type>/ImplicitEuler'
p17359
sa(dp17360
S'description'
p17361
g3
sS'subblocks'
p17362
NsS'parameters'
p17363
(lp17364
(dp17365
S'description'
p17366
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17367
sS'cpp_type'
p17368
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17369
sS'default'
p17370
g3
sS'name'
p17371
S'control_tags'
p17372
sS'required'
p17373
I00
sS'group_name'
p17374
S'Advanced'
p17375
sa(dp17376
S'description'
p17377
S'Set the enabled status of the MooseObject.\n'
p17378
sS'cpp_type'
p17379
S'bool'
p17380
sS'default'
p17381
S'1'
p17382
sS'name'
p17383
S'enable'
p17384
sS'required'
p17385
I00
sS'group_name'
p17386
S'Advanced'
p17387
sa(dp17388
S'description'
p17389
g3
sS'cpp_type'
p17390
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17391
sS'default'
p17392
S'ImplicitMidpoint'
p17393
sS'name'
p17394
S'type'
p17395
sS'required'
p17396
I00
sS'group_name'
p17397
NsasS'name'
p17398
S'/Executioner/TimeIntegrator/<type>/ImplicitMidpoint'
p17399
sa(dp17400
S'description'
p17401
g3
sS'subblocks'
p17402
NsS'parameters'
p17403
(lp17404
(dp17405
S'description'
p17406
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17407
sS'cpp_type'
p17408
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17409
sS'default'
p17410
g3
sS'name'
p17411
S'control_tags'
p17412
sS'required'
p17413
I00
sS'group_name'
p17414
S'Advanced'
p17415
sa(dp17416
S'description'
p17417
S'Set the enabled status of the MooseObject.\n'
p17418
sS'cpp_type'
p17419
S'bool'
p17420
sS'default'
p17421
S'1'
p17422
sS'name'
p17423
S'enable'
p17424
sS'required'
p17425
I00
sS'group_name'
p17426
S'Advanced'
p17427
sa(dp17428
S'description'
p17429
g3
sS'cpp_type'
p17430
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17431
sS'default'
p17432
S'LStableDirk2'
p17433
sS'name'
p17434
S'type'
p17435
sS'required'
p17436
I00
sS'group_name'
p17437
NsasS'name'
p17438
S'/Executioner/TimeIntegrator/<type>/LStableDirk2'
p17439
sa(dp17440
S'description'
p17441
g3
sS'subblocks'
p17442
NsS'parameters'
p17443
(lp17444
(dp17445
S'description'
p17446
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17447
sS'cpp_type'
p17448
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17449
sS'default'
p17450
g3
sS'name'
p17451
S'control_tags'
p17452
sS'required'
p17453
I00
sS'group_name'
p17454
S'Advanced'
p17455
sa(dp17456
S'description'
p17457
S'Set the enabled status of the MooseObject.\n'
p17458
sS'cpp_type'
p17459
S'bool'
p17460
sS'default'
p17461
S'1'
p17462
sS'name'
p17463
S'enable'
p17464
sS'required'
p17465
I00
sS'group_name'
p17466
S'Advanced'
p17467
sa(dp17468
S'description'
p17469
g3
sS'cpp_type'
p17470
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17471
sS'default'
p17472
S'LStableDirk3'
p17473
sS'name'
p17474
S'type'
p17475
sS'required'
p17476
I00
sS'group_name'
p17477
NsasS'name'
p17478
S'/Executioner/TimeIntegrator/<type>/LStableDirk3'
p17479
sa(dp17480
S'description'
p17481
g3
sS'subblocks'
p17482
NsS'parameters'
p17483
(lp17484
(dp17485
S'description'
p17486
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17487
sS'cpp_type'
p17488
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17489
sS'default'
p17490
g3
sS'name'
p17491
S'control_tags'
p17492
sS'required'
p17493
I00
sS'group_name'
p17494
S'Advanced'
p17495
sa(dp17496
S'description'
p17497
S'Set the enabled status of the MooseObject.\n'
p17498
sS'cpp_type'
p17499
S'bool'
p17500
sS'default'
p17501
S'1'
p17502
sS'name'
p17503
S'enable'
p17504
sS'required'
p17505
I00
sS'group_name'
p17506
S'Advanced'
p17507
sa(dp17508
S'description'
p17509
g3
sS'cpp_type'
p17510
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17511
sS'default'
p17512
S'LStableDirk4'
p17513
sS'name'
p17514
S'type'
p17515
sS'required'
p17516
I00
sS'group_name'
p17517
NsasS'name'
p17518
S'/Executioner/TimeIntegrator/<type>/LStableDirk4'
p17519
sa(dp17520
S'description'
p17521
g3
sS'subblocks'
p17522
NsS'parameters'
p17523
(lp17524
(dp17525
S'description'
p17526
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17527
sS'cpp_type'
p17528
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17529
sS'default'
p17530
g3
sS'name'
p17531
S'control_tags'
p17532
sS'required'
p17533
I00
sS'group_name'
p17534
S'Advanced'
p17535
sa(dp17536
S'description'
p17537
S'Set the enabled status of the MooseObject.\n'
p17538
sS'cpp_type'
p17539
S'bool'
p17540
sS'default'
p17541
S'1'
p17542
sS'name'
p17543
S'enable'
p17544
sS'required'
p17545
I00
sS'group_name'
p17546
S'Advanced'
p17547
sa(dp17548
S'description'
p17549
g3
sS'cpp_type'
p17550
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17551
sS'default'
p17552
S'Ralston'
p17553
sS'name'
p17554
S'type'
p17555
sS'required'
p17556
I00
sS'group_name'
p17557
NsasS'name'
p17558
S'/Executioner/TimeIntegrator/<type>/Ralston'
p17559
sa(dp17560
S'description'
p17561
g3
sS'subblocks'
p17562
NsS'parameters'
p17563
(lp17564
(dp17565
S'description'
p17566
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17567
sS'cpp_type'
p17568
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17569
sS'default'
p17570
g3
sS'name'
p17571
S'control_tags'
p17572
sS'required'
p17573
I00
sS'group_name'
p17574
S'Advanced'
p17575
sa(dp17576
S'description'
p17577
S'Set the enabled status of the MooseObject.\n'
p17578
sS'cpp_type'
p17579
S'bool'
p17580
sS'default'
p17581
S'1'
p17582
sS'name'
p17583
S'enable'
p17584
sS'required'
p17585
I00
sS'group_name'
p17586
S'Advanced'
p17587
sa(dp17588
S'description'
p17589
g3
sS'cpp_type'
p17590
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17591
sS'default'
p17592
S'SteadyState'
p17593
sS'name'
p17594
S'type'
p17595
sS'required'
p17596
I00
sS'group_name'
p17597
NsasS'name'
p17598
S'/Executioner/TimeIntegrator/<type>/SteadyState'
p17599
sasS'parameters'
p17600
NsS'name'
p17601
S'/Executioner/TimeIntegrator/<type>'
p17602
sasS'parameters'
p17603
(lp17604
(dp17605
S'description'
p17606
S'A string representing the Moose Object that will be built by this Action\n'
p17607
sS'cpp_type'
p17608
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17609
sS'default'
p17610
g3
sS'name'
p17611
S'type'
p17612
sS'required'
p17613
I01
sS'group_name'
p17614
NsasS'name'
p17615
S'/Executioner/TimeIntegrator'
p17616
sa(dp17617
S'description'
p17618
g3
sS'subblocks'
p17619
(lp17620
(dp17621
S'description'
p17622
g3
sS'subblocks'
p17623
(lp17624
(dp17625
S'description'
p17626
g3
sS'subblocks'
p17627
NsS'parameters'
p17628
(lp17629
(dp17630
S'description'
p17631
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17632
sS'cpp_type'
p17633
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17634
sS'default'
p17635
g3
sS'name'
p17636
S'control_tags'
p17637
sS'required'
p17638
I00
sS'group_name'
p17639
S'Advanced'
p17640
sa(dp17641
S'description'
p17642
S'Initial time step size\n'
p17643
sS'cpp_type'
p17644
S'double'
p17645
sS'default'
p17646
g3
sS'name'
p17647
S'dt'
p17648
sS'required'
p17649
I01
sS'group_name'
p17650
Nsa(dp17651
S'description'
p17652
S'Maximum acceptable error.\n'
p17653
sS'cpp_type'
p17654
S'double'
p17655
sS'default'
p17656
g3
sS'name'
p17657
S'e_max'
p17658
sS'required'
p17659
I01
sS'group_name'
p17660
Nsa(dp17661
S'description'
p17662
S'Target error tolerance.\n'
p17663
sS'cpp_type'
p17664
S'double'
p17665
sS'default'
p17666
g3
sS'name'
p17667
S'e_tol'
p17668
sS'required'
p17669
I01
sS'group_name'
p17670
Nsa(dp17671
S'description'
p17672
S'Set the enabled status of the MooseObject.\n'
p17673
sS'cpp_type'
p17674
S'bool'
p17675
sS'default'
p17676
S'1'
p17677
sS'name'
p17678
S'enable'
p17679
sS'required'
p17680
I00
sS'group_name'
p17681
S'Advanced'
p17682
sa(dp17683
S'description'
p17684
S'Maximum ratio that the time step can increase.\n'
p17685
sS'cpp_type'
p17686
S'double'
p17687
sS'default'
p17688
S'1e+09'
p17689
sS'name'
p17690
S'max_increase'
p17691
sS'required'
p17692
I00
sS'group_name'
p17693
Nsa(dp17694
S'description'
p17695
S'Use when restarting a calculation to force a change in dt.\n'
p17696
sS'cpp_type'
p17697
S'bool'
p17698
sS'default'
p17699
S'0'
p17700
sS'name'
p17701
S'reset_dt'
p17702
sS'required'
p17703
I00
sS'group_name'
p17704
Nsa(dp17705
S'description'
p17706
S'scaling parameter for dt selection\n'
p17707
sS'cpp_type'
p17708
S'double'
p17709
sS'default'
p17710
S'0.8'
p17711
sS'name'
p17712
S'scaling_parameter'
p17713
sS'required'
p17714
I00
sS'group_name'
p17715
Nsa(dp17716
S'description'
p17717
S'when to start taking adaptive time steps\n'
p17718
sS'cpp_type'
p17719
S'int'
p17720
sS'default'
p17721
S'2'
p17722
sS'name'
p17723
S'start_adapting'
p17724
sS'required'
p17725
I00
sS'group_name'
p17726
Nsa(dp17727
S'description'
p17728
S'the number of time steps before recalculating dt\n'
p17729
sS'cpp_type'
p17730
S'int'
p17731
sS'default'
p17732
S'1'
p17733
sS'name'
p17734
S'steps_between_increase'
p17735
sS'required'
p17736
I00
sS'group_name'
p17737
Nsa(dp17738
S'description'
p17739
g3
sS'cpp_type'
p17740
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17741
sS'default'
p17742
S'AB2PredictorCorrector'
p17743
sS'name'
p17744
S'type'
p17745
sS'required'
p17746
I00
sS'group_name'
p17747
NsasS'name'
p17748
S'/Executioner/TimeStepper/<type>/AB2PredictorCorrector'
p17749
sa(dp17750
S'description'
p17751
g3
sS'subblocks'
p17752
NsS'parameters'
p17753
(lp17754
(dp17755
S'description'
p17756
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17757
sS'cpp_type'
p17758
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17759
sS'default'
p17760
g3
sS'name'
p17761
S'control_tags'
p17762
sS'required'
p17763
I00
sS'group_name'
p17764
S'Advanced'
p17765
sa(dp17766
S'description'
p17767
S'Size of the time step\n'
p17768
sS'cpp_type'
p17769
S'double'
p17770
sS'default'
p17771
g3
sS'name'
p17772
S'dt'
p17773
sS'required'
p17774
I01
sS'group_name'
p17775
Nsa(dp17776
S'description'
p17777
S'Set the enabled status of the MooseObject.\n'
p17778
sS'cpp_type'
p17779
S'bool'
p17780
sS'default'
p17781
S'1'
p17782
sS'name'
p17783
S'enable'
p17784
sS'required'
p17785
I00
sS'group_name'
p17786
S'Advanced'
p17787
sa(dp17788
S'description'
p17789
S'Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.\n'
p17790
sS'cpp_type'
p17791
S'double'
p17792
sS'default'
p17793
S'2'
p17794
sS'name'
p17795
S'growth_factor'
p17796
sS'required'
p17797
I00
sS'group_name'
p17798
Nsa(dp17799
S'description'
p17800
S'Use when restarting a calculation to force a change in dt.\n'
p17801
sS'cpp_type'
p17802
S'bool'
p17803
sS'default'
p17804
S'0'
p17805
sS'name'
p17806
S'reset_dt'
p17807
sS'required'
p17808
I00
sS'group_name'
p17809
Nsa(dp17810
S'description'
p17811
g3
sS'cpp_type'
p17812
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17813
sS'default'
p17814
S'ConstantDT'
p17815
sS'name'
p17816
S'type'
p17817
sS'required'
p17818
I00
sS'group_name'
p17819
NsasS'name'
p17820
S'/Executioner/TimeStepper/<type>/ConstantDT'
p17821
sa(dp17822
S'description'
p17823
g3
sS'subblocks'
p17824
NsS'parameters'
p17825
(lp17826
(dp17827
S'description'
p17828
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17829
sS'cpp_type'
p17830
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17831
sS'default'
p17832
g3
sS'name'
p17833
S'control_tags'
p17834
sS'required'
p17835
I00
sS'group_name'
p17836
S'Advanced'
p17837
sa(dp17838
S'description'
p17839
S'The initial time step size.\n'
p17840
sS'cpp_type'
p17841
S'double'
p17842
sS'default'
p17843
S'1'
p17844
sS'name'
p17845
S'dt'
p17846
sS'required'
p17847
I00
sS'group_name'
p17848
Nsa(dp17849
S'description'
p17850
S'Maximum acceptable error.\n'
p17851
sS'cpp_type'
p17852
S'double'
p17853
sS'default'
p17854
g3
sS'name'
p17855
S'e_max'
p17856
sS'required'
p17857
I01
sS'group_name'
p17858
Nsa(dp17859
S'description'
p17860
S'Target error tolerance.\n'
p17861
sS'cpp_type'
p17862
S'double'
p17863
sS'default'
p17864
g3
sS'name'
p17865
S'e_tol'
p17866
sS'required'
p17867
I01
sS'group_name'
p17868
Nsa(dp17869
S'description'
p17870
S'Set the enabled status of the MooseObject.\n'
p17871
sS'cpp_type'
p17872
S'bool'
p17873
sS'default'
p17874
S'1'
p17875
sS'name'
p17876
S'enable'
p17877
sS'required'
p17878
I00
sS'group_name'
p17879
S'Advanced'
p17880
sa(dp17881
S'description'
p17882
S'Maximum ratio that the time step can increase.\n'
p17883
sS'cpp_type'
p17884
S'double'
p17885
sS'default'
p17886
S'1e+09'
p17887
sS'name'
p17888
S'max_increase'
p17889
sS'required'
p17890
I00
sS'group_name'
p17891
Nsa(dp17892
S'description'
p17893
S'Use when restarting a calculation to force a change in dt.\n'
p17894
sS'cpp_type'
p17895
S'bool'
p17896
sS'default'
p17897
S'0'
p17898
sS'name'
p17899
S'reset_dt'
p17900
sS'required'
p17901
I00
sS'group_name'
p17902
Nsa(dp17903
S'description'
p17904
g3
sS'cpp_type'
p17905
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17906
sS'default'
p17907
S'DT2'
p17908
sS'name'
p17909
S'type'
p17910
sS'required'
p17911
I00
sS'group_name'
p17912
NsasS'name'
p17913
S'/Executioner/TimeStepper/<type>/DT2'
p17914
sa(dp17915
S'description'
p17916
S'Solves the Transient problem at a sequence of time points taken from a specified exodus file.\n'
p17917
sS'subblocks'
p17918
NsS'parameters'
p17919
(lp17920
(dp17921
S'description'
p17922
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17923
sS'cpp_type'
p17924
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17925
sS'default'
p17926
g3
sS'name'
p17927
S'control_tags'
p17928
sS'required'
p17929
I00
sS'group_name'
p17930
S'Advanced'
p17931
sa(dp17932
S'description'
p17933
S'Set the enabled status of the MooseObject.\n'
p17934
sS'cpp_type'
p17935
S'bool'
p17936
sS'default'
p17937
S'1'
p17938
sS'name'
p17939
S'enable'
p17940
sS'required'
p17941
I00
sS'group_name'
p17942
S'Advanced'
p17943
sa(dp17944
S'description'
p17945
S'The name of the mesh file to extract the time sequence from (must be an exodusII file).\n'
p17946
sS'cpp_type'
p17947
S'MeshFileName'
p17948
sS'default'
p17949
g3
sS'name'
p17950
S'mesh'
p17951
sS'required'
p17952
I01
sS'group_name'
p17953
Nsa(dp17954
S'description'
p17955
S'Use when restarting a calculation to force a change in dt.\n'
p17956
sS'cpp_type'
p17957
S'bool'
p17958
sS'default'
p17959
S'0'
p17960
sS'name'
p17961
S'reset_dt'
p17962
sS'required'
p17963
I00
sS'group_name'
p17964
Nsa(dp17965
S'description'
p17966
g3
sS'cpp_type'
p17967
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17968
sS'default'
p17969
S'ExodusTimeSequenceStepper'
p17970
sS'name'
p17971
S'type'
p17972
sS'required'
p17973
I00
sS'group_name'
p17974
NsasS'name'
p17975
S'/Executioner/TimeStepper/<type>/ExodusTimeSequenceStepper'
p17976
sa(dp17977
S'description'
p17978
g3
sS'subblocks'
p17979
NsS'parameters'
p17980
(lp17981
(dp17982
S'description'
p17983
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17984
sS'cpp_type'
p17985
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17986
sS'default'
p17987
g3
sS'name'
p17988
S'control_tags'
p17989
sS'required'
p17990
I00
sS'group_name'
p17991
S'Advanced'
p17992
sa(dp17993
S'description'
p17994
S'Set the enabled status of the MooseObject.\n'
p17995
sS'cpp_type'
p17996
S'bool'
p17997
sS'default'
p17998
S'1'
p17999
sS'name'
p18000
S'enable'
p18001
sS'required'
p18002
I00
sS'group_name'
p18003
S'Advanced'
p18004
sa(dp18005
S'description'
p18006
S'Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.\n'
p18007
sS'cpp_type'
p18008
S'double'
p18009
sS'default'
p18010
S'1.79769e+308'
p18011
sS'name'
p18012
S'growth_factor'
p18013
sS'required'
p18014
I00
sS'group_name'
p18015
Nsa(dp18016
S'description'
p18017
S'Whether or not to interpolate DT between times.  This is true by default for historical reasons.\n'
p18018
sS'cpp_type'
p18019
S'bool'
p18020
sS'default'
p18021
S'1'
p18022
sS'name'
p18023
S'interpolate'
p18024
sS'required'
p18025
I00
sS'group_name'
p18026
Nsa(dp18027
S'description'
p18028
S'The minimal dt to take.\n'
p18029
sS'cpp_type'
p18030
S'double'
p18031
sS'default'
p18032
S'0'
p18033
sS'name'
p18034
S'min_dt'
p18035
sS'required'
p18036
I00
sS'group_name'
p18037
Nsa(dp18038
S'description'
p18039
S'Use when restarting a calculation to force a change in dt.\n'
p18040
sS'cpp_type'
p18041
S'bool'
p18042
sS'default'
p18043
S'0'
p18044
sS'name'
p18045
S'reset_dt'
p18046
sS'required'
p18047
I00
sS'group_name'
p18048
Nsa(dp18049
S'description'
p18050
S'The values of dt\n'
p18051
sS'cpp_type'
p18052
S'std::__1::vector<double, std::__1::allocator<double> >'
p18053
sS'default'
p18054
g3
sS'name'
p18055
S'time_dt'
p18056
sS'required'
p18057
I01
sS'group_name'
p18058
Nsa(dp18059
S'description'
p18060
S'The values of t\n'
p18061
sS'cpp_type'
p18062
S'std::__1::vector<double, std::__1::allocator<double> >'
p18063
sS'default'
p18064
g3
sS'name'
p18065
S'time_t'
p18066
sS'required'
p18067
I01
sS'group_name'
p18068
Nsa(dp18069
S'description'
p18070
g3
sS'cpp_type'
p18071
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18072
sS'default'
p18073
S'FunctionDT'
p18074
sS'name'
p18075
S'type'
p18076
sS'required'
p18077
I00
sS'group_name'
p18078
NsasS'name'
p18079
S'/Executioner/TimeStepper/<type>/FunctionDT'
p18080
sa(dp18081
S'description'
p18082
S'Adjust the timestep based on the number of iterations\n'
p18083
sS'subblocks'
p18084
NsS'parameters'
p18085
(lp18086
(dp18087
S'description'
p18088
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18089
sS'cpp_type'
p18090
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18091
sS'default'
p18092
g3
sS'name'
p18093
S'control_tags'
p18094
sS'required'
p18095
I00
sS'group_name'
p18096
S'Advanced'
p18097
sa(dp18098
S'description'
p18099
S"Factor to apply to timestep if difficult convergence (if 'optimal_iterations' is specified) or if solution failed\n"
p18100
sS'cpp_type'
p18101
S'double'
p18102
sS'default'
p18103
S'0.5'
p18104
sS'name'
p18105
S'cutback_factor'
p18106
sS'required'
p18107
I00
sS'group_name'
p18108
Nsa(dp18109
S'description'
p18110
S'The default timestep size between solves\n'
p18111
sS'cpp_type'
p18112
S'double'
p18113
sS'default'
p18114
g3
sS'name'
p18115
S'dt'
p18116
sS'required'
p18117
I01
sS'group_name'
p18118
Nsa(dp18119
S'description'
p18120
S'Set the enabled status of the MooseObject.\n'
p18121
sS'cpp_type'
p18122
S'bool'
p18123
sS'default'
p18124
S'1'
p18125
sS'name'
p18126
S'enable'
p18127
sS'required'
p18128
I00
sS'group_name'
p18129
S'Advanced'
p18130
sa(dp18131
S'description'
p18132
S'Forces the timestepper to take a step that is consistent with points defined in the function\n'
p18133
sS'cpp_type'
p18134
S'bool'
p18135
sS'default'
p18136
S'0'
p18137
sS'name'
p18138
S'force_step_every_function_point'
p18139
sS'required'
p18140
I00
sS'group_name'
p18141
Nsa(dp18142
S'description'
p18143
S"Factor to apply to timestep if easy convergence (if 'optimal_iterations' is specified) or if recovering from failed solve\n"
p18144
sS'cpp_type'
p18145
S'double'
p18146
sS'default'
p18147
S'2'
p18148
sS'name'
p18149
S'growth_factor'
p18150
sS'required'
p18151
I00
sS'group_name'
p18152
Nsa(dp18153
S'description'
p18154
S"Attempt to grow/shrink timestep if the iteration count is below/above 'optimal_iterations plus/minus iteration_window' (default = optimal_iterations/5).\n"
p18155
sS'cpp_type'
p18156
S'int'
p18157
sS'default'
p18158
g3
sS'name'
p18159
S'iteration_window'
p18160
sS'required'
p18161
I00
sS'group_name'
p18162
Nsa(dp18163
S'description'
p18164
S'The ratio of linear to nonlinear iterations to determine target linear iterations and window for adaptive timestepping (default = 25)\n'
p18165
sS'cpp_type'
p18166
S'unsigned int'
p18167
sS'default'
p18168
g3
sS'name'
p18169
S'linear_iteration_ratio'
p18170
sS'required'
p18171
I00
sS'group_name'
p18172
Nsa(dp18173
S'description'
p18174
S'The absolute value of the maximum change in timestep_limiting_function over a timestep\n'
p18175
sS'cpp_type'
p18176
S'double'
p18177
sS'default'
p18178
g3
sS'name'
p18179
S'max_function_change'
p18180
sS'required'
p18181
I00
sS'group_name'
p18182
Nsa(dp18183
S'description'
p18184
S'The target number of nonlinear iterations for adaptive timestepping\n'
p18185
sS'cpp_type'
p18186
S'int'
p18187
sS'default'
p18188
g3
sS'name'
p18189
S'optimal_iterations'
p18190
sS'required'
p18191
I00
sS'group_name'
p18192
Nsa(dp18193
S'description'
p18194
S'If specified, the postprocessor value is used as an upper limit for the current time step length\n'
p18195
sS'cpp_type'
p18196
S'PostprocessorName'
p18197
sS'default'
p18198
g3
sS'name'
p18199
S'postprocessor_dtlim'
p18200
sS'required'
p18201
I00
sS'group_name'
p18202
Nsa(dp18203
S'description'
p18204
S'Use when restarting a calculation to force a change in dt.\n'
p18205
sS'cpp_type'
p18206
S'bool'
p18207
sS'default'
p18208
S'0'
p18209
sS'name'
p18210
S'reset_dt'
p18211
sS'required'
p18212
I00
sS'group_name'
p18213
Nsa(dp18214
S'description'
p18215
S'The values of dt\n'
p18216
sS'cpp_type'
p18217
S'std::__1::vector<double, std::__1::allocator<double> >'
p18218
sS'default'
p18219
g3
sS'name'
p18220
S'time_dt'
p18221
sS'required'
p18222
I00
sS'group_name'
p18223
Nsa(dp18224
S'description'
p18225
S'The values of t\n'
p18226
sS'cpp_type'
p18227
S'std::__1::vector<double, std::__1::allocator<double> >'
p18228
sS'default'
p18229
g3
sS'name'
p18230
S'time_t'
p18231
sS'required'
p18232
I00
sS'group_name'
p18233
Nsa(dp18234
S'description'
p18235
S"A 'Piecewise' type function used to control the timestep by limiting the change in the function over a timestep\n"
p18236
sS'cpp_type'
p18237
S'FunctionName'
p18238
sS'default'
p18239
g3
sS'name'
p18240
S'timestep_limiting_function'
p18241
sS'required'
p18242
I00
sS'group_name'
p18243
Nsa(dp18244
S'description'
p18245
g3
sS'cpp_type'
p18246
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18247
sS'default'
p18248
S'IterationAdaptiveDT'
p18249
sS'name'
p18250
S'type'
p18251
sS'required'
p18252
I00
sS'group_name'
p18253
NsasS'name'
p18254
S'/Executioner/TimeStepper/<type>/IterationAdaptiveDT'
p18255
sa(dp18256
S'description'
p18257
g3
sS'subblocks'
p18258
NsS'parameters'
p18259
(lp18260
(dp18261
S'description'
p18262
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18263
sS'cpp_type'
p18264
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18265
sS'default'
p18266
g3
sS'name'
p18267
S'control_tags'
p18268
sS'required'
p18269
I00
sS'group_name'
p18270
S'Advanced'
p18271
sa(dp18272
S'description'
p18273
S'Initial value of dt\n'
p18274
sS'cpp_type'
p18275
S'double'
p18276
sS'default'
p18277
g3
sS'name'
p18278
S'dt'
p18279
sS'required'
p18280
I00
sS'group_name'
p18281
Nsa(dp18282
S'description'
p18283
S'Set the enabled status of the MooseObject.\n'
p18284
sS'cpp_type'
p18285
S'bool'
p18286
sS'default'
p18287
S'1'
p18288
sS'name'
p18289
S'enable'
p18290
sS'required'
p18291
I00
sS'group_name'
p18292
S'Advanced'
p18293
sa(dp18294
S'description'
p18295
S'The name of the postprocessor that computes the dt\n'
p18296
sS'cpp_type'
p18297
S'PostprocessorName'
p18298
sS'default'
p18299
g3
sS'name'
p18300
S'postprocessor'
p18301
sS'required'
p18302
I01
sS'group_name'
p18303
Nsa(dp18304
S'description'
p18305
S'Use when restarting a calculation to force a change in dt.\n'
p18306
sS'cpp_type'
p18307
S'bool'
p18308
sS'default'
p18309
S'0'
p18310
sS'name'
p18311
S'reset_dt'
p18312
sS'required'
p18313
I00
sS'group_name'
p18314
Nsa(dp18315
S'description'
p18316
g3
sS'cpp_type'
p18317
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18318
sS'default'
p18319
S'PostprocessorDT'
p18320
sS'name'
p18321
S'type'
p18322
sS'required'
p18323
I00
sS'group_name'
p18324
NsasS'name'
p18325
S'/Executioner/TimeStepper/<type>/PostprocessorDT'
p18326
sa(dp18327
S'description'
p18328
g3
sS'subblocks'
p18329
NsS'parameters'
p18330
(lp18331
(dp18332
S'description'
p18333
S'Output adaptive time step log\n'
p18334
sS'cpp_type'
p18335
S'bool'
p18336
sS'default'
p18337
S'0'
p18338
sS'name'
p18339
S'adapt_log'
p18340
sS'required'
p18341
I00
sS'group_name'
p18342
Nsa(dp18343
S'description'
p18344
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18345
sS'cpp_type'
p18346
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18347
sS'default'
p18348
g3
sS'name'
p18349
S'control_tags'
p18350
sS'required'
p18351
I00
sS'group_name'
p18352
S'Advanced'
p18353
sa(dp18354
S'description'
p18355
S'The timestep size between solves\n'
p18356
sS'cpp_type'
p18357
S'double'
p18358
sS'default'
p18359
g3
sS'name'
p18360
S'dt'
p18361
sS'required'
p18362
I01
sS'group_name'
p18363
Nsa(dp18364
S'description'
p18365
S'Set the enabled status of the MooseObject.\n'
p18366
sS'cpp_type'
p18367
S'bool'
p18368
sS'default'
p18369
S'1'
p18370
sS'name'
p18371
S'enable'
p18372
sS'required'
p18373
I00
sS'group_name'
p18374
S'Advanced'
p18375
sa(dp18376
S'description'
p18377
S'Direction for the first step.  1 for up... -1 for down. \n'
p18378
sS'cpp_type'
p18379
S'int'
p18380
sS'default'
p18381
S'1'
p18382
sS'name'
p18383
S'initial_direction'
p18384
sS'required'
p18385
I00
sS'group_name'
p18386
Nsa(dp18387
S'description'
p18388
S'Percentage to change the timestep by.  Should be between 0 and 1\n'
p18389
sS'cpp_type'
p18390
S'double'
p18391
sS'default'
p18392
S'0.1'
p18393
sS'name'
p18394
S'percent_change'
p18395
sS'required'
p18396
I00
sS'group_name'
p18397
Nsa(dp18398
S'description'
p18399
S'Use when restarting a calculation to force a change in dt.\n'
p18400
sS'cpp_type'
p18401
S'bool'
p18402
sS'default'
p18403
S'0'
p18404
sS'name'
p18405
S'reset_dt'
p18406
sS'required'
p18407
I00
sS'group_name'
p18408
Nsa(dp18409
S'description'
p18410
g3
sS'cpp_type'
p18411
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18412
sS'default'
p18413
S'SolutionTimeAdaptiveDT'
p18414
sS'name'
p18415
S'type'
p18416
sS'required'
p18417
I00
sS'group_name'
p18418
NsasS'name'
p18419
S'/Executioner/TimeStepper/<type>/SolutionTimeAdaptiveDT'
p18420
sa(dp18421
S'description'
p18422
S'Solves the Transient problem at a sequence of given time points.\n'
p18423
sS'subblocks'
p18424
NsS'parameters'
p18425
(lp18426
(dp18427
S'description'
p18428
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18429
sS'cpp_type'
p18430
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18431
sS'default'
p18432
g3
sS'name'
p18433
S'control_tags'
p18434
sS'required'
p18435
I00
sS'group_name'
p18436
S'Advanced'
p18437
sa(dp18438
S'description'
p18439
S'Set the enabled status of the MooseObject.\n'
p18440
sS'cpp_type'
p18441
S'bool'
p18442
sS'default'
p18443
S'1'
p18444
sS'name'
p18445
S'enable'
p18446
sS'required'
p18447
I00
sS'group_name'
p18448
S'Advanced'
p18449
sa(dp18450
S'description'
p18451
S'Use when restarting a calculation to force a change in dt.\n'
p18452
sS'cpp_type'
p18453
S'bool'
p18454
sS'default'
p18455
S'0'
p18456
sS'name'
p18457
S'reset_dt'
p18458
sS'required'
p18459
I00
sS'group_name'
p18460
Nsa(dp18461
S'description'
p18462
S'The values of t\n'
p18463
sS'cpp_type'
p18464
S'std::__1::vector<double, std::__1::allocator<double> >'
p18465
sS'default'
p18466
g3
sS'name'
p18467
S'time_sequence'
p18468
sS'required'
p18469
I01
sS'group_name'
p18470
Nsa(dp18471
S'description'
p18472
g3
sS'cpp_type'
p18473
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18474
sS'default'
p18475
S'TimeSequenceStepper'
p18476
sS'name'
p18477
S'type'
p18478
sS'required'
p18479
I00
sS'group_name'
p18480
NsasS'name'
p18481
S'/Executioner/TimeStepper/<type>/TimeSequenceStepper'
p18482
sasS'parameters'
p18483
NsS'name'
p18484
S'/Executioner/TimeStepper/<type>'
p18485
sasS'parameters'
p18486
(lp18487
(dp18488
S'description'
p18489
S'A string representing the Moose Object that will be built by this Action\n'
p18490
sS'cpp_type'
p18491
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18492
sS'default'
p18493
g3
sS'name'
p18494
S'type'
p18495
sS'required'
p18496
I01
sS'group_name'
p18497
NsasS'name'
p18498
S'/Executioner/TimeStepper'
p18499
sasS'parameters'
p18500
(lp18501
(dp18502
S'description'
p18503
S'A string representing the Moose Object that will be built by this Action\n'
p18504
sS'cpp_type'
p18505
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18506
sS'default'
p18507
g3
sS'name'
p18508
S'type'
p18509
sS'required'
p18510
I01
sS'group_name'
p18511
NsasS'name'
p18512
S'/Executioner'
p18513
sa(dp18514
S'description'
p18515
g3
sS'subblocks'
p18516
(lp18517
(dp18518
S'description'
p18519
g3
sS'subblocks'
p18520
NsS'parameters'
p18521
(lp18522
(dp18523
S'description'
p18524
S'A string representing the Moose Object that will be built by this Action\n'
p18525
sS'cpp_type'
p18526
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18527
sS'default'
p18528
g3
sS'name'
p18529
S'type'
p18530
sS'required'
p18531
I01
sS'group_name'
p18532
NsasS'name'
p18533
S'/Functions/*'
p18534
sa(dp18535
S'description'
p18536
S'Function for reading a 2D axisymmetric solution from file and mapping it to a 3D Cartesian model\n'
p18537
sS'subblocks'
p18538
NsS'parameters'
p18539
(lp18540
(dp18541
S'description'
p18542
S'Start point for axis of symmetry for the 2d model\n'
p18543
sS'cpp_type'
p18544
S'libMesh::VectorValue<double>'
p18545
sS'default'
p18546
S'0 0 0'
p18547
sS'name'
p18548
S'2d_axis_point1'
p18549
sS'required'
p18550
I00
sS'group_name'
p18551
Nsa(dp18552
S'description'
p18553
S'End point for axis of symmetry for the 2d model\n'
p18554
sS'cpp_type'
p18555
S'libMesh::VectorValue<double>'
p18556
sS'default'
p18557
S'0 1 0'
p18558
sS'name'
p18559
S'2d_axis_point2'
p18560
sS'required'
p18561
I00
sS'group_name'
p18562
Nsa(dp18563
S'description'
p18564
S'Start point for axis of symmetry for the 3d model\n'
p18565
sS'cpp_type'
p18566
S'libMesh::VectorValue<double>'
p18567
sS'default'
p18568
S'0 0 0'
p18569
sS'name'
p18570
S'3d_axis_point1'
p18571
sS'required'
p18572
I00
sS'group_name'
p18573
Nsa(dp18574
S'description'
p18575
S'End point for axis of symmetry for the 3d model\n'
p18576
sS'cpp_type'
p18577
S'libMesh::VectorValue<double>'
p18578
sS'default'
p18579
S'0 1 0'
p18580
sS'name'
p18581
S'3d_axis_point2'
p18582
sS'required'
p18583
I00
sS'group_name'
p18584
Nsa(dp18585
S'description'
p18586
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p18587
sS'cpp_type'
p18588
S'double'
p18589
sS'default'
p18590
S'0'
p18591
sS'name'
p18592
S'add_factor'
p18593
sS'required'
p18594
I00
sS'group_name'
p18595
Nsa(dp18596
S'description'
p18597
S'Ratio of the axial dimension in the 3d model to that in the 2d model. Optinally permits the 3d model to be larger than the 2d model in that dimension, and scales vector solutions in that direction by this factor.\n'
p18598
sS'cpp_type'
p18599
S'double'
p18600
sS'default'
p18601
S'1'
p18602
sS'name'
p18603
S'axial_dimension_ratio'
p18604
sS'required'
p18605
I00
sS'group_name'
p18606
Nsa(dp18607
S'description'
p18608
S'Component of the variable to be computed if it is a vector\n'
p18609
sS'cpp_type'
p18610
S'unsigned int'
p18611
sS'default'
p18612
g3
sS'name'
p18613
S'component'
p18614
sS'required'
p18615
I00
sS'group_name'
p18616
Nsa(dp18617
S'description'
p18618
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18619
sS'cpp_type'
p18620
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18621
sS'default'
p18622
g3
sS'name'
p18623
S'control_tags'
p18624
sS'required'
p18625
I00
sS'group_name'
p18626
S'Advanced'
p18627
sa(dp18628
S'description'
p18629
S'Set the enabled status of the MooseObject.\n'
p18630
sS'cpp_type'
p18631
S'bool'
p18632
sS'default'
p18633
S'1'
p18634
sS'name'
p18635
S'enable'
p18636
sS'required'
p18637
I00
sS'group_name'
p18638
S'Advanced'
p18639
sa(dp18640
S'description'
p18641
S'The names of the variables in the file that are to be extracted, in x, y order if they are vector components\n'
p18642
sS'cpp_type'
p18643
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18644
sS'default'
p18645
g3
sS'name'
p18646
S'from_variables'
p18647
sS'required'
p18648
I00
sS'group_name'
p18649
Nsa(dp18650
S'description'
p18651
S"Scale factor (a) to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p18652
sS'cpp_type'
p18653
S'double'
p18654
sS'default'
p18655
S'1'
p18656
sS'name'
p18657
S'scale_factor'
p18658
sS'required'
p18659
I00
sS'group_name'
p18660
Nsa(dp18661
S'description'
p18662
S'The SolutionUserObject to extract data from.\n'
p18663
sS'cpp_type'
p18664
S'UserObjectName'
p18665
sS'default'
p18666
g3
sS'name'
p18667
S'solution'
p18668
sS'required'
p18669
I01
sS'group_name'
p18670
Nsa(dp18671
S'description'
p18672
g3
sS'cpp_type'
p18673
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18674
sS'default'
p18675
S'Axisymmetric2D3DSolutionFunction'
p18676
sS'name'
p18677
S'type'
p18678
sS'required'
p18679
I00
sS'group_name'
p18680
NsasS'name'
p18681
S'/Functions/Axisymmetric2D3DSolutionFunction'
p18682
sa(dp18683
S'description'
p18684
g3
sS'subblocks'
p18685
NsS'parameters'
p18686
(lp18687
(dp18688
S'description'
p18689
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18690
sS'cpp_type'
p18691
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18692
sS'default'
p18693
g3
sS'name'
p18694
S'control_tags'
p18695
sS'required'
p18696
I00
sS'group_name'
p18697
S'Advanced'
p18698
sa(dp18699
S'description'
p18700
S'Set the enabled status of the MooseObject.\n'
p18701
sS'cpp_type'
p18702
S'bool'
p18703
sS'default'
p18704
S'1'
p18705
sS'name'
p18706
S'enable'
p18707
sS'required'
p18708
I00
sS'group_name'
p18709
S'Advanced'
p18710
sa(dp18711
S'description'
p18712
g3
sS'cpp_type'
p18713
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18714
sS'default'
p18715
S'BicubicSplineFunction'
p18716
sS'name'
p18717
S'type'
p18718
sS'required'
p18719
I00
sS'group_name'
p18720
Nsa(dp18721
S'description'
p18722
S'The first independent coordinate.\n'
p18723
sS'cpp_type'
p18724
S'std::__1::vector<double, std::__1::allocator<double> >'
p18725
sS'default'
p18726
g3
sS'name'
p18727
S'x1'
p18728
sS'required'
p18729
I01
sS'group_name'
p18730
Nsa(dp18731
S'description'
p18732
S'The second independent coordinate.\n'
p18733
sS'cpp_type'
p18734
S'std::__1::vector<double, std::__1::allocator<double> >'
p18735
sS'default'
p18736
g3
sS'name'
p18737
S'x2'
p18738
sS'required'
p18739
I01
sS'group_name'
p18740
Nsa(dp18741
S'description'
p18742
S'The dependent values\n'
p18743
sS'cpp_type'
p18744
S'std::__1::vector<double, std::__1::allocator<double> >'
p18745
sS'default'
p18746
g3
sS'name'
p18747
S'y'
p18748
sS'required'
p18749
I01
sS'group_name'
p18750
Nsa(dp18751
S'description'
p18752
S'The functional form of the derivative with respect to x1.\n'
p18753
sS'cpp_type'
p18754
S'FunctionName'
p18755
sS'default'
p18756
S'1e30'
p18757
sS'name'
p18758
S'yx1'
p18759
sS'required'
p18760
I00
sS'group_name'
p18761
Nsa(dp18762
S'description'
p18763
S'The values of the derivative wrt x1 on the lower interpolation grid points.\n'
p18764
sS'cpp_type'
p18765
S'std::__1::vector<double, std::__1::allocator<double> >'
p18766
sS'default'
p18767
g3
sS'name'
p18768
S'yx11'
p18769
sS'required'
p18770
I00
sS'group_name'
p18771
Nsa(dp18772
S'description'
p18773
S'The values of the derivative wrt x1 on the upper interpolation grid points.\n'
p18774
sS'cpp_type'
p18775
S'std::__1::vector<double, std::__1::allocator<double> >'
p18776
sS'default'
p18777
g3
sS'name'
p18778
S'yx1n'
p18779
sS'required'
p18780
I00
sS'group_name'
p18781
Nsa(dp18782
S'description'
p18783
S'The functional form of the derivative with respect to x2.\n'
p18784
sS'cpp_type'
p18785
S'FunctionName'
p18786
sS'default'
p18787
S'1e30'
p18788
sS'name'
p18789
S'yx2'
p18790
sS'required'
p18791
I00
sS'group_name'
p18792
Nsa(dp18793
S'description'
p18794
S'The values of the derivative wrt x2 on the lower interpolation grid points.\n'
p18795
sS'cpp_type'
p18796
S'std::__1::vector<double, std::__1::allocator<double> >'
p18797
sS'default'
p18798
g3
sS'name'
p18799
S'yx21'
p18800
sS'required'
p18801
I00
sS'group_name'
p18802
Nsa(dp18803
S'description'
p18804
S'The values of the derivative wrt x2 on the upper interpolation grid points.\n'
p18805
sS'cpp_type'
p18806
S'std::__1::vector<double, std::__1::allocator<double> >'
p18807
sS'default'
p18808
g3
sS'name'
p18809
S'yx2n'
p18810
sS'required'
p18811
I00
sS'group_name'
p18812
NsasS'name'
p18813
S'/Functions/BicubicSplineFunction'
p18814
sa(dp18815
S'description'
p18816
g3
sS'subblocks'
p18817
NsS'parameters'
p18818
(lp18819
(dp18820
S'description'
p18821
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18822
sS'cpp_type'
p18823
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18824
sS'default'
p18825
g3
sS'name'
p18826
S'control_tags'
p18827
sS'required'
p18828
I00
sS'group_name'
p18829
S'Advanced'
p18830
sa(dp18831
S'description'
p18832
S'Set the enabled status of the MooseObject.\n'
p18833
sS'cpp_type'
p18834
S'bool'
p18835
sS'default'
p18836
S'1'
p18837
sS'name'
p18838
S'enable'
p18839
sS'required'
p18840
I00
sS'group_name'
p18841
S'Advanced'
p18842
sa(dp18843
S'description'
p18844
S'The functions to be multiplied together.\n'
p18845
sS'cpp_type'
p18846
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p18847
sS'default'
p18848
g3
sS'name'
p18849
S'functions'
p18850
sS'required'
p18851
I00
sS'group_name'
p18852
Nsa(dp18853
S'description'
p18854
S'Scale factor to be applied to the ordinate values\n'
p18855
sS'cpp_type'
p18856
S'double'
p18857
sS'default'
p18858
S'1'
p18859
sS'name'
p18860
S'scale_factor'
p18861
sS'required'
p18862
I00
sS'group_name'
p18863
Nsa(dp18864
S'description'
p18865
g3
sS'cpp_type'
p18866
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18867
sS'default'
p18868
S'CompositeFunction'
p18869
sS'name'
p18870
S'type'
p18871
sS'required'
p18872
I00
sS'group_name'
p18873
NsasS'name'
p18874
S'/Functions/CompositeFunction'
p18875
sa(dp18876
S'description'
p18877
g3
sS'subblocks'
p18878
NsS'parameters'
p18879
(lp18880
(dp18881
S'description'
p18882
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18883
sS'cpp_type'
p18884
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18885
sS'default'
p18886
g3
sS'name'
p18887
S'control_tags'
p18888
sS'required'
p18889
I00
sS'group_name'
p18890
S'Advanced'
p18891
sa(dp18892
S'description'
p18893
S'Set the enabled status of the MooseObject.\n'
p18894
sS'cpp_type'
p18895
S'bool'
p18896
sS'default'
p18897
S'1'
p18898
sS'name'
p18899
S'enable'
p18900
sS'required'
p18901
I00
sS'group_name'
p18902
S'Advanced'
p18903
sa(dp18904
S'description'
p18905
g3
sS'cpp_type'
p18906
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18907
sS'default'
p18908
S'ConstantFunction'
p18909
sS'name'
p18910
S'type'
p18911
sS'required'
p18912
I00
sS'group_name'
p18913
Nsa(dp18914
S'description'
p18915
S'The constant value\n'
p18916
sS'cpp_type'
p18917
S'double'
p18918
sS'default'
p18919
S'0'
p18920
sS'name'
p18921
S'value'
p18922
sS'required'
p18923
I00
sS'group_name'
p18924
NsasS'name'
p18925
S'/Functions/ConstantFunction'
p18926
sa(dp18927
S'description'
p18928
S'Function with values sampled from a given image stack\n'
p18929
sS'subblocks'
p18930
NsS'parameters'
p18931
(lp18932
(dp18933
S'description'
p18934
S'The image RGB-component to return, leaving this blank will result in a greyscale value for the image to be created. The component number is zero based, i.e. 0 returns the first (RED) component of the image.\n'
p18935
sS'cpp_type'
p18936
S'unsigned int'
p18937
sS'default'
p18938
g3
sS'name'
p18939
S'component'
p18940
sS'required'
p18941
I00
sS'group_name'
p18942
Nsa(dp18943
S'description'
p18944
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18945
sS'cpp_type'
p18946
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18947
sS'default'
p18948
g3
sS'name'
p18949
S'control_tags'
p18950
sS'required'
p18951
I00
sS'group_name'
p18952
S'Advanced'
p18953
sa(dp18954
S'description'
p18955
S'x,y,z dimensions of the image (defaults to mesh dimensions)\n'
p18956
sS'cpp_type'
p18957
S'libMesh::Point'
p18958
sS'default'
p18959
g3
sS'name'
p18960
S'dimensions'
p18961
sS'required'
p18962
I00
sS'group_name'
p18963
Nsa(dp18964
S'description'
p18965
S'Set the enabled status of the MooseObject.\n'
p18966
sS'cpp_type'
p18967
S'bool'
p18968
sS'default'
p18969
S'1'
p18970
sS'name'
p18971
S'enable'
p18972
sS'required'
p18973
I00
sS'group_name'
p18974
S'Advanced'
p18975
sa(dp18976
S'description'
p18977
S'Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n'
p18978
sS'cpp_type'
p18979
S'FileName'
p18980
sS'default'
p18981
g3
sS'name'
p18982
S'file'
p18983
sS'required'
p18984
I00
sS'group_name'
p18985
Nsa(dp18986
S'description'
p18987
S"Image file base to open, use this option when a stack of images must be read (ignored if 'file' is given)\n"
p18988
sS'cpp_type'
p18989
S'FileNameNoExtension'
p18990
sS'default'
p18991
g3
sS'name'
p18992
S'file_base'
p18993
sS'required'
p18994
I00
sS'group_name'
p18995
Nsa(dp18996
S'description'
p18997
S"Range of images to analyze, used with 'file_base' (ignored if 'file' is given)\n"
p18998
sS'cpp_type'
p18999
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p19000
sS'default'
p19001
g3
sS'name'
p19002
S'file_range'
p19003
sS'required'
p19004
I00
sS'group_name'
p19005
Nsa(dp19006
S'description'
p19007
S"Suffix of the file to open, e.g. 'png'\n"
p19008
sS'cpp_type'
p19009
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19010
sS'default'
p19011
g3
sS'name'
p19012
S'file_suffix'
p19013
sS'required'
p19014
I00
sS'group_name'
p19015
Nsa(dp19016
S'description'
p19017
S'Flip the image along the x-axis\n'
p19018
sS'cpp_type'
p19019
S'bool'
p19020
sS'default'
p19021
S'0'
p19022
sS'name'
p19023
S'flip_x'
p19024
sS'required'
p19025
I00
sS'group_name'
p19026
S'Flip'
p19027
sa(dp19028
S'description'
p19029
S'Flip the image along the y-axis\n'
p19030
sS'cpp_type'
p19031
S'bool'
p19032
sS'default'
p19033
S'0'
p19034
sS'name'
p19035
S'flip_y'
p19036
sS'required'
p19037
I00
sS'group_name'
p19038
S'Flip'
p19039
sa(dp19040
S'description'
p19041
S'Flip the image along the z-axis\n'
p19042
sS'cpp_type'
p19043
S'bool'
p19044
sS'default'
p19045
S'0'
p19046
sS'name'
p19047
S'flip_z'
p19048
sS'required'
p19049
I00
sS'group_name'
p19050
S'Flip'
p19051
sa(dp19052
S'description'
p19053
S'The value to set for data less than the threshold value\n'
p19054
sS'cpp_type'
p19055
S'double'
p19056
sS'default'
p19057
S'0'
p19058
sS'name'
p19059
S'lower_value'
p19060
sS'required'
p19061
I00
sS'group_name'
p19062
S'Threshold'
p19063
sa(dp19064
S'description'
p19065
S'Origin of the image (defaults to mesh origin)\n'
p19066
sS'cpp_type'
p19067
S'libMesh::Point'
p19068
sS'default'
p19069
g3
sS'name'
p19070
S'origin'
p19071
sS'required'
p19072
I00
sS'group_name'
p19073
Nsa(dp19074
S'description'
p19075
S'Multiplier to apply to all pixel values; occurs after shifting\n'
p19076
sS'cpp_type'
p19077
S'double'
p19078
sS'default'
p19079
S'1'
p19080
sS'name'
p19081
S'scale'
p19082
sS'required'
p19083
I00
sS'group_name'
p19084
S'Rescale'
p19085
sa(dp19086
S'description'
p19087
S'Value to add to all pixels; occurs prior to scaling\n'
p19088
sS'cpp_type'
p19089
S'double'
p19090
sS'default'
p19091
S'0'
p19092
sS'name'
p19093
S'shift'
p19094
sS'required'
p19095
I00
sS'group_name'
p19096
S'Rescale'
p19097
sa(dp19098
S'description'
p19099
S'The threshold value\n'
p19100
sS'cpp_type'
p19101
S'double'
p19102
sS'default'
p19103
g3
sS'name'
p19104
S'threshold'
p19105
sS'required'
p19106
I00
sS'group_name'
p19107
S'Threshold'
p19108
sa(dp19109
S'description'
p19110
g3
sS'cpp_type'
p19111
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19112
sS'default'
p19113
S'ImageFunction'
p19114
sS'name'
p19115
S'type'
p19116
sS'required'
p19117
I00
sS'group_name'
p19118
Nsa(dp19119
S'description'
p19120
S'The value to set for data greater than the threshold value\n'
p19121
sS'cpp_type'
p19122
S'double'
p19123
sS'default'
p19124
S'1'
p19125
sS'name'
p19126
S'upper_value'
p19127
sS'required'
p19128
I00
sS'group_name'
p19129
S'Threshold'
p19130
sasS'name'
p19131
S'/Functions/ImageFunction'
p19132
sa(dp19133
S'description'
p19134
S'Returns the linear combination of the functions\n'
p19135
sS'subblocks'
p19136
NsS'parameters'
p19137
(lp19138
(dp19139
S'description'
p19140
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19141
sS'cpp_type'
p19142
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19143
sS'default'
p19144
g3
sS'name'
p19145
S'control_tags'
p19146
sS'required'
p19147
I00
sS'group_name'
p19148
S'Advanced'
p19149
sa(dp19150
S'description'
p19151
S'Set the enabled status of the MooseObject.\n'
p19152
sS'cpp_type'
p19153
S'bool'
p19154
sS'default'
p19155
S'1'
p19156
sS'name'
p19157
S'enable'
p19158
sS'required'
p19159
I00
sS'group_name'
p19160
S'Advanced'
p19161
sa(dp19162
S'description'
p19163
S'This function will return Sum_over_i(w_i * functions_i)\n'
p19164
sS'cpp_type'
p19165
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p19166
sS'default'
p19167
g3
sS'name'
p19168
S'functions'
p19169
sS'required'
p19170
I01
sS'group_name'
p19171
Nsa(dp19172
S'description'
p19173
g3
sS'cpp_type'
p19174
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19175
sS'default'
p19176
S'LinearCombinationFunction'
p19177
sS'name'
p19178
S'type'
p19179
sS'required'
p19180
I00
sS'group_name'
p19181
Nsa(dp19182
S'description'
p19183
S'This function will return Sum_over_i(w_i * functions_i)\n'
p19184
sS'cpp_type'
p19185
S'std::__1::vector<double, std::__1::allocator<double> >'
p19186
sS'default'
p19187
g3
sS'name'
p19188
S'w'
p19189
sS'required'
p19190
I01
sS'group_name'
p19191
NsasS'name'
p19192
S'/Functions/LinearCombinationFunction'
p19193
sa(dp19194
S'description'
p19195
g3
sS'subblocks'
p19196
NsS'parameters'
p19197
(lp19198
(dp19199
S'description'
p19200
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19201
sS'cpp_type'
p19202
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19203
sS'default'
p19204
g3
sS'name'
p19205
S'control_tags'
p19206
sS'required'
p19207
I00
sS'group_name'
p19208
S'Advanced'
p19209
sa(dp19210
S'description'
p19211
S'Set the enabled status of the MooseObject.\n'
p19212
sS'cpp_type'
p19213
S'bool'
p19214
sS'default'
p19215
S'1'
p19216
sS'name'
p19217
S'enable'
p19218
sS'required'
p19219
I00
sS'group_name'
p19220
S'Advanced'
p19221
sa(dp19222
S'description'
p19223
g3
sS'cpp_type'
p19224
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19225
sS'default'
p19226
S'ParsedFunction'
p19227
sS'name'
p19228
S'type'
p19229
sS'required'
p19230
I00
sS'group_name'
p19231
Nsa(dp19232
S'description'
p19233
S'Constant numeric values or postprocessor names for vars.\n'
p19234
sS'cpp_type'
p19235
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19236
sS'default'
p19237
g3
sS'name'
p19238
S'vals'
p19239
sS'required'
p19240
I00
sS'group_name'
p19241
Nsa(dp19242
S'description'
p19243
S'The user defined function.\n'
p19244
sS'cpp_type'
p19245
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19246
sS'default'
p19247
g3
sS'name'
p19248
S'value'
p19249
sS'required'
p19250
I01
sS'group_name'
p19251
Nsa(dp19252
S'description'
p19253
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p19254
sS'cpp_type'
p19255
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19256
sS'default'
p19257
g3
sS'name'
p19258
S'vars'
p19259
sS'required'
p19260
I00
sS'group_name'
p19261
NsasS'name'
p19262
S'/Functions/ParsedFunction'
p19263
sa(dp19264
S'description'
p19265
g3
sS'subblocks'
p19266
NsS'parameters'
p19267
(lp19268
(dp19269
S'description'
p19270
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19271
sS'cpp_type'
p19272
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19273
sS'default'
p19274
g3
sS'name'
p19275
S'control_tags'
p19276
sS'required'
p19277
I00
sS'group_name'
p19278
S'Advanced'
p19279
sa(dp19280
S'description'
p19281
S'Set the enabled status of the MooseObject.\n'
p19282
sS'cpp_type'
p19283
S'bool'
p19284
sS'default'
p19285
S'1'
p19286
sS'name'
p19287
S'enable'
p19288
sS'required'
p19289
I00
sS'group_name'
p19290
S'Advanced'
p19291
sa(dp19292
S'description'
p19293
S'Partial with respect to x.\n'
p19294
sS'cpp_type'
p19295
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19296
sS'default'
p19297
S'0'
p19298
sS'name'
p19299
S'grad_x'
p19300
sS'required'
p19301
I00
sS'group_name'
p19302
Nsa(dp19303
S'description'
p19304
S'Partial with respect to y.\n'
p19305
sS'cpp_type'
p19306
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19307
sS'default'
p19308
S'0'
p19309
sS'name'
p19310
S'grad_y'
p19311
sS'required'
p19312
I00
sS'group_name'
p19313
Nsa(dp19314
S'description'
p19315
S'Partial with respect to z.\n'
p19316
sS'cpp_type'
p19317
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19318
sS'default'
p19319
S'0'
p19320
sS'name'
p19321
S'grad_z'
p19322
sS'required'
p19323
I00
sS'group_name'
p19324
Nsa(dp19325
S'description'
p19326
g3
sS'cpp_type'
p19327
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19328
sS'default'
p19329
S'ParsedGradFunction'
p19330
sS'name'
p19331
S'type'
p19332
sS'required'
p19333
I00
sS'group_name'
p19334
Nsa(dp19335
S'description'
p19336
S'Constant numeric values or postprocessor names for vars.\n'
p19337
sS'cpp_type'
p19338
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19339
sS'default'
p19340
g3
sS'name'
p19341
S'vals'
p19342
sS'required'
p19343
I00
sS'group_name'
p19344
Nsa(dp19345
S'description'
p19346
S'User defined function.\n'
p19347
sS'cpp_type'
p19348
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19349
sS'default'
p19350
S'0'
p19351
sS'name'
p19352
S'value'
p19353
sS'required'
p19354
I00
sS'group_name'
p19355
Nsa(dp19356
S'description'
p19357
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p19358
sS'cpp_type'
p19359
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19360
sS'default'
p19361
g3
sS'name'
p19362
S'vars'
p19363
sS'required'
p19364
I00
sS'group_name'
p19365
NsasS'name'
p19366
S'/Functions/ParsedGradFunction'
p19367
sa(dp19368
S'description'
p19369
g3
sS'subblocks'
p19370
NsS'parameters'
p19371
(lp19372
(dp19373
S'description'
p19374
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19375
sS'cpp_type'
p19376
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19377
sS'default'
p19378
g3
sS'name'
p19379
S'control_tags'
p19380
sS'required'
p19381
I00
sS'group_name'
p19382
S'Advanced'
p19383
sa(dp19384
S'description'
p19385
S'Set the enabled status of the MooseObject.\n'
p19386
sS'cpp_type'
p19387
S'bool'
p19388
sS'default'
p19389
S'1'
p19390
sS'name'
p19391
S'enable'
p19392
sS'required'
p19393
I00
sS'group_name'
p19394
S'Advanced'
p19395
sa(dp19396
S'description'
p19397
g3
sS'cpp_type'
p19398
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19399
sS'default'
p19400
S'ParsedVectorFunction'
p19401
sS'name'
p19402
S'type'
p19403
sS'required'
p19404
I00
sS'group_name'
p19405
Nsa(dp19406
S'description'
p19407
S'Constant numeric values or postprocessor names for vars.\n'
p19408
sS'cpp_type'
p19409
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19410
sS'default'
p19411
g3
sS'name'
p19412
S'vals'
p19413
sS'required'
p19414
I00
sS'group_name'
p19415
Nsa(dp19416
S'description'
p19417
S'x-component of function.\n'
p19418
sS'cpp_type'
p19419
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19420
sS'default'
p19421
S'0'
p19422
sS'name'
p19423
S'value_x'
p19424
sS'required'
p19425
I00
sS'group_name'
p19426
Nsa(dp19427
S'description'
p19428
S'y-component of function.\n'
p19429
sS'cpp_type'
p19430
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19431
sS'default'
p19432
S'0'
p19433
sS'name'
p19434
S'value_y'
p19435
sS'required'
p19436
I00
sS'group_name'
p19437
Nsa(dp19438
S'description'
p19439
S'z-component of function.\n'
p19440
sS'cpp_type'
p19441
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19442
sS'default'
p19443
S'0'
p19444
sS'name'
p19445
S'value_z'
p19446
sS'required'
p19447
I00
sS'group_name'
p19448
Nsa(dp19449
S'description'
p19450
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p19451
sS'cpp_type'
p19452
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19453
sS'default'
p19454
g3
sS'name'
p19455
S'vars'
p19456
sS'required'
p19457
I00
sS'group_name'
p19458
NsasS'name'
p19459
S'/Functions/ParsedVectorFunction'
p19460
sa(dp19461
S'description'
p19462
g3
sS'subblocks'
p19463
NsS'parameters'
p19464
(lp19465
(dp19466
S'description'
p19467
S'The axis used (0, 1, or 2 for x, y, or z).\n'
p19468
sS'cpp_type'
p19469
S'int'
p19470
sS'default'
p19471
S'-1'
p19472
sS'name'
p19473
S'axis'
p19474
sS'required'
p19475
I00
sS'group_name'
p19476
Nsa(dp19477
S'description'
p19478
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19479
sS'cpp_type'
p19480
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19481
sS'default'
p19482
g3
sS'name'
p19483
S'control_tags'
p19484
sS'required'
p19485
I00
sS'group_name'
p19486
S'Advanced'
p19487
sa(dp19488
S'description'
p19489
S'File holding csv data for use with PiecewiseBilinear\n'
p19490
sS'cpp_type'
p19491
S'FileName'
p19492
sS'default'
p19493
g3
sS'name'
p19494
S'data_file'
p19495
sS'required'
p19496
I00
sS'group_name'
p19497
Nsa(dp19498
S'description'
p19499
S'Set the enabled status of the MooseObject.\n'
p19500
sS'cpp_type'
p19501
S'bool'
p19502
sS'default'
p19503
S'1'
p19504
sS'name'
p19505
S'enable'
p19506
sS'required'
p19507
I00
sS'group_name'
p19508
S'Advanced'
p19509
sa(dp19510
S'description'
p19511
S'Set to true if you want to interpolate along a radius rather that along a specific axis, and note that you have to define xaxis and yaxis in the input file\n'
p19512
sS'cpp_type'
p19513
S'bool'
p19514
sS'default'
p19515
S'0'
p19516
sS'name'
p19517
S'radial'
p19518
sS'required'
p19519
I00
sS'group_name'
p19520
Nsa(dp19521
S'description'
p19522
S'Scale factor to be applied to the axis, yaxis, or xaxis values\n'
p19523
sS'cpp_type'
p19524
S'double'
p19525
sS'default'
p19526
S'1'
p19527
sS'name'
p19528
S'scale_factor'
p19529
sS'required'
p19530
I00
sS'group_name'
p19531
Nsa(dp19532
S'description'
p19533
g3
sS'cpp_type'
p19534
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19535
sS'default'
p19536
S'PiecewiseBilinear'
p19537
sS'name'
p19538
S'type'
p19539
sS'required'
p19540
I00
sS'group_name'
p19541
Nsa(dp19542
S'description'
p19543
S'The x abscissa values\n'
p19544
sS'cpp_type'
p19545
S'std::__1::vector<double, std::__1::allocator<double> >'
p19546
sS'default'
p19547
g3
sS'name'
p19548
S'x'
p19549
sS'required'
p19550
I00
sS'group_name'
p19551
Nsa(dp19552
S'description'
p19553
S'The coordinate used for x-axis data (0, 1, or 2 for x, y, or z).\n'
p19554
sS'cpp_type'
p19555
S'int'
p19556
sS'default'
p19557
S'-1'
p19558
sS'name'
p19559
S'xaxis'
p19560
sS'required'
p19561
I00
sS'group_name'
p19562
Nsa(dp19563
S'description'
p19564
S'The y abscissa values\n'
p19565
sS'cpp_type'
p19566
S'std::__1::vector<double, std::__1::allocator<double> >'
p19567
sS'default'
p19568
g3
sS'name'
p19569
S'y'
p19570
sS'required'
p19571
I00
sS'group_name'
p19572
Nsa(dp19573
S'description'
p19574
S'The coordinate used for y-axis data (0, 1, or 2 for x, y, or z).\n'
p19575
sS'cpp_type'
p19576
S'int'
p19577
sS'default'
p19578
S'-1'
p19579
sS'name'
p19580
S'yaxis'
p19581
sS'required'
p19582
I00
sS'group_name'
p19583
Nsa(dp19584
S'description'
p19585
S'The ordinate values\n'
p19586
sS'cpp_type'
p19587
S'std::__1::vector<double, std::__1::allocator<double> >'
p19588
sS'default'
p19589
g3
sS'name'
p19590
S'z'
p19591
sS'required'
p19592
I00
sS'group_name'
p19593
NsasS'name'
p19594
S'/Functions/PiecewiseBilinear'
p19595
sa(dp19596
S'description'
p19597
g3
sS'subblocks'
p19598
NsS'parameters'
p19599
(lp19600
(dp19601
S'description'
p19602
S'The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n'
p19603
sS'cpp_type'
p19604
S'int'
p19605
sS'default'
p19606
g3
sS'name'
p19607
S'axis'
p19608
sS'required'
p19609
I00
sS'group_name'
p19610
Nsa(dp19611
S'description'
p19612
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19613
sS'cpp_type'
p19614
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19615
sS'default'
p19616
g3
sS'name'
p19617
S'control_tags'
p19618
sS'required'
p19619
I00
sS'group_name'
p19620
S'Advanced'
p19621
sa(dp19622
S'description'
p19623
S'File holding csv data for use with Piecewise\n'
p19624
sS'cpp_type'
p19625
S'FileName'
p19626
sS'default'
p19627
g3
sS'name'
p19628
S'data_file'
p19629
sS'required'
p19630
I00
sS'group_name'
p19631
Nsa(dp19632
S'name'
p19633
S'direction'
p19634
sS'cpp_type'
p19635
S'MooseEnum'
p19636
sS'default'
p19637
S'left'
p19638
sS'description'
p19639
S'Direction to look to find value: left right\n'
p19640
sS'required'
p19641
I00
sS'options'
p19642
S'left right'
p19643
sS'group_name'
p19644
Nsa(dp19645
S'description'
p19646
S'Set the enabled status of the MooseObject.\n'
p19647
sS'cpp_type'
p19648
S'bool'
p19649
sS'default'
p19650
S'1'
p19651
sS'name'
p19652
S'enable'
p19653
sS'required'
p19654
I00
sS'group_name'
p19655
S'Advanced'
p19656
sa(dp19657
S'description'
p19658
S'Format of csv data file that is in either in columns or rows\n'
p19659
sS'cpp_type'
p19660
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19661
sS'default'
p19662
S'rows'
p19663
sS'name'
p19664
S'format'
p19665
sS'required'
p19666
I00
sS'group_name'
p19667
Nsa(dp19668
S'description'
p19669
S'Scale factor to be applied to the ordinate values\n'
p19670
sS'cpp_type'
p19671
S'double'
p19672
sS'default'
p19673
S'1'
p19674
sS'name'
p19675
S'scale_factor'
p19676
sS'required'
p19677
I00
sS'group_name'
p19678
Nsa(dp19679
S'description'
p19680
g3
sS'cpp_type'
p19681
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19682
sS'default'
p19683
S'PiecewiseConstant'
p19684
sS'name'
p19685
S'type'
p19686
sS'required'
p19687
I00
sS'group_name'
p19688
Nsa(dp19689
S'description'
p19690
S'The abscissa values\n'
p19691
sS'cpp_type'
p19692
S'std::__1::vector<double, std::__1::allocator<double> >'
p19693
sS'default'
p19694
g3
sS'name'
p19695
S'x'
p19696
sS'required'
p19697
I00
sS'group_name'
p19698
Nsa(dp19699
S'description'
p19700
S'The abscissa index in the data file\n'
p19701
sS'cpp_type'
p19702
S'unsigned int'
p19703
sS'default'
p19704
S'0'
p19705
sS'name'
p19706
S'x_index_in_file'
p19707
sS'required'
p19708
I00
sS'group_name'
p19709
Nsa(dp19710
S'description'
p19711
S'All function data, supplied in abscissa, ordinate pairs\n'
p19712
sS'cpp_type'
p19713
S'std::__1::vector<double, std::__1::allocator<double> >'
p19714
sS'default'
p19715
g3
sS'name'
p19716
S'xy_data'
p19717
sS'required'
p19718
I00
sS'group_name'
p19719
Nsa(dp19720
S'description'
p19721
S'If the data file only contains abscissa and ordinate data\n'
p19722
sS'cpp_type'
p19723
S'bool'
p19724
sS'default'
p19725
S'1'
p19726
sS'name'
p19727
S'xy_in_file_only'
p19728
sS'required'
p19729
I00
sS'group_name'
p19730
Nsa(dp19731
S'description'
p19732
S'The ordinate values\n'
p19733
sS'cpp_type'
p19734
S'std::__1::vector<double, std::__1::allocator<double> >'
p19735
sS'default'
p19736
g3
sS'name'
p19737
S'y'
p19738
sS'required'
p19739
I00
sS'group_name'
p19740
Nsa(dp19741
S'description'
p19742
S'The ordinate index in the data file\n'
p19743
sS'cpp_type'
p19744
S'unsigned int'
p19745
sS'default'
p19746
S'1'
p19747
sS'name'
p19748
S'y_index_in_file'
p19749
sS'required'
p19750
I00
sS'group_name'
p19751
NsasS'name'
p19752
S'/Functions/PiecewiseConstant'
p19753
sa(dp19754
S'description'
p19755
g3
sS'subblocks'
p19756
NsS'parameters'
p19757
(lp19758
(dp19759
S'description'
p19760
S'The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n'
p19761
sS'cpp_type'
p19762
S'int'
p19763
sS'default'
p19764
g3
sS'name'
p19765
S'axis'
p19766
sS'required'
p19767
I00
sS'group_name'
p19768
Nsa(dp19769
S'description'
p19770
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19771
sS'cpp_type'
p19772
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19773
sS'default'
p19774
g3
sS'name'
p19775
S'control_tags'
p19776
sS'required'
p19777
I00
sS'group_name'
p19778
S'Advanced'
p19779
sa(dp19780
S'description'
p19781
S'File holding csv data for use with Piecewise\n'
p19782
sS'cpp_type'
p19783
S'FileName'
p19784
sS'default'
p19785
g3
sS'name'
p19786
S'data_file'
p19787
sS'required'
p19788
I00
sS'group_name'
p19789
Nsa(dp19790
S'description'
p19791
S'Set the enabled status of the MooseObject.\n'
p19792
sS'cpp_type'
p19793
S'bool'
p19794
sS'default'
p19795
S'1'
p19796
sS'name'
p19797
S'enable'
p19798
sS'required'
p19799
I00
sS'group_name'
p19800
S'Advanced'
p19801
sa(dp19802
S'description'
p19803
S'Format of csv data file that is in either in columns or rows\n'
p19804
sS'cpp_type'
p19805
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19806
sS'default'
p19807
S'rows'
p19808
sS'name'
p19809
S'format'
p19810
sS'required'
p19811
I00
sS'group_name'
p19812
Nsa(dp19813
S'description'
p19814
S'Scale factor to be applied to the ordinate values\n'
p19815
sS'cpp_type'
p19816
S'double'
p19817
sS'default'
p19818
S'1'
p19819
sS'name'
p19820
S'scale_factor'
p19821
sS'required'
p19822
I00
sS'group_name'
p19823
Nsa(dp19824
S'description'
p19825
g3
sS'cpp_type'
p19826
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19827
sS'default'
p19828
S'PiecewiseLinear'
p19829
sS'name'
p19830
S'type'
p19831
sS'required'
p19832
I00
sS'group_name'
p19833
Nsa(dp19834
S'description'
p19835
S'The abscissa values\n'
p19836
sS'cpp_type'
p19837
S'std::__1::vector<double, std::__1::allocator<double> >'
p19838
sS'default'
p19839
g3
sS'name'
p19840
S'x'
p19841
sS'required'
p19842
I00
sS'group_name'
p19843
Nsa(dp19844
S'description'
p19845
S'The abscissa index in the data file\n'
p19846
sS'cpp_type'
p19847
S'unsigned int'
p19848
sS'default'
p19849
S'0'
p19850
sS'name'
p19851
S'x_index_in_file'
p19852
sS'required'
p19853
I00
sS'group_name'
p19854
Nsa(dp19855
S'description'
p19856
S'All function data, supplied in abscissa, ordinate pairs\n'
p19857
sS'cpp_type'
p19858
S'std::__1::vector<double, std::__1::allocator<double> >'
p19859
sS'default'
p19860
g3
sS'name'
p19861
S'xy_data'
p19862
sS'required'
p19863
I00
sS'group_name'
p19864
Nsa(dp19865
S'description'
p19866
S'If the data file only contains abscissa and ordinate data\n'
p19867
sS'cpp_type'
p19868
S'bool'
p19869
sS'default'
p19870
S'1'
p19871
sS'name'
p19872
S'xy_in_file_only'
p19873
sS'required'
p19874
I00
sS'group_name'
p19875
Nsa(dp19876
S'description'
p19877
S'The ordinate values\n'
p19878
sS'cpp_type'
p19879
S'std::__1::vector<double, std::__1::allocator<double> >'
p19880
sS'default'
p19881
g3
sS'name'
p19882
S'y'
p19883
sS'required'
p19884
I00
sS'group_name'
p19885
Nsa(dp19886
S'description'
p19887
S'The ordinate index in the data file\n'
p19888
sS'cpp_type'
p19889
S'unsigned int'
p19890
sS'default'
p19891
S'1'
p19892
sS'name'
p19893
S'y_index_in_file'
p19894
sS'required'
p19895
I00
sS'group_name'
p19896
NsasS'name'
p19897
S'/Functions/PiecewiseLinear'
p19898
sa(dp19899
S'description'
p19900
S'PiecewiseMultilinear performs interpolation on 1D, 2D, 3D or 4D data.  The data_file specifies the axes directions and the function values.  If a point lies outside the data range, the appropriate end value is used.\n'
p19901
sS'subblocks'
p19902
NsS'parameters'
p19903
(lp19904
(dp19905
S'description'
p19906
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19907
sS'cpp_type'
p19908
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19909
sS'default'
p19910
g3
sS'name'
p19911
S'control_tags'
p19912
sS'required'
p19913
I00
sS'group_name'
p19914
S'Advanced'
p19915
sa(dp19916
S'description'
p19917
S'File holding data for use with PiecewiseMultilinear.  Format: any empty line and any line beginning with # are ignored, all other lines are assumed to contain relevant information.  The file must begin with specification of the grid.  This is done through lines containing the keywords: AXIS X; AXIS Y; AXIS Z; or AXIS T.  Immediately following the keyword line must be a space-separated line of real numbers which define the grid along the specified axis.  These data must be monotonically increasing.  After all the axes and their grids have been specified, there must be a line that is DATA.  Following that line, function values are given in the correct order (they may be on indivicual lines, or be space-separated on a number of lines).  When the function is evaluated, f[i,j,k,l] corresponds to the i + j*Ni + k*Ni*Nj + l*Ni*Nj*Nk data value.  Here i>=0 corresponding to the index along the first AXIS, j>=0 corresponding to the index along the second AXIS, etc, and Ni = number of grid points along the first AXIS, etc.\n'
p19918
sS'cpp_type'
p19919
S'FileName'
p19920
sS'default'
p19921
g3
sS'name'
p19922
S'data_file'
p19923
sS'required'
p19924
I00
sS'group_name'
p19925
Nsa(dp19926
S'description'
p19927
S'Set the enabled status of the MooseObject.\n'
p19928
sS'cpp_type'
p19929
S'bool'
p19930
sS'default'
p19931
S'1'
p19932
sS'name'
p19933
S'enable'
p19934
sS'required'
p19935
I00
sS'group_name'
p19936
S'Advanced'
p19937
sa(dp19938
S'description'
p19939
g3
sS'cpp_type'
p19940
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19941
sS'default'
p19942
S'PiecewiseMultilinear'
p19943
sS'name'
p19944
S'type'
p19945
sS'required'
p19946
I00
sS'group_name'
p19947
NsasS'name'
p19948
S'/Functions/PiecewiseMultilinear'
p19949
sa(dp19950
S'description'
p19951
g3
sS'subblocks'
p19952
NsS'parameters'
p19953
(lp19954
(dp19955
S'description'
p19956
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p19957
sS'cpp_type'
p19958
S'double'
p19959
sS'default'
p19960
S'0'
p19961
sS'name'
p19962
S'add_factor'
p19963
sS'required'
p19964
I00
sS'group_name'
p19965
Nsa(dp19966
S'description'
p19967
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19968
sS'cpp_type'
p19969
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19970
sS'default'
p19971
g3
sS'name'
p19972
S'control_tags'
p19973
sS'required'
p19974
I00
sS'group_name'
p19975
S'Advanced'
p19976
sa(dp19977
S'description'
p19978
S'Set the enabled status of the MooseObject.\n'
p19979
sS'cpp_type'
p19980
S'bool'
p19981
sS'default'
p19982
S'1'
p19983
sS'name'
p19984
S'enable'
p19985
sS'required'
p19986
I00
sS'group_name'
p19987
S'Advanced'
p19988
sa(dp19989
S'description'
p19990
S'The name of the variable in the file that is to be extracted\n'
p19991
sS'cpp_type'
p19992
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19993
sS'default'
p19994
g3
sS'name'
p19995
S'from_variable'
p19996
sS'required'
p19997
I00
sS'group_name'
p19998
Nsa(dp19999
S'description'
p20000
S"Scale factor (a) to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p20001
sS'cpp_type'
p20002
S'double'
p20003
sS'default'
p20004
S'1'
p20005
sS'name'
p20006
S'scale_factor'
p20007
sS'required'
p20008
I00
sS'group_name'
p20009
Nsa(dp20010
S'description'
p20011
S'The SolutionUserObject to extract data from.\n'
p20012
sS'cpp_type'
p20013
S'UserObjectName'
p20014
sS'default'
p20015
g3
sS'name'
p20016
S'solution'
p20017
sS'required'
p20018
I01
sS'group_name'
p20019
Nsa(dp20020
S'description'
p20021
g3
sS'cpp_type'
p20022
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20023
sS'default'
p20024
S'SolutionFunction'
p20025
sS'name'
p20026
S'type'
p20027
sS'required'
p20028
I00
sS'group_name'
p20029
NsasS'name'
p20030
S'/Functions/SolutionFunction'
p20031
sa(dp20032
S'description'
p20033
g3
sS'subblocks'
p20034
NsS'parameters'
p20035
(lp20036
(dp20037
S'description'
p20038
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20039
sS'cpp_type'
p20040
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20041
sS'default'
p20042
g3
sS'name'
p20043
S'control_tags'
p20044
sS'required'
p20045
I00
sS'group_name'
p20046
S'Advanced'
p20047
sa(dp20048
S'description'
p20049
S'Set the enabled status of the MooseObject.\n'
p20050
sS'cpp_type'
p20051
S'bool'
p20052
sS'default'
p20053
S'1'
p20054
sS'name'
p20055
S'enable'
p20056
sS'required'
p20057
I00
sS'group_name'
p20058
S'Advanced'
p20059
sa(dp20060
S'description'
p20061
g3
sS'cpp_type'
p20062
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20063
sS'default'
p20064
S'SplineFunction'
p20065
sS'name'
p20066
S'type'
p20067
sS'required'
p20068
I00
sS'group_name'
p20069
Nsa(dp20070
S'description'
p20071
S'The abscissa values\n'
p20072
sS'cpp_type'
p20073
S'std::__1::vector<double, std::__1::allocator<double> >'
p20074
sS'default'
p20075
g3
sS'name'
p20076
S'x'
p20077
sS'required'
p20078
I01
sS'group_name'
p20079
Nsa(dp20080
S'description'
p20081
S'The ordinate values\n'
p20082
sS'cpp_type'
p20083
S'std::__1::vector<double, std::__1::allocator<double> >'
p20084
sS'default'
p20085
g3
sS'name'
p20086
S'y'
p20087
sS'required'
p20088
I01
sS'group_name'
p20089
Nsa(dp20090
S'description'
p20091
S'The value of the first derivative of the interpolating function at point 1\n'
p20092
sS'cpp_type'
p20093
S'double'
p20094
sS'default'
p20095
S'1e+30'
p20096
sS'name'
p20097
S'yp1'
p20098
sS'required'
p20099
I00
sS'group_name'
p20100
Nsa(dp20101
S'description'
p20102
S'The value of the first derivative of the interpolating function at point n\n'
p20103
sS'cpp_type'
p20104
S'double'
p20105
sS'default'
p20106
S'1e+30'
p20107
sS'name'
p20108
S'ypn'
p20109
sS'required'
p20110
I00
sS'group_name'
p20111
NsasS'name'
p20112
S'/Functions/SplineFunction'
p20113
sasS'parameters'
p20114
NsS'name'
p20115
S'/Functions'
p20116
sa(dp20117
S'description'
p20118
g3
sS'subblocks'
p20119
NsS'parameters'
p20120
NsS'name'
p20121
S'/GlobalParams'
p20122
sa(dp20123
S'description'
p20124
g3
sS'subblocks'
p20125
(lp20126
(dp20127
S'description'
p20128
g3
sS'subblocks'
p20129
NsS'parameters'
p20130
(lp20131
(dp20132
S'description'
p20133
S'A string representing the Moose Object that will be built by this Action\n'
p20134
sS'cpp_type'
p20135
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20136
sS'default'
p20137
g3
sS'name'
p20138
S'type'
p20139
sS'required'
p20140
I01
sS'group_name'
p20141
NsasS'name'
p20142
S'/ICs/*'
p20143
sa(dp20144
S'description'
p20145
g3
sS'subblocks'
p20146
NsS'parameters'
p20147
(lp20148
(dp20149
S'description'
p20150
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20151
sS'cpp_type'
p20152
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p20153
sS'default'
p20154
g3
sS'name'
p20155
S'block'
p20156
sS'required'
p20157
I00
sS'group_name'
p20158
Nsa(dp20159
S'description'
p20160
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20161
sS'cpp_type'
p20162
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p20163
sS'default'
p20164
g3
sS'name'
p20165
S'boundary'
p20166
sS'required'
p20167
I00
sS'group_name'
p20168
Nsa(dp20169
S'description'
p20170
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20171
sS'cpp_type'
p20172
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20173
sS'default'
p20174
g3
sS'name'
p20175
S'control_tags'
p20176
sS'required'
p20177
I00
sS'group_name'
p20178
S'Advanced'
p20179
sa(dp20180
S'description'
p20181
S'Set the enabled status of the MooseObject.\n'
p20182
sS'cpp_type'
p20183
S'bool'
p20184
sS'default'
p20185
S'1'
p20186
sS'name'
p20187
S'enable'
p20188
sS'required'
p20189
I00
sS'group_name'
p20190
S'Advanced'
p20191
sa(dp20192
S'description'
p20193
S'The value of the variable inside the box\n'
p20194
sS'cpp_type'
p20195
S'double'
p20196
sS'default'
p20197
S'0'
p20198
sS'name'
p20199
S'inside'
p20200
sS'required'
p20201
I00
sS'group_name'
p20202
Nsa(dp20203
S'description'
p20204
S'The value of the variable outside the box\n'
p20205
sS'cpp_type'
p20206
S'double'
p20207
sS'default'
p20208
S'0'
p20209
sS'name'
p20210
S'outside'
p20211
sS'required'
p20212
I00
sS'group_name'
p20213
Nsa(dp20214
S'description'
p20215
g3
sS'cpp_type'
p20216
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20217
sS'default'
p20218
S'BoundingBoxIC'
p20219
sS'name'
p20220
S'type'
p20221
sS'required'
p20222
I00
sS'group_name'
p20223
Nsa(dp20224
S'description'
p20225
S'The variable this initial condition is supposed to provide values for.\n'
p20226
sS'cpp_type'
p20227
S'VariableName'
p20228
sS'default'
p20229
g3
sS'name'
p20230
S'variable'
p20231
sS'required'
p20232
I01
sS'group_name'
p20233
Nsa(dp20234
S'description'
p20235
S'The x coordinate of the lower left-hand corner of the box\n'
p20236
sS'cpp_type'
p20237
S'double'
p20238
sS'default'
p20239
g3
sS'name'
p20240
S'x1'
p20241
sS'required'
p20242
I01
sS'group_name'
p20243
Nsa(dp20244
S'description'
p20245
S'The x coordinate of the upper right-hand corner of the box\n'
p20246
sS'cpp_type'
p20247
S'double'
p20248
sS'default'
p20249
g3
sS'name'
p20250
S'x2'
p20251
sS'required'
p20252
I01
sS'group_name'
p20253
Nsa(dp20254
S'description'
p20255
S'The y coordinate of the lower left-hand corner of the box\n'
p20256
sS'cpp_type'
p20257
S'double'
p20258
sS'default'
p20259
g3
sS'name'
p20260
S'y1'
p20261
sS'required'
p20262
I01
sS'group_name'
p20263
Nsa(dp20264
S'description'
p20265
S'The y coordinate of the upper right-hand corner of the box\n'
p20266
sS'cpp_type'
p20267
S'double'
p20268
sS'default'
p20269
g3
sS'name'
p20270
S'y2'
p20271
sS'required'
p20272
I01
sS'group_name'
p20273
Nsa(dp20274
S'description'
p20275
S'The z coordinate of the lower left-hand corner of the box\n'
p20276
sS'cpp_type'
p20277
S'double'
p20278
sS'default'
p20279
S'0'
p20280
sS'name'
p20281
S'z1'
p20282
sS'required'
p20283
I00
sS'group_name'
p20284
Nsa(dp20285
S'description'
p20286
S'The z coordinate of the upper right-hand corner of the box\n'
p20287
sS'cpp_type'
p20288
S'double'
p20289
sS'default'
p20290
S'0'
p20291
sS'name'
p20292
S'z2'
p20293
sS'required'
p20294
I00
sS'group_name'
p20295
NsasS'name'
p20296
S'/ICs/BoundingBoxIC'
p20297
sa(dp20298
S'description'
p20299
g3
sS'subblocks'
p20300
NsS'parameters'
p20301
(lp20302
(dp20303
S'description'
p20304
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20305
sS'cpp_type'
p20306
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p20307
sS'default'
p20308
g3
sS'name'
p20309
S'block'
p20310
sS'required'
p20311
I00
sS'group_name'
p20312
Nsa(dp20313
S'description'
p20314
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20315
sS'cpp_type'
p20316
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p20317
sS'default'
p20318
g3
sS'name'
p20319
S'boundary'
p20320
sS'required'
p20321
I00
sS'group_name'
p20322
Nsa(dp20323
S'description'
p20324
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20325
sS'cpp_type'
p20326
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20327
sS'default'
p20328
g3
sS'name'
p20329
S'control_tags'
p20330
sS'required'
p20331
I00
sS'group_name'
p20332
S'Advanced'
p20333
sa(dp20334
S'description'
p20335
S'Set the enabled status of the MooseObject.\n'
p20336
sS'cpp_type'
p20337
S'bool'
p20338
sS'default'
p20339
S'1'
p20340
sS'name'
p20341
S'enable'
p20342
sS'required'
p20343
I00
sS'group_name'
p20344
S'Advanced'
p20345
sa(dp20346
S'description'
p20347
g3
sS'cpp_type'
p20348
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20349
sS'default'
p20350
S'ConstantIC'
p20351
sS'name'
p20352
S'type'
p20353
sS'required'
p20354
I00
sS'group_name'
p20355
Nsa(dp20356
S'description'
p20357
S'The value to be set in IC\n'
p20358
sS'cpp_type'
p20359
S'double'
p20360
sS'default'
p20361
g3
sS'name'
p20362
S'value'
p20363
sS'required'
p20364
I01
sS'group_name'
p20365
Nsa(dp20366
S'description'
p20367
S'The variable this initial condition is supposed to provide values for.\n'
p20368
sS'cpp_type'
p20369
S'VariableName'
p20370
sS'default'
p20371
g3
sS'name'
p20372
S'variable'
p20373
sS'required'
p20374
I01
sS'group_name'
p20375
NsasS'name'
p20376
S'/ICs/ConstantIC'
p20377
sa(dp20378
S'description'
p20379
g3
sS'subblocks'
p20380
NsS'parameters'
p20381
(lp20382
(dp20383
S'description'
p20384
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20385
sS'cpp_type'
p20386
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p20387
sS'default'
p20388
g3
sS'name'
p20389
S'block'
p20390
sS'required'
p20391
I00
sS'group_name'
p20392
Nsa(dp20393
S'description'
p20394
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20395
sS'cpp_type'
p20396
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p20397
sS'default'
p20398
g3
sS'name'
p20399
S'boundary'
p20400
sS'required'
p20401
I00
sS'group_name'
p20402
Nsa(dp20403
S'description'
p20404
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20405
sS'cpp_type'
p20406
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20407
sS'default'
p20408
g3
sS'name'
p20409
S'control_tags'
p20410
sS'required'
p20411
I00
sS'group_name'
p20412
S'Advanced'
p20413
sa(dp20414
S'description'
p20415
S'Set the enabled status of the MooseObject.\n'
p20416
sS'cpp_type'
p20417
S'bool'
p20418
sS'default'
p20419
S'1'
p20420
sS'name'
p20421
S'enable'
p20422
sS'required'
p20423
I00
sS'group_name'
p20424
S'Advanced'
p20425
sa(dp20426
S'description'
p20427
S'The initial condition function.\n'
p20428
sS'cpp_type'
p20429
S'FunctionName'
p20430
sS'default'
p20431
g3
sS'name'
p20432
S'function'
p20433
sS'required'
p20434
I01
sS'group_name'
p20435
Nsa(dp20436
S'description'
p20437
g3
sS'cpp_type'
p20438
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20439
sS'default'
p20440
S'FunctionIC'
p20441
sS'name'
p20442
S'type'
p20443
sS'required'
p20444
I00
sS'group_name'
p20445
Nsa(dp20446
S'description'
p20447
S'The variable this initial condition is supposed to provide values for.\n'
p20448
sS'cpp_type'
p20449
S'VariableName'
p20450
sS'default'
p20451
g3
sS'name'
p20452
S'variable'
p20453
sS'required'
p20454
I01
sS'group_name'
p20455
NsasS'name'
p20456
S'/ICs/FunctionIC'
p20457
sa(dp20458
S'description'
p20459
g3
sS'subblocks'
p20460
NsS'parameters'
p20461
(lp20462
(dp20463
S'description'
p20464
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20465
sS'cpp_type'
p20466
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20467
sS'default'
p20468
g3
sS'name'
p20469
S'control_tags'
p20470
sS'required'
p20471
I00
sS'group_name'
p20472
S'Advanced'
p20473
sa(dp20474
S'description'
p20475
S'Set the enabled status of the MooseObject.\n'
p20476
sS'cpp_type'
p20477
S'bool'
p20478
sS'default'
p20479
S'1'
p20480
sS'name'
p20481
S'enable'
p20482
sS'required'
p20483
I00
sS'group_name'
p20484
S'Advanced'
p20485
sa(dp20486
S'description'
p20487
S'The initial condition function.\n'
p20488
sS'cpp_type'
p20489
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p20490
sS'default'
p20491
g3
sS'name'
p20492
S'function'
p20493
sS'required'
p20494
I01
sS'group_name'
p20495
Nsa(dp20496
S'description'
p20497
g3
sS'cpp_type'
p20498
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20499
sS'default'
p20500
S'FunctionScalarIC'
p20501
sS'name'
p20502
S'type'
p20503
sS'required'
p20504
I00
sS'group_name'
p20505
Nsa(dp20506
S'description'
p20507
S'The variable this initial condition is supposed to provide values for.\n'
p20508
sS'cpp_type'
p20509
S'VariableName'
p20510
sS'default'
p20511
g3
sS'name'
p20512
S'variable'
p20513
sS'required'
p20514
I00
sS'group_name'
p20515
NsasS'name'
p20516
S'/ICs/FunctionScalarIC'
p20517
sa(dp20518
S'description'
p20519
g3
sS'subblocks'
p20520
NsS'parameters'
p20521
(lp20522
(dp20523
S'description'
p20524
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20525
sS'cpp_type'
p20526
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p20527
sS'default'
p20528
g3
sS'name'
p20529
S'block'
p20530
sS'required'
p20531
I00
sS'group_name'
p20532
Nsa(dp20533
S'description'
p20534
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20535
sS'cpp_type'
p20536
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p20537
sS'default'
p20538
g3
sS'name'
p20539
S'boundary'
p20540
sS'required'
p20541
I00
sS'group_name'
p20542
Nsa(dp20543
S'description'
p20544
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20545
sS'cpp_type'
p20546
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20547
sS'default'
p20548
g3
sS'name'
p20549
S'control_tags'
p20550
sS'required'
p20551
I00
sS'group_name'
p20552
S'Advanced'
p20553
sa(dp20554
S'description'
p20555
S'Set the enabled status of the MooseObject.\n'
p20556
sS'cpp_type'
p20557
S'bool'
p20558
sS'default'
p20559
S'1'
p20560
sS'name'
p20561
S'enable'
p20562
sS'required'
p20563
I00
sS'group_name'
p20564
S'Advanced'
p20565
sa(dp20566
S'description'
p20567
S'Upper bound of the randomly generated values\n'
p20568
sS'cpp_type'
p20569
S'double'
p20570
sS'default'
p20571
S'1'
p20572
sS'name'
p20573
S'max'
p20574
sS'required'
p20575
I00
sS'group_name'
p20576
Nsa(dp20577
S'description'
p20578
S'Lower bound of the randomly generated values\n'
p20579
sS'cpp_type'
p20580
S'double'
p20581
sS'default'
p20582
S'0'
p20583
sS'name'
p20584
S'min'
p20585
sS'required'
p20586
I00
sS'group_name'
p20587
Nsa(dp20588
S'description'
p20589
S'Seed value for the random number generator\n'
p20590
sS'cpp_type'
p20591
S'unsigned int'
p20592
sS'default'
p20593
S'0'
p20594
sS'name'
p20595
S'seed'
p20596
sS'required'
p20597
I00
sS'group_name'
p20598
Nsa(dp20599
S'description'
p20600
g3
sS'cpp_type'
p20601
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20602
sS'default'
p20603
S'RandomIC'
p20604
sS'name'
p20605
S'type'
p20606
sS'required'
p20607
I00
sS'group_name'
p20608
Nsa(dp20609
S'description'
p20610
S'The variable this initial condition is supposed to provide values for.\n'
p20611
sS'cpp_type'
p20612
S'VariableName'
p20613
sS'default'
p20614
g3
sS'name'
p20615
S'variable'
p20616
sS'required'
p20617
I01
sS'group_name'
p20618
NsasS'name'
p20619
S'/ICs/RandomIC'
p20620
sa(dp20621
S'description'
p20622
g3
sS'subblocks'
p20623
NsS'parameters'
p20624
(lp20625
(dp20626
S'description'
p20627
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20628
sS'cpp_type'
p20629
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20630
sS'default'
p20631
g3
sS'name'
p20632
S'control_tags'
p20633
sS'required'
p20634
I00
sS'group_name'
p20635
S'Advanced'
p20636
sa(dp20637
S'description'
p20638
S'Set the enabled status of the MooseObject.\n'
p20639
sS'cpp_type'
p20640
S'bool'
p20641
sS'default'
p20642
S'1'
p20643
sS'name'
p20644
S'enable'
p20645
sS'required'
p20646
I00
sS'group_name'
p20647
S'Advanced'
p20648
sa(dp20649
S'description'
p20650
g3
sS'cpp_type'
p20651
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20652
sS'default'
p20653
S'ScalarComponentIC'
p20654
sS'name'
p20655
S'type'
p20656
sS'required'
p20657
I00
sS'group_name'
p20658
Nsa(dp20659
S'description'
p20660
S'Initial values to initialize the scalar variable.\n'
p20661
sS'cpp_type'
p20662
S'std::__1::vector<double, std::__1::allocator<double> >'
p20663
sS'default'
p20664
g3
sS'name'
p20665
S'values'
p20666
sS'required'
p20667
I01
sS'group_name'
p20668
Nsa(dp20669
S'description'
p20670
S'The variable this initial condition is supposed to provide values for.\n'
p20671
sS'cpp_type'
p20672
S'VariableName'
p20673
sS'default'
p20674
g3
sS'name'
p20675
S'variable'
p20676
sS'required'
p20677
I00
sS'group_name'
p20678
NsasS'name'
p20679
S'/ICs/ScalarComponentIC'
p20680
sa(dp20681
S'description'
p20682
g3
sS'subblocks'
p20683
NsS'parameters'
p20684
(lp20685
(dp20686
S'description'
p20687
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20688
sS'cpp_type'
p20689
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20690
sS'default'
p20691
g3
sS'name'
p20692
S'control_tags'
p20693
sS'required'
p20694
I00
sS'group_name'
p20695
S'Advanced'
p20696
sa(dp20697
S'description'
p20698
S'Set the enabled status of the MooseObject.\n'
p20699
sS'cpp_type'
p20700
S'bool'
p20701
sS'default'
p20702
S'1'
p20703
sS'name'
p20704
S'enable'
p20705
sS'required'
p20706
I00
sS'group_name'
p20707
S'Advanced'
p20708
sa(dp20709
S'description'
p20710
g3
sS'cpp_type'
p20711
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20712
sS'default'
p20713
S'ScalarConstantIC'
p20714
sS'name'
p20715
S'type'
p20716
sS'required'
p20717
I00
sS'group_name'
p20718
Nsa(dp20719
S'description'
p20720
g3
sS'cpp_type'
p20721
S'double'
p20722
sS'default'
p20723
S'0'
p20724
sS'name'
p20725
S'value'
p20726
sS'required'
p20727
I00
sS'group_name'
p20728
Nsa(dp20729
S'description'
p20730
S'The variable this initial condition is supposed to provide values for.\n'
p20731
sS'cpp_type'
p20732
S'VariableName'
p20733
sS'default'
p20734
g3
sS'name'
p20735
S'variable'
p20736
sS'required'
p20737
I00
sS'group_name'
p20738
NsasS'name'
p20739
S'/ICs/ScalarConstantIC'
p20740
sasS'parameters'
p20741
NsS'name'
p20742
S'/ICs'
p20743
sa(dp20744
S'description'
p20745
g3
sS'subblocks'
p20746
(lp20747
(dp20748
S'description'
p20749
g3
sS'subblocks'
p20750
NsS'parameters'
p20751
(lp20752
(dp20753
S'description'
p20754
S'A string representing the Moose Object that will be built by this Action\n'
p20755
sS'cpp_type'
p20756
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20757
sS'default'
p20758
g3
sS'name'
p20759
S'type'
p20760
sS'required'
p20761
I01
sS'group_name'
p20762
NsasS'name'
p20763
S'/InterfaceKernels/*'
p20764
sasS'parameters'
p20765
NsS'name'
p20766
S'/InterfaceKernels'
p20767
sa(dp20768
S'description'
p20769
g3
sS'subblocks'
p20770
(lp20771
(dp20772
S'description'
p20773
g3
sS'subblocks'
p20774
NsS'parameters'
p20775
(lp20776
(dp20777
S'description'
p20778
S'A string representing the Moose Object that will be built by this Action\n'
p20779
sS'cpp_type'
p20780
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20781
sS'default'
p20782
g3
sS'name'
p20783
S'type'
p20784
sS'required'
p20785
I01
sS'group_name'
p20786
NsasS'name'
p20787
S'/Kernels/*'
p20788
sa(dp20789
S'description'
p20790
g3
sS'subblocks'
p20791
NsS'parameters'
p20792
(lp20793
(dp20794
S'description'
p20795
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20796
sS'cpp_type'
p20797
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p20798
sS'default'
p20799
g3
sS'name'
p20800
S'block'
p20801
sS'required'
p20802
I00
sS'group_name'
p20803
Nsa(dp20804
S'description'
p20805
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20806
sS'cpp_type'
p20807
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20808
sS'default'
p20809
g3
sS'name'
p20810
S'control_tags'
p20811
sS'required'
p20812
I00
sS'group_name'
p20813
S'Advanced'
p20814
sa(dp20815
S'description'
p20816
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p20817
sS'cpp_type'
p20818
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p20819
sS'default'
p20820
g3
sS'name'
p20821
S'diag_save_in'
p20822
sS'required'
p20823
I00
sS'group_name'
p20824
S'Advanced'
p20825
sa(dp20826
S'description'
p20827
S'Whether or not this kernel will be used as an eigen kernel\n'
p20828
sS'cpp_type'
p20829
S'bool'
p20830
sS'default'
p20831
S'0'
p20832
sS'name'
p20833
S'eigen_kernel'
p20834
sS'required'
p20835
I00
sS'group_name'
p20836
Nsa(dp20837
S'description'
p20838
S'Set the enabled status of the MooseObject.\n'
p20839
sS'cpp_type'
p20840
S'bool'
p20841
sS'default'
p20842
S'1'
p20843
sS'name'
p20844
S'enable'
p20845
sS'required'
p20846
I00
sS'group_name'
p20847
S'Advanced'
p20848
sa(dp20849
S'description'
p20850
S'Determines whether this object is calculated using an implicit or explicit form\n'
p20851
sS'cpp_type'
p20852
S'bool'
p20853
sS'default'
p20854
S'1'
p20855
sS'name'
p20856
S'implicit'
p20857
sS'required'
p20858
I00
sS'group_name'
p20859
S'Advanced'
p20860
sa(dp20861
S'description'
p20862
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p20863
sS'cpp_type'
p20864
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p20865
sS'default'
p20866
g3
sS'name'
p20867
S'save_in'
p20868
sS'required'
p20869
I00
sS'group_name'
p20870
S'Advanced'
p20871
sa(dp20872
S'description'
p20873
S'The seed for the master random number generator\n'
p20874
sS'cpp_type'
p20875
S'unsigned int'
p20876
sS'default'
p20877
S'0'
p20878
sS'name'
p20879
S'seed'
p20880
sS'required'
p20881
I00
sS'group_name'
p20882
S'Advanced'
p20883
sa(dp20884
S'description'
p20885
S'The Tensor to multiply the Diffusion operator by\n'
p20886
sS'cpp_type'
p20887
S'libMesh::TensorValue<double>'
p20888
sS'default'
p20889
g3
sS'name'
p20890
S'tensor_coeff'
p20891
sS'required'
p20892
I01
sS'group_name'
p20893
Nsa(dp20894
S'description'
p20895
g3
sS'cpp_type'
p20896
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20897
sS'default'
p20898
S'AnisotropicDiffusion'
p20899
sS'name'
p20900
S'type'
p20901
sS'required'
p20902
I00
sS'group_name'
p20903
Nsa(dp20904
S'description'
p20905
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20906
sS'cpp_type'
p20907
S'bool'
p20908
sS'default'
p20909
S'0'
p20910
sS'name'
p20911
S'use_displaced_mesh'
p20912
sS'required'
p20913
I00
sS'group_name'
p20914
S'Advanced'
p20915
sa(dp20916
S'description'
p20917
S'The name of the variable that this Kernel operates on\n'
p20918
sS'cpp_type'
p20919
S'NonlinearVariableName'
p20920
sS'default'
p20921
g3
sS'name'
p20922
S'variable'
p20923
sS'required'
p20924
I01
sS'group_name'
p20925
NsasS'name'
p20926
S'/Kernels/AnisotropicDiffusion'
p20927
sa(dp20928
S'description'
p20929
g3
sS'subblocks'
p20930
NsS'parameters'
p20931
(lp20932
(dp20933
S'description'
p20934
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20935
sS'cpp_type'
p20936
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p20937
sS'default'
p20938
g3
sS'name'
p20939
S'block'
p20940
sS'required'
p20941
I00
sS'group_name'
p20942
Nsa(dp20943
S'description'
p20944
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20945
sS'cpp_type'
p20946
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20947
sS'default'
p20948
g3
sS'name'
p20949
S'control_tags'
p20950
sS'required'
p20951
I00
sS'group_name'
p20952
S'Advanced'
p20953
sa(dp20954
S'description'
p20955
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p20956
sS'cpp_type'
p20957
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p20958
sS'default'
p20959
g3
sS'name'
p20960
S'diag_save_in'
p20961
sS'required'
p20962
I00
sS'group_name'
p20963
S'Advanced'
p20964
sa(dp20965
S'description'
p20966
S'Whether or not this kernel will be used as an eigen kernel\n'
p20967
sS'cpp_type'
p20968
S'bool'
p20969
sS'default'
p20970
S'0'
p20971
sS'name'
p20972
S'eigen_kernel'
p20973
sS'required'
p20974
I00
sS'group_name'
p20975
Nsa(dp20976
S'description'
p20977
S'Set the enabled status of the MooseObject.\n'
p20978
sS'cpp_type'
p20979
S'bool'
p20980
sS'default'
p20981
S'1'
p20982
sS'name'
p20983
S'enable'
p20984
sS'required'
p20985
I00
sS'group_name'
p20986
S'Advanced'
p20987
sa(dp20988
S'description'
p20989
S'A function that describes the body force\n'
p20990
sS'cpp_type'
p20991
S'FunctionName'
p20992
sS'default'
p20993
S'1'
p20994
sS'name'
p20995
S'function'
p20996
sS'required'
p20997
I00
sS'group_name'
p20998
Nsa(dp20999
S'description'
p21000
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21001
sS'cpp_type'
p21002
S'bool'
p21003
sS'default'
p21004
S'1'
p21005
sS'name'
p21006
S'implicit'
p21007
sS'required'
p21008
I00
sS'group_name'
p21009
S'Advanced'
p21010
sa(dp21011
S'description'
p21012
S'A postprocessor whose value is multiplied by the body force\n'
p21013
sS'cpp_type'
p21014
S'PostprocessorName'
p21015
sS'default'
p21016
g3
sS'name'
p21017
S'postprocessor'
p21018
sS'required'
p21019
I00
sS'group_name'
p21020
Nsa(dp21021
S'description'
p21022
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21023
sS'cpp_type'
p21024
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21025
sS'default'
p21026
g3
sS'name'
p21027
S'save_in'
p21028
sS'required'
p21029
I00
sS'group_name'
p21030
S'Advanced'
p21031
sa(dp21032
S'description'
p21033
S'The seed for the master random number generator\n'
p21034
sS'cpp_type'
p21035
S'unsigned int'
p21036
sS'default'
p21037
S'0'
p21038
sS'name'
p21039
S'seed'
p21040
sS'required'
p21041
I00
sS'group_name'
p21042
S'Advanced'
p21043
sa(dp21044
S'description'
p21045
g3
sS'cpp_type'
p21046
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21047
sS'default'
p21048
S'BodyForce'
p21049
sS'name'
p21050
S'type'
p21051
sS'required'
p21052
I00
sS'group_name'
p21053
Nsa(dp21054
S'description'
p21055
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21056
sS'cpp_type'
p21057
S'bool'
p21058
sS'default'
p21059
S'0'
p21060
sS'name'
p21061
S'use_displaced_mesh'
p21062
sS'required'
p21063
I00
sS'group_name'
p21064
S'Advanced'
p21065
sa(dp21066
S'description'
p21067
S'Coefficent to multiply by the body force term\n'
p21068
sS'cpp_type'
p21069
S'double'
p21070
sS'default'
p21071
S'1'
p21072
sS'name'
p21073
S'value'
p21074
sS'required'
p21075
I00
sS'group_name'
p21076
Nsa(dp21077
S'description'
p21078
S'The name of the variable that this Kernel operates on\n'
p21079
sS'cpp_type'
p21080
S'NonlinearVariableName'
p21081
sS'default'
p21082
g3
sS'name'
p21083
S'variable'
p21084
sS'required'
p21085
I01
sS'group_name'
p21086
NsasS'name'
p21087
S'/Kernels/BodyForce'
p21088
sa(dp21089
S'description'
p21090
g3
sS'subblocks'
p21091
NsS'parameters'
p21092
(lp21093
(dp21094
S'description'
p21095
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21096
sS'cpp_type'
p21097
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21098
sS'default'
p21099
g3
sS'name'
p21100
S'block'
p21101
sS'required'
p21102
I00
sS'group_name'
p21103
Nsa(dp21104
S'description'
p21105
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21106
sS'cpp_type'
p21107
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21108
sS'default'
p21109
g3
sS'name'
p21110
S'control_tags'
p21111
sS'required'
p21112
I00
sS'group_name'
p21113
S'Advanced'
p21114
sa(dp21115
S'description'
p21116
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21117
sS'cpp_type'
p21118
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21119
sS'default'
p21120
g3
sS'name'
p21121
S'diag_save_in'
p21122
sS'required'
p21123
I00
sS'group_name'
p21124
S'Advanced'
p21125
sa(dp21126
S'description'
p21127
S'Whether or not this kernel will be used as an eigen kernel\n'
p21128
sS'cpp_type'
p21129
S'bool'
p21130
sS'default'
p21131
S'0'
p21132
sS'name'
p21133
S'eigen_kernel'
p21134
sS'required'
p21135
I00
sS'group_name'
p21136
Nsa(dp21137
S'description'
p21138
S'Set the enabled status of the MooseObject.\n'
p21139
sS'cpp_type'
p21140
S'bool'
p21141
sS'default'
p21142
S'1'
p21143
sS'name'
p21144
S'enable'
p21145
sS'required'
p21146
I00
sS'group_name'
p21147
S'Advanced'
p21148
sa(dp21149
S'description'
p21150
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21151
sS'cpp_type'
p21152
S'bool'
p21153
sS'default'
p21154
S'1'
p21155
sS'name'
p21156
S'implicit'
p21157
sS'required'
p21158
I00
sS'group_name'
p21159
S'Advanced'
p21160
sa(dp21161
S'description'
p21162
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21163
sS'cpp_type'
p21164
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21165
sS'default'
p21166
g3
sS'name'
p21167
S'save_in'
p21168
sS'required'
p21169
I00
sS'group_name'
p21170
S'Advanced'
p21171
sa(dp21172
S'description'
p21173
S'The seed for the master random number generator\n'
p21174
sS'cpp_type'
p21175
S'unsigned int'
p21176
sS'default'
p21177
S'0'
p21178
sS'name'
p21179
S'seed'
p21180
sS'required'
p21181
I00
sS'group_name'
p21182
S'Advanced'
p21183
sa(dp21184
S'description'
p21185
g3
sS'cpp_type'
p21186
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21187
sS'default'
p21188
S'ConservativeAdvection'
p21189
sS'name'
p21190
S'type'
p21191
sS'required'
p21192
I00
sS'group_name'
p21193
Nsa(dp21194
S'description'
p21195
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21196
sS'cpp_type'
p21197
S'bool'
p21198
sS'default'
p21199
S'0'
p21200
sS'name'
p21201
S'use_displaced_mesh'
p21202
sS'required'
p21203
I00
sS'group_name'
p21204
S'Advanced'
p21205
sa(dp21206
S'description'
p21207
S'The name of the variable that this Kernel operates on\n'
p21208
sS'cpp_type'
p21209
S'NonlinearVariableName'
p21210
sS'default'
p21211
g3
sS'name'
p21212
S'variable'
p21213
sS'required'
p21214
I01
sS'group_name'
p21215
Nsa(dp21216
S'description'
p21217
S'Velocity vector\n'
p21218
sS'cpp_type'
p21219
S'libMesh::VectorValue<double>'
p21220
sS'default'
p21221
g3
sS'name'
p21222
S'velocity'
p21223
sS'required'
p21224
I01
sS'group_name'
p21225
NsasS'name'
p21226
S'/Kernels/ConservativeAdvection'
p21227
sa(dp21228
S'description'
p21229
g3
sS'subblocks'
p21230
NsS'parameters'
p21231
(lp21232
(dp21233
S'description'
p21234
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21235
sS'cpp_type'
p21236
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21237
sS'default'
p21238
g3
sS'name'
p21239
S'block'
p21240
sS'required'
p21241
I00
sS'group_name'
p21242
Nsa(dp21243
S'description'
p21244
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21245
sS'cpp_type'
p21246
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21247
sS'default'
p21248
g3
sS'name'
p21249
S'control_tags'
p21250
sS'required'
p21251
I00
sS'group_name'
p21252
S'Advanced'
p21253
sa(dp21254
S'description'
p21255
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21256
sS'cpp_type'
p21257
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21258
sS'default'
p21259
g3
sS'name'
p21260
S'diag_save_in'
p21261
sS'required'
p21262
I00
sS'group_name'
p21263
S'Advanced'
p21264
sa(dp21265
S'description'
p21266
S'Whether or not this kernel will be used as an eigen kernel\n'
p21267
sS'cpp_type'
p21268
S'bool'
p21269
sS'default'
p21270
S'0'
p21271
sS'name'
p21272
S'eigen_kernel'
p21273
sS'required'
p21274
I00
sS'group_name'
p21275
Nsa(dp21276
S'description'
p21277
S'Set the enabled status of the MooseObject.\n'
p21278
sS'cpp_type'
p21279
S'bool'
p21280
sS'default'
p21281
S'1'
p21282
sS'name'
p21283
S'enable'
p21284
sS'required'
p21285
I00
sS'group_name'
p21286
S'Advanced'
p21287
sa(dp21288
S'description'
p21289
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21290
sS'cpp_type'
p21291
S'bool'
p21292
sS'default'
p21293
S'1'
p21294
sS'name'
p21295
S'implicit'
p21296
sS'required'
p21297
I00
sS'group_name'
p21298
S'Advanced'
p21299
sa(dp21300
S'description'
p21301
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21302
sS'cpp_type'
p21303
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21304
sS'default'
p21305
g3
sS'name'
p21306
S'save_in'
p21307
sS'required'
p21308
I00
sS'group_name'
p21309
S'Advanced'
p21310
sa(dp21311
S'description'
p21312
S'The seed for the master random number generator\n'
p21313
sS'cpp_type'
p21314
S'unsigned int'
p21315
sS'default'
p21316
S'0'
p21317
sS'name'
p21318
S'seed'
p21319
sS'required'
p21320
I00
sS'group_name'
p21321
S'Advanced'
p21322
sa(dp21323
S'description'
p21324
g3
sS'cpp_type'
p21325
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21326
sS'default'
p21327
S'CoupledForce'
p21328
sS'name'
p21329
S'type'
p21330
sS'required'
p21331
I00
sS'group_name'
p21332
Nsa(dp21333
S'description'
p21334
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21335
sS'cpp_type'
p21336
S'bool'
p21337
sS'default'
p21338
S'0'
p21339
sS'name'
p21340
S'use_displaced_mesh'
p21341
sS'required'
p21342
I00
sS'group_name'
p21343
S'Advanced'
p21344
sa(dp21345
S'description'
p21346
S'The coupled variable which provides the force\n'
p21347
sS'cpp_type'
p21348
S'std::vector<VariableName>'
p21349
sS'default'
p21350
g3
sS'name'
p21351
S'v'
p21352
sS'required'
p21353
I01
sS'group_name'
p21354
Nsa(dp21355
S'description'
p21356
S'The name of the variable that this Kernel operates on\n'
p21357
sS'cpp_type'
p21358
S'NonlinearVariableName'
p21359
sS'default'
p21360
g3
sS'name'
p21361
S'variable'
p21362
sS'required'
p21363
I01
sS'group_name'
p21364
NsasS'name'
p21365
S'/Kernels/CoupledForce'
p21366
sa(dp21367
S'description'
p21368
S'Time derivative Kernel that acts on a coupled variable\n'
p21369
sS'subblocks'
p21370
NsS'parameters'
p21371
(lp21372
(dp21373
S'description'
p21374
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21375
sS'cpp_type'
p21376
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21377
sS'default'
p21378
g3
sS'name'
p21379
S'block'
p21380
sS'required'
p21381
I00
sS'group_name'
p21382
Nsa(dp21383
S'description'
p21384
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21385
sS'cpp_type'
p21386
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21387
sS'default'
p21388
g3
sS'name'
p21389
S'control_tags'
p21390
sS'required'
p21391
I00
sS'group_name'
p21392
S'Advanced'
p21393
sa(dp21394
S'description'
p21395
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21396
sS'cpp_type'
p21397
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21398
sS'default'
p21399
g3
sS'name'
p21400
S'diag_save_in'
p21401
sS'required'
p21402
I00
sS'group_name'
p21403
S'Advanced'
p21404
sa(dp21405
S'description'
p21406
S'Whether or not this kernel will be used as an eigen kernel\n'
p21407
sS'cpp_type'
p21408
S'bool'
p21409
sS'default'
p21410
S'0'
p21411
sS'name'
p21412
S'eigen_kernel'
p21413
sS'required'
p21414
I00
sS'group_name'
p21415
Nsa(dp21416
S'description'
p21417
S'Set the enabled status of the MooseObject.\n'
p21418
sS'cpp_type'
p21419
S'bool'
p21420
sS'default'
p21421
S'1'
p21422
sS'name'
p21423
S'enable'
p21424
sS'required'
p21425
I00
sS'group_name'
p21426
S'Advanced'
p21427
sa(dp21428
S'description'
p21429
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21430
sS'cpp_type'
p21431
S'bool'
p21432
sS'default'
p21433
S'1'
p21434
sS'name'
p21435
S'implicit'
p21436
sS'required'
p21437
I00
sS'group_name'
p21438
S'Advanced'
p21439
sa(dp21440
S'description'
p21441
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21442
sS'cpp_type'
p21443
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21444
sS'default'
p21445
g3
sS'name'
p21446
S'save_in'
p21447
sS'required'
p21448
I00
sS'group_name'
p21449
S'Advanced'
p21450
sa(dp21451
S'description'
p21452
S'The seed for the master random number generator\n'
p21453
sS'cpp_type'
p21454
S'unsigned int'
p21455
sS'default'
p21456
S'0'
p21457
sS'name'
p21458
S'seed'
p21459
sS'required'
p21460
I00
sS'group_name'
p21461
S'Advanced'
p21462
sa(dp21463
S'description'
p21464
g3
sS'cpp_type'
p21465
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21466
sS'default'
p21467
S'CoupledTimeDerivative'
p21468
sS'name'
p21469
S'type'
p21470
sS'required'
p21471
I00
sS'group_name'
p21472
Nsa(dp21473
S'description'
p21474
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21475
sS'cpp_type'
p21476
S'bool'
p21477
sS'default'
p21478
S'0'
p21479
sS'name'
p21480
S'use_displaced_mesh'
p21481
sS'required'
p21482
I00
sS'group_name'
p21483
S'Advanced'
p21484
sa(dp21485
S'description'
p21486
S'Coupled variable\n'
p21487
sS'cpp_type'
p21488
S'std::vector<VariableName>'
p21489
sS'default'
p21490
g3
sS'name'
p21491
S'v'
p21492
sS'required'
p21493
I01
sS'group_name'
p21494
Nsa(dp21495
S'description'
p21496
S'The name of the variable that this Kernel operates on\n'
p21497
sS'cpp_type'
p21498
S'NonlinearVariableName'
p21499
sS'default'
p21500
g3
sS'name'
p21501
S'variable'
p21502
sS'required'
p21503
I01
sS'group_name'
p21504
NsasS'name'
p21505
S'/Kernels/CoupledTimeDerivative'
p21506
sa(dp21507
S'description'
p21508
S'The Laplacian operator ($-\\nabla \\cdot \\nabla u$), with the weak form of $(\\nabla \\phi_i, \\nabla u_h)$.\n'
p21509
sS'subblocks'
p21510
NsS'parameters'
p21511
(lp21512
(dp21513
S'description'
p21514
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21515
sS'cpp_type'
p21516
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21517
sS'default'
p21518
g3
sS'name'
p21519
S'block'
p21520
sS'required'
p21521
I00
sS'group_name'
p21522
Nsa(dp21523
S'description'
p21524
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21525
sS'cpp_type'
p21526
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21527
sS'default'
p21528
g3
sS'name'
p21529
S'control_tags'
p21530
sS'required'
p21531
I00
sS'group_name'
p21532
S'Advanced'
p21533
sa(dp21534
S'description'
p21535
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21536
sS'cpp_type'
p21537
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21538
sS'default'
p21539
g3
sS'name'
p21540
S'diag_save_in'
p21541
sS'required'
p21542
I00
sS'group_name'
p21543
S'Advanced'
p21544
sa(dp21545
S'description'
p21546
S'Whether or not this kernel will be used as an eigen kernel\n'
p21547
sS'cpp_type'
p21548
S'bool'
p21549
sS'default'
p21550
S'0'
p21551
sS'name'
p21552
S'eigen_kernel'
p21553
sS'required'
p21554
I00
sS'group_name'
p21555
Nsa(dp21556
S'description'
p21557
S'Set the enabled status of the MooseObject.\n'
p21558
sS'cpp_type'
p21559
S'bool'
p21560
sS'default'
p21561
S'1'
p21562
sS'name'
p21563
S'enable'
p21564
sS'required'
p21565
I00
sS'group_name'
p21566
S'Advanced'
p21567
sa(dp21568
S'description'
p21569
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21570
sS'cpp_type'
p21571
S'bool'
p21572
sS'default'
p21573
S'1'
p21574
sS'name'
p21575
S'implicit'
p21576
sS'required'
p21577
I00
sS'group_name'
p21578
S'Advanced'
p21579
sa(dp21580
S'description'
p21581
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21582
sS'cpp_type'
p21583
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21584
sS'default'
p21585
g3
sS'name'
p21586
S'save_in'
p21587
sS'required'
p21588
I00
sS'group_name'
p21589
S'Advanced'
p21590
sa(dp21591
S'description'
p21592
S'The seed for the master random number generator\n'
p21593
sS'cpp_type'
p21594
S'unsigned int'
p21595
sS'default'
p21596
S'0'
p21597
sS'name'
p21598
S'seed'
p21599
sS'required'
p21600
I00
sS'group_name'
p21601
S'Advanced'
p21602
sa(dp21603
S'description'
p21604
g3
sS'cpp_type'
p21605
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21606
sS'default'
p21607
S'Diffusion'
p21608
sS'name'
p21609
S'type'
p21610
sS'required'
p21611
I00
sS'group_name'
p21612
Nsa(dp21613
S'description'
p21614
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21615
sS'cpp_type'
p21616
S'bool'
p21617
sS'default'
p21618
S'0'
p21619
sS'name'
p21620
S'use_displaced_mesh'
p21621
sS'required'
p21622
I00
sS'group_name'
p21623
S'Advanced'
p21624
sa(dp21625
S'description'
p21626
S'The name of the variable that this Kernel operates on\n'
p21627
sS'cpp_type'
p21628
S'NonlinearVariableName'
p21629
sS'default'
p21630
g3
sS'name'
p21631
S'variable'
p21632
sS'required'
p21633
I01
sS'group_name'
p21634
NsasS'name'
p21635
S'/Kernels/Diffusion'
p21636
sa(dp21637
S'description'
p21638
g3
sS'subblocks'
p21639
NsS'parameters'
p21640
(lp21641
(dp21642
S'description'
p21643
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21644
sS'cpp_type'
p21645
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21646
sS'default'
p21647
g3
sS'name'
p21648
S'block'
p21649
sS'required'
p21650
I00
sS'group_name'
p21651
Nsa(dp21652
S'description'
p21653
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21654
sS'cpp_type'
p21655
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21656
sS'default'
p21657
g3
sS'name'
p21658
S'control_tags'
p21659
sS'required'
p21660
I00
sS'group_name'
p21661
S'Advanced'
p21662
sa(dp21663
S'description'
p21664
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21665
sS'cpp_type'
p21666
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21667
sS'default'
p21668
g3
sS'name'
p21669
S'diag_save_in'
p21670
sS'required'
p21671
I00
sS'group_name'
p21672
S'Advanced'
p21673
sa(dp21674
S'description'
p21675
S'Whether or not this kernel will be used as an eigen kernel\n'
p21676
sS'cpp_type'
p21677
S'bool'
p21678
sS'default'
p21679
S'0'
p21680
sS'name'
p21681
S'eigen_kernel'
p21682
sS'required'
p21683
I00
sS'group_name'
p21684
Nsa(dp21685
S'description'
p21686
S'Set the enabled status of the MooseObject.\n'
p21687
sS'cpp_type'
p21688
S'bool'
p21689
sS'default'
p21690
S'1'
p21691
sS'name'
p21692
S'enable'
p21693
sS'required'
p21694
I00
sS'group_name'
p21695
S'Advanced'
p21696
sa(dp21697
S'description'
p21698
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21699
sS'cpp_type'
p21700
S'bool'
p21701
sS'default'
p21702
S'1'
p21703
sS'name'
p21704
S'implicit'
p21705
sS'required'
p21706
I00
sS'group_name'
p21707
S'Advanced'
p21708
sa(dp21709
S'description'
p21710
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21711
sS'cpp_type'
p21712
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21713
sS'default'
p21714
g3
sS'name'
p21715
S'save_in'
p21716
sS'required'
p21717
I00
sS'group_name'
p21718
S'Advanced'
p21719
sa(dp21720
S'description'
p21721
S'The seed for the master random number generator\n'
p21722
sS'cpp_type'
p21723
S'unsigned int'
p21724
sS'default'
p21725
S'0'
p21726
sS'name'
p21727
S'seed'
p21728
sS'required'
p21729
I00
sS'group_name'
p21730
S'Advanced'
p21731
sa(dp21732
S'description'
p21733
g3
sS'cpp_type'
p21734
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21735
sS'default'
p21736
S'ExampleConvection'
p21737
sS'name'
p21738
S'type'
p21739
sS'required'
p21740
I00
sS'group_name'
p21741
Nsa(dp21742
S'description'
p21743
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21744
sS'cpp_type'
p21745
S'bool'
p21746
sS'default'
p21747
S'0'
p21748
sS'name'
p21749
S'use_displaced_mesh'
p21750
sS'required'
p21751
I00
sS'group_name'
p21752
S'Advanced'
p21753
sa(dp21754
S'description'
p21755
S'The name of the variable that this Kernel operates on\n'
p21756
sS'cpp_type'
p21757
S'NonlinearVariableName'
p21758
sS'default'
p21759
g3
sS'name'
p21760
S'variable'
p21761
sS'required'
p21762
I01
sS'group_name'
p21763
Nsa(dp21764
S'description'
p21765
S'Component of velocity in the x direction\n'
p21766
sS'cpp_type'
p21767
S'double'
p21768
sS'default'
p21769
g3
sS'name'
p21770
S'x'
p21771
sS'required'
p21772
I01
sS'group_name'
p21773
Nsa(dp21774
S'description'
p21775
S'Component of velocity in the y direction\n'
p21776
sS'cpp_type'
p21777
S'double'
p21778
sS'default'
p21779
g3
sS'name'
p21780
S'y'
p21781
sS'required'
p21782
I01
sS'group_name'
p21783
Nsa(dp21784
S'description'
p21785
S'Component of velocity in the z direction\n'
p21786
sS'cpp_type'
p21787
S'double'
p21788
sS'default'
p21789
S'0'
p21790
sS'name'
p21791
S'z'
p21792
sS'required'
p21793
I00
sS'group_name'
p21794
NsasS'name'
p21795
S'/Kernels/ExampleConvection'
p21796
sa(dp21797
S'description'
p21798
g3
sS'subblocks'
p21799
NsS'parameters'
p21800
(lp21801
(dp21802
S'description'
p21803
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21804
sS'cpp_type'
p21805
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21806
sS'default'
p21807
g3
sS'name'
p21808
S'block'
p21809
sS'required'
p21810
I00
sS'group_name'
p21811
Nsa(dp21812
S'description'
p21813
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21814
sS'cpp_type'
p21815
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21816
sS'default'
p21817
g3
sS'name'
p21818
S'control_tags'
p21819
sS'required'
p21820
I00
sS'group_name'
p21821
S'Advanced'
p21822
sa(dp21823
S'description'
p21824
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21825
sS'cpp_type'
p21826
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21827
sS'default'
p21828
g3
sS'name'
p21829
S'diag_save_in'
p21830
sS'required'
p21831
I00
sS'group_name'
p21832
S'Advanced'
p21833
sa(dp21834
S'description'
p21835
S'Use for eigenvalue problem (true) or source problem (false)\n'
p21836
sS'cpp_type'
p21837
S'bool'
p21838
sS'default'
p21839
S'1'
p21840
sS'name'
p21841
S'eigen'
p21842
sS'required'
p21843
I00
sS'group_name'
p21844
Nsa(dp21845
S'description'
p21846
S'Whether or not this kernel will be used as an eigen kernel\n'
p21847
sS'cpp_type'
p21848
S'bool'
p21849
sS'default'
p21850
S'0'
p21851
sS'name'
p21852
S'eigen_kernel'
p21853
sS'required'
p21854
I00
sS'group_name'
p21855
Nsa(dp21856
S'description'
p21857
S'The name of the postprocessor that provides the eigenvalue.\n'
p21858
sS'cpp_type'
p21859
S'PostprocessorName'
p21860
sS'default'
p21861
S'1'
p21862
sS'name'
p21863
S'eigen_postprocessor'
p21864
sS'required'
p21865
I00
sS'group_name'
p21866
Nsa(dp21867
S'description'
p21868
S'Set the enabled status of the MooseObject.\n'
p21869
sS'cpp_type'
p21870
S'bool'
p21871
sS'default'
p21872
S'1'
p21873
sS'name'
p21874
S'enable'
p21875
sS'required'
p21876
I00
sS'group_name'
p21877
S'Advanced'
p21878
sa(dp21879
S'description'
p21880
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21881
sS'cpp_type'
p21882
S'bool'
p21883
sS'default'
p21884
S'1'
p21885
sS'name'
p21886
S'implicit'
p21887
sS'required'
p21888
I00
sS'group_name'
p21889
S'Advanced'
p21890
sa(dp21891
S'description'
p21892
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21893
sS'cpp_type'
p21894
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21895
sS'default'
p21896
g3
sS'name'
p21897
S'save_in'
p21898
sS'required'
p21899
I00
sS'group_name'
p21900
S'Advanced'
p21901
sa(dp21902
S'description'
p21903
S'The seed for the master random number generator\n'
p21904
sS'cpp_type'
p21905
S'unsigned int'
p21906
sS'default'
p21907
S'0'
p21908
sS'name'
p21909
S'seed'
p21910
sS'required'
p21911
I00
sS'group_name'
p21912
S'Advanced'
p21913
sa(dp21914
S'description'
p21915
g3
sS'cpp_type'
p21916
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21917
sS'default'
p21918
S'MassEigenKernel'
p21919
sS'name'
p21920
S'type'
p21921
sS'required'
p21922
I00
sS'group_name'
p21923
Nsa(dp21924
S'description'
p21925
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21926
sS'cpp_type'
p21927
S'bool'
p21928
sS'default'
p21929
S'0'
p21930
sS'name'
p21931
S'use_displaced_mesh'
p21932
sS'required'
p21933
I00
sS'group_name'
p21934
S'Advanced'
p21935
sa(dp21936
S'description'
p21937
S'The name of the variable that this Kernel operates on\n'
p21938
sS'cpp_type'
p21939
S'NonlinearVariableName'
p21940
sS'default'
p21941
g3
sS'name'
p21942
S'variable'
p21943
sS'required'
p21944
I01
sS'group_name'
p21945
NsasS'name'
p21946
S'/Kernels/MassEigenKernel'
p21947
sa(dp21948
S'description'
p21949
g3
sS'subblocks'
p21950
NsS'parameters'
p21951
(lp21952
(dp21953
S'description'
p21954
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21955
sS'cpp_type'
p21956
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21957
sS'default'
p21958
g3
sS'name'
p21959
S'block'
p21960
sS'required'
p21961
I00
sS'group_name'
p21962
Nsa(dp21963
S'description'
p21964
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21965
sS'cpp_type'
p21966
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21967
sS'default'
p21968
g3
sS'name'
p21969
S'control_tags'
p21970
sS'required'
p21971
I00
sS'group_name'
p21972
S'Advanced'
p21973
sa(dp21974
S'description'
p21975
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21976
sS'cpp_type'
p21977
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21978
sS'default'
p21979
g3
sS'name'
p21980
S'diag_save_in'
p21981
sS'required'
p21982
I00
sS'group_name'
p21983
S'Advanced'
p21984
sa(dp21985
S'description'
p21986
S'Whether or not this kernel will be used as an eigen kernel\n'
p21987
sS'cpp_type'
p21988
S'bool'
p21989
sS'default'
p21990
S'0'
p21991
sS'name'
p21992
S'eigen_kernel'
p21993
sS'required'
p21994
I00
sS'group_name'
p21995
Nsa(dp21996
S'description'
p21997
S'Set the enabled status of the MooseObject.\n'
p21998
sS'cpp_type'
p21999
S'bool'
p22000
sS'default'
p22001
S'1'
p22002
sS'name'
p22003
S'enable'
p22004
sS'required'
p22005
I00
sS'group_name'
p22006
S'Advanced'
p22007
sa(dp22008
S'description'
p22009
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22010
sS'cpp_type'
p22011
S'bool'
p22012
sS'default'
p22013
S'1'
p22014
sS'name'
p22015
S'implicit'
p22016
sS'required'
p22017
I00
sS'group_name'
p22018
S'Advanced'
p22019
sa(dp22020
S'description'
p22021
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22022
sS'cpp_type'
p22023
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22024
sS'default'
p22025
g3
sS'name'
p22026
S'save_in'
p22027
sS'required'
p22028
I00
sS'group_name'
p22029
S'Advanced'
p22030
sa(dp22031
S'description'
p22032
S'The seed for the master random number generator\n'
p22033
sS'cpp_type'
p22034
S'unsigned int'
p22035
sS'default'
p22036
S'0'
p22037
sS'name'
p22038
S'seed'
p22039
sS'required'
p22040
I00
sS'group_name'
p22041
S'Advanced'
p22042
sa(dp22043
S'description'
p22044
g3
sS'cpp_type'
p22045
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22046
sS'default'
p22047
S'MassLumpedTimeDerivative'
p22048
sS'name'
p22049
S'type'
p22050
sS'required'
p22051
I00
sS'group_name'
p22052
Nsa(dp22053
S'description'
p22054
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22055
sS'cpp_type'
p22056
S'bool'
p22057
sS'default'
p22058
S'0'
p22059
sS'name'
p22060
S'use_displaced_mesh'
p22061
sS'required'
p22062
I00
sS'group_name'
p22063
S'Advanced'
p22064
sa(dp22065
S'description'
p22066
S'The name of the variable that this Kernel operates on\n'
p22067
sS'cpp_type'
p22068
S'NonlinearVariableName'
p22069
sS'default'
p22070
g3
sS'name'
p22071
S'variable'
p22072
sS'required'
p22073
I01
sS'group_name'
p22074
NsasS'name'
p22075
S'/Kernels/MassLumpedTimeDerivative'
p22076
sa(dp22077
S'description'
p22078
S'Class used for testing derivatives of a material property.\n'
p22079
sS'subblocks'
p22080
NsS'parameters'
p22081
(lp22082
(dp22083
S'description'
p22084
S'List of variables the material property depends on\n'
p22085
sS'cpp_type'
p22086
S'std::vector<VariableName>'
p22087
sS'default'
p22088
g3
sS'name'
p22089
S'args'
p22090
sS'required'
p22091
I01
sS'group_name'
p22092
Nsa(dp22093
S'description'
p22094
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22095
sS'cpp_type'
p22096
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p22097
sS'default'
p22098
g3
sS'name'
p22099
S'block'
p22100
sS'required'
p22101
I00
sS'group_name'
p22102
Nsa(dp22103
S'description'
p22104
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22105
sS'cpp_type'
p22106
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22107
sS'default'
p22108
g3
sS'name'
p22109
S'control_tags'
p22110
sS'required'
p22111
I00
sS'group_name'
p22112
S'Advanced'
p22113
sa(dp22114
S'description'
p22115
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22116
sS'cpp_type'
p22117
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22118
sS'default'
p22119
g3
sS'name'
p22120
S'diag_save_in'
p22121
sS'required'
p22122
I00
sS'group_name'
p22123
S'Advanced'
p22124
sa(dp22125
S'description'
p22126
S'Whether or not this kernel will be used as an eigen kernel\n'
p22127
sS'cpp_type'
p22128
S'bool'
p22129
sS'default'
p22130
S'0'
p22131
sS'name'
p22132
S'eigen_kernel'
p22133
sS'required'
p22134
I00
sS'group_name'
p22135
Nsa(dp22136
S'description'
p22137
S'Set the enabled status of the MooseObject.\n'
p22138
sS'cpp_type'
p22139
S'bool'
p22140
sS'default'
p22141
S'1'
p22142
sS'name'
p22143
S'enable'
p22144
sS'required'
p22145
I00
sS'group_name'
p22146
S'Advanced'
p22147
sa(dp22148
S'description'
p22149
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22150
sS'cpp_type'
p22151
S'bool'
p22152
sS'default'
p22153
S'1'
p22154
sS'name'
p22155
S'implicit'
p22156
sS'required'
p22157
I00
sS'group_name'
p22158
S'Advanced'
p22159
sa(dp22160
S'description'
p22161
S'Name of material property for which derivatives are to be tested.\n'
p22162
sS'cpp_type'
p22163
S'MaterialPropertyName'
p22164
sS'default'
p22165
g3
sS'name'
p22166
S'material_property'
p22167
sS'required'
p22168
I01
sS'group_name'
p22169
Nsa(dp22170
S'description'
p22171
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22172
sS'cpp_type'
p22173
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22174
sS'default'
p22175
g3
sS'name'
p22176
S'save_in'
p22177
sS'required'
p22178
I00
sS'group_name'
p22179
S'Advanced'
p22180
sa(dp22181
S'description'
p22182
S'The seed for the master random number generator\n'
p22183
sS'cpp_type'
p22184
S'unsigned int'
p22185
sS'default'
p22186
S'0'
p22187
sS'name'
p22188
S'seed'
p22189
sS'required'
p22190
I00
sS'group_name'
p22191
S'Advanced'
p22192
sa(dp22193
S'description'
p22194
g3
sS'cpp_type'
p22195
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22196
sS'default'
p22197
S'MaterialDerivativeTestKernel'
p22198
sS'name'
p22199
S'type'
p22200
sS'required'
p22201
I00
sS'group_name'
p22202
Nsa(dp22203
S'description'
p22204
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22205
sS'cpp_type'
p22206
S'bool'
p22207
sS'default'
p22208
S'0'
p22209
sS'name'
p22210
S'use_displaced_mesh'
p22211
sS'required'
p22212
I00
sS'group_name'
p22213
S'Advanced'
p22214
sa(dp22215
S'description'
p22216
S'The name of the variable that this Kernel operates on\n'
p22217
sS'cpp_type'
p22218
S'NonlinearVariableName'
p22219
sS'default'
p22220
g3
sS'name'
p22221
S'variable'
p22222
sS'required'
p22223
I01
sS'group_name'
p22224
NsasS'name'
p22225
S'/Kernels/MaterialDerivativeTestKernel'
p22226
sa(dp22227
S'description'
p22228
S'Kernel that sets a zero residual.\n'
p22229
sS'subblocks'
p22230
NsS'parameters'
p22231
(lp22232
(dp22233
S'description'
p22234
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22235
sS'cpp_type'
p22236
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p22237
sS'default'
p22238
g3
sS'name'
p22239
S'block'
p22240
sS'required'
p22241
I00
sS'group_name'
p22242
Nsa(dp22243
S'description'
p22244
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22245
sS'cpp_type'
p22246
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22247
sS'default'
p22248
g3
sS'name'
p22249
S'control_tags'
p22250
sS'required'
p22251
I00
sS'group_name'
p22252
S'Advanced'
p22253
sa(dp22254
S'description'
p22255
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22256
sS'cpp_type'
p22257
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22258
sS'default'
p22259
g3
sS'name'
p22260
S'diag_save_in'
p22261
sS'required'
p22262
I00
sS'group_name'
p22263
S'Advanced'
p22264
sa(dp22265
S'description'
p22266
S'Whether or not this kernel will be used as an eigen kernel\n'
p22267
sS'cpp_type'
p22268
S'bool'
p22269
sS'default'
p22270
S'0'
p22271
sS'name'
p22272
S'eigen_kernel'
p22273
sS'required'
p22274
I00
sS'group_name'
p22275
Nsa(dp22276
S'description'
p22277
S'Set the enabled status of the MooseObject.\n'
p22278
sS'cpp_type'
p22279
S'bool'
p22280
sS'default'
p22281
S'1'
p22282
sS'name'
p22283
S'enable'
p22284
sS'required'
p22285
I00
sS'group_name'
p22286
S'Advanced'
p22287
sa(dp22288
S'description'
p22289
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22290
sS'cpp_type'
p22291
S'bool'
p22292
sS'default'
p22293
S'1'
p22294
sS'name'
p22295
S'implicit'
p22296
sS'required'
p22297
I00
sS'group_name'
p22298
S'Advanced'
p22299
sa(dp22300
S'description'
p22301
S'On diagonal Jacobian fill term to retain an invertable matrix for the preconditioner\n'
p22302
sS'cpp_type'
p22303
S'double'
p22304
sS'default'
p22305
S'1e-09'
p22306
sS'name'
p22307
S'jacobian_fill'
p22308
sS'required'
p22309
I00
sS'group_name'
p22310
Nsa(dp22311
S'description'
p22312
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22313
sS'cpp_type'
p22314
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22315
sS'default'
p22316
g3
sS'name'
p22317
S'save_in'
p22318
sS'required'
p22319
I00
sS'group_name'
p22320
S'Advanced'
p22321
sa(dp22322
S'description'
p22323
S'The seed for the master random number generator\n'
p22324
sS'cpp_type'
p22325
S'unsigned int'
p22326
sS'default'
p22327
S'0'
p22328
sS'name'
p22329
S'seed'
p22330
sS'required'
p22331
I00
sS'group_name'
p22332
S'Advanced'
p22333
sa(dp22334
S'description'
p22335
g3
sS'cpp_type'
p22336
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22337
sS'default'
p22338
S'NullKernel'
p22339
sS'name'
p22340
S'type'
p22341
sS'required'
p22342
I00
sS'group_name'
p22343
Nsa(dp22344
S'description'
p22345
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22346
sS'cpp_type'
p22347
S'bool'
p22348
sS'default'
p22349
S'0'
p22350
sS'name'
p22351
S'use_displaced_mesh'
p22352
sS'required'
p22353
I00
sS'group_name'
p22354
S'Advanced'
p22355
sa(dp22356
S'description'
p22357
S'The name of the variable that this Kernel operates on\n'
p22358
sS'cpp_type'
p22359
S'NonlinearVariableName'
p22360
sS'default'
p22361
g3
sS'name'
p22362
S'variable'
p22363
sS'required'
p22364
I01
sS'group_name'
p22365
NsasS'name'
p22366
S'/Kernels/NullKernel'
p22367
sa(dp22368
S'description'
p22369
g3
sS'subblocks'
p22370
NsS'parameters'
p22371
(lp22372
(dp22373
S'description'
p22374
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22375
sS'cpp_type'
p22376
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p22377
sS'default'
p22378
g3
sS'name'
p22379
S'block'
p22380
sS'required'
p22381
I00
sS'group_name'
p22382
Nsa(dp22383
S'description'
p22384
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22385
sS'cpp_type'
p22386
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22387
sS'default'
p22388
g3
sS'name'
p22389
S'control_tags'
p22390
sS'required'
p22391
I00
sS'group_name'
p22392
S'Advanced'
p22393
sa(dp22394
S'description'
p22395
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22396
sS'cpp_type'
p22397
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22398
sS'default'
p22399
g3
sS'name'
p22400
S'diag_save_in'
p22401
sS'required'
p22402
I00
sS'group_name'
p22403
S'Advanced'
p22404
sa(dp22405
S'description'
p22406
S'Whether or not this kernel will be used as an eigen kernel\n'
p22407
sS'cpp_type'
p22408
S'bool'
p22409
sS'default'
p22410
S'0'
p22411
sS'name'
p22412
S'eigen_kernel'
p22413
sS'required'
p22414
I00
sS'group_name'
p22415
Nsa(dp22416
S'description'
p22417
S'Set the enabled status of the MooseObject.\n'
p22418
sS'cpp_type'
p22419
S'bool'
p22420
sS'default'
p22421
S'1'
p22422
sS'name'
p22423
S'enable'
p22424
sS'required'
p22425
I00
sS'group_name'
p22426
S'Advanced'
p22427
sa(dp22428
S'description'
p22429
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22430
sS'cpp_type'
p22431
S'bool'
p22432
sS'default'
p22433
S'1'
p22434
sS'name'
p22435
S'implicit'
p22436
sS'required'
p22437
I00
sS'group_name'
p22438
S'Advanced'
p22439
sa(dp22440
S'description'
p22441
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22442
sS'cpp_type'
p22443
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22444
sS'default'
p22445
g3
sS'name'
p22446
S'save_in'
p22447
sS'required'
p22448
I00
sS'group_name'
p22449
S'Advanced'
p22450
sa(dp22451
S'description'
p22452
S'The seed for the master random number generator\n'
p22453
sS'cpp_type'
p22454
S'unsigned int'
p22455
sS'default'
p22456
S'0'
p22457
sS'name'
p22458
S'seed'
p22459
sS'required'
p22460
I00
sS'group_name'
p22461
S'Advanced'
p22462
sa(dp22463
S'description'
p22464
g3
sS'cpp_type'
p22465
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22466
sS'default'
p22467
S'Reaction'
p22468
sS'name'
p22469
S'type'
p22470
sS'required'
p22471
I00
sS'group_name'
p22472
Nsa(dp22473
S'description'
p22474
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22475
sS'cpp_type'
p22476
S'bool'
p22477
sS'default'
p22478
S'0'
p22479
sS'name'
p22480
S'use_displaced_mesh'
p22481
sS'required'
p22482
I00
sS'group_name'
p22483
S'Advanced'
p22484
sa(dp22485
S'description'
p22486
S'The name of the variable that this Kernel operates on\n'
p22487
sS'cpp_type'
p22488
S'NonlinearVariableName'
p22489
sS'default'
p22490
g3
sS'name'
p22491
S'variable'
p22492
sS'required'
p22493
I01
sS'group_name'
p22494
NsasS'name'
p22495
S'/Kernels/Reaction'
p22496
sa(dp22497
S'description'
p22498
g3
sS'subblocks'
p22499
NsS'parameters'
p22500
(lp22501
(dp22502
S'description'
p22503
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22504
sS'cpp_type'
p22505
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p22506
sS'default'
p22507
g3
sS'name'
p22508
S'block'
p22509
sS'required'
p22510
I00
sS'group_name'
p22511
Nsa(dp22512
S'description'
p22513
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22514
sS'cpp_type'
p22515
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22516
sS'default'
p22517
g3
sS'name'
p22518
S'control_tags'
p22519
sS'required'
p22520
I00
sS'group_name'
p22521
S'Advanced'
p22522
sa(dp22523
S'description'
p22524
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22525
sS'cpp_type'
p22526
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22527
sS'default'
p22528
g3
sS'name'
p22529
S'diag_save_in'
p22530
sS'required'
p22531
I00
sS'group_name'
p22532
S'Advanced'
p22533
sa(dp22534
S'description'
p22535
S'Whether or not this kernel will be used as an eigen kernel\n'
p22536
sS'cpp_type'
p22537
S'bool'
p22538
sS'default'
p22539
S'0'
p22540
sS'name'
p22541
S'eigen_kernel'
p22542
sS'required'
p22543
I00
sS'group_name'
p22544
Nsa(dp22545
S'description'
p22546
S'Set the enabled status of the MooseObject.\n'
p22547
sS'cpp_type'
p22548
S'bool'
p22549
sS'default'
p22550
S'1'
p22551
sS'name'
p22552
S'enable'
p22553
sS'required'
p22554
I00
sS'group_name'
p22555
S'Advanced'
p22556
sa(dp22557
S'description'
p22558
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22559
sS'cpp_type'
p22560
S'bool'
p22561
sS'default'
p22562
S'1'
p22563
sS'name'
p22564
S'implicit'
p22565
sS'required'
p22566
I00
sS'group_name'
p22567
S'Advanced'
p22568
sa(dp22569
S'description'
p22570
S'True for mass matrix lumping, false otherwise\n'
p22571
sS'cpp_type'
p22572
S'bool'
p22573
sS'default'
p22574
S'0'
p22575
sS'name'
p22576
S'lumping'
p22577
sS'required'
p22578
I00
sS'group_name'
p22579
Nsa(dp22580
S'description'
p22581
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22582
sS'cpp_type'
p22583
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22584
sS'default'
p22585
g3
sS'name'
p22586
S'save_in'
p22587
sS'required'
p22588
I00
sS'group_name'
p22589
S'Advanced'
p22590
sa(dp22591
S'description'
p22592
S'The seed for the master random number generator\n'
p22593
sS'cpp_type'
p22594
S'unsigned int'
p22595
sS'default'
p22596
S'0'
p22597
sS'name'
p22598
S'seed'
p22599
sS'required'
p22600
I00
sS'group_name'
p22601
S'Advanced'
p22602
sa(dp22603
S'description'
p22604
g3
sS'cpp_type'
p22605
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22606
sS'default'
p22607
S'TimeDerivative'
p22608
sS'name'
p22609
S'type'
p22610
sS'required'
p22611
I00
sS'group_name'
p22612
Nsa(dp22613
S'description'
p22614
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22615
sS'cpp_type'
p22616
S'bool'
p22617
sS'default'
p22618
S'0'
p22619
sS'name'
p22620
S'use_displaced_mesh'
p22621
sS'required'
p22622
I00
sS'group_name'
p22623
S'Advanced'
p22624
sa(dp22625
S'description'
p22626
S'The name of the variable that this Kernel operates on\n'
p22627
sS'cpp_type'
p22628
S'NonlinearVariableName'
p22629
sS'default'
p22630
g3
sS'name'
p22631
S'variable'
p22632
sS'required'
p22633
I01
sS'group_name'
p22634
NsasS'name'
p22635
S'/Kernels/TimeDerivative'
p22636
sa(dp22637
S'description'
p22638
g3
sS'subblocks'
p22639
NsS'parameters'
p22640
(lp22641
(dp22642
S'description'
p22643
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22644
sS'cpp_type'
p22645
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p22646
sS'default'
p22647
g3
sS'name'
p22648
S'block'
p22649
sS'required'
p22650
I00
sS'group_name'
p22651
Nsa(dp22652
S'description'
p22653
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22654
sS'cpp_type'
p22655
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22656
sS'default'
p22657
g3
sS'name'
p22658
S'control_tags'
p22659
sS'required'
p22660
I00
sS'group_name'
p22661
S'Advanced'
p22662
sa(dp22663
S'description'
p22664
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22665
sS'cpp_type'
p22666
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22667
sS'default'
p22668
g3
sS'name'
p22669
S'diag_save_in'
p22670
sS'required'
p22671
I00
sS'group_name'
p22672
S'Advanced'
p22673
sa(dp22674
S'description'
p22675
S'Whether or not this kernel will be used as an eigen kernel\n'
p22676
sS'cpp_type'
p22677
S'bool'
p22678
sS'default'
p22679
S'0'
p22680
sS'name'
p22681
S'eigen_kernel'
p22682
sS'required'
p22683
I00
sS'group_name'
p22684
Nsa(dp22685
S'description'
p22686
S'Set the enabled status of the MooseObject.\n'
p22687
sS'cpp_type'
p22688
S'bool'
p22689
sS'default'
p22690
S'1'
p22691
sS'name'
p22692
S'enable'
p22693
sS'required'
p22694
I00
sS'group_name'
p22695
S'Advanced'
p22696
sa(dp22697
S'description'
p22698
S'The forcing function\n'
p22699
sS'cpp_type'
p22700
S'FunctionName'
p22701
sS'default'
p22702
g3
sS'name'
p22703
S'function'
p22704
sS'required'
p22705
I01
sS'group_name'
p22706
Nsa(dp22707
S'description'
p22708
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22709
sS'cpp_type'
p22710
S'bool'
p22711
sS'default'
p22712
S'1'
p22713
sS'name'
p22714
S'implicit'
p22715
sS'required'
p22716
I00
sS'group_name'
p22717
S'Advanced'
p22718
sa(dp22719
S'description'
p22720
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22721
sS'cpp_type'
p22722
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22723
sS'default'
p22724
g3
sS'name'
p22725
S'save_in'
p22726
sS'required'
p22727
I00
sS'group_name'
p22728
S'Advanced'
p22729
sa(dp22730
S'description'
p22731
S'The seed for the master random number generator\n'
p22732
sS'cpp_type'
p22733
S'unsigned int'
p22734
sS'default'
p22735
S'0'
p22736
sS'name'
p22737
S'seed'
p22738
sS'required'
p22739
I00
sS'group_name'
p22740
S'Advanced'
p22741
sa(dp22742
S'description'
p22743
g3
sS'cpp_type'
p22744
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22745
sS'default'
p22746
S'UserForcingFunction'
p22747
sS'name'
p22748
S'type'
p22749
sS'required'
p22750
I00
sS'group_name'
p22751
Nsa(dp22752
S'description'
p22753
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22754
sS'cpp_type'
p22755
S'bool'
p22756
sS'default'
p22757
S'0'
p22758
sS'name'
p22759
S'use_displaced_mesh'
p22760
sS'required'
p22761
I00
sS'group_name'
p22762
S'Advanced'
p22763
sa(dp22764
S'description'
p22765
S'The name of the variable that this Kernel operates on\n'
p22766
sS'cpp_type'
p22767
S'NonlinearVariableName'
p22768
sS'default'
p22769
g3
sS'name'
p22770
S'variable'
p22771
sS'required'
p22772
I01
sS'group_name'
p22773
NsasS'name'
p22774
S'/Kernels/UserForcingFunction'
p22775
sasS'parameters'
p22776
NsS'name'
p22777
S'/Kernels'
p22778
sa(dp22779
S'description'
p22780
g3
sS'subblocks'
p22781
(lp22782
(dp22783
S'description'
p22784
g3
sS'subblocks'
p22785
NsS'parameters'
p22786
(lp22787
(dp22788
S'description'
p22789
S'A string representing the Moose Object that will be built by this Action\n'
p22790
sS'cpp_type'
p22791
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22792
sS'default'
p22793
g3
sS'name'
p22794
S'type'
p22795
sS'required'
p22796
I01
sS'group_name'
p22797
NsasS'name'
p22798
S'/Materials/*'
p22799
sa(dp22800
S'description'
p22801
g3
sS'subblocks'
p22802
NsS'parameters'
p22803
(lp22804
(dp22805
S'description'
p22806
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22807
sS'cpp_type'
p22808
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p22809
sS'default'
p22810
g3
sS'name'
p22811
S'block'
p22812
sS'required'
p22813
I00
sS'group_name'
p22814
Nsa(dp22815
S'description'
p22816
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22817
sS'cpp_type'
p22818
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p22819
sS'default'
p22820
g3
sS'name'
p22821
S'boundary'
p22822
sS'required'
p22823
I00
sS'group_name'
p22824
Nsa(dp22825
S'description'
p22826
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p22827
sS'cpp_type'
p22828
S'bool'
p22829
sS'default'
p22830
S'1'
p22831
sS'name'
p22832
S'compute'
p22833
sS'required'
p22834
I00
sS'group_name'
p22835
Nsa(dp22836
S'description'
p22837
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p22838
sS'cpp_type'
p22839
S'bool'
p22840
sS'default'
p22841
S'0'
p22842
sS'name'
p22843
S'constant_on_elem'
p22844
sS'required'
p22845
I00
sS'group_name'
p22846
S'Advanced'
p22847
sa(dp22848
S'description'
p22849
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22850
sS'cpp_type'
p22851
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22852
sS'default'
p22853
g3
sS'name'
p22854
S'control_tags'
p22855
sS'required'
p22856
I00
sS'group_name'
p22857
S'Advanced'
p22858
sa(dp22859
S'description'
p22860
S'Set the enabled status of the MooseObject.\n'
p22861
sS'cpp_type'
p22862
S'bool'
p22863
sS'default'
p22864
S'1'
p22865
sS'name'
p22866
S'enable'
p22867
sS'required'
p22868
I00
sS'group_name'
p22869
S'Advanced'
p22870
sa(dp22871
S'description'
p22872
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22873
sS'cpp_type'
p22874
S'bool'
p22875
sS'default'
p22876
S'1'
p22877
sS'name'
p22878
S'implicit'
p22879
sS'required'
p22880
I00
sS'group_name'
p22881
S'Advanced'
p22882
sa(dp22883
S'description'
p22884
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p22885
sS'cpp_type'
p22886
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22887
sS'default'
p22888
g3
sS'name'
p22889
S'output_properties'
p22890
sS'required'
p22891
I00
sS'group_name'
p22892
S'Outputs'
p22893
sa(dp22894
S'description'
p22895
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p22896
sS'cpp_type'
p22897
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p22898
sS'default'
p22899
S'none'
p22900
sS'name'
p22901
S'outputs'
p22902
sS'required'
p22903
I00
sS'group_name'
p22904
S'Outputs'
p22905
sa(dp22906
S'description'
p22907
S'The names of the properties this material will have\n'
p22908
sS'cpp_type'
p22909
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22910
sS'default'
p22911
g3
sS'name'
p22912
S'prop_names'
p22913
sS'required'
p22914
I00
sS'group_name'
p22915
Nsa(dp22916
S'description'
p22917
S'The values associated with the named properties\n'
p22918
sS'cpp_type'
p22919
S'std::__1::vector<double, std::__1::allocator<double> >'
p22920
sS'default'
p22921
g3
sS'name'
p22922
S'prop_values'
p22923
sS'required'
p22924
I00
sS'group_name'
p22925
Nsa(dp22926
S'description'
p22927
S'The seed for the master random number generator\n'
p22928
sS'cpp_type'
p22929
S'unsigned int'
p22930
sS'default'
p22931
S'0'
p22932
sS'name'
p22933
S'seed'
p22934
sS'required'
p22935
I00
sS'group_name'
p22936
S'Advanced'
p22937
sa(dp22938
S'description'
p22939
g3
sS'cpp_type'
p22940
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22941
sS'default'
p22942
S'GenericConstantMaterial'
p22943
sS'name'
p22944
S'type'
p22945
sS'required'
p22946
I00
sS'group_name'
p22947
Nsa(dp22948
S'description'
p22949
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22950
sS'cpp_type'
p22951
S'bool'
p22952
sS'default'
p22953
S'0'
p22954
sS'name'
p22955
S'use_displaced_mesh'
p22956
sS'required'
p22957
I00
sS'group_name'
p22958
S'Advanced'
p22959
sasS'name'
p22960
S'/Materials/GenericConstantMaterial'
p22961
sa(dp22962
S'description'
p22963
g3
sS'subblocks'
p22964
NsS'parameters'
p22965
(lp22966
(dp22967
S'description'
p22968
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22969
sS'cpp_type'
p22970
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p22971
sS'default'
p22972
g3
sS'name'
p22973
S'block'
p22974
sS'required'
p22975
I00
sS'group_name'
p22976
Nsa(dp22977
S'description'
p22978
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22979
sS'cpp_type'
p22980
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p22981
sS'default'
p22982
g3
sS'name'
p22983
S'boundary'
p22984
sS'required'
p22985
I00
sS'group_name'
p22986
Nsa(dp22987
S'description'
p22988
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p22989
sS'cpp_type'
p22990
S'bool'
p22991
sS'default'
p22992
S'1'
p22993
sS'name'
p22994
S'compute'
p22995
sS'required'
p22996
I00
sS'group_name'
p22997
Nsa(dp22998
S'description'
p22999
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p23000
sS'cpp_type'
p23001
S'bool'
p23002
sS'default'
p23003
S'0'
p23004
sS'name'
p23005
S'constant_on_elem'
p23006
sS'required'
p23007
I00
sS'group_name'
p23008
S'Advanced'
p23009
sa(dp23010
S'description'
p23011
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23012
sS'cpp_type'
p23013
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p23014
sS'default'
p23015
g3
sS'name'
p23016
S'control_tags'
p23017
sS'required'
p23018
I00
sS'group_name'
p23019
S'Advanced'
p23020
sa(dp23021
S'description'
p23022
S'Set the enabled status of the MooseObject.\n'
p23023
sS'cpp_type'
p23024
S'bool'
p23025
sS'default'
p23026
S'1'
p23027
sS'name'
p23028
S'enable'
p23029
sS'required'
p23030
I00
sS'group_name'
p23031
S'Advanced'
p23032
sa(dp23033
S'description'
p23034
S'Determines whether this object is calculated using an implicit or explicit form\n'
p23035
sS'cpp_type'
p23036
S'bool'
p23037
sS'default'
p23038
S'1'
p23039
sS'name'
p23040
S'implicit'
p23041
sS'required'
p23042
I00
sS'group_name'
p23043
S'Advanced'
p23044
sa(dp23045
S'description'
p23046
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p23047
sS'cpp_type'
p23048
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p23049
sS'default'
p23050
g3
sS'name'
p23051
S'output_properties'
p23052
sS'required'
p23053
I00
sS'group_name'
p23054
S'Outputs'
p23055
sa(dp23056
S'description'
p23057
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p23058
sS'cpp_type'
p23059
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p23060
sS'default'
p23061
S'none'
p23062
sS'name'
p23063
S'outputs'
p23064
sS'required'
p23065
I00
sS'group_name'
p23066
S'Outputs'
p23067
sa(dp23068
S'description'
p23069
S'The seed for the master random number generator\n'
p23070
sS'cpp_type'
p23071
S'unsigned int'
p23072
sS'default'
p23073
S'0'
p23074
sS'name'
p23075
S'seed'
p23076
sS'required'
p23077
I00
sS'group_name'
p23078
S'Advanced'
p23079
sa(dp23080
S'description'
p23081
S'Name of the tensor material property to be created\n'
p23082
sS'cpp_type'
p23083
S'MaterialPropertyName'
p23084
sS'default'
p23085
g3
sS'name'
p23086
S'tensor_name'
p23087
sS'required'
p23088
I01
sS'group_name'
p23089
Nsa(dp23090
S'description'
p23091
S'Vector of values defining the constant rank two tensor\n'
p23092
sS'cpp_type'
p23093
S'std::__1::vector<double, std::__1::allocator<double> >'
p23094
sS'default'
p23095
g3
sS'name'
p23096
S'tensor_values'
p23097
sS'required'
p23098
I01
sS'group_name'
p23099
Nsa(dp23100
S'description'
p23101
g3
sS'cpp_type'
p23102
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p23103
sS'default'
p23104
S'GenericConstantRankTwoTensor'
p23105
sS'name'
p23106
S'type'
p23107
sS'required'
p23108
I00
sS'group_name'
p23109
Nsa(dp23110
S'description'
p23111
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23112
sS'cpp_type'
p23113
S'bool'
p23114
sS'default'
p23115
S'0'
p23116
sS'name'
p23117
S'use_displaced_mesh'
p23118
sS'required'
p23119
I00
sS'group_name'
p23120
S'Advanced'
p23121
sasS'name'
p23122
S'/Materials/GenericConstantRankTwoTensor'
p23123
sa(dp23124
S'description'
p23125
g3
sS'subblocks'
p23126
NsS'parameters'
p23127
(lp23128
(dp23129
S'description'
p23130
S'The list of block ids (SubdomainID) that this object will be applied\n'
p23131
sS'cpp_type'
p23132
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p23133
sS'default'
p23134
g3
sS'name'
p23135
S'block'
p23136
sS'required'
p23137
I00
sS'group_name'
p23138
Nsa(dp23139
S'description'
p23140
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p23141
sS'cpp_type'
p23142
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p23143
sS'default'
p23144
g3
sS'name'
p23145
S'boundary'
p23146
sS'required'
p23147
I00
sS'group_name'
p23148
Nsa(dp23149
S'description'
p23150
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p23151
sS'cpp_type'
p23152
S'bool'
p23153
sS'default'
p23154
S'1'
p23155
sS'name'
p23156
S'compute'
p23157
sS'required'
p23158
I00
sS'group_name'
p23159
Nsa(dp23160
S'description'
p23161
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p23162
sS'cpp_type'
p23163
S'bool'
p23164
sS'default'
p23165
S'0'
p23166
sS'name'
p23167
S'constant_on_elem'
p23168
sS'required'
p23169
I00
sS'group_name'
p23170
S'Advanced'
p23171
sa(dp23172
S'description'
p23173
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23174
sS'cpp_type'
p23175
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p23176
sS'default'
p23177
g3
sS'name'
p23178
S'control_tags'
p23179
sS'required'
p23180
I00
sS'group_name'
p23181
S'Advanced'
p23182
sa(dp23183
S'description'
p23184
S'Set the enabled status of the MooseObject.\n'
p23185
sS'cpp_type'
p23186
S'bool'
p23187
sS'default'
p23188
S'1'
p23189
sS'name'
p23190
S'enable'
p23191
sS'required'
p23192
I00
sS'group_name'
p23193
S'Advanced'
p23194
sa(dp23195
S'description'
p23196
S'Enable the declaration of old and older values\n'
p23197
sS'cpp_type'
p23198
S'bool'
p23199
sS'default'
p23200
S'0'
p23201
sS'name'
p23202
S'enable_stateful'
p23203
sS'required'
p23204
I00
sS'group_name'
p23205
Nsa(dp23206
S'description'
p23207
S'Determines whether this object is calculated using an implicit or explicit form\n'
p23208
sS'cpp_type'
p23209
S'bool'
p23210
sS'default'
p23211
S'1'
p23212
sS'name'
p23213
S'implicit'
p23214
sS'required'
p23215
I00
sS'group_name'
p23216
S'Advanced'
p23217
sa(dp23218
S'description'
p23219
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p23220
sS'cpp_type'
p23221
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p23222
sS'default'
p23223
g3
sS'name'
p23224
S'output_properties'
p23225
sS'required'
p23226
I00
sS'group_name'
p23227
S'Outputs'
p23228
sa(dp23229
S'description'
p23230
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p23231
sS'cpp_type'
p23232
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p23233
sS'default'
p23234
S'none'
p23235
sS'name'
p23236
S'outputs'
p23237
sS'required'
p23238
I00
sS'group_name'
p23239
S'Outputs'
p23240
sa(dp23241
S'description'
p23242
S'The names of the properties this material will have\n'
p23243
sS'cpp_type'
p23244
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p23245
sS'default'
p23246
g3
sS'name'
p23247
S'prop_names'
p23248
sS'required'
p23249
I00
sS'group_name'
p23250
Nsa(dp23251
S'description'
p23252
S'The corresponding names of the functions that are going to provide the values for the variables\n'
p23253
sS'cpp_type'
p23254
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p23255
sS'default'
p23256
g3
sS'name'
p23257
S'prop_values'
p23258
sS'required'
p23259
I00
sS'group_name'
p23260
Nsa(dp23261
S'description'
p23262
S'The seed for the master random number generator\n'
p23263
sS'cpp_type'
p23264
S'unsigned int'
p23265
sS'default'
p23266
S'0'
p23267
sS'name'
p23268
S'seed'
p23269
sS'required'
p23270
I00
sS'group_name'
p23271
S'Advanced'
p23272
sa(dp23273
S'description'
p23274
g3
sS'cpp_type'
p23275
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p23276
sS'default'
p23277
S'GenericFunctionMaterial'
p23278
sS'name'
p23279
S'type'
p23280
sS'required'
p23281
I00
sS'group_name'
p23282
Nsa(dp23283
S'description'
p23284
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23285
sS'cpp_type'
p23286
S'bool'
p23287
sS'default'
p23288
S'0'
p23289
sS'name'
p23290
S'use_displaced_mesh'
p23291
sS'required'
p23292
I00
sS'group_name'
p23293
S'Advanced'
p23294
sasS'name'
p23295
S'/Materials/GenericFunctionMaterial'
p23296
sasS'parameters'
p23297
NsS'name'
p23298
S'/Materials'
p23299
sa(dp23300
S'description'
p23301
g3
sS'subblocks'
p23302
(lp23303
(dp23304
S'description'
p23305
g3
sS'subblocks'
p23306
(lp23307
(dp23308
S'description'
p23309
S'Read a mesh from a file.\n'
p23310
sS'subblocks'
p23311
NsS'parameters'
p23312
(lp23313
(dp23314
S'name'
p23315
S'centroid_partitioner_direction'
p23316
sS'cpp_type'
p23317
S'MooseEnum'
p23318
sS'default'
p23319
g3
sS'description'
p23320
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p23321
sS'required'
p23322
I00
sS'options'
p23323
S'x y z radial'
p23324
sS'group_name'
p23325
S'Partitioning'
p23326
sa(dp23327
S'description'
p23328
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p23329
sS'cpp_type'
p23330
S'bool'
p23331
sS'default'
p23332
S'1'
p23333
sS'name'
p23334
S'construct_node_list_from_side_list'
p23335
sS'required'
p23336
I00
sS'group_name'
p23337
S'Advanced'
p23338
sa(dp23339
S'description'
p23340
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23341
sS'cpp_type'
p23342
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p23343
sS'default'
p23344
g3
sS'name'
p23345
S'control_tags'
p23346
sS'required'
p23347
I00
sS'group_name'
p23348
S'Advanced'
p23349
sa(dp23350
S'name'
p23351
S'dim'
p23352
sS'cpp_type'
p23353
S'MooseEnum'
p23354
sS'default'
p23355
S'1'
p23356
sS'description'
p23357
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n'
p23358
sS'required'
p23359
I00
sS'options'
p23360
S'1 2 3'
p23361
sS'group_name'
p23362
S'Advanced'
p23363
sa(dp23364
S'name'
p23365
S'distribution'
p23366
sS'cpp_type'
p23367
S'MooseEnum'
p23368
sS'default'
p23369
S'DEFAULT'
p23370
sS'description'
p23371
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p23372
sS'required'
p23373
I00
sS'options'
p23374
S'PARALLEL SERIAL DEFAULT'
p23375
sS'group_name'
p23376
Nsa(dp23377
S'description'
p23378
S'Set the enabled status of the MooseObject.\n'
p23379
sS'cpp_type'
p23380
S'bool'
p23381
sS'default'
p23382
S'1'
p23383
sS'name'
p23384
S'enable'
p23385
sS'required'
p23386
I00
sS'group_name'
p23387
S'Advanced'
p23388
sa(dp23389
S'description'
p23390
S'The name of the mesh file to read\n'
p23391
sS'cpp_type'
p23392
S'MeshFileName'
p23393
sS'default'
p23394
g3
sS'name'
p23395
S'file'
p23396
sS'required'
p23397
I01
sS'group_name'
p23398
Nsa(dp23399
S'description'
p23400
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p23401
sS'cpp_type'
p23402
S'bool'
p23403
sS'default'
p23404
S'0'
p23405
sS'name'
p23406
S'ghost_point_neighbors'
p23407
sS'required'
p23408
I00
sS'group_name'
p23409
S'Advanced'
p23410
sa(dp23411
S'description'
p23412
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p23413
sS'cpp_type'
p23414
S'bool'
p23415
sS'default'
p23416
S'0'
p23417
sS'name'
p23418
S'nemesis'
p23419
sS'required'
p23420
I00
sS'group_name'
p23421
S'Advanced'
p23422
sa(dp23423
S'description'
p23424
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p23425
sS'cpp_type'
p23426
S'unsigned short'
p23427
sS'default'
p23428
S'1'
p23429
sS'name'
p23430
S'num_ghosted_layers'
p23431
sS'required'
p23432
I00
sS'group_name'
p23433
S'Advanced'
p23434
sa(dp23435
S'name'
p23436
S'parallel_type'
p23437
sS'cpp_type'
p23438
S'MooseEnum'
p23439
sS'default'
p23440
S'DEFAULT'
p23441
sS'description'
p23442
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p23443
sS'required'
p23444
I00
sS'options'
p23445
S'DISTRIBUTED REPLICATED DEFAULT'
p23446
sS'group_name'
p23447
Nsa(dp23448
S'name'
p23449
S'partitioner'
p23450
sS'cpp_type'
p23451
S'MooseEnum'
p23452
sS'default'
p23453
S'default'
p23454
sS'description'
p23455
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p23456
sS'required'
p23457
I00
sS'options'
p23458
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p23459
sS'group_name'
p23460
S'Partitioning'
p23461
sa(dp23462
S'name'
p23463
S'patch_update_strategy'
p23464
sS'cpp_type'
p23465
S'MooseEnum'
p23466
sS'default'
p23467
S'never'
p23468
sS'description'
p23469
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p23470
sS'required'
p23471
I00
sS'options'
p23472
S'never always auto'
p23473
sS'group_name'
p23474
S'Advanced'
p23475
sa(dp23476
S'description'
p23477
g3
sS'cpp_type'
p23478
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p23479
sS'default'
p23480
S'FileMesh'
p23481
sS'name'
p23482
S'type'
p23483
sS'required'
p23484
I00
sS'group_name'
p23485
NsasS'name'
p23486
S'/Mesh/<type>/FileMesh'
p23487
sa(dp23488
S'description'
p23489
S'Create a line, square, or cube mesh with uniformly spaced or biased elements.\n'
p23490
sS'subblocks'
p23491
NsS'parameters'
p23492
(lp23493
(dp23494
S'description'
p23495
S'The amount by which to grow (or shrink) the cells in the x-direction.\n'
p23496
sS'cpp_type'
p23497
S'double'
p23498
sS'default'
p23499
S'1'
p23500
sS'name'
p23501
S'bias_x'
p23502
sS'required'
p23503
I00
sS'group_name'
p23504
Nsa(dp23505
S'description'
p23506
S'The amount by which to grow (or shrink) the cells in the y-direction.\n'
p23507
sS'cpp_type'
p23508
S'double'
p23509
sS'default'
p23510
S'1'
p23511
sS'name'
p23512
S'bias_y'
p23513
sS'required'
p23514
I00
sS'group_name'
p23515
Nsa(dp23516
S'description'
p23517
S'The amount by which to grow (or shrink) the cells in the z-direction.\n'
p23518
sS'cpp_type'
p23519
S'double'
p23520
sS'default'
p23521
S'1'
p23522
sS'name'
p23523
S'bias_z'
p23524
sS'required'
p23525
I00
sS'group_name'
p23526
Nsa(dp23527
S'name'
p23528
S'centroid_partitioner_direction'
p23529
sS'cpp_type'
p23530
S'MooseEnum'
p23531
sS'default'
p23532
g3
sS'description'
p23533
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p23534
sS'required'
p23535
I00
sS'options'
p23536
S'x y z radial'
p23537
sS'group_name'
p23538
S'Partitioning'
p23539
sa(dp23540
S'description'
p23541
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p23542
sS'cpp_type'
p23543
S'bool'
p23544
sS'default'
p23545
S'1'
p23546
sS'name'
p23547
S'construct_node_list_from_side_list'
p23548
sS'required'
p23549
I00
sS'group_name'
p23550
S'Advanced'
p23551
sa(dp23552
S'description'
p23553
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23554
sS'cpp_type'
p23555
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p23556
sS'default'
p23557
g3
sS'name'
p23558
S'control_tags'
p23559
sS'required'
p23560
I00
sS'group_name'
p23561
S'Advanced'
p23562
sa(dp23563
S'name'
p23564
S'dim'
p23565
sS'cpp_type'
p23566
S'MooseEnum'
p23567
sS'default'
p23568
g3
sS'description'
p23569
S'The dimension of the mesh to be generated\n'
p23570
sS'required'
p23571
I01
sS'options'
p23572
S'1 2 3'
p23573
sS'group_name'
p23574
S'Main'
p23575
sa(dp23576
S'name'
p23577
S'distribution'
p23578
sS'cpp_type'
p23579
S'MooseEnum'
p23580
sS'default'
p23581
S'DEFAULT'
p23582
sS'description'
p23583
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p23584
sS'required'
p23585
I00
sS'options'
p23586
S'PARALLEL SERIAL DEFAULT'
p23587
sS'group_name'
p23588
Nsa(dp23589
S'name'
p23590
S'elem_type'
p23591
sS'cpp_type'
p23592
S'MooseEnum'
p23593
sS'default'
p23594
g3
sS'description'
p23595
S'The type of element from libMesh to generate (default: linear element for requested dimension)\n'
p23596
sS'required'
p23597
I00
sS'options'
p23598
S'EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14'
p23599
sS'group_name'
p23600
Nsa(dp23601
S'description'
p23602
S'Set the enabled status of the MooseObject.\n'
p23603
sS'cpp_type'
p23604
S'bool'
p23605
sS'default'
p23606
S'1'
p23607
sS'name'
p23608
S'enable'
p23609
sS'required'
p23610
I00
sS'group_name'
p23611
S'Advanced'
p23612
sa(dp23613
S'description'
p23614
S'Grade mesh into boundaries according to Gauss-Lobatto quadrature spacing.\n'
p23615
sS'cpp_type'
p23616
S'bool'
p23617
sS'default'
p23618
S'0'
p23619
sS'name'
p23620
S'gauss_lobatto_grid'
p23621
sS'required'
p23622
I00
sS'group_name'
p23623
Nsa(dp23624
S'description'
p23625
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p23626
sS'cpp_type'
p23627
S'bool'
p23628
sS'default'
p23629
S'0'
p23630
sS'name'
p23631
S'ghost_point_neighbors'
p23632
sS'required'
p23633
I00
sS'group_name'
p23634
S'Advanced'
p23635
sa(dp23636
S'description'
p23637
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p23638
sS'cpp_type'
p23639
S'bool'
p23640
sS'default'
p23641
S'0'
p23642
sS'name'
p23643
S'nemesis'
p23644
sS'required'
p23645
I00
sS'group_name'
p23646
S'Advanced'
p23647
sa(dp23648
S'description'
p23649
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p23650
sS'cpp_type'
p23651
S'unsigned short'
p23652
sS'default'
p23653
S'1'
p23654
sS'name'
p23655
S'num_ghosted_layers'
p23656
sS'required'
p23657
I00
sS'group_name'
p23658
S'Advanced'
p23659
sa(dp23660
S'description'
p23661
S'Number of elements in the X direction\n'
p23662
sS'cpp_type'
p23663
S'unsigned int'
p23664
sS'default'
p23665
S'1'
p23666
sS'name'
p23667
S'nx'
p23668
sS'required'
p23669
I00
sS'group_name'
p23670
Nsa(dp23671
S'description'
p23672
S'Number of elements in the Y direction\n'
p23673
sS'cpp_type'
p23674
S'unsigned int'
p23675
sS'default'
p23676
S'1'
p23677
sS'name'
p23678
S'ny'
p23679
sS'required'
p23680
I00
sS'group_name'
p23681
Nsa(dp23682
S'description'
p23683
S'Number of elements in the Z direction\n'
p23684
sS'cpp_type'
p23685
S'unsigned int'
p23686
sS'default'
p23687
S'1'
p23688
sS'name'
p23689
S'nz'
p23690
sS'required'
p23691
I00
sS'group_name'
p23692
Nsa(dp23693
S'name'
p23694
S'parallel_type'
p23695
sS'cpp_type'
p23696
S'MooseEnum'
p23697
sS'default'
p23698
S'DEFAULT'
p23699
sS'description'
p23700
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p23701
sS'required'
p23702
I00
sS'options'
p23703
S'DISTRIBUTED REPLICATED DEFAULT'
p23704
sS'group_name'
p23705
Nsa(dp23706
S'name'
p23707
S'partitioner'
p23708
sS'cpp_type'
p23709
S'MooseEnum'
p23710
sS'default'
p23711
S'default'
p23712
sS'description'
p23713
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p23714
sS'required'
p23715
I00
sS'options'
p23716
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p23717
sS'group_name'
p23718
S'Partitioning'
p23719
sa(dp23720
S'name'
p23721
S'patch_update_strategy'
p23722
sS'cpp_type'
p23723
S'MooseEnum'
p23724
sS'default'
p23725
S'never'
p23726
sS'description'
p23727
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p23728
sS'required'
p23729
I00
sS'options'
p23730
S'never always auto'
p23731
sS'group_name'
p23732
S'Advanced'
p23733
sa(dp23734
S'description'
p23735
g3
sS'cpp_type'
p23736
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p23737
sS'default'
p23738
S'GeneratedMesh'
p23739
sS'name'
p23740
S'type'
p23741
sS'required'
p23742
I00
sS'group_name'
p23743
Nsa(dp23744
S'description'
p23745
S'Upper X Coordinate of the generated mesh\n'
p23746
sS'cpp_type'
p23747
S'double'
p23748
sS'default'
p23749
S'1'
p23750
sS'name'
p23751
S'xmax'
p23752
sS'required'
p23753
I00
sS'group_name'
p23754
Nsa(dp23755
S'description'
p23756
S'Lower X Coordinate of the generated mesh\n'
p23757
sS'cpp_type'
p23758
S'double'
p23759
sS'default'
p23760
S'0'
p23761
sS'name'
p23762
S'xmin'
p23763
sS'required'
p23764
I00
sS'group_name'
p23765
Nsa(dp23766
S'description'
p23767
S'Upper Y Coordinate of the generated mesh\n'
p23768
sS'cpp_type'
p23769
S'double'
p23770
sS'default'
p23771
S'1'
p23772
sS'name'
p23773
S'ymax'
p23774
sS'required'
p23775
I00
sS'group_name'
p23776
Nsa(dp23777
S'description'
p23778
S'Lower Y Coordinate of the generated mesh\n'
p23779
sS'cpp_type'
p23780
S'double'
p23781
sS'default'
p23782
S'0'
p23783
sS'name'
p23784
S'ymin'
p23785
sS'required'
p23786
I00
sS'group_name'
p23787
Nsa(dp23788
S'description'
p23789
S'Upper Z Coordinate of the generated mesh\n'
p23790
sS'cpp_type'
p23791
S'double'
p23792
sS'default'
p23793
S'1'
p23794
sS'name'
p23795
S'zmax'
p23796
sS'required'
p23797
I00
sS'group_name'
p23798
Nsa(dp23799
S'description'
p23800
S'Lower Z Coordinate of the generated mesh\n'
p23801
sS'cpp_type'
p23802
S'double'
p23803
sS'default'
p23804
S'0'
p23805
sS'name'
p23806
S'zmin'
p23807
sS'required'
p23808
I00
sS'group_name'
p23809
NsasS'name'
p23810
S'/Mesh/<type>/GeneratedMesh'
p23811
sa(dp23812
S'description'
p23813
S'Generated mesh with the aspect ratio of a given image stack.\n'
p23814
sS'subblocks'
p23815
NsS'parameters'
p23816
(lp23817
(dp23818
S'description'
p23819
S'The amount by which to grow (or shrink) the cells in the x-direction.\n'
p23820
sS'cpp_type'
p23821
S'double'
p23822
sS'default'
p23823
S'1'
p23824
sS'name'
p23825
S'bias_x'
p23826
sS'required'
p23827
I00
sS'group_name'
p23828
Nsa(dp23829
S'description'
p23830
S'The amount by which to grow (or shrink) the cells in the y-direction.\n'
p23831
sS'cpp_type'
p23832
S'double'
p23833
sS'default'
p23834
S'1'
p23835
sS'name'
p23836
S'bias_y'
p23837
sS'required'
p23838
I00
sS'group_name'
p23839
Nsa(dp23840
S'description'
p23841
S'The amount by which to grow (or shrink) the cells in the z-direction.\n'
p23842
sS'cpp_type'
p23843
S'double'
p23844
sS'default'
p23845
S'1'
p23846
sS'name'
p23847
S'bias_z'
p23848
sS'required'
p23849
I00
sS'group_name'
p23850
Nsa(dp23851
S'description'
p23852
S'The number of mesh cells per pixel, must be <=1 \n'
p23853
sS'cpp_type'
p23854
S'double'
p23855
sS'default'
p23856
S'1'
p23857
sS'name'
p23858
S'cells_per_pixel'
p23859
sS'required'
p23860
I00
sS'group_name'
p23861
Nsa(dp23862
S'name'
p23863
S'centroid_partitioner_direction'
p23864
sS'cpp_type'
p23865
S'MooseEnum'
p23866
sS'default'
p23867
g3
sS'description'
p23868
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p23869
sS'required'
p23870
I00
sS'options'
p23871
S'x y z radial'
p23872
sS'group_name'
p23873
S'Partitioning'
p23874
sa(dp23875
S'description'
p23876
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p23877
sS'cpp_type'
p23878
S'bool'
p23879
sS'default'
p23880
S'1'
p23881
sS'name'
p23882
S'construct_node_list_from_side_list'
p23883
sS'required'
p23884
I00
sS'group_name'
p23885
S'Advanced'
p23886
sa(dp23887
S'description'
p23888
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23889
sS'cpp_type'
p23890
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p23891
sS'default'
p23892
g3
sS'name'
p23893
S'control_tags'
p23894
sS'required'
p23895
I00
sS'group_name'
p23896
S'Advanced'
p23897
sa(dp23898
S'name'
p23899
S'dim'
p23900
sS'cpp_type'
p23901
S'MooseEnum'
p23902
sS'default'
p23903
g3
sS'description'
p23904
S'The dimension of the mesh to be generated\n'
p23905
sS'required'
p23906
I01
sS'options'
p23907
S'1 2 3'
p23908
sS'group_name'
p23909
S'Main'
p23910
sa(dp23911
S'name'
p23912
S'distribution'
p23913
sS'cpp_type'
p23914
S'MooseEnum'
p23915
sS'default'
p23916
S'DEFAULT'
p23917
sS'description'
p23918
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p23919
sS'required'
p23920
I00
sS'options'
p23921
S'PARALLEL SERIAL DEFAULT'
p23922
sS'group_name'
p23923
Nsa(dp23924
S'name'
p23925
S'elem_type'
p23926
sS'cpp_type'
p23927
S'MooseEnum'
p23928
sS'default'
p23929
g3
sS'description'
p23930
S'The type of element from libMesh to generate (default: linear element for requested dimension)\n'
p23931
sS'required'
p23932
I00
sS'options'
p23933
S'EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14'
p23934
sS'group_name'
p23935
Nsa(dp23936
S'description'
p23937
S'Set the enabled status of the MooseObject.\n'
p23938
sS'cpp_type'
p23939
S'bool'
p23940
sS'default'
p23941
S'1'
p23942
sS'name'
p23943
S'enable'
p23944
sS'required'
p23945
I00
sS'group_name'
p23946
S'Advanced'
p23947
sa(dp23948
S'description'
p23949
S'Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n'
p23950
sS'cpp_type'
p23951
S'FileName'
p23952
sS'default'
p23953
g3
sS'name'
p23954
S'file'
p23955
sS'required'
p23956
I00
sS'group_name'
p23957
Nsa(dp23958
S'description'
p23959
S"Image file base to open, use this option when a stack of images must be read (ignored if 'file' is given)\n"
p23960
sS'cpp_type'
p23961
S'FileNameNoExtension'
p23962
sS'default'
p23963
g3
sS'name'
p23964
S'file_base'
p23965
sS'required'
p23966
I00
sS'group_name'
p23967
Nsa(dp23968
S'description'
p23969
S"Range of images to analyze, used with 'file_base' (ignored if 'file' is given)\n"
p23970
sS'cpp_type'
p23971
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p23972
sS'default'
p23973
g3
sS'name'
p23974
S'file_range'
p23975
sS'required'
p23976
I00
sS'group_name'
p23977
Nsa(dp23978
S'description'
p23979
S"Suffix of the file to open, e.g. 'png'\n"
p23980
sS'cpp_type'
p23981
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p23982
sS'default'
p23983
g3
sS'name'
p23984
S'file_suffix'
p23985
sS'required'
p23986
I00
sS'group_name'
p23987
Nsa(dp23988
S'description'
p23989
S'Grade mesh into boundaries according to Gauss-Lobatto quadrature spacing.\n'
p23990
sS'cpp_type'
p23991
S'bool'
p23992
sS'default'
p23993
S'0'
p23994
sS'name'
p23995
S'gauss_lobatto_grid'
p23996
sS'required'
p23997
I00
sS'group_name'
p23998
Nsa(dp23999
S'description'
p24000
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p24001
sS'cpp_type'
p24002
S'bool'
p24003
sS'default'
p24004
S'0'
p24005
sS'name'
p24006
S'ghost_point_neighbors'
p24007
sS'required'
p24008
I00
sS'group_name'
p24009
S'Advanced'
p24010
sa(dp24011
S'description'
p24012
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p24013
sS'cpp_type'
p24014
S'bool'
p24015
sS'default'
p24016
S'0'
p24017
sS'name'
p24018
S'nemesis'
p24019
sS'required'
p24020
I00
sS'group_name'
p24021
S'Advanced'
p24022
sa(dp24023
S'description'
p24024
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p24025
sS'cpp_type'
p24026
S'unsigned short'
p24027
sS'default'
p24028
S'1'
p24029
sS'name'
p24030
S'num_ghosted_layers'
p24031
sS'required'
p24032
I00
sS'group_name'
p24033
S'Advanced'
p24034
sa(dp24035
S'description'
p24036
S'Number of elements in the X direction\n'
p24037
sS'cpp_type'
p24038
S'unsigned int'
p24039
sS'default'
p24040
S'1'
p24041
sS'name'
p24042
S'nx'
p24043
sS'required'
p24044
I00
sS'group_name'
p24045
Nsa(dp24046
S'description'
p24047
S'Number of elements in the Y direction\n'
p24048
sS'cpp_type'
p24049
S'unsigned int'
p24050
sS'default'
p24051
S'1'
p24052
sS'name'
p24053
S'ny'
p24054
sS'required'
p24055
I00
sS'group_name'
p24056
Nsa(dp24057
S'description'
p24058
S'Number of elements in the Z direction\n'
p24059
sS'cpp_type'
p24060
S'unsigned int'
p24061
sS'default'
p24062
S'1'
p24063
sS'name'
p24064
S'nz'
p24065
sS'required'
p24066
I00
sS'group_name'
p24067
Nsa(dp24068
S'name'
p24069
S'parallel_type'
p24070
sS'cpp_type'
p24071
S'MooseEnum'
p24072
sS'default'
p24073
S'DEFAULT'
p24074
sS'description'
p24075
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p24076
sS'required'
p24077
I00
sS'options'
p24078
S'DISTRIBUTED REPLICATED DEFAULT'
p24079
sS'group_name'
p24080
Nsa(dp24081
S'name'
p24082
S'partitioner'
p24083
sS'cpp_type'
p24084
S'MooseEnum'
p24085
sS'default'
p24086
S'default'
p24087
sS'description'
p24088
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p24089
sS'required'
p24090
I00
sS'options'
p24091
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p24092
sS'group_name'
p24093
S'Partitioning'
p24094
sa(dp24095
S'name'
p24096
S'patch_update_strategy'
p24097
sS'cpp_type'
p24098
S'MooseEnum'
p24099
sS'default'
p24100
S'never'
p24101
sS'description'
p24102
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p24103
sS'required'
p24104
I00
sS'options'
p24105
S'never always auto'
p24106
sS'group_name'
p24107
S'Advanced'
p24108
sa(dp24109
S'description'
p24110
S'Whether or not to scale the image so its max dimension is 1\n'
p24111
sS'cpp_type'
p24112
S'bool'
p24113
sS'default'
p24114
S'1'
p24115
sS'name'
p24116
S'scale_to_one'
p24117
sS'required'
p24118
I00
sS'group_name'
p24119
Nsa(dp24120
S'description'
p24121
g3
sS'cpp_type'
p24122
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p24123
sS'default'
p24124
S'ImageMesh'
p24125
sS'name'
p24126
S'type'
p24127
sS'required'
p24128
I00
sS'group_name'
p24129
Nsa(dp24130
S'description'
p24131
S'Upper X Coordinate of the generated mesh\n'
p24132
sS'cpp_type'
p24133
S'double'
p24134
sS'default'
p24135
S'1'
p24136
sS'name'
p24137
S'xmax'
p24138
sS'required'
p24139
I00
sS'group_name'
p24140
Nsa(dp24141
S'description'
p24142
S'Lower X Coordinate of the generated mesh\n'
p24143
sS'cpp_type'
p24144
S'double'
p24145
sS'default'
p24146
S'0'
p24147
sS'name'
p24148
S'xmin'
p24149
sS'required'
p24150
I00
sS'group_name'
p24151
Nsa(dp24152
S'description'
p24153
S'Upper Y Coordinate of the generated mesh\n'
p24154
sS'cpp_type'
p24155
S'double'
p24156
sS'default'
p24157
S'1'
p24158
sS'name'
p24159
S'ymax'
p24160
sS'required'
p24161
I00
sS'group_name'
p24162
Nsa(dp24163
S'description'
p24164
S'Lower Y Coordinate of the generated mesh\n'
p24165
sS'cpp_type'
p24166
S'double'
p24167
sS'default'
p24168
S'0'
p24169
sS'name'
p24170
S'ymin'
p24171
sS'required'
p24172
I00
sS'group_name'
p24173
Nsa(dp24174
S'description'
p24175
S'Upper Z Coordinate of the generated mesh\n'
p24176
sS'cpp_type'
p24177
S'double'
p24178
sS'default'
p24179
S'1'
p24180
sS'name'
p24181
S'zmax'
p24182
sS'required'
p24183
I00
sS'group_name'
p24184
Nsa(dp24185
S'description'
p24186
S'Lower Z Coordinate of the generated mesh\n'
p24187
sS'cpp_type'
p24188
S'double'
p24189
sS'default'
p24190
S'0'
p24191
sS'name'
p24192
S'zmin'
p24193
sS'required'
p24194
I00
sS'group_name'
p24195
NsasS'name'
p24196
S'/Mesh/<type>/ImageMesh'
p24197
sa(dp24198
S'description'
p24199
S"Creates a 2D mesh from a specified set of unique 'tiles' meshes and a two-dimensional pattern.\n"
p24200
sS'subblocks'
p24201
NsS'parameters'
p24202
(lp24203
(dp24204
S'description'
p24205
S'name of the bottom (y) boundary\n'
p24206
sS'cpp_type'
p24207
S'BoundaryName'
p24208
sS'default'
p24209
S'bottom_boundary'
p24210
sS'name'
p24211
S'bottom_boundary'
p24212
sS'required'
p24213
I00
sS'group_name'
p24214
Nsa(dp24215
S'name'
p24216
S'centroid_partitioner_direction'
p24217
sS'cpp_type'
p24218
S'MooseEnum'
p24219
sS'default'
p24220
g3
sS'description'
p24221
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p24222
sS'required'
p24223
I00
sS'options'
p24224
S'x y z radial'
p24225
sS'group_name'
p24226
S'Partitioning'
p24227
sa(dp24228
S'description'
p24229
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p24230
sS'cpp_type'
p24231
S'bool'
p24232
sS'default'
p24233
S'1'
p24234
sS'name'
p24235
S'construct_node_list_from_side_list'
p24236
sS'required'
p24237
I00
sS'group_name'
p24238
S'Advanced'
p24239
sa(dp24240
S'description'
p24241
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24242
sS'cpp_type'
p24243
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p24244
sS'default'
p24245
g3
sS'name'
p24246
S'control_tags'
p24247
sS'required'
p24248
I00
sS'group_name'
p24249
S'Advanced'
p24250
sa(dp24251
S'name'
p24252
S'dim'
p24253
sS'cpp_type'
p24254
S'MooseEnum'
p24255
sS'default'
p24256
S'1'
p24257
sS'description'
p24258
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n'
p24259
sS'required'
p24260
I00
sS'options'
p24261
S'1 2 3'
p24262
sS'group_name'
p24263
S'Advanced'
p24264
sa(dp24265
S'name'
p24266
S'distribution'
p24267
sS'cpp_type'
p24268
S'MooseEnum'
p24269
sS'default'
p24270
S'DEFAULT'
p24271
sS'description'
p24272
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p24273
sS'required'
p24274
I00
sS'options'
p24275
S'PARALLEL SERIAL DEFAULT'
p24276
sS'group_name'
p24277
Nsa(dp24278
S'description'
p24279
S'Set the enabled status of the MooseObject.\n'
p24280
sS'cpp_type'
p24281
S'bool'
p24282
sS'default'
p24283
S'1'
p24284
sS'name'
p24285
S'enable'
p24286
sS'required'
p24287
I00
sS'group_name'
p24288
S'Advanced'
p24289
sa(dp24290
S'description'
p24291
S'The name of the mesh files to read.  They are automatically assigned ids starting with zero.\n'
p24292
sS'cpp_type'
p24293
S'std::__1::vector<MeshFileName, std::__1::allocator<MeshFileName> >'
p24294
sS'default'
p24295
g3
sS'name'
p24296
S'files'
p24297
sS'required'
p24298
I01
sS'group_name'
p24299
Nsa(dp24300
S'description'
p24301
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p24302
sS'cpp_type'
p24303
S'bool'
p24304
sS'default'
p24305
S'0'
p24306
sS'name'
p24307
S'ghost_point_neighbors'
p24308
sS'required'
p24309
I00
sS'group_name'
p24310
S'Advanced'
p24311
sa(dp24312
S'description'
p24313
S'name of the left (x) boundary\n'
p24314
sS'cpp_type'
p24315
S'BoundaryName'
p24316
sS'default'
p24317
S'left_boundary'
p24318
sS'name'
p24319
S'left_boundary'
p24320
sS'required'
p24321
I00
sS'group_name'
p24322
Nsa(dp24323
S'description'
p24324
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p24325
sS'cpp_type'
p24326
S'bool'
p24327
sS'default'
p24328
S'0'
p24329
sS'name'
p24330
S'nemesis'
p24331
sS'required'
p24332
I00
sS'group_name'
p24333
S'Advanced'
p24334
sa(dp24335
S'description'
p24336
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p24337
sS'cpp_type'
p24338
S'unsigned short'
p24339
sS'default'
p24340
S'1'
p24341
sS'name'
p24342
S'num_ghosted_layers'
p24343
sS'required'
p24344
I00
sS'group_name'
p24345
S'Advanced'
p24346
sa(dp24347
S'name'
p24348
S'parallel_type'
p24349
sS'cpp_type'
p24350
S'MooseEnum'
p24351
sS'default'
p24352
S'DEFAULT'
p24353
sS'description'
p24354
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p24355
sS'required'
p24356
I00
sS'options'
p24357
S'DISTRIBUTED REPLICATED DEFAULT'
p24358
sS'group_name'
p24359
Nsa(dp24360
S'name'
p24361
S'partitioner'
p24362
sS'cpp_type'
p24363
S'MooseEnum'
p24364
sS'default'
p24365
S'default'
p24366
sS'description'
p24367
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p24368
sS'required'
p24369
I00
sS'options'
p24370
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p24371
sS'group_name'
p24372
S'Partitioning'
p24373
sa(dp24374
S'name'
p24375
S'patch_update_strategy'
p24376
sS'cpp_type'
p24377
S'MooseEnum'
p24378
sS'default'
p24379
S'never'
p24380
sS'description'
p24381
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p24382
sS'required'
p24383
I00
sS'options'
p24384
S'never always auto'
p24385
sS'group_name'
p24386
S'Advanced'
p24387
sa(dp24388
S'description'
p24389
S'A double-indexed array starting with the upper-left corner\n'
p24390
sS'cpp_type'
p24391
S'std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >'
p24392
sS'default'
p24393
g3
sS'name'
p24394
S'pattern'
p24395
sS'required'
p24396
I01
sS'group_name'
p24397
Nsa(dp24398
S'description'
p24399
S'name of the right (x) boundary\n'
p24400
sS'cpp_type'
p24401
S'BoundaryName'
p24402
sS'default'
p24403
S'right_boundary'
p24404
sS'name'
p24405
S'right_boundary'
p24406
sS'required'
p24407
I00
sS'group_name'
p24408
Nsa(dp24409
S'description'
p24410
S'name of the top (y) boundary\n'
p24411
sS'cpp_type'
p24412
S'BoundaryName'
p24413
sS'default'
p24414
S'top_boundary'
p24415
sS'name'
p24416
S'top_boundary'
p24417
sS'required'
p24418
I00
sS'group_name'
p24419
Nsa(dp24420
S'description'
p24421
g3
sS'cpp_type'
p24422
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p24423
sS'default'
p24424
S'PatternedMesh'
p24425
sS'name'
p24426
S'type'
p24427
sS'required'
p24428
I00
sS'group_name'
p24429
Nsa(dp24430
S'description'
p24431
S'The tile width in the x direction\n'
p24432
sS'cpp_type'
p24433
S'double'
p24434
sS'default'
p24435
S'0'
p24436
sS'name'
p24437
S'x_width'
p24438
sS'required'
p24439
I00
sS'group_name'
p24440
Nsa(dp24441
S'description'
p24442
S'The tile width in the y direction\n'
p24443
sS'cpp_type'
p24444
S'double'
p24445
sS'default'
p24446
S'0'
p24447
sS'name'
p24448
S'y_width'
p24449
sS'required'
p24450
I00
sS'group_name'
p24451
Nsa(dp24452
S'description'
p24453
S'The tile width in the z direction\n'
p24454
sS'cpp_type'
p24455
S'double'
p24456
sS'default'
p24457
S'0'
p24458
sS'name'
p24459
S'z_width'
p24460
sS'required'
p24461
I00
sS'group_name'
p24462
NsasS'name'
p24463
S'/Mesh/<type>/PatternedMesh'
p24464
sa(dp24465
S'description'
p24466
S'Reads in all of the given meshes and stitches them all together into one mesh.\n'
p24467
sS'subblocks'
p24468
NsS'parameters'
p24469
(lp24470
(dp24471
S'name'
p24472
S'centroid_partitioner_direction'
p24473
sS'cpp_type'
p24474
S'MooseEnum'
p24475
sS'default'
p24476
g3
sS'description'
p24477
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p24478
sS'required'
p24479
I00
sS'options'
p24480
S'x y z radial'
p24481
sS'group_name'
p24482
S'Partitioning'
p24483
sa(dp24484
S'description'
p24485
S"Whether or not to erase the boundary IDs after they've been used for stitching.\n"
p24486
sS'cpp_type'
p24487
S'bool'
p24488
sS'default'
p24489
S'1'
p24490
sS'name'
p24491
S'clear_stitched_boundary_ids'
p24492
sS'required'
p24493
I00
sS'group_name'
p24494
Nsa(dp24495
S'description'
p24496
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p24497
sS'cpp_type'
p24498
S'bool'
p24499
sS'default'
p24500
S'1'
p24501
sS'name'
p24502
S'construct_node_list_from_side_list'
p24503
sS'required'
p24504
I00
sS'group_name'
p24505
S'Advanced'
p24506
sa(dp24507
S'description'
p24508
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24509
sS'cpp_type'
p24510
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p24511
sS'default'
p24512
g3
sS'name'
p24513
S'control_tags'
p24514
sS'required'
p24515
I00
sS'group_name'
p24516
S'Advanced'
p24517
sa(dp24518
S'name'
p24519
S'dim'
p24520
sS'cpp_type'
p24521
S'MooseEnum'
p24522
sS'default'
p24523
S'1'
p24524
sS'description'
p24525
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n'
p24526
sS'required'
p24527
I00
sS'options'
p24528
S'1 2 3'
p24529
sS'group_name'
p24530
S'Advanced'
p24531
sa(dp24532
S'name'
p24533
S'distribution'
p24534
sS'cpp_type'
p24535
S'MooseEnum'
p24536
sS'default'
p24537
S'DEFAULT'
p24538
sS'description'
p24539
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p24540
sS'required'
p24541
I00
sS'options'
p24542
S'PARALLEL SERIAL DEFAULT'
p24543
sS'group_name'
p24544
Nsa(dp24545
S'description'
p24546
S'Set the enabled status of the MooseObject.\n'
p24547
sS'cpp_type'
p24548
S'bool'
p24549
sS'default'
p24550
S'1'
p24551
sS'name'
p24552
S'enable'
p24553
sS'required'
p24554
I00
sS'group_name'
p24555
S'Advanced'
p24556
sa(dp24557
S'description'
p24558
S"The name of the mesh files to read.  These mesh files will be 'stitched' into the current mesh in this order.\n"
p24559
sS'cpp_type'
p24560
S'std::__1::vector<MeshFileName, std::__1::allocator<MeshFileName> >'
p24561
sS'default'
p24562
g3
sS'name'
p24563
S'files'
p24564
sS'required'
p24565
I01
sS'group_name'
p24566
Nsa(dp24567
S'description'
p24568
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p24569
sS'cpp_type'
p24570
S'bool'
p24571
sS'default'
p24572
S'0'
p24573
sS'name'
p24574
S'ghost_point_neighbors'
p24575
sS'required'
p24576
I00
sS'group_name'
p24577
S'Advanced'
p24578
sa(dp24579
S'description'
p24580
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p24581
sS'cpp_type'
p24582
S'bool'
p24583
sS'default'
p24584
S'0'
p24585
sS'name'
p24586
S'nemesis'
p24587
sS'required'
p24588
I00
sS'group_name'
p24589
S'Advanced'
p24590
sa(dp24591
S'description'
p24592
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p24593
sS'cpp_type'
p24594
S'unsigned short'
p24595
sS'default'
p24596
S'1'
p24597
sS'name'
p24598
S'num_ghosted_layers'
p24599
sS'required'
p24600
I00
sS'group_name'
p24601
S'Advanced'
p24602
sa(dp24603
S'name'
p24604
S'parallel_type'
p24605
sS'cpp_type'
p24606
S'MooseEnum'
p24607
sS'default'
p24608
S'DEFAULT'
p24609
sS'description'
p24610
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p24611
sS'required'
p24612
I00
sS'options'
p24613
S'DISTRIBUTED REPLICATED DEFAULT'
p24614
sS'group_name'
p24615
Nsa(dp24616
S'name'
p24617
S'partitioner'
p24618
sS'cpp_type'
p24619
S'MooseEnum'
p24620
sS'default'
p24621
S'default'
p24622
sS'description'
p24623
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p24624
sS'required'
p24625
I00
sS'options'
p24626
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p24627
sS'group_name'
p24628
S'Partitioning'
p24629
sa(dp24630
S'name'
p24631
S'patch_update_strategy'
p24632
sS'cpp_type'
p24633
S'MooseEnum'
p24634
sS'default'
p24635
S'never'
p24636
sS'description'
p24637
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p24638
sS'required'
p24639
I00
sS'options'
p24640
S'never always auto'
p24641
sS'group_name'
p24642
S'Advanced'
p24643
sa(dp24644
S'description'
p24645
S'Pairs of boundary names (one after the other) to stitch together for each step.\n'
p24646
sS'cpp_type'
p24647
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p24648
sS'default'
p24649
g3
sS'name'
p24650
S'stitch_boundaries'
p24651
sS'required'
p24652
I01
sS'group_name'
p24653
Nsa(dp24654
S'description'
p24655
g3
sS'cpp_type'
p24656
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p24657
sS'default'
p24658
S'StitchedMesh'
p24659
sS'name'
p24660
S'type'
p24661
sS'required'
p24662
I00
sS'group_name'
p24663
NsasS'name'
p24664
S'/Mesh/<type>/StitchedMesh'
p24665
sa(dp24666
S'description'
p24667
S'Use the supplied mesh and create a tiled grid by repeating this mesh in the x,y, and z directions.\n'
p24668
sS'subblocks'
p24669
NsS'parameters'
p24670
(lp24671
(dp24672
S'description'
p24673
S'name of the back (z) boundary\n'
p24674
sS'cpp_type'
p24675
S'BoundaryName'
p24676
sS'default'
p24677
S'back_boundary'
p24678
sS'name'
p24679
S'back_boundary'
p24680
sS'required'
p24681
I00
sS'group_name'
p24682
Nsa(dp24683
S'description'
p24684
S'name of the bottom (y) boundary\n'
p24685
sS'cpp_type'
p24686
S'BoundaryName'
p24687
sS'default'
p24688
S'bottom_boundary'
p24689
sS'name'
p24690
S'bottom_boundary'
p24691
sS'required'
p24692
I00
sS'group_name'
p24693
Nsa(dp24694
S'name'
p24695
S'centroid_partitioner_direction'
p24696
sS'cpp_type'
p24697
S'MooseEnum'
p24698
sS'default'
p24699
g3
sS'description'
p24700
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p24701
sS'required'
p24702
I00
sS'options'
p24703
S'x y z radial'
p24704
sS'group_name'
p24705
S'Partitioning'
p24706
sa(dp24707
S'description'
p24708
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p24709
sS'cpp_type'
p24710
S'bool'
p24711
sS'default'
p24712
S'1'
p24713
sS'name'
p24714
S'construct_node_list_from_side_list'
p24715
sS'required'
p24716
I00
sS'group_name'
p24717
S'Advanced'
p24718
sa(dp24719
S'description'
p24720
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24721
sS'cpp_type'
p24722
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p24723
sS'default'
p24724
g3
sS'name'
p24725
S'control_tags'
p24726
sS'required'
p24727
I00
sS'group_name'
p24728
S'Advanced'
p24729
sa(dp24730
S'name'
p24731
S'dim'
p24732
sS'cpp_type'
p24733
S'MooseEnum'
p24734
sS'default'
p24735
S'1'
p24736
sS'description'
p24737
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n'
p24738
sS'required'
p24739
I00
sS'options'
p24740
S'1 2 3'
p24741
sS'group_name'
p24742
S'Advanced'
p24743
sa(dp24744
S'name'
p24745
S'distribution'
p24746
sS'cpp_type'
p24747
S'MooseEnum'
p24748
sS'default'
p24749
S'DEFAULT'
p24750
sS'description'
p24751
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p24752
sS'required'
p24753
I00
sS'options'
p24754
S'PARALLEL SERIAL DEFAULT'
p24755
sS'group_name'
p24756
Nsa(dp24757
S'description'
p24758
S'Set the enabled status of the MooseObject.\n'
p24759
sS'cpp_type'
p24760
S'bool'
p24761
sS'default'
p24762
S'1'
p24763
sS'name'
p24764
S'enable'
p24765
sS'required'
p24766
I00
sS'group_name'
p24767
S'Advanced'
p24768
sa(dp24769
S'description'
p24770
S'The name of the mesh file to read\n'
p24771
sS'cpp_type'
p24772
S'MeshFileName'
p24773
sS'default'
p24774
g3
sS'name'
p24775
S'file'
p24776
sS'required'
p24777
I01
sS'group_name'
p24778
Nsa(dp24779
S'description'
p24780
S'name of the front (z) boundary\n'
p24781
sS'cpp_type'
p24782
S'BoundaryName'
p24783
sS'default'
p24784
S'front_boundary'
p24785
sS'name'
p24786
S'front_boundary'
p24787
sS'required'
p24788
I00
sS'group_name'
p24789
Nsa(dp24790
S'description'
p24791
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p24792
sS'cpp_type'
p24793
S'bool'
p24794
sS'default'
p24795
S'0'
p24796
sS'name'
p24797
S'ghost_point_neighbors'
p24798
sS'required'
p24799
I00
sS'group_name'
p24800
S'Advanced'
p24801
sa(dp24802
S'description'
p24803
S'name of the left (x) boundary\n'
p24804
sS'cpp_type'
p24805
S'BoundaryName'
p24806
sS'default'
p24807
S'left_boundary'
p24808
sS'name'
p24809
S'left_boundary'
p24810
sS'required'
p24811
I00
sS'group_name'
p24812
Nsa(dp24813
S'description'
p24814
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p24815
sS'cpp_type'
p24816
S'bool'
p24817
sS'default'
p24818
S'0'
p24819
sS'name'
p24820
S'nemesis'
p24821
sS'required'
p24822
I00
sS'group_name'
p24823
S'Advanced'
p24824
sa(dp24825
S'description'
p24826
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p24827
sS'cpp_type'
p24828
S'unsigned short'
p24829
sS'default'
p24830
S'1'
p24831
sS'name'
p24832
S'num_ghosted_layers'
p24833
sS'required'
p24834
I00
sS'group_name'
p24835
S'Advanced'
p24836
sa(dp24837
S'name'
p24838
S'parallel_type'
p24839
sS'cpp_type'
p24840
S'MooseEnum'
p24841
sS'default'
p24842
S'DEFAULT'
p24843
sS'description'
p24844
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p24845
sS'required'
p24846
I00
sS'options'
p24847
S'DISTRIBUTED REPLICATED DEFAULT'
p24848
sS'group_name'
p24849
Nsa(dp24850
S'name'
p24851
S'partitioner'
p24852
sS'cpp_type'
p24853
S'MooseEnum'
p24854
sS'default'
p24855
S'default'
p24856
sS'description'
p24857
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p24858
sS'required'
p24859
I00
sS'options'
p24860
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p24861
sS'group_name'
p24862
S'Partitioning'
p24863
sa(dp24864
S'name'
p24865
S'patch_update_strategy'
p24866
sS'cpp_type'
p24867
S'MooseEnum'
p24868
sS'default'
p24869
S'never'
p24870
sS'description'
p24871
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p24872
sS'required'
p24873
I00
sS'options'
p24874
S'never always auto'
p24875
sS'group_name'
p24876
S'Advanced'
p24877
sa(dp24878
S'description'
p24879
S'name of the right (x) boundary\n'
p24880
sS'cpp_type'
p24881
S'BoundaryName'
p24882
sS'default'
p24883
S'right_boundary'
p24884
sS'name'
p24885
S'right_boundary'
p24886
sS'required'
p24887
I00
sS'group_name'
p24888
Nsa(dp24889
S'description'
p24890
S'name of the top (y) boundary\n'
p24891
sS'cpp_type'
p24892
S'BoundaryName'
p24893
sS'default'
p24894
S'top_boundary'
p24895
sS'name'
p24896
S'top_boundary'
p24897
sS'required'
p24898
I00
sS'group_name'
p24899
Nsa(dp24900
S'description'
p24901
g3
sS'cpp_type'
p24902
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p24903
sS'default'
p24904
S'TiledMesh'
p24905
sS'name'
p24906
S'type'
p24907
sS'required'
p24908
I00
sS'group_name'
p24909
Nsa(dp24910
S'description'
p24911
S'Number of tiles to stitch together (left to right) in the x-direction\n'
p24912
sS'cpp_type'
p24913
S'unsigned int'
p24914
sS'default'
p24915
S'1'
p24916
sS'name'
p24917
S'x_tiles'
p24918
sS'required'
p24919
I00
sS'group_name'
p24920
Nsa(dp24921
S'description'
p24922
S'The tile width in the x direction\n'
p24923
sS'cpp_type'
p24924
S'double'
p24925
sS'default'
p24926
S'0'
p24927
sS'name'
p24928
S'x_width'
p24929
sS'required'
p24930
I00
sS'group_name'
p24931
Nsa(dp24932
S'description'
p24933
S'Number of tiles to stitch together (top to bottom) in the y-direction\n'
p24934
sS'cpp_type'
p24935
S'unsigned int'
p24936
sS'default'
p24937
S'1'
p24938
sS'name'
p24939
S'y_tiles'
p24940
sS'required'
p24941
I00
sS'group_name'
p24942
Nsa(dp24943
S'description'
p24944
S'The tile width in the y direction\n'
p24945
sS'cpp_type'
p24946
S'double'
p24947
sS'default'
p24948
S'0'
p24949
sS'name'
p24950
S'y_width'
p24951
sS'required'
p24952
I00
sS'group_name'
p24953
Nsa(dp24954
S'description'
p24955
S'Number of tiles to stitch together (front to back) in the z-direction\n'
p24956
sS'cpp_type'
p24957
S'unsigned int'
p24958
sS'default'
p24959
S'1'
p24960
sS'name'
p24961
S'z_tiles'
p24962
sS'required'
p24963
I00
sS'group_name'
p24964
Nsa(dp24965
S'description'
p24966
S'The tile width in the z direction\n'
p24967
sS'cpp_type'
p24968
S'double'
p24969
sS'default'
p24970
S'0'
p24971
sS'name'
p24972
S'z_width'
p24973
sS'required'
p24974
I00
sS'group_name'
p24975
NsasS'name'
p24976
S'/Mesh/<type>/TiledMesh'
p24977
sasS'parameters'
p24978
NsS'name'
p24979
S'/Mesh/<type>'
p24980
sa(dp24981
S'description'
p24982
g3
sS'subblocks'
p24983
(lp24984
(dp24985
S'description'
p24986
g3
sS'subblocks'
p24987
NsS'parameters'
p24988
(lp24989
(dp24990
S'description'
p24991
S'Master side ID\n'
p24992
sS'cpp_type'
p24993
S'BoundaryName'
p24994
sS'default'
p24995
g3
sS'name'
p24996
S'master'
p24997
sS'required'
p24998
I01
sS'group_name'
p24999
Nsa(dp25000
S'description'
p25001
S'Slave side ID\n'
p25002
sS'cpp_type'
p25003
S'BoundaryName'
p25004
sS'default'
p25005
g3
sS'name'
p25006
S'slave'
p25007
sS'required'
p25008
I01
sS'group_name'
p25009
Nsa(dp25010
S'description'
p25011
S'Subdomain name that is the mortar interface\n'
p25012
sS'cpp_type'
p25013
S'SubdomainName'
p25014
sS'default'
p25015
g3
sS'name'
p25016
S'subdomain'
p25017
sS'required'
p25018
I01
sS'group_name'
p25019
NsasS'name'
p25020
S'/Mesh/MortarInterfaces/*'
p25021
sasS'parameters'
p25022
NsS'name'
p25023
S'/Mesh/MortarInterfaces'
p25024
sa(dp25025
S'description'
p25026
g3
sS'subblocks'
p25027
(lp25028
(dp25029
S'description'
p25030
g3
sS'subblocks'
p25031
(lp25032
(dp25033
S'description'
p25034
g3
sS'subblocks'
p25035
NsS'parameters'
p25036
(lp25037
(dp25038
S'name'
p25039
S'centroid_partitioner_direction'
p25040
sS'cpp_type'
p25041
S'MooseEnum'
p25042
sS'default'
p25043
g3
sS'description'
p25044
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p25045
sS'required'
p25046
I00
sS'options'
p25047
S'x y z radial'
p25048
sS'group_name'
p25049
Nsa(dp25050
S'description'
p25051
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25052
sS'cpp_type'
p25053
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25054
sS'default'
p25055
g3
sS'name'
p25056
S'control_tags'
p25057
sS'required'
p25058
I00
sS'group_name'
p25059
S'Advanced'
p25060
sa(dp25061
S'description'
p25062
S'Set the enabled status of the MooseObject.\n'
p25063
sS'cpp_type'
p25064
S'bool'
p25065
sS'default'
p25066
S'1'
p25067
sS'name'
p25068
S'enable'
p25069
sS'required'
p25070
I00
sS'group_name'
p25071
S'Advanced'
p25072
sa(dp25073
S'name'
p25074
S'partitioner'
p25075
sS'cpp_type'
p25076
S'MooseEnum'
p25077
sS'default'
p25078
g3
sS'description'
p25079
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p25080
sS'required'
p25081
I01
sS'options'
p25082
S'metis parmetis linear centroid hilbert_sfc morton_sfc'
p25083
sS'group_name'
p25084
Nsa(dp25085
S'description'
p25086
g3
sS'cpp_type'
p25087
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25088
sS'default'
p25089
S'LibmeshPartitioner'
p25090
sS'name'
p25091
S'type'
p25092
sS'required'
p25093
I00
sS'group_name'
p25094
NsasS'name'
p25095
S'/Mesh/Partitioner/<type>/LibmeshPartitioner'
p25096
sasS'parameters'
p25097
NsS'name'
p25098
S'/Mesh/Partitioner/<type>'
p25099
sasS'parameters'
p25100
(lp25101
(dp25102
S'description'
p25103
S'A string representing the Moose Object that will be built by this Action\n'
p25104
sS'cpp_type'
p25105
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25106
sS'default'
p25107
g3
sS'name'
p25108
S'type'
p25109
sS'required'
p25110
I01
sS'group_name'
p25111
NsasS'name'
p25112
S'/Mesh/Partitioner'
p25113
sasS'parameters'
p25114
(lp25115
(dp25116
S'description'
p25117
S'The variables corresponding to the x y z displacements of the mesh.  If this is provided then the displacements will be taken into account during the computation.\n'
p25118
sS'cpp_type'
p25119
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25120
sS'default'
p25121
g3
sS'name'
p25122
S'displacements'
p25123
sS'required'
p25124
I00
sS'group_name'
p25125
Nsa(dp25126
S'description'
p25127
S'IDs of the block id/name pairs\n'
p25128
sS'cpp_type'
p25129
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p25130
sS'default'
p25131
g3
sS'name'
p25132
S'block_id'
p25133
sS'required'
p25134
I00
sS'group_name'
p25135
S'Add Names'
p25136
sa(dp25137
S'description'
p25138
S'Names of the block id/name pairs (must correspond with "block_id"\n'
p25139
sS'cpp_type'
p25140
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p25141
sS'default'
p25142
g3
sS'name'
p25143
S'block_name'
p25144
sS'required'
p25145
I00
sS'group_name'
p25146
S'Add Names'
p25147
sa(dp25148
S'description'
p25149
S'IDs of the boundary id/name pairs\n'
p25150
sS'cpp_type'
p25151
S'std::__1::vector<short, std::__1::allocator<short> >'
p25152
sS'default'
p25153
g3
sS'name'
p25154
S'boundary_id'
p25155
sS'required'
p25156
I00
sS'group_name'
p25157
S'Add Names'
p25158
sa(dp25159
S'description'
p25160
S'Names of the boundary id/name pairs (must correspond with "boundary_id"\n'
p25161
sS'cpp_type'
p25162
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p25163
sS'default'
p25164
g3
sS'name'
p25165
S'boundary_name'
p25166
sS'required'
p25167
I00
sS'group_name'
p25168
S'Add Names'
p25169
sa(dp25170
S'description'
p25171
S'If true, construct side lists from the nodesets in the mesh (i.e. if every node on a give side is in a nodeset then add that side to a sideset\n'
p25172
sS'cpp_type'
p25173
S'bool'
p25174
sS'default'
p25175
S'0'
p25176
sS'name'
p25177
S'construct_side_list_from_node_list'
p25178
sS'required'
p25179
I00
sS'group_name'
p25180
S'Advanced'
p25181
sa(dp25182
S'description'
p25183
S'Boundaries to be ghosted if using Nemesis\n'
p25184
sS'cpp_type'
p25185
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p25186
sS'default'
p25187
g3
sS'name'
p25188
S'ghosted_boundaries'
p25189
sS'required'
p25190
I00
sS'group_name'
p25191
S'Advanced'
p25192
sa(dp25193
S'description'
p25194
S"If you are using ghosted boundaries you will want to set this value to a vector of amounts to inflate the bounding boxes by.  ie if you are running a 3D problem you might set it to '0.2 0.1 0.4'\n"
p25195
sS'cpp_type'
p25196
S'std::__1::vector<double, std::__1::allocator<double> >'
p25197
sS'default'
p25198
g3
sS'name'
p25199
S'ghosted_boundaries_inflation'
p25200
sS'required'
p25201
I00
sS'group_name'
p25202
S'Advanced'
p25203
sa(dp25204
S'description'
p25205
S'The number of nodes to consider in the NearestNode neighborhood.\n'
p25206
sS'cpp_type'
p25207
S'unsigned int'
p25208
sS'default'
p25209
S'40'
p25210
sS'name'
p25211
S'patch_size'
p25212
sS'required'
p25213
I00
sS'group_name'
p25214
S'Advanced'
p25215
sa(dp25216
S'description'
p25217
S'Converts a first order mesh to a second order mesh.  Note: This is NOT needed if you are reading an actual first order mesh.\n'
p25218
sS'cpp_type'
p25219
S'bool'
p25220
sS'default'
p25221
S'0'
p25222
sS'name'
p25223
S'second_order'
p25224
sS'required'
p25225
I00
sS'group_name'
p25226
S'Advanced'
p25227
sa(dp25228
S'description'
p25229
S"If true the mesh won't be partitioned. This may cause large load imbalanced but is currently required if you have a simulation containing uniform refinement, adaptivity and stateful material properties\n"
p25230
sS'cpp_type'
p25231
S'bool'
p25232
sS'default'
p25233
S'0'
p25234
sS'name'
p25235
S'skip_partitioning'
p25236
sS'required'
p25237
I00
sS'group_name'
p25238
S'Advanced'
p25239
sa(dp25240
S'description'
p25241
S'A string representing the Moose Object that will be built by this Action\n'
p25242
sS'cpp_type'
p25243
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25244
sS'default'
p25245
S'FileMesh'
p25246
sS'name'
p25247
S'type'
p25248
sS'required'
p25249
I01
sS'group_name'
p25250
Nsa(dp25251
S'description'
p25252
S'Specify the level of uniform refinement applied to the initial mesh\n'
p25253
sS'cpp_type'
p25254
S'unsigned int'
p25255
sS'default'
p25256
S'0'
p25257
sS'name'
p25258
S'uniform_refine'
p25259
sS'required'
p25260
I00
sS'group_name'
p25261
NsasS'name'
p25262
S'/Mesh'
p25263
sa(dp25264
S'description'
p25265
g3
sS'subblocks'
p25266
(lp25267
(dp25268
S'description'
p25269
g3
sS'subblocks'
p25270
NsS'parameters'
p25271
(lp25272
(dp25273
S'description'
p25274
S'A string representing the Moose Object that will be built by this Action\n'
p25275
sS'cpp_type'
p25276
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25277
sS'default'
p25278
g3
sS'name'
p25279
S'type'
p25280
sS'required'
p25281
I01
sS'group_name'
p25282
NsasS'name'
p25283
S'/MeshModifiers/*'
p25284
sa(dp25285
S'description'
p25286
g3
sS'subblocks'
p25287
NsS'parameters'
p25288
(lp25289
(dp25290
S'description'
p25291
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25292
sS'cpp_type'
p25293
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25294
sS'default'
p25295
g3
sS'name'
p25296
S'control_tags'
p25297
sS'required'
p25298
I00
sS'group_name'
p25299
S'Advanced'
p25300
sa(dp25301
S'description'
p25302
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25303
sS'cpp_type'
p25304
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25305
sS'default'
p25306
g3
sS'name'
p25307
S'depends_on'
p25308
sS'required'
p25309
I00
sS'group_name'
p25310
Nsa(dp25311
S'description'
p25312
S'Set the enabled status of the MooseObject.\n'
p25313
sS'cpp_type'
p25314
S'bool'
p25315
sS'default'
p25316
S'1'
p25317
sS'name'
p25318
S'enable'
p25319
sS'required'
p25320
I00
sS'group_name'
p25321
S'Advanced'
p25322
sa(dp25323
S'description'
p25324
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p25325
sS'cpp_type'
p25326
S'bool'
p25327
sS'default'
p25328
S'0'
p25329
sS'name'
p25330
S'fixed_normal'
p25331
sS'required'
p25332
I00
sS'group_name'
p25333
Nsa(dp25334
S'description'
p25335
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25336
sS'cpp_type'
p25337
S'bool'
p25338
sS'default'
p25339
S'0'
p25340
sS'name'
p25341
S'force_prepare'
p25342
sS'required'
p25343
I00
sS'group_name'
p25344
Nsa(dp25345
S'description'
p25346
g3
sS'cpp_type'
p25347
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25348
sS'default'
p25349
S'AddAllSideSetsByNormals'
p25350
sS'name'
p25351
S'type'
p25352
sS'required'
p25353
I00
sS'group_name'
p25354
Nsa(dp25355
S'description'
p25356
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p25357
sS'cpp_type'
p25358
S'double'
p25359
sS'default'
p25360
S'0.1'
p25361
sS'name'
p25362
S'variance'
p25363
sS'required'
p25364
I00
sS'group_name'
p25365
NsasS'name'
p25366
S'/MeshModifiers/AddAllSideSetsByNormals'
p25367
sa(dp25368
S'description'
p25369
g3
sS'subblocks'
p25370
NsS'parameters'
p25371
(lp25372
(dp25373
S'description'
p25374
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25375
sS'cpp_type'
p25376
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25377
sS'default'
p25378
g3
sS'name'
p25379
S'control_tags'
p25380
sS'required'
p25381
I00
sS'group_name'
p25382
S'Advanced'
p25383
sa(dp25384
S'description'
p25385
S'The nodes with coordinates you want to be in the nodeset (Either this parameter or "nodes" must be supplied).\n'
p25386
sS'cpp_type'
p25387
S'std::__1::vector<double, std::__1::allocator<double> >'
p25388
sS'default'
p25389
g3
sS'name'
p25390
S'coord'
p25391
sS'required'
p25392
I00
sS'group_name'
p25393
Nsa(dp25394
S'description'
p25395
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25396
sS'cpp_type'
p25397
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25398
sS'default'
p25399
g3
sS'name'
p25400
S'depends_on'
p25401
sS'required'
p25402
I00
sS'group_name'
p25403
Nsa(dp25404
S'description'
p25405
S'Set the enabled status of the MooseObject.\n'
p25406
sS'cpp_type'
p25407
S'bool'
p25408
sS'default'
p25409
S'1'
p25410
sS'name'
p25411
S'enable'
p25412
sS'required'
p25413
I00
sS'group_name'
p25414
S'Advanced'
p25415
sa(dp25416
S'description'
p25417
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25418
sS'cpp_type'
p25419
S'bool'
p25420
sS'default'
p25421
S'0'
p25422
sS'name'
p25423
S'force_prepare'
p25424
sS'required'
p25425
I00
sS'group_name'
p25426
Nsa(dp25427
S'description'
p25428
S'The name of the boundary to create\n'
p25429
sS'cpp_type'
p25430
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p25431
sS'default'
p25432
g3
sS'name'
p25433
S'new_boundary'
p25434
sS'required'
p25435
I01
sS'group_name'
p25436
Nsa(dp25437
S'description'
p25438
S'The nodes you want to be in the nodeset (Either this parameter or "coord" must be supplied).\n'
p25439
sS'cpp_type'
p25440
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p25441
sS'default'
p25442
g3
sS'name'
p25443
S'nodes'
p25444
sS'required'
p25445
I00
sS'group_name'
p25446
Nsa(dp25447
S'description'
p25448
S'The tolerance in which two nodes are considered identical\n'
p25449
sS'cpp_type'
p25450
S'double'
p25451
sS'default'
p25452
S'1e-06'
p25453
sS'name'
p25454
S'tolerance'
p25455
sS'required'
p25456
I00
sS'group_name'
p25457
Nsa(dp25458
S'description'
p25459
g3
sS'cpp_type'
p25460
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25461
sS'default'
p25462
S'AddExtraNodeset'
p25463
sS'name'
p25464
S'type'
p25465
sS'required'
p25466
I00
sS'group_name'
p25467
NsasS'name'
p25468
S'/MeshModifiers/AddExtraNodeset'
p25469
sa(dp25470
S'description'
p25471
g3
sS'subblocks'
p25472
NsS'parameters'
p25473
(lp25474
(dp25475
S'description'
p25476
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25477
sS'cpp_type'
p25478
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25479
sS'default'
p25480
g3
sS'name'
p25481
S'control_tags'
p25482
sS'required'
p25483
I00
sS'group_name'
p25484
S'Advanced'
p25485
sa(dp25486
S'description'
p25487
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25488
sS'cpp_type'
p25489
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25490
sS'default'
p25491
g3
sS'name'
p25492
S'depends_on'
p25493
sS'required'
p25494
I00
sS'group_name'
p25495
Nsa(dp25496
S'description'
p25497
S'New subdomain IDs of all elements\n'
p25498
sS'cpp_type'
p25499
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p25500
sS'default'
p25501
g3
sS'name'
p25502
S'element_ids'
p25503
sS'required'
p25504
I00
sS'group_name'
p25505
Nsa(dp25506
S'description'
p25507
S'Set the enabled status of the MooseObject.\n'
p25508
sS'cpp_type'
p25509
S'bool'
p25510
sS'default'
p25511
S'1'
p25512
sS'name'
p25513
S'enable'
p25514
sS'required'
p25515
I00
sS'group_name'
p25516
S'Advanced'
p25517
sa(dp25518
S'description'
p25519
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25520
sS'cpp_type'
p25521
S'bool'
p25522
sS'default'
p25523
S'0'
p25524
sS'name'
p25525
S'force_prepare'
p25526
sS'required'
p25527
I00
sS'group_name'
p25528
Nsa(dp25529
S'description'
p25530
S'New subdomain IDs of all elements\n'
p25531
sS'cpp_type'
p25532
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p25533
sS'default'
p25534
g3
sS'name'
p25535
S'subdomain_ids'
p25536
sS'required'
p25537
I01
sS'group_name'
p25538
Nsa(dp25539
S'description'
p25540
g3
sS'cpp_type'
p25541
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25542
sS'default'
p25543
S'AssignElementSubdomainID'
p25544
sS'name'
p25545
S'type'
p25546
sS'required'
p25547
I00
sS'group_name'
p25548
NsasS'name'
p25549
S'/MeshModifiers/AssignElementSubdomainID'
p25550
sa(dp25551
S'description'
p25552
g3
sS'subblocks'
p25553
NsS'parameters'
p25554
(lp25555
(dp25556
S'description'
p25557
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25558
sS'cpp_type'
p25559
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25560
sS'default'
p25561
g3
sS'name'
p25562
S'control_tags'
p25563
sS'required'
p25564
I00
sS'group_name'
p25565
S'Advanced'
p25566
sa(dp25567
S'description'
p25568
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25569
sS'cpp_type'
p25570
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25571
sS'default'
p25572
g3
sS'name'
p25573
S'depends_on'
p25574
sS'required'
p25575
I00
sS'group_name'
p25576
Nsa(dp25577
S'description'
p25578
S'Set the enabled status of the MooseObject.\n'
p25579
sS'cpp_type'
p25580
S'bool'
p25581
sS'default'
p25582
S'1'
p25583
sS'name'
p25584
S'enable'
p25585
sS'required'
p25586
I00
sS'group_name'
p25587
S'Advanced'
p25588
sa(dp25589
S'description'
p25590
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25591
sS'cpp_type'
p25592
S'bool'
p25593
sS'default'
p25594
S'0'
p25595
sS'name'
p25596
S'force_prepare'
p25597
sS'required'
p25598
I00
sS'group_name'
p25599
Nsa(dp25600
S'description'
p25601
S'New subdomain IDs of all elements\n'
p25602
sS'cpp_type'
p25603
S'unsigned short'
p25604
sS'default'
p25605
g3
sS'name'
p25606
S'subdomain_id'
p25607
sS'required'
p25608
I01
sS'group_name'
p25609
Nsa(dp25610
S'description'
p25611
g3
sS'cpp_type'
p25612
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25613
sS'default'
p25614
S'AssignSubdomainID'
p25615
sS'name'
p25616
S'type'
p25617
sS'required'
p25618
I00
sS'group_name'
p25619
NsasS'name'
p25620
S'/MeshModifiers/AssignSubdomainID'
p25621
sa(dp25622
S'description'
p25623
g3
sS'subblocks'
p25624
NsS'parameters'
p25625
(lp25626
(dp25627
S'description'
p25628
S'The block to be deleted\n'
p25629
sS'cpp_type'
p25630
S'unsigned short'
p25631
sS'default'
p25632
g3
sS'name'
p25633
S'block_id'
p25634
sS'required'
p25635
I01
sS'group_name'
p25636
Nsa(dp25637
S'description'
p25638
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25639
sS'cpp_type'
p25640
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25641
sS'default'
p25642
g3
sS'name'
p25643
S'control_tags'
p25644
sS'required'
p25645
I00
sS'group_name'
p25646
S'Advanced'
p25647
sa(dp25648
S'description'
p25649
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25650
sS'cpp_type'
p25651
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25652
sS'default'
p25653
g3
sS'name'
p25654
S'depends_on'
p25655
sS'required'
p25656
I00
sS'group_name'
p25657
Nsa(dp25658
S'description'
p25659
S'Set the enabled status of the MooseObject.\n'
p25660
sS'cpp_type'
p25661
S'bool'
p25662
sS'default'
p25663
S'1'
p25664
sS'name'
p25665
S'enable'
p25666
sS'required'
p25667
I00
sS'group_name'
p25668
S'Advanced'
p25669
sa(dp25670
S'description'
p25671
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25672
sS'cpp_type'
p25673
S'bool'
p25674
sS'default'
p25675
S'0'
p25676
sS'name'
p25677
S'force_prepare'
p25678
sS'required'
p25679
I00
sS'group_name'
p25680
Nsa(dp25681
S'description'
p25682
g3
sS'cpp_type'
p25683
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25684
sS'default'
p25685
S'BlockDeleter'
p25686
sS'name'
p25687
S'type'
p25688
sS'required'
p25689
I00
sS'group_name'
p25690
NsasS'name'
p25691
S'/MeshModifiers/BlockDeleter'
p25692
sa(dp25693
S'description'
p25694
g3
sS'subblocks'
p25695
NsS'parameters'
p25696
(lp25697
(dp25698
S'description'
p25699
S'The bottom left point (in x,y,z with spaces in-between) of the box to select the nodes.\n'
p25700
sS'cpp_type'
p25701
S'libMesh::VectorValue<double>'
p25702
sS'default'
p25703
g3
sS'name'
p25704
S'bottom_left'
p25705
sS'required'
p25706
I01
sS'group_name'
p25707
Nsa(dp25708
S'description'
p25709
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25710
sS'cpp_type'
p25711
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25712
sS'default'
p25713
g3
sS'name'
p25714
S'control_tags'
p25715
sS'required'
p25716
I00
sS'group_name'
p25717
S'Advanced'
p25718
sa(dp25719
S'description'
p25720
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25721
sS'cpp_type'
p25722
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25723
sS'default'
p25724
g3
sS'name'
p25725
S'depends_on'
p25726
sS'required'
p25727
I00
sS'group_name'
p25728
Nsa(dp25729
S'description'
p25730
S'Set the enabled status of the MooseObject.\n'
p25731
sS'cpp_type'
p25732
S'bool'
p25733
sS'default'
p25734
S'1'
p25735
sS'name'
p25736
S'enable'
p25737
sS'required'
p25738
I00
sS'group_name'
p25739
S'Advanced'
p25740
sa(dp25741
S'description'
p25742
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25743
sS'cpp_type'
p25744
S'bool'
p25745
sS'default'
p25746
S'0'
p25747
sS'name'
p25748
S'force_prepare'
p25749
sS'required'
p25750
I00
sS'group_name'
p25751
Nsa(dp25752
S'name'
p25753
S'location'
p25754
sS'cpp_type'
p25755
S'MooseEnum'
p25756
sS'default'
p25757
S'INSIDE'
p25758
sS'description'
p25759
S'Control of where the nodeset is to be set\n'
p25760
sS'required'
p25761
I00
sS'options'
p25762
S'INSIDE OUTSIDE'
p25763
sS'group_name'
p25764
Nsa(dp25765
S'description'
p25766
S'The name of the nodeset to create\n'
p25767
sS'cpp_type'
p25768
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p25769
sS'default'
p25770
g3
sS'name'
p25771
S'new_boundary'
p25772
sS'required'
p25773
I01
sS'group_name'
p25774
Nsa(dp25775
S'description'
p25776
S'The bottom left point (in x,y,z with spaces in-between) of the box to select the nodes.\n'
p25777
sS'cpp_type'
p25778
S'libMesh::VectorValue<double>'
p25779
sS'default'
p25780
g3
sS'name'
p25781
S'top_right'
p25782
sS'required'
p25783
I01
sS'group_name'
p25784
Nsa(dp25785
S'description'
p25786
g3
sS'cpp_type'
p25787
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25788
sS'default'
p25789
S'BoundingBoxNodeSet'
p25790
sS'name'
p25791
S'type'
p25792
sS'required'
p25793
I00
sS'group_name'
p25794
NsasS'name'
p25795
S'/MeshModifiers/BoundingBoxNodeSet'
p25796
sa(dp25797
S'description'
p25798
S'Break boundaries based on the subdomains to which their sides are attached. Naming convention for the new boundaries will be the old boundary name plus "_to_" plus the subdomain name\n'
p25799
sS'subblocks'
p25800
NsS'parameters'
p25801
(lp25802
(dp25803
S'description'
p25804
S'Boundaries to be broken. Default means to break all boundaries\n'
p25805
sS'cpp_type'
p25806
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p25807
sS'default'
p25808
g3
sS'name'
p25809
S'boundaries'
p25810
sS'required'
p25811
I00
sS'group_name'
p25812
Nsa(dp25813
S'description'
p25814
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25815
sS'cpp_type'
p25816
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25817
sS'default'
p25818
g3
sS'name'
p25819
S'control_tags'
p25820
sS'required'
p25821
I00
sS'group_name'
p25822
S'Advanced'
p25823
sa(dp25824
S'description'
p25825
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25826
sS'cpp_type'
p25827
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25828
sS'default'
p25829
g3
sS'name'
p25830
S'depends_on'
p25831
sS'required'
p25832
I00
sS'group_name'
p25833
Nsa(dp25834
S'description'
p25835
S'Set the enabled status of the MooseObject.\n'
p25836
sS'cpp_type'
p25837
S'bool'
p25838
sS'default'
p25839
S'1'
p25840
sS'name'
p25841
S'enable'
p25842
sS'required'
p25843
I00
sS'group_name'
p25844
S'Advanced'
p25845
sa(dp25846
S'description'
p25847
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25848
sS'cpp_type'
p25849
S'bool'
p25850
sS'default'
p25851
S'0'
p25852
sS'name'
p25853
S'force_prepare'
p25854
sS'required'
p25855
I00
sS'group_name'
p25856
Nsa(dp25857
S'description'
p25858
g3
sS'cpp_type'
p25859
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25860
sS'default'
p25861
S'BreakBoundaryOnSubdomain'
p25862
sS'name'
p25863
S'type'
p25864
sS'required'
p25865
I00
sS'group_name'
p25866
NsasS'name'
p25867
S'/MeshModifiers/BreakBoundaryOnSubdomain'
p25868
sa(dp25869
S'description'
p25870
g3
sS'subblocks'
p25871
NsS'parameters'
p25872
(lp25873
(dp25874
S'description'
p25875
S'The image RGB-component to return, leaving this blank will result in a greyscale value for the image to be created. The component number is zero based, i.e. 0 returns the first (RED) component of the image.\n'
p25876
sS'cpp_type'
p25877
S'unsigned int'
p25878
sS'default'
p25879
g3
sS'name'
p25880
S'component'
p25881
sS'required'
p25882
I00
sS'group_name'
p25883
Nsa(dp25884
S'description'
p25885
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25886
sS'cpp_type'
p25887
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25888
sS'default'
p25889
g3
sS'name'
p25890
S'control_tags'
p25891
sS'required'
p25892
I00
sS'group_name'
p25893
S'Advanced'
p25894
sa(dp25895
S'description'
p25896
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25897
sS'cpp_type'
p25898
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25899
sS'default'
p25900
g3
sS'name'
p25901
S'depends_on'
p25902
sS'required'
p25903
I00
sS'group_name'
p25904
Nsa(dp25905
S'description'
p25906
S'x,y,z dimensions of the image (defaults to mesh dimensions)\n'
p25907
sS'cpp_type'
p25908
S'libMesh::Point'
p25909
sS'default'
p25910
g3
sS'name'
p25911
S'dimensions'
p25912
sS'required'
p25913
I00
sS'group_name'
p25914
Nsa(dp25915
S'description'
p25916
S'Set the enabled status of the MooseObject.\n'
p25917
sS'cpp_type'
p25918
S'bool'
p25919
sS'default'
p25920
S'1'
p25921
sS'name'
p25922
S'enable'
p25923
sS'required'
p25924
I00
sS'group_name'
p25925
S'Advanced'
p25926
sa(dp25927
S'description'
p25928
S'Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n'
p25929
sS'cpp_type'
p25930
S'FileName'
p25931
sS'default'
p25932
g3
sS'name'
p25933
S'file'
p25934
sS'required'
p25935
I00
sS'group_name'
p25936
Nsa(dp25937
S'description'
p25938
S"Image file base to open, use this option when a stack of images must be read (ignored if 'file' is given)\n"
p25939
sS'cpp_type'
p25940
S'FileNameNoExtension'
p25941
sS'default'
p25942
g3
sS'name'
p25943
S'file_base'
p25944
sS'required'
p25945
I00
sS'group_name'
p25946
Nsa(dp25947
S'description'
p25948
S"Range of images to analyze, used with 'file_base' (ignored if 'file' is given)\n"
p25949
sS'cpp_type'
p25950
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p25951
sS'default'
p25952
g3
sS'name'
p25953
S'file_range'
p25954
sS'required'
p25955
I00
sS'group_name'
p25956
Nsa(dp25957
S'description'
p25958
S"Suffix of the file to open, e.g. 'png'\n"
p25959
sS'cpp_type'
p25960
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25961
sS'default'
p25962
g3
sS'name'
p25963
S'file_suffix'
p25964
sS'required'
p25965
I00
sS'group_name'
p25966
Nsa(dp25967
S'description'
p25968
S'Flip the image along the x-axis\n'
p25969
sS'cpp_type'
p25970
S'bool'
p25971
sS'default'
p25972
S'0'
p25973
sS'name'
p25974
S'flip_x'
p25975
sS'required'
p25976
I00
sS'group_name'
p25977
S'Flip'
p25978
sa(dp25979
S'description'
p25980
S'Flip the image along the y-axis\n'
p25981
sS'cpp_type'
p25982
S'bool'
p25983
sS'default'
p25984
S'0'
p25985
sS'name'
p25986
S'flip_y'
p25987
sS'required'
p25988
I00
sS'group_name'
p25989
S'Flip'
p25990
sa(dp25991
S'description'
p25992
S'Flip the image along the z-axis\n'
p25993
sS'cpp_type'
p25994
S'bool'
p25995
sS'default'
p25996
S'0'
p25997
sS'name'
p25998
S'flip_z'
p25999
sS'required'
p26000
I00
sS'group_name'
p26001
S'Flip'
p26002
sa(dp26003
S'description'
p26004
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p26005
sS'cpp_type'
p26006
S'bool'
p26007
sS'default'
p26008
S'0'
p26009
sS'name'
p26010
S'force_prepare'
p26011
sS'required'
p26012
I00
sS'group_name'
p26013
Nsa(dp26014
S'description'
p26015
S'The value to set for data less than the threshold value\n'
p26016
sS'cpp_type'
p26017
S'double'
p26018
sS'default'
p26019
S'0'
p26020
sS'name'
p26021
S'lower_value'
p26022
sS'required'
p26023
I00
sS'group_name'
p26024
S'Threshold'
p26025
sa(dp26026
S'description'
p26027
S'Origin of the image (defaults to mesh origin)\n'
p26028
sS'cpp_type'
p26029
S'libMesh::Point'
p26030
sS'default'
p26031
g3
sS'name'
p26032
S'origin'
p26033
sS'required'
p26034
I00
sS'group_name'
p26035
Nsa(dp26036
S'description'
p26037
S'Multiplier to apply to all pixel values; occurs after shifting\n'
p26038
sS'cpp_type'
p26039
S'double'
p26040
sS'default'
p26041
S'1'
p26042
sS'name'
p26043
S'scale'
p26044
sS'required'
p26045
I00
sS'group_name'
p26046
S'Rescale'
p26047
sa(dp26048
S'description'
p26049
S'Value to add to all pixels; occurs prior to scaling\n'
p26050
sS'cpp_type'
p26051
S'double'
p26052
sS'default'
p26053
S'0'
p26054
sS'name'
p26055
S'shift'
p26056
sS'required'
p26057
I00
sS'group_name'
p26058
S'Rescale'
p26059
sa(dp26060
S'description'
p26061
S'The threshold value\n'
p26062
sS'cpp_type'
p26063
S'double'
p26064
sS'default'
p26065
g3
sS'name'
p26066
S'threshold'
p26067
sS'required'
p26068
I00
sS'group_name'
p26069
S'Threshold'
p26070
sa(dp26071
S'description'
p26072
g3
sS'cpp_type'
p26073
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26074
sS'default'
p26075
S'ImageSubdomain'
p26076
sS'name'
p26077
S'type'
p26078
sS'required'
p26079
I00
sS'group_name'
p26080
Nsa(dp26081
S'description'
p26082
S'The value to set for data greater than the threshold value\n'
p26083
sS'cpp_type'
p26084
S'double'
p26085
sS'default'
p26086
S'1'
p26087
sS'name'
p26088
S'upper_value'
p26089
sS'required'
p26090
I00
sS'group_name'
p26091
S'Threshold'
p26092
sasS'name'
p26093
S'/MeshModifiers/ImageSubdomain'
p26094
sa(dp26095
S'description'
p26096
g3
sS'subblocks'
p26097
NsS'parameters'
p26098
(lp26099
(dp26100
S'description'
p26101
S'The boundary that will be applied to the bottom of the extruded mesh\n'
p26102
sS'cpp_type'
p26103
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p26104
sS'default'
p26105
g3
sS'name'
p26106
S'bottom_sideset'
p26107
sS'required'
p26108
I00
sS'group_name'
p26109
Nsa(dp26110
S'description'
p26111
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26112
sS'cpp_type'
p26113
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26114
sS'default'
p26115
g3
sS'name'
p26116
S'control_tags'
p26117
sS'required'
p26118
I00
sS'group_name'
p26119
S'Advanced'
p26120
sa(dp26121
S'description'
p26122
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p26123
sS'cpp_type'
p26124
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26125
sS'default'
p26126
g3
sS'name'
p26127
S'depends_on'
p26128
sS'required'
p26129
I00
sS'group_name'
p26130
Nsa(dp26131
S'description'
p26132
S'Set the enabled status of the MooseObject.\n'
p26133
sS'cpp_type'
p26134
S'bool'
p26135
sS'default'
p26136
S'1'
p26137
sS'name'
p26138
S'enable'
p26139
sS'required'
p26140
I00
sS'group_name'
p26141
S'Advanced'
p26142
sa(dp26143
S'description'
p26144
S'The subdomains that will be remapped for specific layers\n'
p26145
sS'cpp_type'
p26146
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p26147
sS'default'
p26148
g3
sS'name'
p26149
S'existing_subdomains'
p26150
sS'required'
p26151
I00
sS'group_name'
p26152
Nsa(dp26153
S'description'
p26154
S'The direction and length of the extrusion\n'
p26155
sS'cpp_type'
p26156
S'libMesh::VectorValue<double>'
p26157
sS'default'
p26158
g3
sS'name'
p26159
S'extrusion_vector'
p26160
sS'required'
p26161
I01
sS'group_name'
p26162
Nsa(dp26163
S'description'
p26164
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p26165
sS'cpp_type'
p26166
S'bool'
p26167
sS'default'
p26168
S'0'
p26169
sS'name'
p26170
S'force_prepare'
p26171
sS'required'
p26172
I00
sS'group_name'
p26173
Nsa(dp26174
S'description'
p26175
S'The layers where the "existing_subdomain" will be remapped to new ids\n'
p26176
sS'cpp_type'
p26177
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p26178
sS'default'
p26179
g3
sS'name'
p26180
S'layers'
p26181
sS'required'
p26182
I00
sS'group_name'
p26183
Nsa(dp26184
S'description'
p26185
S'The list of new ids, This list should be either length "existing_subdomains" or "existing_subdomains" * layers\n'
p26186
sS'cpp_type'
p26187
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p26188
sS'default'
p26189
g3
sS'name'
p26190
S'new_ids'
p26191
sS'required'
p26192
I00
sS'group_name'
p26193
Nsa(dp26194
S'description'
p26195
S'The number of layers in the extruded mesh\n'
p26196
sS'cpp_type'
p26197
S'unsigned int'
p26198
sS'default'
p26199
S'1'
p26200
sS'name'
p26201
S'num_layers'
p26202
sS'required'
p26203
I00
sS'group_name'
p26204
Nsa(dp26205
S'description'
p26206
S'The boundary that will be to the top of the extruded mesh\n'
p26207
sS'cpp_type'
p26208
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p26209
sS'default'
p26210
g3
sS'name'
p26211
S'top_sideset'
p26212
sS'required'
p26213
I00
sS'group_name'
p26214
Nsa(dp26215
S'description'
p26216
g3
sS'cpp_type'
p26217
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26218
sS'default'
p26219
S'MeshExtruder'
p26220
sS'name'
p26221
S'type'
p26222
sS'required'
p26223
I00
sS'group_name'
p26224
NsasS'name'
p26225
S'/MeshModifiers/MeshExtruder'
p26226
sa(dp26227
S'description'
p26228
g3
sS'subblocks'
p26229
NsS'parameters'
p26230
(lp26231
(dp26232
S'description'
p26233
S'Subdomain id to set for inside/outside the bounding box\n'
p26234
sS'cpp_type'
p26235
S'unsigned short'
p26236
sS'default'
p26237
g3
sS'name'
p26238
S'block_id'
p26239
sS'required'
p26240
I01
sS'group_name'
p26241
Nsa(dp26242
S'description'
p26243
S"The center (many people spell this 'center') of the box.\n"
p26244
sS'cpp_type'
p26245
S'libMesh::Point'
p26246
sS'default'
p26247
g3
sS'name'
p26248
S'center'
p26249
sS'required'
p26250
I01
sS'group_name'
p26251
Nsa(dp26252
S'description'
p26253
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26254
sS'cpp_type'
p26255
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26256
sS'default'
p26257
g3
sS'name'
p26258
S'control_tags'
p26259
sS'required'
p26260
I00
sS'group_name'
p26261
S'Advanced'
p26262
sa(dp26263
S'description'
p26264
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p26265
sS'cpp_type'
p26266
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26267
sS'default'
p26268
g3
sS'name'
p26269
S'depends_on'
p26270
sS'required'
p26271
I00
sS'group_name'
p26272
Nsa(dp26273
S'description'
p26274
S'Set the enabled status of the MooseObject.\n'
p26275
sS'cpp_type'
p26276
S'bool'
p26277
sS'default'
p26278
S'1'
p26279
sS'name'
p26280
S'enable'
p26281
sS'required'
p26282
I00
sS'group_name'
p26283
S'Advanced'
p26284
sa(dp26285
S'description'
p26286
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p26287
sS'cpp_type'
p26288
S'bool'
p26289
sS'default'
p26290
S'0'
p26291
sS'name'
p26292
S'force_prepare'
p26293
sS'required'
p26294
I00
sS'group_name'
p26295
Nsa(dp26296
S'description'
p26297
S'The height of the box\n'
p26298
sS'cpp_type'
p26299
S'double'
p26300
sS'default'
p26301
g3
sS'name'
p26302
S'height'
p26303
sS'required'
p26304
I01
sS'group_name'
p26305
Nsa(dp26306
S'description'
p26307
S'The length of the box\n'
p26308
sS'cpp_type'
p26309
S'double'
p26310
sS'default'
p26311
g3
sS'name'
p26312
S'length'
p26313
sS'required'
p26314
I01
sS'group_name'
p26315
Nsa(dp26316
S'description'
p26317
S'The direction along which the length is oriented (must be perpendicular to width_direction).\n'
p26318
sS'cpp_type'
p26319
S'libMesh::VectorValue<double>'
p26320
sS'default'
p26321
g3
sS'name'
p26322
S'length_direction'
p26323
sS'required'
p26324
I01
sS'group_name'
p26325
Nsa(dp26326
S'name'
p26327
S'location'
p26328
sS'cpp_type'
p26329
S'MooseEnum'
p26330
sS'default'
p26331
S'INSIDE'
p26332
sS'description'
p26333
S'Control of where the subdomain id is to be set\n'
p26334
sS'required'
p26335
I00
sS'options'
p26336
S'INSIDE OUTSIDE'
p26337
sS'group_name'
p26338
Nsa(dp26339
S'description'
p26340
g3
sS'cpp_type'
p26341
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26342
sS'default'
p26343
S'OrientedSubdomainBoundingBox'
p26344
sS'name'
p26345
S'type'
p26346
sS'required'
p26347
I00
sS'group_name'
p26348
Nsa(dp26349
S'description'
p26350
S'The width of the box\n'
p26351
sS'cpp_type'
p26352
S'double'
p26353
sS'default'
p26354
g3
sS'name'
p26355
S'width'
p26356
sS'required'
p26357
I01
sS'group_name'
p26358
Nsa(dp26359
S'description'
p26360
S'The direction along which the width is oriented.\n'
p26361
sS'cpp_type'
p26362
S'libMesh::VectorValue<double>'
p26363
sS'default'
p26364
g3
sS'name'
p26365
S'width_direction'
p26366
sS'required'
p26367
I01
sS'group_name'
p26368
NsasS'name'
p26369
S'/MeshModifiers/OrientedSubdomainBoundingBox'
p26370
sa(dp26371
S'description'
p26372
S"A MeshModifier that adds element's sides to a sideset if the centroid satisfies the combinatorial_geometry expression, (and optionally) if one of the side's elements is in included_subdomain_ids and if it features the correct normal.\n"
p26373
sS'subblocks'
p26374
NsS'parameters'
p26375
(lp26376
(dp26377
S'description'
p26378
S'Function expression encoding a combinatorial geometry\n'
p26379
sS'cpp_type'
p26380
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26381
sS'default'
p26382
g3
sS'name'
p26383
S'combinatorial_geometry'
p26384
sS'required'
p26385
I01
sS'group_name'
p26386
Nsa(dp26387
S'description'
p26388
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p26389
sS'cpp_type'
p26390
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26391
sS'default'
p26392
g3
sS'name'
p26393
S'constant_expressions'
p26394
sS'required'
p26395
I00
sS'group_name'
p26396
Nsa(dp26397
S'description'
p26398
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p26399
sS'cpp_type'
p26400
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26401
sS'default'
p26402
g3
sS'name'
p26403
S'constant_names'
p26404
sS'required'
p26405
I00
sS'group_name'
p26406
Nsa(dp26407
S'description'
p26408
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26409
sS'cpp_type'
p26410
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26411
sS'default'
p26412
g3
sS'name'
p26413
S'control_tags'
p26414
sS'required'
p26415
I00
sS'group_name'
p26416
S'Advanced'
p26417
sa(dp26418
S'description'
p26419
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p26420
sS'cpp_type'
p26421
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26422
sS'default'
p26423
g3
sS'name'
p26424
S'depends_on'
p26425
sS'required'
p26426
I00
sS'group_name'
p26427
Nsa(dp26428
S'description'
p26429
S'Disable the function parser algebraic optimizer\n'
p26430
sS'cpp_type'
p26431
S'bool'
p26432
sS'default'
p26433
S'0'
p26434
sS'name'
p26435
S'disable_fpoptimizer'
p26436
sS'required'
p26437
I00
sS'group_name'
p26438
S'Advanced'
p26439
sa(dp26440
S'description'
p26441
S'Set the enabled status of the MooseObject.\n'
p26442
sS'cpp_type'
p26443
S'bool'
p26444
sS'default'
p26445
S'1'
p26446
sS'name'
p26447
S'enable'
p26448
sS'required'
p26449
I00
sS'group_name'
p26450
S'Advanced'
p26451
sa(dp26452
S'description'
p26453
S'Enable cacheing of function derivatives for faster startup time\n'
p26454
sS'cpp_type'
p26455
S'bool'
p26456
sS'default'
p26457
S'1'
p26458
sS'name'
p26459
S'enable_ad_cache'
p26460
sS'required'
p26461
I00
sS'group_name'
p26462
S'Advanced'
p26463
sa(dp26464
S'description'
p26465
S'Enable automatic immediate optimization of derivatives\n'
p26466
sS'cpp_type'
p26467
S'bool'
p26468
sS'default'
p26469
S'1'
p26470
sS'name'
p26471
S'enable_auto_optimize'
p26472
sS'required'
p26473
I00
sS'group_name'
p26474
S'Advanced'
p26475
sa(dp26476
S'description'
p26477
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p26478
sS'cpp_type'
p26479
S'bool'
p26480
sS'default'
p26481
S'1'
p26482
sS'name'
p26483
S'enable_jit'
p26484
sS'required'
p26485
I00
sS'group_name'
p26486
S'Advanced'
p26487
sa(dp26488
S'description'
p26489
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p26490
sS'cpp_type'
p26491
S'bool'
p26492
sS'default'
p26493
S'0'
p26494
sS'name'
p26495
S'fail_on_evalerror'
p26496
sS'required'
p26497
I00
sS'group_name'
p26498
S'Advanced'
p26499
sa(dp26500
S'description'
p26501
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p26502
sS'cpp_type'
p26503
S'bool'
p26504
sS'default'
p26505
S'0'
p26506
sS'name'
p26507
S'fixed_normal'
p26508
sS'required'
p26509
I00
sS'group_name'
p26510
Nsa(dp26511
S'description'
p26512
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p26513
sS'cpp_type'
p26514
S'bool'
p26515
sS'default'
p26516
S'0'
p26517
sS'name'
p26518
S'force_prepare'
p26519
sS'required'
p26520
I00
sS'group_name'
p26521
Nsa(dp26522
S'description'
p26523
S'A set of subdomain ids whose sides will be included in the new sidesets\n'
p26524
sS'cpp_type'
p26525
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p26526
sS'default'
p26527
g3
sS'name'
p26528
S'included_subdomain_ids'
p26529
sS'required'
p26530
I00
sS'group_name'
p26531
Nsa(dp26532
S'description'
p26533
S'The name of the new sideset\n'
p26534
sS'cpp_type'
p26535
S'BoundaryName'
p26536
sS'default'
p26537
g3
sS'name'
p26538
S'new_sideset_name'
p26539
sS'required'
p26540
I01
sS'group_name'
p26541
Nsa(dp26542
S'description'
p26543
S'If provided specifies the normal vector on sides that are added to the new \n'
p26544
sS'cpp_type'
p26545
S'libMesh::Point'
p26546
sS'default'
p26547
S'0 0 0'
p26548
sS'name'
p26549
S'normal'
p26550
sS'required'
p26551
I00
sS'group_name'
p26552
Nsa(dp26553
S'description'
p26554
g3
sS'cpp_type'
p26555
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26556
sS'default'
p26557
S'ParsedAddSideset'
p26558
sS'name'
p26559
S'type'
p26560
sS'required'
p26561
I00
sS'group_name'
p26562
Nsa(dp26563
S'description'
p26564
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p26565
sS'cpp_type'
p26566
S'double'
p26567
sS'default'
p26568
S'0.1'
p26569
sS'name'
p26570
S'variance'
p26571
sS'required'
p26572
I00
sS'group_name'
p26573
NsasS'name'
p26574
S'/MeshModifiers/ParsedAddSideset'
p26575
sa(dp26576
S'description'
p26577
S'MeshModifier that uses a parsed expression (combinatorial_geometry) to determine if an element (aka its centroid) is inside the combinatorial geometry and assigns a new block id.\n'
p26578
sS'subblocks'
p26579
NsS'parameters'
p26580
(lp26581
(dp26582
S'description'
p26583
S'Subdomain id to set for inside of the combinatorial\n'
p26584
sS'cpp_type'
p26585
S'unsigned short'
p26586
sS'default'
p26587
g3
sS'name'
p26588
S'block_id'
p26589
sS'required'
p26590
I01
sS'group_name'
p26591
Nsa(dp26592
S'description'
p26593
S'Subdomain name to set for inside of the combinatorial\n'
p26594
sS'cpp_type'
p26595
S'SubdomainName'
p26596
sS'default'
p26597
g3
sS'name'
p26598
S'block_name'
p26599
sS'required'
p26600
I00
sS'group_name'
p26601
Nsa(dp26602
S'description'
p26603
S'Function expression encoding a combinatorial geometry\n'
p26604
sS'cpp_type'
p26605
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26606
sS'default'
p26607
g3
sS'name'
p26608
S'combinatorial_geometry'
p26609
sS'required'
p26610
I01
sS'group_name'
p26611
Nsa(dp26612
S'description'
p26613
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p26614
sS'cpp_type'
p26615
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26616
sS'default'
p26617
g3
sS'name'
p26618
S'constant_expressions'
p26619
sS'required'
p26620
I00
sS'group_name'
p26621
Nsa(dp26622
S'description'
p26623
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p26624
sS'cpp_type'
p26625
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26626
sS'default'
p26627
g3
sS'name'
p26628
S'constant_names'
p26629
sS'required'
p26630
I00
sS'group_name'
p26631
Nsa(dp26632
S'description'
p26633
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26634
sS'cpp_type'
p26635
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26636
sS'default'
p26637
g3
sS'name'
p26638
S'control_tags'
p26639
sS'required'
p26640
I00
sS'group_name'
p26641
S'Advanced'
p26642
sa(dp26643
S'description'
p26644
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p26645
sS'cpp_type'
p26646
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26647
sS'default'
p26648
g3
sS'name'
p26649
S'depends_on'
p26650
sS'required'
p26651
I00
sS'group_name'
p26652
Nsa(dp26653
S'description'
p26654
S'Disable the function parser algebraic optimizer\n'
p26655
sS'cpp_type'
p26656
S'bool'
p26657
sS'default'
p26658
S'0'
p26659
sS'name'
p26660
S'disable_fpoptimizer'
p26661
sS'required'
p26662
I00
sS'group_name'
p26663
S'Advanced'
p26664
sa(dp26665
S'description'
p26666
S'Set the enabled status of the MooseObject.\n'
p26667
sS'cpp_type'
p26668
S'bool'
p26669
sS'default'
p26670
S'1'
p26671
sS'name'
p26672
S'enable'
p26673
sS'required'
p26674
I00
sS'group_name'
p26675
S'Advanced'
p26676
sa(dp26677
S'description'
p26678
S'Enable cacheing of function derivatives for faster startup time\n'
p26679
sS'cpp_type'
p26680
S'bool'
p26681
sS'default'
p26682
S'1'
p26683
sS'name'
p26684
S'enable_ad_cache'
p26685
sS'required'
p26686
I00
sS'group_name'
p26687
S'Advanced'
p26688
sa(dp26689
S'description'
p26690
S'Enable automatic immediate optimization of derivatives\n'
p26691
sS'cpp_type'
p26692
S'bool'
p26693
sS'default'
p26694
S'1'
p26695
sS'name'
p26696
S'enable_auto_optimize'
p26697
sS'required'
p26698
I00
sS'group_name'
p26699
S'Advanced'
p26700
sa(dp26701
S'description'
p26702
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p26703
sS'cpp_type'
p26704
S'bool'
p26705
sS'default'
p26706
S'1'
p26707
sS'name'
p26708
S'enable_jit'
p26709
sS'required'
p26710
I00
sS'group_name'
p26711
S'Advanced'
p26712
sa(dp26713
S'description'
p26714
S'A set of subdomain ids that will not changed even if they are inside/outside the combinatorial geometry\n'
p26715
sS'cpp_type'
p26716
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p26717
sS'default'
p26718
g3
sS'name'
p26719
S'excluded_subdomain_ids'
p26720
sS'required'
p26721
I00
sS'group_name'
p26722
Nsa(dp26723
S'description'
p26724
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p26725
sS'cpp_type'
p26726
S'bool'
p26727
sS'default'
p26728
S'0'
p26729
sS'name'
p26730
S'fail_on_evalerror'
p26731
sS'required'
p26732
I00
sS'group_name'
p26733
S'Advanced'
p26734
sa(dp26735
S'description'
p26736
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p26737
sS'cpp_type'
p26738
S'bool'
p26739
sS'default'
p26740
S'0'
p26741
sS'name'
p26742
S'force_prepare'
p26743
sS'required'
p26744
I00
sS'group_name'
p26745
Nsa(dp26746
S'description'
p26747
g3
sS'cpp_type'
p26748
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26749
sS'default'
p26750
S'ParsedSubdomainMeshModifier'
p26751
sS'name'
p26752
S'type'
p26753
sS'required'
p26754
I00
sS'group_name'
p26755
NsasS'name'
p26756
S'/MeshModifiers/ParsedSubdomainMeshModifier'
p26757
sa(dp26758
S'description'
p26759
S'RenameBlock re-numbers or re-names an old_block_id or old_block_name with a new_block_id or new_block_name\n'
p26760
sS'subblocks'
p26761
NsS'parameters'
p26762
(lp26763
(dp26764
S'description'
p26765
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26766
sS'cpp_type'
p26767
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26768
sS'default'
p26769
g3
sS'name'
p26770
S'control_tags'
p26771
sS'required'
p26772
I00
sS'group_name'
p26773
S'Advanced'
p26774
sa(dp26775
S'description'
p26776
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p26777
sS'cpp_type'
p26778
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26779
sS'default'
p26780
g3
sS'name'
p26781
S'depends_on'
p26782
sS'required'
p26783
I00
sS'group_name'
p26784
Nsa(dp26785
S'description'
p26786
S'Set the enabled status of the MooseObject.\n'
p26787
sS'cpp_type'
p26788
S'bool'
p26789
sS'default'
p26790
S'1'
p26791
sS'name'
p26792
S'enable'
p26793
sS'required'
p26794
I00
sS'group_name'
p26795
S'Advanced'
p26796
sa(dp26797
S'description'
p26798
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p26799
sS'cpp_type'
p26800
S'bool'
p26801
sS'default'
p26802
S'0'
p26803
sS'name'
p26804
S'force_prepare'
p26805
sS'required'
p26806
I00
sS'group_name'
p26807
Nsa(dp26808
S'description'
p26809
S'Elements with the old block number (or name) will be given this block number.  You must supply either new_block_id or new_block_name.  You may supply a vector of new_block_id, in which case the old_block information must also be a vector.\n'
p26810
sS'cpp_type'
p26811
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p26812
sS'default'
p26813
g3
sS'name'
p26814
S'new_block_id'
p26815
sS'required'
p26816
I00
sS'group_name'
p26817
Nsa(dp26818
S'description'
p26819
S'Elements with the old block number (or name) will be given this block name.  You must supply either new_block_id or new_block_name.  You may supply a vector of new_block_id, in which case the old_block information must also be a vector.\n'
p26820
sS'cpp_type'
p26821
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p26822
sS'default'
p26823
g3
sS'name'
p26824
S'new_block_name'
p26825
sS'required'
p26826
I00
sS'group_name'
p26827
Nsa(dp26828
S'description'
p26829
S'Elements with this block number will be given the new_block_number or new_block_name.  You must supply either old_block_id or old_block_name.  You may supply a vector of old_block_id, in which case the new_block information must also be a vector.\n'
p26830
sS'cpp_type'
p26831
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p26832
sS'default'
p26833
g3
sS'name'
p26834
S'old_block_id'
p26835
sS'required'
p26836
I00
sS'group_name'
p26837
Nsa(dp26838
S'description'
p26839
S'Elements with this block name will be given the new_block_number or new_block_name.  You must supply either old_block_id or old_block_name.  You may supply a vector of old_block_name, in which case the new_block information must also be a vector.\n'
p26840
sS'cpp_type'
p26841
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p26842
sS'default'
p26843
g3
sS'name'
p26844
S'old_block_name'
p26845
sS'required'
p26846
I00
sS'group_name'
p26847
Nsa(dp26848
S'description'
p26849
g3
sS'cpp_type'
p26850
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26851
sS'default'
p26852
S'RenameBlock'
p26853
sS'name'
p26854
S'type'
p26855
sS'required'
p26856
I00
sS'group_name'
p26857
NsasS'name'
p26858
S'/MeshModifiers/RenameBlock'
p26859
sa(dp26860
S'description'
p26861
S'Adds element faces that are on the exterior of the given block to the sidesets specified\n'
p26862
sS'subblocks'
p26863
NsS'parameters'
p26864
(lp26865
(dp26866
S'description'
p26867
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26868
sS'cpp_type'
p26869
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p26870
sS'default'
p26871
g3
sS'name'
p26872
S'block'
p26873
sS'required'
p26874
I00
sS'group_name'
p26875
Nsa(dp26876
S'description'
p26877
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26878
sS'cpp_type'
p26879
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26880
sS'default'
p26881
g3
sS'name'
p26882
S'control_tags'
p26883
sS'required'
p26884
I00
sS'group_name'
p26885
S'Advanced'
p26886
sa(dp26887
S'description'
p26888
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p26889
sS'cpp_type'
p26890
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26891
sS'default'
p26892
g3
sS'name'
p26893
S'depends_on'
p26894
sS'required'
p26895
I00
sS'group_name'
p26896
Nsa(dp26897
S'description'
p26898
S'Set the enabled status of the MooseObject.\n'
p26899
sS'cpp_type'
p26900
S'bool'
p26901
sS'default'
p26902
S'1'
p26903
sS'name'
p26904
S'enable'
p26905
sS'required'
p26906
I00
sS'group_name'
p26907
S'Advanced'
p26908
sa(dp26909
S'description'
p26910
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p26911
sS'cpp_type'
p26912
S'bool'
p26913
sS'default'
p26914
S'0'
p26915
sS'name'
p26916
S'fixed_normal'
p26917
sS'required'
p26918
I00
sS'group_name'
p26919
Nsa(dp26920
S'description'
p26921
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p26922
sS'cpp_type'
p26923
S'bool'
p26924
sS'default'
p26925
S'0'
p26926
sS'name'
p26927
S'force_prepare'
p26928
sS'required'
p26929
I00
sS'group_name'
p26930
Nsa(dp26931
S'description'
p26932
S'The list of boundary IDs to create on the supplied subdomain\n'
p26933
sS'cpp_type'
p26934
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p26935
sS'default'
p26936
g3
sS'name'
p26937
S'new_boundary'
p26938
sS'required'
p26939
I01
sS'group_name'
p26940
Nsa(dp26941
S'description'
p26942
S'If supplied, only faces with normal equal to this, up to normal_tol, will be added to the sidesets specified\n'
p26943
sS'cpp_type'
p26944
S'libMesh::Point'
p26945
sS'default'
p26946
g3
sS'name'
p26947
S'normal'
p26948
sS'required'
p26949
I00
sS'group_name'
p26950
Nsa(dp26951
S'description'
p26952
S'If normal is supplied then faces are only added if face_normal.normal_hat >= 1 - normal_tol, where normal_hat = normal/|normal|\n'
p26953
sS'cpp_type'
p26954
S'double'
p26955
sS'default'
p26956
S'0.1'
p26957
sS'name'
p26958
S'normal_tol'
p26959
sS'required'
p26960
I00
sS'group_name'
p26961
Nsa(dp26962
S'description'
p26963
g3
sS'cpp_type'
p26964
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26965
sS'default'
p26966
S'SideSetsAroundSubdomain'
p26967
sS'name'
p26968
S'type'
p26969
sS'required'
p26970
I00
sS'group_name'
p26971
Nsa(dp26972
S'description'
p26973
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p26974
sS'cpp_type'
p26975
S'double'
p26976
sS'default'
p26977
S'0.1'
p26978
sS'name'
p26979
S'variance'
p26980
sS'required'
p26981
I00
sS'group_name'
p26982
NsasS'name'
p26983
S'/MeshModifiers/SideSetsAroundSubdomain'
p26984
sa(dp26985
S'description'
p26986
g3
sS'subblocks'
p26987
NsS'parameters'
p26988
(lp26989
(dp26990
S'description'
p26991
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26992
sS'cpp_type'
p26993
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26994
sS'default'
p26995
g3
sS'name'
p26996
S'control_tags'
p26997
sS'required'
p26998
I00
sS'group_name'
p26999
S'Advanced'
p27000
sa(dp27001
S'description'
p27002
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p27003
sS'cpp_type'
p27004
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27005
sS'default'
p27006
g3
sS'name'
p27007
S'depends_on'
p27008
sS'required'
p27009
I00
sS'group_name'
p27010
Nsa(dp27011
S'description'
p27012
S'Set the enabled status of the MooseObject.\n'
p27013
sS'cpp_type'
p27014
S'bool'
p27015
sS'default'
p27016
S'1'
p27017
sS'name'
p27018
S'enable'
p27019
sS'required'
p27020
I00
sS'group_name'
p27021
S'Advanced'
p27022
sa(dp27023
S'description'
p27024
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p27025
sS'cpp_type'
p27026
S'bool'
p27027
sS'default'
p27028
S'0'
p27029
sS'name'
p27030
S'force_prepare'
p27031
sS'required'
p27032
I00
sS'group_name'
p27033
Nsa(dp27034
S'description'
p27035
S'The master set of blocks for which to draw a sideset between\n'
p27036
sS'cpp_type'
p27037
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p27038
sS'default'
p27039
g3
sS'name'
p27040
S'master_block'
p27041
sS'required'
p27042
I01
sS'group_name'
p27043
Nsa(dp27044
S'description'
p27045
S'The name of the boundary to create\n'
p27046
sS'cpp_type'
p27047
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p27048
sS'default'
p27049
g3
sS'name'
p27050
S'new_boundary'
p27051
sS'required'
p27052
I01
sS'group_name'
p27053
Nsa(dp27054
S'description'
p27055
S'The paired set of blocks for which to draw a sideset between\n'
p27056
sS'cpp_type'
p27057
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p27058
sS'default'
p27059
g3
sS'name'
p27060
S'paired_block'
p27061
sS'required'
p27062
I01
sS'group_name'
p27063
Nsa(dp27064
S'description'
p27065
g3
sS'cpp_type'
p27066
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27067
sS'default'
p27068
S'SideSetsBetweenSubdomains'
p27069
sS'name'
p27070
S'type'
p27071
sS'required'
p27072
I00
sS'group_name'
p27073
NsasS'name'
p27074
S'/MeshModifiers/SideSetsBetweenSubdomains'
p27075
sa(dp27076
S'description'
p27077
g3
sS'subblocks'
p27078
NsS'parameters'
p27079
(lp27080
(dp27081
S'description'
p27082
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27083
sS'cpp_type'
p27084
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27085
sS'default'
p27086
g3
sS'name'
p27087
S'control_tags'
p27088
sS'required'
p27089
I00
sS'group_name'
p27090
S'Advanced'
p27091
sa(dp27092
S'description'
p27093
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p27094
sS'cpp_type'
p27095
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27096
sS'default'
p27097
g3
sS'name'
p27098
S'depends_on'
p27099
sS'required'
p27100
I00
sS'group_name'
p27101
Nsa(dp27102
S'description'
p27103
S'Set the enabled status of the MooseObject.\n'
p27104
sS'cpp_type'
p27105
S'bool'
p27106
sS'default'
p27107
S'1'
p27108
sS'name'
p27109
S'enable'
p27110
sS'required'
p27111
I00
sS'group_name'
p27112
S'Advanced'
p27113
sa(dp27114
S'description'
p27115
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p27116
sS'cpp_type'
p27117
S'bool'
p27118
sS'default'
p27119
S'0'
p27120
sS'name'
p27121
S'fixed_normal'
p27122
sS'required'
p27123
I00
sS'group_name'
p27124
Nsa(dp27125
S'description'
p27126
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p27127
sS'cpp_type'
p27128
S'bool'
p27129
sS'default'
p27130
S'0'
p27131
sS'name'
p27132
S'force_prepare'
p27133
sS'required'
p27134
I00
sS'group_name'
p27135
Nsa(dp27136
S'description'
p27137
S'The name of the boundary to create\n'
p27138
sS'cpp_type'
p27139
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p27140
sS'default'
p27141
g3
sS'name'
p27142
S'new_boundary'
p27143
sS'required'
p27144
I01
sS'group_name'
p27145
Nsa(dp27146
S'description'
p27147
S'A list of normals for which to start painting sidesets\n'
p27148
sS'cpp_type'
p27149
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p27150
sS'default'
p27151
g3
sS'name'
p27152
S'normals'
p27153
sS'required'
p27154
I01
sS'group_name'
p27155
Nsa(dp27156
S'description'
p27157
g3
sS'cpp_type'
p27158
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27159
sS'default'
p27160
S'SideSetsFromNormals'
p27161
sS'name'
p27162
S'type'
p27163
sS'required'
p27164
I00
sS'group_name'
p27165
Nsa(dp27166
S'description'
p27167
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p27168
sS'cpp_type'
p27169
S'double'
p27170
sS'default'
p27171
S'0.1'
p27172
sS'name'
p27173
S'variance'
p27174
sS'required'
p27175
I00
sS'group_name'
p27176
NsasS'name'
p27177
S'/MeshModifiers/SideSetsFromNormals'
p27178
sa(dp27179
S'description'
p27180
g3
sS'subblocks'
p27181
NsS'parameters'
p27182
(lp27183
(dp27184
S'description'
p27185
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27186
sS'cpp_type'
p27187
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27188
sS'default'
p27189
g3
sS'name'
p27190
S'control_tags'
p27191
sS'required'
p27192
I00
sS'group_name'
p27193
S'Advanced'
p27194
sa(dp27195
S'description'
p27196
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p27197
sS'cpp_type'
p27198
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27199
sS'default'
p27200
g3
sS'name'
p27201
S'depends_on'
p27202
sS'required'
p27203
I00
sS'group_name'
p27204
Nsa(dp27205
S'description'
p27206
S'Set the enabled status of the MooseObject.\n'
p27207
sS'cpp_type'
p27208
S'bool'
p27209
sS'default'
p27210
S'1'
p27211
sS'name'
p27212
S'enable'
p27213
sS'required'
p27214
I00
sS'group_name'
p27215
S'Advanced'
p27216
sa(dp27217
S'description'
p27218
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p27219
sS'cpp_type'
p27220
S'bool'
p27221
sS'default'
p27222
S'0'
p27223
sS'name'
p27224
S'fixed_normal'
p27225
sS'required'
p27226
I00
sS'group_name'
p27227
Nsa(dp27228
S'description'
p27229
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p27230
sS'cpp_type'
p27231
S'bool'
p27232
sS'default'
p27233
S'0'
p27234
sS'name'
p27235
S'force_prepare'
p27236
sS'required'
p27237
I00
sS'group_name'
p27238
Nsa(dp27239
S'description'
p27240
S'The name of the boundary to create\n'
p27241
sS'cpp_type'
p27242
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p27243
sS'default'
p27244
g3
sS'name'
p27245
S'new_boundary'
p27246
sS'required'
p27247
I01
sS'group_name'
p27248
Nsa(dp27249
S'description'
p27250
S'A list of points from which to start painting sidesets\n'
p27251
sS'cpp_type'
p27252
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p27253
sS'default'
p27254
g3
sS'name'
p27255
S'points'
p27256
sS'required'
p27257
I01
sS'group_name'
p27258
Nsa(dp27259
S'description'
p27260
g3
sS'cpp_type'
p27261
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27262
sS'default'
p27263
S'SideSetsFromPoints'
p27264
sS'name'
p27265
S'type'
p27266
sS'required'
p27267
I00
sS'group_name'
p27268
Nsa(dp27269
S'description'
p27270
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p27271
sS'cpp_type'
p27272
S'double'
p27273
sS'default'
p27274
S'0.1'
p27275
sS'name'
p27276
S'variance'
p27277
sS'required'
p27278
I00
sS'group_name'
p27279
NsasS'name'
p27280
S'/MeshModifiers/SideSetsFromPoints'
p27281
sa(dp27282
S'description'
p27283
g3
sS'subblocks'
p27284
NsS'parameters'
p27285
(lp27286
(dp27287
S'description'
p27288
S'Subdomain id to set for inside/outside the bounding box\n'
p27289
sS'cpp_type'
p27290
S'unsigned short'
p27291
sS'default'
p27292
g3
sS'name'
p27293
S'block_id'
p27294
sS'required'
p27295
I01
sS'group_name'
p27296
Nsa(dp27297
S'description'
p27298
S'Subdomain name to set for inside/outside the bounding box (optional)\n'
p27299
sS'cpp_type'
p27300
S'SubdomainName'
p27301
sS'default'
p27302
g3
sS'name'
p27303
S'block_name'
p27304
sS'required'
p27305
I00
sS'group_name'
p27306
Nsa(dp27307
S'description'
p27308
S'The bottom left point (in x,y,z with spaces in-between).\n'
p27309
sS'cpp_type'
p27310
S'libMesh::VectorValue<double>'
p27311
sS'default'
p27312
g3
sS'name'
p27313
S'bottom_left'
p27314
sS'required'
p27315
I01
sS'group_name'
p27316
Nsa(dp27317
S'description'
p27318
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27319
sS'cpp_type'
p27320
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27321
sS'default'
p27322
g3
sS'name'
p27323
S'control_tags'
p27324
sS'required'
p27325
I00
sS'group_name'
p27326
S'Advanced'
p27327
sa(dp27328
S'description'
p27329
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p27330
sS'cpp_type'
p27331
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27332
sS'default'
p27333
g3
sS'name'
p27334
S'depends_on'
p27335
sS'required'
p27336
I00
sS'group_name'
p27337
Nsa(dp27338
S'description'
p27339
S'Set the enabled status of the MooseObject.\n'
p27340
sS'cpp_type'
p27341
S'bool'
p27342
sS'default'
p27343
S'1'
p27344
sS'name'
p27345
S'enable'
p27346
sS'required'
p27347
I00
sS'group_name'
p27348
S'Advanced'
p27349
sa(dp27350
S'description'
p27351
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p27352
sS'cpp_type'
p27353
S'bool'
p27354
sS'default'
p27355
S'0'
p27356
sS'name'
p27357
S'force_prepare'
p27358
sS'required'
p27359
I00
sS'group_name'
p27360
Nsa(dp27361
S'name'
p27362
S'location'
p27363
sS'cpp_type'
p27364
S'MooseEnum'
p27365
sS'default'
p27366
S'INSIDE'
p27367
sS'description'
p27368
S'Control of where the subdomain id is to be set\n'
p27369
sS'required'
p27370
I00
sS'options'
p27371
S'INSIDE OUTSIDE'
p27372
sS'group_name'
p27373
Nsa(dp27374
S'description'
p27375
S'The bottom left point (in x,y,z with spaces in-between).\n'
p27376
sS'cpp_type'
p27377
S'libMesh::VectorValue<double>'
p27378
sS'default'
p27379
g3
sS'name'
p27380
S'top_right'
p27381
sS'required'
p27382
I01
sS'group_name'
p27383
Nsa(dp27384
S'description'
p27385
g3
sS'cpp_type'
p27386
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27387
sS'default'
p27388
S'SubdomainBoundingBox'
p27389
sS'name'
p27390
S'type'
p27391
sS'required'
p27392
I00
sS'group_name'
p27393
NsasS'name'
p27394
S'/MeshModifiers/SubdomainBoundingBox'
p27395
sa(dp27396
S'description'
p27397
g3
sS'subblocks'
p27398
NsS'parameters'
p27399
(lp27400
(dp27401
S'description'
p27402
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27403
sS'cpp_type'
p27404
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27405
sS'default'
p27406
g3
sS'name'
p27407
S'control_tags'
p27408
sS'required'
p27409
I00
sS'group_name'
p27410
S'Advanced'
p27411
sa(dp27412
S'description'
p27413
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p27414
sS'cpp_type'
p27415
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27416
sS'default'
p27417
g3
sS'name'
p27418
S'depends_on'
p27419
sS'required'
p27420
I00
sS'group_name'
p27421
Nsa(dp27422
S'description'
p27423
S'Set the enabled status of the MooseObject.\n'
p27424
sS'cpp_type'
p27425
S'bool'
p27426
sS'default'
p27427
S'1'
p27428
sS'name'
p27429
S'enable'
p27430
sS'required'
p27431
I00
sS'group_name'
p27432
S'Advanced'
p27433
sa(dp27434
S'description'
p27435
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p27436
sS'cpp_type'
p27437
S'bool'
p27438
sS'default'
p27439
S'0'
p27440
sS'name'
p27441
S'force_prepare'
p27442
sS'required'
p27443
I00
sS'group_name'
p27444
Nsa(dp27445
S'name'
p27446
S'transform'
p27447
sS'cpp_type'
p27448
S'MooseEnum'
p27449
sS'default'
p27450
g3
sS'description'
p27451
S'The type of transformation to perform (TRANSLATE, ROTATE, SCALE)\n'
p27452
sS'required'
p27453
I01
sS'options'
p27454
S'TRANSLATE ROTATE SCALE'
p27455
sS'group_name'
p27456
Nsa(dp27457
S'description'
p27458
g3
sS'cpp_type'
p27459
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27460
sS'default'
p27461
S'Transform'
p27462
sS'name'
p27463
S'type'
p27464
sS'required'
p27465
I00
sS'group_name'
p27466
Nsa(dp27467
S'description'
p27468
S'The value to use for the transformation. When using TRANSLATE or SCALE, the xyz coordinates are applied in each direction respectively. When using ROTATE, the values are interpreted as the Euler angles phi, theta and psi given in degrees.\n'
p27469
sS'cpp_type'
p27470
S'libMesh::VectorValue<double>'
p27471
sS'default'
p27472
g3
sS'name'
p27473
S'vector_value'
p27474
sS'required'
p27475
I01
sS'group_name'
p27476
NsasS'name'
p27477
S'/MeshModifiers/Transform'
p27478
sasS'parameters'
p27479
NsS'name'
p27480
S'/MeshModifiers'
p27481
sa(dp27482
S'description'
p27483
g3
sS'subblocks'
p27484
(lp27485
(dp27486
S'description'
p27487
g3
sS'subblocks'
p27488
NsS'parameters'
p27489
(lp27490
(dp27491
S'description'
p27492
S'A string representing the Moose Object that will be built by this Action\n'
p27493
sS'cpp_type'
p27494
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27495
sS'default'
p27496
g3
sS'name'
p27497
S'type'
p27498
sS'required'
p27499
I01
sS'group_name'
p27500
NsasS'name'
p27501
S'/MultiApps/*'
p27502
sa(dp27503
S'description'
p27504
g3
sS'subblocks'
p27505
NsS'parameters'
p27506
(lp27507
(dp27508
S'name'
p27509
S'app_type'
p27510
sS'cpp_type'
p27511
S'MooseEnum'
p27512
sS'default'
p27513
g3
sS'description'
p27514
S'The type of application to build (applications not registered can be loaded with dynamic libraries. Master application type will be used if not provided.\n'
p27515
sS'required'
p27516
I00
sS'options'
p27517
S'ExampleApp'
p27518
sS'group_name'
p27519
Nsa(dp27520
S'description'
p27521
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p27522
sS'cpp_type'
p27523
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p27524
sS'default'
p27525
g3
sS'name'
p27526
S'boundary'
p27527
sS'required'
p27528
I00
sS'group_name'
p27529
Nsa(dp27530
S'description'
p27531
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p27532
sS'cpp_type'
p27533
S'double'
p27534
sS'default'
p27535
S'0.01'
p27536
sS'name'
p27537
S'bounding_box_inflation'
p27538
sS'required'
p27539
I00
sS'group_name'
p27540
Nsa(dp27541
S'description'
p27542
S"If true this will allow failed solves to attempt to 'catch up' using smaller timesteps.\n"
p27543
sS'cpp_type'
p27544
S'bool'
p27545
sS'default'
p27546
S'0'
p27547
sS'name'
p27548
S'catch_up'
p27549
sS'required'
p27550
I00
sS'group_name'
p27551
Nsa(dp27552
S'description'
p27553
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27554
sS'cpp_type'
p27555
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27556
sS'default'
p27557
g3
sS'name'
p27558
S'control_tags'
p27559
sS'required'
p27560
I00
sS'group_name'
p27561
S'Advanced'
p27562
sa(dp27563
S'description'
p27564
S'If true then while sub_cycling a steady state check will be done.  In this mode output will only be done once the MultiApp reaches the target time or steady state is reached\n'
p27565
sS'cpp_type'
p27566
S'bool'
p27567
sS'default'
p27568
S'0'
p27569
sS'name'
p27570
S'detect_steady_state'
p27571
sS'required'
p27572
I00
sS'group_name'
p27573
Nsa(dp27574
S'description'
p27575
S'Set the enabled status of the MooseObject.\n'
p27576
sS'cpp_type'
p27577
S'bool'
p27578
sS'default'
p27579
S'1'
p27580
sS'name'
p27581
S'enable'
p27582
sS'required'
p27583
I00
sS'group_name'
p27584
S'Advanced'
p27585
sa(dp27586
S'name'
p27587
S'execute_on'
p27588
sS'cpp_type'
p27589
S'MultiMooseEnum'
p27590
sS'default'
p27591
S'TIMESTEP_BEGIN'
p27592
sS'description'
p27593
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27594
sS'required'
p27595
I00
sS'options'
p27596
S'none initial linear nonlinear timestep_end timestep_begin custom'
p27597
sS'group_name'
p27598
Nsa(dp27599
S'description'
p27600
S'Determines whether this object is calculated using an implicit or explicit form\n'
p27601
sS'cpp_type'
p27602
S'bool'
p27603
sS'default'
p27604
S'1'
p27605
sS'name'
p27606
S'implicit'
p27607
sS'required'
p27608
I00
sS'group_name'
p27609
S'Advanced'
p27610
sa(dp27611
S'description'
p27612
S"The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using 'positions_from_file' it is also admissable to provide one input_file per file.\n"
p27613
sS'cpp_type'
p27614
S'std::__1::vector<FileName, std::__1::allocator<FileName> >'
p27615
sS'default'
p27616
g3
sS'name'
p27617
S'input_files'
p27618
sS'required'
p27619
I01
sS'group_name'
p27620
Nsa(dp27621
S'description'
p27622
S'Only valid when sub_cycling.  This allows transferred values to be interpolated over the time frame the MultiApp is executing over when sub_cycling\n'
p27623
sS'cpp_type'
p27624
S'bool'
p27625
sS'default'
p27626
S'0'
p27627
sS'name'
p27628
S'interpolate_transfers'
p27629
sS'required'
p27630
I00
sS'group_name'
p27631
Nsa(dp27632
S'description'
p27633
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p27634
sS'cpp_type'
p27635
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27636
sS'default'
p27637
g3
sS'name'
p27638
S'library_path'
p27639
sS'required'
p27640
I00
sS'group_name'
p27641
Nsa(dp27642
S'description'
p27643
S'Maximum number of steps to allow an app to take when trying to catch back up after a failed solve.\n'
p27644
sS'cpp_type'
p27645
S'double'
p27646
sS'default'
p27647
S'2'
p27648
sS'name'
p27649
S'max_catch_up_steps'
p27650
sS'required'
p27651
I00
sS'group_name'
p27652
Nsa(dp27653
S'description'
p27654
S'Maximum number of solve failures tolerated while sub_cycling.\n'
p27655
sS'cpp_type'
p27656
S'unsigned int'
p27657
sS'default'
p27658
S'0'
p27659
sS'name'
p27660
S'max_failures'
p27661
sS'required'
p27662
I00
sS'group_name'
p27663
Nsa(dp27664
S'description'
p27665
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p27666
sS'cpp_type'
p27667
S'unsigned int'
p27668
sS'default'
p27669
S'4294967295'
p27670
sS'name'
p27671
S'max_procs_per_app'
p27672
sS'required'
p27673
I00
sS'group_name'
p27674
Nsa(dp27675
S'description'
p27676
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p27677
sS'cpp_type'
p27678
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p27679
sS'default'
p27680
g3
sS'name'
p27681
S'move_apps'
p27682
sS'required'
p27683
I00
sS'group_name'
p27684
Nsa(dp27685
S'description'
p27686
S'The positions corresponding to each move_app.\n'
p27687
sS'cpp_type'
p27688
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p27689
sS'default'
p27690
g3
sS'name'
p27691
S'move_positions'
p27692
sS'required'
p27693
I00
sS'group_name'
p27694
Nsa(dp27695
S'description'
p27696
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p27697
sS'cpp_type'
p27698
S'double'
p27699
sS'default'
p27700
S'1.79769e+308'
p27701
sS'name'
p27702
S'move_time'
p27703
sS'required'
p27704
I00
sS'group_name'
p27705
Nsa(dp27706
S'description'
p27707
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p27708
sS'cpp_type'
p27709
S'bool'
p27710
sS'default'
p27711
S'0'
p27712
sS'name'
p27713
S'output_in_position'
p27714
sS'required'
p27715
I00
sS'group_name'
p27716
Nsa(dp27717
S'description'
p27718
S'If true then every sub-cycle will be output.\n'
p27719
sS'cpp_type'
p27720
S'bool'
p27721
sS'default'
p27722
S'0'
p27723
sS'name'
p27724
S'output_sub_cycles'
p27725
sS'required'
p27726
I00
sS'group_name'
p27727
Nsa(dp27728
S'description'
p27729
S'Toggle the display of sub-cycles on the screen.\n'
p27730
sS'cpp_type'
p27731
S'bool'
p27732
sS'default'
p27733
S'1'
p27734
sS'name'
p27735
S'print_sub_cycles'
p27736
sS'required'
p27737
I00
sS'group_name'
p27738
Nsa(dp27739
S'description'
p27740
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p27741
sS'cpp_type'
p27742
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p27743
sS'default'
p27744
g3
sS'name'
p27745
S'reset_apps'
p27746
sS'required'
p27747
I00
sS'group_name'
p27748
Nsa(dp27749
S'description'
p27750
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p27751
sS'cpp_type'
p27752
S'double'
p27753
sS'default'
p27754
S'1.79769e+308'
p27755
sS'name'
p27756
S'reset_time'
p27757
sS'required'
p27758
I00
sS'group_name'
p27759
Nsa(dp27760
S'description'
p27761
S'The relative difference between the new solution and the old solution that will be considered to be at steady state\n'
p27762
sS'cpp_type'
p27763
S'double'
p27764
sS'default'
p27765
S'1e-08'
p27766
sS'name'
p27767
S'steady_state_tol'
p27768
sS'required'
p27769
I00
sS'group_name'
p27770
Nsa(dp27771
S'description'
p27772
S"Set to true to allow this MultiApp to take smaller timesteps than the rest of the simulation.  More than one timestep will be performed for each 'master' timestep\n"
p27773
sS'cpp_type'
p27774
S'bool'
p27775
sS'default'
p27776
S'0'
p27777
sS'name'
p27778
S'sub_cycling'
p27779
sS'required'
p27780
I00
sS'group_name'
p27781
Nsa(dp27782
S'description'
p27783
S"If true this MultiApp won't participate in dt decisions and will always be fast-forwarded to the current time.\n"
p27784
sS'cpp_type'
p27785
S'bool'
p27786
sS'default'
p27787
S'0'
p27788
sS'name'
p27789
S'tolerate_failure'
p27790
sS'required'
p27791
I00
sS'group_name'
p27792
Nsa(dp27793
S'description'
p27794
g3
sS'cpp_type'
p27795
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27796
sS'default'
p27797
S'AutoPositionsMultiApp'
p27798
sS'name'
p27799
S'type'
p27800
sS'required'
p27801
I00
sS'group_name'
p27802
Nsa(dp27803
S'description'
p27804
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27805
sS'cpp_type'
p27806
S'bool'
p27807
sS'default'
p27808
S'0'
p27809
sS'name'
p27810
S'use_displaced_mesh'
p27811
sS'required'
p27812
I00
sS'group_name'
p27813
S'Advanced'
p27814
sasS'name'
p27815
S'/MultiApps/AutoPositionsMultiApp'
p27816
sa(dp27817
S'description'
p27818
g3
sS'subblocks'
p27819
NsS'parameters'
p27820
(lp27821
(dp27822
S'name'
p27823
S'app_type'
p27824
sS'cpp_type'
p27825
S'MooseEnum'
p27826
sS'default'
p27827
g3
sS'description'
p27828
S'The type of application to build (applications not registered can be loaded with dynamic libraries. Master application type will be used if not provided.\n'
p27829
sS'required'
p27830
I00
sS'options'
p27831
S'ExampleApp'
p27832
sS'group_name'
p27833
Nsa(dp27834
S'description'
p27835
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p27836
sS'cpp_type'
p27837
S'double'
p27838
sS'default'
p27839
S'0.01'
p27840
sS'name'
p27841
S'bounding_box_inflation'
p27842
sS'required'
p27843
I00
sS'group_name'
p27844
Nsa(dp27845
S'description'
p27846
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27847
sS'cpp_type'
p27848
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27849
sS'default'
p27850
g3
sS'name'
p27851
S'control_tags'
p27852
sS'required'
p27853
I00
sS'group_name'
p27854
S'Advanced'
p27855
sa(dp27856
S'description'
p27857
S'Set the enabled status of the MooseObject.\n'
p27858
sS'cpp_type'
p27859
S'bool'
p27860
sS'default'
p27861
S'1'
p27862
sS'name'
p27863
S'enable'
p27864
sS'required'
p27865
I00
sS'group_name'
p27866
S'Advanced'
p27867
sa(dp27868
S'name'
p27869
S'execute_on'
p27870
sS'cpp_type'
p27871
S'MultiMooseEnum'
p27872
sS'default'
p27873
S'TIMESTEP_BEGIN'
p27874
sS'description'
p27875
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27876
sS'required'
p27877
I00
sS'options'
p27878
S'none initial linear nonlinear timestep_end timestep_begin custom'
p27879
sS'group_name'
p27880
Nsa(dp27881
S'description'
p27882
S"The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using 'positions_from_file' it is also admissable to provide one input_file per file.\n"
p27883
sS'cpp_type'
p27884
S'std::__1::vector<FileName, std::__1::allocator<FileName> >'
p27885
sS'default'
p27886
g3
sS'name'
p27887
S'input_files'
p27888
sS'required'
p27889
I01
sS'group_name'
p27890
Nsa(dp27891
S'description'
p27892
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p27893
sS'cpp_type'
p27894
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27895
sS'default'
p27896
g3
sS'name'
p27897
S'library_path'
p27898
sS'required'
p27899
I00
sS'group_name'
p27900
Nsa(dp27901
S'description'
p27902
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p27903
sS'cpp_type'
p27904
S'unsigned int'
p27905
sS'default'
p27906
S'4294967295'
p27907
sS'name'
p27908
S'max_procs_per_app'
p27909
sS'required'
p27910
I00
sS'group_name'
p27911
Nsa(dp27912
S'description'
p27913
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p27914
sS'cpp_type'
p27915
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p27916
sS'default'
p27917
g3
sS'name'
p27918
S'move_apps'
p27919
sS'required'
p27920
I00
sS'group_name'
p27921
Nsa(dp27922
S'description'
p27923
S'The positions corresponding to each move_app.\n'
p27924
sS'cpp_type'
p27925
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p27926
sS'default'
p27927
g3
sS'name'
p27928
S'move_positions'
p27929
sS'required'
p27930
I00
sS'group_name'
p27931
Nsa(dp27932
S'description'
p27933
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p27934
sS'cpp_type'
p27935
S'double'
p27936
sS'default'
p27937
S'1.79769e+308'
p27938
sS'name'
p27939
S'move_time'
p27940
sS'required'
p27941
I00
sS'group_name'
p27942
Nsa(dp27943
S'description'
p27944
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p27945
sS'cpp_type'
p27946
S'bool'
p27947
sS'default'
p27948
S'0'
p27949
sS'name'
p27950
S'output_in_position'
p27951
sS'required'
p27952
I00
sS'group_name'
p27953
Nsa(dp27954
S'description'
p27955
S"The positions of the App locations.  Each set of 3 values will represent a Point.  This and 'positions_file' cannot be both supplied. If this and 'positions_file' are not supplied, a single position (0,0,0) will be used\n"
p27956
sS'cpp_type'
p27957
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p27958
sS'default'
p27959
g3
sS'name'
p27960
S'positions'
p27961
sS'required'
p27962
I00
sS'group_name'
p27963
Nsa(dp27964
S'description'
p27965
S"A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  This and 'positions' cannot be both supplied\n"
p27966
sS'cpp_type'
p27967
S'std::__1::vector<FileName, std::__1::allocator<FileName> >'
p27968
sS'default'
p27969
g3
sS'name'
p27970
S'positions_file'
p27971
sS'required'
p27972
I00
sS'group_name'
p27973
Nsa(dp27974
S'description'
p27975
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p27976
sS'cpp_type'
p27977
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p27978
sS'default'
p27979
g3
sS'name'
p27980
S'reset_apps'
p27981
sS'required'
p27982
I00
sS'group_name'
p27983
Nsa(dp27984
S'description'
p27985
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p27986
sS'cpp_type'
p27987
S'double'
p27988
sS'default'
p27989
S'1.79769e+308'
p27990
sS'name'
p27991
S'reset_time'
p27992
sS'required'
p27993
I00
sS'group_name'
p27994
Nsa(dp27995
S'description'
p27996
g3
sS'cpp_type'
p27997
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27998
sS'default'
p27999
S'FullSolveMultiApp'
p28000
sS'name'
p28001
S'type'
p28002
sS'required'
p28003
I00
sS'group_name'
p28004
Nsa(dp28005
S'description'
p28006
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28007
sS'cpp_type'
p28008
S'bool'
p28009
sS'default'
p28010
S'0'
p28011
sS'name'
p28012
S'use_displaced_mesh'
p28013
sS'required'
p28014
I00
sS'group_name'
p28015
S'Advanced'
p28016
sasS'name'
p28017
S'/MultiApps/FullSolveMultiApp'
p28018
sa(dp28019
S'description'
p28020
g3
sS'subblocks'
p28021
NsS'parameters'
p28022
(lp28023
(dp28024
S'name'
p28025
S'app_type'
p28026
sS'cpp_type'
p28027
S'MooseEnum'
p28028
sS'default'
p28029
g3
sS'description'
p28030
S'The type of application to build (applications not registered can be loaded with dynamic libraries. Master application type will be used if not provided.\n'
p28031
sS'required'
p28032
I00
sS'options'
p28033
S'ExampleApp'
p28034
sS'group_name'
p28035
Nsa(dp28036
S'description'
p28037
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p28038
sS'cpp_type'
p28039
S'double'
p28040
sS'default'
p28041
S'0.01'
p28042
sS'name'
p28043
S'bounding_box_inflation'
p28044
sS'required'
p28045
I00
sS'group_name'
p28046
Nsa(dp28047
S'description'
p28048
S"If true this will allow failed solves to attempt to 'catch up' using smaller timesteps.\n"
p28049
sS'cpp_type'
p28050
S'bool'
p28051
sS'default'
p28052
S'0'
p28053
sS'name'
p28054
S'catch_up'
p28055
sS'required'
p28056
I00
sS'group_name'
p28057
Nsa(dp28058
S'description'
p28059
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28060
sS'cpp_type'
p28061
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p28062
sS'default'
p28063
g3
sS'name'
p28064
S'control_tags'
p28065
sS'required'
p28066
I00
sS'group_name'
p28067
S'Advanced'
p28068
sa(dp28069
S'description'
p28070
S'If true then while sub_cycling a steady state check will be done.  In this mode output will only be done once the MultiApp reaches the target time or steady state is reached\n'
p28071
sS'cpp_type'
p28072
S'bool'
p28073
sS'default'
p28074
S'0'
p28075
sS'name'
p28076
S'detect_steady_state'
p28077
sS'required'
p28078
I00
sS'group_name'
p28079
Nsa(dp28080
S'description'
p28081
S'Set the enabled status of the MooseObject.\n'
p28082
sS'cpp_type'
p28083
S'bool'
p28084
sS'default'
p28085
S'1'
p28086
sS'name'
p28087
S'enable'
p28088
sS'required'
p28089
I00
sS'group_name'
p28090
S'Advanced'
p28091
sa(dp28092
S'name'
p28093
S'execute_on'
p28094
sS'cpp_type'
p28095
S'MultiMooseEnum'
p28096
sS'default'
p28097
S'TIMESTEP_BEGIN'
p28098
sS'description'
p28099
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p28100
sS'required'
p28101
I00
sS'options'
p28102
S'none initial linear nonlinear timestep_end timestep_begin custom'
p28103
sS'group_name'
p28104
Nsa(dp28105
S'description'
p28106
S'Determines whether this object is calculated using an implicit or explicit form\n'
p28107
sS'cpp_type'
p28108
S'bool'
p28109
sS'default'
p28110
S'1'
p28111
sS'name'
p28112
S'implicit'
p28113
sS'required'
p28114
I00
sS'group_name'
p28115
S'Advanced'
p28116
sa(dp28117
S'description'
p28118
S"The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using 'positions_from_file' it is also admissable to provide one input_file per file.\n"
p28119
sS'cpp_type'
p28120
S'std::__1::vector<FileName, std::__1::allocator<FileName> >'
p28121
sS'default'
p28122
g3
sS'name'
p28123
S'input_files'
p28124
sS'required'
p28125
I01
sS'group_name'
p28126
Nsa(dp28127
S'description'
p28128
S'Only valid when sub_cycling.  This allows transferred values to be interpolated over the time frame the MultiApp is executing over when sub_cycling\n'
p28129
sS'cpp_type'
p28130
S'bool'
p28131
sS'default'
p28132
S'0'
p28133
sS'name'
p28134
S'interpolate_transfers'
p28135
sS'required'
p28136
I00
sS'group_name'
p28137
Nsa(dp28138
S'description'
p28139
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p28140
sS'cpp_type'
p28141
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28142
sS'default'
p28143
g3
sS'name'
p28144
S'library_path'
p28145
sS'required'
p28146
I00
sS'group_name'
p28147
Nsa(dp28148
S'description'
p28149
S'Maximum number of steps to allow an app to take when trying to catch back up after a failed solve.\n'
p28150
sS'cpp_type'
p28151
S'double'
p28152
sS'default'
p28153
S'2'
p28154
sS'name'
p28155
S'max_catch_up_steps'
p28156
sS'required'
p28157
I00
sS'group_name'
p28158
Nsa(dp28159
S'description'
p28160
S'Maximum number of solve failures tolerated while sub_cycling.\n'
p28161
sS'cpp_type'
p28162
S'unsigned int'
p28163
sS'default'
p28164
S'0'
p28165
sS'name'
p28166
S'max_failures'
p28167
sS'required'
p28168
I00
sS'group_name'
p28169
Nsa(dp28170
S'description'
p28171
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p28172
sS'cpp_type'
p28173
S'unsigned int'
p28174
sS'default'
p28175
S'4294967295'
p28176
sS'name'
p28177
S'max_procs_per_app'
p28178
sS'required'
p28179
I00
sS'group_name'
p28180
Nsa(dp28181
S'description'
p28182
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p28183
sS'cpp_type'
p28184
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p28185
sS'default'
p28186
g3
sS'name'
p28187
S'move_apps'
p28188
sS'required'
p28189
I00
sS'group_name'
p28190
Nsa(dp28191
S'description'
p28192
S'The positions corresponding to each move_app.\n'
p28193
sS'cpp_type'
p28194
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p28195
sS'default'
p28196
g3
sS'name'
p28197
S'move_positions'
p28198
sS'required'
p28199
I00
sS'group_name'
p28200
Nsa(dp28201
S'description'
p28202
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p28203
sS'cpp_type'
p28204
S'double'
p28205
sS'default'
p28206
S'1.79769e+308'
p28207
sS'name'
p28208
S'move_time'
p28209
sS'required'
p28210
I00
sS'group_name'
p28211
Nsa(dp28212
S'description'
p28213
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p28214
sS'cpp_type'
p28215
S'bool'
p28216
sS'default'
p28217
S'0'
p28218
sS'name'
p28219
S'output_in_position'
p28220
sS'required'
p28221
I00
sS'group_name'
p28222
Nsa(dp28223
S'description'
p28224
S'If true then every sub-cycle will be output.\n'
p28225
sS'cpp_type'
p28226
S'bool'
p28227
sS'default'
p28228
S'0'
p28229
sS'name'
p28230
S'output_sub_cycles'
p28231
sS'required'
p28232
I00
sS'group_name'
p28233
Nsa(dp28234
S'description'
p28235
S"The positions of the App locations.  Each set of 3 values will represent a Point.  This and 'positions_file' cannot be both supplied. If this and 'positions_file' are not supplied, a single position (0,0,0) will be used\n"
p28236
sS'cpp_type'
p28237
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p28238
sS'default'
p28239
g3
sS'name'
p28240
S'positions'
p28241
sS'required'
p28242
I00
sS'group_name'
p28243
Nsa(dp28244
S'description'
p28245
S"A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  This and 'positions' cannot be both supplied\n"
p28246
sS'cpp_type'
p28247
S'std::__1::vector<FileName, std::__1::allocator<FileName> >'
p28248
sS'default'
p28249
g3
sS'name'
p28250
S'positions_file'
p28251
sS'required'
p28252
I00
sS'group_name'
p28253
Nsa(dp28254
S'description'
p28255
S'Toggle the display of sub-cycles on the screen.\n'
p28256
sS'cpp_type'
p28257
S'bool'
p28258
sS'default'
p28259
S'1'
p28260
sS'name'
p28261
S'print_sub_cycles'
p28262
sS'required'
p28263
I00
sS'group_name'
p28264
Nsa(dp28265
S'description'
p28266
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p28267
sS'cpp_type'
p28268
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p28269
sS'default'
p28270
g3
sS'name'
p28271
S'reset_apps'
p28272
sS'required'
p28273
I00
sS'group_name'
p28274
Nsa(dp28275
S'description'
p28276
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p28277
sS'cpp_type'
p28278
S'double'
p28279
sS'default'
p28280
S'1.79769e+308'
p28281
sS'name'
p28282
S'reset_time'
p28283
sS'required'
p28284
I00
sS'group_name'
p28285
Nsa(dp28286
S'description'
p28287
S'The relative difference between the new solution and the old solution that will be considered to be at steady state\n'
p28288
sS'cpp_type'
p28289
S'double'
p28290
sS'default'
p28291
S'1e-08'
p28292
sS'name'
p28293
S'steady_state_tol'
p28294
sS'required'
p28295
I00
sS'group_name'
p28296
Nsa(dp28297
S'description'
p28298
S"Set to true to allow this MultiApp to take smaller timesteps than the rest of the simulation.  More than one timestep will be performed for each 'master' timestep\n"
p28299
sS'cpp_type'
p28300
S'bool'
p28301
sS'default'
p28302
S'0'
p28303
sS'name'
p28304
S'sub_cycling'
p28305
sS'required'
p28306
I00
sS'group_name'
p28307
Nsa(dp28308
S'description'
p28309
S"If true this MultiApp won't participate in dt decisions and will always be fast-forwarded to the current time.\n"
p28310
sS'cpp_type'
p28311
S'bool'
p28312
sS'default'
p28313
S'0'
p28314
sS'name'
p28315
S'tolerate_failure'
p28316
sS'required'
p28317
I00
sS'group_name'
p28318
Nsa(dp28319
S'description'
p28320
g3
sS'cpp_type'
p28321
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28322
sS'default'
p28323
S'TransientMultiApp'
p28324
sS'name'
p28325
S'type'
p28326
sS'required'
p28327
I00
sS'group_name'
p28328
Nsa(dp28329
S'description'
p28330
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28331
sS'cpp_type'
p28332
S'bool'
p28333
sS'default'
p28334
S'0'
p28335
sS'name'
p28336
S'use_displaced_mesh'
p28337
sS'required'
p28338
I00
sS'group_name'
p28339
S'Advanced'
p28340
sasS'name'
p28341
S'/MultiApps/TransientMultiApp'
p28342
sasS'parameters'
p28343
NsS'name'
p28344
S'/MultiApps'
p28345
sa(dp28346
S'description'
p28347
g3
sS'subblocks'
p28348
(lp28349
(dp28350
S'description'
p28351
g3
sS'subblocks'
p28352
NsS'parameters'
p28353
(lp28354
(dp28355
S'description'
p28356
S'A string representing the Moose Object that will be built by this Action\n'
p28357
sS'cpp_type'
p28358
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28359
sS'default'
p28360
g3
sS'name'
p28361
S'type'
p28362
sS'required'
p28363
I01
sS'group_name'
p28364
NsasS'name'
p28365
S'/NodalKernels/*'
p28366
sa(dp28367
S'description'
p28368
g3
sS'subblocks'
p28369
NsS'parameters'
p28370
(lp28371
(dp28372
S'description'
p28373
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28374
sS'cpp_type'
p28375
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p28376
sS'default'
p28377
g3
sS'name'
p28378
S'block'
p28379
sS'required'
p28380
I00
sS'group_name'
p28381
Nsa(dp28382
S'description'
p28383
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28384
sS'cpp_type'
p28385
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p28386
sS'default'
p28387
g3
sS'name'
p28388
S'boundary'
p28389
sS'required'
p28390
I00
sS'group_name'
p28391
Nsa(dp28392
S'description'
p28393
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28394
sS'cpp_type'
p28395
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p28396
sS'default'
p28397
g3
sS'name'
p28398
S'control_tags'
p28399
sS'required'
p28400
I00
sS'group_name'
p28401
S'Advanced'
p28402
sa(dp28403
S'description'
p28404
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p28405
sS'cpp_type'
p28406
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p28407
sS'default'
p28408
g3
sS'name'
p28409
S'diag_save_in'
p28410
sS'required'
p28411
I00
sS'group_name'
p28412
Nsa(dp28413
S'description'
p28414
S'Set the enabled status of the MooseObject.\n'
p28415
sS'cpp_type'
p28416
S'bool'
p28417
sS'default'
p28418
S'1'
p28419
sS'name'
p28420
S'enable'
p28421
sS'required'
p28422
I00
sS'group_name'
p28423
S'Advanced'
p28424
sa(dp28425
S'description'
p28426
S'Determines whether this object is calculated using an implicit or explicit form\n'
p28427
sS'cpp_type'
p28428
S'bool'
p28429
sS'default'
p28430
S'1'
p28431
sS'name'
p28432
S'implicit'
p28433
sS'required'
p28434
I00
sS'group_name'
p28435
S'Advanced'
p28436
sa(dp28437
S'description'
p28438
S"The constant rate in 'du/dt = rate'\n"
p28439
sS'cpp_type'
p28440
S'double'
p28441
sS'default'
p28442
g3
sS'name'
p28443
S'rate'
p28444
sS'required'
p28445
I01
sS'group_name'
p28446
Nsa(dp28447
S'description'
p28448
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p28449
sS'cpp_type'
p28450
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p28451
sS'default'
p28452
g3
sS'name'
p28453
S'save_in'
p28454
sS'required'
p28455
I00
sS'group_name'
p28456
Nsa(dp28457
S'description'
p28458
S'The seed for the master random number generator\n'
p28459
sS'cpp_type'
p28460
S'unsigned int'
p28461
sS'default'
p28462
S'0'
p28463
sS'name'
p28464
S'seed'
p28465
sS'required'
p28466
I00
sS'group_name'
p28467
S'Advanced'
p28468
sa(dp28469
S'description'
p28470
g3
sS'cpp_type'
p28471
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28472
sS'default'
p28473
S'ConstantRate'
p28474
sS'name'
p28475
S'type'
p28476
sS'required'
p28477
I00
sS'group_name'
p28478
Nsa(dp28479
S'description'
p28480
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28481
sS'cpp_type'
p28482
S'bool'
p28483
sS'default'
p28484
S'0'
p28485
sS'name'
p28486
S'use_displaced_mesh'
p28487
sS'required'
p28488
I00
sS'group_name'
p28489
S'Advanced'
p28490
sa(dp28491
S'description'
p28492
S'The name of the variable that this boundary condition applies to\n'
p28493
sS'cpp_type'
p28494
S'NonlinearVariableName'
p28495
sS'default'
p28496
g3
sS'name'
p28497
S'variable'
p28498
sS'required'
p28499
I01
sS'group_name'
p28500
NsasS'name'
p28501
S'/NodalKernels/ConstantRate'
p28502
sa(dp28503
S'description'
p28504
g3
sS'subblocks'
p28505
NsS'parameters'
p28506
(lp28507
(dp28508
S'description'
p28509
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28510
sS'cpp_type'
p28511
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p28512
sS'default'
p28513
g3
sS'name'
p28514
S'block'
p28515
sS'required'
p28516
I00
sS'group_name'
p28517
Nsa(dp28518
S'description'
p28519
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28520
sS'cpp_type'
p28521
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p28522
sS'default'
p28523
g3
sS'name'
p28524
S'boundary'
p28525
sS'required'
p28526
I00
sS'group_name'
p28527
Nsa(dp28528
S'description'
p28529
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28530
sS'cpp_type'
p28531
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p28532
sS'default'
p28533
g3
sS'name'
p28534
S'control_tags'
p28535
sS'required'
p28536
I00
sS'group_name'
p28537
S'Advanced'
p28538
sa(dp28539
S'description'
p28540
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p28541
sS'cpp_type'
p28542
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p28543
sS'default'
p28544
g3
sS'name'
p28545
S'diag_save_in'
p28546
sS'required'
p28547
I00
sS'group_name'
p28548
Nsa(dp28549
S'description'
p28550
S'Set the enabled status of the MooseObject.\n'
p28551
sS'cpp_type'
p28552
S'bool'
p28553
sS'default'
p28554
S'1'
p28555
sS'name'
p28556
S'enable'
p28557
sS'required'
p28558
I00
sS'group_name'
p28559
S'Advanced'
p28560
sa(dp28561
S'description'
p28562
S'Determines whether this object is calculated using an implicit or explicit form\n'
p28563
sS'cpp_type'
p28564
S'bool'
p28565
sS'default'
p28566
S'1'
p28567
sS'name'
p28568
S'implicit'
p28569
sS'required'
p28570
I00
sS'group_name'
p28571
S'Advanced'
p28572
sa(dp28573
S'description'
p28574
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p28575
sS'cpp_type'
p28576
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p28577
sS'default'
p28578
g3
sS'name'
p28579
S'save_in'
p28580
sS'required'
p28581
I00
sS'group_name'
p28582
Nsa(dp28583
S'description'
p28584
S'The seed for the master random number generator\n'
p28585
sS'cpp_type'
p28586
S'unsigned int'
p28587
sS'default'
p28588
S'0'
p28589
sS'name'
p28590
S'seed'
p28591
sS'required'
p28592
I00
sS'group_name'
p28593
S'Advanced'
p28594
sa(dp28595
S'description'
p28596
g3
sS'cpp_type'
p28597
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28598
sS'default'
p28599
S'TimeDerivativeNodalKernel'
p28600
sS'name'
p28601
S'type'
p28602
sS'required'
p28603
I00
sS'group_name'
p28604
Nsa(dp28605
S'description'
p28606
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28607
sS'cpp_type'
p28608
S'bool'
p28609
sS'default'
p28610
S'0'
p28611
sS'name'
p28612
S'use_displaced_mesh'
p28613
sS'required'
p28614
I00
sS'group_name'
p28615
S'Advanced'
p28616
sa(dp28617
S'description'
p28618
S'The name of the variable that this boundary condition applies to\n'
p28619
sS'cpp_type'
p28620
S'NonlinearVariableName'
p28621
sS'default'
p28622
g3
sS'name'
p28623
S'variable'
p28624
sS'required'
p28625
I01
sS'group_name'
p28626
NsasS'name'
p28627
S'/NodalKernels/TimeDerivativeNodalKernel'
p28628
sa(dp28629
S'description'
p28630
g3
sS'subblocks'
p28631
NsS'parameters'
p28632
(lp28633
(dp28634
S'description'
p28635
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28636
sS'cpp_type'
p28637
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p28638
sS'default'
p28639
g3
sS'name'
p28640
S'block'
p28641
sS'required'
p28642
I00
sS'group_name'
p28643
Nsa(dp28644
S'description'
p28645
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28646
sS'cpp_type'
p28647
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p28648
sS'default'
p28649
g3
sS'name'
p28650
S'boundary'
p28651
sS'required'
p28652
I00
sS'group_name'
p28653
Nsa(dp28654
S'description'
p28655
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28656
sS'cpp_type'
p28657
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p28658
sS'default'
p28659
g3
sS'name'
p28660
S'control_tags'
p28661
sS'required'
p28662
I00
sS'group_name'
p28663
S'Advanced'
p28664
sa(dp28665
S'description'
p28666
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p28667
sS'cpp_type'
p28668
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p28669
sS'default'
p28670
g3
sS'name'
p28671
S'diag_save_in'
p28672
sS'required'
p28673
I00
sS'group_name'
p28674
Nsa(dp28675
S'description'
p28676
S'Set the enabled status of the MooseObject.\n'
p28677
sS'cpp_type'
p28678
S'bool'
p28679
sS'default'
p28680
S'1'
p28681
sS'name'
p28682
S'enable'
p28683
sS'required'
p28684
I00
sS'group_name'
p28685
S'Advanced'
p28686
sa(dp28687
S'description'
p28688
S'The forcing function\n'
p28689
sS'cpp_type'
p28690
S'FunctionName'
p28691
sS'default'
p28692
g3
sS'name'
p28693
S'function'
p28694
sS'required'
p28695
I01
sS'group_name'
p28696
Nsa(dp28697
S'description'
p28698
S'Determines whether this object is calculated using an implicit or explicit form\n'
p28699
sS'cpp_type'
p28700
S'bool'
p28701
sS'default'
p28702
S'1'
p28703
sS'name'
p28704
S'implicit'
p28705
sS'required'
p28706
I00
sS'group_name'
p28707
S'Advanced'
p28708
sa(dp28709
S'description'
p28710
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p28711
sS'cpp_type'
p28712
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p28713
sS'default'
p28714
g3
sS'name'
p28715
S'save_in'
p28716
sS'required'
p28717
I00
sS'group_name'
p28718
Nsa(dp28719
S'description'
p28720
S'The seed for the master random number generator\n'
p28721
sS'cpp_type'
p28722
S'unsigned int'
p28723
sS'default'
p28724
S'0'
p28725
sS'name'
p28726
S'seed'
p28727
sS'required'
p28728
I00
sS'group_name'
p28729
S'Advanced'
p28730
sa(dp28731
S'description'
p28732
g3
sS'cpp_type'
p28733
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28734
sS'default'
p28735
S'UserForcingFunctionNodalKernel'
p28736
sS'name'
p28737
S'type'
p28738
sS'required'
p28739
I00
sS'group_name'
p28740
Nsa(dp28741
S'description'
p28742
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28743
sS'cpp_type'
p28744
S'bool'
p28745
sS'default'
p28746
S'0'
p28747
sS'name'
p28748
S'use_displaced_mesh'
p28749
sS'required'
p28750
I00
sS'group_name'
p28751
S'Advanced'
p28752
sa(dp28753
S'description'
p28754
S'The name of the variable that this boundary condition applies to\n'
p28755
sS'cpp_type'
p28756
S'NonlinearVariableName'
p28757
sS'default'
p28758
g3
sS'name'
p28759
S'variable'
p28760
sS'required'
p28761
I01
sS'group_name'
p28762
NsasS'name'
p28763
S'/NodalKernels/UserForcingFunctionNodalKernel'
p28764
sasS'parameters'
p28765
NsS'name'
p28766
S'/NodalKernels'
p28767
sa(dp28768
S'description'
p28769
g3
sS'subblocks'
p28770
NsS'parameters'
p28771
(lp28772
(dp28773
S'description'
p28774
S'The boundary ID or name where the normals will be computed\n'
p28775
sS'cpp_type'
p28776
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p28777
sS'default'
p28778
S'ANY_BOUNDARY_ID'
p28779
sS'name'
p28780
S'boundary'
p28781
sS'required'
p28782
I00
sS'group_name'
p28783
Nsa(dp28784
S'description'
p28785
S"boundary ID or name with nodes at 'corners'\n"
p28786
sS'cpp_type'
p28787
S'BoundaryName'
p28788
sS'default'
p28789
g3
sS'name'
p28790
S'corner_boundary'
p28791
sS'required'
p28792
I00
sS'group_name'
p28793
Nsa(dp28794
S'name'
p28795
S'order'
p28796
sS'cpp_type'
p28797
S'MooseEnum'
p28798
sS'default'
p28799
S'FIRST'
p28800
sS'description'
p28801
S'Specifies the order of variables that hold the nodal normals. Needs to match the order of the mesh\n'
p28802
sS'required'
p28803
I00
sS'options'
p28804
S'FIRST SECOND'
p28805
sS'group_name'
p28806
NsasS'name'
p28807
S'/NodalNormals'
p28808
sa(dp28809
S'description'
p28810
g3
sS'subblocks'
p28811
(lp28812
(dp28813
S'description'
p28814
g3
sS'subblocks'
p28815
NsS'parameters'
p28816
(lp28817
(dp28818
S'description'
p28819
S'A string representing the Moose Object that will be built by this Action\n'
p28820
sS'cpp_type'
p28821
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28822
sS'default'
p28823
g3
sS'name'
p28824
S'type'
p28825
sS'required'
p28826
I01
sS'group_name'
p28827
NsasS'name'
p28828
S'/Outputs/*'
p28829
sa(dp28830
S'description'
p28831
g3
sS'subblocks'
p28832
NsS'parameters'
p28833
(lp28834
(dp28835
S'name'
p28836
S'additional_execute_on'
p28837
sS'cpp_type'
p28838
S'MultiMooseEnum'
p28839
sS'default'
p28840
g3
sS'description'
p28841
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p28842
sS'required'
p28843
I00
sS'options'
p28844
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p28845
sS'group_name'
p28846
Nsa(dp28847
S'description'
p28848
S'Align the outputted csv data by padding the numbers with trailing whitespace\n'
p28849
sS'cpp_type'
p28850
S'bool'
p28851
sS'default'
p28852
S'0'
p28853
sS'name'
p28854
S'align'
p28855
sS'required'
p28856
I00
sS'group_name'
p28857
Nsa(dp28858
S'description'
p28859
S'When true the date and time are appended to the output filename.\n'
p28860
sS'cpp_type'
p28861
S'bool'
p28862
sS'default'
p28863
S'0'
p28864
sS'name'
p28865
S'append_date'
p28866
sS'required'
p28867
I00
sS'group_name'
p28868
Nsa(dp28869
S'description'
p28870
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p28871
sS'cpp_type'
p28872
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28873
sS'default'
p28874
g3
sS'name'
p28875
S'append_date_format'
p28876
sS'required'
p28877
I00
sS'group_name'
p28878
Nsa(dp28879
S'description'
p28880
S'Append existing file on restart\n'
p28881
sS'cpp_type'
p28882
S'bool'
p28883
sS'default'
p28884
S'0'
p28885
sS'name'
p28886
S'append_restart'
p28887
sS'required'
p28888
I00
sS'group_name'
p28889
Nsa(dp28890
S'description'
p28891
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28892
sS'cpp_type'
p28893
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p28894
sS'default'
p28895
g3
sS'name'
p28896
S'control_tags'
p28897
sS'required'
p28898
I00
sS'group_name'
p28899
S'Advanced'
p28900
sa(dp28901
S'description'
p28902
S"Assign the delimiter (default is ','\n"
p28903
sS'cpp_type'
p28904
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28905
sS'default'
p28906
g3
sS'name'
p28907
S'delimiter'
p28908
sS'required'
p28909
I00
sS'group_name'
p28910
Nsa(dp28911
S'description'
p28912
S'Set the enabled status of the MooseObject.\n'
p28913
sS'cpp_type'
p28914
S'bool'
p28915
sS'default'
p28916
S'1'
p28917
sS'name'
p28918
S'enable'
p28919
sS'required'
p28920
I00
sS'group_name'
p28921
S'Advanced'
p28922
sa(dp28923
S'description'
p28924
S'Time at which this output object stop operating\n'
p28925
sS'cpp_type'
p28926
S'double'
p28927
sS'default'
p28928
g3
sS'name'
p28929
S'end_time'
p28930
sS'required'
p28931
I00
sS'group_name'
p28932
S'Timing'
p28933
sa(dp28934
S'description'
p28935
S'Enable/disable the output of elemental variables\n'
p28936
sS'cpp_type'
p28937
S'bool'
p28938
sS'default'
p28939
S'1'
p28940
sS'name'
p28941
S'execute_elemental_variables'
p28942
sS'required'
p28943
I00
sS'group_name'
p28944
Nsa(dp28945
S'description'
p28946
S'Enable/disable the output of input file information\n'
p28947
sS'cpp_type'
p28948
S'bool'
p28949
sS'default'
p28950
S'1'
p28951
sS'name'
p28952
S'execute_input'
p28953
sS'required'
p28954
I00
sS'group_name'
p28955
Nsa(dp28956
S'description'
p28957
S'Enable/disable the output of nodal variables\n'
p28958
sS'cpp_type'
p28959
S'bool'
p28960
sS'default'
p28961
S'1'
p28962
sS'name'
p28963
S'execute_nodal_variables'
p28964
sS'required'
p28965
I00
sS'group_name'
p28966
Nsa(dp28967
S'name'
p28968
S'execute_on'
p28969
sS'cpp_type'
p28970
S'MultiMooseEnum'
p28971
sS'default'
p28972
S'INITIAL TIMESTEP_END'
p28973
sS'description'
p28974
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p28975
sS'required'
p28976
I00
sS'options'
p28977
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p28978
sS'group_name'
p28979
Nsa(dp28980
S'name'
p28981
S'execute_postprocessors_on'
p28982
sS'cpp_type'
p28983
S'MultiMooseEnum'
p28984
sS'default'
p28985
g3
sS'description'
p28986
S'Control of when postprocessors are output\n'
p28987
sS'required'
p28988
I00
sS'options'
p28989
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p28990
sS'group_name'
p28991
S'Variables'
p28992
sa(dp28993
S'description'
p28994
S'Enable/disable the output of aux scalar variables\n'
p28995
sS'cpp_type'
p28996
S'bool'
p28997
sS'default'
p28998
S'1'
p28999
sS'name'
p29000
S'execute_scalar_variables'
p29001
sS'required'
p29002
I00
sS'group_name'
p29003
Nsa(dp29004
S'name'
p29005
S'execute_scalars_on'
p29006
sS'cpp_type'
p29007
S'MultiMooseEnum'
p29008
sS'default'
p29009
g3
sS'description'
p29010
S'Control the output of scalar variables\n'
p29011
sS'required'
p29012
I00
sS'options'
p29013
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29014
sS'group_name'
p29015
S'Variables'
p29016
sa(dp29017
S'description'
p29018
S'Enable/disable the output of the simulation information\n'
p29019
sS'cpp_type'
p29020
S'bool'
p29021
sS'default'
p29022
S'1'
p29023
sS'name'
p29024
S'execute_system_information'
p29025
sS'required'
p29026
I00
sS'group_name'
p29027
Nsa(dp29028
S'description'
p29029
S'Enable/disable the output of vector postprocessors\n'
p29030
sS'cpp_type'
p29031
S'bool'
p29032
sS'default'
p29033
S'1'
p29034
sS'name'
p29035
S'execute_vector_postprocessors'
p29036
sS'required'
p29037
I00
sS'group_name'
p29038
Nsa(dp29039
S'name'
p29040
S'execute_vector_postprocessors_on'
p29041
sS'cpp_type'
p29042
S'MultiMooseEnum'
p29043
sS'default'
p29044
g3
sS'description'
p29045
S'Enable/disable the output of VectorPostprocessors\n'
p29046
sS'required'
p29047
I00
sS'options'
p29048
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29049
sS'group_name'
p29050
S'Variables'
p29051
sa(dp29052
S'description'
p29053
S'The desired solution output name without an extension\n'
p29054
sS'cpp_type'
p29055
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29056
sS'default'
p29057
g3
sS'name'
p29058
S'file_base'
p29059
sS'required'
p29060
I00
sS'group_name'
p29061
Nsa(dp29062
S'description'
p29063
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p29064
sS'cpp_type'
p29065
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p29066
sS'default'
p29067
g3
sS'name'
p29068
S'hide'
p29069
sS'required'
p29070
I00
sS'group_name'
p29071
S'Variables'
p29072
sa(dp29073
S'description'
p29074
S'The interval at which time steps are output to the solution file\n'
p29075
sS'cpp_type'
p29076
S'unsigned int'
p29077
sS'default'
p29078
S'1'
p29079
sS'name'
p29080
S'interval'
p29081
sS'required'
p29082
I00
sS'group_name'
p29083
S'Timing'
p29084
sa(dp29085
S'description'
p29086
S'Number of divisions applied to time step when outputting linear residuals\n'
p29087
sS'cpp_type'
p29088
S'double'
p29089
sS'default'
p29090
S'1000'
p29091
sS'name'
p29092
S'linear_residual_dt_divisor'
p29093
sS'required'
p29094
I00
sS'group_name'
p29095
S'PETSc'
p29096
sa(dp29097
S'description'
p29098
S'Specifies an end time to begin output on each linear residual evaluation\n'
p29099
sS'cpp_type'
p29100
S'double'
p29101
sS'default'
p29102
g3
sS'name'
p29103
S'linear_residual_end_time'
p29104
sS'required'
p29105
I00
sS'group_name'
p29106
S'PETSc'
p29107
sa(dp29108
S'description'
p29109
S'Specifies a start time to begin output on each linear residual evaluation\n'
p29110
sS'cpp_type'
p29111
S'double'
p29112
sS'default'
p29113
g3
sS'name'
p29114
S'linear_residual_start_time'
p29115
sS'required'
p29116
I00
sS'group_name'
p29117
S'PETSc'
p29118
sa(dp29119
S'description'
p29120
S'Specifies whether output occurs on each linear residual evaluation\n'
p29121
sS'cpp_type'
p29122
S'bool'
p29123
sS'default'
p29124
S'0'
p29125
sS'name'
p29126
S'linear_residuals'
p29127
sS'required'
p29128
I00
sS'group_name'
p29129
S'PETSc'
p29130
sa(dp29131
S'description'
p29132
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p29133
sS'cpp_type'
p29134
S'double'
p29135
sS'default'
p29136
S'1000'
p29137
sS'name'
p29138
S'nonlinear_residual_dt_divisor'
p29139
sS'required'
p29140
I00
sS'group_name'
p29141
S'PETSc'
p29142
sa(dp29143
S'description'
p29144
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p29145
sS'cpp_type'
p29146
S'double'
p29147
sS'default'
p29148
g3
sS'name'
p29149
S'nonlinear_residual_end_time'
p29150
sS'required'
p29151
I00
sS'group_name'
p29152
S'PETSc'
p29153
sa(dp29154
S'description'
p29155
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p29156
sS'cpp_type'
p29157
S'double'
p29158
sS'default'
p29159
g3
sS'name'
p29160
S'nonlinear_residual_start_time'
p29161
sS'required'
p29162
I00
sS'group_name'
p29163
S'PETSc'
p29164
sa(dp29165
S'description'
p29166
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p29167
sS'cpp_type'
p29168
S'bool'
p29169
sS'default'
p29170
S'0'
p29171
sS'name'
p29172
S'nonlinear_residuals'
p29173
sS'required'
p29174
I00
sS'group_name'
p29175
S'PETSc'
p29176
sa(dp29177
S'description'
p29178
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p29179
sS'cpp_type'
p29180
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p29181
sS'default'
p29182
g3
sS'name'
p29183
S'output_if_base_contains'
p29184
sS'required'
p29185
I00
sS'group_name'
p29186
S'Advanced'
p29187
sa(dp29188
S'description'
p29189
S'Specifies whether output occurs on each linear residual evaluation\n'
p29190
sS'cpp_type'
p29191
S'bool'
p29192
sS'default'
p29193
S'0'
p29194
sS'name'
p29195
S'output_linear'
p29196
sS'required'
p29197
I00
sS'group_name'
p29198
Nsa(dp29199
S'description'
p29200
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p29201
sS'cpp_type'
p29202
S'bool'
p29203
sS'default'
p29204
S'0'
p29205
sS'name'
p29206
S'output_nonlinear'
p29207
sS'required'
p29208
I00
sS'group_name'
p29209
Nsa(dp29210
S'description'
p29211
S'Enable/disable the output of postprocessors\n'
p29212
sS'cpp_type'
p29213
S'bool'
p29214
sS'default'
p29215
S'1'
p29216
sS'name'
p29217
S'output_postprocessors'
p29218
sS'required'
p29219
I00
sS'group_name'
p29220
Nsa(dp29221
S'description'
p29222
S'Set the output precision\n'
p29223
sS'cpp_type'
p29224
S'unsigned int'
p29225
sS'default'
p29226
S'14'
p29227
sS'name'
p29228
S'precision'
p29229
sS'required'
p29230
I00
sS'group_name'
p29231
Nsa(dp29232
S'description'
p29233
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p29234
sS'cpp_type'
p29235
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p29236
sS'default'
p29237
g3
sS'name'
p29238
S'show'
p29239
sS'required'
p29240
I00
sS'group_name'
p29241
S'Variables'
p29242
sa(dp29243
S'description'
p29244
S'Time at which this output object begins to operate\n'
p29245
sS'cpp_type'
p29246
S'double'
p29247
sS'default'
p29248
g3
sS'name'
p29249
S'start_time'
p29250
sS'required'
p29251
I00
sS'group_name'
p29252
S'Timing'
p29253
sa(dp29254
S'description'
p29255
S'Only export results at sync times\n'
p29256
sS'cpp_type'
p29257
S'bool'
p29258
sS'default'
p29259
S'0'
p29260
sS'name'
p29261
S'sync_only'
p29262
sS'required'
p29263
I00
sS'group_name'
p29264
S'Timing'
p29265
sa(dp29266
S'description'
p29267
S'Times at which the output and solution is forced to occur\n'
p29268
sS'cpp_type'
p29269
S'std::__1::vector<double, std::__1::allocator<double> >'
p29270
sS'default'
p29271
g3
sS'name'
p29272
S'sync_times'
p29273
sS'required'
p29274
I00
sS'group_name'
p29275
S'Timing'
p29276
sa(dp29277
S'description'
p29278
S"Whether or not the 'time' column should be written for Postprocessor CSV files\n"
p29279
sS'cpp_type'
p29280
S'bool'
p29281
sS'default'
p29282
S'1'
p29283
sS'name'
p29284
S'time_column'
p29285
sS'required'
p29286
I00
sS'group_name'
p29287
Nsa(dp29288
S'description'
p29289
S'When true and VecptorPostprocessor data exists, write a csv file containing the timestep and time information.\n'
p29290
sS'cpp_type'
p29291
S'bool'
p29292
sS'default'
p29293
S'0'
p29294
sS'name'
p29295
S'time_data'
p29296
sS'required'
p29297
I00
sS'group_name'
p29298
Nsa(dp29299
S'description'
p29300
S'Time tolerance utilized checking start and end times\n'
p29301
sS'cpp_type'
p29302
S'double'
p29303
sS'default'
p29304
S'1e-14'
p29305
sS'name'
p29306
S'time_tolerance'
p29307
sS'required'
p29308
I00
sS'group_name'
p29309
S'Timing'
p29310
sa(dp29311
S'description'
p29312
g3
sS'cpp_type'
p29313
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29314
sS'default'
p29315
S'CSV'
p29316
sS'name'
p29317
S'type'
p29318
sS'required'
p29319
I00
sS'group_name'
p29320
Nsa(dp29321
S'description'
p29322
S'Enable/disable the use of the displaced mesh for outputting\n'
p29323
sS'cpp_type'
p29324
S'bool'
p29325
sS'default'
p29326
S'0'
p29327
sS'name'
p29328
S'use_displaced'
p29329
sS'required'
p29330
I00
sS'group_name'
p29331
NsasS'name'
p29332
S'/Outputs/CSV'
p29333
sa(dp29334
S'description'
p29335
g3
sS'subblocks'
p29336
NsS'parameters'
p29337
(lp29338
(dp29339
S'name'
p29340
S'additional_execute_on'
p29341
sS'cpp_type'
p29342
S'MultiMooseEnum'
p29343
sS'default'
p29344
g3
sS'description'
p29345
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p29346
sS'required'
p29347
I00
sS'options'
p29348
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29349
sS'group_name'
p29350
Nsa(dp29351
S'description'
p29352
S'When true the date and time are appended to the output filename.\n'
p29353
sS'cpp_type'
p29354
S'bool'
p29355
sS'default'
p29356
S'0'
p29357
sS'name'
p29358
S'append_date'
p29359
sS'required'
p29360
I00
sS'group_name'
p29361
Nsa(dp29362
S'description'
p29363
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p29364
sS'cpp_type'
p29365
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29366
sS'default'
p29367
g3
sS'name'
p29368
S'append_date_format'
p29369
sS'required'
p29370
I00
sS'group_name'
p29371
Nsa(dp29372
S'description'
p29373
S'Toggle the output of binary files\n'
p29374
sS'cpp_type'
p29375
S'bool'
p29376
sS'default'
p29377
S'1'
p29378
sS'name'
p29379
S'binary'
p29380
sS'required'
p29381
I00
sS'group_name'
p29382
S'Advanced'
p29383
sa(dp29384
S'description'
p29385
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p29386
sS'cpp_type'
p29387
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p29388
sS'default'
p29389
g3
sS'name'
p29390
S'control_tags'
p29391
sS'required'
p29392
I00
sS'group_name'
p29393
S'Advanced'
p29394
sa(dp29395
S'description'
p29396
S'Set the enabled status of the MooseObject.\n'
p29397
sS'cpp_type'
p29398
S'bool'
p29399
sS'default'
p29400
S'1'
p29401
sS'name'
p29402
S'enable'
p29403
sS'required'
p29404
I00
sS'group_name'
p29405
S'Advanced'
p29406
sa(dp29407
S'description'
p29408
S'Time at which this output object stop operating\n'
p29409
sS'cpp_type'
p29410
S'double'
p29411
sS'default'
p29412
g3
sS'name'
p29413
S'end_time'
p29414
sS'required'
p29415
I00
sS'group_name'
p29416
S'Timing'
p29417
sa(dp29418
S'name'
p29419
S'execute_on'
p29420
sS'cpp_type'
p29421
S'MultiMooseEnum'
p29422
sS'default'
p29423
S'INITIAL TIMESTEP_END'
p29424
sS'description'
p29425
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p29426
sS'required'
p29427
I00
sS'options'
p29428
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29429
sS'group_name'
p29430
Nsa(dp29431
S'description'
p29432
S'The desired solution output name without an extension\n'
p29433
sS'cpp_type'
p29434
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29435
sS'default'
p29436
g3
sS'name'
p29437
S'file_base'
p29438
sS'required'
p29439
I00
sS'group_name'
p29440
Nsa(dp29441
S'description'
p29442
S'The interval at which time steps are output to the solution file\n'
p29443
sS'cpp_type'
p29444
S'unsigned int'
p29445
sS'default'
p29446
S'1'
p29447
sS'name'
p29448
S'interval'
p29449
sS'required'
p29450
I00
sS'group_name'
p29451
S'Timing'
p29452
sa(dp29453
S'description'
p29454
S'Number of divisions applied to time step when outputting linear residuals\n'
p29455
sS'cpp_type'
p29456
S'double'
p29457
sS'default'
p29458
S'1000'
p29459
sS'name'
p29460
S'linear_residual_dt_divisor'
p29461
sS'required'
p29462
I00
sS'group_name'
p29463
S'PETSc'
p29464
sa(dp29465
S'description'
p29466
S'Specifies an end time to begin output on each linear residual evaluation\n'
p29467
sS'cpp_type'
p29468
S'double'
p29469
sS'default'
p29470
g3
sS'name'
p29471
S'linear_residual_end_time'
p29472
sS'required'
p29473
I00
sS'group_name'
p29474
S'PETSc'
p29475
sa(dp29476
S'description'
p29477
S'Specifies a start time to begin output on each linear residual evaluation\n'
p29478
sS'cpp_type'
p29479
S'double'
p29480
sS'default'
p29481
g3
sS'name'
p29482
S'linear_residual_start_time'
p29483
sS'required'
p29484
I00
sS'group_name'
p29485
S'PETSc'
p29486
sa(dp29487
S'description'
p29488
S'Specifies whether output occurs on each linear residual evaluation\n'
p29489
sS'cpp_type'
p29490
S'bool'
p29491
sS'default'
p29492
S'0'
p29493
sS'name'
p29494
S'linear_residuals'
p29495
sS'required'
p29496
I00
sS'group_name'
p29497
S'PETSc'
p29498
sa(dp29499
S'description'
p29500
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p29501
sS'cpp_type'
p29502
S'double'
p29503
sS'default'
p29504
S'1000'
p29505
sS'name'
p29506
S'nonlinear_residual_dt_divisor'
p29507
sS'required'
p29508
I00
sS'group_name'
p29509
S'PETSc'
p29510
sa(dp29511
S'description'
p29512
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p29513
sS'cpp_type'
p29514
S'double'
p29515
sS'default'
p29516
g3
sS'name'
p29517
S'nonlinear_residual_end_time'
p29518
sS'required'
p29519
I00
sS'group_name'
p29520
S'PETSc'
p29521
sa(dp29522
S'description'
p29523
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p29524
sS'cpp_type'
p29525
S'double'
p29526
sS'default'
p29527
g3
sS'name'
p29528
S'nonlinear_residual_start_time'
p29529
sS'required'
p29530
I00
sS'group_name'
p29531
S'PETSc'
p29532
sa(dp29533
S'description'
p29534
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p29535
sS'cpp_type'
p29536
S'bool'
p29537
sS'default'
p29538
S'0'
p29539
sS'name'
p29540
S'nonlinear_residuals'
p29541
sS'required'
p29542
I00
sS'group_name'
p29543
S'PETSc'
p29544
sa(dp29545
S'description'
p29546
S'Number of the restart files to save\n'
p29547
sS'cpp_type'
p29548
S'unsigned int'
p29549
sS'default'
p29550
S'2'
p29551
sS'name'
p29552
S'num_files'
p29553
sS'required'
p29554
I00
sS'group_name'
p29555
Nsa(dp29556
S'description'
p29557
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p29558
sS'cpp_type'
p29559
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p29560
sS'default'
p29561
g3
sS'name'
p29562
S'output_if_base_contains'
p29563
sS'required'
p29564
I00
sS'group_name'
p29565
S'Advanced'
p29566
sa(dp29567
S'description'
p29568
S'Specifies whether output occurs on each linear residual evaluation\n'
p29569
sS'cpp_type'
p29570
S'bool'
p29571
sS'default'
p29572
S'0'
p29573
sS'name'
p29574
S'output_linear'
p29575
sS'required'
p29576
I00
sS'group_name'
p29577
Nsa(dp29578
S'description'
p29579
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p29580
sS'cpp_type'
p29581
S'bool'
p29582
sS'default'
p29583
S'0'
p29584
sS'name'
p29585
S'output_nonlinear'
p29586
sS'required'
p29587
I00
sS'group_name'
p29588
Nsa(dp29589
S'description'
p29590
S'The number of for extension suffix (e.g., out.e-s002)\n'
p29591
sS'cpp_type'
p29592
S'unsigned int'
p29593
sS'default'
p29594
S'4'
p29595
sS'name'
p29596
S'padding'
p29597
sS'required'
p29598
I00
sS'group_name'
p29599
S'Advanced'
p29600
sa(dp29601
S'description'
p29602
S'Time at which this output object begins to operate\n'
p29603
sS'cpp_type'
p29604
S'double'
p29605
sS'default'
p29606
g3
sS'name'
p29607
S'start_time'
p29608
sS'required'
p29609
I00
sS'group_name'
p29610
S'Timing'
p29611
sa(dp29612
S'description'
p29613
S'This will be appended to the file_base to create the directory name for checkpoint files.\n'
p29614
sS'cpp_type'
p29615
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29616
sS'default'
p29617
S'cp'
p29618
sS'name'
p29619
S'suffix'
p29620
sS'required'
p29621
I00
sS'group_name'
p29622
Nsa(dp29623
S'description'
p29624
S'Only export results at sync times\n'
p29625
sS'cpp_type'
p29626
S'bool'
p29627
sS'default'
p29628
S'0'
p29629
sS'name'
p29630
S'sync_only'
p29631
sS'required'
p29632
I00
sS'group_name'
p29633
S'Timing'
p29634
sa(dp29635
S'description'
p29636
S'Times at which the output and solution is forced to occur\n'
p29637
sS'cpp_type'
p29638
S'std::__1::vector<double, std::__1::allocator<double> >'
p29639
sS'default'
p29640
g3
sS'name'
p29641
S'sync_times'
p29642
sS'required'
p29643
I00
sS'group_name'
p29644
S'Timing'
p29645
sa(dp29646
S'description'
p29647
S'Time tolerance utilized checking start and end times\n'
p29648
sS'cpp_type'
p29649
S'double'
p29650
sS'default'
p29651
S'1e-14'
p29652
sS'name'
p29653
S'time_tolerance'
p29654
sS'required'
p29655
I00
sS'group_name'
p29656
S'Timing'
p29657
sa(dp29658
S'description'
p29659
g3
sS'cpp_type'
p29660
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29661
sS'default'
p29662
S'Checkpoint'
p29663
sS'name'
p29664
S'type'
p29665
sS'required'
p29666
I00
sS'group_name'
p29667
Nsa(dp29668
S'description'
p29669
S'Enable/disable the use of the displaced mesh for outputting\n'
p29670
sS'cpp_type'
p29671
S'bool'
p29672
sS'default'
p29673
S'0'
p29674
sS'name'
p29675
S'use_displaced'
p29676
sS'required'
p29677
I00
sS'group_name'
p29678
NsasS'name'
p29679
S'/Outputs/Checkpoint'
p29680
sa(dp29681
S'description'
p29682
g3
sS'subblocks'
p29683
NsS'parameters'
p29684
(lp29685
(dp29686
S'name'
p29687
S'additional_execute_on'
p29688
sS'cpp_type'
p29689
S'MultiMooseEnum'
p29690
sS'default'
p29691
g3
sS'description'
p29692
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p29693
sS'required'
p29694
I00
sS'options'
p29695
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29696
sS'group_name'
p29697
Nsa(dp29698
S'description'
p29699
S'If true, all variable norms will be printed after each solve\n'
p29700
sS'cpp_type'
p29701
S'bool'
p29702
sS'default'
p29703
S'0'
p29704
sS'name'
p29705
S'all_variable_norms'
p29706
sS'required'
p29707
I00
sS'group_name'
p29708
S'Norms'
p29709
sa(dp29710
S'description'
p29711
S'When true the date and time are appended to the output filename.\n'
p29712
sS'cpp_type'
p29713
S'bool'
p29714
sS'default'
p29715
S'0'
p29716
sS'name'
p29717
S'append_date'
p29718
sS'required'
p29719
I00
sS'group_name'
p29720
Nsa(dp29721
S'description'
p29722
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p29723
sS'cpp_type'
p29724
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29725
sS'default'
p29726
g3
sS'name'
p29727
S'append_date_format'
p29728
sS'required'
p29729
I00
sS'group_name'
p29730
Nsa(dp29731
S'description'
p29732
S'Append existing file on restart\n'
p29733
sS'cpp_type'
p29734
S'bool'
p29735
sS'default'
p29736
S'0'
p29737
sS'name'
p29738
S'append_restart'
p29739
sS'required'
p29740
I00
sS'group_name'
p29741
Nsa(dp29742
S'description'
p29743
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p29744
sS'cpp_type'
p29745
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p29746
sS'default'
p29747
g3
sS'name'
p29748
S'control_tags'
p29749
sS'required'
p29750
I00
sS'group_name'
p29751
S'Advanced'
p29752
sa(dp29753
S'description'
p29754
S'Set the enabled status of the MooseObject.\n'
p29755
sS'cpp_type'
p29756
S'bool'
p29757
sS'default'
p29758
S'1'
p29759
sS'name'
p29760
S'enable'
p29761
sS'required'
p29762
I00
sS'group_name'
p29763
S'Advanced'
p29764
sa(dp29765
S'description'
p29766
S'Time at which this output object stop operating\n'
p29767
sS'cpp_type'
p29768
S'double'
p29769
sS'default'
p29770
g3
sS'name'
p29771
S'end_time'
p29772
sS'required'
p29773
I00
sS'group_name'
p29774
S'Timing'
p29775
sa(dp29776
S'description'
p29777
S'Enable/disable the output of elemental variables\n'
p29778
sS'cpp_type'
p29779
S'bool'
p29780
sS'default'
p29781
S'1'
p29782
sS'name'
p29783
S'execute_elemental_variables'
p29784
sS'required'
p29785
I00
sS'group_name'
p29786
Nsa(dp29787
S'description'
p29788
S'Enable/disable the output of input file information\n'
p29789
sS'cpp_type'
p29790
S'bool'
p29791
sS'default'
p29792
S'1'
p29793
sS'name'
p29794
S'execute_input'
p29795
sS'required'
p29796
I00
sS'group_name'
p29797
Nsa(dp29798
S'name'
p29799
S'execute_input_on'
p29800
sS'cpp_type'
p29801
S'MultiMooseEnum'
p29802
sS'default'
p29803
g3
sS'description'
p29804
S'Enable/disable the output of the input file\n'
p29805
sS'required'
p29806
I00
sS'options'
p29807
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29808
sS'group_name'
p29809
S'Variables'
p29810
sa(dp29811
S'description'
p29812
S'Enable/disable the output of nodal variables\n'
p29813
sS'cpp_type'
p29814
S'bool'
p29815
sS'default'
p29816
S'1'
p29817
sS'name'
p29818
S'execute_nodal_variables'
p29819
sS'required'
p29820
I00
sS'group_name'
p29821
Nsa(dp29822
S'name'
p29823
S'execute_on'
p29824
sS'cpp_type'
p29825
S'MultiMooseEnum'
p29826
sS'default'
p29827
S'FAILED INITIAL LINEAR NONLINEAR TIMESTEP_BEGIN TIMESTEP_END'
p29828
sS'description'
p29829
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p29830
sS'required'
p29831
I00
sS'options'
p29832
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29833
sS'group_name'
p29834
Nsa(dp29835
S'name'
p29836
S'execute_postprocessors_on'
p29837
sS'cpp_type'
p29838
S'MultiMooseEnum'
p29839
sS'default'
p29840
S'INITIAL TIMESTEP_END'
p29841
sS'description'
p29842
S'Control of when postprocessors are output\n'
p29843
sS'required'
p29844
I00
sS'options'
p29845
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29846
sS'group_name'
p29847
S'Variables'
p29848
sa(dp29849
S'description'
p29850
S'Enable/disable the output of aux scalar variables\n'
p29851
sS'cpp_type'
p29852
S'bool'
p29853
sS'default'
p29854
S'1'
p29855
sS'name'
p29856
S'execute_scalar_variables'
p29857
sS'required'
p29858
I00
sS'group_name'
p29859
Nsa(dp29860
S'name'
p29861
S'execute_scalars_on'
p29862
sS'cpp_type'
p29863
S'MultiMooseEnum'
p29864
sS'default'
p29865
S'INITIAL TIMESTEP_END'
p29866
sS'description'
p29867
S'Control the output of scalar variables\n'
p29868
sS'required'
p29869
I00
sS'options'
p29870
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29871
sS'group_name'
p29872
S'Variables'
p29873
sa(dp29874
S'description'
p29875
S'Enable/disable the output of the simulation information\n'
p29876
sS'cpp_type'
p29877
S'bool'
p29878
sS'default'
p29879
S'1'
p29880
sS'name'
p29881
S'execute_system_information'
p29882
sS'required'
p29883
I00
sS'group_name'
p29884
Nsa(dp29885
S'name'
p29886
S'execute_system_information_on'
p29887
sS'cpp_type'
p29888
S'MultiMooseEnum'
p29889
sS'default'
p29890
S'INITIAL'
p29891
sS'description'
p29892
S'Control when the output of the simulation information occurs\n'
p29893
sS'required'
p29894
I00
sS'options'
p29895
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29896
sS'group_name'
p29897
S'Variables'
p29898
sa(dp29899
S'description'
p29900
S'Enable/disable the output of vector postprocessors\n'
p29901
sS'cpp_type'
p29902
S'bool'
p29903
sS'default'
p29904
S'1'
p29905
sS'name'
p29906
S'execute_vector_postprocessors'
p29907
sS'required'
p29908
I00
sS'group_name'
p29909
Nsa(dp29910
S'name'
p29911
S'execute_vector_postprocessors_on'
p29912
sS'cpp_type'
p29913
S'MultiMooseEnum'
p29914
sS'default'
p29915
S'INITIAL TIMESTEP_END'
p29916
sS'description'
p29917
S'Enable/disable the output of VectorPostprocessors\n'
p29918
sS'required'
p29919
I00
sS'options'
p29920
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29921
sS'group_name'
p29922
S'Variables'
p29923
sa(dp29924
S'description'
p29925
S'The desired solution output name without an extension\n'
p29926
sS'cpp_type'
p29927
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29928
sS'default'
p29929
g3
sS'name'
p29930
S'file_base'
p29931
sS'required'
p29932
I00
sS'group_name'
p29933
Nsa(dp29934
S'name'
p29935
S'fit_mode'
p29936
sS'cpp_type'
p29937
S'MooseEnum'
p29938
sS'default'
p29939
S'ENVIRONMENT'
p29940
sS'description'
p29941
S'Specifies the wrapping mode for post-processor tables that are printed to the screen (ENVIRONMENT: Read "MOOSE_PPS_WIDTH" for desired width, AUTO: Attempt to determine width automatically (serial only), <n>: Desired width\n'
p29942
sS'required'
p29943
I00
sS'options'
p29944
S'ENVIRONMENT AUTO 80 120 160'
p29945
sS'group_name'
p29946
Nsa(dp29947
S'description'
p29948
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p29949
sS'cpp_type'
p29950
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p29951
sS'default'
p29952
g3
sS'name'
p29953
S'hide'
p29954
sS'required'
p29955
I00
sS'group_name'
p29956
S'Variables'
p29957
sa(dp29958
S'description'
p29959
S'The interval at which time steps are output to the solution file\n'
p29960
sS'cpp_type'
p29961
S'unsigned int'
p29962
sS'default'
p29963
S'1'
p29964
sS'name'
p29965
S'interval'
p29966
sS'required'
p29967
I00
sS'group_name'
p29968
S'Timing'
p29969
sa(dp29970
S'description'
p29971
S'Print the libMesh performance log, requires libMesh to be configured with --enable-perflog\n'
p29972
sS'cpp_type'
p29973
S'bool'
p29974
sS'default'
p29975
S'1'
p29976
sS'name'
p29977
S'libmesh_log'
p29978
sS'required'
p29979
I00
sS'group_name'
p29980
S'Performance Log'
p29981
sa(dp29982
S'description'
p29983
S'Number of divisions applied to time step when outputting linear residuals\n'
p29984
sS'cpp_type'
p29985
S'double'
p29986
sS'default'
p29987
S'1000'
p29988
sS'name'
p29989
S'linear_residual_dt_divisor'
p29990
sS'required'
p29991
I00
sS'group_name'
p29992
S'PETSc'
p29993
sa(dp29994
S'description'
p29995
S'Specifies an end time to begin output on each linear residual evaluation\n'
p29996
sS'cpp_type'
p29997
S'double'
p29998
sS'default'
p29999
g3
sS'name'
p30000
S'linear_residual_end_time'
p30001
sS'required'
p30002
I00
sS'group_name'
p30003
S'PETSc'
p30004
sa(dp30005
S'description'
p30006
S'Specifies a start time to begin output on each linear residual evaluation\n'
p30007
sS'cpp_type'
p30008
S'double'
p30009
sS'default'
p30010
g3
sS'name'
p30011
S'linear_residual_start_time'
p30012
sS'required'
p30013
I00
sS'group_name'
p30014
S'PETSc'
p30015
sa(dp30016
S'description'
p30017
S'Specifies whether output occurs on each linear residual evaluation\n'
p30018
sS'cpp_type'
p30019
S'bool'
p30020
sS'default'
p30021
S'0'
p30022
sS'name'
p30023
S'linear_residuals'
p30024
sS'required'
p30025
I00
sS'group_name'
p30026
S'PETSc'
p30027
sa(dp30028
S'description'
p30029
S'The maximum number of postprocessor/scalar values displayed on screen during a timestep (set to 0 for unlimited)\n'
p30030
sS'cpp_type'
p30031
S'unsigned int'
p30032
sS'default'
p30033
S'15'
p30034
sS'name'
p30035
S'max_rows'
p30036
sS'required'
p30037
I00
sS'group_name'
p30038
S'Advanced'
p30039
sa(dp30040
S'description'
p30041
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p30042
sS'cpp_type'
p30043
S'double'
p30044
sS'default'
p30045
S'1000'
p30046
sS'name'
p30047
S'nonlinear_residual_dt_divisor'
p30048
sS'required'
p30049
I00
sS'group_name'
p30050
S'PETSc'
p30051
sa(dp30052
S'description'
p30053
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p30054
sS'cpp_type'
p30055
S'double'
p30056
sS'default'
p30057
g3
sS'name'
p30058
S'nonlinear_residual_end_time'
p30059
sS'required'
p30060
I00
sS'group_name'
p30061
S'PETSc'
p30062
sa(dp30063
S'description'
p30064
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p30065
sS'cpp_type'
p30066
S'double'
p30067
sS'default'
p30068
g3
sS'name'
p30069
S'nonlinear_residual_start_time'
p30070
sS'required'
p30071
I00
sS'group_name'
p30072
S'PETSc'
p30073
sa(dp30074
S'description'
p30075
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p30076
sS'cpp_type'
p30077
S'bool'
p30078
sS'default'
p30079
S'0'
p30080
sS'name'
p30081
S'nonlinear_residuals'
p30082
sS'required'
p30083
I00
sS'group_name'
p30084
S'PETSc'
p30085
sa(dp30086
S'description'
p30087
S'Multiplier utilized to determine if a residual norm is an outlier. If the variable residual is less than multiplier[0] times the total residual it is colored red. If the variable residual is less than multiplier[1] times the average residual it is colored yellow.\n'
p30088
sS'cpp_type'
p30089
S'std::__1::vector<double, std::__1::allocator<double> >'
p30090
sS'default'
p30091
S'0.8 2'
p30092
sS'name'
p30093
S'outlier_multiplier'
p30094
sS'required'
p30095
I00
sS'group_name'
p30096
S'Norms'
p30097
sa(dp30098
S'description'
p30099
S'If true, outlier variable norms will be printed after each solve\n'
p30100
sS'cpp_type'
p30101
S'bool'
p30102
sS'default'
p30103
S'1'
p30104
sS'name'
p30105
S'outlier_variable_norms'
p30106
sS'required'
p30107
I00
sS'group_name'
p30108
S'Norms'
p30109
sa(dp30110
S'description'
p30111
S'Output to the file\n'
p30112
sS'cpp_type'
p30113
S'bool'
p30114
sS'default'
p30115
S'0'
p30116
sS'name'
p30117
S'output_file'
p30118
sS'required'
p30119
I00
sS'group_name'
p30120
Nsa(dp30121
S'description'
p30122
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p30123
sS'cpp_type'
p30124
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p30125
sS'default'
p30126
g3
sS'name'
p30127
S'output_if_base_contains'
p30128
sS'required'
p30129
I00
sS'group_name'
p30130
S'Advanced'
p30131
sa(dp30132
S'description'
p30133
S'Specifies whether output occurs on each linear residual evaluation\n'
p30134
sS'cpp_type'
p30135
S'bool'
p30136
sS'default'
p30137
S'0'
p30138
sS'name'
p30139
S'output_linear'
p30140
sS'required'
p30141
I00
sS'group_name'
p30142
Nsa(dp30143
S'description'
p30144
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p30145
sS'cpp_type'
p30146
S'bool'
p30147
sS'default'
p30148
S'0'
p30149
sS'name'
p30150
S'output_nonlinear'
p30151
sS'required'
p30152
I00
sS'group_name'
p30153
Nsa(dp30154
S'description'
p30155
S'Enable/disable the output of postprocessors\n'
p30156
sS'cpp_type'
p30157
S'bool'
p30158
sS'default'
p30159
S'1'
p30160
sS'name'
p30161
S'output_postprocessors'
p30162
sS'required'
p30163
I00
sS'group_name'
p30164
Nsa(dp30165
S'description'
p30166
S'Output to the screen\n'
p30167
sS'cpp_type'
p30168
S'bool'
p30169
sS'default'
p30170
S'1'
p30171
sS'name'
p30172
S'output_screen'
p30173
sS'required'
p30174
I00
sS'group_name'
p30175
Nsa(dp30176
S'description'
p30177
S'The number of for extension suffix (e.g., out.e-s002)\n'
p30178
sS'cpp_type'
p30179
S'unsigned int'
p30180
sS'default'
p30181
S'4'
p30182
sS'name'
p30183
S'padding'
p30184
sS'required'
p30185
I00
sS'group_name'
p30186
S'Advanced'
p30187
sa(dp30188
S'description'
p30189
S"Print the libMesh performance log header (requires that 'perf_log = true')\n"
p30190
sS'cpp_type'
p30191
S'bool'
p30192
sS'default'
p30193
g3
sS'name'
p30194
S'perf_header'
p30195
sS'required'
p30196
I00
sS'group_name'
p30197
S'Perf Log'
p30198
sa(dp30199
S'description'
p30200
S'If true, all performance logs will be printed. The individual log settings will override this option.\n'
p30201
sS'cpp_type'
p30202
S'bool'
p30203
sS'default'
p30204
S'0'
p30205
sS'name'
p30206
S'perf_log'
p30207
sS'required'
p30208
I00
sS'group_name'
p30209
S'Perf Log'
p30210
sa(dp30211
S'description'
p30212
S'If set, the performance log will be printed every n time steps\n'
p30213
sS'cpp_type'
p30214
S'unsigned int'
p30215
sS'default'
p30216
S'0'
p30217
sS'name'
p30218
S'perf_log_interval'
p30219
sS'required'
p30220
I00
sS'group_name'
p30221
Nsa(dp30222
S'description'
p30223
S'When true, each time the mesh is changed the mesh information is printed\n'
p30224
sS'cpp_type'
p30225
S'bool'
p30226
sS'default'
p30227
S'0'
p30228
sS'name'
p30229
S'print_mesh_changed_info'
p30230
sS'required'
p30231
I00
sS'group_name'
p30232
Nsa(dp30233
S'description'
p30234
S'Control the printing of time and dt in scientific notation\n'
p30235
sS'cpp_type'
p30236
S'bool'
p30237
sS'default'
p30238
S'0'
p30239
sS'name'
p30240
S'scientific_time'
p30241
sS'required'
p30242
I00
sS'group_name'
p30243
Nsa(dp30244
S'description'
p30245
S"Toggles the printing of the 'Setup Performance' log\n"
p30246
sS'cpp_type'
p30247
S'bool'
p30248
sS'default'
p30249
g3
sS'name'
p30250
S'setup_log'
p30251
sS'required'
p30252
I00
sS'group_name'
p30253
S'Perf Log'
p30254
sa(dp30255
S'description'
p30256
S'Specifies whether or not the Setup Performance log should be printed before the first time step.  It will still be printed at the end if perf_log is also enabled and likewise disabled if perf_log is false\n'
p30257
sS'cpp_type'
p30258
S'bool'
p30259
sS'default'
p30260
S'0'
p30261
sS'name'
p30262
S'setup_log_early'
p30263
sS'required'
p30264
I00
sS'group_name'
p30265
S'Perf Log'
p30266
sa(dp30267
S'description'
p30268
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p30269
sS'cpp_type'
p30270
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p30271
sS'default'
p30272
g3
sS'name'
p30273
S'show'
p30274
sS'required'
p30275
I00
sS'group_name'
p30276
S'Variables'
p30277
sa(dp30278
S'description'
p30279
S'Indent multiapp output using the multiapp name\n'
p30280
sS'cpp_type'
p30281
S'bool'
p30282
sS'default'
p30283
S'0'
p30284
sS'name'
p30285
S'show_multiapp_name'
p30286
sS'required'
p30287
I00
sS'group_name'
p30288
S'Advanced'
p30289
sa(dp30290
S'description'
p30291
S"Toggles the printing of the 'Moose Test Performance' log\n"
p30292
sS'cpp_type'
p30293
S'bool'
p30294
sS'default'
p30295
g3
sS'name'
p30296
S'solve_log'
p30297
sS'required'
p30298
I00
sS'group_name'
p30299
S'Perf Log'
p30300
sa(dp30301
S'description'
p30302
S'Time at which this output object begins to operate\n'
p30303
sS'cpp_type'
p30304
S'double'
p30305
sS'default'
p30306
g3
sS'name'
p30307
S'start_time'
p30308
sS'required'
p30309
I00
sS'group_name'
p30310
S'Timing'
p30311
sa(dp30312
S'description'
p30313
S'Only export results at sync times\n'
p30314
sS'cpp_type'
p30315
S'bool'
p30316
sS'default'
p30317
S'0'
p30318
sS'name'
p30319
S'sync_only'
p30320
sS'required'
p30321
I00
sS'group_name'
p30322
S'Timing'
p30323
sa(dp30324
S'description'
p30325
S'Times at which the output and solution is forced to occur\n'
p30326
sS'cpp_type'
p30327
S'std::__1::vector<double, std::__1::allocator<double> >'
p30328
sS'default'
p30329
g3
sS'name'
p30330
S'sync_times'
p30331
sS'required'
p30332
I00
sS'group_name'
p30333
S'Timing'
p30334
sa(dp30335
S'name'
p30336
S'system_info'
p30337
sS'cpp_type'
p30338
S'MultiMooseEnum'
p30339
sS'default'
p30340
S'AUX EXECUTION FRAMEWORK MESH NONLINEAR'
p30341
sS'description'
p30342
S"List of information types to display ('framework', 'mesh', 'aux', 'nonlinear', 'execution', 'output')\n"
p30343
sS'required'
p30344
I00
sS'options'
p30345
S'framework mesh aux nonlinear execution output'
p30346
sS'group_name'
p30347
S'Advanced'
p30348
sa(dp30349
S'description'
p30350
S"Whether or not the 'time' column should be written for Postprocessor CSV files\n"
p30351
sS'cpp_type'
p30352
S'bool'
p30353
sS'default'
p30354
S'1'
p30355
sS'name'
p30356
S'time_column'
p30357
sS'required'
p30358
I00
sS'group_name'
p30359
Nsa(dp30360
S'description'
p30361
S'When true and VecptorPostprocessor data exists, write a csv file containing the timestep and time information.\n'
p30362
sS'cpp_type'
p30363
S'bool'
p30364
sS'default'
p30365
S'0'
p30366
sS'name'
p30367
S'time_data'
p30368
sS'required'
p30369
I00
sS'group_name'
p30370
Nsa(dp30371
S'description'
p30372
S'The number of significant digits that are printed on time related outputs\n'
p30373
sS'cpp_type'
p30374
S'unsigned int'
p30375
sS'default'
p30376
g3
sS'name'
p30377
S'time_precision'
p30378
sS'required'
p30379
I00
sS'group_name'
p30380
Nsa(dp30381
S'description'
p30382
S'Time tolerance utilized checking start and end times\n'
p30383
sS'cpp_type'
p30384
S'double'
p30385
sS'default'
p30386
S'1e-14'
p30387
sS'name'
p30388
S'time_tolerance'
p30389
sS'required'
p30390
I00
sS'group_name'
p30391
S'Timing'
p30392
sa(dp30393
S'description'
p30394
g3
sS'cpp_type'
p30395
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30396
sS'default'
p30397
S'Console'
p30398
sS'name'
p30399
S'type'
p30400
sS'required'
p30401
I00
sS'group_name'
p30402
Nsa(dp30403
S'description'
p30404
S'Enable/disable the use of the displaced mesh for outputting\n'
p30405
sS'cpp_type'
p30406
S'bool'
p30407
sS'default'
p30408
S'0'
p30409
sS'name'
p30410
S'use_displaced'
p30411
sS'required'
p30412
I00
sS'group_name'
p30413
Nsa(dp30414
S'description'
p30415
S'Print detailed diagnostics on timestep calculation\n'
p30416
sS'cpp_type'
p30417
S'bool'
p30418
sS'default'
p30419
S'0'
p30420
sS'name'
p30421
S'verbose'
p30422
sS'required'
p30423
I00
sS'group_name'
p30424
S'Advanced'
p30425
sasS'name'
p30426
S'/Outputs/Console'
p30427
sa(dp30428
S'description'
p30429
g3
sS'subblocks'
p30430
NsS'parameters'
p30431
(lp30432
(dp30433
S'name'
p30434
S'additional_execute_on'
p30435
sS'cpp_type'
p30436
S'MultiMooseEnum'
p30437
sS'default'
p30438
g3
sS'description'
p30439
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p30440
sS'required'
p30441
I00
sS'options'
p30442
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30443
sS'group_name'
p30444
Nsa(dp30445
S'description'
p30446
S'Clear the active control display after each output.\n'
p30447
sS'cpp_type'
p30448
S'bool'
p30449
sS'default'
p30450
S'1'
p30451
sS'name'
p30452
S'clear_after_output'
p30453
sS'required'
p30454
I00
sS'group_name'
p30455
Nsa(dp30456
S'description'
p30457
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p30458
sS'cpp_type'
p30459
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p30460
sS'default'
p30461
g3
sS'name'
p30462
S'control_tags'
p30463
sS'required'
p30464
I00
sS'group_name'
p30465
S'Advanced'
p30466
sa(dp30467
S'description'
p30468
S'Set the enabled status of the MooseObject.\n'
p30469
sS'cpp_type'
p30470
S'bool'
p30471
sS'default'
p30472
S'1'
p30473
sS'name'
p30474
S'enable'
p30475
sS'required'
p30476
I00
sS'group_name'
p30477
S'Advanced'
p30478
sa(dp30479
S'description'
p30480
S'Time at which this output object stop operating\n'
p30481
sS'cpp_type'
p30482
S'double'
p30483
sS'default'
p30484
g3
sS'name'
p30485
S'end_time'
p30486
sS'required'
p30487
I00
sS'group_name'
p30488
S'Timing'
p30489
sa(dp30490
S'name'
p30491
S'execute_on'
p30492
sS'cpp_type'
p30493
S'MultiMooseEnum'
p30494
sS'default'
p30495
S'INITIAL TIMESTEP_BEGIN'
p30496
sS'description'
p30497
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p30498
sS'required'
p30499
I00
sS'options'
p30500
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30501
sS'group_name'
p30502
Nsa(dp30503
S'description'
p30504
S'The interval at which time steps are output to the solution file\n'
p30505
sS'cpp_type'
p30506
S'unsigned int'
p30507
sS'default'
p30508
S'1'
p30509
sS'name'
p30510
S'interval'
p30511
sS'required'
p30512
I00
sS'group_name'
p30513
S'Timing'
p30514
sa(dp30515
S'description'
p30516
S'List active MooseObjects.\n'
p30517
sS'cpp_type'
p30518
S'bool'
p30519
sS'default'
p30520
S'1'
p30521
sS'name'
p30522
S'show_active_objects'
p30523
sS'required'
p30524
I00
sS'group_name'
p30525
Nsa(dp30526
S'description'
p30527
S'Time at which this output object begins to operate\n'
p30528
sS'cpp_type'
p30529
S'double'
p30530
sS'default'
p30531
g3
sS'name'
p30532
S'start_time'
p30533
sS'required'
p30534
I00
sS'group_name'
p30535
S'Timing'
p30536
sa(dp30537
S'description'
p30538
S'Only export results at sync times\n'
p30539
sS'cpp_type'
p30540
S'bool'
p30541
sS'default'
p30542
S'0'
p30543
sS'name'
p30544
S'sync_only'
p30545
sS'required'
p30546
I00
sS'group_name'
p30547
S'Timing'
p30548
sa(dp30549
S'description'
p30550
S'Times at which the output and solution is forced to occur\n'
p30551
sS'cpp_type'
p30552
S'std::__1::vector<double, std::__1::allocator<double> >'
p30553
sS'default'
p30554
g3
sS'name'
p30555
S'sync_times'
p30556
sS'required'
p30557
I00
sS'group_name'
p30558
S'Timing'
p30559
sa(dp30560
S'description'
p30561
S'Time tolerance utilized checking start and end times\n'
p30562
sS'cpp_type'
p30563
S'double'
p30564
sS'default'
p30565
S'1e-14'
p30566
sS'name'
p30567
S'time_tolerance'
p30568
sS'required'
p30569
I00
sS'group_name'
p30570
S'Timing'
p30571
sa(dp30572
S'description'
p30573
g3
sS'cpp_type'
p30574
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30575
sS'default'
p30576
S'ControlOutput'
p30577
sS'name'
p30578
S'type'
p30579
sS'required'
p30580
I00
sS'group_name'
p30581
Nsa(dp30582
S'description'
p30583
S'Enable/disable the use of the displaced mesh for outputting\n'
p30584
sS'cpp_type'
p30585
S'bool'
p30586
sS'default'
p30587
S'0'
p30588
sS'name'
p30589
S'use_displaced'
p30590
sS'required'
p30591
I00
sS'group_name'
p30592
NsasS'name'
p30593
S'/Outputs/ControlOutput'
p30594
sa(dp30595
S'description'
p30596
g3
sS'subblocks'
p30597
NsS'parameters'
p30598
(lp30599
(dp30600
S'name'
p30601
S'additional_execute_on'
p30602
sS'cpp_type'
p30603
S'MultiMooseEnum'
p30604
sS'default'
p30605
g3
sS'description'
p30606
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p30607
sS'required'
p30608
I00
sS'options'
p30609
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30610
sS'group_name'
p30611
Nsa(dp30612
S'description'
p30613
S'When true the date and time are appended to the output filename.\n'
p30614
sS'cpp_type'
p30615
S'bool'
p30616
sS'default'
p30617
S'0'
p30618
sS'name'
p30619
S'append_date'
p30620
sS'required'
p30621
I00
sS'group_name'
p30622
Nsa(dp30623
S'description'
p30624
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p30625
sS'cpp_type'
p30626
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30627
sS'default'
p30628
g3
sS'name'
p30629
S'append_date_format'
p30630
sS'required'
p30631
I00
sS'group_name'
p30632
Nsa(dp30633
S'description'
p30634
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p30635
sS'cpp_type'
p30636
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p30637
sS'default'
p30638
g3
sS'name'
p30639
S'control_tags'
p30640
sS'required'
p30641
I00
sS'group_name'
p30642
S'Advanced'
p30643
sa(dp30644
S'description'
p30645
S'Set the enabled status of the MooseObject.\n'
p30646
sS'cpp_type'
p30647
S'bool'
p30648
sS'default'
p30649
S'1'
p30650
sS'name'
p30651
S'enable'
p30652
sS'required'
p30653
I00
sS'group_name'
p30654
S'Advanced'
p30655
sa(dp30656
S'description'
p30657
S'Time at which this output object stop operating\n'
p30658
sS'cpp_type'
p30659
S'double'
p30660
sS'default'
p30661
g3
sS'name'
p30662
S'end_time'
p30663
sS'required'
p30664
I00
sS'group_name'
p30665
S'Timing'
p30666
sa(dp30667
S'name'
p30668
S'execute_on'
p30669
sS'cpp_type'
p30670
S'MultiMooseEnum'
p30671
sS'default'
p30672
S'INITIAL'
p30673
sS'description'
p30674
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p30675
sS'required'
p30676
I00
sS'options'
p30677
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30678
sS'group_name'
p30679
Nsa(dp30680
S'description'
p30681
S'The desired solution output name without an extension\n'
p30682
sS'cpp_type'
p30683
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30684
sS'default'
p30685
g3
sS'name'
p30686
S'file_base'
p30687
sS'required'
p30688
I00
sS'group_name'
p30689
Nsa(dp30690
S'description'
p30691
S'The interval at which time steps are output to the solution file\n'
p30692
sS'cpp_type'
p30693
S'unsigned int'
p30694
sS'default'
p30695
S'1'
p30696
sS'name'
p30697
S'interval'
p30698
sS'required'
p30699
I00
sS'group_name'
p30700
S'Timing'
p30701
sa(dp30702
S'description'
p30703
S'Number of divisions applied to time step when outputting linear residuals\n'
p30704
sS'cpp_type'
p30705
S'double'
p30706
sS'default'
p30707
S'1000'
p30708
sS'name'
p30709
S'linear_residual_dt_divisor'
p30710
sS'required'
p30711
I00
sS'group_name'
p30712
S'PETSc'
p30713
sa(dp30714
S'description'
p30715
S'Specifies an end time to begin output on each linear residual evaluation\n'
p30716
sS'cpp_type'
p30717
S'double'
p30718
sS'default'
p30719
g3
sS'name'
p30720
S'linear_residual_end_time'
p30721
sS'required'
p30722
I00
sS'group_name'
p30723
S'PETSc'
p30724
sa(dp30725
S'description'
p30726
S'Specifies a start time to begin output on each linear residual evaluation\n'
p30727
sS'cpp_type'
p30728
S'double'
p30729
sS'default'
p30730
g3
sS'name'
p30731
S'linear_residual_start_time'
p30732
sS'required'
p30733
I00
sS'group_name'
p30734
S'PETSc'
p30735
sa(dp30736
S'description'
p30737
S'Specifies whether output occurs on each linear residual evaluation\n'
p30738
sS'cpp_type'
p30739
S'bool'
p30740
sS'default'
p30741
S'0'
p30742
sS'name'
p30743
S'linear_residuals'
p30744
sS'required'
p30745
I00
sS'group_name'
p30746
S'PETSc'
p30747
sa(dp30748
S'description'
p30749
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p30750
sS'cpp_type'
p30751
S'double'
p30752
sS'default'
p30753
S'1000'
p30754
sS'name'
p30755
S'nonlinear_residual_dt_divisor'
p30756
sS'required'
p30757
I00
sS'group_name'
p30758
S'PETSc'
p30759
sa(dp30760
S'description'
p30761
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p30762
sS'cpp_type'
p30763
S'double'
p30764
sS'default'
p30765
g3
sS'name'
p30766
S'nonlinear_residual_end_time'
p30767
sS'required'
p30768
I00
sS'group_name'
p30769
S'PETSc'
p30770
sa(dp30771
S'description'
p30772
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p30773
sS'cpp_type'
p30774
S'double'
p30775
sS'default'
p30776
g3
sS'name'
p30777
S'nonlinear_residual_start_time'
p30778
sS'required'
p30779
I00
sS'group_name'
p30780
S'PETSc'
p30781
sa(dp30782
S'description'
p30783
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p30784
sS'cpp_type'
p30785
S'bool'
p30786
sS'default'
p30787
S'0'
p30788
sS'name'
p30789
S'nonlinear_residuals'
p30790
sS'required'
p30791
I00
sS'group_name'
p30792
S'PETSc'
p30793
sa(dp30794
S'description'
p30795
S'Output to the file\n'
p30796
sS'cpp_type'
p30797
S'bool'
p30798
sS'default'
p30799
S'1'
p30800
sS'name'
p30801
S'output_file'
p30802
sS'required'
p30803
I00
sS'group_name'
p30804
Nsa(dp30805
S'description'
p30806
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p30807
sS'cpp_type'
p30808
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p30809
sS'default'
p30810
g3
sS'name'
p30811
S'output_if_base_contains'
p30812
sS'required'
p30813
I00
sS'group_name'
p30814
S'Advanced'
p30815
sa(dp30816
S'description'
p30817
S'Specifies whether output occurs on each linear residual evaluation\n'
p30818
sS'cpp_type'
p30819
S'bool'
p30820
sS'default'
p30821
S'0'
p30822
sS'name'
p30823
S'output_linear'
p30824
sS'required'
p30825
I00
sS'group_name'
p30826
Nsa(dp30827
S'description'
p30828
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p30829
sS'cpp_type'
p30830
S'bool'
p30831
sS'default'
p30832
S'0'
p30833
sS'name'
p30834
S'output_nonlinear'
p30835
sS'required'
p30836
I00
sS'group_name'
p30837
Nsa(dp30838
S'description'
p30839
S'Output to the screen\n'
p30840
sS'cpp_type'
p30841
S'bool'
p30842
sS'default'
p30843
S'0'
p30844
sS'name'
p30845
S'output_screen'
p30846
sS'required'
p30847
I00
sS'group_name'
p30848
Nsa(dp30849
S'description'
p30850
S'The number of for extension suffix (e.g., out.e-s002)\n'
p30851
sS'cpp_type'
p30852
S'unsigned int'
p30853
sS'default'
p30854
S'4'
p30855
sS'name'
p30856
S'padding'
p30857
sS'required'
p30858
I00
sS'group_name'
p30859
S'Advanced'
p30860
sa(dp30861
S'description'
p30862
S'Time at which this output object begins to operate\n'
p30863
sS'cpp_type'
p30864
S'double'
p30865
sS'default'
p30866
g3
sS'name'
p30867
S'start_time'
p30868
sS'required'
p30869
I00
sS'group_name'
p30870
S'Timing'
p30871
sa(dp30872
S'description'
p30873
S'Only export results at sync times\n'
p30874
sS'cpp_type'
p30875
S'bool'
p30876
sS'default'
p30877
S'0'
p30878
sS'name'
p30879
S'sync_only'
p30880
sS'required'
p30881
I00
sS'group_name'
p30882
S'Timing'
p30883
sa(dp30884
S'description'
p30885
S'Times at which the output and solution is forced to occur\n'
p30886
sS'cpp_type'
p30887
S'std::__1::vector<double, std::__1::allocator<double> >'
p30888
sS'default'
p30889
g3
sS'name'
p30890
S'sync_times'
p30891
sS'required'
p30892
I00
sS'group_name'
p30893
S'Timing'
p30894
sa(dp30895
S'description'
p30896
S'System to output\n'
p30897
sS'cpp_type'
p30898
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30899
sS'default'
p30900
S'nl0'
p30901
sS'name'
p30902
S'system_name'
p30903
sS'required'
p30904
I00
sS'group_name'
p30905
Nsa(dp30906
S'description'
p30907
S'Time tolerance utilized checking start and end times\n'
p30908
sS'cpp_type'
p30909
S'double'
p30910
sS'default'
p30911
S'1e-14'
p30912
sS'name'
p30913
S'time_tolerance'
p30914
sS'required'
p30915
I00
sS'group_name'
p30916
S'Timing'
p30917
sa(dp30918
S'description'
p30919
g3
sS'cpp_type'
p30920
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30921
sS'default'
p30922
S'DOFMap'
p30923
sS'name'
p30924
S'type'
p30925
sS'required'
p30926
I00
sS'group_name'
p30927
Nsa(dp30928
S'description'
p30929
S'Enable/disable the use of the displaced mesh for outputting\n'
p30930
sS'cpp_type'
p30931
S'bool'
p30932
sS'default'
p30933
S'0'
p30934
sS'name'
p30935
S'use_displaced'
p30936
sS'required'
p30937
I00
sS'group_name'
p30938
NsasS'name'
p30939
S'/Outputs/DOFMap'
p30940
sa(dp30941
S'description'
p30942
S'Object for output data in the Exodus II format\n'
p30943
sS'subblocks'
p30944
NsS'parameters'
p30945
(lp30946
(dp30947
S'name'
p30948
S'additional_execute_on'
p30949
sS'cpp_type'
p30950
S'MultiMooseEnum'
p30951
sS'default'
p30952
g3
sS'description'
p30953
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p30954
sS'required'
p30955
I00
sS'options'
p30956
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30957
sS'group_name'
p30958
Nsa(dp30959
S'description'
p30960
S'When true the date and time are appended to the output filename.\n'
p30961
sS'cpp_type'
p30962
S'bool'
p30963
sS'default'
p30964
S'0'
p30965
sS'name'
p30966
S'append_date'
p30967
sS'required'
p30968
I00
sS'group_name'
p30969
Nsa(dp30970
S'description'
p30971
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p30972
sS'cpp_type'
p30973
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30974
sS'default'
p30975
g3
sS'name'
p30976
S'append_date_format'
p30977
sS'required'
p30978
I00
sS'group_name'
p30979
Nsa(dp30980
S'description'
p30981
S"Append '_oversample' to the output file base\n"
p30982
sS'cpp_type'
p30983
S'bool'
p30984
sS'default'
p30985
S'0'
p30986
sS'name'
p30987
S'append_oversample'
p30988
sS'required'
p30989
I00
sS'group_name'
p30990
Nsa(dp30991
S'description'
p30992
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p30993
sS'cpp_type'
p30994
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p30995
sS'default'
p30996
g3
sS'name'
p30997
S'control_tags'
p30998
sS'required'
p30999
I00
sS'group_name'
p31000
S'Advanced'
p31001
sa(dp31002
S'description'
p31003
S'Output elemental nonlinear variables as nodal\n'
p31004
sS'cpp_type'
p31005
S'bool'
p31006
sS'default'
p31007
S'0'
p31008
sS'name'
p31009
S'elemental_as_nodal'
p31010
sS'required'
p31011
I00
sS'group_name'
p31012
S'Variables'
p31013
sa(dp31014
S'description'
p31015
S'Set the enabled status of the MooseObject.\n'
p31016
sS'cpp_type'
p31017
S'bool'
p31018
sS'default'
p31019
S'1'
p31020
sS'name'
p31021
S'enable'
p31022
sS'required'
p31023
I00
sS'group_name'
p31024
S'Advanced'
p31025
sa(dp31026
S'description'
p31027
S'Time at which this output object stop operating\n'
p31028
sS'cpp_type'
p31029
S'double'
p31030
sS'default'
p31031
g3
sS'name'
p31032
S'end_time'
p31033
sS'required'
p31034
I00
sS'group_name'
p31035
S'Timing'
p31036
sa(dp31037
S'name'
p31038
S'execute_elemental_on'
p31039
sS'cpp_type'
p31040
S'MultiMooseEnum'
p31041
sS'default'
p31042
g3
sS'description'
p31043
S'Control the output of elemental variables\n'
p31044
sS'required'
p31045
I00
sS'options'
p31046
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31047
sS'group_name'
p31048
S'Variables'
p31049
sa(dp31050
S'description'
p31051
S'Enable/disable the output of elemental variables\n'
p31052
sS'cpp_type'
p31053
S'bool'
p31054
sS'default'
p31055
S'1'
p31056
sS'name'
p31057
S'execute_elemental_variables'
p31058
sS'required'
p31059
I00
sS'group_name'
p31060
Nsa(dp31061
S'description'
p31062
S'Enable/disable the output of input file information\n'
p31063
sS'cpp_type'
p31064
S'bool'
p31065
sS'default'
p31066
S'1'
p31067
sS'name'
p31068
S'execute_input'
p31069
sS'required'
p31070
I00
sS'group_name'
p31071
Nsa(dp31072
S'name'
p31073
S'execute_input_on'
p31074
sS'cpp_type'
p31075
S'MultiMooseEnum'
p31076
sS'default'
p31077
S'INITIAL'
p31078
sS'description'
p31079
S'Enable/disable the output of the input file\n'
p31080
sS'required'
p31081
I00
sS'options'
p31082
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31083
sS'group_name'
p31084
S'Variables'
p31085
sa(dp31086
S'name'
p31087
S'execute_nodal_on'
p31088
sS'cpp_type'
p31089
S'MultiMooseEnum'
p31090
sS'default'
p31091
g3
sS'description'
p31092
S'Control the output of nodal variables\n'
p31093
sS'required'
p31094
I00
sS'options'
p31095
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31096
sS'group_name'
p31097
S'Variables'
p31098
sa(dp31099
S'description'
p31100
S'Enable/disable the output of nodal variables\n'
p31101
sS'cpp_type'
p31102
S'bool'
p31103
sS'default'
p31104
S'1'
p31105
sS'name'
p31106
S'execute_nodal_variables'
p31107
sS'required'
p31108
I00
sS'group_name'
p31109
Nsa(dp31110
S'name'
p31111
S'execute_on'
p31112
sS'cpp_type'
p31113
S'MultiMooseEnum'
p31114
sS'default'
p31115
S'INITIAL TIMESTEP_END'
p31116
sS'description'
p31117
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p31118
sS'required'
p31119
I00
sS'options'
p31120
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31121
sS'group_name'
p31122
Nsa(dp31123
S'name'
p31124
S'execute_postprocessors_on'
p31125
sS'cpp_type'
p31126
S'MultiMooseEnum'
p31127
sS'default'
p31128
g3
sS'description'
p31129
S'Control of when postprocessors are output\n'
p31130
sS'required'
p31131
I00
sS'options'
p31132
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31133
sS'group_name'
p31134
S'Variables'
p31135
sa(dp31136
S'description'
p31137
S'Enable/disable the output of aux scalar variables\n'
p31138
sS'cpp_type'
p31139
S'bool'
p31140
sS'default'
p31141
S'1'
p31142
sS'name'
p31143
S'execute_scalar_variables'
p31144
sS'required'
p31145
I00
sS'group_name'
p31146
Nsa(dp31147
S'name'
p31148
S'execute_scalars_on'
p31149
sS'cpp_type'
p31150
S'MultiMooseEnum'
p31151
sS'default'
p31152
g3
sS'description'
p31153
S'Control the output of scalar variables\n'
p31154
sS'required'
p31155
I00
sS'options'
p31156
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31157
sS'group_name'
p31158
S'Variables'
p31159
sa(dp31160
S'description'
p31161
S'Enable/disable the output of the simulation information\n'
p31162
sS'cpp_type'
p31163
S'bool'
p31164
sS'default'
p31165
S'1'
p31166
sS'name'
p31167
S'execute_system_information'
p31168
sS'required'
p31169
I00
sS'group_name'
p31170
Nsa(dp31171
S'description'
p31172
S'Enable/disable the output of vector postprocessors\n'
p31173
sS'cpp_type'
p31174
S'bool'
p31175
sS'default'
p31176
S'1'
p31177
sS'name'
p31178
S'execute_vector_postprocessors'
p31179
sS'required'
p31180
I00
sS'group_name'
p31181
Nsa(dp31182
S'description'
p31183
S'The name of the mesh file to read, for oversampling\n'
p31184
sS'cpp_type'
p31185
S'MeshFileName'
p31186
sS'default'
p31187
g3
sS'name'
p31188
S'file'
p31189
sS'required'
p31190
I00
sS'group_name'
p31191
S'Oversampling'
p31192
sa(dp31193
S'description'
p31194
S'The desired solution output name without an extension\n'
p31195
sS'cpp_type'
p31196
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31197
sS'default'
p31198
g3
sS'name'
p31199
S'file_base'
p31200
sS'required'
p31201
I00
sS'group_name'
p31202
Nsa(dp31203
S'description'
p31204
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p31205
sS'cpp_type'
p31206
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p31207
sS'default'
p31208
g3
sS'name'
p31209
S'hide'
p31210
sS'required'
p31211
I00
sS'group_name'
p31212
S'Variables'
p31213
sa(dp31214
S'description'
p31215
S'The interval at which time steps are output to the solution file\n'
p31216
sS'cpp_type'
p31217
S'unsigned int'
p31218
sS'default'
p31219
S'1'
p31220
sS'name'
p31221
S'interval'
p31222
sS'required'
p31223
I00
sS'group_name'
p31224
S'Timing'
p31225
sa(dp31226
S'description'
p31227
S'Number of divisions applied to time step when outputting linear residuals\n'
p31228
sS'cpp_type'
p31229
S'double'
p31230
sS'default'
p31231
S'1000'
p31232
sS'name'
p31233
S'linear_residual_dt_divisor'
p31234
sS'required'
p31235
I00
sS'group_name'
p31236
S'PETSc'
p31237
sa(dp31238
S'description'
p31239
S'Specifies an end time to begin output on each linear residual evaluation\n'
p31240
sS'cpp_type'
p31241
S'double'
p31242
sS'default'
p31243
g3
sS'name'
p31244
S'linear_residual_end_time'
p31245
sS'required'
p31246
I00
sS'group_name'
p31247
S'PETSc'
p31248
sa(dp31249
S'description'
p31250
S'Specifies a start time to begin output on each linear residual evaluation\n'
p31251
sS'cpp_type'
p31252
S'double'
p31253
sS'default'
p31254
g3
sS'name'
p31255
S'linear_residual_start_time'
p31256
sS'required'
p31257
I00
sS'group_name'
p31258
S'PETSc'
p31259
sa(dp31260
S'description'
p31261
S'Specifies whether output occurs on each linear residual evaluation\n'
p31262
sS'cpp_type'
p31263
S'bool'
p31264
sS'default'
p31265
S'0'
p31266
sS'name'
p31267
S'linear_residuals'
p31268
sS'required'
p31269
I00
sS'group_name'
p31270
S'PETSc'
p31271
sa(dp31272
S'description'
p31273
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p31274
sS'cpp_type'
p31275
S'double'
p31276
sS'default'
p31277
S'1000'
p31278
sS'name'
p31279
S'nonlinear_residual_dt_divisor'
p31280
sS'required'
p31281
I00
sS'group_name'
p31282
S'PETSc'
p31283
sa(dp31284
S'description'
p31285
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p31286
sS'cpp_type'
p31287
S'double'
p31288
sS'default'
p31289
g3
sS'name'
p31290
S'nonlinear_residual_end_time'
p31291
sS'required'
p31292
I00
sS'group_name'
p31293
S'PETSc'
p31294
sa(dp31295
S'description'
p31296
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p31297
sS'cpp_type'
p31298
S'double'
p31299
sS'default'
p31300
g3
sS'name'
p31301
S'nonlinear_residual_start_time'
p31302
sS'required'
p31303
I00
sS'group_name'
p31304
S'PETSc'
p31305
sa(dp31306
S'description'
p31307
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p31308
sS'cpp_type'
p31309
S'bool'
p31310
sS'default'
p31311
S'0'
p31312
sS'name'
p31313
S'nonlinear_residuals'
p31314
sS'required'
p31315
I00
sS'group_name'
p31316
S'PETSc'
p31317
sa(dp31318
S'description'
p31319
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p31320
sS'cpp_type'
p31321
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p31322
sS'default'
p31323
g3
sS'name'
p31324
S'output_if_base_contains'
p31325
sS'required'
p31326
I00
sS'group_name'
p31327
S'Advanced'
p31328
sa(dp31329
S'description'
p31330
S'Specifies whether output occurs on each linear residual evaluation\n'
p31331
sS'cpp_type'
p31332
S'bool'
p31333
sS'default'
p31334
S'0'
p31335
sS'name'
p31336
S'output_linear'
p31337
sS'required'
p31338
I00
sS'group_name'
p31339
Nsa(dp31340
S'description'
p31341
S'Flag indicating if material properties should be output\n'
p31342
sS'cpp_type'
p31343
S'bool'
p31344
sS'default'
p31345
S'0'
p31346
sS'name'
p31347
S'output_material_properties'
p31348
sS'required'
p31349
I00
sS'group_name'
p31350
S'Materials'
p31351
sa(dp31352
S'description'
p31353
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p31354
sS'cpp_type'
p31355
S'bool'
p31356
sS'default'
p31357
S'0'
p31358
sS'name'
p31359
S'output_nonlinear'
p31360
sS'required'
p31361
I00
sS'group_name'
p31362
Nsa(dp31363
S'description'
p31364
S'Enable/disable the output of postprocessors\n'
p31365
sS'cpp_type'
p31366
S'bool'
p31367
sS'default'
p31368
S'1'
p31369
sS'name'
p31370
S'output_postprocessors'
p31371
sS'required'
p31372
I00
sS'group_name'
p31373
Nsa(dp31374
S'description'
p31375
S'Set to true to enable oversampling\n'
p31376
sS'cpp_type'
p31377
S'bool'
p31378
sS'default'
p31379
S'0'
p31380
sS'name'
p31381
S'oversample'
p31382
sS'required'
p31383
I00
sS'group_name'
p31384
Nsa(dp31385
S'description'
p31386
S'When true the latest timestep will overwrite the existing file, so only a single timestep exists.\n'
p31387
sS'cpp_type'
p31388
S'bool'
p31389
sS'default'
p31390
S'0'
p31391
sS'name'
p31392
S'overwrite'
p31393
sS'required'
p31394
I00
sS'group_name'
p31395
Nsa(dp31396
S'description'
p31397
S'The number of for extension suffix (e.g., out.e-s002)\n'
p31398
sS'cpp_type'
p31399
S'unsigned int'
p31400
sS'default'
p31401
S'3'
p31402
sS'name'
p31403
S'padding'
p31404
sS'required'
p31405
I00
sS'group_name'
p31406
S'Advanced'
p31407
sa(dp31408
S'description'
p31409
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p31410
sS'cpp_type'
p31411
S'libMesh::Point'
p31412
sS'default'
p31413
g3
sS'name'
p31414
S'position'
p31415
sS'required'
p31416
I00
sS'group_name'
p31417
S'Oversampling'
p31418
sa(dp31419
S'description'
p31420
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p31421
sS'cpp_type'
p31422
S'unsigned int'
p31423
sS'default'
p31424
S'0'
p31425
sS'name'
p31426
S'refinements'
p31427
sS'required'
p31428
I00
sS'group_name'
p31429
S'Oversampling'
p31430
sa(dp31431
S'description'
p31432
S'Output scalar variables as nodal\n'
p31433
sS'cpp_type'
p31434
S'bool'
p31435
sS'default'
p31436
S'0'
p31437
sS'name'
p31438
S'scalar_as_nodal'
p31439
sS'required'
p31440
I00
sS'group_name'
p31441
S'Variables'
p31442
sa(dp31443
S'description'
p31444
S"Enable/disable sequential file output (enabled by default when 'use_displace = true', otherwise defaults to false\n"
p31445
sS'cpp_type'
p31446
S'bool'
p31447
sS'default'
p31448
g3
sS'name'
p31449
S'sequence'
p31450
sS'required'
p31451
I00
sS'group_name'
p31452
Nsa(dp31453
S'description'
p31454
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p31455
sS'cpp_type'
p31456
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p31457
sS'default'
p31458
g3
sS'name'
p31459
S'show'
p31460
sS'required'
p31461
I00
sS'group_name'
p31462
S'Variables'
p31463
sa(dp31464
S'description'
p31465
S'List of materialproperties that should be written to the output\n'
p31466
sS'cpp_type'
p31467
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p31468
sS'default'
p31469
g3
sS'name'
p31470
S'show_material_properties'
p31471
sS'required'
p31472
I00
sS'group_name'
p31473
S'Materials'
p31474
sa(dp31475
S'description'
p31476
S'Time at which this output object begins to operate\n'
p31477
sS'cpp_type'
p31478
S'double'
p31479
sS'default'
p31480
g3
sS'name'
p31481
S'start_time'
p31482
sS'required'
p31483
I00
sS'group_name'
p31484
S'Timing'
p31485
sa(dp31486
S'description'
p31487
S'Only export results at sync times\n'
p31488
sS'cpp_type'
p31489
S'bool'
p31490
sS'default'
p31491
S'0'
p31492
sS'name'
p31493
S'sync_only'
p31494
sS'required'
p31495
I00
sS'group_name'
p31496
S'Timing'
p31497
sa(dp31498
S'description'
p31499
S'Times at which the output and solution is forced to occur\n'
p31500
sS'cpp_type'
p31501
S'std::__1::vector<double, std::__1::allocator<double> >'
p31502
sS'default'
p31503
g3
sS'name'
p31504
S'sync_times'
p31505
sS'required'
p31506
I00
sS'group_name'
p31507
S'Timing'
p31508
sa(dp31509
S'description'
p31510
S'Time tolerance utilized checking start and end times\n'
p31511
sS'cpp_type'
p31512
S'double'
p31513
sS'default'
p31514
S'1e-14'
p31515
sS'name'
p31516
S'time_tolerance'
p31517
sS'required'
p31518
I00
sS'group_name'
p31519
S'Timing'
p31520
sa(dp31521
S'description'
p31522
g3
sS'cpp_type'
p31523
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31524
sS'default'
p31525
S'Exodus'
p31526
sS'name'
p31527
S'type'
p31528
sS'required'
p31529
I00
sS'group_name'
p31530
Nsa(dp31531
S'description'
p31532
S'Enable/disable the use of the displaced mesh for outputting\n'
p31533
sS'cpp_type'
p31534
S'bool'
p31535
sS'default'
p31536
S'0'
p31537
sS'name'
p31538
S'use_displaced'
p31539
sS'required'
p31540
I00
sS'group_name'
p31541
Nsa(dp31542
S'description'
p31543
S'Use the problem dimension to the mesh output. Set to false when outputting lower dimensional meshes embedded in a higher dimensional space.\n'
p31544
sS'cpp_type'
p31545
S'bool'
p31546
sS'default'
p31547
g3
sS'name'
p31548
S'use_problem_dimension'
p31549
sS'required'
p31550
I00
sS'group_name'
p31551
NsasS'name'
p31552
S'/Outputs/Exodus'
p31553
sa(dp31554
S'description'
p31555
S'Object for outputting data in the GMV format\n'
p31556
sS'subblocks'
p31557
NsS'parameters'
p31558
(lp31559
(dp31560
S'name'
p31561
S'additional_execute_on'
p31562
sS'cpp_type'
p31563
S'MultiMooseEnum'
p31564
sS'default'
p31565
g3
sS'description'
p31566
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p31567
sS'required'
p31568
I00
sS'options'
p31569
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31570
sS'group_name'
p31571
Nsa(dp31572
S'description'
p31573
S'When true the date and time are appended to the output filename.\n'
p31574
sS'cpp_type'
p31575
S'bool'
p31576
sS'default'
p31577
S'0'
p31578
sS'name'
p31579
S'append_date'
p31580
sS'required'
p31581
I00
sS'group_name'
p31582
Nsa(dp31583
S'description'
p31584
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p31585
sS'cpp_type'
p31586
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31587
sS'default'
p31588
g3
sS'name'
p31589
S'append_date_format'
p31590
sS'required'
p31591
I00
sS'group_name'
p31592
Nsa(dp31593
S'description'
p31594
S"Append '_oversample' to the output file base\n"
p31595
sS'cpp_type'
p31596
S'bool'
p31597
sS'default'
p31598
S'0'
p31599
sS'name'
p31600
S'append_oversample'
p31601
sS'required'
p31602
I00
sS'group_name'
p31603
Nsa(dp31604
S'description'
p31605
S'Output the file in binary format\n'
p31606
sS'cpp_type'
p31607
S'bool'
p31608
sS'default'
p31609
S'1'
p31610
sS'name'
p31611
S'binary'
p31612
sS'required'
p31613
I00
sS'group_name'
p31614
S'Advanced'
p31615
sa(dp31616
S'description'
p31617
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31618
sS'cpp_type'
p31619
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p31620
sS'default'
p31621
g3
sS'name'
p31622
S'control_tags'
p31623
sS'required'
p31624
I00
sS'group_name'
p31625
S'Advanced'
p31626
sa(dp31627
S'description'
p31628
S'Set the enabled status of the MooseObject.\n'
p31629
sS'cpp_type'
p31630
S'bool'
p31631
sS'default'
p31632
S'1'
p31633
sS'name'
p31634
S'enable'
p31635
sS'required'
p31636
I00
sS'group_name'
p31637
S'Advanced'
p31638
sa(dp31639
S'description'
p31640
S'Time at which this output object stop operating\n'
p31641
sS'cpp_type'
p31642
S'double'
p31643
sS'default'
p31644
g3
sS'name'
p31645
S'end_time'
p31646
sS'required'
p31647
I00
sS'group_name'
p31648
S'Timing'
p31649
sa(dp31650
S'name'
p31651
S'execute_on'
p31652
sS'cpp_type'
p31653
S'MultiMooseEnum'
p31654
sS'default'
p31655
S'INITIAL TIMESTEP_END'
p31656
sS'description'
p31657
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p31658
sS'required'
p31659
I00
sS'options'
p31660
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31661
sS'group_name'
p31662
Nsa(dp31663
S'description'
p31664
S'The name of the mesh file to read, for oversampling\n'
p31665
sS'cpp_type'
p31666
S'MeshFileName'
p31667
sS'default'
p31668
g3
sS'name'
p31669
S'file'
p31670
sS'required'
p31671
I00
sS'group_name'
p31672
S'Oversampling'
p31673
sa(dp31674
S'description'
p31675
S'The desired solution output name without an extension\n'
p31676
sS'cpp_type'
p31677
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31678
sS'default'
p31679
g3
sS'name'
p31680
S'file_base'
p31681
sS'required'
p31682
I00
sS'group_name'
p31683
Nsa(dp31684
S'description'
p31685
S'The interval at which time steps are output to the solution file\n'
p31686
sS'cpp_type'
p31687
S'unsigned int'
p31688
sS'default'
p31689
S'1'
p31690
sS'name'
p31691
S'interval'
p31692
sS'required'
p31693
I00
sS'group_name'
p31694
S'Timing'
p31695
sa(dp31696
S'description'
p31697
S'Number of divisions applied to time step when outputting linear residuals\n'
p31698
sS'cpp_type'
p31699
S'double'
p31700
sS'default'
p31701
S'1000'
p31702
sS'name'
p31703
S'linear_residual_dt_divisor'
p31704
sS'required'
p31705
I00
sS'group_name'
p31706
S'PETSc'
p31707
sa(dp31708
S'description'
p31709
S'Specifies an end time to begin output on each linear residual evaluation\n'
p31710
sS'cpp_type'
p31711
S'double'
p31712
sS'default'
p31713
g3
sS'name'
p31714
S'linear_residual_end_time'
p31715
sS'required'
p31716
I00
sS'group_name'
p31717
S'PETSc'
p31718
sa(dp31719
S'description'
p31720
S'Specifies a start time to begin output on each linear residual evaluation\n'
p31721
sS'cpp_type'
p31722
S'double'
p31723
sS'default'
p31724
g3
sS'name'
p31725
S'linear_residual_start_time'
p31726
sS'required'
p31727
I00
sS'group_name'
p31728
S'PETSc'
p31729
sa(dp31730
S'description'
p31731
S'Specifies whether output occurs on each linear residual evaluation\n'
p31732
sS'cpp_type'
p31733
S'bool'
p31734
sS'default'
p31735
S'0'
p31736
sS'name'
p31737
S'linear_residuals'
p31738
sS'required'
p31739
I00
sS'group_name'
p31740
S'PETSc'
p31741
sa(dp31742
S'description'
p31743
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p31744
sS'cpp_type'
p31745
S'double'
p31746
sS'default'
p31747
S'1000'
p31748
sS'name'
p31749
S'nonlinear_residual_dt_divisor'
p31750
sS'required'
p31751
I00
sS'group_name'
p31752
S'PETSc'
p31753
sa(dp31754
S'description'
p31755
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p31756
sS'cpp_type'
p31757
S'double'
p31758
sS'default'
p31759
g3
sS'name'
p31760
S'nonlinear_residual_end_time'
p31761
sS'required'
p31762
I00
sS'group_name'
p31763
S'PETSc'
p31764
sa(dp31765
S'description'
p31766
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p31767
sS'cpp_type'
p31768
S'double'
p31769
sS'default'
p31770
g3
sS'name'
p31771
S'nonlinear_residual_start_time'
p31772
sS'required'
p31773
I00
sS'group_name'
p31774
S'PETSc'
p31775
sa(dp31776
S'description'
p31777
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p31778
sS'cpp_type'
p31779
S'bool'
p31780
sS'default'
p31781
S'0'
p31782
sS'name'
p31783
S'nonlinear_residuals'
p31784
sS'required'
p31785
I00
sS'group_name'
p31786
S'PETSc'
p31787
sa(dp31788
S'description'
p31789
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p31790
sS'cpp_type'
p31791
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p31792
sS'default'
p31793
g3
sS'name'
p31794
S'output_if_base_contains'
p31795
sS'required'
p31796
I00
sS'group_name'
p31797
S'Advanced'
p31798
sa(dp31799
S'description'
p31800
S'Specifies whether output occurs on each linear residual evaluation\n'
p31801
sS'cpp_type'
p31802
S'bool'
p31803
sS'default'
p31804
S'0'
p31805
sS'name'
p31806
S'output_linear'
p31807
sS'required'
p31808
I00
sS'group_name'
p31809
Nsa(dp31810
S'description'
p31811
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p31812
sS'cpp_type'
p31813
S'bool'
p31814
sS'default'
p31815
S'0'
p31816
sS'name'
p31817
S'output_nonlinear'
p31818
sS'required'
p31819
I00
sS'group_name'
p31820
Nsa(dp31821
S'description'
p31822
S'Set to true to enable oversampling\n'
p31823
sS'cpp_type'
p31824
S'bool'
p31825
sS'default'
p31826
S'0'
p31827
sS'name'
p31828
S'oversample'
p31829
sS'required'
p31830
I00
sS'group_name'
p31831
Nsa(dp31832
S'description'
p31833
S'The number of for extension suffix (e.g., out.e-s002)\n'
p31834
sS'cpp_type'
p31835
S'unsigned int'
p31836
sS'default'
p31837
S'4'
p31838
sS'name'
p31839
S'padding'
p31840
sS'required'
p31841
I00
sS'group_name'
p31842
S'Advanced'
p31843
sa(dp31844
S'description'
p31845
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p31846
sS'cpp_type'
p31847
S'libMesh::Point'
p31848
sS'default'
p31849
g3
sS'name'
p31850
S'position'
p31851
sS'required'
p31852
I00
sS'group_name'
p31853
S'Oversampling'
p31854
sa(dp31855
S'description'
p31856
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p31857
sS'cpp_type'
p31858
S'unsigned int'
p31859
sS'default'
p31860
S'0'
p31861
sS'name'
p31862
S'refinements'
p31863
sS'required'
p31864
I00
sS'group_name'
p31865
S'Oversampling'
p31866
sa(dp31867
S'description'
p31868
S'Time at which this output object begins to operate\n'
p31869
sS'cpp_type'
p31870
S'double'
p31871
sS'default'
p31872
g3
sS'name'
p31873
S'start_time'
p31874
sS'required'
p31875
I00
sS'group_name'
p31876
S'Timing'
p31877
sa(dp31878
S'description'
p31879
S'Only export results at sync times\n'
p31880
sS'cpp_type'
p31881
S'bool'
p31882
sS'default'
p31883
S'0'
p31884
sS'name'
p31885
S'sync_only'
p31886
sS'required'
p31887
I00
sS'group_name'
p31888
S'Timing'
p31889
sa(dp31890
S'description'
p31891
S'Times at which the output and solution is forced to occur\n'
p31892
sS'cpp_type'
p31893
S'std::__1::vector<double, std::__1::allocator<double> >'
p31894
sS'default'
p31895
g3
sS'name'
p31896
S'sync_times'
p31897
sS'required'
p31898
I00
sS'group_name'
p31899
S'Timing'
p31900
sa(dp31901
S'description'
p31902
S'Time tolerance utilized checking start and end times\n'
p31903
sS'cpp_type'
p31904
S'double'
p31905
sS'default'
p31906
S'1e-14'
p31907
sS'name'
p31908
S'time_tolerance'
p31909
sS'required'
p31910
I00
sS'group_name'
p31911
S'Timing'
p31912
sa(dp31913
S'description'
p31914
g3
sS'cpp_type'
p31915
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31916
sS'default'
p31917
S'GMV'
p31918
sS'name'
p31919
S'type'
p31920
sS'required'
p31921
I00
sS'group_name'
p31922
Nsa(dp31923
S'description'
p31924
S'Enable/disable the use of the displaced mesh for outputting\n'
p31925
sS'cpp_type'
p31926
S'bool'
p31927
sS'default'
p31928
S'0'
p31929
sS'name'
p31930
S'use_displaced'
p31931
sS'required'
p31932
I00
sS'group_name'
p31933
NsasS'name'
p31934
S'/Outputs/GMV'
p31935
sa(dp31936
S'description'
p31937
g3
sS'subblocks'
p31938
NsS'parameters'
p31939
(lp31940
(dp31941
S'name'
p31942
S'additional_execute_on'
p31943
sS'cpp_type'
p31944
S'MultiMooseEnum'
p31945
sS'default'
p31946
g3
sS'description'
p31947
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p31948
sS'required'
p31949
I00
sS'options'
p31950
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31951
sS'group_name'
p31952
Nsa(dp31953
S'description'
p31954
S'When true the date and time are appended to the output filename.\n'
p31955
sS'cpp_type'
p31956
S'bool'
p31957
sS'default'
p31958
S'0'
p31959
sS'name'
p31960
S'append_date'
p31961
sS'required'
p31962
I00
sS'group_name'
p31963
Nsa(dp31964
S'description'
p31965
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p31966
sS'cpp_type'
p31967
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31968
sS'default'
p31969
g3
sS'name'
p31970
S'append_date_format'
p31971
sS'required'
p31972
I00
sS'group_name'
p31973
Nsa(dp31974
S'description'
p31975
S'Append existing file on restart\n'
p31976
sS'cpp_type'
p31977
S'bool'
p31978
sS'default'
p31979
S'0'
p31980
sS'name'
p31981
S'append_restart'
p31982
sS'required'
p31983
I00
sS'group_name'
p31984
Nsa(dp31985
S'description'
p31986
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31987
sS'cpp_type'
p31988
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p31989
sS'default'
p31990
g3
sS'name'
p31991
S'control_tags'
p31992
sS'required'
p31993
I00
sS'group_name'
p31994
S'Advanced'
p31995
sa(dp31996
S'description'
p31997
S'Set the enabled status of the MooseObject.\n'
p31998
sS'cpp_type'
p31999
S'bool'
p32000
sS'default'
p32001
S'1'
p32002
sS'name'
p32003
S'enable'
p32004
sS'required'
p32005
I00
sS'group_name'
p32006
S'Advanced'
p32007
sa(dp32008
S'description'
p32009
S'Time at which this output object stop operating\n'
p32010
sS'cpp_type'
p32011
S'double'
p32012
sS'default'
p32013
g3
sS'name'
p32014
S'end_time'
p32015
sS'required'
p32016
I00
sS'group_name'
p32017
S'Timing'
p32018
sa(dp32019
S'description'
p32020
S'Enable/disable the output of elemental variables\n'
p32021
sS'cpp_type'
p32022
S'bool'
p32023
sS'default'
p32024
S'1'
p32025
sS'name'
p32026
S'execute_elemental_variables'
p32027
sS'required'
p32028
I00
sS'group_name'
p32029
Nsa(dp32030
S'description'
p32031
S'Enable/disable the output of input file information\n'
p32032
sS'cpp_type'
p32033
S'bool'
p32034
sS'default'
p32035
S'1'
p32036
sS'name'
p32037
S'execute_input'
p32038
sS'required'
p32039
I00
sS'group_name'
p32040
Nsa(dp32041
S'description'
p32042
S'Enable/disable the output of nodal variables\n'
p32043
sS'cpp_type'
p32044
S'bool'
p32045
sS'default'
p32046
S'1'
p32047
sS'name'
p32048
S'execute_nodal_variables'
p32049
sS'required'
p32050
I00
sS'group_name'
p32051
Nsa(dp32052
S'name'
p32053
S'execute_on'
p32054
sS'cpp_type'
p32055
S'MultiMooseEnum'
p32056
sS'default'
p32057
S'INITIAL TIMESTEP_END'
p32058
sS'description'
p32059
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p32060
sS'required'
p32061
I00
sS'options'
p32062
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32063
sS'group_name'
p32064
Nsa(dp32065
S'name'
p32066
S'execute_postprocessors_on'
p32067
sS'cpp_type'
p32068
S'MultiMooseEnum'
p32069
sS'default'
p32070
g3
sS'description'
p32071
S'Control of when postprocessors are output\n'
p32072
sS'required'
p32073
I00
sS'options'
p32074
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32075
sS'group_name'
p32076
S'Variables'
p32077
sa(dp32078
S'description'
p32079
S'Enable/disable the output of aux scalar variables\n'
p32080
sS'cpp_type'
p32081
S'bool'
p32082
sS'default'
p32083
S'1'
p32084
sS'name'
p32085
S'execute_scalar_variables'
p32086
sS'required'
p32087
I00
sS'group_name'
p32088
Nsa(dp32089
S'name'
p32090
S'execute_scalars_on'
p32091
sS'cpp_type'
p32092
S'MultiMooseEnum'
p32093
sS'default'
p32094
g3
sS'description'
p32095
S'Control the output of scalar variables\n'
p32096
sS'required'
p32097
I00
sS'options'
p32098
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32099
sS'group_name'
p32100
S'Variables'
p32101
sa(dp32102
S'description'
p32103
S'Enable/disable the output of the simulation information\n'
p32104
sS'cpp_type'
p32105
S'bool'
p32106
sS'default'
p32107
S'1'
p32108
sS'name'
p32109
S'execute_system_information'
p32110
sS'required'
p32111
I00
sS'group_name'
p32112
Nsa(dp32113
S'description'
p32114
S'Enable/disable the output of vector postprocessors\n'
p32115
sS'cpp_type'
p32116
S'bool'
p32117
sS'default'
p32118
S'1'
p32119
sS'name'
p32120
S'execute_vector_postprocessors'
p32121
sS'required'
p32122
I00
sS'group_name'
p32123
Nsa(dp32124
S'name'
p32125
S'execute_vector_postprocessors_on'
p32126
sS'cpp_type'
p32127
S'MultiMooseEnum'
p32128
sS'default'
p32129
g3
sS'description'
p32130
S'Enable/disable the output of VectorPostprocessors\n'
p32131
sS'required'
p32132
I00
sS'options'
p32133
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32134
sS'group_name'
p32135
S'Variables'
p32136
sa(dp32137
S'name'
p32138
S'extension'
p32139
sS'cpp_type'
p32140
S'MooseEnum'
p32141
sS'default'
p32142
S'png'
p32143
sS'description'
p32144
S'GNU plot file extension\n'
p32145
sS'required'
p32146
I00
sS'options'
p32147
S'png ps gif'
p32148
sS'group_name'
p32149
Nsa(dp32150
S'description'
p32151
S'The desired solution output name without an extension\n'
p32152
sS'cpp_type'
p32153
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32154
sS'default'
p32155
g3
sS'name'
p32156
S'file_base'
p32157
sS'required'
p32158
I00
sS'group_name'
p32159
Nsa(dp32160
S'description'
p32161
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p32162
sS'cpp_type'
p32163
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p32164
sS'default'
p32165
g3
sS'name'
p32166
S'hide'
p32167
sS'required'
p32168
I00
sS'group_name'
p32169
S'Variables'
p32170
sa(dp32171
S'description'
p32172
S'The interval at which time steps are output to the solution file\n'
p32173
sS'cpp_type'
p32174
S'unsigned int'
p32175
sS'default'
p32176
S'1'
p32177
sS'name'
p32178
S'interval'
p32179
sS'required'
p32180
I00
sS'group_name'
p32181
S'Timing'
p32182
sa(dp32183
S'description'
p32184
S'Number of divisions applied to time step when outputting linear residuals\n'
p32185
sS'cpp_type'
p32186
S'double'
p32187
sS'default'
p32188
S'1000'
p32189
sS'name'
p32190
S'linear_residual_dt_divisor'
p32191
sS'required'
p32192
I00
sS'group_name'
p32193
S'PETSc'
p32194
sa(dp32195
S'description'
p32196
S'Specifies an end time to begin output on each linear residual evaluation\n'
p32197
sS'cpp_type'
p32198
S'double'
p32199
sS'default'
p32200
g3
sS'name'
p32201
S'linear_residual_end_time'
p32202
sS'required'
p32203
I00
sS'group_name'
p32204
S'PETSc'
p32205
sa(dp32206
S'description'
p32207
S'Specifies a start time to begin output on each linear residual evaluation\n'
p32208
sS'cpp_type'
p32209
S'double'
p32210
sS'default'
p32211
g3
sS'name'
p32212
S'linear_residual_start_time'
p32213
sS'required'
p32214
I00
sS'group_name'
p32215
S'PETSc'
p32216
sa(dp32217
S'description'
p32218
S'Specifies whether output occurs on each linear residual evaluation\n'
p32219
sS'cpp_type'
p32220
S'bool'
p32221
sS'default'
p32222
S'0'
p32223
sS'name'
p32224
S'linear_residuals'
p32225
sS'required'
p32226
I00
sS'group_name'
p32227
S'PETSc'
p32228
sa(dp32229
S'description'
p32230
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p32231
sS'cpp_type'
p32232
S'double'
p32233
sS'default'
p32234
S'1000'
p32235
sS'name'
p32236
S'nonlinear_residual_dt_divisor'
p32237
sS'required'
p32238
I00
sS'group_name'
p32239
S'PETSc'
p32240
sa(dp32241
S'description'
p32242
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p32243
sS'cpp_type'
p32244
S'double'
p32245
sS'default'
p32246
g3
sS'name'
p32247
S'nonlinear_residual_end_time'
p32248
sS'required'
p32249
I00
sS'group_name'
p32250
S'PETSc'
p32251
sa(dp32252
S'description'
p32253
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p32254
sS'cpp_type'
p32255
S'double'
p32256
sS'default'
p32257
g3
sS'name'
p32258
S'nonlinear_residual_start_time'
p32259
sS'required'
p32260
I00
sS'group_name'
p32261
S'PETSc'
p32262
sa(dp32263
S'description'
p32264
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p32265
sS'cpp_type'
p32266
S'bool'
p32267
sS'default'
p32268
S'0'
p32269
sS'name'
p32270
S'nonlinear_residuals'
p32271
sS'required'
p32272
I00
sS'group_name'
p32273
S'PETSc'
p32274
sa(dp32275
S'description'
p32276
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p32277
sS'cpp_type'
p32278
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p32279
sS'default'
p32280
g3
sS'name'
p32281
S'output_if_base_contains'
p32282
sS'required'
p32283
I00
sS'group_name'
p32284
S'Advanced'
p32285
sa(dp32286
S'description'
p32287
S'Specifies whether output occurs on each linear residual evaluation\n'
p32288
sS'cpp_type'
p32289
S'bool'
p32290
sS'default'
p32291
S'0'
p32292
sS'name'
p32293
S'output_linear'
p32294
sS'required'
p32295
I00
sS'group_name'
p32296
Nsa(dp32297
S'description'
p32298
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p32299
sS'cpp_type'
p32300
S'bool'
p32301
sS'default'
p32302
S'0'
p32303
sS'name'
p32304
S'output_nonlinear'
p32305
sS'required'
p32306
I00
sS'group_name'
p32307
Nsa(dp32308
S'description'
p32309
S'Enable/disable the output of postprocessors\n'
p32310
sS'cpp_type'
p32311
S'bool'
p32312
sS'default'
p32313
S'1'
p32314
sS'name'
p32315
S'output_postprocessors'
p32316
sS'required'
p32317
I00
sS'group_name'
p32318
Nsa(dp32319
S'description'
p32320
S'The number of for extension suffix (e.g., out.e-s002)\n'
p32321
sS'cpp_type'
p32322
S'unsigned int'
p32323
sS'default'
p32324
S'4'
p32325
sS'name'
p32326
S'padding'
p32327
sS'required'
p32328
I00
sS'group_name'
p32329
S'Advanced'
p32330
sa(dp32331
S'description'
p32332
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p32333
sS'cpp_type'
p32334
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p32335
sS'default'
p32336
g3
sS'name'
p32337
S'show'
p32338
sS'required'
p32339
I00
sS'group_name'
p32340
S'Variables'
p32341
sa(dp32342
S'description'
p32343
S'Time at which this output object begins to operate\n'
p32344
sS'cpp_type'
p32345
S'double'
p32346
sS'default'
p32347
g3
sS'name'
p32348
S'start_time'
p32349
sS'required'
p32350
I00
sS'group_name'
p32351
S'Timing'
p32352
sa(dp32353
S'description'
p32354
S'Only export results at sync times\n'
p32355
sS'cpp_type'
p32356
S'bool'
p32357
sS'default'
p32358
S'0'
p32359
sS'name'
p32360
S'sync_only'
p32361
sS'required'
p32362
I00
sS'group_name'
p32363
S'Timing'
p32364
sa(dp32365
S'description'
p32366
S'Times at which the output and solution is forced to occur\n'
p32367
sS'cpp_type'
p32368
S'std::__1::vector<double, std::__1::allocator<double> >'
p32369
sS'default'
p32370
g3
sS'name'
p32371
S'sync_times'
p32372
sS'required'
p32373
I00
sS'group_name'
p32374
S'Timing'
p32375
sa(dp32376
S'description'
p32377
S"Whether or not the 'time' column should be written for Postprocessor CSV files\n"
p32378
sS'cpp_type'
p32379
S'bool'
p32380
sS'default'
p32381
S'1'
p32382
sS'name'
p32383
S'time_column'
p32384
sS'required'
p32385
I00
sS'group_name'
p32386
Nsa(dp32387
S'description'
p32388
S'When true and VecptorPostprocessor data exists, write a csv file containing the timestep and time information.\n'
p32389
sS'cpp_type'
p32390
S'bool'
p32391
sS'default'
p32392
S'0'
p32393
sS'name'
p32394
S'time_data'
p32395
sS'required'
p32396
I00
sS'group_name'
p32397
Nsa(dp32398
S'description'
p32399
S'Time tolerance utilized checking start and end times\n'
p32400
sS'cpp_type'
p32401
S'double'
p32402
sS'default'
p32403
S'1e-14'
p32404
sS'name'
p32405
S'time_tolerance'
p32406
sS'required'
p32407
I00
sS'group_name'
p32408
S'Timing'
p32409
sa(dp32410
S'description'
p32411
g3
sS'cpp_type'
p32412
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32413
sS'default'
p32414
S'Gnuplot'
p32415
sS'name'
p32416
S'type'
p32417
sS'required'
p32418
I00
sS'group_name'
p32419
Nsa(dp32420
S'description'
p32421
S'Enable/disable the use of the displaced mesh for outputting\n'
p32422
sS'cpp_type'
p32423
S'bool'
p32424
sS'default'
p32425
S'0'
p32426
sS'name'
p32427
S'use_displaced'
p32428
sS'required'
p32429
I00
sS'group_name'
p32430
NsasS'name'
p32431
S'/Outputs/Gnuplot'
p32432
sa(dp32433
S'description'
p32434
g3
sS'subblocks'
p32435
NsS'parameters'
p32436
(lp32437
(dp32438
S'name'
p32439
S'additional_execute_on'
p32440
sS'cpp_type'
p32441
S'MultiMooseEnum'
p32442
sS'default'
p32443
g3
sS'description'
p32444
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p32445
sS'required'
p32446
I00
sS'options'
p32447
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32448
sS'group_name'
p32449
Nsa(dp32450
S'description'
p32451
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32452
sS'cpp_type'
p32453
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p32454
sS'default'
p32455
g3
sS'name'
p32456
S'control_tags'
p32457
sS'required'
p32458
I00
sS'group_name'
p32459
S'Advanced'
p32460
sa(dp32461
S'description'
p32462
S'Set the enabled status of the MooseObject.\n'
p32463
sS'cpp_type'
p32464
S'bool'
p32465
sS'default'
p32466
S'1'
p32467
sS'name'
p32468
S'enable'
p32469
sS'required'
p32470
I00
sS'group_name'
p32471
S'Advanced'
p32472
sa(dp32473
S'description'
p32474
S'Time at which this output object stop operating\n'
p32475
sS'cpp_type'
p32476
S'double'
p32477
sS'default'
p32478
g3
sS'name'
p32479
S'end_time'
p32480
sS'required'
p32481
I00
sS'group_name'
p32482
S'Timing'
p32483
sa(dp32484
S'description'
p32485
S'The interval at which time steps are output to the solution file\n'
p32486
sS'cpp_type'
p32487
S'unsigned int'
p32488
sS'default'
p32489
S'1'
p32490
sS'name'
p32491
S'interval'
p32492
sS'required'
p32493
I00
sS'group_name'
p32494
S'Timing'
p32495
sa(dp32496
S'description'
p32497
S'Time at which this output object begins to operate\n'
p32498
sS'cpp_type'
p32499
S'double'
p32500
sS'default'
p32501
g3
sS'name'
p32502
S'start_time'
p32503
sS'required'
p32504
I00
sS'group_name'
p32505
S'Timing'
p32506
sa(dp32507
S'description'
p32508
S'Only export results at sync times\n'
p32509
sS'cpp_type'
p32510
S'bool'
p32511
sS'default'
p32512
S'0'
p32513
sS'name'
p32514
S'sync_only'
p32515
sS'required'
p32516
I00
sS'group_name'
p32517
S'Timing'
p32518
sa(dp32519
S'description'
p32520
S'Times at which the output and solution is forced to occur\n'
p32521
sS'cpp_type'
p32522
S'std::__1::vector<double, std::__1::allocator<double> >'
p32523
sS'default'
p32524
g3
sS'name'
p32525
S'sync_times'
p32526
sS'required'
p32527
I00
sS'group_name'
p32528
S'Timing'
p32529
sa(dp32530
S'description'
p32531
S'Time tolerance utilized checking start and end times\n'
p32532
sS'cpp_type'
p32533
S'double'
p32534
sS'default'
p32535
S'1e-14'
p32536
sS'name'
p32537
S'time_tolerance'
p32538
sS'required'
p32539
I00
sS'group_name'
p32540
S'Timing'
p32541
sa(dp32542
S'description'
p32543
g3
sS'cpp_type'
p32544
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32545
sS'default'
p32546
S'MaterialPropertyDebugOutput'
p32547
sS'name'
p32548
S'type'
p32549
sS'required'
p32550
I00
sS'group_name'
p32551
Nsa(dp32552
S'description'
p32553
S'Enable/disable the use of the displaced mesh for outputting\n'
p32554
sS'cpp_type'
p32555
S'bool'
p32556
sS'default'
p32557
S'0'
p32558
sS'name'
p32559
S'use_displaced'
p32560
sS'required'
p32561
I00
sS'group_name'
p32562
NsasS'name'
p32563
S'/Outputs/MaterialPropertyDebugOutput'
p32564
sa(dp32565
S'description'
p32566
S'Object for output data in the Nemesis format\n'
p32567
sS'subblocks'
p32568
NsS'parameters'
p32569
(lp32570
(dp32571
S'name'
p32572
S'additional_execute_on'
p32573
sS'cpp_type'
p32574
S'MultiMooseEnum'
p32575
sS'default'
p32576
g3
sS'description'
p32577
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p32578
sS'required'
p32579
I00
sS'options'
p32580
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32581
sS'group_name'
p32582
Nsa(dp32583
S'description'
p32584
S'When true the date and time are appended to the output filename.\n'
p32585
sS'cpp_type'
p32586
S'bool'
p32587
sS'default'
p32588
S'0'
p32589
sS'name'
p32590
S'append_date'
p32591
sS'required'
p32592
I00
sS'group_name'
p32593
Nsa(dp32594
S'description'
p32595
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p32596
sS'cpp_type'
p32597
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32598
sS'default'
p32599
g3
sS'name'
p32600
S'append_date_format'
p32601
sS'required'
p32602
I00
sS'group_name'
p32603
Nsa(dp32604
S'description'
p32605
S"Append '_oversample' to the output file base\n"
p32606
sS'cpp_type'
p32607
S'bool'
p32608
sS'default'
p32609
S'0'
p32610
sS'name'
p32611
S'append_oversample'
p32612
sS'required'
p32613
I00
sS'group_name'
p32614
Nsa(dp32615
S'description'
p32616
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32617
sS'cpp_type'
p32618
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p32619
sS'default'
p32620
g3
sS'name'
p32621
S'control_tags'
p32622
sS'required'
p32623
I00
sS'group_name'
p32624
S'Advanced'
p32625
sa(dp32626
S'description'
p32627
S'Set the enabled status of the MooseObject.\n'
p32628
sS'cpp_type'
p32629
S'bool'
p32630
sS'default'
p32631
S'1'
p32632
sS'name'
p32633
S'enable'
p32634
sS'required'
p32635
I00
sS'group_name'
p32636
S'Advanced'
p32637
sa(dp32638
S'description'
p32639
S'Time at which this output object stop operating\n'
p32640
sS'cpp_type'
p32641
S'double'
p32642
sS'default'
p32643
g3
sS'name'
p32644
S'end_time'
p32645
sS'required'
p32646
I00
sS'group_name'
p32647
S'Timing'
p32648
sa(dp32649
S'description'
p32650
S'Enable/disable the output of elemental variables\n'
p32651
sS'cpp_type'
p32652
S'bool'
p32653
sS'default'
p32654
S'1'
p32655
sS'name'
p32656
S'execute_elemental_variables'
p32657
sS'required'
p32658
I00
sS'group_name'
p32659
Nsa(dp32660
S'description'
p32661
S'Enable/disable the output of input file information\n'
p32662
sS'cpp_type'
p32663
S'bool'
p32664
sS'default'
p32665
S'1'
p32666
sS'name'
p32667
S'execute_input'
p32668
sS'required'
p32669
I00
sS'group_name'
p32670
Nsa(dp32671
S'name'
p32672
S'execute_input_on'
p32673
sS'cpp_type'
p32674
S'MultiMooseEnum'
p32675
sS'default'
p32676
g3
sS'description'
p32677
S'Enable/disable the output of the input file\n'
p32678
sS'required'
p32679
I00
sS'options'
p32680
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32681
sS'group_name'
p32682
S'Variables'
p32683
sa(dp32684
S'description'
p32685
S'Enable/disable the output of nodal variables\n'
p32686
sS'cpp_type'
p32687
S'bool'
p32688
sS'default'
p32689
S'1'
p32690
sS'name'
p32691
S'execute_nodal_variables'
p32692
sS'required'
p32693
I00
sS'group_name'
p32694
Nsa(dp32695
S'name'
p32696
S'execute_on'
p32697
sS'cpp_type'
p32698
S'MultiMooseEnum'
p32699
sS'default'
p32700
S'INITIAL TIMESTEP_END'
p32701
sS'description'
p32702
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p32703
sS'required'
p32704
I00
sS'options'
p32705
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32706
sS'group_name'
p32707
Nsa(dp32708
S'name'
p32709
S'execute_postprocessors_on'
p32710
sS'cpp_type'
p32711
S'MultiMooseEnum'
p32712
sS'default'
p32713
g3
sS'description'
p32714
S'Control of when postprocessors are output\n'
p32715
sS'required'
p32716
I00
sS'options'
p32717
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32718
sS'group_name'
p32719
S'Variables'
p32720
sa(dp32721
S'description'
p32722
S'Enable/disable the output of aux scalar variables\n'
p32723
sS'cpp_type'
p32724
S'bool'
p32725
sS'default'
p32726
S'1'
p32727
sS'name'
p32728
S'execute_scalar_variables'
p32729
sS'required'
p32730
I00
sS'group_name'
p32731
Nsa(dp32732
S'name'
p32733
S'execute_scalars_on'
p32734
sS'cpp_type'
p32735
S'MultiMooseEnum'
p32736
sS'default'
p32737
g3
sS'description'
p32738
S'Control the output of scalar variables\n'
p32739
sS'required'
p32740
I00
sS'options'
p32741
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32742
sS'group_name'
p32743
S'Variables'
p32744
sa(dp32745
S'description'
p32746
S'Enable/disable the output of the simulation information\n'
p32747
sS'cpp_type'
p32748
S'bool'
p32749
sS'default'
p32750
S'1'
p32751
sS'name'
p32752
S'execute_system_information'
p32753
sS'required'
p32754
I00
sS'group_name'
p32755
Nsa(dp32756
S'description'
p32757
S'Enable/disable the output of vector postprocessors\n'
p32758
sS'cpp_type'
p32759
S'bool'
p32760
sS'default'
p32761
S'1'
p32762
sS'name'
p32763
S'execute_vector_postprocessors'
p32764
sS'required'
p32765
I00
sS'group_name'
p32766
Nsa(dp32767
S'description'
p32768
S'The name of the mesh file to read, for oversampling\n'
p32769
sS'cpp_type'
p32770
S'MeshFileName'
p32771
sS'default'
p32772
g3
sS'name'
p32773
S'file'
p32774
sS'required'
p32775
I00
sS'group_name'
p32776
S'Oversampling'
p32777
sa(dp32778
S'description'
p32779
S'The desired solution output name without an extension\n'
p32780
sS'cpp_type'
p32781
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32782
sS'default'
p32783
g3
sS'name'
p32784
S'file_base'
p32785
sS'required'
p32786
I00
sS'group_name'
p32787
Nsa(dp32788
S'description'
p32789
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p32790
sS'cpp_type'
p32791
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p32792
sS'default'
p32793
g3
sS'name'
p32794
S'hide'
p32795
sS'required'
p32796
I00
sS'group_name'
p32797
S'Variables'
p32798
sa(dp32799
S'description'
p32800
S'The interval at which time steps are output to the solution file\n'
p32801
sS'cpp_type'
p32802
S'unsigned int'
p32803
sS'default'
p32804
S'1'
p32805
sS'name'
p32806
S'interval'
p32807
sS'required'
p32808
I00
sS'group_name'
p32809
S'Timing'
p32810
sa(dp32811
S'description'
p32812
S'Number of divisions applied to time step when outputting linear residuals\n'
p32813
sS'cpp_type'
p32814
S'double'
p32815
sS'default'
p32816
S'1000'
p32817
sS'name'
p32818
S'linear_residual_dt_divisor'
p32819
sS'required'
p32820
I00
sS'group_name'
p32821
S'PETSc'
p32822
sa(dp32823
S'description'
p32824
S'Specifies an end time to begin output on each linear residual evaluation\n'
p32825
sS'cpp_type'
p32826
S'double'
p32827
sS'default'
p32828
g3
sS'name'
p32829
S'linear_residual_end_time'
p32830
sS'required'
p32831
I00
sS'group_name'
p32832
S'PETSc'
p32833
sa(dp32834
S'description'
p32835
S'Specifies a start time to begin output on each linear residual evaluation\n'
p32836
sS'cpp_type'
p32837
S'double'
p32838
sS'default'
p32839
g3
sS'name'
p32840
S'linear_residual_start_time'
p32841
sS'required'
p32842
I00
sS'group_name'
p32843
S'PETSc'
p32844
sa(dp32845
S'description'
p32846
S'Specifies whether output occurs on each linear residual evaluation\n'
p32847
sS'cpp_type'
p32848
S'bool'
p32849
sS'default'
p32850
S'0'
p32851
sS'name'
p32852
S'linear_residuals'
p32853
sS'required'
p32854
I00
sS'group_name'
p32855
S'PETSc'
p32856
sa(dp32857
S'description'
p32858
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p32859
sS'cpp_type'
p32860
S'double'
p32861
sS'default'
p32862
S'1000'
p32863
sS'name'
p32864
S'nonlinear_residual_dt_divisor'
p32865
sS'required'
p32866
I00
sS'group_name'
p32867
S'PETSc'
p32868
sa(dp32869
S'description'
p32870
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p32871
sS'cpp_type'
p32872
S'double'
p32873
sS'default'
p32874
g3
sS'name'
p32875
S'nonlinear_residual_end_time'
p32876
sS'required'
p32877
I00
sS'group_name'
p32878
S'PETSc'
p32879
sa(dp32880
S'description'
p32881
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p32882
sS'cpp_type'
p32883
S'double'
p32884
sS'default'
p32885
g3
sS'name'
p32886
S'nonlinear_residual_start_time'
p32887
sS'required'
p32888
I00
sS'group_name'
p32889
S'PETSc'
p32890
sa(dp32891
S'description'
p32892
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p32893
sS'cpp_type'
p32894
S'bool'
p32895
sS'default'
p32896
S'0'
p32897
sS'name'
p32898
S'nonlinear_residuals'
p32899
sS'required'
p32900
I00
sS'group_name'
p32901
S'PETSc'
p32902
sa(dp32903
S'description'
p32904
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p32905
sS'cpp_type'
p32906
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p32907
sS'default'
p32908
g3
sS'name'
p32909
S'output_if_base_contains'
p32910
sS'required'
p32911
I00
sS'group_name'
p32912
S'Advanced'
p32913
sa(dp32914
S'description'
p32915
S'Specifies whether output occurs on each linear residual evaluation\n'
p32916
sS'cpp_type'
p32917
S'bool'
p32918
sS'default'
p32919
S'0'
p32920
sS'name'
p32921
S'output_linear'
p32922
sS'required'
p32923
I00
sS'group_name'
p32924
Nsa(dp32925
S'description'
p32926
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p32927
sS'cpp_type'
p32928
S'bool'
p32929
sS'default'
p32930
S'0'
p32931
sS'name'
p32932
S'output_nonlinear'
p32933
sS'required'
p32934
I00
sS'group_name'
p32935
Nsa(dp32936
S'description'
p32937
S'Enable/disable the output of postprocessors\n'
p32938
sS'cpp_type'
p32939
S'bool'
p32940
sS'default'
p32941
S'1'
p32942
sS'name'
p32943
S'output_postprocessors'
p32944
sS'required'
p32945
I00
sS'group_name'
p32946
Nsa(dp32947
S'description'
p32948
S'Set to true to enable oversampling\n'
p32949
sS'cpp_type'
p32950
S'bool'
p32951
sS'default'
p32952
S'0'
p32953
sS'name'
p32954
S'oversample'
p32955
sS'required'
p32956
I00
sS'group_name'
p32957
Nsa(dp32958
S'description'
p32959
S'The number of for extension suffix (e.g., out.e-s002)\n'
p32960
sS'cpp_type'
p32961
S'unsigned int'
p32962
sS'default'
p32963
S'4'
p32964
sS'name'
p32965
S'padding'
p32966
sS'required'
p32967
I00
sS'group_name'
p32968
S'Advanced'
p32969
sa(dp32970
S'description'
p32971
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p32972
sS'cpp_type'
p32973
S'libMesh::Point'
p32974
sS'default'
p32975
g3
sS'name'
p32976
S'position'
p32977
sS'required'
p32978
I00
sS'group_name'
p32979
S'Oversampling'
p32980
sa(dp32981
S'description'
p32982
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p32983
sS'cpp_type'
p32984
S'unsigned int'
p32985
sS'default'
p32986
S'0'
p32987
sS'name'
p32988
S'refinements'
p32989
sS'required'
p32990
I00
sS'group_name'
p32991
S'Oversampling'
p32992
sa(dp32993
S'description'
p32994
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p32995
sS'cpp_type'
p32996
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p32997
sS'default'
p32998
g3
sS'name'
p32999
S'show'
p33000
sS'required'
p33001
I00
sS'group_name'
p33002
S'Variables'
p33003
sa(dp33004
S'description'
p33005
S'Time at which this output object begins to operate\n'
p33006
sS'cpp_type'
p33007
S'double'
p33008
sS'default'
p33009
g3
sS'name'
p33010
S'start_time'
p33011
sS'required'
p33012
I00
sS'group_name'
p33013
S'Timing'
p33014
sa(dp33015
S'description'
p33016
S'Only export results at sync times\n'
p33017
sS'cpp_type'
p33018
S'bool'
p33019
sS'default'
p33020
S'0'
p33021
sS'name'
p33022
S'sync_only'
p33023
sS'required'
p33024
I00
sS'group_name'
p33025
S'Timing'
p33026
sa(dp33027
S'description'
p33028
S'Times at which the output and solution is forced to occur\n'
p33029
sS'cpp_type'
p33030
S'std::__1::vector<double, std::__1::allocator<double> >'
p33031
sS'default'
p33032
g3
sS'name'
p33033
S'sync_times'
p33034
sS'required'
p33035
I00
sS'group_name'
p33036
S'Timing'
p33037
sa(dp33038
S'description'
p33039
S'Time tolerance utilized checking start and end times\n'
p33040
sS'cpp_type'
p33041
S'double'
p33042
sS'default'
p33043
S'1e-14'
p33044
sS'name'
p33045
S'time_tolerance'
p33046
sS'required'
p33047
I00
sS'group_name'
p33048
S'Timing'
p33049
sa(dp33050
S'description'
p33051
g3
sS'cpp_type'
p33052
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33053
sS'default'
p33054
S'Nemesis'
p33055
sS'name'
p33056
S'type'
p33057
sS'required'
p33058
I00
sS'group_name'
p33059
Nsa(dp33060
S'description'
p33061
S'Enable/disable the use of the displaced mesh for outputting\n'
p33062
sS'cpp_type'
p33063
S'bool'
p33064
sS'default'
p33065
S'0'
p33066
sS'name'
p33067
S'use_displaced'
p33068
sS'required'
p33069
I00
sS'group_name'
p33070
NsasS'name'
p33071
S'/Outputs/Nemesis'
p33072
sa(dp33073
S'description'
p33074
g3
sS'subblocks'
p33075
NsS'parameters'
p33076
(lp33077
(dp33078
S'name'
p33079
S'additional_execute_on'
p33080
sS'cpp_type'
p33081
S'MultiMooseEnum'
p33082
sS'default'
p33083
g3
sS'description'
p33084
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p33085
sS'required'
p33086
I00
sS'options'
p33087
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p33088
sS'group_name'
p33089
Nsa(dp33090
S'description'
p33091
S'When true the date and time are appended to the output filename.\n'
p33092
sS'cpp_type'
p33093
S'bool'
p33094
sS'default'
p33095
S'0'
p33096
sS'name'
p33097
S'append_date'
p33098
sS'required'
p33099
I00
sS'group_name'
p33100
Nsa(dp33101
S'description'
p33102
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p33103
sS'cpp_type'
p33104
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33105
sS'default'
p33106
g3
sS'name'
p33107
S'append_date_format'
p33108
sS'required'
p33109
I00
sS'group_name'
p33110
Nsa(dp33111
S'description'
p33112
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33113
sS'cpp_type'
p33114
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p33115
sS'default'
p33116
g3
sS'name'
p33117
S'control_tags'
p33118
sS'required'
p33119
I00
sS'group_name'
p33120
S'Advanced'
p33121
sa(dp33122
S'description'
p33123
S'Set the enabled status of the MooseObject.\n'
p33124
sS'cpp_type'
p33125
S'bool'
p33126
sS'default'
p33127
S'1'
p33128
sS'name'
p33129
S'enable'
p33130
sS'required'
p33131
I00
sS'group_name'
p33132
S'Advanced'
p33133
sa(dp33134
S'description'
p33135
S'Time at which this output object stop operating\n'
p33136
sS'cpp_type'
p33137
S'double'
p33138
sS'default'
p33139
g3
sS'name'
p33140
S'end_time'
p33141
sS'required'
p33142
I00
sS'group_name'
p33143
S'Timing'
p33144
sa(dp33145
S'name'
p33146
S'execute_on'
p33147
sS'cpp_type'
p33148
S'MultiMooseEnum'
p33149
sS'default'
p33150
S'INITIAL TIMESTEP_END'
p33151
sS'description'
p33152
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p33153
sS'required'
p33154
I00
sS'options'
p33155
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p33156
sS'group_name'
p33157
Nsa(dp33158
S'description'
p33159
S'The desired solution output name without an extension\n'
p33160
sS'cpp_type'
p33161
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33162
sS'default'
p33163
g3
sS'name'
p33164
S'file_base'
p33165
sS'required'
p33166
I00
sS'group_name'
p33167
Nsa(dp33168
S'description'
p33169
S'The interval at which time steps are output to the solution file\n'
p33170
sS'cpp_type'
p33171
S'unsigned int'
p33172
sS'default'
p33173
S'1'
p33174
sS'name'
p33175
S'interval'
p33176
sS'required'
p33177
I00
sS'group_name'
p33178
S'Timing'
p33179
sa(dp33180
S'description'
p33181
S'Number of divisions applied to time step when outputting linear residuals\n'
p33182
sS'cpp_type'
p33183
S'double'
p33184
sS'default'
p33185
S'1000'
p33186
sS'name'
p33187
S'linear_residual_dt_divisor'
p33188
sS'required'
p33189
I00
sS'group_name'
p33190
S'PETSc'
p33191
sa(dp33192
S'description'
p33193
S'Specifies an end time to begin output on each linear residual evaluation\n'
p33194
sS'cpp_type'
p33195
S'double'
p33196
sS'default'
p33197
g3
sS'name'
p33198
S'linear_residual_end_time'
p33199
sS'required'
p33200
I00
sS'group_name'
p33201
S'PETSc'
p33202
sa(dp33203
S'description'
p33204
S'Specifies a start time to begin output on each linear residual evaluation\n'
p33205
sS'cpp_type'
p33206
S'double'
p33207
sS'default'
p33208
g3
sS'name'
p33209
S'linear_residual_start_time'
p33210
sS'required'
p33211
I00
sS'group_name'
p33212
S'PETSc'
p33213
sa(dp33214
S'description'
p33215
S'Specifies whether output occurs on each linear residual evaluation\n'
p33216
sS'cpp_type'
p33217
S'bool'
p33218
sS'default'
p33219
S'0'
p33220
sS'name'
p33221
S'linear_residuals'
p33222
sS'required'
p33223
I00
sS'group_name'
p33224
S'PETSc'
p33225
sa(dp33226
S'description'
p33227
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p33228
sS'cpp_type'
p33229
S'double'
p33230
sS'default'
p33231
S'1000'
p33232
sS'name'
p33233
S'nonlinear_residual_dt_divisor'
p33234
sS'required'
p33235
I00
sS'group_name'
p33236
S'PETSc'
p33237
sa(dp33238
S'description'
p33239
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p33240
sS'cpp_type'
p33241
S'double'
p33242
sS'default'
p33243
g3
sS'name'
p33244
S'nonlinear_residual_end_time'
p33245
sS'required'
p33246
I00
sS'group_name'
p33247
S'PETSc'
p33248
sa(dp33249
S'description'
p33250
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p33251
sS'cpp_type'
p33252
S'double'
p33253
sS'default'
p33254
g3
sS'name'
p33255
S'nonlinear_residual_start_time'
p33256
sS'required'
p33257
I00
sS'group_name'
p33258
S'PETSc'
p33259
sa(dp33260
S'description'
p33261
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p33262
sS'cpp_type'
p33263
S'bool'
p33264
sS'default'
p33265
S'0'
p33266
sS'name'
p33267
S'nonlinear_residuals'
p33268
sS'required'
p33269
I00
sS'group_name'
p33270
S'PETSc'
p33271
sa(dp33272
S'description'
p33273
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p33274
sS'cpp_type'
p33275
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p33276
sS'default'
p33277
g3
sS'name'
p33278
S'output_if_base_contains'
p33279
sS'required'
p33280
I00
sS'group_name'
p33281
S'Advanced'
p33282
sa(dp33283
S'description'
p33284
S'Specifies whether output occurs on each linear residual evaluation\n'
p33285
sS'cpp_type'
p33286
S'bool'
p33287
sS'default'
p33288
S'0'
p33289
sS'name'
p33290
S'output_linear'
p33291
sS'required'
p33292
I00
sS'group_name'
p33293
Nsa(dp33294
S'description'
p33295
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p33296
sS'cpp_type'
p33297
S'bool'
p33298
sS'default'
p33299
S'0'
p33300
sS'name'
p33301
S'output_nonlinear'
p33302
sS'required'
p33303
I00
sS'group_name'
p33304
Nsa(dp33305
S'description'
p33306
S'The number of for extension suffix (e.g., out.e-s002)\n'
p33307
sS'cpp_type'
p33308
S'unsigned int'
p33309
sS'default'
p33310
S'4'
p33311
sS'name'
p33312
S'padding'
p33313
sS'required'
p33314
I00
sS'group_name'
p33315
S'Advanced'
p33316
sa(dp33317
S'description'
p33318
S'Time at which this output object begins to operate\n'
p33319
sS'cpp_type'
p33320
S'double'
p33321
sS'default'
p33322
g3
sS'name'
p33323
S'start_time'
p33324
sS'required'
p33325
I00
sS'group_name'
p33326
S'Timing'
p33327
sa(dp33328
S'description'
p33329
S'Only export results at sync times\n'
p33330
sS'cpp_type'
p33331
S'bool'
p33332
sS'default'
p33333
S'0'
p33334
sS'name'
p33335
S'sync_only'
p33336
sS'required'
p33337
I00
sS'group_name'
p33338
S'Timing'
p33339
sa(dp33340
S'description'
p33341
S'Times at which the output and solution is forced to occur\n'
p33342
sS'cpp_type'
p33343
S'std::__1::vector<double, std::__1::allocator<double> >'
p33344
sS'default'
p33345
g3
sS'name'
p33346
S'sync_times'
p33347
sS'required'
p33348
I00
sS'group_name'
p33349
S'Timing'
p33350
sa(dp33351
S'description'
p33352
S'Time tolerance utilized checking start and end times\n'
p33353
sS'cpp_type'
p33354
S'double'
p33355
sS'default'
p33356
S'1e-14'
p33357
sS'name'
p33358
S'time_tolerance'
p33359
sS'required'
p33360
I00
sS'group_name'
p33361
S'Timing'
p33362
sa(dp33363
S'description'
p33364
g3
sS'cpp_type'
p33365
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33366
sS'default'
p33367
S'SolutionHistory'
p33368
sS'name'
p33369
S'type'
p33370
sS'required'
p33371
I00
sS'group_name'
p33372
Nsa(dp33373
S'description'
p33374
S'Enable/disable the use of the displaced mesh for outputting\n'
p33375
sS'cpp_type'
p33376
S'bool'
p33377
sS'default'
p33378
S'0'
p33379
sS'name'
p33380
S'use_displaced'
p33381
sS'required'
p33382
I00
sS'group_name'
p33383
NsasS'name'
p33384
S'/Outputs/SolutionHistory'
p33385
sa(dp33386
S'description'
p33387
S'Object for outputting data in the Tecplot format\n'
p33388
sS'subblocks'
p33389
NsS'parameters'
p33390
(lp33391
(dp33392
S'name'
p33393
S'additional_execute_on'
p33394
sS'cpp_type'
p33395
S'MultiMooseEnum'
p33396
sS'default'
p33397
g3
sS'description'
p33398
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p33399
sS'required'
p33400
I00
sS'options'
p33401
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p33402
sS'group_name'
p33403
Nsa(dp33404
S'description'
p33405
S'When true the date and time are appended to the output filename.\n'
p33406
sS'cpp_type'
p33407
S'bool'
p33408
sS'default'
p33409
S'0'
p33410
sS'name'
p33411
S'append_date'
p33412
sS'required'
p33413
I00
sS'group_name'
p33414
Nsa(dp33415
S'description'
p33416
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p33417
sS'cpp_type'
p33418
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33419
sS'default'
p33420
g3
sS'name'
p33421
S'append_date_format'
p33422
sS'required'
p33423
I00
sS'group_name'
p33424
Nsa(dp33425
S'description'
p33426
S"Append '_oversample' to the output file base\n"
p33427
sS'cpp_type'
p33428
S'bool'
p33429
sS'default'
p33430
S'0'
p33431
sS'name'
p33432
S'append_oversample'
p33433
sS'required'
p33434
I00
sS'group_name'
p33435
Nsa(dp33436
S'description'
p33437
S'If true, append to an existing ASCII file rather than creating a new file each time\n'
p33438
sS'cpp_type'
p33439
S'bool'
p33440
sS'default'
p33441
S'0'
p33442
sS'name'
p33443
S'ascii_append'
p33444
sS'required'
p33445
I00
sS'group_name'
p33446
Nsa(dp33447
S'description'
p33448
S'Set Tecplot files to output in binary format\n'
p33449
sS'cpp_type'
p33450
S'bool'
p33451
sS'default'
p33452
S'0'
p33453
sS'name'
p33454
S'binary'
p33455
sS'required'
p33456
I00
sS'group_name'
p33457
S'Advanced'
p33458
sa(dp33459
S'description'
p33460
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33461
sS'cpp_type'
p33462
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p33463
sS'default'
p33464
g3
sS'name'
p33465
S'control_tags'
p33466
sS'required'
p33467
I00
sS'group_name'
p33468
S'Advanced'
p33469
sa(dp33470
S'description'
p33471
S'Set the enabled status of the MooseObject.\n'
p33472
sS'cpp_type'
p33473
S'bool'
p33474
sS'default'
p33475
S'1'
p33476
sS'name'
p33477
S'enable'
p33478
sS'required'
p33479
I00
sS'group_name'
p33480
S'Advanced'
p33481
sa(dp33482
S'description'
p33483
S'Time at which this output object stop operating\n'
p33484
sS'cpp_type'
p33485
S'double'
p33486
sS'default'
p33487
g3
sS'name'
p33488
S'end_time'
p33489
sS'required'
p33490
I00
sS'group_name'
p33491
S'Timing'
p33492
sa(dp33493
S'name'
p33494
S'execute_on'
p33495
sS'cpp_type'
p33496
S'MultiMooseEnum'
p33497
sS'default'
p33498
S'INITIAL TIMESTEP_END'
p33499
sS'description'
p33500
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p33501
sS'required'
p33502
I00
sS'options'
p33503
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p33504
sS'group_name'
p33505
Nsa(dp33506
S'description'
p33507
S'The name of the mesh file to read, for oversampling\n'
p33508
sS'cpp_type'
p33509
S'MeshFileName'
p33510
sS'default'
p33511
g3
sS'name'
p33512
S'file'
p33513
sS'required'
p33514
I00
sS'group_name'
p33515
S'Oversampling'
p33516
sa(dp33517
S'description'
p33518
S'The desired solution output name without an extension\n'
p33519
sS'cpp_type'
p33520
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33521
sS'default'
p33522
g3
sS'name'
p33523
S'file_base'
p33524
sS'required'
p33525
I00
sS'group_name'
p33526
Nsa(dp33527
S'description'
p33528
S'The interval at which time steps are output to the solution file\n'
p33529
sS'cpp_type'
p33530
S'unsigned int'
p33531
sS'default'
p33532
S'1'
p33533
sS'name'
p33534
S'interval'
p33535
sS'required'
p33536
I00
sS'group_name'
p33537
S'Timing'
p33538
sa(dp33539
S'description'
p33540
S'Number of divisions applied to time step when outputting linear residuals\n'
p33541
sS'cpp_type'
p33542
S'double'
p33543
sS'default'
p33544
S'1000'
p33545
sS'name'
p33546
S'linear_residual_dt_divisor'
p33547
sS'required'
p33548
I00
sS'group_name'
p33549
S'PETSc'
p33550
sa(dp33551
S'description'
p33552
S'Specifies an end time to begin output on each linear residual evaluation\n'
p33553
sS'cpp_type'
p33554
S'double'
p33555
sS'default'
p33556
g3
sS'name'
p33557
S'linear_residual_end_time'
p33558
sS'required'
p33559
I00
sS'group_name'
p33560
S'PETSc'
p33561
sa(dp33562
S'description'
p33563
S'Specifies a start time to begin output on each linear residual evaluation\n'
p33564
sS'cpp_type'
p33565
S'double'
p33566
sS'default'
p33567
g3
sS'name'
p33568
S'linear_residual_start_time'
p33569
sS'required'
p33570
I00
sS'group_name'
p33571
S'PETSc'
p33572
sa(dp33573
S'description'
p33574
S'Specifies whether output occurs on each linear residual evaluation\n'
p33575
sS'cpp_type'
p33576
S'bool'
p33577
sS'default'
p33578
S'0'
p33579
sS'name'
p33580
S'linear_residuals'
p33581
sS'required'
p33582
I00
sS'group_name'
p33583
S'PETSc'
p33584
sa(dp33585
S'description'
p33586
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p33587
sS'cpp_type'
p33588
S'double'
p33589
sS'default'
p33590
S'1000'
p33591
sS'name'
p33592
S'nonlinear_residual_dt_divisor'
p33593
sS'required'
p33594
I00
sS'group_name'
p33595
S'PETSc'
p33596
sa(dp33597
S'description'
p33598
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p33599
sS'cpp_type'
p33600
S'double'
p33601
sS'default'
p33602
g3
sS'name'
p33603
S'nonlinear_residual_end_time'
p33604
sS'required'
p33605
I00
sS'group_name'
p33606
S'PETSc'
p33607
sa(dp33608
S'description'
p33609
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p33610
sS'cpp_type'
p33611
S'double'
p33612
sS'default'
p33613
g3
sS'name'
p33614
S'nonlinear_residual_start_time'
p33615
sS'required'
p33616
I00
sS'group_name'
p33617
S'PETSc'
p33618
sa(dp33619
S'description'
p33620
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p33621
sS'cpp_type'
p33622
S'bool'
p33623
sS'default'
p33624
S'0'
p33625
sS'name'
p33626
S'nonlinear_residuals'
p33627
sS'required'
p33628
I00
sS'group_name'
p33629
S'PETSc'
p33630
sa(dp33631
S'description'
p33632
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p33633
sS'cpp_type'
p33634
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p33635
sS'default'
p33636
g3
sS'name'
p33637
S'output_if_base_contains'
p33638
sS'required'
p33639
I00
sS'group_name'
p33640
S'Advanced'
p33641
sa(dp33642
S'description'
p33643
S'Specifies whether output occurs on each linear residual evaluation\n'
p33644
sS'cpp_type'
p33645
S'bool'
p33646
sS'default'
p33647
S'0'
p33648
sS'name'
p33649
S'output_linear'
p33650
sS'required'
p33651
I00
sS'group_name'
p33652
Nsa(dp33653
S'description'
p33654
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p33655
sS'cpp_type'
p33656
S'bool'
p33657
sS'default'
p33658
S'0'
p33659
sS'name'
p33660
S'output_nonlinear'
p33661
sS'required'
p33662
I00
sS'group_name'
p33663
Nsa(dp33664
S'description'
p33665
S'Set to true to enable oversampling\n'
p33666
sS'cpp_type'
p33667
S'bool'
p33668
sS'default'
p33669
S'0'
p33670
sS'name'
p33671
S'oversample'
p33672
sS'required'
p33673
I00
sS'group_name'
p33674
Nsa(dp33675
S'description'
p33676
S'The number of for extension suffix (e.g., out.e-s002)\n'
p33677
sS'cpp_type'
p33678
S'unsigned int'
p33679
sS'default'
p33680
S'4'
p33681
sS'name'
p33682
S'padding'
p33683
sS'required'
p33684
I00
sS'group_name'
p33685
S'Advanced'
p33686
sa(dp33687
S'description'
p33688
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p33689
sS'cpp_type'
p33690
S'libMesh::Point'
p33691
sS'default'
p33692
g3
sS'name'
p33693
S'position'
p33694
sS'required'
p33695
I00
sS'group_name'
p33696
S'Oversampling'
p33697
sa(dp33698
S'description'
p33699
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p33700
sS'cpp_type'
p33701
S'unsigned int'
p33702
sS'default'
p33703
S'0'
p33704
sS'name'
p33705
S'refinements'
p33706
sS'required'
p33707
I00
sS'group_name'
p33708
S'Oversampling'
p33709
sa(dp33710
S'description'
p33711
S'Time at which this output object begins to operate\n'
p33712
sS'cpp_type'
p33713
S'double'
p33714
sS'default'
p33715
g3
sS'name'
p33716
S'start_time'
p33717
sS'required'
p33718
I00
sS'group_name'
p33719
S'Timing'
p33720
sa(dp33721
S'description'
p33722
S'Only export results at sync times\n'
p33723
sS'cpp_type'
p33724
S'bool'
p33725
sS'default'
p33726
S'0'
p33727
sS'name'
p33728
S'sync_only'
p33729
sS'required'
p33730
I00
sS'group_name'
p33731
S'Timing'
p33732
sa(dp33733
S'description'
p33734
S'Times at which the output and solution is forced to occur\n'
p33735
sS'cpp_type'
p33736
S'std::__1::vector<double, std::__1::allocator<double> >'
p33737
sS'default'
p33738
g3
sS'name'
p33739
S'sync_times'
p33740
sS'required'
p33741
I00
sS'group_name'
p33742
S'Timing'
p33743
sa(dp33744
S'description'
p33745
S'Time tolerance utilized checking start and end times\n'
p33746
sS'cpp_type'
p33747
S'double'
p33748
sS'default'
p33749
S'1e-14'
p33750
sS'name'
p33751
S'time_tolerance'
p33752
sS'required'
p33753
I00
sS'group_name'
p33754
S'Timing'
p33755
sa(dp33756
S'description'
p33757
g3
sS'cpp_type'
p33758
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33759
sS'default'
p33760
S'Tecplot'
p33761
sS'name'
p33762
S'type'
p33763
sS'required'
p33764
I00
sS'group_name'
p33765
Nsa(dp33766
S'description'
p33767
S'Enable/disable the use of the displaced mesh for outputting\n'
p33768
sS'cpp_type'
p33769
S'bool'
p33770
sS'default'
p33771
S'0'
p33772
sS'name'
p33773
S'use_displaced'
p33774
sS'required'
p33775
I00
sS'group_name'
p33776
NsasS'name'
p33777
S'/Outputs/Tecplot'
p33778
sa(dp33779
S'description'
p33780
g3
sS'subblocks'
p33781
NsS'parameters'
p33782
(lp33783
(dp33784
S'name'
p33785
S'additional_execute_on'
p33786
sS'cpp_type'
p33787
S'MultiMooseEnum'
p33788
sS'default'
p33789
g3
sS'description'
p33790
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p33791
sS'required'
p33792
I00
sS'options'
p33793
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p33794
sS'group_name'
p33795
Nsa(dp33796
S'description'
p33797
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33798
sS'cpp_type'
p33799
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p33800
sS'default'
p33801
g3
sS'name'
p33802
S'control_tags'
p33803
sS'required'
p33804
I00
sS'group_name'
p33805
S'Advanced'
p33806
sa(dp33807
S'description'
p33808
S'Set the enabled status of the MooseObject.\n'
p33809
sS'cpp_type'
p33810
S'bool'
p33811
sS'default'
p33812
S'1'
p33813
sS'name'
p33814
S'enable'
p33815
sS'required'
p33816
I00
sS'group_name'
p33817
S'Advanced'
p33818
sa(dp33819
S'description'
p33820
S'Time at which this output object stop operating\n'
p33821
sS'cpp_type'
p33822
S'double'
p33823
sS'default'
p33824
g3
sS'name'
p33825
S'end_time'
p33826
sS'required'
p33827
I00
sS'group_name'
p33828
S'Timing'
p33829
sa(dp33830
S'name'
p33831
S'execute_on'
p33832
sS'cpp_type'
p33833
S'MultiMooseEnum'
p33834
sS'default'
p33835
S'LINEAR NONLINEAR TIMESTEP_END'
p33836
sS'description'
p33837
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p33838
sS'required'
p33839
I00
sS'options'
p33840
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p33841
sS'group_name'
p33842
Nsa(dp33843
S'description'
p33844
S'The interval at which time steps are output to the solution file\n'
p33845
sS'cpp_type'
p33846
S'unsigned int'
p33847
sS'default'
p33848
S'1'
p33849
sS'name'
p33850
S'interval'
p33851
sS'required'
p33852
I00
sS'group_name'
p33853
S'Timing'
p33854
sa(dp33855
S'description'
p33856
S'Number of divisions applied to time step when outputting linear residuals\n'
p33857
sS'cpp_type'
p33858
S'double'
p33859
sS'default'
p33860
S'1000'
p33861
sS'name'
p33862
S'linear_residual_dt_divisor'
p33863
sS'required'
p33864
I00
sS'group_name'
p33865
S'PETSc'
p33866
sa(dp33867
S'description'
p33868
S'Specifies an end time to begin output on each linear residual evaluation\n'
p33869
sS'cpp_type'
p33870
S'double'
p33871
sS'default'
p33872
g3
sS'name'
p33873
S'linear_residual_end_time'
p33874
sS'required'
p33875
I00
sS'group_name'
p33876
S'PETSc'
p33877
sa(dp33878
S'description'
p33879
S'Specifies a start time to begin output on each linear residual evaluation\n'
p33880
sS'cpp_type'
p33881
S'double'
p33882
sS'default'
p33883
g3
sS'name'
p33884
S'linear_residual_start_time'
p33885
sS'required'
p33886
I00
sS'group_name'
p33887
S'PETSc'
p33888
sa(dp33889
S'description'
p33890
S'Specifies whether output occurs on each linear residual evaluation\n'
p33891
sS'cpp_type'
p33892
S'bool'
p33893
sS'default'
p33894
S'0'
p33895
sS'name'
p33896
S'linear_residuals'
p33897
sS'required'
p33898
I00
sS'group_name'
p33899
S'PETSc'
p33900
sa(dp33901
S'description'
p33902
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p33903
sS'cpp_type'
p33904
S'double'
p33905
sS'default'
p33906
S'1000'
p33907
sS'name'
p33908
S'nonlinear_residual_dt_divisor'
p33909
sS'required'
p33910
I00
sS'group_name'
p33911
S'PETSc'
p33912
sa(dp33913
S'description'
p33914
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p33915
sS'cpp_type'
p33916
S'double'
p33917
sS'default'
p33918
g3
sS'name'
p33919
S'nonlinear_residual_end_time'
p33920
sS'required'
p33921
I00
sS'group_name'
p33922
S'PETSc'
p33923
sa(dp33924
S'description'
p33925
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p33926
sS'cpp_type'
p33927
S'double'
p33928
sS'default'
p33929
g3
sS'name'
p33930
S'nonlinear_residual_start_time'
p33931
sS'required'
p33932
I00
sS'group_name'
p33933
S'PETSc'
p33934
sa(dp33935
S'description'
p33936
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p33937
sS'cpp_type'
p33938
S'bool'
p33939
sS'default'
p33940
S'0'
p33941
sS'name'
p33942
S'nonlinear_residuals'
p33943
sS'required'
p33944
I00
sS'group_name'
p33945
S'PETSc'
p33946
sa(dp33947
S'description'
p33948
S'The number of top residuals to print out (0 = no output)\n'
p33949
sS'cpp_type'
p33950
S'unsigned int'
p33951
sS'default'
p33952
S'0'
p33953
sS'name'
p33954
S'num_residuals'
p33955
sS'required'
p33956
I00
sS'group_name'
p33957
Nsa(dp33958
S'description'
p33959
S'Specifies whether output occurs on each linear residual evaluation\n'
p33960
sS'cpp_type'
p33961
S'bool'
p33962
sS'default'
p33963
S'0'
p33964
sS'name'
p33965
S'output_linear'
p33966
sS'required'
p33967
I00
sS'group_name'
p33968
Nsa(dp33969
S'description'
p33970
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p33971
sS'cpp_type'
p33972
S'bool'
p33973
sS'default'
p33974
S'0'
p33975
sS'name'
p33976
S'output_nonlinear'
p33977
sS'required'
p33978
I00
sS'group_name'
p33979
Nsa(dp33980
S'description'
p33981
S'Time at which this output object begins to operate\n'
p33982
sS'cpp_type'
p33983
S'double'
p33984
sS'default'
p33985
g3
sS'name'
p33986
S'start_time'
p33987
sS'required'
p33988
I00
sS'group_name'
p33989
S'Timing'
p33990
sa(dp33991
S'description'
p33992
S'Only export results at sync times\n'
p33993
sS'cpp_type'
p33994
S'bool'
p33995
sS'default'
p33996
S'0'
p33997
sS'name'
p33998
S'sync_only'
p33999
sS'required'
p34000
I00
sS'group_name'
p34001
S'Timing'
p34002
sa(dp34003
S'description'
p34004
S'Times at which the output and solution is forced to occur\n'
p34005
sS'cpp_type'
p34006
S'std::__1::vector<double, std::__1::allocator<double> >'
p34007
sS'default'
p34008
g3
sS'name'
p34009
S'sync_times'
p34010
sS'required'
p34011
I00
sS'group_name'
p34012
S'Timing'
p34013
sa(dp34014
S'description'
p34015
S'Time tolerance utilized checking start and end times\n'
p34016
sS'cpp_type'
p34017
S'double'
p34018
sS'default'
p34019
S'1e-14'
p34020
sS'name'
p34021
S'time_tolerance'
p34022
sS'required'
p34023
I00
sS'group_name'
p34024
S'Timing'
p34025
sa(dp34026
S'description'
p34027
g3
sS'cpp_type'
p34028
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34029
sS'default'
p34030
S'TopResidualDebugOutput'
p34031
sS'name'
p34032
S'type'
p34033
sS'required'
p34034
I00
sS'group_name'
p34035
Nsa(dp34036
S'description'
p34037
S'Enable/disable the use of the displaced mesh for outputting\n'
p34038
sS'cpp_type'
p34039
S'bool'
p34040
sS'default'
p34041
S'0'
p34042
sS'name'
p34043
S'use_displaced'
p34044
sS'required'
p34045
I00
sS'group_name'
p34046
NsasS'name'
p34047
S'/Outputs/TopResidualDebugOutput'
p34048
sa(dp34049
S'description'
p34050
g3
sS'subblocks'
p34051
NsS'parameters'
p34052
(lp34053
(dp34054
S'name'
p34055
S'additional_execute_on'
p34056
sS'cpp_type'
p34057
S'MultiMooseEnum'
p34058
sS'default'
p34059
g3
sS'description'
p34060
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p34061
sS'required'
p34062
I00
sS'options'
p34063
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p34064
sS'group_name'
p34065
Nsa(dp34066
S'description'
p34067
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34068
sS'cpp_type'
p34069
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34070
sS'default'
p34071
g3
sS'name'
p34072
S'control_tags'
p34073
sS'required'
p34074
I00
sS'group_name'
p34075
S'Advanced'
p34076
sa(dp34077
S'description'
p34078
S'Set the enabled status of the MooseObject.\n'
p34079
sS'cpp_type'
p34080
S'bool'
p34081
sS'default'
p34082
S'1'
p34083
sS'name'
p34084
S'enable'
p34085
sS'required'
p34086
I00
sS'group_name'
p34087
S'Advanced'
p34088
sa(dp34089
S'description'
p34090
S'Time at which this output object stop operating\n'
p34091
sS'cpp_type'
p34092
S'double'
p34093
sS'default'
p34094
g3
sS'name'
p34095
S'end_time'
p34096
sS'required'
p34097
I00
sS'group_name'
p34098
S'Timing'
p34099
sa(dp34100
S'name'
p34101
S'execute_on'
p34102
sS'cpp_type'
p34103
S'MultiMooseEnum'
p34104
sS'default'
p34105
S'NONLINEAR'
p34106
sS'description'
p34107
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p34108
sS'required'
p34109
I00
sS'options'
p34110
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p34111
sS'group_name'
p34112
Nsa(dp34113
S'description'
p34114
S'The interval at which time steps are output to the solution file\n'
p34115
sS'cpp_type'
p34116
S'unsigned int'
p34117
sS'default'
p34118
S'1'
p34119
sS'name'
p34120
S'interval'
p34121
sS'required'
p34122
I00
sS'group_name'
p34123
S'Timing'
p34124
sa(dp34125
S'description'
p34126
S'Number of divisions applied to time step when outputting linear residuals\n'
p34127
sS'cpp_type'
p34128
S'double'
p34129
sS'default'
p34130
S'1000'
p34131
sS'name'
p34132
S'linear_residual_dt_divisor'
p34133
sS'required'
p34134
I00
sS'group_name'
p34135
S'PETSc'
p34136
sa(dp34137
S'description'
p34138
S'Specifies an end time to begin output on each linear residual evaluation\n'
p34139
sS'cpp_type'
p34140
S'double'
p34141
sS'default'
p34142
g3
sS'name'
p34143
S'linear_residual_end_time'
p34144
sS'required'
p34145
I00
sS'group_name'
p34146
S'PETSc'
p34147
sa(dp34148
S'description'
p34149
S'Specifies a start time to begin output on each linear residual evaluation\n'
p34150
sS'cpp_type'
p34151
S'double'
p34152
sS'default'
p34153
g3
sS'name'
p34154
S'linear_residual_start_time'
p34155
sS'required'
p34156
I00
sS'group_name'
p34157
S'PETSc'
p34158
sa(dp34159
S'description'
p34160
S'Specifies whether output occurs on each linear residual evaluation\n'
p34161
sS'cpp_type'
p34162
S'bool'
p34163
sS'default'
p34164
S'0'
p34165
sS'name'
p34166
S'linear_residuals'
p34167
sS'required'
p34168
I00
sS'group_name'
p34169
S'PETSc'
p34170
sa(dp34171
S'description'
p34172
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p34173
sS'cpp_type'
p34174
S'double'
p34175
sS'default'
p34176
S'1000'
p34177
sS'name'
p34178
S'nonlinear_residual_dt_divisor'
p34179
sS'required'
p34180
I00
sS'group_name'
p34181
S'PETSc'
p34182
sa(dp34183
S'description'
p34184
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p34185
sS'cpp_type'
p34186
S'double'
p34187
sS'default'
p34188
g3
sS'name'
p34189
S'nonlinear_residual_end_time'
p34190
sS'required'
p34191
I00
sS'group_name'
p34192
S'PETSc'
p34193
sa(dp34194
S'description'
p34195
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p34196
sS'cpp_type'
p34197
S'double'
p34198
sS'default'
p34199
g3
sS'name'
p34200
S'nonlinear_residual_start_time'
p34201
sS'required'
p34202
I00
sS'group_name'
p34203
S'PETSc'
p34204
sa(dp34205
S'description'
p34206
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p34207
sS'cpp_type'
p34208
S'bool'
p34209
sS'default'
p34210
S'0'
p34211
sS'name'
p34212
S'nonlinear_residuals'
p34213
sS'required'
p34214
I00
sS'group_name'
p34215
S'PETSc'
p34216
sa(dp34217
S'description'
p34218
S'Specifies whether output occurs on each linear residual evaluation\n'
p34219
sS'cpp_type'
p34220
S'bool'
p34221
sS'default'
p34222
S'0'
p34223
sS'name'
p34224
S'output_linear'
p34225
sS'required'
p34226
I00
sS'group_name'
p34227
Nsa(dp34228
S'description'
p34229
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p34230
sS'cpp_type'
p34231
S'bool'
p34232
sS'default'
p34233
S'0'
p34234
sS'name'
p34235
S'output_nonlinear'
p34236
sS'required'
p34237
I00
sS'group_name'
p34238
Nsa(dp34239
S'description'
p34240
S'Time at which this output object begins to operate\n'
p34241
sS'cpp_type'
p34242
S'double'
p34243
sS'default'
p34244
g3
sS'name'
p34245
S'start_time'
p34246
sS'required'
p34247
I00
sS'group_name'
p34248
S'Timing'
p34249
sa(dp34250
S'description'
p34251
S'Only export results at sync times\n'
p34252
sS'cpp_type'
p34253
S'bool'
p34254
sS'default'
p34255
S'0'
p34256
sS'name'
p34257
S'sync_only'
p34258
sS'required'
p34259
I00
sS'group_name'
p34260
S'Timing'
p34261
sa(dp34262
S'description'
p34263
S'Times at which the output and solution is forced to occur\n'
p34264
sS'cpp_type'
p34265
S'std::__1::vector<double, std::__1::allocator<double> >'
p34266
sS'default'
p34267
g3
sS'name'
p34268
S'sync_times'
p34269
sS'required'
p34270
I00
sS'group_name'
p34271
S'Timing'
p34272
sa(dp34273
S'description'
p34274
S'Time tolerance utilized checking start and end times\n'
p34275
sS'cpp_type'
p34276
S'double'
p34277
sS'default'
p34278
S'1e-14'
p34279
sS'name'
p34280
S'time_tolerance'
p34281
sS'required'
p34282
I00
sS'group_name'
p34283
S'Timing'
p34284
sa(dp34285
S'description'
p34286
g3
sS'cpp_type'
p34287
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34288
sS'default'
p34289
S'VariableResidualNormsDebugOutput'
p34290
sS'name'
p34291
S'type'
p34292
sS'required'
p34293
I00
sS'group_name'
p34294
Nsa(dp34295
S'description'
p34296
S'Enable/disable the use of the displaced mesh for outputting\n'
p34297
sS'cpp_type'
p34298
S'bool'
p34299
sS'default'
p34300
S'0'
p34301
sS'name'
p34302
S'use_displaced'
p34303
sS'required'
p34304
I00
sS'group_name'
p34305
NsasS'name'
p34306
S'/Outputs/VariableResidualNormsDebugOutput'
p34307
sa(dp34308
S'description'
p34309
S'Object for outputting data in the XDA/XDR format\n'
p34310
sS'subblocks'
p34311
NsS'parameters'
p34312
(lp34313
(dp34314
S'name'
p34315
S'additional_execute_on'
p34316
sS'cpp_type'
p34317
S'MultiMooseEnum'
p34318
sS'default'
p34319
g3
sS'description'
p34320
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p34321
sS'required'
p34322
I00
sS'options'
p34323
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p34324
sS'group_name'
p34325
Nsa(dp34326
S'description'
p34327
S'When true the date and time are appended to the output filename.\n'
p34328
sS'cpp_type'
p34329
S'bool'
p34330
sS'default'
p34331
S'0'
p34332
sS'name'
p34333
S'append_date'
p34334
sS'required'
p34335
I00
sS'group_name'
p34336
Nsa(dp34337
S'description'
p34338
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p34339
sS'cpp_type'
p34340
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34341
sS'default'
p34342
g3
sS'name'
p34343
S'append_date_format'
p34344
sS'required'
p34345
I00
sS'group_name'
p34346
Nsa(dp34347
S'description'
p34348
S"Append '_oversample' to the output file base\n"
p34349
sS'cpp_type'
p34350
S'bool'
p34351
sS'default'
p34352
S'0'
p34353
sS'name'
p34354
S'append_oversample'
p34355
sS'required'
p34356
I00
sS'group_name'
p34357
Nsa(dp34358
S'description'
p34359
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34360
sS'cpp_type'
p34361
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34362
sS'default'
p34363
g3
sS'name'
p34364
S'control_tags'
p34365
sS'required'
p34366
I00
sS'group_name'
p34367
S'Advanced'
p34368
sa(dp34369
S'description'
p34370
S'Set the enabled status of the MooseObject.\n'
p34371
sS'cpp_type'
p34372
S'bool'
p34373
sS'default'
p34374
S'1'
p34375
sS'name'
p34376
S'enable'
p34377
sS'required'
p34378
I00
sS'group_name'
p34379
S'Advanced'
p34380
sa(dp34381
S'description'
p34382
S'Time at which this output object stop operating\n'
p34383
sS'cpp_type'
p34384
S'double'
p34385
sS'default'
p34386
g3
sS'name'
p34387
S'end_time'
p34388
sS'required'
p34389
I00
sS'group_name'
p34390
S'Timing'
p34391
sa(dp34392
S'name'
p34393
S'execute_on'
p34394
sS'cpp_type'
p34395
S'MultiMooseEnum'
p34396
sS'default'
p34397
S'INITIAL TIMESTEP_END'
p34398
sS'description'
p34399
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p34400
sS'required'
p34401
I00
sS'options'
p34402
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p34403
sS'group_name'
p34404
Nsa(dp34405
S'description'
p34406
S'The name of the mesh file to read, for oversampling\n'
p34407
sS'cpp_type'
p34408
S'MeshFileName'
p34409
sS'default'
p34410
g3
sS'name'
p34411
S'file'
p34412
sS'required'
p34413
I00
sS'group_name'
p34414
S'Oversampling'
p34415
sa(dp34416
S'description'
p34417
S'The desired solution output name without an extension\n'
p34418
sS'cpp_type'
p34419
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34420
sS'default'
p34421
g3
sS'name'
p34422
S'file_base'
p34423
sS'required'
p34424
I00
sS'group_name'
p34425
Nsa(dp34426
S'description'
p34427
S'The interval at which time steps are output to the solution file\n'
p34428
sS'cpp_type'
p34429
S'unsigned int'
p34430
sS'default'
p34431
S'1'
p34432
sS'name'
p34433
S'interval'
p34434
sS'required'
p34435
I00
sS'group_name'
p34436
S'Timing'
p34437
sa(dp34438
S'description'
p34439
S'Number of divisions applied to time step when outputting linear residuals\n'
p34440
sS'cpp_type'
p34441
S'double'
p34442
sS'default'
p34443
S'1000'
p34444
sS'name'
p34445
S'linear_residual_dt_divisor'
p34446
sS'required'
p34447
I00
sS'group_name'
p34448
S'PETSc'
p34449
sa(dp34450
S'description'
p34451
S'Specifies an end time to begin output on each linear residual evaluation\n'
p34452
sS'cpp_type'
p34453
S'double'
p34454
sS'default'
p34455
g3
sS'name'
p34456
S'linear_residual_end_time'
p34457
sS'required'
p34458
I00
sS'group_name'
p34459
S'PETSc'
p34460
sa(dp34461
S'description'
p34462
S'Specifies a start time to begin output on each linear residual evaluation\n'
p34463
sS'cpp_type'
p34464
S'double'
p34465
sS'default'
p34466
g3
sS'name'
p34467
S'linear_residual_start_time'
p34468
sS'required'
p34469
I00
sS'group_name'
p34470
S'PETSc'
p34471
sa(dp34472
S'description'
p34473
S'Specifies whether output occurs on each linear residual evaluation\n'
p34474
sS'cpp_type'
p34475
S'bool'
p34476
sS'default'
p34477
S'0'
p34478
sS'name'
p34479
S'linear_residuals'
p34480
sS'required'
p34481
I00
sS'group_name'
p34482
S'PETSc'
p34483
sa(dp34484
S'description'
p34485
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p34486
sS'cpp_type'
p34487
S'double'
p34488
sS'default'
p34489
S'1000'
p34490
sS'name'
p34491
S'nonlinear_residual_dt_divisor'
p34492
sS'required'
p34493
I00
sS'group_name'
p34494
S'PETSc'
p34495
sa(dp34496
S'description'
p34497
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p34498
sS'cpp_type'
p34499
S'double'
p34500
sS'default'
p34501
g3
sS'name'
p34502
S'nonlinear_residual_end_time'
p34503
sS'required'
p34504
I00
sS'group_name'
p34505
S'PETSc'
p34506
sa(dp34507
S'description'
p34508
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p34509
sS'cpp_type'
p34510
S'double'
p34511
sS'default'
p34512
g3
sS'name'
p34513
S'nonlinear_residual_start_time'
p34514
sS'required'
p34515
I00
sS'group_name'
p34516
S'PETSc'
p34517
sa(dp34518
S'description'
p34519
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p34520
sS'cpp_type'
p34521
S'bool'
p34522
sS'default'
p34523
S'0'
p34524
sS'name'
p34525
S'nonlinear_residuals'
p34526
sS'required'
p34527
I00
sS'group_name'
p34528
S'PETSc'
p34529
sa(dp34530
S'description'
p34531
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p34532
sS'cpp_type'
p34533
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34534
sS'default'
p34535
g3
sS'name'
p34536
S'output_if_base_contains'
p34537
sS'required'
p34538
I00
sS'group_name'
p34539
S'Advanced'
p34540
sa(dp34541
S'description'
p34542
S'Specifies whether output occurs on each linear residual evaluation\n'
p34543
sS'cpp_type'
p34544
S'bool'
p34545
sS'default'
p34546
S'0'
p34547
sS'name'
p34548
S'output_linear'
p34549
sS'required'
p34550
I00
sS'group_name'
p34551
Nsa(dp34552
S'description'
p34553
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p34554
sS'cpp_type'
p34555
S'bool'
p34556
sS'default'
p34557
S'0'
p34558
sS'name'
p34559
S'output_nonlinear'
p34560
sS'required'
p34561
I00
sS'group_name'
p34562
Nsa(dp34563
S'description'
p34564
S'Set to true to enable oversampling\n'
p34565
sS'cpp_type'
p34566
S'bool'
p34567
sS'default'
p34568
S'0'
p34569
sS'name'
p34570
S'oversample'
p34571
sS'required'
p34572
I00
sS'group_name'
p34573
Nsa(dp34574
S'description'
p34575
S'The number of for extension suffix (e.g., out.e-s002)\n'
p34576
sS'cpp_type'
p34577
S'unsigned int'
p34578
sS'default'
p34579
S'4'
p34580
sS'name'
p34581
S'padding'
p34582
sS'required'
p34583
I00
sS'group_name'
p34584
S'Advanced'
p34585
sa(dp34586
S'description'
p34587
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p34588
sS'cpp_type'
p34589
S'libMesh::Point'
p34590
sS'default'
p34591
g3
sS'name'
p34592
S'position'
p34593
sS'required'
p34594
I00
sS'group_name'
p34595
S'Oversampling'
p34596
sa(dp34597
S'description'
p34598
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p34599
sS'cpp_type'
p34600
S'unsigned int'
p34601
sS'default'
p34602
S'0'
p34603
sS'name'
p34604
S'refinements'
p34605
sS'required'
p34606
I00
sS'group_name'
p34607
S'Oversampling'
p34608
sa(dp34609
S'description'
p34610
S'Time at which this output object begins to operate\n'
p34611
sS'cpp_type'
p34612
S'double'
p34613
sS'default'
p34614
g3
sS'name'
p34615
S'start_time'
p34616
sS'required'
p34617
I00
sS'group_name'
p34618
S'Timing'
p34619
sa(dp34620
S'description'
p34621
S'Only export results at sync times\n'
p34622
sS'cpp_type'
p34623
S'bool'
p34624
sS'default'
p34625
S'0'
p34626
sS'name'
p34627
S'sync_only'
p34628
sS'required'
p34629
I00
sS'group_name'
p34630
S'Timing'
p34631
sa(dp34632
S'description'
p34633
S'Times at which the output and solution is forced to occur\n'
p34634
sS'cpp_type'
p34635
S'std::__1::vector<double, std::__1::allocator<double> >'
p34636
sS'default'
p34637
g3
sS'name'
p34638
S'sync_times'
p34639
sS'required'
p34640
I00
sS'group_name'
p34641
S'Timing'
p34642
sa(dp34643
S'description'
p34644
S'Time tolerance utilized checking start and end times\n'
p34645
sS'cpp_type'
p34646
S'double'
p34647
sS'default'
p34648
S'1e-14'
p34649
sS'name'
p34650
S'time_tolerance'
p34651
sS'required'
p34652
I00
sS'group_name'
p34653
S'Timing'
p34654
sa(dp34655
S'description'
p34656
g3
sS'cpp_type'
p34657
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34658
sS'default'
p34659
S'XDA'
p34660
sS'name'
p34661
S'type'
p34662
sS'required'
p34663
I00
sS'group_name'
p34664
Nsa(dp34665
S'description'
p34666
S'Enable/disable the use of the displaced mesh for outputting\n'
p34667
sS'cpp_type'
p34668
S'bool'
p34669
sS'default'
p34670
S'0'
p34671
sS'name'
p34672
S'use_displaced'
p34673
sS'required'
p34674
I00
sS'group_name'
p34675
NsasS'name'
p34676
S'/Outputs/XDA'
p34677
sa(dp34678
S'description'
p34679
S'Object for outputting data in the XDA/XDR format\n'
p34680
sS'subblocks'
p34681
NsS'parameters'
p34682
(lp34683
(dp34684
S'name'
p34685
S'additional_execute_on'
p34686
sS'cpp_type'
p34687
S'MultiMooseEnum'
p34688
sS'default'
p34689
g3
sS'description'
p34690
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p34691
sS'required'
p34692
I00
sS'options'
p34693
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p34694
sS'group_name'
p34695
Nsa(dp34696
S'description'
p34697
S'When true the date and time are appended to the output filename.\n'
p34698
sS'cpp_type'
p34699
S'bool'
p34700
sS'default'
p34701
S'0'
p34702
sS'name'
p34703
S'append_date'
p34704
sS'required'
p34705
I00
sS'group_name'
p34706
Nsa(dp34707
S'description'
p34708
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p34709
sS'cpp_type'
p34710
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34711
sS'default'
p34712
g3
sS'name'
p34713
S'append_date_format'
p34714
sS'required'
p34715
I00
sS'group_name'
p34716
Nsa(dp34717
S'description'
p34718
S"Append '_oversample' to the output file base\n"
p34719
sS'cpp_type'
p34720
S'bool'
p34721
sS'default'
p34722
S'0'
p34723
sS'name'
p34724
S'append_oversample'
p34725
sS'required'
p34726
I00
sS'group_name'
p34727
Nsa(dp34728
S'description'
p34729
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34730
sS'cpp_type'
p34731
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34732
sS'default'
p34733
g3
sS'name'
p34734
S'control_tags'
p34735
sS'required'
p34736
I00
sS'group_name'
p34737
S'Advanced'
p34738
sa(dp34739
S'description'
p34740
S'Set the enabled status of the MooseObject.\n'
p34741
sS'cpp_type'
p34742
S'bool'
p34743
sS'default'
p34744
S'1'
p34745
sS'name'
p34746
S'enable'
p34747
sS'required'
p34748
I00
sS'group_name'
p34749
S'Advanced'
p34750
sa(dp34751
S'description'
p34752
S'Time at which this output object stop operating\n'
p34753
sS'cpp_type'
p34754
S'double'
p34755
sS'default'
p34756
g3
sS'name'
p34757
S'end_time'
p34758
sS'required'
p34759
I00
sS'group_name'
p34760
S'Timing'
p34761
sa(dp34762
S'name'
p34763
S'execute_on'
p34764
sS'cpp_type'
p34765
S'MultiMooseEnum'
p34766
sS'default'
p34767
S'INITIAL TIMESTEP_END'
p34768
sS'description'
p34769
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p34770
sS'required'
p34771
I00
sS'options'
p34772
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p34773
sS'group_name'
p34774
Nsa(dp34775
S'description'
p34776
S'The name of the mesh file to read, for oversampling\n'
p34777
sS'cpp_type'
p34778
S'MeshFileName'
p34779
sS'default'
p34780
g3
sS'name'
p34781
S'file'
p34782
sS'required'
p34783
I00
sS'group_name'
p34784
S'Oversampling'
p34785
sa(dp34786
S'description'
p34787
S'The desired solution output name without an extension\n'
p34788
sS'cpp_type'
p34789
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34790
sS'default'
p34791
g3
sS'name'
p34792
S'file_base'
p34793
sS'required'
p34794
I00
sS'group_name'
p34795
Nsa(dp34796
S'description'
p34797
S'The interval at which time steps are output to the solution file\n'
p34798
sS'cpp_type'
p34799
S'unsigned int'
p34800
sS'default'
p34801
S'1'
p34802
sS'name'
p34803
S'interval'
p34804
sS'required'
p34805
I00
sS'group_name'
p34806
S'Timing'
p34807
sa(dp34808
S'description'
p34809
S'Number of divisions applied to time step when outputting linear residuals\n'
p34810
sS'cpp_type'
p34811
S'double'
p34812
sS'default'
p34813
S'1000'
p34814
sS'name'
p34815
S'linear_residual_dt_divisor'
p34816
sS'required'
p34817
I00
sS'group_name'
p34818
S'PETSc'
p34819
sa(dp34820
S'description'
p34821
S'Specifies an end time to begin output on each linear residual evaluation\n'
p34822
sS'cpp_type'
p34823
S'double'
p34824
sS'default'
p34825
g3
sS'name'
p34826
S'linear_residual_end_time'
p34827
sS'required'
p34828
I00
sS'group_name'
p34829
S'PETSc'
p34830
sa(dp34831
S'description'
p34832
S'Specifies a start time to begin output on each linear residual evaluation\n'
p34833
sS'cpp_type'
p34834
S'double'
p34835
sS'default'
p34836
g3
sS'name'
p34837
S'linear_residual_start_time'
p34838
sS'required'
p34839
I00
sS'group_name'
p34840
S'PETSc'
p34841
sa(dp34842
S'description'
p34843
S'Specifies whether output occurs on each linear residual evaluation\n'
p34844
sS'cpp_type'
p34845
S'bool'
p34846
sS'default'
p34847
S'0'
p34848
sS'name'
p34849
S'linear_residuals'
p34850
sS'required'
p34851
I00
sS'group_name'
p34852
S'PETSc'
p34853
sa(dp34854
S'description'
p34855
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p34856
sS'cpp_type'
p34857
S'double'
p34858
sS'default'
p34859
S'1000'
p34860
sS'name'
p34861
S'nonlinear_residual_dt_divisor'
p34862
sS'required'
p34863
I00
sS'group_name'
p34864
S'PETSc'
p34865
sa(dp34866
S'description'
p34867
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p34868
sS'cpp_type'
p34869
S'double'
p34870
sS'default'
p34871
g3
sS'name'
p34872
S'nonlinear_residual_end_time'
p34873
sS'required'
p34874
I00
sS'group_name'
p34875
S'PETSc'
p34876
sa(dp34877
S'description'
p34878
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p34879
sS'cpp_type'
p34880
S'double'
p34881
sS'default'
p34882
g3
sS'name'
p34883
S'nonlinear_residual_start_time'
p34884
sS'required'
p34885
I00
sS'group_name'
p34886
S'PETSc'
p34887
sa(dp34888
S'description'
p34889
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p34890
sS'cpp_type'
p34891
S'bool'
p34892
sS'default'
p34893
S'0'
p34894
sS'name'
p34895
S'nonlinear_residuals'
p34896
sS'required'
p34897
I00
sS'group_name'
p34898
S'PETSc'
p34899
sa(dp34900
S'description'
p34901
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p34902
sS'cpp_type'
p34903
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34904
sS'default'
p34905
g3
sS'name'
p34906
S'output_if_base_contains'
p34907
sS'required'
p34908
I00
sS'group_name'
p34909
S'Advanced'
p34910
sa(dp34911
S'description'
p34912
S'Specifies whether output occurs on each linear residual evaluation\n'
p34913
sS'cpp_type'
p34914
S'bool'
p34915
sS'default'
p34916
S'0'
p34917
sS'name'
p34918
S'output_linear'
p34919
sS'required'
p34920
I00
sS'group_name'
p34921
Nsa(dp34922
S'description'
p34923
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p34924
sS'cpp_type'
p34925
S'bool'
p34926
sS'default'
p34927
S'0'
p34928
sS'name'
p34929
S'output_nonlinear'
p34930
sS'required'
p34931
I00
sS'group_name'
p34932
Nsa(dp34933
S'description'
p34934
S'Set to true to enable oversampling\n'
p34935
sS'cpp_type'
p34936
S'bool'
p34937
sS'default'
p34938
S'0'
p34939
sS'name'
p34940
S'oversample'
p34941
sS'required'
p34942
I00
sS'group_name'
p34943
Nsa(dp34944
S'description'
p34945
S'The number of for extension suffix (e.g., out.e-s002)\n'
p34946
sS'cpp_type'
p34947
S'unsigned int'
p34948
sS'default'
p34949
S'4'
p34950
sS'name'
p34951
S'padding'
p34952
sS'required'
p34953
I00
sS'group_name'
p34954
S'Advanced'
p34955
sa(dp34956
S'description'
p34957
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p34958
sS'cpp_type'
p34959
S'libMesh::Point'
p34960
sS'default'
p34961
g3
sS'name'
p34962
S'position'
p34963
sS'required'
p34964
I00
sS'group_name'
p34965
S'Oversampling'
p34966
sa(dp34967
S'description'
p34968
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p34969
sS'cpp_type'
p34970
S'unsigned int'
p34971
sS'default'
p34972
S'0'
p34973
sS'name'
p34974
S'refinements'
p34975
sS'required'
p34976
I00
sS'group_name'
p34977
S'Oversampling'
p34978
sa(dp34979
S'description'
p34980
S'Time at which this output object begins to operate\n'
p34981
sS'cpp_type'
p34982
S'double'
p34983
sS'default'
p34984
g3
sS'name'
p34985
S'start_time'
p34986
sS'required'
p34987
I00
sS'group_name'
p34988
S'Timing'
p34989
sa(dp34990
S'description'
p34991
S'Only export results at sync times\n'
p34992
sS'cpp_type'
p34993
S'bool'
p34994
sS'default'
p34995
S'0'
p34996
sS'name'
p34997
S'sync_only'
p34998
sS'required'
p34999
I00
sS'group_name'
p35000
S'Timing'
p35001
sa(dp35002
S'description'
p35003
S'Times at which the output and solution is forced to occur\n'
p35004
sS'cpp_type'
p35005
S'std::__1::vector<double, std::__1::allocator<double> >'
p35006
sS'default'
p35007
g3
sS'name'
p35008
S'sync_times'
p35009
sS'required'
p35010
I00
sS'group_name'
p35011
S'Timing'
p35012
sa(dp35013
S'description'
p35014
S'Time tolerance utilized checking start and end times\n'
p35015
sS'cpp_type'
p35016
S'double'
p35017
sS'default'
p35018
S'1e-14'
p35019
sS'name'
p35020
S'time_tolerance'
p35021
sS'required'
p35022
I00
sS'group_name'
p35023
S'Timing'
p35024
sa(dp35025
S'description'
p35026
g3
sS'cpp_type'
p35027
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35028
sS'default'
p35029
S'XDR'
p35030
sS'name'
p35031
S'type'
p35032
sS'required'
p35033
I00
sS'group_name'
p35034
Nsa(dp35035
S'description'
p35036
S'Enable/disable the use of the displaced mesh for outputting\n'
p35037
sS'cpp_type'
p35038
S'bool'
p35039
sS'default'
p35040
S'0'
p35041
sS'name'
p35042
S'use_displaced'
p35043
sS'required'
p35044
I00
sS'group_name'
p35045
NsasS'name'
p35046
S'/Outputs/XDR'
p35047
sasS'parameters'
p35048
(lp35049
(dp35050
S'description'
p35051
S'When true the date and time are appended to the output filename.\n'
p35052
sS'cpp_type'
p35053
S'bool'
p35054
sS'default'
p35055
S'0'
p35056
sS'name'
p35057
S'append_date'
p35058
sS'required'
p35059
I00
sS'group_name'
p35060
Nsa(dp35061
S'description'
p35062
S'The format of the date/time to append (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p35063
sS'cpp_type'
p35064
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35065
sS'default'
p35066
g3
sS'name'
p35067
S'append_date_format'
p35068
sS'required'
p35069
I00
sS'group_name'
p35070
Nsa(dp35071
S'description'
p35072
S'Create checkpoint files using the default options.\n'
p35073
sS'cpp_type'
p35074
S'bool'
p35075
sS'default'
p35076
S'0'
p35077
sS'name'
p35078
S'checkpoint'
p35079
sS'required'
p35080
I00
sS'group_name'
p35081
Nsa(dp35082
S'description'
p35083
S'Set to false to turn off all coloring in all outputs\n'
p35084
sS'cpp_type'
p35085
S'bool'
p35086
sS'default'
p35087
S'1'
p35088
sS'name'
p35089
S'color'
p35090
sS'required'
p35091
I00
sS'group_name'
p35092
Nsa(dp35093
S'description'
p35094
S'Output the results using the default settings for Console output\n'
p35095
sS'cpp_type'
p35096
S'bool'
p35097
sS'default'
p35098
S'1'
p35099
sS'name'
p35100
S'console'
p35101
sS'required'
p35102
I00
sS'group_name'
p35103
Nsa(dp35104
S'description'
p35105
S'Enable the screen output of Control systems.\n'
p35106
sS'cpp_type'
p35107
S'bool'
p35108
sS'default'
p35109
S'0'
p35110
sS'name'
p35111
S'controls'
p35112
sS'required'
p35113
I00
sS'group_name'
p35114
Nsa(dp35115
S'description'
p35116
S'Output the scalar variable and postprocessors to a *.csv file using the default CSV output.\n'
p35117
sS'cpp_type'
p35118
S'bool'
p35119
sS'default'
p35120
S'0'
p35121
sS'name'
p35122
S'csv'
p35123
sS'required'
p35124
I00
sS'group_name'
p35125
Nsa(dp35126
S'description'
p35127
S'Create the dof map .json output file\n'
p35128
sS'cpp_type'
p35129
S'bool'
p35130
sS'default'
p35131
S'0'
p35132
sS'name'
p35133
S'dofmap'
p35134
sS'required'
p35135
I00
sS'group_name'
p35136
Nsa(dp35137
S'name'
p35138
S'execute_on'
p35139
sS'cpp_type'
p35140
S'MultiMooseEnum'
p35141
sS'default'
p35142
S'INITIAL TIMESTEP_END'
p35143
sS'description'
p35144
S"Set to (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment (default: 'initial timestep_end')\n"
p35145
sS'required'
p35146
I00
sS'options'
p35147
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p35148
sS'group_name'
p35149
Nsa(dp35150
S'description'
p35151
S'Output the results using the default settings for Exodus output\n'
p35152
sS'cpp_type'
p35153
S'bool'
p35154
sS'default'
p35155
S'0'
p35156
sS'name'
p35157
S'exodus'
p35158
sS'required'
p35159
I00
sS'group_name'
p35160
Nsa(dp35161
S'description'
p35162
S'Common file base name to be utilized with all output objects\n'
p35163
sS'cpp_type'
p35164
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35165
sS'default'
p35166
g3
sS'name'
p35167
S'file_base'
p35168
sS'required'
p35169
I00
sS'group_name'
p35170
Nsa(dp35171
S'description'
p35172
S'Output the results using the default settings for GMV output\n'
p35173
sS'cpp_type'
p35174
S'bool'
p35175
sS'default'
p35176
S'0'
p35177
sS'name'
p35178
S'gmv'
p35179
sS'required'
p35180
I00
sS'group_name'
p35181
Nsa(dp35182
S'description'
p35183
S'Output the scalar and postprocessor results using the default settings for GNUPlot output\n'
p35184
sS'cpp_type'
p35185
S'bool'
p35186
sS'default'
p35187
S'0'
p35188
sS'name'
p35189
S'gnuplot'
p35190
sS'required'
p35191
I00
sS'group_name'
p35192
Nsa(dp35193
S'description'
p35194
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p35195
sS'cpp_type'
p35196
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p35197
sS'default'
p35198
g3
sS'name'
p35199
S'hide'
p35200
sS'required'
p35201
I00
sS'group_name'
p35202
Nsa(dp35203
S'description'
p35204
S'The interval at which timesteps are output to the solution file\n'
p35205
sS'cpp_type'
p35206
S'unsigned int'
p35207
sS'default'
p35208
S'1'
p35209
sS'name'
p35210
S'interval'
p35211
sS'required'
p35212
I00
sS'group_name'
p35213
Nsa(dp35214
S'description'
p35215
S'Output the results using the default settings for Nemesis output\n'
p35216
sS'cpp_type'
p35217
S'bool'
p35218
sS'default'
p35219
S'0'
p35220
sS'name'
p35221
S'nemesis'
p35222
sS'required'
p35223
I00
sS'group_name'
p35224
Nsa(dp35225
S'description'
p35226
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p35227
sS'cpp_type'
p35228
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35229
sS'default'
p35230
g3
sS'name'
p35231
S'output_if_base_contains'
p35232
sS'required'
p35233
I00
sS'group_name'
p35234
Nsa(dp35235
S'description'
p35236
S'Enable printing of linear residuals to the screen (Console)\n'
p35237
sS'cpp_type'
p35238
S'bool'
p35239
sS'default'
p35240
S'1'
p35241
sS'name'
p35242
S'print_linear_residuals'
p35243
sS'required'
p35244
I00
sS'group_name'
p35245
Nsa(dp35246
S'description'
p35247
S'When true, each time the mesh is changed the mesh information is printed\n'
p35248
sS'cpp_type'
p35249
S'bool'
p35250
sS'default'
p35251
S'0'
p35252
sS'name'
p35253
S'print_mesh_changed_info'
p35254
sS'required'
p35255
I00
sS'group_name'
p35256
Nsa(dp35257
S'description'
p35258
S'Enable printing of the performance log to the screen (Console)\n'
p35259
sS'cpp_type'
p35260
S'bool'
p35261
sS'default'
p35262
S'0'
p35263
sS'name'
p35264
S'print_perf_log'
p35265
sS'required'
p35266
I00
sS'group_name'
p35267
Nsa(dp35268
S'description'
p35269
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p35270
sS'cpp_type'
p35271
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p35272
sS'default'
p35273
g3
sS'name'
p35274
S'show'
p35275
sS'required'
p35276
I00
sS'group_name'
p35277
Nsa(dp35278
S'description'
p35279
S'Print a solution history file (.slh) using the default settings\n'
p35280
sS'cpp_type'
p35281
S'bool'
p35282
sS'default'
p35283
S'0'
p35284
sS'name'
p35285
S'solution_history'
p35286
sS'required'
p35287
I00
sS'group_name'
p35288
Nsa(dp35289
S'description'
p35290
S'Times at which the output and solution is forced to occur\n'
p35291
sS'cpp_type'
p35292
S'std::__1::vector<double, std::__1::allocator<double> >'
p35293
sS'default'
p35294
g3
sS'name'
p35295
S'sync_times'
p35296
sS'required'
p35297
I00
sS'group_name'
p35298
Nsa(dp35299
S'description'
p35300
S'Output the results using the default settings for Tecplot output\n'
p35301
sS'cpp_type'
p35302
S'bool'
p35303
sS'default'
p35304
S'0'
p35305
sS'name'
p35306
S'tecplot'
p35307
sS'required'
p35308
I00
sS'group_name'
p35309
Nsa(dp35310
S'description'
p35311
S'Output the results using the default settings for VTKOutput output\n'
p35312
sS'cpp_type'
p35313
S'bool'
p35314
sS'default'
p35315
S'0'
p35316
sS'name'
p35317
S'vtk'
p35318
sS'required'
p35319
I00
sS'group_name'
p35320
Nsa(dp35321
S'description'
p35322
S'Output the results using the default settings for XDA/XDR output (ascii)\n'
p35323
sS'cpp_type'
p35324
S'bool'
p35325
sS'default'
p35326
S'0'
p35327
sS'name'
p35328
S'xda'
p35329
sS'required'
p35330
I00
sS'group_name'
p35331
Nsa(dp35332
S'description'
p35333
S'Output the results using the default settings for XDA/XDR output (binary)\n'
p35334
sS'cpp_type'
p35335
S'bool'
p35336
sS'default'
p35337
S'0'
p35338
sS'name'
p35339
S'xdr'
p35340
sS'required'
p35341
I00
sS'group_name'
p35342
NsasS'name'
p35343
S'/Outputs'
p35344
sa(dp35345
S'description'
p35346
g3
sS'subblocks'
p35347
(lp35348
(dp35349
S'description'
p35350
g3
sS'subblocks'
p35351
NsS'parameters'
p35352
(lp35353
(dp35354
S'description'
p35355
S'A string representing the Moose Object that will be built by this Action\n'
p35356
sS'cpp_type'
p35357
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35358
sS'default'
p35359
g3
sS'name'
p35360
S'type'
p35361
sS'required'
p35362
I01
sS'group_name'
p35363
NsasS'name'
p35364
S'/Postprocessors/*'
p35365
sa(dp35366
S'description'
p35367
g3
sS'subblocks'
p35368
NsS'parameters'
p35369
(lp35370
(dp35371
S'description'
p35372
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35373
sS'cpp_type'
p35374
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p35375
sS'default'
p35376
g3
sS'name'
p35377
S'boundary'
p35378
sS'required'
p35379
I01
sS'group_name'
p35380
Nsa(dp35381
S'description'
p35382
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35383
sS'cpp_type'
p35384
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35385
sS'default'
p35386
g3
sS'name'
p35387
S'control_tags'
p35388
sS'required'
p35389
I00
sS'group_name'
p35390
S'Advanced'
p35391
sa(dp35392
S'description'
p35393
S'Set the enabled status of the MooseObject.\n'
p35394
sS'cpp_type'
p35395
S'bool'
p35396
sS'default'
p35397
S'1'
p35398
sS'name'
p35399
S'enable'
p35400
sS'required'
p35401
I00
sS'group_name'
p35402
S'Advanced'
p35403
sa(dp35404
S'name'
p35405
S'execute_on'
p35406
sS'cpp_type'
p35407
S'MultiMooseEnum'
p35408
sS'default'
p35409
S'TIMESTEP_END'
p35410
sS'description'
p35411
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35412
sS'required'
p35413
I00
sS'options'
p35414
S'none initial linear nonlinear timestep_end timestep_begin custom'
p35415
sS'group_name'
p35416
Nsa(dp35417
S'description'
p35418
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p35419
sS'cpp_type'
p35420
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p35421
sS'default'
p35422
g3
sS'name'
p35423
S'outputs'
p35424
sS'required'
p35425
I00
sS'group_name'
p35426
S'Advanced'
p35427
sa(dp35428
S'description'
p35429
g3
sS'cpp_type'
p35430
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35431
sS'default'
p35432
S'AreaPostprocessor'
p35433
sS'name'
p35434
S'type'
p35435
sS'required'
p35436
I00
sS'group_name'
p35437
Nsa(dp35438
S'description'
p35439
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35440
sS'cpp_type'
p35441
S'bool'
p35442
sS'default'
p35443
S'0'
p35444
sS'name'
p35445
S'use_displaced_mesh'
p35446
sS'required'
p35447
I00
sS'group_name'
p35448
S'Advanced'
p35449
sasS'name'
p35450
S'/Postprocessors/AreaPostprocessor'
p35451
sa(dp35452
S'description'
p35453
g3
sS'subblocks'
p35454
NsS'parameters'
p35455
(lp35456
(dp35457
S'description'
p35458
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35459
sS'cpp_type'
p35460
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p35461
sS'default'
p35462
g3
sS'name'
p35463
S'block'
p35464
sS'required'
p35465
I00
sS'group_name'
p35466
Nsa(dp35467
S'description'
p35468
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35469
sS'cpp_type'
p35470
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35471
sS'default'
p35472
g3
sS'name'
p35473
S'control_tags'
p35474
sS'required'
p35475
I00
sS'group_name'
p35476
S'Advanced'
p35477
sa(dp35478
S'description'
p35479
S'Set the enabled status of the MooseObject.\n'
p35480
sS'cpp_type'
p35481
S'bool'
p35482
sS'default'
p35483
S'1'
p35484
sS'name'
p35485
S'enable'
p35486
sS'required'
p35487
I00
sS'group_name'
p35488
S'Advanced'
p35489
sa(dp35490
S'name'
p35491
S'execute_on'
p35492
sS'cpp_type'
p35493
S'MultiMooseEnum'
p35494
sS'default'
p35495
S'TIMESTEP_END'
p35496
sS'description'
p35497
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35498
sS'required'
p35499
I00
sS'options'
p35500
S'none initial linear nonlinear timestep_end timestep_begin custom'
p35501
sS'group_name'
p35502
Nsa(dp35503
S'description'
p35504
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p35505
sS'cpp_type'
p35506
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p35507
sS'default'
p35508
g3
sS'name'
p35509
S'outputs'
p35510
sS'required'
p35511
I00
sS'group_name'
p35512
S'Advanced'
p35513
sa(dp35514
S'description'
p35515
S'The seed for the master random number generator\n'
p35516
sS'cpp_type'
p35517
S'unsigned int'
p35518
sS'default'
p35519
S'0'
p35520
sS'name'
p35521
S'seed'
p35522
sS'required'
p35523
I00
sS'group_name'
p35524
S'Advanced'
p35525
sa(dp35526
S'description'
p35527
g3
sS'cpp_type'
p35528
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35529
sS'default'
p35530
S'AverageElementSize'
p35531
sS'name'
p35532
S'type'
p35533
sS'required'
p35534
I00
sS'group_name'
p35535
Nsa(dp35536
S'description'
p35537
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35538
sS'cpp_type'
p35539
S'bool'
p35540
sS'default'
p35541
S'0'
p35542
sS'name'
p35543
S'use_displaced_mesh'
p35544
sS'required'
p35545
I00
sS'group_name'
p35546
S'Advanced'
p35547
sa(dp35548
S'description'
p35549
S'The name of the variable that this object operates on\n'
p35550
sS'cpp_type'
p35551
S'std::vector<VariableName>'
p35552
sS'default'
p35553
g3
sS'name'
p35554
S'variable'
p35555
sS'required'
p35556
I01
sS'group_name'
p35557
NsasS'name'
p35558
S'/Postprocessors/AverageElementSize'
p35559
sa(dp35560
S'description'
p35561
g3
sS'subblocks'
p35562
NsS'parameters'
p35563
(lp35564
(dp35565
S'description'
p35566
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35567
sS'cpp_type'
p35568
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p35569
sS'default'
p35570
g3
sS'name'
p35571
S'block'
p35572
sS'required'
p35573
I00
sS'group_name'
p35574
Nsa(dp35575
S'description'
p35576
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35577
sS'cpp_type'
p35578
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p35579
sS'default'
p35580
g3
sS'name'
p35581
S'boundary'
p35582
sS'required'
p35583
I00
sS'group_name'
p35584
Nsa(dp35585
S'description'
p35586
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35587
sS'cpp_type'
p35588
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35589
sS'default'
p35590
g3
sS'name'
p35591
S'control_tags'
p35592
sS'required'
p35593
I00
sS'group_name'
p35594
S'Advanced'
p35595
sa(dp35596
S'description'
p35597
S'Set the enabled status of the MooseObject.\n'
p35598
sS'cpp_type'
p35599
S'bool'
p35600
sS'default'
p35601
S'1'
p35602
sS'name'
p35603
S'enable'
p35604
sS'required'
p35605
I00
sS'group_name'
p35606
S'Advanced'
p35607
sa(dp35608
S'name'
p35609
S'execute_on'
p35610
sS'cpp_type'
p35611
S'MultiMooseEnum'
p35612
sS'default'
p35613
S'TIMESTEP_END'
p35614
sS'description'
p35615
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35616
sS'required'
p35617
I00
sS'options'
p35618
S'none initial linear nonlinear timestep_end timestep_begin custom'
p35619
sS'group_name'
p35620
Nsa(dp35621
S'description'
p35622
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p35623
sS'cpp_type'
p35624
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p35625
sS'default'
p35626
g3
sS'name'
p35627
S'outputs'
p35628
sS'required'
p35629
I00
sS'group_name'
p35630
S'Advanced'
p35631
sa(dp35632
S'description'
p35633
S'The seed for the master random number generator\n'
p35634
sS'cpp_type'
p35635
S'unsigned int'
p35636
sS'default'
p35637
S'0'
p35638
sS'name'
p35639
S'seed'
p35640
sS'required'
p35641
I00
sS'group_name'
p35642
S'Advanced'
p35643
sa(dp35644
S'description'
p35645
g3
sS'cpp_type'
p35646
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35647
sS'default'
p35648
S'AverageNodalVariableValue'
p35649
sS'name'
p35650
S'type'
p35651
sS'required'
p35652
I00
sS'group_name'
p35653
Nsa(dp35654
S'description'
p35655
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p35656
sS'cpp_type'
p35657
S'bool'
p35658
sS'default'
p35659
S'0'
p35660
sS'name'
p35661
S'unique_node_execute'
p35662
sS'required'
p35663
I00
sS'group_name'
p35664
Nsa(dp35665
S'description'
p35666
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35667
sS'cpp_type'
p35668
S'bool'
p35669
sS'default'
p35670
S'0'
p35671
sS'name'
p35672
S'use_displaced_mesh'
p35673
sS'required'
p35674
I00
sS'group_name'
p35675
S'Advanced'
p35676
sa(dp35677
S'description'
p35678
S'The name of the variable that this postprocessor operates on\n'
p35679
sS'cpp_type'
p35680
S'std::vector<VariableName>'
p35681
sS'default'
p35682
g3
sS'name'
p35683
S'variable'
p35684
sS'required'
p35685
I01
sS'group_name'
p35686
NsasS'name'
p35687
S'/Postprocessors/AverageNodalVariableValue'
p35688
sa(dp35689
S'description'
p35690
g3
sS'subblocks'
p35691
NsS'parameters'
p35692
(lp35693
(dp35694
S'description'
p35695
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35696
sS'cpp_type'
p35697
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p35698
sS'default'
p35699
g3
sS'name'
p35700
S'boundary'
p35701
sS'required'
p35702
I01
sS'group_name'
p35703
Nsa(dp35704
S'description'
p35705
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35706
sS'cpp_type'
p35707
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35708
sS'default'
p35709
g3
sS'name'
p35710
S'control_tags'
p35711
sS'required'
p35712
I00
sS'group_name'
p35713
S'Advanced'
p35714
sa(dp35715
S'description'
p35716
S'Set the enabled status of the MooseObject.\n'
p35717
sS'cpp_type'
p35718
S'bool'
p35719
sS'default'
p35720
S'1'
p35721
sS'name'
p35722
S'enable'
p35723
sS'required'
p35724
I00
sS'group_name'
p35725
S'Advanced'
p35726
sa(dp35727
S'name'
p35728
S'execute_on'
p35729
sS'cpp_type'
p35730
S'MultiMooseEnum'
p35731
sS'default'
p35732
S'TIMESTEP_END'
p35733
sS'description'
p35734
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35735
sS'required'
p35736
I00
sS'options'
p35737
S'none initial linear nonlinear timestep_end timestep_begin custom'
p35738
sS'group_name'
p35739
Nsa(dp35740
S'description'
p35741
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p35742
sS'cpp_type'
p35743
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p35744
sS'default'
p35745
g3
sS'name'
p35746
S'outputs'
p35747
sS'required'
p35748
I00
sS'group_name'
p35749
S'Advanced'
p35750
sa(dp35751
S'description'
p35752
g3
sS'cpp_type'
p35753
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35754
sS'default'
p35755
S'AxisymmetricCenterlineAverageValue'
p35756
sS'name'
p35757
S'type'
p35758
sS'required'
p35759
I00
sS'group_name'
p35760
Nsa(dp35761
S'description'
p35762
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35763
sS'cpp_type'
p35764
S'bool'
p35765
sS'default'
p35766
S'0'
p35767
sS'name'
p35768
S'use_displaced_mesh'
p35769
sS'required'
p35770
I00
sS'group_name'
p35771
S'Advanced'
p35772
sa(dp35773
S'description'
p35774
S'The name of the variable that this boundary condition applies to\n'
p35775
sS'cpp_type'
p35776
S'std::vector<VariableName>'
p35777
sS'default'
p35778
g3
sS'name'
p35779
S'variable'
p35780
sS'required'
p35781
I01
sS'group_name'
p35782
NsasS'name'
p35783
S'/Postprocessors/AxisymmetricCenterlineAverageValue'
p35784
sa(dp35785
S'description'
p35786
g3
sS'subblocks'
p35787
NsS'parameters'
p35788
(lp35789
(dp35790
S'description'
p35791
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35792
sS'cpp_type'
p35793
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35794
sS'default'
p35795
g3
sS'name'
p35796
S'control_tags'
p35797
sS'required'
p35798
I00
sS'group_name'
p35799
S'Advanced'
p35800
sa(dp35801
S'description'
p35802
S'Set the enabled status of the MooseObject.\n'
p35803
sS'cpp_type'
p35804
S'bool'
p35805
sS'default'
p35806
S'1'
p35807
sS'name'
p35808
S'enable'
p35809
sS'required'
p35810
I00
sS'group_name'
p35811
S'Advanced'
p35812
sa(dp35813
S'name'
p35814
S'execute_on'
p35815
sS'cpp_type'
p35816
S'MultiMooseEnum'
p35817
sS'default'
p35818
S'TIMESTEP_END'
p35819
sS'description'
p35820
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35821
sS'required'
p35822
I00
sS'options'
p35823
S'none initial linear nonlinear timestep_end timestep_begin custom'
p35824
sS'group_name'
p35825
Nsa(dp35826
S'description'
p35827
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p35828
sS'cpp_type'
p35829
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p35830
sS'default'
p35831
g3
sS'name'
p35832
S'outputs'
p35833
sS'required'
p35834
I00
sS'group_name'
p35835
S'Advanced'
p35836
sa(dp35837
S'description'
p35838
S'The name of the postprocessor\n'
p35839
sS'cpp_type'
p35840
S'PostprocessorName'
p35841
sS'default'
p35842
g3
sS'name'
p35843
S'postprocessor'
p35844
sS'required'
p35845
I01
sS'group_name'
p35846
Nsa(dp35847
S'description'
p35848
g3
sS'cpp_type'
p35849
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35850
sS'default'
p35851
S'CumulativeValuePostprocessor'
p35852
sS'name'
p35853
S'type'
p35854
sS'required'
p35855
I00
sS'group_name'
p35856
Nsa(dp35857
S'description'
p35858
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35859
sS'cpp_type'
p35860
S'bool'
p35861
sS'default'
p35862
S'0'
p35863
sS'name'
p35864
S'use_displaced_mesh'
p35865
sS'required'
p35866
I00
sS'group_name'
p35867
S'Advanced'
p35868
sasS'name'
p35869
S'/Postprocessors/CumulativeValuePostprocessor'
p35870
sa(dp35871
S'description'
p35872
g3
sS'subblocks'
p35873
NsS'parameters'
p35874
(lp35875
(dp35876
S'description'
p35877
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35878
sS'cpp_type'
p35879
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35880
sS'default'
p35881
g3
sS'name'
p35882
S'control_tags'
p35883
sS'required'
p35884
I00
sS'group_name'
p35885
S'Advanced'
p35886
sa(dp35887
S'description'
p35888
S'Set the enabled status of the MooseObject.\n'
p35889
sS'cpp_type'
p35890
S'bool'
p35891
sS'default'
p35892
S'1'
p35893
sS'name'
p35894
S'enable'
p35895
sS'required'
p35896
I00
sS'group_name'
p35897
S'Advanced'
p35898
sa(dp35899
S'name'
p35900
S'execute_on'
p35901
sS'cpp_type'
p35902
S'MultiMooseEnum'
p35903
sS'default'
p35904
S'TIMESTEP_END'
p35905
sS'description'
p35906
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35907
sS'required'
p35908
I00
sS'options'
p35909
S'none initial linear nonlinear timestep_end timestep_begin custom'
p35910
sS'group_name'
p35911
Nsa(dp35912
S'description'
p35913
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p35914
sS'cpp_type'
p35915
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p35916
sS'default'
p35917
g3
sS'name'
p35918
S'outputs'
p35919
sS'required'
p35920
I00
sS'group_name'
p35921
S'Advanced'
p35922
sa(dp35923
S'description'
p35924
g3
sS'cpp_type'
p35925
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35926
sS'default'
p35927
S'DifferencePostprocessor'
p35928
sS'name'
p35929
S'type'
p35930
sS'required'
p35931
I00
sS'group_name'
p35932
Nsa(dp35933
S'description'
p35934
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35935
sS'cpp_type'
p35936
S'bool'
p35937
sS'default'
p35938
S'0'
p35939
sS'name'
p35940
S'use_displaced_mesh'
p35941
sS'required'
p35942
I00
sS'group_name'
p35943
S'Advanced'
p35944
sa(dp35945
S'description'
p35946
S'First value\n'
p35947
sS'cpp_type'
p35948
S'PostprocessorName'
p35949
sS'default'
p35950
g3
sS'name'
p35951
S'value1'
p35952
sS'required'
p35953
I01
sS'group_name'
p35954
Nsa(dp35955
S'description'
p35956
S'Second value\n'
p35957
sS'cpp_type'
p35958
S'PostprocessorName'
p35959
sS'default'
p35960
g3
sS'name'
p35961
S'value2'
p35962
sS'required'
p35963
I01
sS'group_name'
p35964
NsasS'name'
p35965
S'/Postprocessors/DifferencePostprocessor'
p35966
sa(dp35967
S'description'
p35968
g3
sS'subblocks'
p35969
NsS'parameters'
p35970
(lp35971
(dp35972
S'description'
p35973
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35974
sS'cpp_type'
p35975
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p35976
sS'default'
p35977
g3
sS'name'
p35978
S'block'
p35979
sS'required'
p35980
I00
sS'group_name'
p35981
Nsa(dp35982
S'description'
p35983
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35984
sS'cpp_type'
p35985
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35986
sS'default'
p35987
g3
sS'name'
p35988
S'control_tags'
p35989
sS'required'
p35990
I00
sS'group_name'
p35991
S'Advanced'
p35992
sa(dp35993
S'description'
p35994
S'Set the enabled status of the MooseObject.\n'
p35995
sS'cpp_type'
p35996
S'bool'
p35997
sS'default'
p35998
S'1'
p35999
sS'name'
p36000
S'enable'
p36001
sS'required'
p36002
I00
sS'group_name'
p36003
S'Advanced'
p36004
sa(dp36005
S'name'
p36006
S'execute_on'
p36007
sS'cpp_type'
p36008
S'MultiMooseEnum'
p36009
sS'default'
p36010
S'TIMESTEP_END'
p36011
sS'description'
p36012
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36013
sS'required'
p36014
I00
sS'options'
p36015
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36016
sS'group_name'
p36017
Nsa(dp36018
S'description'
p36019
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36020
sS'cpp_type'
p36021
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36022
sS'default'
p36023
g3
sS'name'
p36024
S'outputs'
p36025
sS'required'
p36026
I00
sS'group_name'
p36027
S'Advanced'
p36028
sa(dp36029
S'description'
p36030
S'The seed for the master random number generator\n'
p36031
sS'cpp_type'
p36032
S'unsigned int'
p36033
sS'default'
p36034
S'0'
p36035
sS'name'
p36036
S'seed'
p36037
sS'required'
p36038
I00
sS'group_name'
p36039
S'Advanced'
p36040
sa(dp36041
S'description'
p36042
g3
sS'cpp_type'
p36043
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36044
sS'default'
p36045
S'ElementAverageTimeDerivative'
p36046
sS'name'
p36047
S'type'
p36048
sS'required'
p36049
I00
sS'group_name'
p36050
Nsa(dp36051
S'description'
p36052
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36053
sS'cpp_type'
p36054
S'bool'
p36055
sS'default'
p36056
S'0'
p36057
sS'name'
p36058
S'use_displaced_mesh'
p36059
sS'required'
p36060
I00
sS'group_name'
p36061
S'Advanced'
p36062
sa(dp36063
S'description'
p36064
S'The name of the variable that this object operates on\n'
p36065
sS'cpp_type'
p36066
S'std::vector<VariableName>'
p36067
sS'default'
p36068
g3
sS'name'
p36069
S'variable'
p36070
sS'required'
p36071
I01
sS'group_name'
p36072
NsasS'name'
p36073
S'/Postprocessors/ElementAverageTimeDerivative'
p36074
sa(dp36075
S'description'
p36076
g3
sS'subblocks'
p36077
NsS'parameters'
p36078
(lp36079
(dp36080
S'description'
p36081
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36082
sS'cpp_type'
p36083
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36084
sS'default'
p36085
g3
sS'name'
p36086
S'block'
p36087
sS'required'
p36088
I00
sS'group_name'
p36089
Nsa(dp36090
S'description'
p36091
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36092
sS'cpp_type'
p36093
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36094
sS'default'
p36095
g3
sS'name'
p36096
S'control_tags'
p36097
sS'required'
p36098
I00
sS'group_name'
p36099
S'Advanced'
p36100
sa(dp36101
S'description'
p36102
S'Set the enabled status of the MooseObject.\n'
p36103
sS'cpp_type'
p36104
S'bool'
p36105
sS'default'
p36106
S'1'
p36107
sS'name'
p36108
S'enable'
p36109
sS'required'
p36110
I00
sS'group_name'
p36111
S'Advanced'
p36112
sa(dp36113
S'name'
p36114
S'execute_on'
p36115
sS'cpp_type'
p36116
S'MultiMooseEnum'
p36117
sS'default'
p36118
S'TIMESTEP_END'
p36119
sS'description'
p36120
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36121
sS'required'
p36122
I00
sS'options'
p36123
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36124
sS'group_name'
p36125
Nsa(dp36126
S'description'
p36127
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36128
sS'cpp_type'
p36129
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36130
sS'default'
p36131
g3
sS'name'
p36132
S'outputs'
p36133
sS'required'
p36134
I00
sS'group_name'
p36135
S'Advanced'
p36136
sa(dp36137
S'description'
p36138
S'The seed for the master random number generator\n'
p36139
sS'cpp_type'
p36140
S'unsigned int'
p36141
sS'default'
p36142
S'0'
p36143
sS'name'
p36144
S'seed'
p36145
sS'required'
p36146
I00
sS'group_name'
p36147
S'Advanced'
p36148
sa(dp36149
S'description'
p36150
g3
sS'cpp_type'
p36151
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36152
sS'default'
p36153
S'ElementAverageValue'
p36154
sS'name'
p36155
S'type'
p36156
sS'required'
p36157
I00
sS'group_name'
p36158
Nsa(dp36159
S'description'
p36160
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36161
sS'cpp_type'
p36162
S'bool'
p36163
sS'default'
p36164
S'0'
p36165
sS'name'
p36166
S'use_displaced_mesh'
p36167
sS'required'
p36168
I00
sS'group_name'
p36169
S'Advanced'
p36170
sa(dp36171
S'description'
p36172
S'The name of the variable that this object operates on\n'
p36173
sS'cpp_type'
p36174
S'std::vector<VariableName>'
p36175
sS'default'
p36176
g3
sS'name'
p36177
S'variable'
p36178
sS'required'
p36179
I01
sS'group_name'
p36180
NsasS'name'
p36181
S'/Postprocessors/ElementAverageValue'
p36182
sa(dp36183
S'description'
p36184
g3
sS'subblocks'
p36185
NsS'parameters'
p36186
(lp36187
(dp36188
S'description'
p36189
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36190
sS'cpp_type'
p36191
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36192
sS'default'
p36193
g3
sS'name'
p36194
S'block'
p36195
sS'required'
p36196
I00
sS'group_name'
p36197
Nsa(dp36198
S'description'
p36199
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36200
sS'cpp_type'
p36201
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36202
sS'default'
p36203
g3
sS'name'
p36204
S'control_tags'
p36205
sS'required'
p36206
I00
sS'group_name'
p36207
S'Advanced'
p36208
sa(dp36209
S'description'
p36210
S'Set the enabled status of the MooseObject.\n'
p36211
sS'cpp_type'
p36212
S'bool'
p36213
sS'default'
p36214
S'1'
p36215
sS'name'
p36216
S'enable'
p36217
sS'required'
p36218
I00
sS'group_name'
p36219
S'Advanced'
p36220
sa(dp36221
S'name'
p36222
S'execute_on'
p36223
sS'cpp_type'
p36224
S'MultiMooseEnum'
p36225
sS'default'
p36226
S'TIMESTEP_END'
p36227
sS'description'
p36228
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36229
sS'required'
p36230
I00
sS'options'
p36231
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36232
sS'group_name'
p36233
Nsa(dp36234
S'description'
p36235
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36236
sS'cpp_type'
p36237
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36238
sS'default'
p36239
g3
sS'name'
p36240
S'outputs'
p36241
sS'required'
p36242
I00
sS'group_name'
p36243
S'Advanced'
p36244
sa(dp36245
S'description'
p36246
S'The seed for the master random number generator\n'
p36247
sS'cpp_type'
p36248
S'unsigned int'
p36249
sS'default'
p36250
S'0'
p36251
sS'name'
p36252
S'seed'
p36253
sS'required'
p36254
I00
sS'group_name'
p36255
S'Advanced'
p36256
sa(dp36257
S'description'
p36258
g3
sS'cpp_type'
p36259
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36260
sS'default'
p36261
S'ElementExtremeValue'
p36262
sS'name'
p36263
S'type'
p36264
sS'required'
p36265
I00
sS'group_name'
p36266
Nsa(dp36267
S'description'
p36268
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36269
sS'cpp_type'
p36270
S'bool'
p36271
sS'default'
p36272
S'0'
p36273
sS'name'
p36274
S'use_displaced_mesh'
p36275
sS'required'
p36276
I00
sS'group_name'
p36277
S'Advanced'
p36278
sa(dp36279
S'name'
p36280
S'value_type'
p36281
sS'cpp_type'
p36282
S'MooseEnum'
p36283
sS'default'
p36284
S'max'
p36285
sS'description'
p36286
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p36287
sS'required'
p36288
I00
sS'options'
p36289
S'max min'
p36290
sS'group_name'
p36291
Nsa(dp36292
S'description'
p36293
S'The name of the variable that this postprocessor operates on\n'
p36294
sS'cpp_type'
p36295
S'std::vector<VariableName>'
p36296
sS'default'
p36297
g3
sS'name'
p36298
S'variable'
p36299
sS'required'
p36300
I01
sS'group_name'
p36301
NsasS'name'
p36302
S'/Postprocessors/ElementExtremeValue'
p36303
sa(dp36304
S'description'
p36305
g3
sS'subblocks'
p36306
NsS'parameters'
p36307
(lp36308
(dp36309
S'description'
p36310
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36311
sS'cpp_type'
p36312
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36313
sS'default'
p36314
g3
sS'name'
p36315
S'block'
p36316
sS'required'
p36317
I00
sS'group_name'
p36318
Nsa(dp36319
S'description'
p36320
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36321
sS'cpp_type'
p36322
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36323
sS'default'
p36324
g3
sS'name'
p36325
S'control_tags'
p36326
sS'required'
p36327
I00
sS'group_name'
p36328
S'Advanced'
p36329
sa(dp36330
S'description'
p36331
S'Set the enabled status of the MooseObject.\n'
p36332
sS'cpp_type'
p36333
S'bool'
p36334
sS'default'
p36335
S'1'
p36336
sS'name'
p36337
S'enable'
p36338
sS'required'
p36339
I00
sS'group_name'
p36340
S'Advanced'
p36341
sa(dp36342
S'name'
p36343
S'execute_on'
p36344
sS'cpp_type'
p36345
S'MultiMooseEnum'
p36346
sS'default'
p36347
S'TIMESTEP_END'
p36348
sS'description'
p36349
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36350
sS'required'
p36351
I00
sS'options'
p36352
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36353
sS'group_name'
p36354
Nsa(dp36355
S'description'
p36356
S'The analytic solution to compare against\n'
p36357
sS'cpp_type'
p36358
S'FunctionName'
p36359
sS'default'
p36360
g3
sS'name'
p36361
S'function'
p36362
sS'required'
p36363
I01
sS'group_name'
p36364
Nsa(dp36365
S'description'
p36366
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36367
sS'cpp_type'
p36368
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36369
sS'default'
p36370
g3
sS'name'
p36371
S'outputs'
p36372
sS'required'
p36373
I00
sS'group_name'
p36374
S'Advanced'
p36375
sa(dp36376
S'description'
p36377
S'The exponent used in the norm.\n'
p36378
sS'cpp_type'
p36379
S'double'
p36380
sS'default'
p36381
S'2'
p36382
sS'name'
p36383
S'p'
p36384
sS'required'
p36385
I00
sS'group_name'
p36386
Nsa(dp36387
S'description'
p36388
S'The seed for the master random number generator\n'
p36389
sS'cpp_type'
p36390
S'unsigned int'
p36391
sS'default'
p36392
S'0'
p36393
sS'name'
p36394
S'seed'
p36395
sS'required'
p36396
I00
sS'group_name'
p36397
S'Advanced'
p36398
sa(dp36399
S'description'
p36400
g3
sS'cpp_type'
p36401
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36402
sS'default'
p36403
S'ElementH1Error'
p36404
sS'name'
p36405
S'type'
p36406
sS'required'
p36407
I00
sS'group_name'
p36408
Nsa(dp36409
S'description'
p36410
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36411
sS'cpp_type'
p36412
S'bool'
p36413
sS'default'
p36414
S'0'
p36415
sS'name'
p36416
S'use_displaced_mesh'
p36417
sS'required'
p36418
I00
sS'group_name'
p36419
S'Advanced'
p36420
sa(dp36421
S'description'
p36422
S'The name of the variable that this object operates on\n'
p36423
sS'cpp_type'
p36424
S'std::vector<VariableName>'
p36425
sS'default'
p36426
g3
sS'name'
p36427
S'variable'
p36428
sS'required'
p36429
I01
sS'group_name'
p36430
NsasS'name'
p36431
S'/Postprocessors/ElementH1Error'
p36432
sa(dp36433
S'description'
p36434
g3
sS'subblocks'
p36435
NsS'parameters'
p36436
(lp36437
(dp36438
S'description'
p36439
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36440
sS'cpp_type'
p36441
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36442
sS'default'
p36443
g3
sS'name'
p36444
S'block'
p36445
sS'required'
p36446
I00
sS'group_name'
p36447
Nsa(dp36448
S'description'
p36449
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36450
sS'cpp_type'
p36451
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36452
sS'default'
p36453
g3
sS'name'
p36454
S'control_tags'
p36455
sS'required'
p36456
I00
sS'group_name'
p36457
S'Advanced'
p36458
sa(dp36459
S'description'
p36460
S'Set the enabled status of the MooseObject.\n'
p36461
sS'cpp_type'
p36462
S'bool'
p36463
sS'default'
p36464
S'1'
p36465
sS'name'
p36466
S'enable'
p36467
sS'required'
p36468
I00
sS'group_name'
p36469
S'Advanced'
p36470
sa(dp36471
S'name'
p36472
S'execute_on'
p36473
sS'cpp_type'
p36474
S'MultiMooseEnum'
p36475
sS'default'
p36476
S'TIMESTEP_END'
p36477
sS'description'
p36478
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36479
sS'required'
p36480
I00
sS'options'
p36481
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36482
sS'group_name'
p36483
Nsa(dp36484
S'description'
p36485
S'The analytic solution to compare against\n'
p36486
sS'cpp_type'
p36487
S'FunctionName'
p36488
sS'default'
p36489
g3
sS'name'
p36490
S'function'
p36491
sS'required'
p36492
I01
sS'group_name'
p36493
Nsa(dp36494
S'description'
p36495
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36496
sS'cpp_type'
p36497
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36498
sS'default'
p36499
g3
sS'name'
p36500
S'outputs'
p36501
sS'required'
p36502
I00
sS'group_name'
p36503
S'Advanced'
p36504
sa(dp36505
S'description'
p36506
S'The seed for the master random number generator\n'
p36507
sS'cpp_type'
p36508
S'unsigned int'
p36509
sS'default'
p36510
S'0'
p36511
sS'name'
p36512
S'seed'
p36513
sS'required'
p36514
I00
sS'group_name'
p36515
S'Advanced'
p36516
sa(dp36517
S'description'
p36518
g3
sS'cpp_type'
p36519
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36520
sS'default'
p36521
S'ElementH1SemiError'
p36522
sS'name'
p36523
S'type'
p36524
sS'required'
p36525
I00
sS'group_name'
p36526
Nsa(dp36527
S'description'
p36528
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36529
sS'cpp_type'
p36530
S'bool'
p36531
sS'default'
p36532
S'0'
p36533
sS'name'
p36534
S'use_displaced_mesh'
p36535
sS'required'
p36536
I00
sS'group_name'
p36537
S'Advanced'
p36538
sa(dp36539
S'description'
p36540
S'The name of the variable that this object operates on\n'
p36541
sS'cpp_type'
p36542
S'std::vector<VariableName>'
p36543
sS'default'
p36544
g3
sS'name'
p36545
S'variable'
p36546
sS'required'
p36547
I01
sS'group_name'
p36548
NsasS'name'
p36549
S'/Postprocessors/ElementH1SemiError'
p36550
sa(dp36551
S'description'
p36552
g3
sS'subblocks'
p36553
NsS'parameters'
p36554
(lp36555
(dp36556
S'description'
p36557
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36558
sS'cpp_type'
p36559
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36560
sS'default'
p36561
g3
sS'name'
p36562
S'block'
p36563
sS'required'
p36564
I00
sS'group_name'
p36565
Nsa(dp36566
S'description'
p36567
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36568
sS'cpp_type'
p36569
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36570
sS'default'
p36571
g3
sS'name'
p36572
S'control_tags'
p36573
sS'required'
p36574
I00
sS'group_name'
p36575
S'Advanced'
p36576
sa(dp36577
S'description'
p36578
S'Set the enabled status of the MooseObject.\n'
p36579
sS'cpp_type'
p36580
S'bool'
p36581
sS'default'
p36582
S'1'
p36583
sS'name'
p36584
S'enable'
p36585
sS'required'
p36586
I00
sS'group_name'
p36587
S'Advanced'
p36588
sa(dp36589
S'name'
p36590
S'execute_on'
p36591
sS'cpp_type'
p36592
S'MultiMooseEnum'
p36593
sS'default'
p36594
S'TIMESTEP_END'
p36595
sS'description'
p36596
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36597
sS'required'
p36598
I00
sS'options'
p36599
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36600
sS'group_name'
p36601
Nsa(dp36602
S'description'
p36603
S'The name of the material property\n'
p36604
sS'cpp_type'
p36605
S'MaterialPropertyName'
p36606
sS'default'
p36607
g3
sS'name'
p36608
S'mat_prop'
p36609
sS'required'
p36610
I01
sS'group_name'
p36611
Nsa(dp36612
S'description'
p36613
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36614
sS'cpp_type'
p36615
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36616
sS'default'
p36617
g3
sS'name'
p36618
S'outputs'
p36619
sS'required'
p36620
I00
sS'group_name'
p36621
S'Advanced'
p36622
sa(dp36623
S'description'
p36624
S'The seed for the master random number generator\n'
p36625
sS'cpp_type'
p36626
S'unsigned int'
p36627
sS'default'
p36628
S'0'
p36629
sS'name'
p36630
S'seed'
p36631
sS'required'
p36632
I00
sS'group_name'
p36633
S'Advanced'
p36634
sa(dp36635
S'description'
p36636
g3
sS'cpp_type'
p36637
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36638
sS'default'
p36639
S'ElementIntegralMaterialProperty'
p36640
sS'name'
p36641
S'type'
p36642
sS'required'
p36643
I00
sS'group_name'
p36644
Nsa(dp36645
S'description'
p36646
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36647
sS'cpp_type'
p36648
S'bool'
p36649
sS'default'
p36650
S'0'
p36651
sS'name'
p36652
S'use_displaced_mesh'
p36653
sS'required'
p36654
I00
sS'group_name'
p36655
S'Advanced'
p36656
sasS'name'
p36657
S'/Postprocessors/ElementIntegralMaterialProperty'
p36658
sa(dp36659
S'description'
p36660
g3
sS'subblocks'
p36661
NsS'parameters'
p36662
(lp36663
(dp36664
S'description'
p36665
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36666
sS'cpp_type'
p36667
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36668
sS'default'
p36669
g3
sS'name'
p36670
S'block'
p36671
sS'required'
p36672
I00
sS'group_name'
p36673
Nsa(dp36674
S'description'
p36675
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36676
sS'cpp_type'
p36677
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36678
sS'default'
p36679
g3
sS'name'
p36680
S'control_tags'
p36681
sS'required'
p36682
I00
sS'group_name'
p36683
S'Advanced'
p36684
sa(dp36685
S'description'
p36686
S'Set the enabled status of the MooseObject.\n'
p36687
sS'cpp_type'
p36688
S'bool'
p36689
sS'default'
p36690
S'1'
p36691
sS'name'
p36692
S'enable'
p36693
sS'required'
p36694
I00
sS'group_name'
p36695
S'Advanced'
p36696
sa(dp36697
S'name'
p36698
S'execute_on'
p36699
sS'cpp_type'
p36700
S'MultiMooseEnum'
p36701
sS'default'
p36702
S'TIMESTEP_END'
p36703
sS'description'
p36704
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36705
sS'required'
p36706
I00
sS'options'
p36707
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36708
sS'group_name'
p36709
Nsa(dp36710
S'description'
p36711
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36712
sS'cpp_type'
p36713
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36714
sS'default'
p36715
g3
sS'name'
p36716
S'outputs'
p36717
sS'required'
p36718
I00
sS'group_name'
p36719
S'Advanced'
p36720
sa(dp36721
S'description'
p36722
S'The seed for the master random number generator\n'
p36723
sS'cpp_type'
p36724
S'unsigned int'
p36725
sS'default'
p36726
S'0'
p36727
sS'name'
p36728
S'seed'
p36729
sS'required'
p36730
I00
sS'group_name'
p36731
S'Advanced'
p36732
sa(dp36733
S'description'
p36734
g3
sS'cpp_type'
p36735
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36736
sS'default'
p36737
S'ElementIntegralVariablePostprocessor'
p36738
sS'name'
p36739
S'type'
p36740
sS'required'
p36741
I00
sS'group_name'
p36742
Nsa(dp36743
S'description'
p36744
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36745
sS'cpp_type'
p36746
S'bool'
p36747
sS'default'
p36748
S'0'
p36749
sS'name'
p36750
S'use_displaced_mesh'
p36751
sS'required'
p36752
I00
sS'group_name'
p36753
S'Advanced'
p36754
sa(dp36755
S'description'
p36756
S'The name of the variable that this object operates on\n'
p36757
sS'cpp_type'
p36758
S'std::vector<VariableName>'
p36759
sS'default'
p36760
g3
sS'name'
p36761
S'variable'
p36762
sS'required'
p36763
I01
sS'group_name'
p36764
NsasS'name'
p36765
S'/Postprocessors/ElementIntegralVariablePostprocessor'
p36766
sa(dp36767
S'description'
p36768
g3
sS'subblocks'
p36769
NsS'parameters'
p36770
(lp36771
(dp36772
S'description'
p36773
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36774
sS'cpp_type'
p36775
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36776
sS'default'
p36777
g3
sS'name'
p36778
S'block'
p36779
sS'required'
p36780
I00
sS'group_name'
p36781
Nsa(dp36782
S'description'
p36783
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36784
sS'cpp_type'
p36785
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36786
sS'default'
p36787
g3
sS'name'
p36788
S'control_tags'
p36789
sS'required'
p36790
I00
sS'group_name'
p36791
S'Advanced'
p36792
sa(dp36793
S'description'
p36794
S'Set the enabled status of the MooseObject.\n'
p36795
sS'cpp_type'
p36796
S'bool'
p36797
sS'default'
p36798
S'1'
p36799
sS'name'
p36800
S'enable'
p36801
sS'required'
p36802
I00
sS'group_name'
p36803
S'Advanced'
p36804
sa(dp36805
S'name'
p36806
S'execute_on'
p36807
sS'cpp_type'
p36808
S'MultiMooseEnum'
p36809
sS'default'
p36810
S'TIMESTEP_END'
p36811
sS'description'
p36812
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36813
sS'required'
p36814
I00
sS'options'
p36815
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36816
sS'group_name'
p36817
Nsa(dp36818
S'description'
p36819
S'The variable to compare to\n'
p36820
sS'cpp_type'
p36821
S'std::vector<VariableName>'
p36822
sS'default'
p36823
g3
sS'name'
p36824
S'other_variable'
p36825
sS'required'
p36826
I01
sS'group_name'
p36827
Nsa(dp36828
S'description'
p36829
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36830
sS'cpp_type'
p36831
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36832
sS'default'
p36833
g3
sS'name'
p36834
S'outputs'
p36835
sS'required'
p36836
I00
sS'group_name'
p36837
S'Advanced'
p36838
sa(dp36839
S'description'
p36840
S'The seed for the master random number generator\n'
p36841
sS'cpp_type'
p36842
S'unsigned int'
p36843
sS'default'
p36844
S'0'
p36845
sS'name'
p36846
S'seed'
p36847
sS'required'
p36848
I00
sS'group_name'
p36849
S'Advanced'
p36850
sa(dp36851
S'description'
p36852
g3
sS'cpp_type'
p36853
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36854
sS'default'
p36855
S'ElementL2Difference'
p36856
sS'name'
p36857
S'type'
p36858
sS'required'
p36859
I00
sS'group_name'
p36860
Nsa(dp36861
S'description'
p36862
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36863
sS'cpp_type'
p36864
S'bool'
p36865
sS'default'
p36866
S'0'
p36867
sS'name'
p36868
S'use_displaced_mesh'
p36869
sS'required'
p36870
I00
sS'group_name'
p36871
S'Advanced'
p36872
sa(dp36873
S'description'
p36874
S'The name of the variable that this object operates on\n'
p36875
sS'cpp_type'
p36876
S'std::vector<VariableName>'
p36877
sS'default'
p36878
g3
sS'name'
p36879
S'variable'
p36880
sS'required'
p36881
I01
sS'group_name'
p36882
NsasS'name'
p36883
S'/Postprocessors/ElementL2Difference'
p36884
sa(dp36885
S'description'
p36886
g3
sS'subblocks'
p36887
NsS'parameters'
p36888
(lp36889
(dp36890
S'description'
p36891
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36892
sS'cpp_type'
p36893
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36894
sS'default'
p36895
g3
sS'name'
p36896
S'block'
p36897
sS'required'
p36898
I00
sS'group_name'
p36899
Nsa(dp36900
S'description'
p36901
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36902
sS'cpp_type'
p36903
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36904
sS'default'
p36905
g3
sS'name'
p36906
S'control_tags'
p36907
sS'required'
p36908
I00
sS'group_name'
p36909
S'Advanced'
p36910
sa(dp36911
S'description'
p36912
S'Set the enabled status of the MooseObject.\n'
p36913
sS'cpp_type'
p36914
S'bool'
p36915
sS'default'
p36916
S'1'
p36917
sS'name'
p36918
S'enable'
p36919
sS'required'
p36920
I00
sS'group_name'
p36921
S'Advanced'
p36922
sa(dp36923
S'name'
p36924
S'execute_on'
p36925
sS'cpp_type'
p36926
S'MultiMooseEnum'
p36927
sS'default'
p36928
S'TIMESTEP_END'
p36929
sS'description'
p36930
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36931
sS'required'
p36932
I00
sS'options'
p36933
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36934
sS'group_name'
p36935
Nsa(dp36936
S'description'
p36937
S'The analytic solution to compare against\n'
p36938
sS'cpp_type'
p36939
S'FunctionName'
p36940
sS'default'
p36941
g3
sS'name'
p36942
S'function'
p36943
sS'required'
p36944
I01
sS'group_name'
p36945
Nsa(dp36946
S'description'
p36947
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36948
sS'cpp_type'
p36949
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36950
sS'default'
p36951
g3
sS'name'
p36952
S'outputs'
p36953
sS'required'
p36954
I00
sS'group_name'
p36955
S'Advanced'
p36956
sa(dp36957
S'description'
p36958
S'The seed for the master random number generator\n'
p36959
sS'cpp_type'
p36960
S'unsigned int'
p36961
sS'default'
p36962
S'0'
p36963
sS'name'
p36964
S'seed'
p36965
sS'required'
p36966
I00
sS'group_name'
p36967
S'Advanced'
p36968
sa(dp36969
S'description'
p36970
g3
sS'cpp_type'
p36971
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36972
sS'default'
p36973
S'ElementL2Error'
p36974
sS'name'
p36975
S'type'
p36976
sS'required'
p36977
I00
sS'group_name'
p36978
Nsa(dp36979
S'description'
p36980
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36981
sS'cpp_type'
p36982
S'bool'
p36983
sS'default'
p36984
S'0'
p36985
sS'name'
p36986
S'use_displaced_mesh'
p36987
sS'required'
p36988
I00
sS'group_name'
p36989
S'Advanced'
p36990
sa(dp36991
S'description'
p36992
S'The name of the variable that this object operates on\n'
p36993
sS'cpp_type'
p36994
S'std::vector<VariableName>'
p36995
sS'default'
p36996
g3
sS'name'
p36997
S'variable'
p36998
sS'required'
p36999
I01
sS'group_name'
p37000
NsasS'name'
p37001
S'/Postprocessors/ElementL2Error'
p37002
sa(dp37003
S'description'
p37004
g3
sS'subblocks'
p37005
NsS'parameters'
p37006
(lp37007
(dp37008
S'description'
p37009
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37010
sS'cpp_type'
p37011
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p37012
sS'default'
p37013
g3
sS'name'
p37014
S'block'
p37015
sS'required'
p37016
I00
sS'group_name'
p37017
Nsa(dp37018
S'description'
p37019
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37020
sS'cpp_type'
p37021
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37022
sS'default'
p37023
g3
sS'name'
p37024
S'control_tags'
p37025
sS'required'
p37026
I00
sS'group_name'
p37027
S'Advanced'
p37028
sa(dp37029
S'description'
p37030
S'Set the enabled status of the MooseObject.\n'
p37031
sS'cpp_type'
p37032
S'bool'
p37033
sS'default'
p37034
S'1'
p37035
sS'name'
p37036
S'enable'
p37037
sS'required'
p37038
I00
sS'group_name'
p37039
S'Advanced'
p37040
sa(dp37041
S'name'
p37042
S'execute_on'
p37043
sS'cpp_type'
p37044
S'MultiMooseEnum'
p37045
sS'default'
p37046
S'TIMESTEP_END'
p37047
sS'description'
p37048
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37049
sS'required'
p37050
I00
sS'options'
p37051
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37052
sS'group_name'
p37053
Nsa(dp37054
S'description'
p37055
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37056
sS'cpp_type'
p37057
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37058
sS'default'
p37059
g3
sS'name'
p37060
S'outputs'
p37061
sS'required'
p37062
I00
sS'group_name'
p37063
S'Advanced'
p37064
sa(dp37065
S'description'
p37066
S'The seed for the master random number generator\n'
p37067
sS'cpp_type'
p37068
S'unsigned int'
p37069
sS'default'
p37070
S'0'
p37071
sS'name'
p37072
S'seed'
p37073
sS'required'
p37074
I00
sS'group_name'
p37075
S'Advanced'
p37076
sa(dp37077
S'description'
p37078
g3
sS'cpp_type'
p37079
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37080
sS'default'
p37081
S'ElementL2Norm'
p37082
sS'name'
p37083
S'type'
p37084
sS'required'
p37085
I00
sS'group_name'
p37086
Nsa(dp37087
S'description'
p37088
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37089
sS'cpp_type'
p37090
S'bool'
p37091
sS'default'
p37092
S'0'
p37093
sS'name'
p37094
S'use_displaced_mesh'
p37095
sS'required'
p37096
I00
sS'group_name'
p37097
S'Advanced'
p37098
sa(dp37099
S'description'
p37100
S'The name of the variable that this object operates on\n'
p37101
sS'cpp_type'
p37102
S'std::vector<VariableName>'
p37103
sS'default'
p37104
g3
sS'name'
p37105
S'variable'
p37106
sS'required'
p37107
I01
sS'group_name'
p37108
NsasS'name'
p37109
S'/Postprocessors/ElementL2Norm'
p37110
sa(dp37111
S'description'
p37112
g3
sS'subblocks'
p37113
NsS'parameters'
p37114
(lp37115
(dp37116
S'description'
p37117
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37118
sS'cpp_type'
p37119
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p37120
sS'default'
p37121
g3
sS'name'
p37122
S'block'
p37123
sS'required'
p37124
I00
sS'group_name'
p37125
Nsa(dp37126
S'description'
p37127
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37128
sS'cpp_type'
p37129
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37130
sS'default'
p37131
g3
sS'name'
p37132
S'control_tags'
p37133
sS'required'
p37134
I00
sS'group_name'
p37135
S'Advanced'
p37136
sa(dp37137
S'description'
p37138
S'Set the enabled status of the MooseObject.\n'
p37139
sS'cpp_type'
p37140
S'bool'
p37141
sS'default'
p37142
S'1'
p37143
sS'name'
p37144
S'enable'
p37145
sS'required'
p37146
I00
sS'group_name'
p37147
S'Advanced'
p37148
sa(dp37149
S'name'
p37150
S'execute_on'
p37151
sS'cpp_type'
p37152
S'MultiMooseEnum'
p37153
sS'default'
p37154
S'TIMESTEP_END'
p37155
sS'description'
p37156
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37157
sS'required'
p37158
I00
sS'options'
p37159
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37160
sS'group_name'
p37161
Nsa(dp37162
S'description'
p37163
S'The analytic solution to compare against\n'
p37164
sS'cpp_type'
p37165
S'FunctionName'
p37166
sS'default'
p37167
g3
sS'name'
p37168
S'function_x'
p37169
sS'required'
p37170
I01
sS'group_name'
p37171
Nsa(dp37172
S'description'
p37173
S'The analytic solution to compare against\n'
p37174
sS'cpp_type'
p37175
S'FunctionName'
p37176
sS'default'
p37177
S'0'
p37178
sS'name'
p37179
S'function_y'
p37180
sS'required'
p37181
I00
sS'group_name'
p37182
Nsa(dp37183
S'description'
p37184
S'The analytic solution to compare against\n'
p37185
sS'cpp_type'
p37186
S'FunctionName'
p37187
sS'default'
p37188
S'0'
p37189
sS'name'
p37190
S'function_z'
p37191
sS'required'
p37192
I00
sS'group_name'
p37193
Nsa(dp37194
S'description'
p37195
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37196
sS'cpp_type'
p37197
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37198
sS'default'
p37199
g3
sS'name'
p37200
S'outputs'
p37201
sS'required'
p37202
I00
sS'group_name'
p37203
S'Advanced'
p37204
sa(dp37205
S'description'
p37206
S'The seed for the master random number generator\n'
p37207
sS'cpp_type'
p37208
S'unsigned int'
p37209
sS'default'
p37210
S'0'
p37211
sS'name'
p37212
S'seed'
p37213
sS'required'
p37214
I00
sS'group_name'
p37215
S'Advanced'
p37216
sa(dp37217
S'description'
p37218
g3
sS'cpp_type'
p37219
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37220
sS'default'
p37221
S'ElementVectorL2Error'
p37222
sS'name'
p37223
S'type'
p37224
sS'required'
p37225
I00
sS'group_name'
p37226
Nsa(dp37227
S'description'
p37228
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37229
sS'cpp_type'
p37230
S'bool'
p37231
sS'default'
p37232
S'0'
p37233
sS'name'
p37234
S'use_displaced_mesh'
p37235
sS'required'
p37236
I00
sS'group_name'
p37237
S'Advanced'
p37238
sa(dp37239
S'description'
p37240
S'The FE solution in x direction\n'
p37241
sS'cpp_type'
p37242
S'std::vector<VariableName>'
p37243
sS'default'
p37244
g3
sS'name'
p37245
S'var_x'
p37246
sS'required'
p37247
I01
sS'group_name'
p37248
Nsa(dp37249
S'description'
p37250
S'The FE solution in y direction\n'
p37251
sS'cpp_type'
p37252
S'std::vector<VariableName>'
p37253
sS'default'
p37254
S'0'
p37255
sS'name'
p37256
S'var_y'
p37257
sS'required'
p37258
I00
sS'group_name'
p37259
Nsa(dp37260
S'description'
p37261
S'The FE solution in z direction\n'
p37262
sS'cpp_type'
p37263
S'std::vector<VariableName>'
p37264
sS'default'
p37265
S'0'
p37266
sS'name'
p37267
S'var_z'
p37268
sS'required'
p37269
I00
sS'group_name'
p37270
NsasS'name'
p37271
S'/Postprocessors/ElementVectorL2Error'
p37272
sa(dp37273
S'description'
p37274
g3
sS'subblocks'
p37275
NsS'parameters'
p37276
(lp37277
(dp37278
S'description'
p37279
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37280
sS'cpp_type'
p37281
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p37282
sS'default'
p37283
g3
sS'name'
p37284
S'block'
p37285
sS'required'
p37286
I00
sS'group_name'
p37287
Nsa(dp37288
S'description'
p37289
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37290
sS'cpp_type'
p37291
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37292
sS'default'
p37293
g3
sS'name'
p37294
S'control_tags'
p37295
sS'required'
p37296
I00
sS'group_name'
p37297
S'Advanced'
p37298
sa(dp37299
S'description'
p37300
S'Set the enabled status of the MooseObject.\n'
p37301
sS'cpp_type'
p37302
S'bool'
p37303
sS'default'
p37304
S'1'
p37305
sS'name'
p37306
S'enable'
p37307
sS'required'
p37308
I00
sS'group_name'
p37309
S'Advanced'
p37310
sa(dp37311
S'name'
p37312
S'execute_on'
p37313
sS'cpp_type'
p37314
S'MultiMooseEnum'
p37315
sS'default'
p37316
S'TIMESTEP_END'
p37317
sS'description'
p37318
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37319
sS'required'
p37320
I00
sS'options'
p37321
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37322
sS'group_name'
p37323
Nsa(dp37324
S'description'
p37325
S'The analytic solution to compare against\n'
p37326
sS'cpp_type'
p37327
S'FunctionName'
p37328
sS'default'
p37329
g3
sS'name'
p37330
S'function'
p37331
sS'required'
p37332
I01
sS'group_name'
p37333
Nsa(dp37334
S'description'
p37335
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37336
sS'cpp_type'
p37337
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37338
sS'default'
p37339
g3
sS'name'
p37340
S'outputs'
p37341
sS'required'
p37342
I00
sS'group_name'
p37343
S'Advanced'
p37344
sa(dp37345
S'description'
p37346
S'The exponent used in the norm.\n'
p37347
sS'cpp_type'
p37348
S'double'
p37349
sS'default'
p37350
S'2'
p37351
sS'name'
p37352
S'p'
p37353
sS'required'
p37354
I00
sS'group_name'
p37355
Nsa(dp37356
S'description'
p37357
S'The seed for the master random number generator\n'
p37358
sS'cpp_type'
p37359
S'unsigned int'
p37360
sS'default'
p37361
S'0'
p37362
sS'name'
p37363
S'seed'
p37364
sS'required'
p37365
I00
sS'group_name'
p37366
S'Advanced'
p37367
sa(dp37368
S'description'
p37369
g3
sS'cpp_type'
p37370
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37371
sS'default'
p37372
S'ElementW1pError'
p37373
sS'name'
p37374
S'type'
p37375
sS'required'
p37376
I00
sS'group_name'
p37377
Nsa(dp37378
S'description'
p37379
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37380
sS'cpp_type'
p37381
S'bool'
p37382
sS'default'
p37383
S'0'
p37384
sS'name'
p37385
S'use_displaced_mesh'
p37386
sS'required'
p37387
I00
sS'group_name'
p37388
S'Advanced'
p37389
sa(dp37390
S'description'
p37391
S'The name of the variable that this object operates on\n'
p37392
sS'cpp_type'
p37393
S'std::vector<VariableName>'
p37394
sS'default'
p37395
g3
sS'name'
p37396
S'variable'
p37397
sS'required'
p37398
I01
sS'group_name'
p37399
NsasS'name'
p37400
S'/Postprocessors/ElementW1pError'
p37401
sa(dp37402
S'description'
p37403
g3
sS'subblocks'
p37404
NsS'parameters'
p37405
(lp37406
(dp37407
S'description'
p37408
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37409
sS'cpp_type'
p37410
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37411
sS'default'
p37412
g3
sS'name'
p37413
S'control_tags'
p37414
sS'required'
p37415
I00
sS'group_name'
p37416
S'Advanced'
p37417
sa(dp37418
S'description'
p37419
S'The ID of the element where we monitor\n'
p37420
sS'cpp_type'
p37421
S'unsigned int'
p37422
sS'default'
p37423
g3
sS'name'
p37424
S'elementid'
p37425
sS'required'
p37426
I01
sS'group_name'
p37427
Nsa(dp37428
S'description'
p37429
S'Set the enabled status of the MooseObject.\n'
p37430
sS'cpp_type'
p37431
S'bool'
p37432
sS'default'
p37433
S'1'
p37434
sS'name'
p37435
S'enable'
p37436
sS'required'
p37437
I00
sS'group_name'
p37438
S'Advanced'
p37439
sa(dp37440
S'name'
p37441
S'execute_on'
p37442
sS'cpp_type'
p37443
S'MultiMooseEnum'
p37444
sS'default'
p37445
S'TIMESTEP_END'
p37446
sS'description'
p37447
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37448
sS'required'
p37449
I00
sS'options'
p37450
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37451
sS'group_name'
p37452
Nsa(dp37453
S'description'
p37454
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37455
sS'cpp_type'
p37456
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37457
sS'default'
p37458
g3
sS'name'
p37459
S'outputs'
p37460
sS'required'
p37461
I00
sS'group_name'
p37462
S'Advanced'
p37463
sa(dp37464
S'description'
p37465
g3
sS'cpp_type'
p37466
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37467
sS'default'
p37468
S'ElementalVariableValue'
p37469
sS'name'
p37470
S'type'
p37471
sS'required'
p37472
I00
sS'group_name'
p37473
Nsa(dp37474
S'description'
p37475
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37476
sS'cpp_type'
p37477
S'bool'
p37478
sS'default'
p37479
S'0'
p37480
sS'name'
p37481
S'use_displaced_mesh'
p37482
sS'required'
p37483
I00
sS'group_name'
p37484
S'Advanced'
p37485
sa(dp37486
S'description'
p37487
S'The variable to be monitored\n'
p37488
sS'cpp_type'
p37489
S'VariableName'
p37490
sS'default'
p37491
g3
sS'name'
p37492
S'variable'
p37493
sS'required'
p37494
I01
sS'group_name'
p37495
NsasS'name'
p37496
S'/Postprocessors/ElementalVariableValue'
p37497
sa(dp37498
S'description'
p37499
g3
sS'subblocks'
p37500
NsS'parameters'
p37501
(lp37502
(dp37503
S'description'
p37504
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37505
sS'cpp_type'
p37506
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37507
sS'default'
p37508
g3
sS'name'
p37509
S'control_tags'
p37510
sS'required'
p37511
I00
sS'group_name'
p37512
S'Advanced'
p37513
sa(dp37514
S'description'
p37515
S'Set the enabled status of the MooseObject.\n'
p37516
sS'cpp_type'
p37517
S'bool'
p37518
sS'default'
p37519
S'1'
p37520
sS'name'
p37521
S'enable'
p37522
sS'required'
p37523
I00
sS'group_name'
p37524
S'Advanced'
p37525
sa(dp37526
S'name'
p37527
S'execute_on'
p37528
sS'cpp_type'
p37529
S'MultiMooseEnum'
p37530
sS'default'
p37531
S'TIMESTEP_END'
p37532
sS'description'
p37533
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37534
sS'required'
p37535
I00
sS'options'
p37536
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37537
sS'group_name'
p37538
Nsa(dp37539
S'description'
p37540
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37541
sS'cpp_type'
p37542
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37543
sS'default'
p37544
g3
sS'name'
p37545
S'outputs'
p37546
sS'required'
p37547
I00
sS'group_name'
p37548
S'Advanced'
p37549
sa(dp37550
S'description'
p37551
g3
sS'cpp_type'
p37552
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37553
sS'default'
p37554
S'EmptyPostprocessor'
p37555
sS'name'
p37556
S'type'
p37557
sS'required'
p37558
I00
sS'group_name'
p37559
Nsa(dp37560
S'description'
p37561
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37562
sS'cpp_type'
p37563
S'bool'
p37564
sS'default'
p37565
S'0'
p37566
sS'name'
p37567
S'use_displaced_mesh'
p37568
sS'required'
p37569
I00
sS'group_name'
p37570
S'Advanced'
p37571
sasS'name'
p37572
S'/Postprocessors/EmptyPostprocessor'
p37573
sa(dp37574
S'description'
p37575
g3
sS'subblocks'
p37576
NsS'parameters'
p37577
(lp37578
(dp37579
S'description'
p37580
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37581
sS'cpp_type'
p37582
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37583
sS'default'
p37584
g3
sS'name'
p37585
S'control_tags'
p37586
sS'required'
p37587
I00
sS'group_name'
p37588
S'Advanced'
p37589
sa(dp37590
S'description'
p37591
S'Set the enabled status of the MooseObject.\n'
p37592
sS'cpp_type'
p37593
S'bool'
p37594
sS'default'
p37595
S'1'
p37596
sS'name'
p37597
S'enable'
p37598
sS'required'
p37599
I00
sS'group_name'
p37600
S'Advanced'
p37601
sa(dp37602
S'name'
p37603
S'execute_on'
p37604
sS'cpp_type'
p37605
S'MultiMooseEnum'
p37606
sS'default'
p37607
S'TIMESTEP_END'
p37608
sS'description'
p37609
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37610
sS'required'
p37611
I00
sS'options'
p37612
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37613
sS'group_name'
p37614
Nsa(dp37615
S'description'
p37616
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37617
sS'cpp_type'
p37618
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37619
sS'default'
p37620
g3
sS'name'
p37621
S'outputs'
p37622
sS'required'
p37623
I00
sS'group_name'
p37624
S'Advanced'
p37625
sa(dp37626
S'description'
p37627
g3
sS'cpp_type'
p37628
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37629
sS'default'
p37630
S'ExecutionerAttributeReporter'
p37631
sS'name'
p37632
S'type'
p37633
sS'required'
p37634
I00
sS'group_name'
p37635
Nsa(dp37636
S'description'
p37637
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37638
sS'cpp_type'
p37639
S'bool'
p37640
sS'default'
p37641
S'0'
p37642
sS'name'
p37643
S'use_displaced_mesh'
p37644
sS'required'
p37645
I00
sS'group_name'
p37646
S'Advanced'
p37647
sasS'name'
p37648
S'/Postprocessors/ExecutionerAttributeReporter'
p37649
sa(dp37650
S'description'
p37651
S'Find a specific target value along a sampling line. The variable values along the line should change monotonically. The target value is searched using a bisection algorithm.\n'
p37652
sS'subblocks'
p37653
NsS'parameters'
p37654
(lp37655
(dp37656
S'description'
p37657
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37658
sS'cpp_type'
p37659
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37660
sS'default'
p37661
g3
sS'name'
p37662
S'control_tags'
p37663
sS'required'
p37664
I00
sS'group_name'
p37665
S'Advanced'
p37666
sa(dp37667
S'description'
p37668
S'Maximum number of bisections to perform.\n'
p37669
sS'cpp_type'
p37670
S'unsigned int'
p37671
sS'default'
p37672
S'36'
p37673
sS'name'
p37674
S'depth'
p37675
sS'required'
p37676
I00
sS'group_name'
p37677
Nsa(dp37678
S'description'
p37679
S'Set the enabled status of the MooseObject.\n'
p37680
sS'cpp_type'
p37681
S'bool'
p37682
sS'default'
p37683
S'1'
p37684
sS'name'
p37685
S'enable'
p37686
sS'required'
p37687
I00
sS'group_name'
p37688
S'Advanced'
p37689
sa(dp37690
S'description'
p37691
S'End point of the sampling line.\n'
p37692
sS'cpp_type'
p37693
S'libMesh::Point'
p37694
sS'default'
p37695
g3
sS'name'
p37696
S'end_point'
p37697
sS'required'
p37698
I00
sS'group_name'
p37699
Nsa(dp37700
S'name'
p37701
S'execute_on'
p37702
sS'cpp_type'
p37703
S'MultiMooseEnum'
p37704
sS'default'
p37705
S'TIMESTEP_END'
p37706
sS'description'
p37707
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37708
sS'required'
p37709
I00
sS'options'
p37710
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37711
sS'group_name'
p37712
Nsa(dp37713
S'description'
p37714
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37715
sS'cpp_type'
p37716
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37717
sS'default'
p37718
g3
sS'name'
p37719
S'outputs'
p37720
sS'required'
p37721
I00
sS'group_name'
p37722
S'Advanced'
p37723
sa(dp37724
S'description'
p37725
S'Start point of the sampling line.\n'
p37726
sS'cpp_type'
p37727
S'libMesh::Point'
p37728
sS'default'
p37729
g3
sS'name'
p37730
S'start_point'
p37731
sS'required'
p37732
I00
sS'group_name'
p37733
Nsa(dp37734
S'description'
p37735
S'Target value to locate.\n'
p37736
sS'cpp_type'
p37737
S'double'
p37738
sS'default'
p37739
g3
sS'name'
p37740
S'target'
p37741
sS'required'
p37742
I00
sS'group_name'
p37743
Nsa(dp37744
S'description'
p37745
S'Stop search if a value is found that is equal to the target with this tolerance applied.\n'
p37746
sS'cpp_type'
p37747
S'double'
p37748
sS'default'
p37749
S'1e-10'
p37750
sS'name'
p37751
S'tol'
p37752
sS'required'
p37753
I00
sS'group_name'
p37754
Nsa(dp37755
S'description'
p37756
g3
sS'cpp_type'
p37757
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37758
sS'default'
p37759
S'FindValueOnLine'
p37760
sS'name'
p37761
S'type'
p37762
sS'required'
p37763
I00
sS'group_name'
p37764
Nsa(dp37765
S'description'
p37766
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37767
sS'cpp_type'
p37768
S'bool'
p37769
sS'default'
p37770
S'0'
p37771
sS'name'
p37772
S'use_displaced_mesh'
p37773
sS'required'
p37774
I00
sS'group_name'
p37775
S'Advanced'
p37776
sa(dp37777
S'description'
p37778
S'Variable to inspect\n'
p37779
sS'cpp_type'
p37780
S'std::vector<VariableName>'
p37781
sS'default'
p37782
g3
sS'name'
p37783
S'v'
p37784
sS'required'
p37785
I00
sS'group_name'
p37786
NsasS'name'
p37787
S'/Postprocessors/FindValueOnLine'
p37788
sa(dp37789
S'description'
p37790
g3
sS'subblocks'
p37791
NsS'parameters'
p37792
(lp37793
(dp37794
S'description'
p37795
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p37796
sS'cpp_type'
p37797
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p37798
sS'default'
p37799
g3
sS'name'
p37800
S'boundary'
p37801
sS'required'
p37802
I01
sS'group_name'
p37803
Nsa(dp37804
S'description'
p37805
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37806
sS'cpp_type'
p37807
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37808
sS'default'
p37809
g3
sS'name'
p37810
S'control_tags'
p37811
sS'required'
p37812
I00
sS'group_name'
p37813
S'Advanced'
p37814
sa(dp37815
S'description'
p37816
S'Set the enabled status of the MooseObject.\n'
p37817
sS'cpp_type'
p37818
S'bool'
p37819
sS'default'
p37820
S'1'
p37821
sS'name'
p37822
S'enable'
p37823
sS'required'
p37824
I00
sS'group_name'
p37825
S'Advanced'
p37826
sa(dp37827
S'name'
p37828
S'execute_on'
p37829
sS'cpp_type'
p37830
S'MultiMooseEnum'
p37831
sS'default'
p37832
S'TIMESTEP_END'
p37833
sS'description'
p37834
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37835
sS'required'
p37836
I00
sS'options'
p37837
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37838
sS'group_name'
p37839
Nsa(dp37840
S'description'
p37841
S'This postprocessor will return the integral of this function over the boundary\n'
p37842
sS'cpp_type'
p37843
S'FunctionName'
p37844
sS'default'
p37845
S'1'
p37846
sS'name'
p37847
S'function'
p37848
sS'required'
p37849
I00
sS'group_name'
p37850
Nsa(dp37851
S'description'
p37852
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37853
sS'cpp_type'
p37854
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37855
sS'default'
p37856
g3
sS'name'
p37857
S'outputs'
p37858
sS'required'
p37859
I00
sS'group_name'
p37860
S'Advanced'
p37861
sa(dp37862
S'description'
p37863
g3
sS'cpp_type'
p37864
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37865
sS'default'
p37866
S'FunctionSideIntegral'
p37867
sS'name'
p37868
S'type'
p37869
sS'required'
p37870
I00
sS'group_name'
p37871
Nsa(dp37872
S'description'
p37873
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37874
sS'cpp_type'
p37875
S'bool'
p37876
sS'default'
p37877
S'0'
p37878
sS'name'
p37879
S'use_displaced_mesh'
p37880
sS'required'
p37881
I00
sS'group_name'
p37882
S'Advanced'
p37883
sasS'name'
p37884
S'/Postprocessors/FunctionSideIntegral'
p37885
sa(dp37886
S'description'
p37887
g3
sS'subblocks'
p37888
NsS'parameters'
p37889
(lp37890
(dp37891
S'description'
p37892
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37893
sS'cpp_type'
p37894
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37895
sS'default'
p37896
g3
sS'name'
p37897
S'control_tags'
p37898
sS'required'
p37899
I00
sS'group_name'
p37900
S'Advanced'
p37901
sa(dp37902
S'description'
p37903
S'Set the enabled status of the MooseObject.\n'
p37904
sS'cpp_type'
p37905
S'bool'
p37906
sS'default'
p37907
S'1'
p37908
sS'name'
p37909
S'enable'
p37910
sS'required'
p37911
I00
sS'group_name'
p37912
S'Advanced'
p37913
sa(dp37914
S'name'
p37915
S'execute_on'
p37916
sS'cpp_type'
p37917
S'MultiMooseEnum'
p37918
sS'default'
p37919
S'TIMESTEP_END'
p37920
sS'description'
p37921
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37922
sS'required'
p37923
I00
sS'options'
p37924
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37925
sS'group_name'
p37926
Nsa(dp37927
S'description'
p37928
S'The function which supplies the postprocessor value.\n'
p37929
sS'cpp_type'
p37930
S'FunctionName'
p37931
sS'default'
p37932
g3
sS'name'
p37933
S'function'
p37934
sS'required'
p37935
I01
sS'group_name'
p37936
Nsa(dp37937
S'description'
p37938
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37939
sS'cpp_type'
p37940
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37941
sS'default'
p37942
g3
sS'name'
p37943
S'outputs'
p37944
sS'required'
p37945
I00
sS'group_name'
p37946
S'Advanced'
p37947
sa(dp37948
S'description'
p37949
S'A point in space to be given to the function Default: (0, 0, 0)\n'
p37950
sS'cpp_type'
p37951
S'libMesh::Point'
p37952
sS'default'
p37953
S'0 0 0'
p37954
sS'name'
p37955
S'point'
p37956
sS'required'
p37957
I00
sS'group_name'
p37958
Nsa(dp37959
S'description'
p37960
S'A scale factor to be applied to the function\n'
p37961
sS'cpp_type'
p37962
S'double'
p37963
sS'default'
p37964
S'1'
p37965
sS'name'
p37966
S'scale_factor'
p37967
sS'required'
p37968
I00
sS'group_name'
p37969
Nsa(dp37970
S'description'
p37971
g3
sS'cpp_type'
p37972
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37973
sS'default'
p37974
S'FunctionValuePostprocessor'
p37975
sS'name'
p37976
S'type'
p37977
sS'required'
p37978
I00
sS'group_name'
p37979
Nsa(dp37980
S'description'
p37981
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37982
sS'cpp_type'
p37983
S'bool'
p37984
sS'default'
p37985
S'0'
p37986
sS'name'
p37987
S'use_displaced_mesh'
p37988
sS'required'
p37989
I00
sS'group_name'
p37990
S'Advanced'
p37991
sasS'name'
p37992
S'/Postprocessors/FunctionValuePostprocessor'
p37993
sa(dp37994
S'description'
p37995
g3
sS'subblocks'
p37996
NsS'parameters'
p37997
(lp37998
(dp37999
S'description'
p38000
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38001
sS'cpp_type'
p38002
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p38003
sS'default'
p38004
g3
sS'name'
p38005
S'block'
p38006
sS'required'
p38007
I00
sS'group_name'
p38008
Nsa(dp38009
S'description'
p38010
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38011
sS'cpp_type'
p38012
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p38013
sS'default'
p38014
g3
sS'name'
p38015
S'boundary'
p38016
sS'required'
p38017
I00
sS'group_name'
p38018
Nsa(dp38019
S'description'
p38020
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38021
sS'cpp_type'
p38022
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38023
sS'default'
p38024
g3
sS'name'
p38025
S'control_tags'
p38026
sS'required'
p38027
I00
sS'group_name'
p38028
S'Advanced'
p38029
sa(dp38030
S'description'
p38031
S'Set the enabled status of the MooseObject.\n'
p38032
sS'cpp_type'
p38033
S'bool'
p38034
sS'default'
p38035
S'1'
p38036
sS'name'
p38037
S'enable'
p38038
sS'required'
p38039
I00
sS'group_name'
p38040
S'Advanced'
p38041
sa(dp38042
S'name'
p38043
S'execute_on'
p38044
sS'cpp_type'
p38045
S'MultiMooseEnum'
p38046
sS'default'
p38047
S'TIMESTEP_END'
p38048
sS'description'
p38049
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38050
sS'required'
p38051
I00
sS'options'
p38052
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38053
sS'group_name'
p38054
Nsa(dp38055
S'description'
p38056
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38057
sS'cpp_type'
p38058
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38059
sS'default'
p38060
g3
sS'name'
p38061
S'outputs'
p38062
sS'required'
p38063
I00
sS'group_name'
p38064
S'Advanced'
p38065
sa(dp38066
S'description'
p38067
S'The seed for the master random number generator\n'
p38068
sS'cpp_type'
p38069
S'unsigned int'
p38070
sS'default'
p38071
S'0'
p38072
sS'name'
p38073
S'seed'
p38074
sS'required'
p38075
I00
sS'group_name'
p38076
S'Advanced'
p38077
sa(dp38078
S'description'
p38079
g3
sS'cpp_type'
p38080
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38081
sS'default'
p38082
S'NodalExtremeValue'
p38083
sS'name'
p38084
S'type'
p38085
sS'required'
p38086
I00
sS'group_name'
p38087
Nsa(dp38088
S'description'
p38089
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p38090
sS'cpp_type'
p38091
S'bool'
p38092
sS'default'
p38093
S'0'
p38094
sS'name'
p38095
S'unique_node_execute'
p38096
sS'required'
p38097
I00
sS'group_name'
p38098
Nsa(dp38099
S'description'
p38100
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38101
sS'cpp_type'
p38102
S'bool'
p38103
sS'default'
p38104
S'0'
p38105
sS'name'
p38106
S'use_displaced_mesh'
p38107
sS'required'
p38108
I00
sS'group_name'
p38109
S'Advanced'
p38110
sa(dp38111
S'name'
p38112
S'value_type'
p38113
sS'cpp_type'
p38114
S'MooseEnum'
p38115
sS'default'
p38116
S'max'
p38117
sS'description'
p38118
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p38119
sS'required'
p38120
I00
sS'options'
p38121
S'max min'
p38122
sS'group_name'
p38123
Nsa(dp38124
S'description'
p38125
S'The name of the variable that this postprocessor operates on\n'
p38126
sS'cpp_type'
p38127
S'std::vector<VariableName>'
p38128
sS'default'
p38129
g3
sS'name'
p38130
S'variable'
p38131
sS'required'
p38132
I01
sS'group_name'
p38133
NsasS'name'
p38134
S'/Postprocessors/NodalExtremeValue'
p38135
sa(dp38136
S'description'
p38137
g3
sS'subblocks'
p38138
NsS'parameters'
p38139
(lp38140
(dp38141
S'description'
p38142
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38143
sS'cpp_type'
p38144
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p38145
sS'default'
p38146
g3
sS'name'
p38147
S'block'
p38148
sS'required'
p38149
I00
sS'group_name'
p38150
Nsa(dp38151
S'description'
p38152
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38153
sS'cpp_type'
p38154
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p38155
sS'default'
p38156
g3
sS'name'
p38157
S'boundary'
p38158
sS'required'
p38159
I00
sS'group_name'
p38160
Nsa(dp38161
S'description'
p38162
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38163
sS'cpp_type'
p38164
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38165
sS'default'
p38166
g3
sS'name'
p38167
S'control_tags'
p38168
sS'required'
p38169
I00
sS'group_name'
p38170
S'Advanced'
p38171
sa(dp38172
S'description'
p38173
S'Set the enabled status of the MooseObject.\n'
p38174
sS'cpp_type'
p38175
S'bool'
p38176
sS'default'
p38177
S'1'
p38178
sS'name'
p38179
S'enable'
p38180
sS'required'
p38181
I00
sS'group_name'
p38182
S'Advanced'
p38183
sa(dp38184
S'name'
p38185
S'execute_on'
p38186
sS'cpp_type'
p38187
S'MultiMooseEnum'
p38188
sS'default'
p38189
S'TIMESTEP_END'
p38190
sS'description'
p38191
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38192
sS'required'
p38193
I00
sS'options'
p38194
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38195
sS'group_name'
p38196
Nsa(dp38197
S'description'
p38198
S'The analytic solution to compare against\n'
p38199
sS'cpp_type'
p38200
S'FunctionName'
p38201
sS'default'
p38202
g3
sS'name'
p38203
S'function'
p38204
sS'required'
p38205
I01
sS'group_name'
p38206
Nsa(dp38207
S'description'
p38208
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38209
sS'cpp_type'
p38210
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38211
sS'default'
p38212
g3
sS'name'
p38213
S'outputs'
p38214
sS'required'
p38215
I00
sS'group_name'
p38216
S'Advanced'
p38217
sa(dp38218
S'description'
p38219
S'The seed for the master random number generator\n'
p38220
sS'cpp_type'
p38221
S'unsigned int'
p38222
sS'default'
p38223
S'0'
p38224
sS'name'
p38225
S'seed'
p38226
sS'required'
p38227
I00
sS'group_name'
p38228
S'Advanced'
p38229
sa(dp38230
S'description'
p38231
g3
sS'cpp_type'
p38232
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38233
sS'default'
p38234
S'NodalL2Error'
p38235
sS'name'
p38236
S'type'
p38237
sS'required'
p38238
I00
sS'group_name'
p38239
Nsa(dp38240
S'description'
p38241
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p38242
sS'cpp_type'
p38243
S'bool'
p38244
sS'default'
p38245
S'0'
p38246
sS'name'
p38247
S'unique_node_execute'
p38248
sS'required'
p38249
I00
sS'group_name'
p38250
Nsa(dp38251
S'description'
p38252
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38253
sS'cpp_type'
p38254
S'bool'
p38255
sS'default'
p38256
S'0'
p38257
sS'name'
p38258
S'use_displaced_mesh'
p38259
sS'required'
p38260
I00
sS'group_name'
p38261
S'Advanced'
p38262
sa(dp38263
S'description'
p38264
S'The name of the variable that this postprocessor operates on\n'
p38265
sS'cpp_type'
p38266
S'std::vector<VariableName>'
p38267
sS'default'
p38268
g3
sS'name'
p38269
S'variable'
p38270
sS'required'
p38271
I01
sS'group_name'
p38272
NsasS'name'
p38273
S'/Postprocessors/NodalL2Error'
p38274
sa(dp38275
S'description'
p38276
g3
sS'subblocks'
p38277
NsS'parameters'
p38278
(lp38279
(dp38280
S'description'
p38281
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38282
sS'cpp_type'
p38283
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p38284
sS'default'
p38285
g3
sS'name'
p38286
S'block'
p38287
sS'required'
p38288
I00
sS'group_name'
p38289
Nsa(dp38290
S'description'
p38291
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38292
sS'cpp_type'
p38293
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p38294
sS'default'
p38295
g3
sS'name'
p38296
S'boundary'
p38297
sS'required'
p38298
I00
sS'group_name'
p38299
Nsa(dp38300
S'description'
p38301
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38302
sS'cpp_type'
p38303
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38304
sS'default'
p38305
g3
sS'name'
p38306
S'control_tags'
p38307
sS'required'
p38308
I00
sS'group_name'
p38309
S'Advanced'
p38310
sa(dp38311
S'description'
p38312
S'Set the enabled status of the MooseObject.\n'
p38313
sS'cpp_type'
p38314
S'bool'
p38315
sS'default'
p38316
S'1'
p38317
sS'name'
p38318
S'enable'
p38319
sS'required'
p38320
I00
sS'group_name'
p38321
S'Advanced'
p38322
sa(dp38323
S'name'
p38324
S'execute_on'
p38325
sS'cpp_type'
p38326
S'MultiMooseEnum'
p38327
sS'default'
p38328
S'TIMESTEP_END'
p38329
sS'description'
p38330
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38331
sS'required'
p38332
I00
sS'options'
p38333
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38334
sS'group_name'
p38335
Nsa(dp38336
S'description'
p38337
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38338
sS'cpp_type'
p38339
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38340
sS'default'
p38341
g3
sS'name'
p38342
S'outputs'
p38343
sS'required'
p38344
I00
sS'group_name'
p38345
S'Advanced'
p38346
sa(dp38347
S'description'
p38348
S'The seed for the master random number generator\n'
p38349
sS'cpp_type'
p38350
S'unsigned int'
p38351
sS'default'
p38352
S'0'
p38353
sS'name'
p38354
S'seed'
p38355
sS'required'
p38356
I00
sS'group_name'
p38357
S'Advanced'
p38358
sa(dp38359
S'description'
p38360
g3
sS'cpp_type'
p38361
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38362
sS'default'
p38363
S'NodalL2Norm'
p38364
sS'name'
p38365
S'type'
p38366
sS'required'
p38367
I00
sS'group_name'
p38368
Nsa(dp38369
S'description'
p38370
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p38371
sS'cpp_type'
p38372
S'bool'
p38373
sS'default'
p38374
S'1'
p38375
sS'name'
p38376
S'unique_node_execute'
p38377
sS'required'
p38378
I00
sS'group_name'
p38379
Nsa(dp38380
S'description'
p38381
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38382
sS'cpp_type'
p38383
S'bool'
p38384
sS'default'
p38385
S'0'
p38386
sS'name'
p38387
S'use_displaced_mesh'
p38388
sS'required'
p38389
I00
sS'group_name'
p38390
S'Advanced'
p38391
sa(dp38392
S'description'
p38393
S'The name of the variable that this postprocessor operates on\n'
p38394
sS'cpp_type'
p38395
S'std::vector<VariableName>'
p38396
sS'default'
p38397
g3
sS'name'
p38398
S'variable'
p38399
sS'required'
p38400
I01
sS'group_name'
p38401
NsasS'name'
p38402
S'/Postprocessors/NodalL2Norm'
p38403
sa(dp38404
S'description'
p38405
g3
sS'subblocks'
p38406
NsS'parameters'
p38407
(lp38408
(dp38409
S'description'
p38410
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38411
sS'cpp_type'
p38412
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p38413
sS'default'
p38414
g3
sS'name'
p38415
S'block'
p38416
sS'required'
p38417
I00
sS'group_name'
p38418
Nsa(dp38419
S'description'
p38420
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38421
sS'cpp_type'
p38422
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p38423
sS'default'
p38424
g3
sS'name'
p38425
S'boundary'
p38426
sS'required'
p38427
I00
sS'group_name'
p38428
Nsa(dp38429
S'description'
p38430
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38431
sS'cpp_type'
p38432
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38433
sS'default'
p38434
g3
sS'name'
p38435
S'control_tags'
p38436
sS'required'
p38437
I00
sS'group_name'
p38438
S'Advanced'
p38439
sa(dp38440
S'description'
p38441
S'Set the enabled status of the MooseObject.\n'
p38442
sS'cpp_type'
p38443
S'bool'
p38444
sS'default'
p38445
S'1'
p38446
sS'name'
p38447
S'enable'
p38448
sS'required'
p38449
I00
sS'group_name'
p38450
S'Advanced'
p38451
sa(dp38452
S'name'
p38453
S'execute_on'
p38454
sS'cpp_type'
p38455
S'MultiMooseEnum'
p38456
sS'default'
p38457
S'TIMESTEP_END'
p38458
sS'description'
p38459
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38460
sS'required'
p38461
I00
sS'options'
p38462
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38463
sS'group_name'
p38464
Nsa(dp38465
S'description'
p38466
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38467
sS'cpp_type'
p38468
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38469
sS'default'
p38470
g3
sS'name'
p38471
S'outputs'
p38472
sS'required'
p38473
I00
sS'group_name'
p38474
S'Advanced'
p38475
sa(dp38476
S'description'
p38477
S'The seed for the master random number generator\n'
p38478
sS'cpp_type'
p38479
S'unsigned int'
p38480
sS'default'
p38481
S'0'
p38482
sS'name'
p38483
S'seed'
p38484
sS'required'
p38485
I00
sS'group_name'
p38486
S'Advanced'
p38487
sa(dp38488
S'description'
p38489
g3
sS'cpp_type'
p38490
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38491
sS'default'
p38492
S'NodalMaxValue'
p38493
sS'name'
p38494
S'type'
p38495
sS'required'
p38496
I00
sS'group_name'
p38497
Nsa(dp38498
S'description'
p38499
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p38500
sS'cpp_type'
p38501
S'bool'
p38502
sS'default'
p38503
S'0'
p38504
sS'name'
p38505
S'unique_node_execute'
p38506
sS'required'
p38507
I00
sS'group_name'
p38508
Nsa(dp38509
S'description'
p38510
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38511
sS'cpp_type'
p38512
S'bool'
p38513
sS'default'
p38514
S'0'
p38515
sS'name'
p38516
S'use_displaced_mesh'
p38517
sS'required'
p38518
I00
sS'group_name'
p38519
S'Advanced'
p38520
sa(dp38521
S'description'
p38522
S'The name of the variable that this postprocessor operates on\n'
p38523
sS'cpp_type'
p38524
S'std::vector<VariableName>'
p38525
sS'default'
p38526
g3
sS'name'
p38527
S'variable'
p38528
sS'required'
p38529
I01
sS'group_name'
p38530
NsasS'name'
p38531
S'/Postprocessors/NodalMaxValue'
p38532
sa(dp38533
S'description'
p38534
g3
sS'subblocks'
p38535
NsS'parameters'
p38536
(lp38537
(dp38538
S'description'
p38539
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38540
sS'cpp_type'
p38541
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p38542
sS'default'
p38543
g3
sS'name'
p38544
S'block'
p38545
sS'required'
p38546
I00
sS'group_name'
p38547
Nsa(dp38548
S'description'
p38549
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38550
sS'cpp_type'
p38551
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p38552
sS'default'
p38553
g3
sS'name'
p38554
S'boundary'
p38555
sS'required'
p38556
I00
sS'group_name'
p38557
Nsa(dp38558
S'description'
p38559
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38560
sS'cpp_type'
p38561
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38562
sS'default'
p38563
g3
sS'name'
p38564
S'control_tags'
p38565
sS'required'
p38566
I00
sS'group_name'
p38567
S'Advanced'
p38568
sa(dp38569
S'description'
p38570
S'Set the enabled status of the MooseObject.\n'
p38571
sS'cpp_type'
p38572
S'bool'
p38573
sS'default'
p38574
S'1'
p38575
sS'name'
p38576
S'enable'
p38577
sS'required'
p38578
I00
sS'group_name'
p38579
S'Advanced'
p38580
sa(dp38581
S'name'
p38582
S'execute_on'
p38583
sS'cpp_type'
p38584
S'MultiMooseEnum'
p38585
sS'default'
p38586
S'TIMESTEP_END'
p38587
sS'description'
p38588
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38589
sS'required'
p38590
I00
sS'options'
p38591
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38592
sS'group_name'
p38593
Nsa(dp38594
S'description'
p38595
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38596
sS'cpp_type'
p38597
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38598
sS'default'
p38599
g3
sS'name'
p38600
S'outputs'
p38601
sS'required'
p38602
I00
sS'group_name'
p38603
S'Advanced'
p38604
sa(dp38605
S'description'
p38606
S'The seed for the master random number generator\n'
p38607
sS'cpp_type'
p38608
S'unsigned int'
p38609
sS'default'
p38610
S'0'
p38611
sS'name'
p38612
S'seed'
p38613
sS'required'
p38614
I00
sS'group_name'
p38615
S'Advanced'
p38616
sa(dp38617
S'description'
p38618
g3
sS'cpp_type'
p38619
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38620
sS'default'
p38621
S'NodalProxyMaxValue'
p38622
sS'name'
p38623
S'type'
p38624
sS'required'
p38625
I00
sS'group_name'
p38626
Nsa(dp38627
S'description'
p38628
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p38629
sS'cpp_type'
p38630
S'bool'
p38631
sS'default'
p38632
S'0'
p38633
sS'name'
p38634
S'unique_node_execute'
p38635
sS'required'
p38636
I00
sS'group_name'
p38637
Nsa(dp38638
S'description'
p38639
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38640
sS'cpp_type'
p38641
S'bool'
p38642
sS'default'
p38643
S'0'
p38644
sS'name'
p38645
S'use_displaced_mesh'
p38646
sS'required'
p38647
I00
sS'group_name'
p38648
S'Advanced'
p38649
sa(dp38650
S'description'
p38651
S'The name of the variable that this postprocessor operates on\n'
p38652
sS'cpp_type'
p38653
S'std::vector<VariableName>'
p38654
sS'default'
p38655
g3
sS'name'
p38656
S'variable'
p38657
sS'required'
p38658
I01
sS'group_name'
p38659
NsasS'name'
p38660
S'/Postprocessors/NodalProxyMaxValue'
p38661
sa(dp38662
S'description'
p38663
g3
sS'subblocks'
p38664
NsS'parameters'
p38665
(lp38666
(dp38667
S'description'
p38668
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38669
sS'cpp_type'
p38670
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p38671
sS'default'
p38672
g3
sS'name'
p38673
S'block'
p38674
sS'required'
p38675
I00
sS'group_name'
p38676
Nsa(dp38677
S'description'
p38678
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38679
sS'cpp_type'
p38680
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p38681
sS'default'
p38682
g3
sS'name'
p38683
S'boundary'
p38684
sS'required'
p38685
I00
sS'group_name'
p38686
Nsa(dp38687
S'description'
p38688
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38689
sS'cpp_type'
p38690
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38691
sS'default'
p38692
g3
sS'name'
p38693
S'control_tags'
p38694
sS'required'
p38695
I00
sS'group_name'
p38696
S'Advanced'
p38697
sa(dp38698
S'description'
p38699
S'Set the enabled status of the MooseObject.\n'
p38700
sS'cpp_type'
p38701
S'bool'
p38702
sS'default'
p38703
S'1'
p38704
sS'name'
p38705
S'enable'
p38706
sS'required'
p38707
I00
sS'group_name'
p38708
S'Advanced'
p38709
sa(dp38710
S'name'
p38711
S'execute_on'
p38712
sS'cpp_type'
p38713
S'MultiMooseEnum'
p38714
sS'default'
p38715
S'TIMESTEP_END'
p38716
sS'description'
p38717
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38718
sS'required'
p38719
I00
sS'options'
p38720
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38721
sS'group_name'
p38722
Nsa(dp38723
S'description'
p38724
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38725
sS'cpp_type'
p38726
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38727
sS'default'
p38728
g3
sS'name'
p38729
S'outputs'
p38730
sS'required'
p38731
I00
sS'group_name'
p38732
S'Advanced'
p38733
sa(dp38734
S'description'
p38735
S'The seed for the master random number generator\n'
p38736
sS'cpp_type'
p38737
S'unsigned int'
p38738
sS'default'
p38739
S'0'
p38740
sS'name'
p38741
S'seed'
p38742
sS'required'
p38743
I00
sS'group_name'
p38744
S'Advanced'
p38745
sa(dp38746
S'description'
p38747
g3
sS'cpp_type'
p38748
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38749
sS'default'
p38750
S'NodalSum'
p38751
sS'name'
p38752
S'type'
p38753
sS'required'
p38754
I00
sS'group_name'
p38755
Nsa(dp38756
S'description'
p38757
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p38758
sS'cpp_type'
p38759
S'bool'
p38760
sS'default'
p38761
S'1'
p38762
sS'name'
p38763
S'unique_node_execute'
p38764
sS'required'
p38765
I00
sS'group_name'
p38766
Nsa(dp38767
S'description'
p38768
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38769
sS'cpp_type'
p38770
S'bool'
p38771
sS'default'
p38772
S'0'
p38773
sS'name'
p38774
S'use_displaced_mesh'
p38775
sS'required'
p38776
I00
sS'group_name'
p38777
S'Advanced'
p38778
sa(dp38779
S'description'
p38780
S'The name of the variable that this postprocessor operates on\n'
p38781
sS'cpp_type'
p38782
S'std::vector<VariableName>'
p38783
sS'default'
p38784
g3
sS'name'
p38785
S'variable'
p38786
sS'required'
p38787
I01
sS'group_name'
p38788
NsasS'name'
p38789
S'/Postprocessors/NodalSum'
p38790
sa(dp38791
S'description'
p38792
g3
sS'subblocks'
p38793
NsS'parameters'
p38794
(lp38795
(dp38796
S'description'
p38797
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38798
sS'cpp_type'
p38799
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38800
sS'default'
p38801
g3
sS'name'
p38802
S'control_tags'
p38803
sS'required'
p38804
I00
sS'group_name'
p38805
S'Advanced'
p38806
sa(dp38807
S'description'
p38808
S'Set the enabled status of the MooseObject.\n'
p38809
sS'cpp_type'
p38810
S'bool'
p38811
sS'default'
p38812
S'1'
p38813
sS'name'
p38814
S'enable'
p38815
sS'required'
p38816
I00
sS'group_name'
p38817
S'Advanced'
p38818
sa(dp38819
S'name'
p38820
S'execute_on'
p38821
sS'cpp_type'
p38822
S'MultiMooseEnum'
p38823
sS'default'
p38824
S'TIMESTEP_END'
p38825
sS'description'
p38826
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38827
sS'required'
p38828
I00
sS'options'
p38829
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38830
sS'group_name'
p38831
Nsa(dp38832
S'description'
p38833
S'The ID of the node where we monitor\n'
p38834
sS'cpp_type'
p38835
S'unsigned int'
p38836
sS'default'
p38837
g3
sS'name'
p38838
S'nodeid'
p38839
sS'required'
p38840
I01
sS'group_name'
p38841
Nsa(dp38842
S'description'
p38843
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38844
sS'cpp_type'
p38845
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38846
sS'default'
p38847
g3
sS'name'
p38848
S'outputs'
p38849
sS'required'
p38850
I00
sS'group_name'
p38851
S'Advanced'
p38852
sa(dp38853
S'description'
p38854
S'A scale factor to be applied to the variable\n'
p38855
sS'cpp_type'
p38856
S'double'
p38857
sS'default'
p38858
S'1'
p38859
sS'name'
p38860
S'scale_factor'
p38861
sS'required'
p38862
I00
sS'group_name'
p38863
Nsa(dp38864
S'description'
p38865
g3
sS'cpp_type'
p38866
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38867
sS'default'
p38868
S'NodalVariableValue'
p38869
sS'name'
p38870
S'type'
p38871
sS'required'
p38872
I00
sS'group_name'
p38873
Nsa(dp38874
S'description'
p38875
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38876
sS'cpp_type'
p38877
S'bool'
p38878
sS'default'
p38879
S'0'
p38880
sS'name'
p38881
S'use_displaced_mesh'
p38882
sS'required'
p38883
I00
sS'group_name'
p38884
S'Advanced'
p38885
sa(dp38886
S'description'
p38887
S'The variable to be monitored\n'
p38888
sS'cpp_type'
p38889
S'VariableName'
p38890
sS'default'
p38891
g3
sS'name'
p38892
S'variable'
p38893
sS'required'
p38894
I01
sS'group_name'
p38895
NsasS'name'
p38896
S'/Postprocessors/NodalVariableValue'
p38897
sa(dp38898
S'description'
p38899
g3
sS'subblocks'
p38900
NsS'parameters'
p38901
(lp38902
(dp38903
S'description'
p38904
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38905
sS'cpp_type'
p38906
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38907
sS'default'
p38908
g3
sS'name'
p38909
S'control_tags'
p38910
sS'required'
p38911
I00
sS'group_name'
p38912
S'Advanced'
p38913
sa(dp38914
S'description'
p38915
S'Set the enabled status of the MooseObject.\n'
p38916
sS'cpp_type'
p38917
S'bool'
p38918
sS'default'
p38919
S'1'
p38920
sS'name'
p38921
S'enable'
p38922
sS'required'
p38923
I00
sS'group_name'
p38924
S'Advanced'
p38925
sa(dp38926
S'name'
p38927
S'execute_on'
p38928
sS'cpp_type'
p38929
S'MultiMooseEnum'
p38930
sS'default'
p38931
S'TIMESTEP_END'
p38932
sS'description'
p38933
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38934
sS'required'
p38935
I00
sS'options'
p38936
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38937
sS'group_name'
p38938
Nsa(dp38939
S'description'
p38940
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38941
sS'cpp_type'
p38942
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38943
sS'default'
p38944
g3
sS'name'
p38945
S'outputs'
p38946
sS'required'
p38947
I00
sS'group_name'
p38948
S'Advanced'
p38949
sa(dp38950
S'name'
p38951
S'system'
p38952
sS'cpp_type'
p38953
S'MooseEnum'
p38954
sS'default'
p38955
S'ALL'
p38956
sS'description'
p38957
S'The system(s) to retrieve the number of DOFs from (NL, AUX, ALL). Default == ALL\n'
p38958
sS'required'
p38959
I00
sS'options'
p38960
S'NL AUX ALL'
p38961
sS'group_name'
p38962
Nsa(dp38963
S'description'
p38964
g3
sS'cpp_type'
p38965
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38966
sS'default'
p38967
S'NumDOFs'
p38968
sS'name'
p38969
S'type'
p38970
sS'required'
p38971
I00
sS'group_name'
p38972
Nsa(dp38973
S'description'
p38974
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38975
sS'cpp_type'
p38976
S'bool'
p38977
sS'default'
p38978
S'0'
p38979
sS'name'
p38980
S'use_displaced_mesh'
p38981
sS'required'
p38982
I00
sS'group_name'
p38983
S'Advanced'
p38984
sasS'name'
p38985
S'/Postprocessors/NumDOFs'
p38986
sa(dp38987
S'description'
p38988
g3
sS'subblocks'
p38989
NsS'parameters'
p38990
(lp38991
(dp38992
S'description'
p38993
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38994
sS'cpp_type'
p38995
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38996
sS'default'
p38997
g3
sS'name'
p38998
S'control_tags'
p38999
sS'required'
p39000
I00
sS'group_name'
p39001
S'Advanced'
p39002
sa(dp39003
S'name'
p39004
S'elem_filter'
p39005
sS'cpp_type'
p39006
S'MooseEnum'
p39007
sS'default'
p39008
S'active'
p39009
sS'description'
p39010
S'The type of elements to include in the count (active, total). Default == active\n'
p39011
sS'required'
p39012
I00
sS'options'
p39013
S'active total'
p39014
sS'group_name'
p39015
Nsa(dp39016
S'description'
p39017
S'Set the enabled status of the MooseObject.\n'
p39018
sS'cpp_type'
p39019
S'bool'
p39020
sS'default'
p39021
S'1'
p39022
sS'name'
p39023
S'enable'
p39024
sS'required'
p39025
I00
sS'group_name'
p39026
S'Advanced'
p39027
sa(dp39028
S'name'
p39029
S'execute_on'
p39030
sS'cpp_type'
p39031
S'MultiMooseEnum'
p39032
sS'default'
p39033
S'TIMESTEP_END'
p39034
sS'description'
p39035
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39036
sS'required'
p39037
I00
sS'options'
p39038
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39039
sS'group_name'
p39040
Nsa(dp39041
S'description'
p39042
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39043
sS'cpp_type'
p39044
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39045
sS'default'
p39046
g3
sS'name'
p39047
S'outputs'
p39048
sS'required'
p39049
I00
sS'group_name'
p39050
S'Advanced'
p39051
sa(dp39052
S'description'
p39053
g3
sS'cpp_type'
p39054
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39055
sS'default'
p39056
S'NumElems'
p39057
sS'name'
p39058
S'type'
p39059
sS'required'
p39060
I00
sS'group_name'
p39061
Nsa(dp39062
S'description'
p39063
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39064
sS'cpp_type'
p39065
S'bool'
p39066
sS'default'
p39067
S'0'
p39068
sS'name'
p39069
S'use_displaced_mesh'
p39070
sS'required'
p39071
I00
sS'group_name'
p39072
S'Advanced'
p39073
sasS'name'
p39074
S'/Postprocessors/NumElems'
p39075
sa(dp39076
S'description'
p39077
g3
sS'subblocks'
p39078
NsS'parameters'
p39079
(lp39080
(dp39081
S'description'
p39082
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39083
sS'cpp_type'
p39084
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39085
sS'default'
p39086
g3
sS'name'
p39087
S'control_tags'
p39088
sS'required'
p39089
I00
sS'group_name'
p39090
S'Advanced'
p39091
sa(dp39092
S'description'
p39093
S'Set the enabled status of the MooseObject.\n'
p39094
sS'cpp_type'
p39095
S'bool'
p39096
sS'default'
p39097
S'1'
p39098
sS'name'
p39099
S'enable'
p39100
sS'required'
p39101
I00
sS'group_name'
p39102
S'Advanced'
p39103
sa(dp39104
S'name'
p39105
S'execute_on'
p39106
sS'cpp_type'
p39107
S'MultiMooseEnum'
p39108
sS'default'
p39109
S'TIMESTEP_END'
p39110
sS'description'
p39111
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39112
sS'required'
p39113
I00
sS'options'
p39114
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39115
sS'group_name'
p39116
Nsa(dp39117
S'description'
p39118
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39119
sS'cpp_type'
p39120
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39121
sS'default'
p39122
g3
sS'name'
p39123
S'outputs'
p39124
sS'required'
p39125
I00
sS'group_name'
p39126
S'Advanced'
p39127
sa(dp39128
S'description'
p39129
g3
sS'cpp_type'
p39130
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39131
sS'default'
p39132
S'NumLinearIterations'
p39133
sS'name'
p39134
S'type'
p39135
sS'required'
p39136
I00
sS'group_name'
p39137
Nsa(dp39138
S'description'
p39139
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39140
sS'cpp_type'
p39141
S'bool'
p39142
sS'default'
p39143
S'0'
p39144
sS'name'
p39145
S'use_displaced_mesh'
p39146
sS'required'
p39147
I00
sS'group_name'
p39148
S'Advanced'
p39149
sasS'name'
p39150
S'/Postprocessors/NumLinearIterations'
p39151
sa(dp39152
S'description'
p39153
g3
sS'subblocks'
p39154
NsS'parameters'
p39155
(lp39156
(dp39157
S'description'
p39158
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39159
sS'cpp_type'
p39160
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39161
sS'default'
p39162
g3
sS'name'
p39163
S'control_tags'
p39164
sS'required'
p39165
I00
sS'group_name'
p39166
S'Advanced'
p39167
sa(dp39168
S'description'
p39169
S'Set the enabled status of the MooseObject.\n'
p39170
sS'cpp_type'
p39171
S'bool'
p39172
sS'default'
p39173
S'1'
p39174
sS'name'
p39175
S'enable'
p39176
sS'required'
p39177
I00
sS'group_name'
p39178
S'Advanced'
p39179
sa(dp39180
S'name'
p39181
S'execute_on'
p39182
sS'cpp_type'
p39183
S'MultiMooseEnum'
p39184
sS'default'
p39185
S'TIMESTEP_END'
p39186
sS'description'
p39187
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39188
sS'required'
p39189
I00
sS'options'
p39190
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39191
sS'group_name'
p39192
Nsa(dp39193
S'description'
p39194
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39195
sS'cpp_type'
p39196
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39197
sS'default'
p39198
g3
sS'name'
p39199
S'outputs'
p39200
sS'required'
p39201
I00
sS'group_name'
p39202
S'Advanced'
p39203
sa(dp39204
S'description'
p39205
g3
sS'cpp_type'
p39206
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39207
sS'default'
p39208
S'NumNodes'
p39209
sS'name'
p39210
S'type'
p39211
sS'required'
p39212
I00
sS'group_name'
p39213
Nsa(dp39214
S'description'
p39215
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39216
sS'cpp_type'
p39217
S'bool'
p39218
sS'default'
p39219
S'0'
p39220
sS'name'
p39221
S'use_displaced_mesh'
p39222
sS'required'
p39223
I00
sS'group_name'
p39224
S'Advanced'
p39225
sasS'name'
p39226
S'/Postprocessors/NumNodes'
p39227
sa(dp39228
S'description'
p39229
g3
sS'subblocks'
p39230
NsS'parameters'
p39231
(lp39232
(dp39233
S'description'
p39234
S'When set to true, accumulates to count the total over all Picard iterations for each step\n'
p39235
sS'cpp_type'
p39236
S'bool'
p39237
sS'default'
p39238
S'0'
p39239
sS'name'
p39240
S'accumulate_over_step'
p39241
sS'required'
p39242
I00
sS'group_name'
p39243
Nsa(dp39244
S'description'
p39245
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39246
sS'cpp_type'
p39247
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39248
sS'default'
p39249
g3
sS'name'
p39250
S'control_tags'
p39251
sS'required'
p39252
I00
sS'group_name'
p39253
S'Advanced'
p39254
sa(dp39255
S'description'
p39256
S'Set the enabled status of the MooseObject.\n'
p39257
sS'cpp_type'
p39258
S'bool'
p39259
sS'default'
p39260
S'1'
p39261
sS'name'
p39262
S'enable'
p39263
sS'required'
p39264
I00
sS'group_name'
p39265
S'Advanced'
p39266
sa(dp39267
S'name'
p39268
S'execute_on'
p39269
sS'cpp_type'
p39270
S'MultiMooseEnum'
p39271
sS'default'
p39272
S'TIMESTEP_END'
p39273
sS'description'
p39274
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39275
sS'required'
p39276
I00
sS'options'
p39277
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39278
sS'group_name'
p39279
Nsa(dp39280
S'description'
p39281
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39282
sS'cpp_type'
p39283
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39284
sS'default'
p39285
g3
sS'name'
p39286
S'outputs'
p39287
sS'required'
p39288
I00
sS'group_name'
p39289
S'Advanced'
p39290
sa(dp39291
S'description'
p39292
g3
sS'cpp_type'
p39293
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39294
sS'default'
p39295
S'NumNonlinearIterations'
p39296
sS'name'
p39297
S'type'
p39298
sS'required'
p39299
I00
sS'group_name'
p39300
Nsa(dp39301
S'description'
p39302
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39303
sS'cpp_type'
p39304
S'bool'
p39305
sS'default'
p39306
S'0'
p39307
sS'name'
p39308
S'use_displaced_mesh'
p39309
sS'required'
p39310
I00
sS'group_name'
p39311
S'Advanced'
p39312
sasS'name'
p39313
S'/Postprocessors/NumNonlinearIterations'
p39314
sa(dp39315
S'description'
p39316
g3
sS'subblocks'
p39317
NsS'parameters'
p39318
(lp39319
(dp39320
S'description'
p39321
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39322
sS'cpp_type'
p39323
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39324
sS'default'
p39325
g3
sS'name'
p39326
S'control_tags'
p39327
sS'required'
p39328
I00
sS'group_name'
p39329
S'Advanced'
p39330
sa(dp39331
S'description'
p39332
S'Set the enabled status of the MooseObject.\n'
p39333
sS'cpp_type'
p39334
S'bool'
p39335
sS'default'
p39336
S'1'
p39337
sS'name'
p39338
S'enable'
p39339
sS'required'
p39340
I00
sS'group_name'
p39341
S'Advanced'
p39342
sa(dp39343
S'name'
p39344
S'execute_on'
p39345
sS'cpp_type'
p39346
S'MultiMooseEnum'
p39347
sS'default'
p39348
S'TIMESTEP_END'
p39349
sS'description'
p39350
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39351
sS'required'
p39352
I00
sS'options'
p39353
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39354
sS'group_name'
p39355
Nsa(dp39356
S'description'
p39357
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39358
sS'cpp_type'
p39359
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39360
sS'default'
p39361
g3
sS'name'
p39362
S'outputs'
p39363
sS'required'
p39364
I00
sS'group_name'
p39365
S'Advanced'
p39366
sa(dp39367
S'description'
p39368
g3
sS'cpp_type'
p39369
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39370
sS'default'
p39371
S'NumPicardIterations'
p39372
sS'name'
p39373
S'type'
p39374
sS'required'
p39375
I00
sS'group_name'
p39376
Nsa(dp39377
S'description'
p39378
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39379
sS'cpp_type'
p39380
S'bool'
p39381
sS'default'
p39382
S'0'
p39383
sS'name'
p39384
S'use_displaced_mesh'
p39385
sS'required'
p39386
I00
sS'group_name'
p39387
S'Advanced'
p39388
sasS'name'
p39389
S'/Postprocessors/NumPicardIterations'
p39390
sa(dp39391
S'description'
p39392
g3
sS'subblocks'
p39393
NsS'parameters'
p39394
(lp39395
(dp39396
S'description'
p39397
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39398
sS'cpp_type'
p39399
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39400
sS'default'
p39401
g3
sS'name'
p39402
S'control_tags'
p39403
sS'required'
p39404
I00
sS'group_name'
p39405
S'Advanced'
p39406
sa(dp39407
S'description'
p39408
S'Set the enabled status of the MooseObject.\n'
p39409
sS'cpp_type'
p39410
S'bool'
p39411
sS'default'
p39412
S'1'
p39413
sS'name'
p39414
S'enable'
p39415
sS'required'
p39416
I00
sS'group_name'
p39417
S'Advanced'
p39418
sa(dp39419
S'name'
p39420
S'execute_on'
p39421
sS'cpp_type'
p39422
S'MultiMooseEnum'
p39423
sS'default'
p39424
S'TIMESTEP_END'
p39425
sS'description'
p39426
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39427
sS'required'
p39428
I00
sS'options'
p39429
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39430
sS'group_name'
p39431
Nsa(dp39432
S'description'
p39433
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39434
sS'cpp_type'
p39435
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39436
sS'default'
p39437
g3
sS'name'
p39438
S'outputs'
p39439
sS'required'
p39440
I00
sS'group_name'
p39441
S'Advanced'
p39442
sa(dp39443
S'description'
p39444
g3
sS'cpp_type'
p39445
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39446
sS'default'
p39447
S'NumResidualEvaluations'
p39448
sS'name'
p39449
S'type'
p39450
sS'required'
p39451
I00
sS'group_name'
p39452
Nsa(dp39453
S'description'
p39454
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39455
sS'cpp_type'
p39456
S'bool'
p39457
sS'default'
p39458
S'0'
p39459
sS'name'
p39460
S'use_displaced_mesh'
p39461
sS'required'
p39462
I00
sS'group_name'
p39463
S'Advanced'
p39464
sasS'name'
p39465
S'/Postprocessors/NumResidualEvaluations'
p39466
sa(dp39467
S'description'
p39468
g3
sS'subblocks'
p39469
NsS'parameters'
p39470
(lp39471
(dp39472
S'description'
p39473
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39474
sS'cpp_type'
p39475
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39476
sS'default'
p39477
g3
sS'name'
p39478
S'control_tags'
p39479
sS'required'
p39480
I00
sS'group_name'
p39481
S'Advanced'
p39482
sa(dp39483
S'description'
p39484
S'Set the enabled status of the MooseObject.\n'
p39485
sS'cpp_type'
p39486
S'bool'
p39487
sS'default'
p39488
S'1'
p39489
sS'name'
p39490
S'enable'
p39491
sS'required'
p39492
I00
sS'group_name'
p39493
S'Advanced'
p39494
sa(dp39495
S'name'
p39496
S'execute_on'
p39497
sS'cpp_type'
p39498
S'MultiMooseEnum'
p39499
sS'default'
p39500
S'TIMESTEP_END'
p39501
sS'description'
p39502
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39503
sS'required'
p39504
I00
sS'options'
p39505
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39506
sS'group_name'
p39507
Nsa(dp39508
S'description'
p39509
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39510
sS'cpp_type'
p39511
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39512
sS'default'
p39513
g3
sS'name'
p39514
S'outputs'
p39515
sS'required'
p39516
I00
sS'group_name'
p39517
S'Advanced'
p39518
sa(dp39519
S'name'
p39520
S'system'
p39521
sS'cpp_type'
p39522
S'MooseEnum'
p39523
sS'default'
p39524
S'nonlinear'
p39525
sS'description'
p39526
S'The system for which you want to print the number of variables.\n'
p39527
sS'required'
p39528
I00
sS'options'
p39529
S'nonlinear auxiliary'
p39530
sS'group_name'
p39531
Nsa(dp39532
S'description'
p39533
g3
sS'cpp_type'
p39534
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39535
sS'default'
p39536
S'NumVars'
p39537
sS'name'
p39538
S'type'
p39539
sS'required'
p39540
I00
sS'group_name'
p39541
Nsa(dp39542
S'description'
p39543
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39544
sS'cpp_type'
p39545
S'bool'
p39546
sS'default'
p39547
S'0'
p39548
sS'name'
p39549
S'use_displaced_mesh'
p39550
sS'required'
p39551
I00
sS'group_name'
p39552
S'Advanced'
p39553
sasS'name'
p39554
S'/Postprocessors/NumVars'
p39555
sa(dp39556
S'description'
p39557
g3
sS'subblocks'
p39558
NsS'parameters'
p39559
(lp39560
(dp39561
S'description'
p39562
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39563
sS'cpp_type'
p39564
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39565
sS'default'
p39566
g3
sS'name'
p39567
S'control_tags'
p39568
sS'required'
p39569
I00
sS'group_name'
p39570
S'Advanced'
p39571
sa(dp39572
S'description'
p39573
S'Set the enabled status of the MooseObject.\n'
p39574
sS'cpp_type'
p39575
S'bool'
p39576
sS'default'
p39577
S'1'
p39578
sS'name'
p39579
S'enable'
p39580
sS'required'
p39581
I00
sS'group_name'
p39582
S'Advanced'
p39583
sa(dp39584
S'name'
p39585
S'execute_on'
p39586
sS'cpp_type'
p39587
S'MultiMooseEnum'
p39588
sS'default'
p39589
S'TIMESTEP_END'
p39590
sS'description'
p39591
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39592
sS'required'
p39593
I00
sS'options'
p39594
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39595
sS'group_name'
p39596
Nsa(dp39597
S'description'
p39598
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39599
sS'cpp_type'
p39600
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39601
sS'default'
p39602
g3
sS'name'
p39603
S'outputs'
p39604
sS'required'
p39605
I00
sS'group_name'
p39606
S'Advanced'
p39607
sa(dp39608
S'description'
p39609
S'The name of the postprocessor used for exit criterion\n'
p39610
sS'cpp_type'
p39611
S'PostprocessorName'
p39612
sS'default'
p39613
g3
sS'name'
p39614
S'postprocessor'
p39615
sS'required'
p39616
I01
sS'group_name'
p39617
Nsa(dp39618
S'description'
p39619
g3
sS'cpp_type'
p39620
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39621
sS'default'
p39622
S'PercentChangePostprocessor'
p39623
sS'name'
p39624
S'type'
p39625
sS'required'
p39626
I00
sS'group_name'
p39627
Nsa(dp39628
S'description'
p39629
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39630
sS'cpp_type'
p39631
S'bool'
p39632
sS'default'
p39633
S'0'
p39634
sS'name'
p39635
S'use_displaced_mesh'
p39636
sS'required'
p39637
I00
sS'group_name'
p39638
S'Advanced'
p39639
sasS'name'
p39640
S'/Postprocessors/PercentChangePostprocessor'
p39641
sa(dp39642
S'description'
p39643
g3
sS'subblocks'
p39644
NsS'parameters'
p39645
(lp39646
(dp39647
S'description'
p39648
S'The category or "Header" for the event\n'
p39649
sS'cpp_type'
p39650
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39651
sS'default'
p39652
S'Execution'
p39653
sS'name'
p39654
S'category'
p39655
sS'required'
p39656
I00
sS'group_name'
p39657
Nsa(dp39658
S'name'
p39659
S'column'
p39660
sS'cpp_type'
p39661
S'MooseEnum'
p39662
sS'default'
p39663
S'total_time_with_sub'
p39664
sS'description'
p39665
S'The column you want the value of (Default: total_time_with_sub).\n'
p39666
sS'required'
p39667
I00
sS'options'
p39668
S'n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub'
p39669
sS'group_name'
p39670
Nsa(dp39671
S'description'
p39672
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39673
sS'cpp_type'
p39674
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39675
sS'default'
p39676
g3
sS'name'
p39677
S'control_tags'
p39678
sS'required'
p39679
I00
sS'group_name'
p39680
S'Advanced'
p39681
sa(dp39682
S'description'
p39683
S'Set the enabled status of the MooseObject.\n'
p39684
sS'cpp_type'
p39685
S'bool'
p39686
sS'default'
p39687
S'1'
p39688
sS'name'
p39689
S'enable'
p39690
sS'required'
p39691
I00
sS'group_name'
p39692
S'Advanced'
p39693
sa(dp39694
S'description'
p39695
S'The name or "label" of the event ("ALIVE" and "ACTIVE" are also valid events, category and column are ignored for these cases).\n'
p39696
sS'cpp_type'
p39697
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39698
sS'default'
p39699
g3
sS'name'
p39700
S'event'
p39701
sS'required'
p39702
I01
sS'group_name'
p39703
Nsa(dp39704
S'name'
p39705
S'execute_on'
p39706
sS'cpp_type'
p39707
S'MultiMooseEnum'
p39708
sS'default'
p39709
S'TIMESTEP_END'
p39710
sS'description'
p39711
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39712
sS'required'
p39713
I00
sS'options'
p39714
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39715
sS'group_name'
p39716
Nsa(dp39717
S'description'
p39718
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39719
sS'cpp_type'
p39720
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39721
sS'default'
p39722
g3
sS'name'
p39723
S'outputs'
p39724
sS'required'
p39725
I00
sS'group_name'
p39726
S'Advanced'
p39727
sa(dp39728
S'description'
p39729
g3
sS'cpp_type'
p39730
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39731
sS'default'
p39732
S'PerformanceData'
p39733
sS'name'
p39734
S'type'
p39735
sS'required'
p39736
I00
sS'group_name'
p39737
Nsa(dp39738
S'description'
p39739
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39740
sS'cpp_type'
p39741
S'bool'
p39742
sS'default'
p39743
S'0'
p39744
sS'name'
p39745
S'use_displaced_mesh'
p39746
sS'required'
p39747
I00
sS'group_name'
p39748
S'Advanced'
p39749
sasS'name'
p39750
S'/Postprocessors/PerformanceData'
p39751
sa(dp39752
S'description'
p39753
g3
sS'subblocks'
p39754
NsS'parameters'
p39755
(lp39756
(dp39757
S'description'
p39758
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39759
sS'cpp_type'
p39760
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39761
sS'default'
p39762
g3
sS'name'
p39763
S'control_tags'
p39764
sS'required'
p39765
I00
sS'group_name'
p39766
S'Advanced'
p39767
sa(dp39768
S'description'
p39769
S'Set the enabled status of the MooseObject.\n'
p39770
sS'cpp_type'
p39771
S'bool'
p39772
sS'default'
p39773
S'1'
p39774
sS'name'
p39775
S'enable'
p39776
sS'required'
p39777
I00
sS'group_name'
p39778
S'Advanced'
p39779
sa(dp39780
S'name'
p39781
S'execute_on'
p39782
sS'cpp_type'
p39783
S'MultiMooseEnum'
p39784
sS'default'
p39785
S'TIMESTEP_END'
p39786
sS'description'
p39787
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39788
sS'required'
p39789
I00
sS'options'
p39790
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39791
sS'group_name'
p39792
Nsa(dp39793
S'description'
p39794
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39795
sS'cpp_type'
p39796
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39797
sS'default'
p39798
g3
sS'name'
p39799
S'outputs'
p39800
sS'required'
p39801
I00
sS'group_name'
p39802
S'Advanced'
p39803
sa(dp39804
S'description'
p39805
S'The physical point where the solution will be evaluated.\n'
p39806
sS'cpp_type'
p39807
S'libMesh::Point'
p39808
sS'default'
p39809
g3
sS'name'
p39810
S'point'
p39811
sS'required'
p39812
I01
sS'group_name'
p39813
Nsa(dp39814
S'description'
p39815
g3
sS'cpp_type'
p39816
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39817
sS'default'
p39818
S'PointValue'
p39819
sS'name'
p39820
S'type'
p39821
sS'required'
p39822
I00
sS'group_name'
p39823
Nsa(dp39824
S'description'
p39825
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39826
sS'cpp_type'
p39827
S'bool'
p39828
sS'default'
p39829
S'0'
p39830
sS'name'
p39831
S'use_displaced_mesh'
p39832
sS'required'
p39833
I00
sS'group_name'
p39834
S'Advanced'
p39835
sa(dp39836
S'description'
p39837
S'The name of the variable that this postprocessor operates on.\n'
p39838
sS'cpp_type'
p39839
S'VariableName'
p39840
sS'default'
p39841
g3
sS'name'
p39842
S'variable'
p39843
sS'required'
p39844
I01
sS'group_name'
p39845
NsasS'name'
p39846
S'/Postprocessors/PointValue'
p39847
sa(dp39848
S'description'
p39849
g3
sS'subblocks'
p39850
NsS'parameters'
p39851
(lp39852
(dp39853
S'description'
p39854
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39855
sS'cpp_type'
p39856
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39857
sS'default'
p39858
g3
sS'name'
p39859
S'control_tags'
p39860
sS'required'
p39861
I00
sS'group_name'
p39862
S'Advanced'
p39863
sa(dp39864
S'description'
p39865
S'The default value\n'
p39866
sS'cpp_type'
p39867
S'double'
p39868
sS'default'
p39869
g3
sS'name'
p39870
S'default'
p39871
sS'required'
p39872
I00
sS'group_name'
p39873
Nsa(dp39874
S'description'
p39875
S'Set the enabled status of the MooseObject.\n'
p39876
sS'cpp_type'
p39877
S'bool'
p39878
sS'default'
p39879
S'1'
p39880
sS'name'
p39881
S'enable'
p39882
sS'required'
p39883
I00
sS'group_name'
p39884
S'Advanced'
p39885
sa(dp39886
S'name'
p39887
S'execute_on'
p39888
sS'cpp_type'
p39889
S'MultiMooseEnum'
p39890
sS'default'
p39891
S'TIMESTEP_END'
p39892
sS'description'
p39893
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39894
sS'required'
p39895
I00
sS'options'
p39896
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39897
sS'group_name'
p39898
Nsa(dp39899
S'description'
p39900
S'Initialize the old postprocessor value with the default value\n'
p39901
sS'cpp_type'
p39902
S'bool'
p39903
sS'default'
p39904
S'1'
p39905
sS'name'
p39906
S'initialize_old'
p39907
sS'required'
p39908
I00
sS'group_name'
p39909
Nsa(dp39910
S'description'
p39911
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39912
sS'cpp_type'
p39913
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39914
sS'default'
p39915
g3
sS'name'
p39916
S'outputs'
p39917
sS'required'
p39918
I00
sS'group_name'
p39919
S'Advanced'
p39920
sa(dp39921
S'description'
p39922
g3
sS'cpp_type'
p39923
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39924
sS'default'
p39925
S'Receiver'
p39926
sS'name'
p39927
S'type'
p39928
sS'required'
p39929
I00
sS'group_name'
p39930
Nsa(dp39931
S'description'
p39932
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39933
sS'cpp_type'
p39934
S'bool'
p39935
sS'default'
p39936
S'0'
p39937
sS'name'
p39938
S'use_displaced_mesh'
p39939
sS'required'
p39940
I00
sS'group_name'
p39941
S'Advanced'
p39942
sasS'name'
p39943
S'/Postprocessors/Receiver'
p39944
sa(dp39945
S'description'
p39946
g3
sS'subblocks'
p39947
NsS'parameters'
p39948
(lp39949
(dp39950
S'description'
p39951
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39952
sS'cpp_type'
p39953
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39954
sS'default'
p39955
g3
sS'name'
p39956
S'control_tags'
p39957
sS'required'
p39958
I00
sS'group_name'
p39959
S'Advanced'
p39960
sa(dp39961
S'description'
p39962
S'Set the enabled status of the MooseObject.\n'
p39963
sS'cpp_type'
p39964
S'bool'
p39965
sS'default'
p39966
S'1'
p39967
sS'name'
p39968
S'enable'
p39969
sS'required'
p39970
I00
sS'group_name'
p39971
S'Advanced'
p39972
sa(dp39973
S'name'
p39974
S'execute_on'
p39975
sS'cpp_type'
p39976
S'MultiMooseEnum'
p39977
sS'default'
p39978
S'TIMESTEP_END'
p39979
sS'description'
p39980
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39981
sS'required'
p39982
I00
sS'options'
p39983
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39984
sS'group_name'
p39985
Nsa(dp39986
S'description'
p39987
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39988
sS'cpp_type'
p39989
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39990
sS'default'
p39991
g3
sS'name'
p39992
S'outputs'
p39993
sS'required'
p39994
I00
sS'group_name'
p39995
S'Advanced'
p39996
sa(dp39997
S'description'
p39998
g3
sS'cpp_type'
p39999
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40000
sS'default'
p40001
S'RelativeSolutionDifferenceNorm'
p40002
sS'name'
p40003
S'type'
p40004
sS'required'
p40005
I00
sS'group_name'
p40006
Nsa(dp40007
S'description'
p40008
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40009
sS'cpp_type'
p40010
S'bool'
p40011
sS'default'
p40012
S'0'
p40013
sS'name'
p40014
S'use_displaced_mesh'
p40015
sS'required'
p40016
I00
sS'group_name'
p40017
S'Advanced'
p40018
sasS'name'
p40019
S'/Postprocessors/RelativeSolutionDifferenceNorm'
p40020
sa(dp40021
S'description'
p40022
g3
sS'subblocks'
p40023
NsS'parameters'
p40024
(lp40025
(dp40026
S'description'
p40027
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40028
sS'cpp_type'
p40029
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40030
sS'default'
p40031
g3
sS'name'
p40032
S'control_tags'
p40033
sS'required'
p40034
I00
sS'group_name'
p40035
S'Advanced'
p40036
sa(dp40037
S'description'
p40038
S'Set the enabled status of the MooseObject.\n'
p40039
sS'cpp_type'
p40040
S'bool'
p40041
sS'default'
p40042
S'1'
p40043
sS'name'
p40044
S'enable'
p40045
sS'required'
p40046
I00
sS'group_name'
p40047
S'Advanced'
p40048
sa(dp40049
S'name'
p40050
S'execute_on'
p40051
sS'cpp_type'
p40052
S'MultiMooseEnum'
p40053
sS'default'
p40054
S'TIMESTEP_END'
p40055
sS'description'
p40056
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40057
sS'required'
p40058
I00
sS'options'
p40059
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40060
sS'group_name'
p40061
Nsa(dp40062
S'description'
p40063
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40064
sS'cpp_type'
p40065
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40066
sS'default'
p40067
g3
sS'name'
p40068
S'outputs'
p40069
sS'required'
p40070
I00
sS'group_name'
p40071
S'Advanced'
p40072
sa(dp40073
S'name'
p40074
S'residual_type'
p40075
sS'cpp_type'
p40076
S'MooseEnum'
p40077
sS'default'
p40078
S'FINAL'
p40079
sS'description'
p40080
S'Type of residual to be reported.  Choices are: FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET\n'
p40081
sS'required'
p40082
I00
sS'options'
p40083
S'FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET'
p40084
sS'group_name'
p40085
Nsa(dp40086
S'description'
p40087
g3
sS'cpp_type'
p40088
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40089
sS'default'
p40090
S'Residual'
p40091
sS'name'
p40092
S'type'
p40093
sS'required'
p40094
I00
sS'group_name'
p40095
Nsa(dp40096
S'description'
p40097
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40098
sS'cpp_type'
p40099
S'bool'
p40100
sS'default'
p40101
S'0'
p40102
sS'name'
p40103
S'use_displaced_mesh'
p40104
sS'required'
p40105
I00
sS'group_name'
p40106
S'Advanced'
p40107
sasS'name'
p40108
S'/Postprocessors/Residual'
p40109
sa(dp40110
S'description'
p40111
g3
sS'subblocks'
p40112
NsS'parameters'
p40113
(lp40114
(dp40115
S'description'
p40116
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40117
sS'cpp_type'
p40118
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40119
sS'default'
p40120
g3
sS'name'
p40121
S'control_tags'
p40122
sS'required'
p40123
I00
sS'group_name'
p40124
S'Advanced'
p40125
sa(dp40126
S'description'
p40127
S'Set the enabled status of the MooseObject.\n'
p40128
sS'cpp_type'
p40129
S'bool'
p40130
sS'default'
p40131
S'1'
p40132
sS'name'
p40133
S'enable'
p40134
sS'required'
p40135
I00
sS'group_name'
p40136
S'Advanced'
p40137
sa(dp40138
S'name'
p40139
S'execute_on'
p40140
sS'cpp_type'
p40141
S'MultiMooseEnum'
p40142
sS'default'
p40143
S'TIMESTEP_END'
p40144
sS'description'
p40145
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40146
sS'required'
p40147
I00
sS'options'
p40148
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40149
sS'group_name'
p40150
Nsa(dp40151
S'description'
p40152
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40153
sS'cpp_type'
p40154
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40155
sS'default'
p40156
g3
sS'name'
p40157
S'outputs'
p40158
sS'required'
p40159
I00
sS'group_name'
p40160
S'Advanced'
p40161
sa(dp40162
S'name'
p40163
S'time_type'
p40164
sS'cpp_type'
p40165
S'MooseEnum'
p40166
sS'default'
p40167
g3
sS'description'
p40168
S'Whether to output the total elapsed or just the active time\n'
p40169
sS'required'
p40170
I01
sS'options'
p40171
S'alive active'
p40172
sS'group_name'
p40173
Nsa(dp40174
S'description'
p40175
g3
sS'cpp_type'
p40176
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40177
sS'default'
p40178
S'RunTime'
p40179
sS'name'
p40180
S'type'
p40181
sS'required'
p40182
I00
sS'group_name'
p40183
Nsa(dp40184
S'description'
p40185
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40186
sS'cpp_type'
p40187
S'bool'
p40188
sS'default'
p40189
S'0'
p40190
sS'name'
p40191
S'use_displaced_mesh'
p40192
sS'required'
p40193
I00
sS'group_name'
p40194
S'Advanced'
p40195
sasS'name'
p40196
S'/Postprocessors/RunTime'
p40197
sa(dp40198
S'description'
p40199
g3
sS'subblocks'
p40200
NsS'parameters'
p40201
(lp40202
(dp40203
S'description'
p40204
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40205
sS'cpp_type'
p40206
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40207
sS'default'
p40208
g3
sS'name'
p40209
S'control_tags'
p40210
sS'required'
p40211
I00
sS'group_name'
p40212
S'Advanced'
p40213
sa(dp40214
S'description'
p40215
S'Set the enabled status of the MooseObject.\n'
p40216
sS'cpp_type'
p40217
S'bool'
p40218
sS'default'
p40219
S'1'
p40220
sS'name'
p40221
S'enable'
p40222
sS'required'
p40223
I00
sS'group_name'
p40224
S'Advanced'
p40225
sa(dp40226
S'name'
p40227
S'execute_on'
p40228
sS'cpp_type'
p40229
S'MultiMooseEnum'
p40230
sS'default'
p40231
S'TIMESTEP_END'
p40232
sS'description'
p40233
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40234
sS'required'
p40235
I00
sS'options'
p40236
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40237
sS'group_name'
p40238
Nsa(dp40239
S'description'
p40240
S'The analytic solution to compare against\n'
p40241
sS'cpp_type'
p40242
S'FunctionName'
p40243
sS'default'
p40244
g3
sS'name'
p40245
S'function'
p40246
sS'required'
p40247
I01
sS'group_name'
p40248
Nsa(dp40249
S'description'
p40250
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40251
sS'cpp_type'
p40252
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40253
sS'default'
p40254
g3
sS'name'
p40255
S'outputs'
p40256
sS'required'
p40257
I00
sS'group_name'
p40258
S'Advanced'
p40259
sa(dp40260
S'description'
p40261
g3
sS'cpp_type'
p40262
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40263
sS'default'
p40264
S'ScalarL2Error'
p40265
sS'name'
p40266
S'type'
p40267
sS'required'
p40268
I00
sS'group_name'
p40269
Nsa(dp40270
S'description'
p40271
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40272
sS'cpp_type'
p40273
S'bool'
p40274
sS'default'
p40275
S'0'
p40276
sS'name'
p40277
S'use_displaced_mesh'
p40278
sS'required'
p40279
I00
sS'group_name'
p40280
S'Advanced'
p40281
sa(dp40282
S'description'
p40283
S'The name of the scalar variable\n'
p40284
sS'cpp_type'
p40285
S'VariableName'
p40286
sS'default'
p40287
g3
sS'name'
p40288
S'variable'
p40289
sS'required'
p40290
I01
sS'group_name'
p40291
NsasS'name'
p40292
S'/Postprocessors/ScalarL2Error'
p40293
sa(dp40294
S'description'
p40295
g3
sS'subblocks'
p40296
NsS'parameters'
p40297
(lp40298
(dp40299
S'description'
p40300
S'Component to output for this variable\n'
p40301
sS'cpp_type'
p40302
S'unsigned int'
p40303
sS'default'
p40304
S'0'
p40305
sS'name'
p40306
S'component'
p40307
sS'required'
p40308
I00
sS'group_name'
p40309
Nsa(dp40310
S'description'
p40311
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40312
sS'cpp_type'
p40313
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40314
sS'default'
p40315
g3
sS'name'
p40316
S'control_tags'
p40317
sS'required'
p40318
I00
sS'group_name'
p40319
S'Advanced'
p40320
sa(dp40321
S'description'
p40322
S'Set the enabled status of the MooseObject.\n'
p40323
sS'cpp_type'
p40324
S'bool'
p40325
sS'default'
p40326
S'1'
p40327
sS'name'
p40328
S'enable'
p40329
sS'required'
p40330
I00
sS'group_name'
p40331
S'Advanced'
p40332
sa(dp40333
S'name'
p40334
S'execute_on'
p40335
sS'cpp_type'
p40336
S'MultiMooseEnum'
p40337
sS'default'
p40338
S'TIMESTEP_END'
p40339
sS'description'
p40340
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40341
sS'required'
p40342
I00
sS'options'
p40343
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40344
sS'group_name'
p40345
Nsa(dp40346
S'description'
p40347
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40348
sS'cpp_type'
p40349
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40350
sS'default'
p40351
g3
sS'name'
p40352
S'outputs'
p40353
sS'required'
p40354
I00
sS'group_name'
p40355
S'Advanced'
p40356
sa(dp40357
S'description'
p40358
g3
sS'cpp_type'
p40359
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40360
sS'default'
p40361
S'ScalarVariable'
p40362
sS'name'
p40363
S'type'
p40364
sS'required'
p40365
I00
sS'group_name'
p40366
Nsa(dp40367
S'description'
p40368
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40369
sS'cpp_type'
p40370
S'bool'
p40371
sS'default'
p40372
S'0'
p40373
sS'name'
p40374
S'use_displaced_mesh'
p40375
sS'required'
p40376
I00
sS'group_name'
p40377
S'Advanced'
p40378
sa(dp40379
S'description'
p40380
S'Name of the variable\n'
p40381
sS'cpp_type'
p40382
S'VariableName'
p40383
sS'default'
p40384
g3
sS'name'
p40385
S'variable'
p40386
sS'required'
p40387
I01
sS'group_name'
p40388
NsasS'name'
p40389
S'/Postprocessors/ScalarVariable'
p40390
sa(dp40391
S'description'
p40392
g3
sS'subblocks'
p40393
NsS'parameters'
p40394
(lp40395
(dp40396
S'description'
p40397
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40398
sS'cpp_type'
p40399
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40400
sS'default'
p40401
g3
sS'name'
p40402
S'control_tags'
p40403
sS'required'
p40404
I00
sS'group_name'
p40405
S'Advanced'
p40406
sa(dp40407
S'description'
p40408
S'Set the enabled status of the MooseObject.\n'
p40409
sS'cpp_type'
p40410
S'bool'
p40411
sS'default'
p40412
S'1'
p40413
sS'name'
p40414
S'enable'
p40415
sS'required'
p40416
I00
sS'group_name'
p40417
S'Advanced'
p40418
sa(dp40419
S'name'
p40420
S'execute_on'
p40421
sS'cpp_type'
p40422
S'MultiMooseEnum'
p40423
sS'default'
p40424
S'TIMESTEP_END'
p40425
sS'description'
p40426
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40427
sS'required'
p40428
I00
sS'options'
p40429
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40430
sS'group_name'
p40431
Nsa(dp40432
S'description'
p40433
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40434
sS'cpp_type'
p40435
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40436
sS'default'
p40437
g3
sS'name'
p40438
S'outputs'
p40439
sS'required'
p40440
I00
sS'group_name'
p40441
S'Advanced'
p40442
sa(dp40443
S'description'
p40444
S'The scaling factor\n'
p40445
sS'cpp_type'
p40446
S'double'
p40447
sS'default'
p40448
S'1'
p40449
sS'name'
p40450
S'scaling_factor'
p40451
sS'required'
p40452
I00
sS'group_name'
p40453
Nsa(dp40454
S'description'
p40455
g3
sS'cpp_type'
p40456
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40457
sS'default'
p40458
S'ScalePostprocessor'
p40459
sS'name'
p40460
S'type'
p40461
sS'required'
p40462
I00
sS'group_name'
p40463
Nsa(dp40464
S'description'
p40465
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40466
sS'cpp_type'
p40467
S'bool'
p40468
sS'default'
p40469
S'0'
p40470
sS'name'
p40471
S'use_displaced_mesh'
p40472
sS'required'
p40473
I00
sS'group_name'
p40474
S'Advanced'
p40475
sa(dp40476
S'description'
p40477
S'The postprocessor to be scaled\n'
p40478
sS'cpp_type'
p40479
S'PostprocessorName'
p40480
sS'default'
p40481
g3
sS'name'
p40482
S'value'
p40483
sS'required'
p40484
I01
sS'group_name'
p40485
NsasS'name'
p40486
S'/Postprocessors/ScalePostprocessor'
p40487
sa(dp40488
S'description'
p40489
g3
sS'subblocks'
p40490
NsS'parameters'
p40491
(lp40492
(dp40493
S'description'
p40494
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40495
sS'cpp_type'
p40496
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p40497
sS'default'
p40498
g3
sS'name'
p40499
S'boundary'
p40500
sS'required'
p40501
I01
sS'group_name'
p40502
Nsa(dp40503
S'description'
p40504
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40505
sS'cpp_type'
p40506
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40507
sS'default'
p40508
g3
sS'name'
p40509
S'control_tags'
p40510
sS'required'
p40511
I00
sS'group_name'
p40512
S'Advanced'
p40513
sa(dp40514
S'description'
p40515
S'Set the enabled status of the MooseObject.\n'
p40516
sS'cpp_type'
p40517
S'bool'
p40518
sS'default'
p40519
S'1'
p40520
sS'name'
p40521
S'enable'
p40522
sS'required'
p40523
I00
sS'group_name'
p40524
S'Advanced'
p40525
sa(dp40526
S'name'
p40527
S'execute_on'
p40528
sS'cpp_type'
p40529
S'MultiMooseEnum'
p40530
sS'default'
p40531
S'TIMESTEP_END'
p40532
sS'description'
p40533
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40534
sS'required'
p40535
I00
sS'options'
p40536
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40537
sS'group_name'
p40538
Nsa(dp40539
S'description'
p40540
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40541
sS'cpp_type'
p40542
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40543
sS'default'
p40544
g3
sS'name'
p40545
S'outputs'
p40546
sS'required'
p40547
I00
sS'group_name'
p40548
S'Advanced'
p40549
sa(dp40550
S'description'
p40551
g3
sS'cpp_type'
p40552
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40553
sS'default'
p40554
S'SideAverageValue'
p40555
sS'name'
p40556
S'type'
p40557
sS'required'
p40558
I00
sS'group_name'
p40559
Nsa(dp40560
S'description'
p40561
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40562
sS'cpp_type'
p40563
S'bool'
p40564
sS'default'
p40565
S'0'
p40566
sS'name'
p40567
S'use_displaced_mesh'
p40568
sS'required'
p40569
I00
sS'group_name'
p40570
S'Advanced'
p40571
sa(dp40572
S'description'
p40573
S'The name of the variable that this boundary condition applies to\n'
p40574
sS'cpp_type'
p40575
S'std::vector<VariableName>'
p40576
sS'default'
p40577
g3
sS'name'
p40578
S'variable'
p40579
sS'required'
p40580
I01
sS'group_name'
p40581
NsasS'name'
p40582
S'/Postprocessors/SideAverageValue'
p40583
sa(dp40584
S'description'
p40585
g3
sS'subblocks'
p40586
NsS'parameters'
p40587
(lp40588
(dp40589
S'description'
p40590
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40591
sS'cpp_type'
p40592
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p40593
sS'default'
p40594
g3
sS'name'
p40595
S'boundary'
p40596
sS'required'
p40597
I01
sS'group_name'
p40598
Nsa(dp40599
S'description'
p40600
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40601
sS'cpp_type'
p40602
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40603
sS'default'
p40604
g3
sS'name'
p40605
S'control_tags'
p40606
sS'required'
p40607
I00
sS'group_name'
p40608
S'Advanced'
p40609
sa(dp40610
S'description'
p40611
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p40612
sS'cpp_type'
p40613
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40614
sS'default'
p40615
g3
sS'name'
p40616
S'diffusivity'
p40617
sS'required'
p40618
I01
sS'group_name'
p40619
Nsa(dp40620
S'description'
p40621
S'Set the enabled status of the MooseObject.\n'
p40622
sS'cpp_type'
p40623
S'bool'
p40624
sS'default'
p40625
S'1'
p40626
sS'name'
p40627
S'enable'
p40628
sS'required'
p40629
I00
sS'group_name'
p40630
S'Advanced'
p40631
sa(dp40632
S'name'
p40633
S'execute_on'
p40634
sS'cpp_type'
p40635
S'MultiMooseEnum'
p40636
sS'default'
p40637
S'TIMESTEP_END'
p40638
sS'description'
p40639
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40640
sS'required'
p40641
I00
sS'options'
p40642
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40643
sS'group_name'
p40644
Nsa(dp40645
S'description'
p40646
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40647
sS'cpp_type'
p40648
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40649
sS'default'
p40650
g3
sS'name'
p40651
S'outputs'
p40652
sS'required'
p40653
I00
sS'group_name'
p40654
S'Advanced'
p40655
sa(dp40656
S'description'
p40657
g3
sS'cpp_type'
p40658
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40659
sS'default'
p40660
S'SideFluxAverage'
p40661
sS'name'
p40662
S'type'
p40663
sS'required'
p40664
I00
sS'group_name'
p40665
Nsa(dp40666
S'description'
p40667
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40668
sS'cpp_type'
p40669
S'bool'
p40670
sS'default'
p40671
S'0'
p40672
sS'name'
p40673
S'use_displaced_mesh'
p40674
sS'required'
p40675
I00
sS'group_name'
p40676
S'Advanced'
p40677
sa(dp40678
S'description'
p40679
S'The name of the variable that this boundary condition applies to\n'
p40680
sS'cpp_type'
p40681
S'std::vector<VariableName>'
p40682
sS'default'
p40683
g3
sS'name'
p40684
S'variable'
p40685
sS'required'
p40686
I01
sS'group_name'
p40687
NsasS'name'
p40688
S'/Postprocessors/SideFluxAverage'
p40689
sa(dp40690
S'description'
p40691
g3
sS'subblocks'
p40692
NsS'parameters'
p40693
(lp40694
(dp40695
S'description'
p40696
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40697
sS'cpp_type'
p40698
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p40699
sS'default'
p40700
g3
sS'name'
p40701
S'boundary'
p40702
sS'required'
p40703
I01
sS'group_name'
p40704
Nsa(dp40705
S'description'
p40706
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40707
sS'cpp_type'
p40708
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40709
sS'default'
p40710
g3
sS'name'
p40711
S'control_tags'
p40712
sS'required'
p40713
I00
sS'group_name'
p40714
S'Advanced'
p40715
sa(dp40716
S'description'
p40717
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p40718
sS'cpp_type'
p40719
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40720
sS'default'
p40721
g3
sS'name'
p40722
S'diffusivity'
p40723
sS'required'
p40724
I01
sS'group_name'
p40725
Nsa(dp40726
S'description'
p40727
S'Set the enabled status of the MooseObject.\n'
p40728
sS'cpp_type'
p40729
S'bool'
p40730
sS'default'
p40731
S'1'
p40732
sS'name'
p40733
S'enable'
p40734
sS'required'
p40735
I00
sS'group_name'
p40736
S'Advanced'
p40737
sa(dp40738
S'name'
p40739
S'execute_on'
p40740
sS'cpp_type'
p40741
S'MultiMooseEnum'
p40742
sS'default'
p40743
S'TIMESTEP_END'
p40744
sS'description'
p40745
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40746
sS'required'
p40747
I00
sS'options'
p40748
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40749
sS'group_name'
p40750
Nsa(dp40751
S'description'
p40752
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40753
sS'cpp_type'
p40754
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40755
sS'default'
p40756
g3
sS'name'
p40757
S'outputs'
p40758
sS'required'
p40759
I00
sS'group_name'
p40760
S'Advanced'
p40761
sa(dp40762
S'description'
p40763
g3
sS'cpp_type'
p40764
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40765
sS'default'
p40766
S'SideFluxIntegral'
p40767
sS'name'
p40768
S'type'
p40769
sS'required'
p40770
I00
sS'group_name'
p40771
Nsa(dp40772
S'description'
p40773
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40774
sS'cpp_type'
p40775
S'bool'
p40776
sS'default'
p40777
S'0'
p40778
sS'name'
p40779
S'use_displaced_mesh'
p40780
sS'required'
p40781
I00
sS'group_name'
p40782
S'Advanced'
p40783
sa(dp40784
S'description'
p40785
S'The name of the variable that this boundary condition applies to\n'
p40786
sS'cpp_type'
p40787
S'std::vector<VariableName>'
p40788
sS'default'
p40789
g3
sS'name'
p40790
S'variable'
p40791
sS'required'
p40792
I01
sS'group_name'
p40793
NsasS'name'
p40794
S'/Postprocessors/SideFluxIntegral'
p40795
sa(dp40796
S'description'
p40797
g3
sS'subblocks'
p40798
NsS'parameters'
p40799
(lp40800
(dp40801
S'description'
p40802
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40803
sS'cpp_type'
p40804
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p40805
sS'default'
p40806
g3
sS'name'
p40807
S'boundary'
p40808
sS'required'
p40809
I01
sS'group_name'
p40810
Nsa(dp40811
S'description'
p40812
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40813
sS'cpp_type'
p40814
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40815
sS'default'
p40816
g3
sS'name'
p40817
S'control_tags'
p40818
sS'required'
p40819
I00
sS'group_name'
p40820
S'Advanced'
p40821
sa(dp40822
S'description'
p40823
S'Set the enabled status of the MooseObject.\n'
p40824
sS'cpp_type'
p40825
S'bool'
p40826
sS'default'
p40827
S'1'
p40828
sS'name'
p40829
S'enable'
p40830
sS'required'
p40831
I00
sS'group_name'
p40832
S'Advanced'
p40833
sa(dp40834
S'name'
p40835
S'execute_on'
p40836
sS'cpp_type'
p40837
S'MultiMooseEnum'
p40838
sS'default'
p40839
S'TIMESTEP_END'
p40840
sS'description'
p40841
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40842
sS'required'
p40843
I00
sS'options'
p40844
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40845
sS'group_name'
p40846
Nsa(dp40847
S'description'
p40848
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40849
sS'cpp_type'
p40850
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40851
sS'default'
p40852
g3
sS'name'
p40853
S'outputs'
p40854
sS'required'
p40855
I00
sS'group_name'
p40856
S'Advanced'
p40857
sa(dp40858
S'description'
p40859
g3
sS'cpp_type'
p40860
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40861
sS'default'
p40862
S'SideIntegralVariablePostprocessor'
p40863
sS'name'
p40864
S'type'
p40865
sS'required'
p40866
I00
sS'group_name'
p40867
Nsa(dp40868
S'description'
p40869
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40870
sS'cpp_type'
p40871
S'bool'
p40872
sS'default'
p40873
S'0'
p40874
sS'name'
p40875
S'use_displaced_mesh'
p40876
sS'required'
p40877
I00
sS'group_name'
p40878
S'Advanced'
p40879
sa(dp40880
S'description'
p40881
S'The name of the variable that this boundary condition applies to\n'
p40882
sS'cpp_type'
p40883
S'std::vector<VariableName>'
p40884
sS'default'
p40885
g3
sS'name'
p40886
S'variable'
p40887
sS'required'
p40888
I01
sS'group_name'
p40889
NsasS'name'
p40890
S'/Postprocessors/SideIntegralVariablePostprocessor'
p40891
sa(dp40892
S'description'
p40893
S'A postprocessor for reporting the extreme value of another postprocessor over time.\n'
p40894
sS'subblocks'
p40895
NsS'parameters'
p40896
(lp40897
(dp40898
S'description'
p40899
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40900
sS'cpp_type'
p40901
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40902
sS'default'
p40903
g3
sS'name'
p40904
S'control_tags'
p40905
sS'required'
p40906
I00
sS'group_name'
p40907
S'Advanced'
p40908
sa(dp40909
S'description'
p40910
S'Set the enabled status of the MooseObject.\n'
p40911
sS'cpp_type'
p40912
S'bool'
p40913
sS'default'
p40914
S'1'
p40915
sS'name'
p40916
S'enable'
p40917
sS'required'
p40918
I00
sS'group_name'
p40919
S'Advanced'
p40920
sa(dp40921
S'name'
p40922
S'execute_on'
p40923
sS'cpp_type'
p40924
S'MultiMooseEnum'
p40925
sS'default'
p40926
S'TIMESTEP_END'
p40927
sS'description'
p40928
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40929
sS'required'
p40930
I00
sS'options'
p40931
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40932
sS'group_name'
p40933
Nsa(dp40934
S'description'
p40935
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40936
sS'cpp_type'
p40937
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40938
sS'default'
p40939
g3
sS'name'
p40940
S'outputs'
p40941
sS'required'
p40942
I00
sS'group_name'
p40943
S'Advanced'
p40944
sa(dp40945
S'description'
p40946
S'The name of the postprocessor used for reporting time extreme values\n'
p40947
sS'cpp_type'
p40948
S'PostprocessorName'
p40949
sS'default'
p40950
g3
sS'name'
p40951
S'postprocessor'
p40952
sS'required'
p40953
I01
sS'group_name'
p40954
Nsa(dp40955
S'description'
p40956
g3
sS'cpp_type'
p40957
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40958
sS'default'
p40959
S'TimeExtremeValue'
p40960
sS'name'
p40961
S'type'
p40962
sS'required'
p40963
I00
sS'group_name'
p40964
Nsa(dp40965
S'description'
p40966
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40967
sS'cpp_type'
p40968
S'bool'
p40969
sS'default'
p40970
S'0'
p40971
sS'name'
p40972
S'use_displaced_mesh'
p40973
sS'required'
p40974
I00
sS'group_name'
p40975
S'Advanced'
p40976
sa(dp40977
S'name'
p40978
S'value_type'
p40979
sS'cpp_type'
p40980
S'MooseEnum'
p40981
sS'default'
p40982
S'max'
p40983
sS'description'
p40984
S"Type of extreme value to return.'max' returns the maximum value.'min' returns the minimum value.'abs_max' returns the maximum absolute value.'abs_min' returns the minimum absolute value.\n"
p40985
sS'required'
p40986
I00
sS'options'
p40987
S'max min abs_max abs_min'
p40988
sS'group_name'
p40989
NsasS'name'
p40990
S'/Postprocessors/TimeExtremeValue'
p40991
sa(dp40992
S'description'
p40993
g3
sS'subblocks'
p40994
NsS'parameters'
p40995
(lp40996
(dp40997
S'description'
p40998
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40999
sS'cpp_type'
p41000
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41001
sS'default'
p41002
g3
sS'name'
p41003
S'control_tags'
p41004
sS'required'
p41005
I00
sS'group_name'
p41006
S'Advanced'
p41007
sa(dp41008
S'description'
p41009
S'Set the enabled status of the MooseObject.\n'
p41010
sS'cpp_type'
p41011
S'bool'
p41012
sS'default'
p41013
S'1'
p41014
sS'name'
p41015
S'enable'
p41016
sS'required'
p41017
I00
sS'group_name'
p41018
S'Advanced'
p41019
sa(dp41020
S'name'
p41021
S'execute_on'
p41022
sS'cpp_type'
p41023
S'MultiMooseEnum'
p41024
sS'default'
p41025
S'TIMESTEP_END'
p41026
sS'description'
p41027
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p41028
sS'required'
p41029
I00
sS'options'
p41030
S'none initial linear nonlinear timestep_end timestep_begin custom'
p41031
sS'group_name'
p41032
Nsa(dp41033
S'description'
p41034
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p41035
sS'cpp_type'
p41036
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p41037
sS'default'
p41038
g3
sS'name'
p41039
S'outputs'
p41040
sS'required'
p41041
I00
sS'group_name'
p41042
S'Advanced'
p41043
sa(dp41044
S'description'
p41045
g3
sS'cpp_type'
p41046
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41047
sS'default'
p41048
S'TimestepSize'
p41049
sS'name'
p41050
S'type'
p41051
sS'required'
p41052
I00
sS'group_name'
p41053
Nsa(dp41054
S'description'
p41055
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41056
sS'cpp_type'
p41057
S'bool'
p41058
sS'default'
p41059
S'0'
p41060
sS'name'
p41061
S'use_displaced_mesh'
p41062
sS'required'
p41063
I00
sS'group_name'
p41064
S'Advanced'
p41065
sasS'name'
p41066
S'/Postprocessors/TimestepSize'
p41067
sa(dp41068
S'description'
p41069
g3
sS'subblocks'
p41070
NsS'parameters'
p41071
(lp41072
(dp41073
S'description'
p41074
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41075
sS'cpp_type'
p41076
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41077
sS'default'
p41078
g3
sS'name'
p41079
S'control_tags'
p41080
sS'required'
p41081
I00
sS'group_name'
p41082
S'Advanced'
p41083
sa(dp41084
S'description'
p41085
S'Set the enabled status of the MooseObject.\n'
p41086
sS'cpp_type'
p41087
S'bool'
p41088
sS'default'
p41089
S'1'
p41090
sS'name'
p41091
S'enable'
p41092
sS'required'
p41093
I00
sS'group_name'
p41094
S'Advanced'
p41095
sa(dp41096
S'name'
p41097
S'execute_on'
p41098
sS'cpp_type'
p41099
S'MultiMooseEnum'
p41100
sS'default'
p41101
S'TIMESTEP_END'
p41102
sS'description'
p41103
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p41104
sS'required'
p41105
I00
sS'options'
p41106
S'none initial linear nonlinear timestep_end timestep_begin custom'
p41107
sS'group_name'
p41108
Nsa(dp41109
S'description'
p41110
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p41111
sS'cpp_type'
p41112
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p41113
sS'default'
p41114
g3
sS'name'
p41115
S'outputs'
p41116
sS'required'
p41117
I00
sS'group_name'
p41118
S'Advanced'
p41119
sa(dp41120
S'description'
p41121
g3
sS'cpp_type'
p41122
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41123
sS'default'
p41124
S'TotalVariableValue'
p41125
sS'name'
p41126
S'type'
p41127
sS'required'
p41128
I00
sS'group_name'
p41129
Nsa(dp41130
S'description'
p41131
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41132
sS'cpp_type'
p41133
S'bool'
p41134
sS'default'
p41135
S'0'
p41136
sS'name'
p41137
S'use_displaced_mesh'
p41138
sS'required'
p41139
I00
sS'group_name'
p41140
S'Advanced'
p41141
sa(dp41142
S'description'
p41143
S'The name of the postprocessor\n'
p41144
sS'cpp_type'
p41145
S'PostprocessorName'
p41146
sS'default'
p41147
g3
sS'name'
p41148
S'value'
p41149
sS'required'
p41150
I00
sS'group_name'
p41151
NsasS'name'
p41152
S'/Postprocessors/TotalVariableValue'
p41153
sa(dp41154
S'description'
p41155
g3
sS'subblocks'
p41156
NsS'parameters'
p41157
(lp41158
(dp41159
S'description'
p41160
S'The list of block ids (SubdomainID) that this object will be applied\n'
p41161
sS'cpp_type'
p41162
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p41163
sS'default'
p41164
g3
sS'name'
p41165
S'block'
p41166
sS'required'
p41167
I00
sS'group_name'
p41168
Nsa(dp41169
S'description'
p41170
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41171
sS'cpp_type'
p41172
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41173
sS'default'
p41174
g3
sS'name'
p41175
S'control_tags'
p41176
sS'required'
p41177
I00
sS'group_name'
p41178
S'Advanced'
p41179
sa(dp41180
S'description'
p41181
S'Set the enabled status of the MooseObject.\n'
p41182
sS'cpp_type'
p41183
S'bool'
p41184
sS'default'
p41185
S'1'
p41186
sS'name'
p41187
S'enable'
p41188
sS'required'
p41189
I00
sS'group_name'
p41190
S'Advanced'
p41191
sa(dp41192
S'name'
p41193
S'execute_on'
p41194
sS'cpp_type'
p41195
S'MultiMooseEnum'
p41196
sS'default'
p41197
S'TIMESTEP_END'
p41198
sS'description'
p41199
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p41200
sS'required'
p41201
I00
sS'options'
p41202
S'none initial linear nonlinear timestep_end timestep_begin custom'
p41203
sS'group_name'
p41204
Nsa(dp41205
S'description'
p41206
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p41207
sS'cpp_type'
p41208
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p41209
sS'default'
p41210
g3
sS'name'
p41211
S'outputs'
p41212
sS'required'
p41213
I00
sS'group_name'
p41214
S'Advanced'
p41215
sa(dp41216
S'description'
p41217
S'The name of the second variable in the inner product (variable, second_variable)\n'
p41218
sS'cpp_type'
p41219
S'std::vector<VariableName>'
p41220
sS'default'
p41221
g3
sS'name'
p41222
S'second_variable'
p41223
sS'required'
p41224
I01
sS'group_name'
p41225
Nsa(dp41226
S'description'
p41227
S'The seed for the master random number generator\n'
p41228
sS'cpp_type'
p41229
S'unsigned int'
p41230
sS'default'
p41231
S'0'
p41232
sS'name'
p41233
S'seed'
p41234
sS'required'
p41235
I00
sS'group_name'
p41236
S'Advanced'
p41237
sa(dp41238
S'description'
p41239
g3
sS'cpp_type'
p41240
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41241
sS'default'
p41242
S'VariableInnerProduct'
p41243
sS'name'
p41244
S'type'
p41245
sS'required'
p41246
I00
sS'group_name'
p41247
Nsa(dp41248
S'description'
p41249
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41250
sS'cpp_type'
p41251
S'bool'
p41252
sS'default'
p41253
S'0'
p41254
sS'name'
p41255
S'use_displaced_mesh'
p41256
sS'required'
p41257
I00
sS'group_name'
p41258
S'Advanced'
p41259
sa(dp41260
S'description'
p41261
S'The name of the variable that this object operates on\n'
p41262
sS'cpp_type'
p41263
S'std::vector<VariableName>'
p41264
sS'default'
p41265
g3
sS'name'
p41266
S'variable'
p41267
sS'required'
p41268
I01
sS'group_name'
p41269
NsasS'name'
p41270
S'/Postprocessors/VariableInnerProduct'
p41271
sa(dp41272
S'description'
p41273
g3
sS'subblocks'
p41274
NsS'parameters'
p41275
(lp41276
(dp41277
S'description'
p41278
S'The list of block ids (SubdomainID) that this object will be applied\n'
p41279
sS'cpp_type'
p41280
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p41281
sS'default'
p41282
g3
sS'name'
p41283
S'block'
p41284
sS'required'
p41285
I00
sS'group_name'
p41286
Nsa(dp41287
S'description'
p41288
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41289
sS'cpp_type'
p41290
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41291
sS'default'
p41292
g3
sS'name'
p41293
S'control_tags'
p41294
sS'required'
p41295
I00
sS'group_name'
p41296
S'Advanced'
p41297
sa(dp41298
S'description'
p41299
S'Set the enabled status of the MooseObject.\n'
p41300
sS'cpp_type'
p41301
S'bool'
p41302
sS'default'
p41303
S'1'
p41304
sS'name'
p41305
S'enable'
p41306
sS'required'
p41307
I00
sS'group_name'
p41308
S'Advanced'
p41309
sa(dp41310
S'name'
p41311
S'execute_on'
p41312
sS'cpp_type'
p41313
S'MultiMooseEnum'
p41314
sS'default'
p41315
S'TIMESTEP_END'
p41316
sS'description'
p41317
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p41318
sS'required'
p41319
I00
sS'options'
p41320
S'none initial linear nonlinear timestep_end timestep_begin custom'
p41321
sS'group_name'
p41322
Nsa(dp41323
S'description'
p41324
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p41325
sS'cpp_type'
p41326
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p41327
sS'default'
p41328
g3
sS'name'
p41329
S'outputs'
p41330
sS'required'
p41331
I00
sS'group_name'
p41332
S'Advanced'
p41333
sa(dp41334
S'description'
p41335
S'The seed for the master random number generator\n'
p41336
sS'cpp_type'
p41337
S'unsigned int'
p41338
sS'default'
p41339
S'0'
p41340
sS'name'
p41341
S'seed'
p41342
sS'required'
p41343
I00
sS'group_name'
p41344
S'Advanced'
p41345
sa(dp41346
S'description'
p41347
g3
sS'cpp_type'
p41348
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41349
sS'default'
p41350
S'VolumePostprocessor'
p41351
sS'name'
p41352
S'type'
p41353
sS'required'
p41354
I00
sS'group_name'
p41355
Nsa(dp41356
S'description'
p41357
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41358
sS'cpp_type'
p41359
S'bool'
p41360
sS'default'
p41361
S'0'
p41362
sS'name'
p41363
S'use_displaced_mesh'
p41364
sS'required'
p41365
I00
sS'group_name'
p41366
S'Advanced'
p41367
sasS'name'
p41368
S'/Postprocessors/VolumePostprocessor'
p41369
sasS'parameters'
p41370
NsS'name'
p41371
S'/Postprocessors'
p41372
sa(dp41373
S'description'
p41374
g3
sS'subblocks'
p41375
(lp41376
(dp41377
S'description'
p41378
g3
sS'subblocks'
p41379
(lp41380
(dp41381
S'description'
p41382
g3
sS'subblocks'
p41383
NsS'parameters'
p41384
(lp41385
(dp41386
S'name'
p41387
S'petsc_options'
p41388
sS'cpp_type'
p41389
S'MultiMooseEnum'
p41390
sS'default'
p41391
g3
sS'description'
p41392
S'Singleton PETSc options\n'
p41393
sS'required'
p41394
I00
sS'options'
p41395
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p41396
sS'group_name'
p41397
Nsa(dp41398
S'name'
p41399
S'petsc_options_iname'
p41400
sS'cpp_type'
p41401
S'MultiMooseEnum'
p41402
sS'default'
p41403
g3
sS'description'
p41404
S'Names of PETSc name/value pairs\n'
p41405
sS'required'
p41406
I00
sS'options'
p41407
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p41408
sS'group_name'
p41409
Nsa(dp41410
S'description'
p41411
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p41412
sS'cpp_type'
p41413
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41414
sS'default'
p41415
g3
sS'name'
p41416
S'petsc_options_value'
p41417
sS'required'
p41418
I00
sS'group_name'
p41419
Nsa(dp41420
S'description'
p41421
S'Classname of the split object\n'
p41422
sS'cpp_type'
p41423
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41424
sS'default'
p41425
S'Split'
p41426
sS'name'
p41427
S'type'
p41428
sS'required'
p41429
I01
sS'group_name'
p41430
Nsa(dp41431
S'description'
p41432
S'variables for this field\n'
p41433
sS'cpp_type'
p41434
S'std::__1::vector<NonlinearVariableName, std::__1::allocator<NonlinearVariableName> >'
p41435
sS'default'
p41436
g3
sS'name'
p41437
S'vars'
p41438
sS'required'
p41439
I00
sS'group_name'
p41440
NsasS'name'
p41441
S'/Preconditioning/*/*'
p41442
sa(dp41443
S'description'
p41444
g3
sS'subblocks'
p41445
NsS'parameters'
p41446
(lp41447
(dp41448
S'description'
p41449
S'Mesh blocks Split operates on (omitting this implies "all blocks"\n'
p41450
sS'cpp_type'
p41451
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p41452
sS'default'
p41453
g3
sS'name'
p41454
S'blocks'
p41455
sS'required'
p41456
I00
sS'group_name'
p41457
Nsa(dp41458
S'description'
p41459
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41460
sS'cpp_type'
p41461
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41462
sS'default'
p41463
g3
sS'name'
p41464
S'control_tags'
p41465
sS'required'
p41466
I00
sS'group_name'
p41467
S'Advanced'
p41468
sa(dp41469
S'description'
p41470
S'Set the enabled status of the MooseObject.\n'
p41471
sS'cpp_type'
p41472
S'bool'
p41473
sS'default'
p41474
S'1'
p41475
sS'name'
p41476
S'enable'
p41477
sS'required'
p41478
I00
sS'group_name'
p41479
S'Advanced'
p41480
sa(dp41481
S'name'
p41482
S'petsc_options'
p41483
sS'cpp_type'
p41484
S'MultiMooseEnum'
p41485
sS'default'
p41486
g3
sS'description'
p41487
S'PETSc flags for the FieldSplit solver\n'
p41488
sS'required'
p41489
I00
sS'options'
p41490
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p41491
sS'group_name'
p41492
Nsa(dp41493
S'description'
p41494
S'PETSc option names for the FieldSplit solver\n'
p41495
sS'cpp_type'
p41496
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41497
sS'default'
p41498
g3
sS'name'
p41499
S'petsc_options_iname'
p41500
sS'required'
p41501
I00
sS'group_name'
p41502
Nsa(dp41503
S'description'
p41504
S'PETSc option values for the FieldSplit solver\n'
p41505
sS'cpp_type'
p41506
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41507
sS'default'
p41508
g3
sS'name'
p41509
S'petsc_options_value'
p41510
sS'required'
p41511
I00
sS'group_name'
p41512
Nsa(dp41513
S'name'
p41514
S'schur_ainv'
p41515
sS'cpp_type'
p41516
S'MooseEnum'
p41517
sS'default'
p41518
S'diag'
p41519
sS'description'
p41520
S'Type of approximation to inv(A) used when forming S = D - C inv(A) B\n'
p41521
sS'required'
p41522
I00
sS'options'
p41523
S'diag lump'
p41524
sS'group_name'
p41525
Nsa(dp41526
S'name'
p41527
S'schur_pre'
p41528
sS'cpp_type'
p41529
S'MooseEnum'
p41530
sS'default'
p41531
S'S'
p41532
sS'description'
p41533
S'Type of Schur complement preconditioner matrix\n'
p41534
sS'required'
p41535
I00
sS'options'
p41536
S'S Sp A11'
p41537
sS'group_name'
p41538
Nsa(dp41539
S'name'
p41540
S'schur_type'
p41541
sS'cpp_type'
p41542
S'MooseEnum'
p41543
sS'default'
p41544
S'full'
p41545
sS'description'
p41546
S'Type of Schur complement\n'
p41547
sS'required'
p41548
I00
sS'options'
p41549
S'full upper lower'
p41550
sS'group_name'
p41551
Nsa(dp41552
S'description'
p41553
S'Sidesets Split operates on (omitting this implies "no sidesets"\n'
p41554
sS'cpp_type'
p41555
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p41556
sS'default'
p41557
g3
sS'name'
p41558
S'sides'
p41559
sS'required'
p41560
I00
sS'group_name'
p41561
Nsa(dp41562
S'description'
p41563
S'The names of the splits (subsystems) in the decomposition of this split\n'
p41564
sS'cpp_type'
p41565
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41566
sS'default'
p41567
g3
sS'name'
p41568
S'splitting'
p41569
sS'required'
p41570
I00
sS'group_name'
p41571
Nsa(dp41572
S'name'
p41573
S'splitting_type'
p41574
sS'cpp_type'
p41575
S'MooseEnum'
p41576
sS'default'
p41577
S'additive'
p41578
sS'description'
p41579
S'Split decomposition type\n'
p41580
sS'required'
p41581
I00
sS'options'
p41582
S'additive multiplicative symmetric_multiplicative schur'
p41583
sS'group_name'
p41584
Nsa(dp41585
S'description'
p41586
g3
sS'cpp_type'
p41587
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41588
sS'default'
p41589
S'Split'
p41590
sS'name'
p41591
S'type'
p41592
sS'required'
p41593
I00
sS'group_name'
p41594
Nsa(dp41595
S'description'
p41596
S'Sidesets Split excludes (omitting this implies "do not exclude any sidesets"\n'
p41597
sS'cpp_type'
p41598
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p41599
sS'default'
p41600
g3
sS'name'
p41601
S'unsides'
p41602
sS'required'
p41603
I00
sS'group_name'
p41604
Nsa(dp41605
S'description'
p41606
S'Variables Split operates on (omitting this implies "all variables"\n'
p41607
sS'cpp_type'
p41608
S'std::__1::vector<NonlinearVariableName, std::__1::allocator<NonlinearVariableName> >'
p41609
sS'default'
p41610
g3
sS'name'
p41611
S'vars'
p41612
sS'required'
p41613
I00
sS'group_name'
p41614
NsasS'name'
p41615
S'/Preconditioning/*/Split'
p41616
sasS'parameters'
p41617
(lp41618
(dp41619
S'description'
p41620
S'A string representing the Moose Object that will be built by this Action\n'
p41621
sS'cpp_type'
p41622
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41623
sS'default'
p41624
g3
sS'name'
p41625
S'type'
p41626
sS'required'
p41627
I01
sS'group_name'
p41628
NsasS'name'
p41629
S'/Preconditioning/*'
p41630
sa(dp41631
S'description'
p41632
g3
sS'subblocks'
p41633
NsS'parameters'
p41634
(lp41635
(dp41636
S'description'
p41637
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41638
sS'cpp_type'
p41639
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41640
sS'default'
p41641
g3
sS'name'
p41642
S'control_tags'
p41643
sS'required'
p41644
I00
sS'group_name'
p41645
S'Advanced'
p41646
sa(dp41647
S'description'
p41648
S'Set the enabled status of the MooseObject.\n'
p41649
sS'cpp_type'
p41650
S'bool'
p41651
sS'default'
p41652
S'1'
p41653
sS'name'
p41654
S'enable'
p41655
sS'required'
p41656
I00
sS'group_name'
p41657
S'Advanced'
p41658
sa(dp41659
S'description'
p41660
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p41661
sS'cpp_type'
p41662
S'bool'
p41663
sS'default'
p41664
S'0'
p41665
sS'name'
p41666
S'full'
p41667
sS'required'
p41668
I00
sS'group_name'
p41669
Nsa(dp41670
S'description'
p41671
S'Set to true if you want to add entries into the matrix for degrees of freedom that might be coupled by inspection of the geometric search objects.\n'
p41672
sS'cpp_type'
p41673
S'bool'
p41674
sS'default'
p41675
S'0'
p41676
sS'name'
p41677
S'implicit_geometric_coupling'
p41678
sS'required'
p41679
I00
sS'group_name'
p41680
Nsa(dp41681
S'name'
p41682
S'line_search'
p41683
sS'cpp_type'
p41684
S'MooseEnum'
p41685
sS'default'
p41686
S'default'
p41687
sS'description'
p41688
S'Specifies the line search type (Note: none = basic)\n'
p41689
sS'required'
p41690
I00
sS'options'
p41691
S'default shell none basic l2 bt cp'
p41692
sS'group_name'
p41693
Nsa(dp41694
S'description'
p41695
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p41696
sS'cpp_type'
p41697
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41698
sS'default'
p41699
g3
sS'name'
p41700
S'off_diag_column'
p41701
sS'required'
p41702
I00
sS'group_name'
p41703
Nsa(dp41704
S'description'
p41705
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p41706
sS'cpp_type'
p41707
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41708
sS'default'
p41709
g3
sS'name'
p41710
S'off_diag_row'
p41711
sS'required'
p41712
I00
sS'group_name'
p41713
Nsa(dp41714
S'name'
p41715
S'pc_side'
p41716
sS'cpp_type'
p41717
S'MooseEnum'
p41718
sS'default'
p41719
S'right'
p41720
sS'description'
p41721
S'Preconditioning side\n'
p41722
sS'required'
p41723
I00
sS'options'
p41724
S'left right symmetric'
p41725
sS'group_name'
p41726
Nsa(dp41727
S'name'
p41728
S'petsc_options'
p41729
sS'cpp_type'
p41730
S'MultiMooseEnum'
p41731
sS'default'
p41732
g3
sS'description'
p41733
S'Singleton PETSc options\n'
p41734
sS'required'
p41735
I00
sS'options'
p41736
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p41737
sS'group_name'
p41738
Nsa(dp41739
S'name'
p41740
S'petsc_options_iname'
p41741
sS'cpp_type'
p41742
S'MultiMooseEnum'
p41743
sS'default'
p41744
g3
sS'description'
p41745
S'Names of PETSc name/value pairs\n'
p41746
sS'required'
p41747
I00
sS'options'
p41748
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p41749
sS'group_name'
p41750
Nsa(dp41751
S'description'
p41752
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p41753
sS'cpp_type'
p41754
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41755
sS'default'
p41756
g3
sS'name'
p41757
S'petsc_options_value'
p41758
sS'required'
p41759
I00
sS'group_name'
p41760
Nsa(dp41761
S'name'
p41762
S'solve_type'
p41763
sS'cpp_type'
p41764
S'MooseEnum'
p41765
sS'default'
p41766
g3
sS'description'
p41767
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p41768
sS'required'
p41769
I00
sS'options'
p41770
S'PJFNK JFNK NEWTON FD LINEAR'
p41771
sS'group_name'
p41772
Nsa(dp41773
S'description'
p41774
g3
sS'cpp_type'
p41775
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41776
sS'default'
p41777
S'FDP'
p41778
sS'name'
p41779
S'type'
p41780
sS'required'
p41781
I00
sS'group_name'
p41782
NsasS'name'
p41783
S'/Preconditioning/FDP'
p41784
sa(dp41785
S'description'
p41786
g3
sS'subblocks'
p41787
NsS'parameters'
p41788
(lp41789
(dp41790
S'description'
p41791
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41792
sS'cpp_type'
p41793
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41794
sS'default'
p41795
g3
sS'name'
p41796
S'control_tags'
p41797
sS'required'
p41798
I00
sS'group_name'
p41799
S'Advanced'
p41800
sa(dp41801
S'description'
p41802
S'Set the enabled status of the MooseObject.\n'
p41803
sS'cpp_type'
p41804
S'bool'
p41805
sS'default'
p41806
S'1'
p41807
sS'name'
p41808
S'enable'
p41809
sS'required'
p41810
I00
sS'group_name'
p41811
S'Advanced'
p41812
sa(dp41813
S'description'
p41814
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p41815
sS'cpp_type'
p41816
S'bool'
p41817
sS'default'
p41818
S'1'
p41819
sS'name'
p41820
S'full'
p41821
sS'required'
p41822
I00
sS'group_name'
p41823
Nsa(dp41824
S'name'
p41825
S'line_search'
p41826
sS'cpp_type'
p41827
S'MooseEnum'
p41828
sS'default'
p41829
S'default'
p41830
sS'description'
p41831
S'Specifies the line search type (Note: none = basic)\n'
p41832
sS'required'
p41833
I00
sS'options'
p41834
S'default shell none basic l2 bt cp'
p41835
sS'group_name'
p41836
Nsa(dp41837
S'description'
p41838
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p41839
sS'cpp_type'
p41840
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41841
sS'default'
p41842
g3
sS'name'
p41843
S'off_diag_column'
p41844
sS'required'
p41845
I00
sS'group_name'
p41846
Nsa(dp41847
S'description'
p41848
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p41849
sS'cpp_type'
p41850
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41851
sS'default'
p41852
g3
sS'name'
p41853
S'off_diag_row'
p41854
sS'required'
p41855
I00
sS'group_name'
p41856
Nsa(dp41857
S'name'
p41858
S'pc_side'
p41859
sS'cpp_type'
p41860
S'MooseEnum'
p41861
sS'default'
p41862
S'right'
p41863
sS'description'
p41864
S'Preconditioning side\n'
p41865
sS'required'
p41866
I00
sS'options'
p41867
S'left right symmetric'
p41868
sS'group_name'
p41869
Nsa(dp41870
S'name'
p41871
S'petsc_options'
p41872
sS'cpp_type'
p41873
S'MultiMooseEnum'
p41874
sS'default'
p41875
g3
sS'description'
p41876
S'Singleton PETSc options\n'
p41877
sS'required'
p41878
I00
sS'options'
p41879
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p41880
sS'group_name'
p41881
Nsa(dp41882
S'name'
p41883
S'petsc_options_iname'
p41884
sS'cpp_type'
p41885
S'MultiMooseEnum'
p41886
sS'default'
p41887
g3
sS'description'
p41888
S'Names of PETSc name/value pairs\n'
p41889
sS'required'
p41890
I00
sS'options'
p41891
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p41892
sS'group_name'
p41893
Nsa(dp41894
S'description'
p41895
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p41896
sS'cpp_type'
p41897
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41898
sS'default'
p41899
g3
sS'name'
p41900
S'petsc_options_value'
p41901
sS'required'
p41902
I00
sS'group_name'
p41903
Nsa(dp41904
S'name'
p41905
S'solve_type'
p41906
sS'cpp_type'
p41907
S'MooseEnum'
p41908
sS'default'
p41909
g3
sS'description'
p41910
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p41911
sS'required'
p41912
I00
sS'options'
p41913
S'PJFNK JFNK NEWTON FD LINEAR'
p41914
sS'group_name'
p41915
Nsa(dp41916
S'description'
p41917
S'entrance to splits, the top split will specify how splits will go.\n'
p41918
sS'cpp_type'
p41919
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41920
sS'default'
p41921
g3
sS'name'
p41922
S'topsplit'
p41923
sS'required'
p41924
I01
sS'group_name'
p41925
Nsa(dp41926
S'description'
p41927
g3
sS'cpp_type'
p41928
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41929
sS'default'
p41930
S'FSP'
p41931
sS'name'
p41932
S'type'
p41933
sS'required'
p41934
I00
sS'group_name'
p41935
NsasS'name'
p41936
S'/Preconditioning/FSP'
p41937
sa(dp41938
S'description'
p41939
g3
sS'subblocks'
p41940
NsS'parameters'
p41941
(lp41942
(dp41943
S'description'
p41944
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41945
sS'cpp_type'
p41946
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41947
sS'default'
p41948
g3
sS'name'
p41949
S'control_tags'
p41950
sS'required'
p41951
I00
sS'group_name'
p41952
S'Advanced'
p41953
sa(dp41954
S'description'
p41955
S'Set the enabled status of the MooseObject.\n'
p41956
sS'cpp_type'
p41957
S'bool'
p41958
sS'default'
p41959
S'1'
p41960
sS'name'
p41961
S'enable'
p41962
sS'required'
p41963
I00
sS'group_name'
p41964
S'Advanced'
p41965
sa(dp41966
S'name'
p41967
S'line_search'
p41968
sS'cpp_type'
p41969
S'MooseEnum'
p41970
sS'default'
p41971
S'default'
p41972
sS'description'
p41973
S'Specifies the line search type (Note: none = basic)\n'
p41974
sS'required'
p41975
I00
sS'options'
p41976
S'default shell none basic l2 bt cp'
p41977
sS'group_name'
p41978
Nsa(dp41979
S'description'
p41980
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p41981
sS'cpp_type'
p41982
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41983
sS'default'
p41984
g3
sS'name'
p41985
S'off_diag_column'
p41986
sS'required'
p41987
I00
sS'group_name'
p41988
Nsa(dp41989
S'description'
p41990
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p41991
sS'cpp_type'
p41992
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41993
sS'default'
p41994
g3
sS'name'
p41995
S'off_diag_row'
p41996
sS'required'
p41997
I00
sS'group_name'
p41998
Nsa(dp41999
S'name'
p42000
S'pc_side'
p42001
sS'cpp_type'
p42002
S'MooseEnum'
p42003
sS'default'
p42004
S'right'
p42005
sS'description'
p42006
S'Preconditioning side\n'
p42007
sS'required'
p42008
I00
sS'options'
p42009
S'left right symmetric'
p42010
sS'group_name'
p42011
Nsa(dp42012
S'name'
p42013
S'petsc_options'
p42014
sS'cpp_type'
p42015
S'MultiMooseEnum'
p42016
sS'default'
p42017
g3
sS'description'
p42018
S'Singleton PETSc options\n'
p42019
sS'required'
p42020
I00
sS'options'
p42021
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p42022
sS'group_name'
p42023
Nsa(dp42024
S'name'
p42025
S'petsc_options_iname'
p42026
sS'cpp_type'
p42027
S'MultiMooseEnum'
p42028
sS'default'
p42029
g3
sS'description'
p42030
S'Names of PETSc name/value pairs\n'
p42031
sS'required'
p42032
I00
sS'options'
p42033
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p42034
sS'group_name'
p42035
Nsa(dp42036
S'description'
p42037
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p42038
sS'cpp_type'
p42039
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42040
sS'default'
p42041
g3
sS'name'
p42042
S'petsc_options_value'
p42043
sS'required'
p42044
I00
sS'group_name'
p42045
Nsa(dp42046
S'description'
p42047
S'TODO: docstring\n'
p42048
sS'cpp_type'
p42049
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42050
sS'default'
p42051
g3
sS'name'
p42052
S'preconditioner'
p42053
sS'required'
p42054
I01
sS'group_name'
p42055
Nsa(dp42056
S'description'
p42057
S"The order the block rows will be solved in.  Put the name of variables here to stand for solving that variable's block row.  A variable may appear more than once (to create cylces if you like).\n"
p42058
sS'cpp_type'
p42059
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42060
sS'default'
p42061
g3
sS'name'
p42062
S'solve_order'
p42063
sS'required'
p42064
I01
sS'group_name'
p42065
Nsa(dp42066
S'name'
p42067
S'solve_type'
p42068
sS'cpp_type'
p42069
S'MooseEnum'
p42070
sS'default'
p42071
g3
sS'description'
p42072
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p42073
sS'required'
p42074
I00
sS'options'
p42075
S'PJFNK JFNK NEWTON FD LINEAR'
p42076
sS'group_name'
p42077
Nsa(dp42078
S'description'
p42079
g3
sS'cpp_type'
p42080
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42081
sS'default'
p42082
S'PBP'
p42083
sS'name'
p42084
S'type'
p42085
sS'required'
p42086
I00
sS'group_name'
p42087
NsasS'name'
p42088
S'/Preconditioning/PBP'
p42089
sa(dp42090
S'description'
p42091
g3
sS'subblocks'
p42092
NsS'parameters'
p42093
(lp42094
(dp42095
S'description'
p42096
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42097
sS'cpp_type'
p42098
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42099
sS'default'
p42100
g3
sS'name'
p42101
S'control_tags'
p42102
sS'required'
p42103
I00
sS'group_name'
p42104
S'Advanced'
p42105
sa(dp42106
S'description'
p42107
S'List multiple space separated groups of comma separated variables. Off-diagonal jacobians will be generated for all pairs within a group.\n'
p42108
sS'cpp_type'
p42109
S'std::__1::vector<NonlinearVariableName, std::__1::allocator<NonlinearVariableName> >'
p42110
sS'default'
p42111
g3
sS'name'
p42112
S'coupled_groups'
p42113
sS'required'
p42114
I00
sS'group_name'
p42115
Nsa(dp42116
S'description'
p42117
S'Set the enabled status of the MooseObject.\n'
p42118
sS'cpp_type'
p42119
S'bool'
p42120
sS'default'
p42121
S'1'
p42122
sS'name'
p42123
S'enable'
p42124
sS'required'
p42125
I00
sS'group_name'
p42126
S'Advanced'
p42127
sa(dp42128
S'description'
p42129
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p42130
sS'cpp_type'
p42131
S'bool'
p42132
sS'default'
p42133
S'0'
p42134
sS'name'
p42135
S'full'
p42136
sS'required'
p42137
I00
sS'group_name'
p42138
Nsa(dp42139
S'name'
p42140
S'line_search'
p42141
sS'cpp_type'
p42142
S'MooseEnum'
p42143
sS'default'
p42144
S'default'
p42145
sS'description'
p42146
S'Specifies the line search type (Note: none = basic)\n'
p42147
sS'required'
p42148
I00
sS'options'
p42149
S'default shell none basic l2 bt cp'
p42150
sS'group_name'
p42151
Nsa(dp42152
S'description'
p42153
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p42154
sS'cpp_type'
p42155
S'std::__1::vector<NonlinearVariableName, std::__1::allocator<NonlinearVariableName> >'
p42156
sS'default'
p42157
g3
sS'name'
p42158
S'off_diag_column'
p42159
sS'required'
p42160
I00
sS'group_name'
p42161
Nsa(dp42162
S'description'
p42163
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p42164
sS'cpp_type'
p42165
S'std::__1::vector<NonlinearVariableName, std::__1::allocator<NonlinearVariableName> >'
p42166
sS'default'
p42167
g3
sS'name'
p42168
S'off_diag_row'
p42169
sS'required'
p42170
I00
sS'group_name'
p42171
Nsa(dp42172
S'name'
p42173
S'pc_side'
p42174
sS'cpp_type'
p42175
S'MooseEnum'
p42176
sS'default'
p42177
S'right'
p42178
sS'description'
p42179
S'Preconditioning side\n'
p42180
sS'required'
p42181
I00
sS'options'
p42182
S'left right symmetric'
p42183
sS'group_name'
p42184
Nsa(dp42185
S'name'
p42186
S'petsc_options'
p42187
sS'cpp_type'
p42188
S'MultiMooseEnum'
p42189
sS'default'
p42190
g3
sS'description'
p42191
S'Singleton PETSc options\n'
p42192
sS'required'
p42193
I00
sS'options'
p42194
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p42195
sS'group_name'
p42196
Nsa(dp42197
S'name'
p42198
S'petsc_options_iname'
p42199
sS'cpp_type'
p42200
S'MultiMooseEnum'
p42201
sS'default'
p42202
g3
sS'description'
p42203
S'Names of PETSc name/value pairs\n'
p42204
sS'required'
p42205
I00
sS'options'
p42206
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p42207
sS'group_name'
p42208
Nsa(dp42209
S'description'
p42210
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p42211
sS'cpp_type'
p42212
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42213
sS'default'
p42214
g3
sS'name'
p42215
S'petsc_options_value'
p42216
sS'required'
p42217
I00
sS'group_name'
p42218
Nsa(dp42219
S'name'
p42220
S'solve_type'
p42221
sS'cpp_type'
p42222
S'MooseEnum'
p42223
sS'default'
p42224
g3
sS'description'
p42225
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p42226
sS'required'
p42227
I00
sS'options'
p42228
S'PJFNK JFNK NEWTON FD LINEAR'
p42229
sS'group_name'
p42230
Nsa(dp42231
S'description'
p42232
g3
sS'cpp_type'
p42233
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42234
sS'default'
p42235
S'SMP'
p42236
sS'name'
p42237
S'type'
p42238
sS'required'
p42239
I00
sS'group_name'
p42240
NsasS'name'
p42241
S'/Preconditioning/SMP'
p42242
sasS'parameters'
p42243
NsS'name'
p42244
S'/Preconditioning'
p42245
sa(dp42246
S'description'
p42247
g3
sS'subblocks'
p42248
(lp42249
(dp42250
S'description'
p42251
g3
sS'subblocks'
p42252
(lp42253
(dp42254
S'description'
p42255
g3
sS'subblocks'
p42256
NsS'parameters'
p42257
(lp42258
(dp42259
S'description'
p42260
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42261
sS'cpp_type'
p42262
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42263
sS'default'
p42264
g3
sS'name'
p42265
S'control_tags'
p42266
sS'required'
p42267
I00
sS'group_name'
p42268
S'Advanced'
p42269
sa(dp42270
S'description'
p42271
S'Set the enabled status of the MooseObject.\n'
p42272
sS'cpp_type'
p42273
S'bool'
p42274
sS'default'
p42275
S'1'
p42276
sS'name'
p42277
S'enable'
p42278
sS'required'
p42279
I00
sS'group_name'
p42280
S'Advanced'
p42281
sa(dp42282
S'description'
p42283
g3
sS'cpp_type'
p42284
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42285
sS'default'
p42286
S'DisplacedProblem'
p42287
sS'name'
p42288
S'type'
p42289
sS'required'
p42290
I00
sS'group_name'
p42291
NsasS'name'
p42292
S'/Problem/<type>/DisplacedProblem'
p42293
sa(dp42294
S'description'
p42295
g3
sS'subblocks'
p42296
NsS'parameters'
p42297
(lp42298
(dp42299
S'description'
p42300
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42301
sS'cpp_type'
p42302
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42303
sS'default'
p42304
g3
sS'name'
p42305
S'control_tags'
p42306
sS'required'
p42307
I00
sS'group_name'
p42308
S'Advanced'
p42309
sa(dp42310
S'description'
p42311
S'Set the enabled status of the MooseObject.\n'
p42312
sS'cpp_type'
p42313
S'bool'
p42314
sS'default'
p42315
S'1'
p42316
sS'name'
p42317
S'enable'
p42318
sS'required'
p42319
I00
sS'group_name'
p42320
S'Advanced'
p42321
sa(dp42322
S'description'
p42323
S'This causes PETSc to error if it had to reallocate memory in the Jacobian matrix due to not having enough nonzeros\n'
p42324
sS'cpp_type'
p42325
S'bool'
p42326
sS'default'
p42327
S'0'
p42328
sS'name'
p42329
S'error_on_jacobian_nonzero_reallocation'
p42330
sS'required'
p42331
I00
sS'group_name'
p42332
Nsa(dp42333
S'description'
p42334
S'EXPERIMENTAL: If true, a sub_app may use a restart file instead of using of using the master backup file\n'
p42335
sS'cpp_type'
p42336
S'bool'
p42337
sS'default'
p42338
S'0'
p42339
sS'name'
p42340
S'force_restart'
p42341
sS'required'
p42342
I00
sS'group_name'
p42343
Nsa(dp42344
S'description'
p42345
S'The dimension of eigen subspaces\n'
p42346
sS'cpp_type'
p42347
S'unsigned int'
p42348
sS'default'
p42349
S'3'
p42350
sS'name'
p42351
S'n_basis_vectors'
p42352
sS'required'
p42353
I00
sS'group_name'
p42354
Nsa(dp42355
S'description'
p42356
S'The number of eigen pairs\n'
p42357
sS'cpp_type'
p42358
S'unsigned int'
p42359
sS'default'
p42360
S'1'
p42361
sS'name'
p42362
S'n_eigen_pairs'
p42363
sS'required'
p42364
I00
sS'group_name'
p42365
Nsa(dp42366
S'description'
p42367
S'The dimension of the near nullspace\n'
p42368
sS'cpp_type'
p42369
S'unsigned int'
p42370
sS'default'
p42371
S'0'
p42372
sS'name'
p42373
S'near_null_space_dimension'
p42374
sS'required'
p42375
I00
sS'group_name'
p42376
Nsa(dp42377
S'description'
p42378
S'The dimension of the nullspace\n'
p42379
sS'cpp_type'
p42380
S'unsigned int'
p42381
sS'default'
p42382
S'0'
p42383
sS'name'
p42384
S'null_space_dimension'
p42385
sS'required'
p42386
I00
sS'group_name'
p42387
Nsa(dp42388
S'description'
p42389
S'Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n'
p42390
sS'cpp_type'
p42391
S'bool'
p42392
sS'default'
p42393
S'1'
p42394
sS'name'
p42395
S'solve'
p42396
sS'required'
p42397
I00
sS'group_name'
p42398
Nsa(dp42399
S'description'
p42400
S'The dimension of the transpose nullspace\n'
p42401
sS'cpp_type'
p42402
S'unsigned int'
p42403
sS'default'
p42404
S'0'
p42405
sS'name'
p42406
S'transpose_null_space_dimension'
p42407
sS'required'
p42408
I00
sS'group_name'
p42409
Nsa(dp42410
S'description'
p42411
g3
sS'cpp_type'
p42412
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42413
sS'default'
p42414
S'EigenProblem'
p42415
sS'name'
p42416
S'type'
p42417
sS'required'
p42418
I00
sS'group_name'
p42419
Nsa(dp42420
S'description'
p42421
S'Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n'
p42422
sS'cpp_type'
p42423
S'bool'
p42424
sS'default'
p42425
S'1'
p42426
sS'name'
p42427
S'use_nonlinear'
p42428
sS'required'
p42429
I00
sS'group_name'
p42430
NsasS'name'
p42431
S'/Problem/<type>/EigenProblem'
p42432
sa(dp42433
S'description'
p42434
g3
sS'subblocks'
p42435
NsS'parameters'
p42436
(lp42437
(dp42438
S'description'
p42439
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42440
sS'cpp_type'
p42441
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42442
sS'default'
p42443
g3
sS'name'
p42444
S'control_tags'
p42445
sS'required'
p42446
I00
sS'group_name'
p42447
S'Advanced'
p42448
sa(dp42449
S'description'
p42450
S'Set the enabled status of the MooseObject.\n'
p42451
sS'cpp_type'
p42452
S'bool'
p42453
sS'default'
p42454
S'1'
p42455
sS'name'
p42456
S'enable'
p42457
sS'required'
p42458
I00
sS'group_name'
p42459
S'Advanced'
p42460
sa(dp42461
S'description'
p42462
S'This causes PETSc to error if it had to reallocate memory in the Jacobian matrix due to not having enough nonzeros\n'
p42463
sS'cpp_type'
p42464
S'bool'
p42465
sS'default'
p42466
S'0'
p42467
sS'name'
p42468
S'error_on_jacobian_nonzero_reallocation'
p42469
sS'required'
p42470
I00
sS'group_name'
p42471
Nsa(dp42472
S'description'
p42473
S'EXPERIMENTAL: If true, a sub_app may use a restart file instead of using of using the master backup file\n'
p42474
sS'cpp_type'
p42475
S'bool'
p42476
sS'default'
p42477
S'0'
p42478
sS'name'
p42479
S'force_restart'
p42480
sS'required'
p42481
I00
sS'group_name'
p42482
Nsa(dp42483
S'description'
p42484
S'The dimension of the near nullspace\n'
p42485
sS'cpp_type'
p42486
S'unsigned int'
p42487
sS'default'
p42488
S'0'
p42489
sS'name'
p42490
S'near_null_space_dimension'
p42491
sS'required'
p42492
I00
sS'group_name'
p42493
Nsa(dp42494
S'description'
p42495
S'The dimension of the nullspace\n'
p42496
sS'cpp_type'
p42497
S'unsigned int'
p42498
sS'default'
p42499
S'0'
p42500
sS'name'
p42501
S'null_space_dimension'
p42502
sS'required'
p42503
I00
sS'group_name'
p42504
Nsa(dp42505
S'description'
p42506
S'Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n'
p42507
sS'cpp_type'
p42508
S'bool'
p42509
sS'default'
p42510
S'1'
p42511
sS'name'
p42512
S'solve'
p42513
sS'required'
p42514
I00
sS'group_name'
p42515
Nsa(dp42516
S'description'
p42517
S'The dimension of the transpose nullspace\n'
p42518
sS'cpp_type'
p42519
S'unsigned int'
p42520
sS'default'
p42521
S'0'
p42522
sS'name'
p42523
S'transpose_null_space_dimension'
p42524
sS'required'
p42525
I00
sS'group_name'
p42526
Nsa(dp42527
S'description'
p42528
g3
sS'cpp_type'
p42529
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42530
sS'default'
p42531
S'FEProblem'
p42532
sS'name'
p42533
S'type'
p42534
sS'required'
p42535
I00
sS'group_name'
p42536
Nsa(dp42537
S'description'
p42538
S'Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n'
p42539
sS'cpp_type'
p42540
S'bool'
p42541
sS'default'
p42542
S'1'
p42543
sS'name'
p42544
S'use_nonlinear'
p42545
sS'required'
p42546
I00
sS'group_name'
p42547
NsasS'name'
p42548
S'/Problem/<type>/FEProblem'
p42549
sasS'parameters'
p42550
NsS'name'
p42551
S'/Problem/<type>'
p42552
sasS'parameters'
p42553
(lp42554
(dp42555
S'description'
p42556
S'Block IDs for the coordinate systems\n'
p42557
sS'cpp_type'
p42558
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p42559
sS'default'
p42560
g3
sS'name'
p42561
S'block'
p42562
sS'required'
p42563
I00
sS'group_name'
p42564
Nsa(dp42565
S'name'
p42566
S'coord_type'
p42567
sS'cpp_type'
p42568
S'MultiMooseEnum'
p42569
sS'default'
p42570
S'XYZ'
p42571
sS'description'
p42572
S'Type of the coordinate system per block param\n'
p42573
sS'required'
p42574
I00
sS'options'
p42575
S'XYZ RZ RSPHERICAL'
p42576
sS'group_name'
p42577
Nsa(dp42578
S'description'
p42579
S'Whether or not to turn on the finite element shape function caching system.  This can increase speed with an associated memory cost.\n'
p42580
sS'cpp_type'
p42581
S'bool'
p42582
sS'default'
p42583
S'0'
p42584
sS'name'
p42585
S'fe_cache'
p42586
sS'required'
p42587
I00
sS'group_name'
p42588
Nsa(dp42589
S'description'
p42590
S'Set to false to disable kernel->subdomain coverage check\n'
p42591
sS'cpp_type'
p42592
S'bool'
p42593
sS'default'
p42594
S'1'
p42595
sS'name'
p42596
S'kernel_coverage_check'
p42597
sS'required'
p42598
I00
sS'group_name'
p42599
Nsa(dp42600
S'description'
p42601
S'Set to false to disable material->subdomain coverage check\n'
p42602
sS'cpp_type'
p42603
S'bool'
p42604
sS'default'
p42605
S'1'
p42606
sS'name'
p42607
S'material_coverage_check'
p42608
sS'required'
p42609
I00
sS'group_name'
p42610
Nsa(dp42611
S'description'
p42612
S'The name the problem\n'
p42613
sS'cpp_type'
p42614
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42615
sS'default'
p42616
S'MOOSE Problem'
p42617
sS'name'
p42618
S'name'
p42619
sS'required'
p42620
I00
sS'group_name'
p42621
Nsa(dp42622
S'description'
p42623
S'File base name used for restart (e.g. <path>/<filebase> or <path>/LATEST to grab the latest file available)\n'
p42624
sS'cpp_type'
p42625
S'FileNameNoExtension'
p42626
sS'default'
p42627
g3
sS'name'
p42628
S'restart_file_base'
p42629
sS'required'
p42630
I00
sS'group_name'
p42631
Nsa(dp42632
S'name'
p42633
S'rz_coord_axis'
p42634
sS'cpp_type'
p42635
S'MooseEnum'
p42636
sS'default'
p42637
S'Y'
p42638
sS'description'
p42639
S'The rotation axis (X | Y) for axisymetric coordinates\n'
p42640
sS'required'
p42641
I00
sS'options'
p42642
S'X Y'
p42643
sS'group_name'
p42644
Nsa(dp42645
S'description'
p42646
S'A string representing the Moose Object that will be built by this Action\n'
p42647
sS'cpp_type'
p42648
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42649
sS'default'
p42650
S'FEProblem'
p42651
sS'name'
p42652
S'type'
p42653
sS'required'
p42654
I01
sS'group_name'
p42655
Nsa(dp42656
S'description'
p42657
S'Set to true to have MOOSE recompute *all* AuxKernel types every time *any* UserObject type is executed. ... This behavior is non-intuitive and will be removed late fall 2014, The default is controlled through MooseApp\n'
p42658
sS'cpp_type'
p42659
S'bool'
p42660
sS'default'
p42661
g3
sS'name'
p42662
S'use_legacy_uo_aux_computation'
p42663
sS'required'
p42664
I00
sS'group_name'
p42665
Nsa(dp42666
S'description'
p42667
S'Set to true to have MOOSE compute all UserObjects and Postprocessors during the initial setup phase of the problem recompute *all* AuxKernel types every time *any* UserObject type is executed. ... This behavior is non-intuitive and will be removed late fall 2014, The default is controlled through MooseApp\n'
p42668
sS'cpp_type'
p42669
S'bool'
p42670
sS'default'
p42671
g3
sS'name'
p42672
S'use_legacy_uo_initialization'
p42673
sS'required'
p42674
I00
sS'group_name'
p42675
Nsa(dp42676
S'description'
p42677
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p42678
sS'cpp_type'
p42679
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42680
sS'default'
p42681
g3
sS'name'
p42682
S'library_path'
p42683
sS'required'
p42684
I00
sS'group_name'
p42685
Nsa(dp42686
S'description'
p42687
S'The names of the objects to register (Default: register all).\n'
p42688
sS'cpp_type'
p42689
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42690
sS'default'
p42691
g3
sS'name'
p42692
S'object_names'
p42693
sS'required'
p42694
I00
sS'group_name'
p42695
Nsa(dp42696
S'description'
p42697
S'The names of other applications from which objects will be registered from (dynamic registration).\n'
p42698
sS'cpp_type'
p42699
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42700
sS'default'
p42701
g3
sS'name'
p42702
S'register_objects_from'
p42703
sS'required'
p42704
I00
sS'group_name'
p42705
NsasS'name'
p42706
S'/Problem'
p42707
sa(dp42708
S'description'
p42709
g3
sS'subblocks'
p42710
(lp42711
(dp42712
S'description'
p42713
g3
sS'subblocks'
p42714
NsS'parameters'
p42715
(lp42716
(dp42717
S'description'
p42718
S'A string representing the Moose Object that will be built by this Action\n'
p42719
sS'cpp_type'
p42720
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42721
sS'default'
p42722
g3
sS'name'
p42723
S'type'
p42724
sS'required'
p42725
I01
sS'group_name'
p42726
NsasS'name'
p42727
S'/ScalarKernels/*'
p42728
sa(dp42729
S'description'
p42730
g3
sS'subblocks'
p42731
NsS'parameters'
p42732
(lp42733
(dp42734
S'description'
p42735
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42736
sS'cpp_type'
p42737
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42738
sS'default'
p42739
g3
sS'name'
p42740
S'control_tags'
p42741
sS'required'
p42742
I00
sS'group_name'
p42743
S'Advanced'
p42744
sa(dp42745
S'description'
p42746
S'Set the enabled status of the MooseObject.\n'
p42747
sS'cpp_type'
p42748
S'bool'
p42749
sS'default'
p42750
S'1'
p42751
sS'name'
p42752
S'enable'
p42753
sS'required'
p42754
I00
sS'group_name'
p42755
S'Advanced'
p42756
sa(dp42757
S'description'
p42758
S'Determines whether this object is calculated using an implicit or explicit form\n'
p42759
sS'cpp_type'
p42760
S'bool'
p42761
sS'default'
p42762
S'1'
p42763
sS'name'
p42764
S'implicit'
p42765
sS'required'
p42766
I00
sS'group_name'
p42767
S'Advanced'
p42768
sa(dp42769
S'description'
p42770
S'Node ids\n'
p42771
sS'cpp_type'
p42772
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p42773
sS'default'
p42774
g3
sS'name'
p42775
S'nodes'
p42776
sS'required'
p42777
I01
sS'group_name'
p42778
Nsa(dp42779
S'description'
p42780
g3
sS'cpp_type'
p42781
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42782
sS'default'
p42783
S'NodalEqualValueConstraint'
p42784
sS'name'
p42785
S'type'
p42786
sS'required'
p42787
I00
sS'group_name'
p42788
Nsa(dp42789
S'description'
p42790
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42791
sS'cpp_type'
p42792
S'bool'
p42793
sS'default'
p42794
S'0'
p42795
sS'name'
p42796
S'use_displaced_mesh'
p42797
sS'required'
p42798
I00
sS'group_name'
p42799
S'Advanced'
p42800
sa(dp42801
S'description'
p42802
S'Variable(s) to put the constraint on\n'
p42803
sS'cpp_type'
p42804
S'std::vector<VariableName>'
p42805
sS'default'
p42806
g3
sS'name'
p42807
S'var'
p42808
sS'required'
p42809
I01
sS'group_name'
p42810
Nsa(dp42811
S'description'
p42812
S'The name of the variable that this kernel operates on\n'
p42813
sS'cpp_type'
p42814
S'NonlinearVariableName'
p42815
sS'default'
p42816
g3
sS'name'
p42817
S'variable'
p42818
sS'required'
p42819
I01
sS'group_name'
p42820
NsasS'name'
p42821
S'/ScalarKernels/NodalEqualValueConstraint'
p42822
sa(dp42823
S'description'
p42824
g3
sS'subblocks'
p42825
NsS'parameters'
p42826
(lp42827
(dp42828
S'description'
p42829
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42830
sS'cpp_type'
p42831
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42832
sS'default'
p42833
g3
sS'name'
p42834
S'control_tags'
p42835
sS'required'
p42836
I00
sS'group_name'
p42837
S'Advanced'
p42838
sa(dp42839
S'description'
p42840
S'Set the enabled status of the MooseObject.\n'
p42841
sS'cpp_type'
p42842
S'bool'
p42843
sS'default'
p42844
S'1'
p42845
sS'name'
p42846
S'enable'
p42847
sS'required'
p42848
I00
sS'group_name'
p42849
S'Advanced'
p42850
sa(dp42851
S'description'
p42852
S'Determines whether this object is calculated using an implicit or explicit form\n'
p42853
sS'cpp_type'
p42854
S'bool'
p42855
sS'default'
p42856
S'1'
p42857
sS'name'
p42858
S'implicit'
p42859
sS'required'
p42860
I00
sS'group_name'
p42861
S'Advanced'
p42862
sa(dp42863
S'description'
p42864
g3
sS'cpp_type'
p42865
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42866
sS'default'
p42867
S'ODETimeDerivative'
p42868
sS'name'
p42869
S'type'
p42870
sS'required'
p42871
I00
sS'group_name'
p42872
Nsa(dp42873
S'description'
p42874
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42875
sS'cpp_type'
p42876
S'bool'
p42877
sS'default'
p42878
S'0'
p42879
sS'name'
p42880
S'use_displaced_mesh'
p42881
sS'required'
p42882
I00
sS'group_name'
p42883
S'Advanced'
p42884
sa(dp42885
S'description'
p42886
S'The name of the variable that this kernel operates on\n'
p42887
sS'cpp_type'
p42888
S'NonlinearVariableName'
p42889
sS'default'
p42890
g3
sS'name'
p42891
S'variable'
p42892
sS'required'
p42893
I01
sS'group_name'
p42894
NsasS'name'
p42895
S'/ScalarKernels/ODETimeDerivative'
p42896
sa(dp42897
S'description'
p42898
S'Parsed ODE function kernel.\n'
p42899
sS'subblocks'
p42900
NsS'parameters'
p42901
(lp42902
(dp42903
S'description'
p42904
S'additional coupled variables\n'
p42905
sS'cpp_type'
p42906
S'std::vector<VariableName>'
p42907
sS'default'
p42908
g3
sS'name'
p42909
S'args'
p42910
sS'required'
p42911
I00
sS'group_name'
p42912
Nsa(dp42913
S'description'
p42914
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p42915
sS'cpp_type'
p42916
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42917
sS'default'
p42918
g3
sS'name'
p42919
S'constant_expressions'
p42920
sS'required'
p42921
I00
sS'group_name'
p42922
Nsa(dp42923
S'description'
p42924
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p42925
sS'cpp_type'
p42926
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42927
sS'default'
p42928
g3
sS'name'
p42929
S'constant_names'
p42930
sS'required'
p42931
I00
sS'group_name'
p42932
Nsa(dp42933
S'description'
p42934
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42935
sS'cpp_type'
p42936
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42937
sS'default'
p42938
g3
sS'name'
p42939
S'control_tags'
p42940
sS'required'
p42941
I00
sS'group_name'
p42942
S'Advanced'
p42943
sa(dp42944
S'description'
p42945
S'Disable the function parser algebraic optimizer\n'
p42946
sS'cpp_type'
p42947
S'bool'
p42948
sS'default'
p42949
S'0'
p42950
sS'name'
p42951
S'disable_fpoptimizer'
p42952
sS'required'
p42953
I00
sS'group_name'
p42954
S'Advanced'
p42955
sa(dp42956
S'description'
p42957
S'Set the enabled status of the MooseObject.\n'
p42958
sS'cpp_type'
p42959
S'bool'
p42960
sS'default'
p42961
S'1'
p42962
sS'name'
p42963
S'enable'
p42964
sS'required'
p42965
I00
sS'group_name'
p42966
S'Advanced'
p42967
sa(dp42968
S'description'
p42969
S'Enable cacheing of function derivatives for faster startup time\n'
p42970
sS'cpp_type'
p42971
S'bool'
p42972
sS'default'
p42973
S'1'
p42974
sS'name'
p42975
S'enable_ad_cache'
p42976
sS'required'
p42977
I00
sS'group_name'
p42978
S'Advanced'
p42979
sa(dp42980
S'description'
p42981
S'Enable automatic immediate optimization of derivatives\n'
p42982
sS'cpp_type'
p42983
S'bool'
p42984
sS'default'
p42985
S'1'
p42986
sS'name'
p42987
S'enable_auto_optimize'
p42988
sS'required'
p42989
I00
sS'group_name'
p42990
S'Advanced'
p42991
sa(dp42992
S'description'
p42993
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p42994
sS'cpp_type'
p42995
S'bool'
p42996
sS'default'
p42997
S'1'
p42998
sS'name'
p42999
S'enable_jit'
p43000
sS'required'
p43001
I00
sS'group_name'
p43002
S'Advanced'
p43003
sa(dp43004
S'description'
p43005
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p43006
sS'cpp_type'
p43007
S'bool'
p43008
sS'default'
p43009
S'0'
p43010
sS'name'
p43011
S'fail_on_evalerror'
p43012
sS'required'
p43013
I00
sS'group_name'
p43014
S'Advanced'
p43015
sa(dp43016
S'description'
p43017
S'function expression\n'
p43018
sS'cpp_type'
p43019
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43020
sS'default'
p43021
g3
sS'name'
p43022
S'function'
p43023
sS'required'
p43024
I01
sS'group_name'
p43025
Nsa(dp43026
S'description'
p43027
S'Determines whether this object is calculated using an implicit or explicit form\n'
p43028
sS'cpp_type'
p43029
S'bool'
p43030
sS'default'
p43031
S'1'
p43032
sS'name'
p43033
S'implicit'
p43034
sS'required'
p43035
I00
sS'group_name'
p43036
S'Advanced'
p43037
sa(dp43038
S'description'
p43039
g3
sS'cpp_type'
p43040
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43041
sS'default'
p43042
S'ParsedODEKernel'
p43043
sS'name'
p43044
S'type'
p43045
sS'required'
p43046
I00
sS'group_name'
p43047
Nsa(dp43048
S'description'
p43049
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43050
sS'cpp_type'
p43051
S'bool'
p43052
sS'default'
p43053
S'0'
p43054
sS'name'
p43055
S'use_displaced_mesh'
p43056
sS'required'
p43057
I00
sS'group_name'
p43058
S'Advanced'
p43059
sa(dp43060
S'description'
p43061
S'The name of the variable that this kernel operates on\n'
p43062
sS'cpp_type'
p43063
S'NonlinearVariableName'
p43064
sS'default'
p43065
g3
sS'name'
p43066
S'variable'
p43067
sS'required'
p43068
I01
sS'group_name'
p43069
NsasS'name'
p43070
S'/ScalarKernels/ParsedODEKernel'
p43071
sasS'parameters'
p43072
NsS'name'
p43073
S'/ScalarKernels'
p43074
sa(dp43075
S'description'
p43076
g3
sS'subblocks'
p43077
(lp43078
(dp43079
S'description'
p43080
g3
sS'subblocks'
p43081
NsS'parameters'
p43082
(lp43083
(dp43084
S'description'
p43085
S'A string representing the Moose Object that will be built by this Action\n'
p43086
sS'cpp_type'
p43087
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43088
sS'default'
p43089
g3
sS'name'
p43090
S'type'
p43091
sS'required'
p43092
I01
sS'group_name'
p43093
NsasS'name'
p43094
S'/Transfers/*'
p43095
sa(dp43096
S'description'
p43097
S'Copies variables (nonlinear and auxiliary) between multiapps that have identical meshes.\n'
p43098
sS'subblocks'
p43099
NsS'parameters'
p43100
(lp43101
(dp43102
S'description'
p43103
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43104
sS'cpp_type'
p43105
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p43106
sS'default'
p43107
g3
sS'name'
p43108
S'control_tags'
p43109
sS'required'
p43110
I00
sS'group_name'
p43111
S'Advanced'
p43112
sa(dp43113
S'name'
p43114
S'direction'
p43115
sS'cpp_type'
p43116
S'MooseEnum'
p43117
sS'default'
p43118
g3
sS'description'
p43119
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p43120
sS'required'
p43121
I01
sS'options'
p43122
S'to_multiapp from_multiapp'
p43123
sS'group_name'
p43124
Nsa(dp43125
S'description'
p43126
S'Whether or not to use the displaced mesh for the source mesh.\n'
p43127
sS'cpp_type'
p43128
S'bool'
p43129
sS'default'
p43130
S'0'
p43131
sS'name'
p43132
S'displaced_source_mesh'
p43133
sS'required'
p43134
I00
sS'group_name'
p43135
Nsa(dp43136
S'description'
p43137
S'Whether or not to use the displaced mesh for the target mesh.\n'
p43138
sS'cpp_type'
p43139
S'bool'
p43140
sS'default'
p43141
S'0'
p43142
sS'name'
p43143
S'displaced_target_mesh'
p43144
sS'required'
p43145
I00
sS'group_name'
p43146
Nsa(dp43147
S'description'
p43148
S'Set the enabled status of the MooseObject.\n'
p43149
sS'cpp_type'
p43150
S'bool'
p43151
sS'default'
p43152
S'1'
p43153
sS'name'
p43154
S'enable'
p43155
sS'required'
p43156
I00
sS'group_name'
p43157
S'Advanced'
p43158
sa(dp43159
S'name'
p43160
S'execute_on'
p43161
sS'cpp_type'
p43162
S'MultiMooseEnum'
p43163
sS'default'
p43164
S'SAME_AS_MULTIAPP'
p43165
sS'description'
p43166
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p43167
sS'required'
p43168
I00
sS'options'
p43169
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p43170
sS'group_name'
p43171
Nsa(dp43172
S'description'
p43173
S'The name of the MultiApp to use.\n'
p43174
sS'cpp_type'
p43175
S'MultiAppName'
p43176
sS'default'
p43177
g3
sS'name'
p43178
S'multi_app'
p43179
sS'required'
p43180
I01
sS'group_name'
p43181
Nsa(dp43182
S'description'
p43183
S'The variable to transfer from.\n'
p43184
sS'cpp_type'
p43185
S'VariableName'
p43186
sS'default'
p43187
g3
sS'name'
p43188
S'source_variable'
p43189
sS'required'
p43190
I01
sS'group_name'
p43191
Nsa(dp43192
S'description'
p43193
g3
sS'cpp_type'
p43194
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43195
sS'default'
p43196
S'MultiAppCopyTransfer'
p43197
sS'name'
p43198
S'type'
p43199
sS'required'
p43200
I00
sS'group_name'
p43201
Nsa(dp43202
S'description'
p43203
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43204
sS'cpp_type'
p43205
S'bool'
p43206
sS'default'
p43207
S'0'
p43208
sS'name'
p43209
S'use_displaced_mesh'
p43210
sS'required'
p43211
I00
sS'group_name'
p43212
S'Advanced'
p43213
sa(dp43214
S'description'
p43215
S'The variable to store the transferred values in.\n'
p43216
sS'cpp_type'
p43217
S'VariableName'
p43218
sS'default'
p43219
g3
sS'name'
p43220
S'variable'
p43221
sS'required'
p43222
I01
sS'group_name'
p43223
NsasS'name'
p43224
S'/Transfers/MultiAppCopyTransfer'
p43225
sa(dp43226
S'description'
p43227
g3
sS'subblocks'
p43228
NsS'parameters'
p43229
(lp43230
(dp43231
S'description'
p43232
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43233
sS'cpp_type'
p43234
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p43235
sS'default'
p43236
g3
sS'name'
p43237
S'control_tags'
p43238
sS'required'
p43239
I00
sS'group_name'
p43240
S'Advanced'
p43241
sa(dp43242
S'name'
p43243
S'direction'
p43244
sS'cpp_type'
p43245
S'MooseEnum'
p43246
sS'default'
p43247
g3
sS'description'
p43248
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p43249
sS'required'
p43250
I01
sS'options'
p43251
S'to_multiapp from_multiapp'
p43252
sS'group_name'
p43253
Nsa(dp43254
S'description'
p43255
S'Whether or not to use the displaced mesh for the source mesh.\n'
p43256
sS'cpp_type'
p43257
S'bool'
p43258
sS'default'
p43259
S'0'
p43260
sS'name'
p43261
S'displaced_source_mesh'
p43262
sS'required'
p43263
I00
sS'group_name'
p43264
Nsa(dp43265
S'description'
p43266
S'Whether or not to use the displaced mesh for the target mesh.\n'
p43267
sS'cpp_type'
p43268
S'bool'
p43269
sS'default'
p43270
S'0'
p43271
sS'name'
p43272
S'displaced_target_mesh'
p43273
sS'required'
p43274
I00
sS'group_name'
p43275
Nsa(dp43276
S'description'
p43277
S'Set the enabled status of the MooseObject.\n'
p43278
sS'cpp_type'
p43279
S'bool'
p43280
sS'default'
p43281
S'1'
p43282
sS'name'
p43283
S'enable'
p43284
sS'required'
p43285
I00
sS'group_name'
p43286
S'Advanced'
p43287
sa(dp43288
S'name'
p43289
S'execute_on'
p43290
sS'cpp_type'
p43291
S'MultiMooseEnum'
p43292
sS'default'
p43293
S'SAME_AS_MULTIAPP'
p43294
sS'description'
p43295
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p43296
sS'required'
p43297
I00
sS'options'
p43298
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p43299
sS'group_name'
p43300
Nsa(dp43301
S'name'
p43302
S'interp_type'
p43303
sS'cpp_type'
p43304
S'MooseEnum'
p43305
sS'default'
p43306
S'inverse_distance'
p43307
sS'description'
p43308
S'The algorithm to use for interpolation.\n'
p43309
sS'required'
p43310
I00
sS'options'
p43311
S'inverse_distance radial_basis'
p43312
sS'group_name'
p43313
Nsa(dp43314
S'description'
p43315
S'The name of the MultiApp to use.\n'
p43316
sS'cpp_type'
p43317
S'MultiAppName'
p43318
sS'default'
p43319
g3
sS'name'
p43320
S'multi_app'
p43321
sS'required'
p43322
I01
sS'group_name'
p43323
Nsa(dp43324
S'description'
p43325
S'The number of nearest points to use for interpolation.\n'
p43326
sS'cpp_type'
p43327
S'unsigned int'
p43328
sS'default'
p43329
S'3'
p43330
sS'name'
p43331
S'num_points'
p43332
sS'required'
p43333
I00
sS'group_name'
p43334
Nsa(dp43335
S'description'
p43336
S'The polynomial power to use for calculation of the decay in the interpolation.\n'
p43337
sS'cpp_type'
p43338
S'double'
p43339
sS'default'
p43340
S'2'
p43341
sS'name'
p43342
S'power'
p43343
sS'required'
p43344
I00
sS'group_name'
p43345
Nsa(dp43346
S'description'
p43347
S'Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n'
p43348
sS'cpp_type'
p43349
S'double'
p43350
sS'default'
p43351
S'-1'
p43352
sS'name'
p43353
S'radius'
p43354
sS'required'
p43355
I00
sS'group_name'
p43356
Nsa(dp43357
S'description'
p43358
S'The variable to transfer from.\n'
p43359
sS'cpp_type'
p43360
S'VariableName'
p43361
sS'default'
p43362
g3
sS'name'
p43363
S'source_variable'
p43364
sS'required'
p43365
I01
sS'group_name'
p43366
Nsa(dp43367
S'description'
p43368
g3
sS'cpp_type'
p43369
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43370
sS'default'
p43371
S'MultiAppInterpolationTransfer'
p43372
sS'name'
p43373
S'type'
p43374
sS'required'
p43375
I00
sS'group_name'
p43376
Nsa(dp43377
S'description'
p43378
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43379
sS'cpp_type'
p43380
S'bool'
p43381
sS'default'
p43382
S'0'
p43383
sS'name'
p43384
S'use_displaced_mesh'
p43385
sS'required'
p43386
I00
sS'group_name'
p43387
S'Advanced'
p43388
sa(dp43389
S'description'
p43390
S'The auxiliary variable to store the transferred values in.\n'
p43391
sS'cpp_type'
p43392
S'AuxVariableName'
p43393
sS'default'
p43394
g3
sS'name'
p43395
S'variable'
p43396
sS'required'
p43397
I01
sS'group_name'
p43398
NsasS'name'
p43399
S'/Transfers/MultiAppInterpolationTransfer'
p43400
sa(dp43401
S'description'
p43402
g3
sS'subblocks'
p43403
NsS'parameters'
p43404
(lp43405
(dp43406
S'description'
p43407
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43408
sS'cpp_type'
p43409
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p43410
sS'default'
p43411
g3
sS'name'
p43412
S'control_tags'
p43413
sS'required'
p43414
I00
sS'group_name'
p43415
S'Advanced'
p43416
sa(dp43417
S'name'
p43418
S'direction'
p43419
sS'cpp_type'
p43420
S'MooseEnum'
p43421
sS'default'
p43422
g3
sS'description'
p43423
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p43424
sS'required'
p43425
I01
sS'options'
p43426
S'to_multiapp from_multiapp'
p43427
sS'group_name'
p43428
Nsa(dp43429
S'description'
p43430
S'Whether or not to use the displaced mesh for the source mesh.\n'
p43431
sS'cpp_type'
p43432
S'bool'
p43433
sS'default'
p43434
S'0'
p43435
sS'name'
p43436
S'displaced_source_mesh'
p43437
sS'required'
p43438
I00
sS'group_name'
p43439
Nsa(dp43440
S'description'
p43441
S'Whether or not to use the displaced mesh for the target mesh.\n'
p43442
sS'cpp_type'
p43443
S'bool'
p43444
sS'default'
p43445
S'0'
p43446
sS'name'
p43447
S'displaced_target_mesh'
p43448
sS'required'
p43449
I00
sS'group_name'
p43450
Nsa(dp43451
S'description'
p43452
S'Set the enabled status of the MooseObject.\n'
p43453
sS'cpp_type'
p43454
S'bool'
p43455
sS'default'
p43456
S'1'
p43457
sS'name'
p43458
S'enable'
p43459
sS'required'
p43460
I00
sS'group_name'
p43461
S'Advanced'
p43462
sa(dp43463
S'description'
p43464
S'Whether or not to error in the case that a target point is not found in the source domain.\n'
p43465
sS'cpp_type'
p43466
S'bool'
p43467
sS'default'
p43468
S'0'
p43469
sS'name'
p43470
S'error_on_miss'
p43471
sS'required'
p43472
I00
sS'group_name'
p43473
Nsa(dp43474
S'name'
p43475
S'execute_on'
p43476
sS'cpp_type'
p43477
S'MultiMooseEnum'
p43478
sS'default'
p43479
S'SAME_AS_MULTIAPP'
p43480
sS'description'
p43481
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p43482
sS'required'
p43483
I00
sS'options'
p43484
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p43485
sS'group_name'
p43486
Nsa(dp43487
S'description'
p43488
S'The name of the MultiApp to use.\n'
p43489
sS'cpp_type'
p43490
S'MultiAppName'
p43491
sS'default'
p43492
g3
sS'name'
p43493
S'multi_app'
p43494
sS'required'
p43495
I01
sS'group_name'
p43496
Nsa(dp43497
S'description'
p43498
S'The variable to transfer from.\n'
p43499
sS'cpp_type'
p43500
S'VariableName'
p43501
sS'default'
p43502
g3
sS'name'
p43503
S'source_variable'
p43504
sS'required'
p43505
I01
sS'group_name'
p43506
Nsa(dp43507
S'description'
p43508
g3
sS'cpp_type'
p43509
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43510
sS'default'
p43511
S'MultiAppMeshFunctionTransfer'
p43512
sS'name'
p43513
S'type'
p43514
sS'required'
p43515
I00
sS'group_name'
p43516
Nsa(dp43517
S'description'
p43518
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43519
sS'cpp_type'
p43520
S'bool'
p43521
sS'default'
p43522
S'0'
p43523
sS'name'
p43524
S'use_displaced_mesh'
p43525
sS'required'
p43526
I00
sS'group_name'
p43527
S'Advanced'
p43528
sa(dp43529
S'description'
p43530
S'The auxiliary variable to store the transferred values in.\n'
p43531
sS'cpp_type'
p43532
S'AuxVariableName'
p43533
sS'default'
p43534
g3
sS'name'
p43535
S'variable'
p43536
sS'required'
p43537
I01
sS'group_name'
p43538
NsasS'name'
p43539
S'/Transfers/MultiAppMeshFunctionTransfer'
p43540
sa(dp43541
S'description'
p43542
g3
sS'subblocks'
p43543
NsS'parameters'
p43544
(lp43545
(dp43546
S'description'
p43547
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43548
sS'cpp_type'
p43549
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p43550
sS'default'
p43551
g3
sS'name'
p43552
S'control_tags'
p43553
sS'required'
p43554
I00
sS'group_name'
p43555
S'Advanced'
p43556
sa(dp43557
S'name'
p43558
S'direction'
p43559
sS'cpp_type'
p43560
S'MooseEnum'
p43561
sS'default'
p43562
g3
sS'description'
p43563
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p43564
sS'required'
p43565
I01
sS'options'
p43566
S'to_multiapp from_multiapp'
p43567
sS'group_name'
p43568
Nsa(dp43569
S'description'
p43570
S'Whether or not to use the displaced mesh for the source mesh.\n'
p43571
sS'cpp_type'
p43572
S'bool'
p43573
sS'default'
p43574
S'0'
p43575
sS'name'
p43576
S'displaced_source_mesh'
p43577
sS'required'
p43578
I00
sS'group_name'
p43579
Nsa(dp43580
S'description'
p43581
S'Whether or not to use the displaced mesh for the target mesh.\n'
p43582
sS'cpp_type'
p43583
S'bool'
p43584
sS'default'
p43585
S'0'
p43586
sS'name'
p43587
S'displaced_target_mesh'
p43588
sS'required'
p43589
I00
sS'group_name'
p43590
Nsa(dp43591
S'description'
p43592
S'Set the enabled status of the MooseObject.\n'
p43593
sS'cpp_type'
p43594
S'bool'
p43595
sS'default'
p43596
S'1'
p43597
sS'name'
p43598
S'enable'
p43599
sS'required'
p43600
I00
sS'group_name'
p43601
S'Advanced'
p43602
sa(dp43603
S'name'
p43604
S'execute_on'
p43605
sS'cpp_type'
p43606
S'MultiMooseEnum'
p43607
sS'default'
p43608
S'SAME_AS_MULTIAPP'
p43609
sS'description'
p43610
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p43611
sS'required'
p43612
I00
sS'options'
p43613
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p43614
sS'group_name'
p43615
Nsa(dp43616
S'description'
p43617
S'Set to true when the meshes are not changing (ie, no movement or adaptivity).  This will cache nearest node neighbors to greatly speed up the transfer.\n'
p43618
sS'cpp_type'
p43619
S'bool'
p43620
sS'default'
p43621
S'0'
p43622
sS'name'
p43623
S'fixed_meshes'
p43624
sS'required'
p43625
I00
sS'group_name'
p43626
Nsa(dp43627
S'description'
p43628
S'The name of the MultiApp to use.\n'
p43629
sS'cpp_type'
p43630
S'MultiAppName'
p43631
sS'default'
p43632
g3
sS'name'
p43633
S'multi_app'
p43634
sS'required'
p43635
I01
sS'group_name'
p43636
Nsa(dp43637
S'description'
p43638
S'The boundary we are transferring from (if not specified, whole domain is used).\n'
p43639
sS'cpp_type'
p43640
S'BoundaryName'
p43641
sS'default'
p43642
g3
sS'name'
p43643
S'source_boundary'
p43644
sS'required'
p43645
I00
sS'group_name'
p43646
Nsa(dp43647
S'description'
p43648
S'The variable to transfer from.\n'
p43649
sS'cpp_type'
p43650
S'VariableName'
p43651
sS'default'
p43652
g3
sS'name'
p43653
S'source_variable'
p43654
sS'required'
p43655
I01
sS'group_name'
p43656
Nsa(dp43657
S'description'
p43658
S'The boundary we are transferring to (if not specified, whole domain is used).\n'
p43659
sS'cpp_type'
p43660
S'BoundaryName'
p43661
sS'default'
p43662
g3
sS'name'
p43663
S'target_boundary'
p43664
sS'required'
p43665
I00
sS'group_name'
p43666
Nsa(dp43667
S'description'
p43668
g3
sS'cpp_type'
p43669
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43670
sS'default'
p43671
S'MultiAppNearestNodeTransfer'
p43672
sS'name'
p43673
S'type'
p43674
sS'required'
p43675
I00
sS'group_name'
p43676
Nsa(dp43677
S'description'
p43678
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43679
sS'cpp_type'
p43680
S'bool'
p43681
sS'default'
p43682
S'0'
p43683
sS'name'
p43684
S'use_displaced_mesh'
p43685
sS'required'
p43686
I00
sS'group_name'
p43687
S'Advanced'
p43688
sa(dp43689
S'description'
p43690
S'The auxiliary variable to store the transferred values in.\n'
p43691
sS'cpp_type'
p43692
S'AuxVariableName'
p43693
sS'default'
p43694
g3
sS'name'
p43695
S'variable'
p43696
sS'required'
p43697
I01
sS'group_name'
p43698
NsasS'name'
p43699
S'/Transfers/MultiAppNearestNodeTransfer'
p43700
sa(dp43701
S'description'
p43702
g3
sS'subblocks'
p43703
NsS'parameters'
p43704
(lp43705
(dp43706
S'description'
p43707
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43708
sS'cpp_type'
p43709
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p43710
sS'default'
p43711
g3
sS'name'
p43712
S'control_tags'
p43713
sS'required'
p43714
I00
sS'group_name'
p43715
S'Advanced'
p43716
sa(dp43717
S'name'
p43718
S'direction'
p43719
sS'cpp_type'
p43720
S'MooseEnum'
p43721
sS'default'
p43722
g3
sS'description'
p43723
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p43724
sS'required'
p43725
I01
sS'options'
p43726
S'to_multiapp from_multiapp'
p43727
sS'group_name'
p43728
Nsa(dp43729
S'description'
p43730
S'Whether or not to use the displaced mesh for the source mesh.\n'
p43731
sS'cpp_type'
p43732
S'bool'
p43733
sS'default'
p43734
S'0'
p43735
sS'name'
p43736
S'displaced_source_mesh'
p43737
sS'required'
p43738
I00
sS'group_name'
p43739
Nsa(dp43740
S'description'
p43741
S'Whether or not to use the displaced mesh for the target mesh.\n'
p43742
sS'cpp_type'
p43743
S'bool'
p43744
sS'default'
p43745
S'0'
p43746
sS'name'
p43747
S'displaced_target_mesh'
p43748
sS'required'
p43749
I00
sS'group_name'
p43750
Nsa(dp43751
S'description'
p43752
S'Set the enabled status of the MooseObject.\n'
p43753
sS'cpp_type'
p43754
S'bool'
p43755
sS'default'
p43756
S'1'
p43757
sS'name'
p43758
S'enable'
p43759
sS'required'
p43760
I00
sS'group_name'
p43761
S'Advanced'
p43762
sa(dp43763
S'name'
p43764
S'execute_on'
p43765
sS'cpp_type'
p43766
S'MultiMooseEnum'
p43767
sS'default'
p43768
S'SAME_AS_MULTIAPP'
p43769
sS'description'
p43770
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p43771
sS'required'
p43772
I00
sS'options'
p43773
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p43774
sS'group_name'
p43775
Nsa(dp43776
S'name'
p43777
S'interp_type'
p43778
sS'cpp_type'
p43779
S'MooseEnum'
p43780
sS'default'
p43781
S'inverse_distance'
p43782
sS'description'
p43783
S'The algorithm to use for interpolation.\n'
p43784
sS'required'
p43785
I00
sS'options'
p43786
S'inverse_distance radial_basis'
p43787
sS'group_name'
p43788
Nsa(dp43789
S'description'
p43790
S'The name of the MultiApp to use.\n'
p43791
sS'cpp_type'
p43792
S'MultiAppName'
p43793
sS'default'
p43794
g3
sS'name'
p43795
S'multi_app'
p43796
sS'required'
p43797
I01
sS'group_name'
p43798
Nsa(dp43799
S'description'
p43800
S'The number of nearest points to use for interpolation.\n'
p43801
sS'cpp_type'
p43802
S'unsigned int'
p43803
sS'default'
p43804
S'3'
p43805
sS'name'
p43806
S'num_points'
p43807
sS'required'
p43808
I00
sS'group_name'
p43809
Nsa(dp43810
S'description'
p43811
S'The Postprocessor to interpolate.\n'
p43812
sS'cpp_type'
p43813
S'PostprocessorName'
p43814
sS'default'
p43815
g3
sS'name'
p43816
S'postprocessor'
p43817
sS'required'
p43818
I01
sS'group_name'
p43819
Nsa(dp43820
S'description'
p43821
S'The polynomial power to use for calculation of the decay in the interpolation.\n'
p43822
sS'cpp_type'
p43823
S'double'
p43824
sS'default'
p43825
S'2'
p43826
sS'name'
p43827
S'power'
p43828
sS'required'
p43829
I00
sS'group_name'
p43830
Nsa(dp43831
S'description'
p43832
S'Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n'
p43833
sS'cpp_type'
p43834
S'double'
p43835
sS'default'
p43836
S'-1'
p43837
sS'name'
p43838
S'radius'
p43839
sS'required'
p43840
I00
sS'group_name'
p43841
Nsa(dp43842
S'description'
p43843
g3
sS'cpp_type'
p43844
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43845
sS'default'
p43846
S'MultiAppPostprocessorInterpolationTransfer'
p43847
sS'name'
p43848
S'type'
p43849
sS'required'
p43850
I00
sS'group_name'
p43851
Nsa(dp43852
S'description'
p43853
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43854
sS'cpp_type'
p43855
S'bool'
p43856
sS'default'
p43857
S'0'
p43858
sS'name'
p43859
S'use_displaced_mesh'
p43860
sS'required'
p43861
I00
sS'group_name'
p43862
S'Advanced'
p43863
sa(dp43864
S'description'
p43865
S'The auxiliary variable to store the transferred values in.\n'
p43866
sS'cpp_type'
p43867
S'AuxVariableName'
p43868
sS'default'
p43869
g3
sS'name'
p43870
S'variable'
p43871
sS'required'
p43872
I01
sS'group_name'
p43873
NsasS'name'
p43874
S'/Transfers/MultiAppPostprocessorInterpolationTransfer'
p43875
sa(dp43876
S'description'
p43877
g3
sS'subblocks'
p43878
NsS'parameters'
p43879
(lp43880
(dp43881
S'description'
p43882
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43883
sS'cpp_type'
p43884
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p43885
sS'default'
p43886
g3
sS'name'
p43887
S'control_tags'
p43888
sS'required'
p43889
I00
sS'group_name'
p43890
S'Advanced'
p43891
sa(dp43892
S'name'
p43893
S'direction'
p43894
sS'cpp_type'
p43895
S'MooseEnum'
p43896
sS'default'
p43897
g3
sS'description'
p43898
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p43899
sS'required'
p43900
I01
sS'options'
p43901
S'to_multiapp from_multiapp'
p43902
sS'group_name'
p43903
Nsa(dp43904
S'description'
p43905
S'Whether or not to use the displaced mesh for the source mesh.\n'
p43906
sS'cpp_type'
p43907
S'bool'
p43908
sS'default'
p43909
S'0'
p43910
sS'name'
p43911
S'displaced_source_mesh'
p43912
sS'required'
p43913
I00
sS'group_name'
p43914
Nsa(dp43915
S'description'
p43916
S'Whether or not to use the displaced mesh for the target mesh.\n'
p43917
sS'cpp_type'
p43918
S'bool'
p43919
sS'default'
p43920
S'0'
p43921
sS'name'
p43922
S'displaced_target_mesh'
p43923
sS'required'
p43924
I00
sS'group_name'
p43925
Nsa(dp43926
S'description'
p43927
S'Set the enabled status of the MooseObject.\n'
p43928
sS'cpp_type'
p43929
S'bool'
p43930
sS'default'
p43931
S'1'
p43932
sS'name'
p43933
S'enable'
p43934
sS'required'
p43935
I00
sS'group_name'
p43936
S'Advanced'
p43937
sa(dp43938
S'name'
p43939
S'execute_on'
p43940
sS'cpp_type'
p43941
S'MultiMooseEnum'
p43942
sS'default'
p43943
S'SAME_AS_MULTIAPP'
p43944
sS'description'
p43945
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p43946
sS'required'
p43947
I00
sS'options'
p43948
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p43949
sS'group_name'
p43950
Nsa(dp43951
S'description'
p43952
S'The name of the Postprocessor in the Master to transfer the value from.\n'
p43953
sS'cpp_type'
p43954
S'PostprocessorName'
p43955
sS'default'
p43956
g3
sS'name'
p43957
S'from_postprocessor'
p43958
sS'required'
p43959
I01
sS'group_name'
p43960
Nsa(dp43961
S'description'
p43962
S'The name of the MultiApp to use.\n'
p43963
sS'cpp_type'
p43964
S'MultiAppName'
p43965
sS'default'
p43966
g3
sS'name'
p43967
S'multi_app'
p43968
sS'required'
p43969
I01
sS'group_name'
p43970
Nsa(dp43971
S'description'
p43972
S'The name of the scalar Aux variable in the MultiApp to transfer the value to.\n'
p43973
sS'cpp_type'
p43974
S'VariableName'
p43975
sS'default'
p43976
g3
sS'name'
p43977
S'to_aux_scalar'
p43978
sS'required'
p43979
I01
sS'group_name'
p43980
Nsa(dp43981
S'description'
p43982
g3
sS'cpp_type'
p43983
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43984
sS'default'
p43985
S'MultiAppPostprocessorToAuxScalarTransfer'
p43986
sS'name'
p43987
S'type'
p43988
sS'required'
p43989
I00
sS'group_name'
p43990
Nsa(dp43991
S'description'
p43992
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43993
sS'cpp_type'
p43994
S'bool'
p43995
sS'default'
p43996
S'0'
p43997
sS'name'
p43998
S'use_displaced_mesh'
p43999
sS'required'
p44000
I00
sS'group_name'
p44001
S'Advanced'
p44002
sasS'name'
p44003
S'/Transfers/MultiAppPostprocessorToAuxScalarTransfer'
p44004
sa(dp44005
S'description'
p44006
g3
sS'subblocks'
p44007
NsS'parameters'
p44008
(lp44009
(dp44010
S'description'
p44011
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44012
sS'cpp_type'
p44013
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44014
sS'default'
p44015
g3
sS'name'
p44016
S'control_tags'
p44017
sS'required'
p44018
I00
sS'group_name'
p44019
S'Advanced'
p44020
sa(dp44021
S'name'
p44022
S'direction'
p44023
sS'cpp_type'
p44024
S'MooseEnum'
p44025
sS'default'
p44026
g3
sS'description'
p44027
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p44028
sS'required'
p44029
I01
sS'options'
p44030
S'to_multiapp from_multiapp'
p44031
sS'group_name'
p44032
Nsa(dp44033
S'description'
p44034
S'Whether or not to use the displaced mesh for the source mesh.\n'
p44035
sS'cpp_type'
p44036
S'bool'
p44037
sS'default'
p44038
S'0'
p44039
sS'name'
p44040
S'displaced_source_mesh'
p44041
sS'required'
p44042
I00
sS'group_name'
p44043
Nsa(dp44044
S'description'
p44045
S'Whether or not to use the displaced mesh for the target mesh.\n'
p44046
sS'cpp_type'
p44047
S'bool'
p44048
sS'default'
p44049
S'0'
p44050
sS'name'
p44051
S'displaced_target_mesh'
p44052
sS'required'
p44053
I00
sS'group_name'
p44054
Nsa(dp44055
S'description'
p44056
S'Set the enabled status of the MooseObject.\n'
p44057
sS'cpp_type'
p44058
S'bool'
p44059
sS'default'
p44060
S'1'
p44061
sS'name'
p44062
S'enable'
p44063
sS'required'
p44064
I00
sS'group_name'
p44065
S'Advanced'
p44066
sa(dp44067
S'name'
p44068
S'execute_on'
p44069
sS'cpp_type'
p44070
S'MultiMooseEnum'
p44071
sS'default'
p44072
S'SAME_AS_MULTIAPP'
p44073
sS'description'
p44074
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44075
sS'required'
p44076
I00
sS'options'
p44077
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p44078
sS'group_name'
p44079
Nsa(dp44080
S'description'
p44081
S'The name of the Postprocessor in the Master to transfer the value from.\n'
p44082
sS'cpp_type'
p44083
S'PostprocessorName'
p44084
sS'default'
p44085
g3
sS'name'
p44086
S'from_postprocessor'
p44087
sS'required'
p44088
I01
sS'group_name'
p44089
Nsa(dp44090
S'description'
p44091
S'The name of the MultiApp to use.\n'
p44092
sS'cpp_type'
p44093
S'MultiAppName'
p44094
sS'default'
p44095
g3
sS'name'
p44096
S'multi_app'
p44097
sS'required'
p44098
I01
sS'group_name'
p44099
Nsa(dp44100
S'name'
p44101
S'reduction_type'
p44102
sS'cpp_type'
p44103
S'MooseEnum'
p44104
sS'default'
p44105
g3
sS'description'
p44106
S'The type of reduction to perform to reduce postprocessor values from multiple SubApps to a single value\n'
p44107
sS'required'
p44108
I00
sS'options'
p44109
S'average sum maximum minimum'
p44110
sS'group_name'
p44111
Nsa(dp44112
S'description'
p44113
S'The name of the Postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n'
p44114
sS'cpp_type'
p44115
S'PostprocessorName'
p44116
sS'default'
p44117
g3
sS'name'
p44118
S'to_postprocessor'
p44119
sS'required'
p44120
I01
sS'group_name'
p44121
Nsa(dp44122
S'description'
p44123
g3
sS'cpp_type'
p44124
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44125
sS'default'
p44126
S'MultiAppPostprocessorTransfer'
p44127
sS'name'
p44128
S'type'
p44129
sS'required'
p44130
I00
sS'group_name'
p44131
Nsa(dp44132
S'description'
p44133
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44134
sS'cpp_type'
p44135
S'bool'
p44136
sS'default'
p44137
S'0'
p44138
sS'name'
p44139
S'use_displaced_mesh'
p44140
sS'required'
p44141
I00
sS'group_name'
p44142
S'Advanced'
p44143
sasS'name'
p44144
S'/Transfers/MultiAppPostprocessorTransfer'
p44145
sa(dp44146
S'description'
p44147
g3
sS'subblocks'
p44148
NsS'parameters'
p44149
(lp44150
(dp44151
S'description'
p44152
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44153
sS'cpp_type'
p44154
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44155
sS'default'
p44156
g3
sS'name'
p44157
S'control_tags'
p44158
sS'required'
p44159
I00
sS'group_name'
p44160
S'Advanced'
p44161
sa(dp44162
S'name'
p44163
S'direction'
p44164
sS'cpp_type'
p44165
S'MooseEnum'
p44166
sS'default'
p44167
g3
sS'description'
p44168
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p44169
sS'required'
p44170
I01
sS'options'
p44171
S'to_multiapp from_multiapp'
p44172
sS'group_name'
p44173
Nsa(dp44174
S'description'
p44175
S'Whether or not to use the displaced mesh for the source mesh.\n'
p44176
sS'cpp_type'
p44177
S'bool'
p44178
sS'default'
p44179
S'0'
p44180
sS'name'
p44181
S'displaced_source_mesh'
p44182
sS'required'
p44183
I00
sS'group_name'
p44184
Nsa(dp44185
S'description'
p44186
S'Whether or not to use the displaced mesh for the target mesh.\n'
p44187
sS'cpp_type'
p44188
S'bool'
p44189
sS'default'
p44190
S'0'
p44191
sS'name'
p44192
S'displaced_target_mesh'
p44193
sS'required'
p44194
I00
sS'group_name'
p44195
Nsa(dp44196
S'description'
p44197
S'Set the enabled status of the MooseObject.\n'
p44198
sS'cpp_type'
p44199
S'bool'
p44200
sS'default'
p44201
S'1'
p44202
sS'name'
p44203
S'enable'
p44204
sS'required'
p44205
I00
sS'group_name'
p44206
S'Advanced'
p44207
sa(dp44208
S'name'
p44209
S'execute_on'
p44210
sS'cpp_type'
p44211
S'MultiMooseEnum'
p44212
sS'default'
p44213
S'SAME_AS_MULTIAPP'
p44214
sS'description'
p44215
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44216
sS'required'
p44217
I00
sS'options'
p44218
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p44219
sS'group_name'
p44220
Nsa(dp44221
S'description'
p44222
S'Set to true when the meshes are not changing (ie, no movement or adaptivity).  This will cache some information to speed up the transfer.\n'
p44223
sS'cpp_type'
p44224
S'bool'
p44225
sS'default'
p44226
S'0'
p44227
sS'name'
p44228
S'fixed_meshes'
p44229
sS'required'
p44230
I00
sS'group_name'
p44231
Nsa(dp44232
S'description'
p44233
S'The name of the MultiApp to use.\n'
p44234
sS'cpp_type'
p44235
S'MultiAppName'
p44236
sS'default'
p44237
g3
sS'name'
p44238
S'multi_app'
p44239
sS'required'
p44240
I01
sS'group_name'
p44241
Nsa(dp44242
S'name'
p44243
S'proj_type'
p44244
sS'cpp_type'
p44245
S'MooseEnum'
p44246
sS'default'
p44247
S'l2'
p44248
sS'description'
p44249
S'The type of the projection.\n'
p44250
sS'required'
p44251
I00
sS'options'
p44252
S'l2'
p44253
sS'group_name'
p44254
Nsa(dp44255
S'description'
p44256
S'The variable to transfer from.\n'
p44257
sS'cpp_type'
p44258
S'VariableName'
p44259
sS'default'
p44260
g3
sS'name'
p44261
S'source_variable'
p44262
sS'required'
p44263
I01
sS'group_name'
p44264
Nsa(dp44265
S'description'
p44266
g3
sS'cpp_type'
p44267
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44268
sS'default'
p44269
S'MultiAppProjectionTransfer'
p44270
sS'name'
p44271
S'type'
p44272
sS'required'
p44273
I00
sS'group_name'
p44274
Nsa(dp44275
S'description'
p44276
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44277
sS'cpp_type'
p44278
S'bool'
p44279
sS'default'
p44280
S'0'
p44281
sS'name'
p44282
S'use_displaced_mesh'
p44283
sS'required'
p44284
I00
sS'group_name'
p44285
S'Advanced'
p44286
sa(dp44287
S'description'
p44288
S'The auxiliary variable to store the transferred values in.\n'
p44289
sS'cpp_type'
p44290
S'AuxVariableName'
p44291
sS'default'
p44292
g3
sS'name'
p44293
S'variable'
p44294
sS'required'
p44295
I01
sS'group_name'
p44296
NsasS'name'
p44297
S'/Transfers/MultiAppProjectionTransfer'
p44298
sa(dp44299
S'description'
p44300
g3
sS'subblocks'
p44301
NsS'parameters'
p44302
(lp44303
(dp44304
S'description'
p44305
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44306
sS'cpp_type'
p44307
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44308
sS'default'
p44309
g3
sS'name'
p44310
S'control_tags'
p44311
sS'required'
p44312
I00
sS'group_name'
p44313
S'Advanced'
p44314
sa(dp44315
S'name'
p44316
S'direction'
p44317
sS'cpp_type'
p44318
S'MooseEnum'
p44319
sS'default'
p44320
g3
sS'description'
p44321
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p44322
sS'required'
p44323
I01
sS'options'
p44324
S'to_multiapp from_multiapp'
p44325
sS'group_name'
p44326
Nsa(dp44327
S'description'
p44328
S'Whether or not to use the displaced mesh for the source mesh.\n'
p44329
sS'cpp_type'
p44330
S'bool'
p44331
sS'default'
p44332
S'0'
p44333
sS'name'
p44334
S'displaced_source_mesh'
p44335
sS'required'
p44336
I00
sS'group_name'
p44337
Nsa(dp44338
S'description'
p44339
S'Whether or not to use the displaced mesh for the target mesh.\n'
p44340
sS'cpp_type'
p44341
S'bool'
p44342
sS'default'
p44343
S'0'
p44344
sS'name'
p44345
S'displaced_target_mesh'
p44346
sS'required'
p44347
I00
sS'group_name'
p44348
Nsa(dp44349
S'description'
p44350
S'Set the enabled status of the MooseObject.\n'
p44351
sS'cpp_type'
p44352
S'bool'
p44353
sS'default'
p44354
S'1'
p44355
sS'name'
p44356
S'enable'
p44357
sS'required'
p44358
I00
sS'group_name'
p44359
S'Advanced'
p44360
sa(dp44361
S'name'
p44362
S'execute_on'
p44363
sS'cpp_type'
p44364
S'MultiMooseEnum'
p44365
sS'default'
p44366
S'SAME_AS_MULTIAPP'
p44367
sS'description'
p44368
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44369
sS'required'
p44370
I00
sS'options'
p44371
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p44372
sS'group_name'
p44373
Nsa(dp44374
S'description'
p44375
S'The name of the MultiApp to use.\n'
p44376
sS'cpp_type'
p44377
S'MultiAppName'
p44378
sS'default'
p44379
g3
sS'name'
p44380
S'multi_app'
p44381
sS'required'
p44382
I01
sS'group_name'
p44383
Nsa(dp44384
S'description'
p44385
g3
sS'cpp_type'
p44386
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44387
sS'default'
p44388
S'MultiAppUserObjectTransfer'
p44389
sS'name'
p44390
S'type'
p44391
sS'required'
p44392
I00
sS'group_name'
p44393
Nsa(dp44394
S'description'
p44395
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44396
sS'cpp_type'
p44397
S'bool'
p44398
sS'default'
p44399
S'0'
p44400
sS'name'
p44401
S'use_displaced_mesh'
p44402
sS'required'
p44403
I00
sS'group_name'
p44404
S'Advanced'
p44405
sa(dp44406
S'description'
p44407
S"The UserObject you want to transfer values from.  Note: This might be a UserObject from your MultiApp's input file!\n"
p44408
sS'cpp_type'
p44409
S'UserObjectName'
p44410
sS'default'
p44411
g3
sS'name'
p44412
S'user_object'
p44413
sS'required'
p44414
I01
sS'group_name'
p44415
Nsa(dp44416
S'description'
p44417
S'The auxiliary variable to store the transferred values in.\n'
p44418
sS'cpp_type'
p44419
S'AuxVariableName'
p44420
sS'default'
p44421
g3
sS'name'
p44422
S'variable'
p44423
sS'required'
p44424
I01
sS'group_name'
p44425
NsasS'name'
p44426
S'/Transfers/MultiAppUserObjectTransfer'
p44427
sa(dp44428
S'description'
p44429
g3
sS'subblocks'
p44430
NsS'parameters'
p44431
(lp44432
(dp44433
S'description'
p44434
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44435
sS'cpp_type'
p44436
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44437
sS'default'
p44438
g3
sS'name'
p44439
S'control_tags'
p44440
sS'required'
p44441
I00
sS'group_name'
p44442
S'Advanced'
p44443
sa(dp44444
S'name'
p44445
S'direction'
p44446
sS'cpp_type'
p44447
S'MooseEnum'
p44448
sS'default'
p44449
g3
sS'description'
p44450
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p44451
sS'required'
p44452
I01
sS'options'
p44453
S'to_multiapp from_multiapp'
p44454
sS'group_name'
p44455
Nsa(dp44456
S'description'
p44457
S'Whether or not to use the displaced mesh for the source mesh.\n'
p44458
sS'cpp_type'
p44459
S'bool'
p44460
sS'default'
p44461
S'0'
p44462
sS'name'
p44463
S'displaced_source_mesh'
p44464
sS'required'
p44465
I00
sS'group_name'
p44466
Nsa(dp44467
S'description'
p44468
S'Whether or not to use the displaced mesh for the target mesh.\n'
p44469
sS'cpp_type'
p44470
S'bool'
p44471
sS'default'
p44472
S'0'
p44473
sS'name'
p44474
S'displaced_target_mesh'
p44475
sS'required'
p44476
I00
sS'group_name'
p44477
Nsa(dp44478
S'description'
p44479
S'Set the enabled status of the MooseObject.\n'
p44480
sS'cpp_type'
p44481
S'bool'
p44482
sS'default'
p44483
S'1'
p44484
sS'name'
p44485
S'enable'
p44486
sS'required'
p44487
I00
sS'group_name'
p44488
S'Advanced'
p44489
sa(dp44490
S'name'
p44491
S'execute_on'
p44492
sS'cpp_type'
p44493
S'MultiMooseEnum'
p44494
sS'default'
p44495
S'SAME_AS_MULTIAPP'
p44496
sS'description'
p44497
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44498
sS'required'
p44499
I00
sS'options'
p44500
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p44501
sS'group_name'
p44502
Nsa(dp44503
S'description'
p44504
S'The name of the MultiApp to use.\n'
p44505
sS'cpp_type'
p44506
S'MultiAppName'
p44507
sS'default'
p44508
g3
sS'name'
p44509
S'multi_app'
p44510
sS'required'
p44511
I01
sS'group_name'
p44512
Nsa(dp44513
S'description'
p44514
S'The name of the postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n'
p44515
sS'cpp_type'
p44516
S'PostprocessorName'
p44517
sS'default'
p44518
g3
sS'name'
p44519
S'postprocessor'
p44520
sS'required'
p44521
I01
sS'group_name'
p44522
Nsa(dp44523
S'description'
p44524
S'The variable to transfer from.\n'
p44525
sS'cpp_type'
p44526
S'VariableName'
p44527
sS'default'
p44528
g3
sS'name'
p44529
S'source_variable'
p44530
sS'required'
p44531
I01
sS'group_name'
p44532
Nsa(dp44533
S'description'
p44534
g3
sS'cpp_type'
p44535
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44536
sS'default'
p44537
S'MultiAppVariableValueSamplePostprocessorTransfer'
p44538
sS'name'
p44539
S'type'
p44540
sS'required'
p44541
I00
sS'group_name'
p44542
Nsa(dp44543
S'description'
p44544
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44545
sS'cpp_type'
p44546
S'bool'
p44547
sS'default'
p44548
S'0'
p44549
sS'name'
p44550
S'use_displaced_mesh'
p44551
sS'required'
p44552
I00
sS'group_name'
p44553
S'Advanced'
p44554
sasS'name'
p44555
S'/Transfers/MultiAppVariableValueSamplePostprocessorTransfer'
p44556
sa(dp44557
S'description'
p44558
g3
sS'subblocks'
p44559
NsS'parameters'
p44560
(lp44561
(dp44562
S'description'
p44563
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44564
sS'cpp_type'
p44565
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44566
sS'default'
p44567
g3
sS'name'
p44568
S'control_tags'
p44569
sS'required'
p44570
I00
sS'group_name'
p44571
S'Advanced'
p44572
sa(dp44573
S'name'
p44574
S'direction'
p44575
sS'cpp_type'
p44576
S'MooseEnum'
p44577
sS'default'
p44578
g3
sS'description'
p44579
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p44580
sS'required'
p44581
I01
sS'options'
p44582
S'to_multiapp from_multiapp'
p44583
sS'group_name'
p44584
Nsa(dp44585
S'description'
p44586
S'Whether or not to use the displaced mesh for the source mesh.\n'
p44587
sS'cpp_type'
p44588
S'bool'
p44589
sS'default'
p44590
S'0'
p44591
sS'name'
p44592
S'displaced_source_mesh'
p44593
sS'required'
p44594
I00
sS'group_name'
p44595
Nsa(dp44596
S'description'
p44597
S'Whether or not to use the displaced mesh for the target mesh.\n'
p44598
sS'cpp_type'
p44599
S'bool'
p44600
sS'default'
p44601
S'0'
p44602
sS'name'
p44603
S'displaced_target_mesh'
p44604
sS'required'
p44605
I00
sS'group_name'
p44606
Nsa(dp44607
S'description'
p44608
S'Set the enabled status of the MooseObject.\n'
p44609
sS'cpp_type'
p44610
S'bool'
p44611
sS'default'
p44612
S'1'
p44613
sS'name'
p44614
S'enable'
p44615
sS'required'
p44616
I00
sS'group_name'
p44617
S'Advanced'
p44618
sa(dp44619
S'name'
p44620
S'execute_on'
p44621
sS'cpp_type'
p44622
S'MultiMooseEnum'
p44623
sS'default'
p44624
S'SAME_AS_MULTIAPP'
p44625
sS'description'
p44626
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44627
sS'required'
p44628
I00
sS'options'
p44629
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p44630
sS'group_name'
p44631
Nsa(dp44632
S'description'
p44633
S'The name of the MultiApp to use.\n'
p44634
sS'cpp_type'
p44635
S'MultiAppName'
p44636
sS'default'
p44637
g3
sS'name'
p44638
S'multi_app'
p44639
sS'required'
p44640
I01
sS'group_name'
p44641
Nsa(dp44642
S'description'
p44643
S'The variable to transfer from.\n'
p44644
sS'cpp_type'
p44645
S'VariableName'
p44646
sS'default'
p44647
g3
sS'name'
p44648
S'source_variable'
p44649
sS'required'
p44650
I01
sS'group_name'
p44651
Nsa(dp44652
S'description'
p44653
g3
sS'cpp_type'
p44654
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44655
sS'default'
p44656
S'MultiAppVariableValueSampleTransfer'
p44657
sS'name'
p44658
S'type'
p44659
sS'required'
p44660
I00
sS'group_name'
p44661
Nsa(dp44662
S'description'
p44663
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44664
sS'cpp_type'
p44665
S'bool'
p44666
sS'default'
p44667
S'0'
p44668
sS'name'
p44669
S'use_displaced_mesh'
p44670
sS'required'
p44671
I00
sS'group_name'
p44672
S'Advanced'
p44673
sa(dp44674
S'description'
p44675
S'The auxiliary variable to store the transferred values in.\n'
p44676
sS'cpp_type'
p44677
S'AuxVariableName'
p44678
sS'default'
p44679
g3
sS'name'
p44680
S'variable'
p44681
sS'required'
p44682
I01
sS'group_name'
p44683
NsasS'name'
p44684
S'/Transfers/MultiAppVariableValueSampleTransfer'
p44685
sasS'parameters'
p44686
NsS'name'
p44687
S'/Transfers'
p44688
sa(dp44689
S'description'
p44690
g3
sS'subblocks'
p44691
(lp44692
(dp44693
S'description'
p44694
g3
sS'subblocks'
p44695
NsS'parameters'
p44696
(lp44697
(dp44698
S'description'
p44699
S'A string representing the Moose Object that will be built by this Action\n'
p44700
sS'cpp_type'
p44701
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44702
sS'default'
p44703
g3
sS'name'
p44704
S'type'
p44705
sS'required'
p44706
I01
sS'group_name'
p44707
NsasS'name'
p44708
S'/UserObjects/*'
p44709
sa(dp44710
S'description'
p44711
g3
sS'subblocks'
p44712
NsS'parameters'
p44713
(lp44714
(dp44715
S'description'
p44716
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p44717
sS'cpp_type'
p44718
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p44719
sS'default'
p44720
g3
sS'name'
p44721
S'boundary'
p44722
sS'required'
p44723
I01
sS'group_name'
p44724
Nsa(dp44725
S'description'
p44726
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44727
sS'cpp_type'
p44728
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44729
sS'default'
p44730
g3
sS'name'
p44731
S'control_tags'
p44732
sS'required'
p44733
I00
sS'group_name'
p44734
S'Advanced'
p44735
sa(dp44736
S'description'
p44737
S'Set the enabled status of the MooseObject.\n'
p44738
sS'cpp_type'
p44739
S'bool'
p44740
sS'default'
p44741
S'1'
p44742
sS'name'
p44743
S'enable'
p44744
sS'required'
p44745
I00
sS'group_name'
p44746
S'Advanced'
p44747
sa(dp44748
S'name'
p44749
S'execute_on'
p44750
sS'cpp_type'
p44751
S'MultiMooseEnum'
p44752
sS'default'
p44753
S'TIMESTEP_END'
p44754
sS'description'
p44755
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44756
sS'required'
p44757
I00
sS'options'
p44758
S'none initial linear nonlinear timestep_end timestep_begin custom'
p44759
sS'group_name'
p44760
Nsa(dp44761
S'description'
p44762
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p44763
sS'cpp_type'
p44764
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p44765
sS'default'
p44766
g3
sS'name'
p44767
S'outputs'
p44768
sS'required'
p44769
I00
sS'group_name'
p44770
S'Advanced'
p44771
sa(dp44772
S'description'
p44773
g3
sS'cpp_type'
p44774
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44775
sS'default'
p44776
S'AreaPostprocessor'
p44777
sS'name'
p44778
S'type'
p44779
sS'required'
p44780
I00
sS'group_name'
p44781
Nsa(dp44782
S'description'
p44783
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44784
sS'cpp_type'
p44785
S'bool'
p44786
sS'default'
p44787
S'0'
p44788
sS'name'
p44789
S'use_displaced_mesh'
p44790
sS'required'
p44791
I00
sS'group_name'
p44792
S'Advanced'
p44793
sasS'name'
p44794
S'/UserObjects/AreaPostprocessor'
p44795
sa(dp44796
S'description'
p44797
g3
sS'subblocks'
p44798
NsS'parameters'
p44799
(lp44800
(dp44801
S'description'
p44802
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44803
sS'cpp_type'
p44804
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p44805
sS'default'
p44806
g3
sS'name'
p44807
S'block'
p44808
sS'required'
p44809
I00
sS'group_name'
p44810
Nsa(dp44811
S'description'
p44812
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44813
sS'cpp_type'
p44814
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44815
sS'default'
p44816
g3
sS'name'
p44817
S'control_tags'
p44818
sS'required'
p44819
I00
sS'group_name'
p44820
S'Advanced'
p44821
sa(dp44822
S'description'
p44823
S'Set the enabled status of the MooseObject.\n'
p44824
sS'cpp_type'
p44825
S'bool'
p44826
sS'default'
p44827
S'1'
p44828
sS'name'
p44829
S'enable'
p44830
sS'required'
p44831
I00
sS'group_name'
p44832
S'Advanced'
p44833
sa(dp44834
S'name'
p44835
S'execute_on'
p44836
sS'cpp_type'
p44837
S'MultiMooseEnum'
p44838
sS'default'
p44839
S'TIMESTEP_END'
p44840
sS'description'
p44841
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44842
sS'required'
p44843
I00
sS'options'
p44844
S'none initial linear nonlinear timestep_end timestep_begin custom'
p44845
sS'group_name'
p44846
Nsa(dp44847
S'description'
p44848
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p44849
sS'cpp_type'
p44850
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p44851
sS'default'
p44852
g3
sS'name'
p44853
S'outputs'
p44854
sS'required'
p44855
I00
sS'group_name'
p44856
S'Advanced'
p44857
sa(dp44858
S'description'
p44859
S'The seed for the master random number generator\n'
p44860
sS'cpp_type'
p44861
S'unsigned int'
p44862
sS'default'
p44863
S'0'
p44864
sS'name'
p44865
S'seed'
p44866
sS'required'
p44867
I00
sS'group_name'
p44868
S'Advanced'
p44869
sa(dp44870
S'description'
p44871
g3
sS'cpp_type'
p44872
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44873
sS'default'
p44874
S'AverageElementSize'
p44875
sS'name'
p44876
S'type'
p44877
sS'required'
p44878
I00
sS'group_name'
p44879
Nsa(dp44880
S'description'
p44881
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44882
sS'cpp_type'
p44883
S'bool'
p44884
sS'default'
p44885
S'0'
p44886
sS'name'
p44887
S'use_displaced_mesh'
p44888
sS'required'
p44889
I00
sS'group_name'
p44890
S'Advanced'
p44891
sa(dp44892
S'description'
p44893
S'The name of the variable that this object operates on\n'
p44894
sS'cpp_type'
p44895
S'std::vector<VariableName>'
p44896
sS'default'
p44897
g3
sS'name'
p44898
S'variable'
p44899
sS'required'
p44900
I01
sS'group_name'
p44901
NsasS'name'
p44902
S'/UserObjects/AverageElementSize'
p44903
sa(dp44904
S'description'
p44905
g3
sS'subblocks'
p44906
NsS'parameters'
p44907
(lp44908
(dp44909
S'description'
p44910
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44911
sS'cpp_type'
p44912
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p44913
sS'default'
p44914
g3
sS'name'
p44915
S'block'
p44916
sS'required'
p44917
I00
sS'group_name'
p44918
Nsa(dp44919
S'description'
p44920
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p44921
sS'cpp_type'
p44922
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p44923
sS'default'
p44924
g3
sS'name'
p44925
S'boundary'
p44926
sS'required'
p44927
I00
sS'group_name'
p44928
Nsa(dp44929
S'description'
p44930
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44931
sS'cpp_type'
p44932
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44933
sS'default'
p44934
g3
sS'name'
p44935
S'control_tags'
p44936
sS'required'
p44937
I00
sS'group_name'
p44938
S'Advanced'
p44939
sa(dp44940
S'description'
p44941
S'Set the enabled status of the MooseObject.\n'
p44942
sS'cpp_type'
p44943
S'bool'
p44944
sS'default'
p44945
S'1'
p44946
sS'name'
p44947
S'enable'
p44948
sS'required'
p44949
I00
sS'group_name'
p44950
S'Advanced'
p44951
sa(dp44952
S'name'
p44953
S'execute_on'
p44954
sS'cpp_type'
p44955
S'MultiMooseEnum'
p44956
sS'default'
p44957
S'TIMESTEP_END'
p44958
sS'description'
p44959
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44960
sS'required'
p44961
I00
sS'options'
p44962
S'none initial linear nonlinear timestep_end timestep_begin custom'
p44963
sS'group_name'
p44964
Nsa(dp44965
S'description'
p44966
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p44967
sS'cpp_type'
p44968
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p44969
sS'default'
p44970
g3
sS'name'
p44971
S'outputs'
p44972
sS'required'
p44973
I00
sS'group_name'
p44974
S'Advanced'
p44975
sa(dp44976
S'description'
p44977
S'The seed for the master random number generator\n'
p44978
sS'cpp_type'
p44979
S'unsigned int'
p44980
sS'default'
p44981
S'0'
p44982
sS'name'
p44983
S'seed'
p44984
sS'required'
p44985
I00
sS'group_name'
p44986
S'Advanced'
p44987
sa(dp44988
S'description'
p44989
g3
sS'cpp_type'
p44990
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44991
sS'default'
p44992
S'AverageNodalVariableValue'
p44993
sS'name'
p44994
S'type'
p44995
sS'required'
p44996
I00
sS'group_name'
p44997
Nsa(dp44998
S'description'
p44999
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p45000
sS'cpp_type'
p45001
S'bool'
p45002
sS'default'
p45003
S'0'
p45004
sS'name'
p45005
S'unique_node_execute'
p45006
sS'required'
p45007
I00
sS'group_name'
p45008
Nsa(dp45009
S'description'
p45010
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45011
sS'cpp_type'
p45012
S'bool'
p45013
sS'default'
p45014
S'0'
p45015
sS'name'
p45016
S'use_displaced_mesh'
p45017
sS'required'
p45018
I00
sS'group_name'
p45019
S'Advanced'
p45020
sa(dp45021
S'description'
p45022
S'The name of the variable that this postprocessor operates on\n'
p45023
sS'cpp_type'
p45024
S'std::vector<VariableName>'
p45025
sS'default'
p45026
g3
sS'name'
p45027
S'variable'
p45028
sS'required'
p45029
I01
sS'group_name'
p45030
NsasS'name'
p45031
S'/UserObjects/AverageNodalVariableValue'
p45032
sa(dp45033
S'description'
p45034
g3
sS'subblocks'
p45035
NsS'parameters'
p45036
(lp45037
(dp45038
S'description'
p45039
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p45040
sS'cpp_type'
p45041
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p45042
sS'default'
p45043
g3
sS'name'
p45044
S'boundary'
p45045
sS'required'
p45046
I01
sS'group_name'
p45047
Nsa(dp45048
S'description'
p45049
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45050
sS'cpp_type'
p45051
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45052
sS'default'
p45053
g3
sS'name'
p45054
S'control_tags'
p45055
sS'required'
p45056
I00
sS'group_name'
p45057
S'Advanced'
p45058
sa(dp45059
S'description'
p45060
S'Set the enabled status of the MooseObject.\n'
p45061
sS'cpp_type'
p45062
S'bool'
p45063
sS'default'
p45064
S'1'
p45065
sS'name'
p45066
S'enable'
p45067
sS'required'
p45068
I00
sS'group_name'
p45069
S'Advanced'
p45070
sa(dp45071
S'name'
p45072
S'execute_on'
p45073
sS'cpp_type'
p45074
S'MultiMooseEnum'
p45075
sS'default'
p45076
S'TIMESTEP_END'
p45077
sS'description'
p45078
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45079
sS'required'
p45080
I00
sS'options'
p45081
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45082
sS'group_name'
p45083
Nsa(dp45084
S'description'
p45085
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45086
sS'cpp_type'
p45087
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45088
sS'default'
p45089
g3
sS'name'
p45090
S'outputs'
p45091
sS'required'
p45092
I00
sS'group_name'
p45093
S'Advanced'
p45094
sa(dp45095
S'description'
p45096
g3
sS'cpp_type'
p45097
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45098
sS'default'
p45099
S'AxisymmetricCenterlineAverageValue'
p45100
sS'name'
p45101
S'type'
p45102
sS'required'
p45103
I00
sS'group_name'
p45104
Nsa(dp45105
S'description'
p45106
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45107
sS'cpp_type'
p45108
S'bool'
p45109
sS'default'
p45110
S'0'
p45111
sS'name'
p45112
S'use_displaced_mesh'
p45113
sS'required'
p45114
I00
sS'group_name'
p45115
S'Advanced'
p45116
sa(dp45117
S'description'
p45118
S'The name of the variable that this boundary condition applies to\n'
p45119
sS'cpp_type'
p45120
S'std::vector<VariableName>'
p45121
sS'default'
p45122
g3
sS'name'
p45123
S'variable'
p45124
sS'required'
p45125
I01
sS'group_name'
p45126
NsasS'name'
p45127
S'/UserObjects/AxisymmetricCenterlineAverageValue'
p45128
sa(dp45129
S'description'
p45130
g3
sS'subblocks'
p45131
NsS'parameters'
p45132
(lp45133
(dp45134
S'description'
p45135
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45136
sS'cpp_type'
p45137
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45138
sS'default'
p45139
g3
sS'name'
p45140
S'control_tags'
p45141
sS'required'
p45142
I00
sS'group_name'
p45143
S'Advanced'
p45144
sa(dp45145
S'description'
p45146
S'Set the enabled status of the MooseObject.\n'
p45147
sS'cpp_type'
p45148
S'bool'
p45149
sS'default'
p45150
S'1'
p45151
sS'name'
p45152
S'enable'
p45153
sS'required'
p45154
I00
sS'group_name'
p45155
S'Advanced'
p45156
sa(dp45157
S'name'
p45158
S'execute_on'
p45159
sS'cpp_type'
p45160
S'MultiMooseEnum'
p45161
sS'default'
p45162
S'TIMESTEP_END'
p45163
sS'description'
p45164
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45165
sS'required'
p45166
I00
sS'options'
p45167
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45168
sS'group_name'
p45169
Nsa(dp45170
S'description'
p45171
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45172
sS'cpp_type'
p45173
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45174
sS'default'
p45175
g3
sS'name'
p45176
S'outputs'
p45177
sS'required'
p45178
I00
sS'group_name'
p45179
S'Advanced'
p45180
sa(dp45181
S'description'
p45182
S'The name of the postprocessor\n'
p45183
sS'cpp_type'
p45184
S'PostprocessorName'
p45185
sS'default'
p45186
g3
sS'name'
p45187
S'postprocessor'
p45188
sS'required'
p45189
I01
sS'group_name'
p45190
Nsa(dp45191
S'description'
p45192
g3
sS'cpp_type'
p45193
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45194
sS'default'
p45195
S'CumulativeValuePostprocessor'
p45196
sS'name'
p45197
S'type'
p45198
sS'required'
p45199
I00
sS'group_name'
p45200
Nsa(dp45201
S'description'
p45202
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45203
sS'cpp_type'
p45204
S'bool'
p45205
sS'default'
p45206
S'0'
p45207
sS'name'
p45208
S'use_displaced_mesh'
p45209
sS'required'
p45210
I00
sS'group_name'
p45211
S'Advanced'
p45212
sasS'name'
p45213
S'/UserObjects/CumulativeValuePostprocessor'
p45214
sa(dp45215
S'description'
p45216
g3
sS'subblocks'
p45217
NsS'parameters'
p45218
(lp45219
(dp45220
S'description'
p45221
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45222
sS'cpp_type'
p45223
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45224
sS'default'
p45225
g3
sS'name'
p45226
S'control_tags'
p45227
sS'required'
p45228
I00
sS'group_name'
p45229
S'Advanced'
p45230
sa(dp45231
S'description'
p45232
S'Set the enabled status of the MooseObject.\n'
p45233
sS'cpp_type'
p45234
S'bool'
p45235
sS'default'
p45236
S'1'
p45237
sS'name'
p45238
S'enable'
p45239
sS'required'
p45240
I00
sS'group_name'
p45241
S'Advanced'
p45242
sa(dp45243
S'name'
p45244
S'execute_on'
p45245
sS'cpp_type'
p45246
S'MultiMooseEnum'
p45247
sS'default'
p45248
S'TIMESTEP_END'
p45249
sS'description'
p45250
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45251
sS'required'
p45252
I00
sS'options'
p45253
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45254
sS'group_name'
p45255
Nsa(dp45256
S'description'
p45257
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45258
sS'cpp_type'
p45259
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45260
sS'default'
p45261
g3
sS'name'
p45262
S'outputs'
p45263
sS'required'
p45264
I00
sS'group_name'
p45265
S'Advanced'
p45266
sa(dp45267
S'description'
p45268
g3
sS'cpp_type'
p45269
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45270
sS'default'
p45271
S'DifferencePostprocessor'
p45272
sS'name'
p45273
S'type'
p45274
sS'required'
p45275
I00
sS'group_name'
p45276
Nsa(dp45277
S'description'
p45278
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45279
sS'cpp_type'
p45280
S'bool'
p45281
sS'default'
p45282
S'0'
p45283
sS'name'
p45284
S'use_displaced_mesh'
p45285
sS'required'
p45286
I00
sS'group_name'
p45287
S'Advanced'
p45288
sa(dp45289
S'description'
p45290
S'First value\n'
p45291
sS'cpp_type'
p45292
S'PostprocessorName'
p45293
sS'default'
p45294
g3
sS'name'
p45295
S'value1'
p45296
sS'required'
p45297
I01
sS'group_name'
p45298
Nsa(dp45299
S'description'
p45300
S'Second value\n'
p45301
sS'cpp_type'
p45302
S'PostprocessorName'
p45303
sS'default'
p45304
g3
sS'name'
p45305
S'value2'
p45306
sS'required'
p45307
I01
sS'group_name'
p45308
NsasS'name'
p45309
S'/UserObjects/DifferencePostprocessor'
p45310
sa(dp45311
S'description'
p45312
g3
sS'subblocks'
p45313
NsS'parameters'
p45314
(lp45315
(dp45316
S'description'
p45317
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45318
sS'cpp_type'
p45319
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45320
sS'default'
p45321
g3
sS'name'
p45322
S'block'
p45323
sS'required'
p45324
I00
sS'group_name'
p45325
Nsa(dp45326
S'description'
p45327
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45328
sS'cpp_type'
p45329
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45330
sS'default'
p45331
g3
sS'name'
p45332
S'control_tags'
p45333
sS'required'
p45334
I00
sS'group_name'
p45335
S'Advanced'
p45336
sa(dp45337
S'description'
p45338
S'Set the enabled status of the MooseObject.\n'
p45339
sS'cpp_type'
p45340
S'bool'
p45341
sS'default'
p45342
S'1'
p45343
sS'name'
p45344
S'enable'
p45345
sS'required'
p45346
I00
sS'group_name'
p45347
S'Advanced'
p45348
sa(dp45349
S'name'
p45350
S'execute_on'
p45351
sS'cpp_type'
p45352
S'MultiMooseEnum'
p45353
sS'default'
p45354
S'TIMESTEP_END'
p45355
sS'description'
p45356
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45357
sS'required'
p45358
I00
sS'options'
p45359
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45360
sS'group_name'
p45361
Nsa(dp45362
S'description'
p45363
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45364
sS'cpp_type'
p45365
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45366
sS'default'
p45367
g3
sS'name'
p45368
S'outputs'
p45369
sS'required'
p45370
I00
sS'group_name'
p45371
S'Advanced'
p45372
sa(dp45373
S'description'
p45374
S'The seed for the master random number generator\n'
p45375
sS'cpp_type'
p45376
S'unsigned int'
p45377
sS'default'
p45378
S'0'
p45379
sS'name'
p45380
S'seed'
p45381
sS'required'
p45382
I00
sS'group_name'
p45383
S'Advanced'
p45384
sa(dp45385
S'description'
p45386
g3
sS'cpp_type'
p45387
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45388
sS'default'
p45389
S'ElementAverageTimeDerivative'
p45390
sS'name'
p45391
S'type'
p45392
sS'required'
p45393
I00
sS'group_name'
p45394
Nsa(dp45395
S'description'
p45396
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45397
sS'cpp_type'
p45398
S'bool'
p45399
sS'default'
p45400
S'0'
p45401
sS'name'
p45402
S'use_displaced_mesh'
p45403
sS'required'
p45404
I00
sS'group_name'
p45405
S'Advanced'
p45406
sa(dp45407
S'description'
p45408
S'The name of the variable that this object operates on\n'
p45409
sS'cpp_type'
p45410
S'std::vector<VariableName>'
p45411
sS'default'
p45412
g3
sS'name'
p45413
S'variable'
p45414
sS'required'
p45415
I01
sS'group_name'
p45416
NsasS'name'
p45417
S'/UserObjects/ElementAverageTimeDerivative'
p45418
sa(dp45419
S'description'
p45420
g3
sS'subblocks'
p45421
NsS'parameters'
p45422
(lp45423
(dp45424
S'description'
p45425
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45426
sS'cpp_type'
p45427
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45428
sS'default'
p45429
g3
sS'name'
p45430
S'block'
p45431
sS'required'
p45432
I00
sS'group_name'
p45433
Nsa(dp45434
S'description'
p45435
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45436
sS'cpp_type'
p45437
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45438
sS'default'
p45439
g3
sS'name'
p45440
S'control_tags'
p45441
sS'required'
p45442
I00
sS'group_name'
p45443
S'Advanced'
p45444
sa(dp45445
S'description'
p45446
S'Set the enabled status of the MooseObject.\n'
p45447
sS'cpp_type'
p45448
S'bool'
p45449
sS'default'
p45450
S'1'
p45451
sS'name'
p45452
S'enable'
p45453
sS'required'
p45454
I00
sS'group_name'
p45455
S'Advanced'
p45456
sa(dp45457
S'name'
p45458
S'execute_on'
p45459
sS'cpp_type'
p45460
S'MultiMooseEnum'
p45461
sS'default'
p45462
S'TIMESTEP_END'
p45463
sS'description'
p45464
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45465
sS'required'
p45466
I00
sS'options'
p45467
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45468
sS'group_name'
p45469
Nsa(dp45470
S'description'
p45471
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45472
sS'cpp_type'
p45473
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45474
sS'default'
p45475
g3
sS'name'
p45476
S'outputs'
p45477
sS'required'
p45478
I00
sS'group_name'
p45479
S'Advanced'
p45480
sa(dp45481
S'description'
p45482
S'The seed for the master random number generator\n'
p45483
sS'cpp_type'
p45484
S'unsigned int'
p45485
sS'default'
p45486
S'0'
p45487
sS'name'
p45488
S'seed'
p45489
sS'required'
p45490
I00
sS'group_name'
p45491
S'Advanced'
p45492
sa(dp45493
S'description'
p45494
g3
sS'cpp_type'
p45495
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45496
sS'default'
p45497
S'ElementAverageValue'
p45498
sS'name'
p45499
S'type'
p45500
sS'required'
p45501
I00
sS'group_name'
p45502
Nsa(dp45503
S'description'
p45504
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45505
sS'cpp_type'
p45506
S'bool'
p45507
sS'default'
p45508
S'0'
p45509
sS'name'
p45510
S'use_displaced_mesh'
p45511
sS'required'
p45512
I00
sS'group_name'
p45513
S'Advanced'
p45514
sa(dp45515
S'description'
p45516
S'The name of the variable that this object operates on\n'
p45517
sS'cpp_type'
p45518
S'std::vector<VariableName>'
p45519
sS'default'
p45520
g3
sS'name'
p45521
S'variable'
p45522
sS'required'
p45523
I01
sS'group_name'
p45524
NsasS'name'
p45525
S'/UserObjects/ElementAverageValue'
p45526
sa(dp45527
S'description'
p45528
g3
sS'subblocks'
p45529
NsS'parameters'
p45530
(lp45531
(dp45532
S'description'
p45533
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45534
sS'cpp_type'
p45535
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45536
sS'default'
p45537
g3
sS'name'
p45538
S'block'
p45539
sS'required'
p45540
I00
sS'group_name'
p45541
Nsa(dp45542
S'description'
p45543
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45544
sS'cpp_type'
p45545
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45546
sS'default'
p45547
g3
sS'name'
p45548
S'control_tags'
p45549
sS'required'
p45550
I00
sS'group_name'
p45551
S'Advanced'
p45552
sa(dp45553
S'description'
p45554
S'Set the enabled status of the MooseObject.\n'
p45555
sS'cpp_type'
p45556
S'bool'
p45557
sS'default'
p45558
S'1'
p45559
sS'name'
p45560
S'enable'
p45561
sS'required'
p45562
I00
sS'group_name'
p45563
S'Advanced'
p45564
sa(dp45565
S'name'
p45566
S'execute_on'
p45567
sS'cpp_type'
p45568
S'MultiMooseEnum'
p45569
sS'default'
p45570
S'TIMESTEP_END'
p45571
sS'description'
p45572
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45573
sS'required'
p45574
I00
sS'options'
p45575
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45576
sS'group_name'
p45577
Nsa(dp45578
S'description'
p45579
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45580
sS'cpp_type'
p45581
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45582
sS'default'
p45583
g3
sS'name'
p45584
S'outputs'
p45585
sS'required'
p45586
I00
sS'group_name'
p45587
S'Advanced'
p45588
sa(dp45589
S'description'
p45590
S'The seed for the master random number generator\n'
p45591
sS'cpp_type'
p45592
S'unsigned int'
p45593
sS'default'
p45594
S'0'
p45595
sS'name'
p45596
S'seed'
p45597
sS'required'
p45598
I00
sS'group_name'
p45599
S'Advanced'
p45600
sa(dp45601
S'description'
p45602
g3
sS'cpp_type'
p45603
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45604
sS'default'
p45605
S'ElementExtremeValue'
p45606
sS'name'
p45607
S'type'
p45608
sS'required'
p45609
I00
sS'group_name'
p45610
Nsa(dp45611
S'description'
p45612
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45613
sS'cpp_type'
p45614
S'bool'
p45615
sS'default'
p45616
S'0'
p45617
sS'name'
p45618
S'use_displaced_mesh'
p45619
sS'required'
p45620
I00
sS'group_name'
p45621
S'Advanced'
p45622
sa(dp45623
S'name'
p45624
S'value_type'
p45625
sS'cpp_type'
p45626
S'MooseEnum'
p45627
sS'default'
p45628
S'max'
p45629
sS'description'
p45630
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p45631
sS'required'
p45632
I00
sS'options'
p45633
S'max min'
p45634
sS'group_name'
p45635
Nsa(dp45636
S'description'
p45637
S'The name of the variable that this postprocessor operates on\n'
p45638
sS'cpp_type'
p45639
S'std::vector<VariableName>'
p45640
sS'default'
p45641
g3
sS'name'
p45642
S'variable'
p45643
sS'required'
p45644
I01
sS'group_name'
p45645
NsasS'name'
p45646
S'/UserObjects/ElementExtremeValue'
p45647
sa(dp45648
S'description'
p45649
g3
sS'subblocks'
p45650
NsS'parameters'
p45651
(lp45652
(dp45653
S'description'
p45654
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45655
sS'cpp_type'
p45656
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45657
sS'default'
p45658
g3
sS'name'
p45659
S'block'
p45660
sS'required'
p45661
I00
sS'group_name'
p45662
Nsa(dp45663
S'description'
p45664
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45665
sS'cpp_type'
p45666
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45667
sS'default'
p45668
g3
sS'name'
p45669
S'control_tags'
p45670
sS'required'
p45671
I00
sS'group_name'
p45672
S'Advanced'
p45673
sa(dp45674
S'description'
p45675
S'Set the enabled status of the MooseObject.\n'
p45676
sS'cpp_type'
p45677
S'bool'
p45678
sS'default'
p45679
S'1'
p45680
sS'name'
p45681
S'enable'
p45682
sS'required'
p45683
I00
sS'group_name'
p45684
S'Advanced'
p45685
sa(dp45686
S'name'
p45687
S'execute_on'
p45688
sS'cpp_type'
p45689
S'MultiMooseEnum'
p45690
sS'default'
p45691
S'TIMESTEP_END'
p45692
sS'description'
p45693
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45694
sS'required'
p45695
I00
sS'options'
p45696
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45697
sS'group_name'
p45698
Nsa(dp45699
S'description'
p45700
S'The analytic solution to compare against\n'
p45701
sS'cpp_type'
p45702
S'FunctionName'
p45703
sS'default'
p45704
g3
sS'name'
p45705
S'function'
p45706
sS'required'
p45707
I01
sS'group_name'
p45708
Nsa(dp45709
S'description'
p45710
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45711
sS'cpp_type'
p45712
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45713
sS'default'
p45714
g3
sS'name'
p45715
S'outputs'
p45716
sS'required'
p45717
I00
sS'group_name'
p45718
S'Advanced'
p45719
sa(dp45720
S'description'
p45721
S'The exponent used in the norm.\n'
p45722
sS'cpp_type'
p45723
S'double'
p45724
sS'default'
p45725
S'2'
p45726
sS'name'
p45727
S'p'
p45728
sS'required'
p45729
I00
sS'group_name'
p45730
Nsa(dp45731
S'description'
p45732
S'The seed for the master random number generator\n'
p45733
sS'cpp_type'
p45734
S'unsigned int'
p45735
sS'default'
p45736
S'0'
p45737
sS'name'
p45738
S'seed'
p45739
sS'required'
p45740
I00
sS'group_name'
p45741
S'Advanced'
p45742
sa(dp45743
S'description'
p45744
g3
sS'cpp_type'
p45745
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45746
sS'default'
p45747
S'ElementH1Error'
p45748
sS'name'
p45749
S'type'
p45750
sS'required'
p45751
I00
sS'group_name'
p45752
Nsa(dp45753
S'description'
p45754
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45755
sS'cpp_type'
p45756
S'bool'
p45757
sS'default'
p45758
S'0'
p45759
sS'name'
p45760
S'use_displaced_mesh'
p45761
sS'required'
p45762
I00
sS'group_name'
p45763
S'Advanced'
p45764
sa(dp45765
S'description'
p45766
S'The name of the variable that this object operates on\n'
p45767
sS'cpp_type'
p45768
S'std::vector<VariableName>'
p45769
sS'default'
p45770
g3
sS'name'
p45771
S'variable'
p45772
sS'required'
p45773
I01
sS'group_name'
p45774
NsasS'name'
p45775
S'/UserObjects/ElementH1Error'
p45776
sa(dp45777
S'description'
p45778
g3
sS'subblocks'
p45779
NsS'parameters'
p45780
(lp45781
(dp45782
S'description'
p45783
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45784
sS'cpp_type'
p45785
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45786
sS'default'
p45787
g3
sS'name'
p45788
S'block'
p45789
sS'required'
p45790
I00
sS'group_name'
p45791
Nsa(dp45792
S'description'
p45793
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45794
sS'cpp_type'
p45795
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45796
sS'default'
p45797
g3
sS'name'
p45798
S'control_tags'
p45799
sS'required'
p45800
I00
sS'group_name'
p45801
S'Advanced'
p45802
sa(dp45803
S'description'
p45804
S'Set the enabled status of the MooseObject.\n'
p45805
sS'cpp_type'
p45806
S'bool'
p45807
sS'default'
p45808
S'1'
p45809
sS'name'
p45810
S'enable'
p45811
sS'required'
p45812
I00
sS'group_name'
p45813
S'Advanced'
p45814
sa(dp45815
S'name'
p45816
S'execute_on'
p45817
sS'cpp_type'
p45818
S'MultiMooseEnum'
p45819
sS'default'
p45820
S'TIMESTEP_END'
p45821
sS'description'
p45822
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45823
sS'required'
p45824
I00
sS'options'
p45825
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45826
sS'group_name'
p45827
Nsa(dp45828
S'description'
p45829
S'The analytic solution to compare against\n'
p45830
sS'cpp_type'
p45831
S'FunctionName'
p45832
sS'default'
p45833
g3
sS'name'
p45834
S'function'
p45835
sS'required'
p45836
I01
sS'group_name'
p45837
Nsa(dp45838
S'description'
p45839
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45840
sS'cpp_type'
p45841
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45842
sS'default'
p45843
g3
sS'name'
p45844
S'outputs'
p45845
sS'required'
p45846
I00
sS'group_name'
p45847
S'Advanced'
p45848
sa(dp45849
S'description'
p45850
S'The seed for the master random number generator\n'
p45851
sS'cpp_type'
p45852
S'unsigned int'
p45853
sS'default'
p45854
S'0'
p45855
sS'name'
p45856
S'seed'
p45857
sS'required'
p45858
I00
sS'group_name'
p45859
S'Advanced'
p45860
sa(dp45861
S'description'
p45862
g3
sS'cpp_type'
p45863
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45864
sS'default'
p45865
S'ElementH1SemiError'
p45866
sS'name'
p45867
S'type'
p45868
sS'required'
p45869
I00
sS'group_name'
p45870
Nsa(dp45871
S'description'
p45872
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45873
sS'cpp_type'
p45874
S'bool'
p45875
sS'default'
p45876
S'0'
p45877
sS'name'
p45878
S'use_displaced_mesh'
p45879
sS'required'
p45880
I00
sS'group_name'
p45881
S'Advanced'
p45882
sa(dp45883
S'description'
p45884
S'The name of the variable that this object operates on\n'
p45885
sS'cpp_type'
p45886
S'std::vector<VariableName>'
p45887
sS'default'
p45888
g3
sS'name'
p45889
S'variable'
p45890
sS'required'
p45891
I01
sS'group_name'
p45892
NsasS'name'
p45893
S'/UserObjects/ElementH1SemiError'
p45894
sa(dp45895
S'description'
p45896
g3
sS'subblocks'
p45897
NsS'parameters'
p45898
(lp45899
(dp45900
S'description'
p45901
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45902
sS'cpp_type'
p45903
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45904
sS'default'
p45905
g3
sS'name'
p45906
S'block'
p45907
sS'required'
p45908
I00
sS'group_name'
p45909
Nsa(dp45910
S'description'
p45911
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45912
sS'cpp_type'
p45913
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45914
sS'default'
p45915
g3
sS'name'
p45916
S'control_tags'
p45917
sS'required'
p45918
I00
sS'group_name'
p45919
S'Advanced'
p45920
sa(dp45921
S'description'
p45922
S'Set the enabled status of the MooseObject.\n'
p45923
sS'cpp_type'
p45924
S'bool'
p45925
sS'default'
p45926
S'1'
p45927
sS'name'
p45928
S'enable'
p45929
sS'required'
p45930
I00
sS'group_name'
p45931
S'Advanced'
p45932
sa(dp45933
S'name'
p45934
S'execute_on'
p45935
sS'cpp_type'
p45936
S'MultiMooseEnum'
p45937
sS'default'
p45938
S'TIMESTEP_END'
p45939
sS'description'
p45940
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45941
sS'required'
p45942
I00
sS'options'
p45943
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45944
sS'group_name'
p45945
Nsa(dp45946
S'description'
p45947
S'The name of the material property\n'
p45948
sS'cpp_type'
p45949
S'MaterialPropertyName'
p45950
sS'default'
p45951
g3
sS'name'
p45952
S'mat_prop'
p45953
sS'required'
p45954
I01
sS'group_name'
p45955
Nsa(dp45956
S'description'
p45957
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45958
sS'cpp_type'
p45959
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45960
sS'default'
p45961
g3
sS'name'
p45962
S'outputs'
p45963
sS'required'
p45964
I00
sS'group_name'
p45965
S'Advanced'
p45966
sa(dp45967
S'description'
p45968
S'The seed for the master random number generator\n'
p45969
sS'cpp_type'
p45970
S'unsigned int'
p45971
sS'default'
p45972
S'0'
p45973
sS'name'
p45974
S'seed'
p45975
sS'required'
p45976
I00
sS'group_name'
p45977
S'Advanced'
p45978
sa(dp45979
S'description'
p45980
g3
sS'cpp_type'
p45981
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45982
sS'default'
p45983
S'ElementIntegralMaterialProperty'
p45984
sS'name'
p45985
S'type'
p45986
sS'required'
p45987
I00
sS'group_name'
p45988
Nsa(dp45989
S'description'
p45990
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45991
sS'cpp_type'
p45992
S'bool'
p45993
sS'default'
p45994
S'0'
p45995
sS'name'
p45996
S'use_displaced_mesh'
p45997
sS'required'
p45998
I00
sS'group_name'
p45999
S'Advanced'
p46000
sasS'name'
p46001
S'/UserObjects/ElementIntegralMaterialProperty'
p46002
sa(dp46003
S'description'
p46004
g3
sS'subblocks'
p46005
NsS'parameters'
p46006
(lp46007
(dp46008
S'description'
p46009
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46010
sS'cpp_type'
p46011
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p46012
sS'default'
p46013
g3
sS'name'
p46014
S'block'
p46015
sS'required'
p46016
I00
sS'group_name'
p46017
Nsa(dp46018
S'description'
p46019
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46020
sS'cpp_type'
p46021
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46022
sS'default'
p46023
g3
sS'name'
p46024
S'control_tags'
p46025
sS'required'
p46026
I00
sS'group_name'
p46027
S'Advanced'
p46028
sa(dp46029
S'description'
p46030
S'Set the enabled status of the MooseObject.\n'
p46031
sS'cpp_type'
p46032
S'bool'
p46033
sS'default'
p46034
S'1'
p46035
sS'name'
p46036
S'enable'
p46037
sS'required'
p46038
I00
sS'group_name'
p46039
S'Advanced'
p46040
sa(dp46041
S'name'
p46042
S'execute_on'
p46043
sS'cpp_type'
p46044
S'MultiMooseEnum'
p46045
sS'default'
p46046
S'TIMESTEP_END'
p46047
sS'description'
p46048
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46049
sS'required'
p46050
I00
sS'options'
p46051
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46052
sS'group_name'
p46053
Nsa(dp46054
S'description'
p46055
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46056
sS'cpp_type'
p46057
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46058
sS'default'
p46059
g3
sS'name'
p46060
S'outputs'
p46061
sS'required'
p46062
I00
sS'group_name'
p46063
S'Advanced'
p46064
sa(dp46065
S'description'
p46066
S'The seed for the master random number generator\n'
p46067
sS'cpp_type'
p46068
S'unsigned int'
p46069
sS'default'
p46070
S'0'
p46071
sS'name'
p46072
S'seed'
p46073
sS'required'
p46074
I00
sS'group_name'
p46075
S'Advanced'
p46076
sa(dp46077
S'description'
p46078
g3
sS'cpp_type'
p46079
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46080
sS'default'
p46081
S'ElementIntegralVariablePostprocessor'
p46082
sS'name'
p46083
S'type'
p46084
sS'required'
p46085
I00
sS'group_name'
p46086
Nsa(dp46087
S'description'
p46088
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46089
sS'cpp_type'
p46090
S'bool'
p46091
sS'default'
p46092
S'0'
p46093
sS'name'
p46094
S'use_displaced_mesh'
p46095
sS'required'
p46096
I00
sS'group_name'
p46097
S'Advanced'
p46098
sa(dp46099
S'description'
p46100
S'The name of the variable that this object operates on\n'
p46101
sS'cpp_type'
p46102
S'std::vector<VariableName>'
p46103
sS'default'
p46104
g3
sS'name'
p46105
S'variable'
p46106
sS'required'
p46107
I01
sS'group_name'
p46108
NsasS'name'
p46109
S'/UserObjects/ElementIntegralVariablePostprocessor'
p46110
sa(dp46111
S'description'
p46112
g3
sS'subblocks'
p46113
NsS'parameters'
p46114
(lp46115
(dp46116
S'description'
p46117
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46118
sS'cpp_type'
p46119
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p46120
sS'default'
p46121
g3
sS'name'
p46122
S'block'
p46123
sS'required'
p46124
I00
sS'group_name'
p46125
Nsa(dp46126
S'description'
p46127
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46128
sS'cpp_type'
p46129
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46130
sS'default'
p46131
g3
sS'name'
p46132
S'control_tags'
p46133
sS'required'
p46134
I00
sS'group_name'
p46135
S'Advanced'
p46136
sa(dp46137
S'description'
p46138
S'Set the enabled status of the MooseObject.\n'
p46139
sS'cpp_type'
p46140
S'bool'
p46141
sS'default'
p46142
S'1'
p46143
sS'name'
p46144
S'enable'
p46145
sS'required'
p46146
I00
sS'group_name'
p46147
S'Advanced'
p46148
sa(dp46149
S'name'
p46150
S'execute_on'
p46151
sS'cpp_type'
p46152
S'MultiMooseEnum'
p46153
sS'default'
p46154
S'TIMESTEP_END'
p46155
sS'description'
p46156
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46157
sS'required'
p46158
I00
sS'options'
p46159
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46160
sS'group_name'
p46161
Nsa(dp46162
S'description'
p46163
S'The seed for the master random number generator\n'
p46164
sS'cpp_type'
p46165
S'unsigned int'
p46166
sS'default'
p46167
S'0'
p46168
sS'name'
p46169
S'seed'
p46170
sS'required'
p46171
I00
sS'group_name'
p46172
S'Advanced'
p46173
sa(dp46174
S'description'
p46175
g3
sS'cpp_type'
p46176
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46177
sS'default'
p46178
S'ElementIntegralVariableUserObject'
p46179
sS'name'
p46180
S'type'
p46181
sS'required'
p46182
I00
sS'group_name'
p46183
Nsa(dp46184
S'description'
p46185
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46186
sS'cpp_type'
p46187
S'bool'
p46188
sS'default'
p46189
S'0'
p46190
sS'name'
p46191
S'use_displaced_mesh'
p46192
sS'required'
p46193
I00
sS'group_name'
p46194
S'Advanced'
p46195
sa(dp46196
S'description'
p46197
S'The name of the variable that this object operates on\n'
p46198
sS'cpp_type'
p46199
S'std::vector<VariableName>'
p46200
sS'default'
p46201
g3
sS'name'
p46202
S'variable'
p46203
sS'required'
p46204
I01
sS'group_name'
p46205
NsasS'name'
p46206
S'/UserObjects/ElementIntegralVariableUserObject'
p46207
sa(dp46208
S'description'
p46209
g3
sS'subblocks'
p46210
NsS'parameters'
p46211
(lp46212
(dp46213
S'description'
p46214
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46215
sS'cpp_type'
p46216
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p46217
sS'default'
p46218
g3
sS'name'
p46219
S'block'
p46220
sS'required'
p46221
I00
sS'group_name'
p46222
Nsa(dp46223
S'description'
p46224
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46225
sS'cpp_type'
p46226
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46227
sS'default'
p46228
g3
sS'name'
p46229
S'control_tags'
p46230
sS'required'
p46231
I00
sS'group_name'
p46232
S'Advanced'
p46233
sa(dp46234
S'description'
p46235
S'Set the enabled status of the MooseObject.\n'
p46236
sS'cpp_type'
p46237
S'bool'
p46238
sS'default'
p46239
S'1'
p46240
sS'name'
p46241
S'enable'
p46242
sS'required'
p46243
I00
sS'group_name'
p46244
S'Advanced'
p46245
sa(dp46246
S'name'
p46247
S'execute_on'
p46248
sS'cpp_type'
p46249
S'MultiMooseEnum'
p46250
sS'default'
p46251
S'TIMESTEP_END'
p46252
sS'description'
p46253
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46254
sS'required'
p46255
I00
sS'options'
p46256
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46257
sS'group_name'
p46258
Nsa(dp46259
S'description'
p46260
S'The variable to compare to\n'
p46261
sS'cpp_type'
p46262
S'std::vector<VariableName>'
p46263
sS'default'
p46264
g3
sS'name'
p46265
S'other_variable'
p46266
sS'required'
p46267
I01
sS'group_name'
p46268
Nsa(dp46269
S'description'
p46270
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46271
sS'cpp_type'
p46272
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46273
sS'default'
p46274
g3
sS'name'
p46275
S'outputs'
p46276
sS'required'
p46277
I00
sS'group_name'
p46278
S'Advanced'
p46279
sa(dp46280
S'description'
p46281
S'The seed for the master random number generator\n'
p46282
sS'cpp_type'
p46283
S'unsigned int'
p46284
sS'default'
p46285
S'0'
p46286
sS'name'
p46287
S'seed'
p46288
sS'required'
p46289
I00
sS'group_name'
p46290
S'Advanced'
p46291
sa(dp46292
S'description'
p46293
g3
sS'cpp_type'
p46294
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46295
sS'default'
p46296
S'ElementL2Difference'
p46297
sS'name'
p46298
S'type'
p46299
sS'required'
p46300
I00
sS'group_name'
p46301
Nsa(dp46302
S'description'
p46303
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46304
sS'cpp_type'
p46305
S'bool'
p46306
sS'default'
p46307
S'0'
p46308
sS'name'
p46309
S'use_displaced_mesh'
p46310
sS'required'
p46311
I00
sS'group_name'
p46312
S'Advanced'
p46313
sa(dp46314
S'description'
p46315
S'The name of the variable that this object operates on\n'
p46316
sS'cpp_type'
p46317
S'std::vector<VariableName>'
p46318
sS'default'
p46319
g3
sS'name'
p46320
S'variable'
p46321
sS'required'
p46322
I01
sS'group_name'
p46323
NsasS'name'
p46324
S'/UserObjects/ElementL2Difference'
p46325
sa(dp46326
S'description'
p46327
g3
sS'subblocks'
p46328
NsS'parameters'
p46329
(lp46330
(dp46331
S'description'
p46332
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46333
sS'cpp_type'
p46334
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p46335
sS'default'
p46336
g3
sS'name'
p46337
S'block'
p46338
sS'required'
p46339
I00
sS'group_name'
p46340
Nsa(dp46341
S'description'
p46342
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46343
sS'cpp_type'
p46344
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46345
sS'default'
p46346
g3
sS'name'
p46347
S'control_tags'
p46348
sS'required'
p46349
I00
sS'group_name'
p46350
S'Advanced'
p46351
sa(dp46352
S'description'
p46353
S'Set the enabled status of the MooseObject.\n'
p46354
sS'cpp_type'
p46355
S'bool'
p46356
sS'default'
p46357
S'1'
p46358
sS'name'
p46359
S'enable'
p46360
sS'required'
p46361
I00
sS'group_name'
p46362
S'Advanced'
p46363
sa(dp46364
S'name'
p46365
S'execute_on'
p46366
sS'cpp_type'
p46367
S'MultiMooseEnum'
p46368
sS'default'
p46369
S'TIMESTEP_END'
p46370
sS'description'
p46371
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46372
sS'required'
p46373
I00
sS'options'
p46374
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46375
sS'group_name'
p46376
Nsa(dp46377
S'description'
p46378
S'The analytic solution to compare against\n'
p46379
sS'cpp_type'
p46380
S'FunctionName'
p46381
sS'default'
p46382
g3
sS'name'
p46383
S'function'
p46384
sS'required'
p46385
I01
sS'group_name'
p46386
Nsa(dp46387
S'description'
p46388
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46389
sS'cpp_type'
p46390
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46391
sS'default'
p46392
g3
sS'name'
p46393
S'outputs'
p46394
sS'required'
p46395
I00
sS'group_name'
p46396
S'Advanced'
p46397
sa(dp46398
S'description'
p46399
S'The seed for the master random number generator\n'
p46400
sS'cpp_type'
p46401
S'unsigned int'
p46402
sS'default'
p46403
S'0'
p46404
sS'name'
p46405
S'seed'
p46406
sS'required'
p46407
I00
sS'group_name'
p46408
S'Advanced'
p46409
sa(dp46410
S'description'
p46411
g3
sS'cpp_type'
p46412
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46413
sS'default'
p46414
S'ElementL2Error'
p46415
sS'name'
p46416
S'type'
p46417
sS'required'
p46418
I00
sS'group_name'
p46419
Nsa(dp46420
S'description'
p46421
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46422
sS'cpp_type'
p46423
S'bool'
p46424
sS'default'
p46425
S'0'
p46426
sS'name'
p46427
S'use_displaced_mesh'
p46428
sS'required'
p46429
I00
sS'group_name'
p46430
S'Advanced'
p46431
sa(dp46432
S'description'
p46433
S'The name of the variable that this object operates on\n'
p46434
sS'cpp_type'
p46435
S'std::vector<VariableName>'
p46436
sS'default'
p46437
g3
sS'name'
p46438
S'variable'
p46439
sS'required'
p46440
I01
sS'group_name'
p46441
NsasS'name'
p46442
S'/UserObjects/ElementL2Error'
p46443
sa(dp46444
S'description'
p46445
g3
sS'subblocks'
p46446
NsS'parameters'
p46447
(lp46448
(dp46449
S'description'
p46450
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46451
sS'cpp_type'
p46452
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p46453
sS'default'
p46454
g3
sS'name'
p46455
S'block'
p46456
sS'required'
p46457
I00
sS'group_name'
p46458
Nsa(dp46459
S'description'
p46460
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46461
sS'cpp_type'
p46462
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46463
sS'default'
p46464
g3
sS'name'
p46465
S'control_tags'
p46466
sS'required'
p46467
I00
sS'group_name'
p46468
S'Advanced'
p46469
sa(dp46470
S'description'
p46471
S'Set the enabled status of the MooseObject.\n'
p46472
sS'cpp_type'
p46473
S'bool'
p46474
sS'default'
p46475
S'1'
p46476
sS'name'
p46477
S'enable'
p46478
sS'required'
p46479
I00
sS'group_name'
p46480
S'Advanced'
p46481
sa(dp46482
S'name'
p46483
S'execute_on'
p46484
sS'cpp_type'
p46485
S'MultiMooseEnum'
p46486
sS'default'
p46487
S'TIMESTEP_END'
p46488
sS'description'
p46489
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46490
sS'required'
p46491
I00
sS'options'
p46492
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46493
sS'group_name'
p46494
Nsa(dp46495
S'description'
p46496
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46497
sS'cpp_type'
p46498
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46499
sS'default'
p46500
g3
sS'name'
p46501
S'outputs'
p46502
sS'required'
p46503
I00
sS'group_name'
p46504
S'Advanced'
p46505
sa(dp46506
S'description'
p46507
S'The seed for the master random number generator\n'
p46508
sS'cpp_type'
p46509
S'unsigned int'
p46510
sS'default'
p46511
S'0'
p46512
sS'name'
p46513
S'seed'
p46514
sS'required'
p46515
I00
sS'group_name'
p46516
S'Advanced'
p46517
sa(dp46518
S'description'
p46519
g3
sS'cpp_type'
p46520
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46521
sS'default'
p46522
S'ElementL2Norm'
p46523
sS'name'
p46524
S'type'
p46525
sS'required'
p46526
I00
sS'group_name'
p46527
Nsa(dp46528
S'description'
p46529
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46530
sS'cpp_type'
p46531
S'bool'
p46532
sS'default'
p46533
S'0'
p46534
sS'name'
p46535
S'use_displaced_mesh'
p46536
sS'required'
p46537
I00
sS'group_name'
p46538
S'Advanced'
p46539
sa(dp46540
S'description'
p46541
S'The name of the variable that this object operates on\n'
p46542
sS'cpp_type'
p46543
S'std::vector<VariableName>'
p46544
sS'default'
p46545
g3
sS'name'
p46546
S'variable'
p46547
sS'required'
p46548
I01
sS'group_name'
p46549
NsasS'name'
p46550
S'/UserObjects/ElementL2Norm'
p46551
sa(dp46552
S'description'
p46553
g3
sS'subblocks'
p46554
NsS'parameters'
p46555
(lp46556
(dp46557
S'description'
p46558
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46559
sS'cpp_type'
p46560
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p46561
sS'default'
p46562
g3
sS'name'
p46563
S'block'
p46564
sS'required'
p46565
I00
sS'group_name'
p46566
Nsa(dp46567
S'description'
p46568
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46569
sS'cpp_type'
p46570
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46571
sS'default'
p46572
g3
sS'name'
p46573
S'control_tags'
p46574
sS'required'
p46575
I00
sS'group_name'
p46576
S'Advanced'
p46577
sa(dp46578
S'description'
p46579
S'Set the enabled status of the MooseObject.\n'
p46580
sS'cpp_type'
p46581
S'bool'
p46582
sS'default'
p46583
S'1'
p46584
sS'name'
p46585
S'enable'
p46586
sS'required'
p46587
I00
sS'group_name'
p46588
S'Advanced'
p46589
sa(dp46590
S'name'
p46591
S'execute_on'
p46592
sS'cpp_type'
p46593
S'MultiMooseEnum'
p46594
sS'default'
p46595
S'TIMESTEP_END'
p46596
sS'description'
p46597
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46598
sS'required'
p46599
I00
sS'options'
p46600
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46601
sS'group_name'
p46602
Nsa(dp46603
S'description'
p46604
S'The analytic solution to compare against\n'
p46605
sS'cpp_type'
p46606
S'FunctionName'
p46607
sS'default'
p46608
g3
sS'name'
p46609
S'function_x'
p46610
sS'required'
p46611
I01
sS'group_name'
p46612
Nsa(dp46613
S'description'
p46614
S'The analytic solution to compare against\n'
p46615
sS'cpp_type'
p46616
S'FunctionName'
p46617
sS'default'
p46618
S'0'
p46619
sS'name'
p46620
S'function_y'
p46621
sS'required'
p46622
I00
sS'group_name'
p46623
Nsa(dp46624
S'description'
p46625
S'The analytic solution to compare against\n'
p46626
sS'cpp_type'
p46627
S'FunctionName'
p46628
sS'default'
p46629
S'0'
p46630
sS'name'
p46631
S'function_z'
p46632
sS'required'
p46633
I00
sS'group_name'
p46634
Nsa(dp46635
S'description'
p46636
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46637
sS'cpp_type'
p46638
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46639
sS'default'
p46640
g3
sS'name'
p46641
S'outputs'
p46642
sS'required'
p46643
I00
sS'group_name'
p46644
S'Advanced'
p46645
sa(dp46646
S'description'
p46647
S'The seed for the master random number generator\n'
p46648
sS'cpp_type'
p46649
S'unsigned int'
p46650
sS'default'
p46651
S'0'
p46652
sS'name'
p46653
S'seed'
p46654
sS'required'
p46655
I00
sS'group_name'
p46656
S'Advanced'
p46657
sa(dp46658
S'description'
p46659
g3
sS'cpp_type'
p46660
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46661
sS'default'
p46662
S'ElementVectorL2Error'
p46663
sS'name'
p46664
S'type'
p46665
sS'required'
p46666
I00
sS'group_name'
p46667
Nsa(dp46668
S'description'
p46669
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46670
sS'cpp_type'
p46671
S'bool'
p46672
sS'default'
p46673
S'0'
p46674
sS'name'
p46675
S'use_displaced_mesh'
p46676
sS'required'
p46677
I00
sS'group_name'
p46678
S'Advanced'
p46679
sa(dp46680
S'description'
p46681
S'The FE solution in x direction\n'
p46682
sS'cpp_type'
p46683
S'std::vector<VariableName>'
p46684
sS'default'
p46685
g3
sS'name'
p46686
S'var_x'
p46687
sS'required'
p46688
I01
sS'group_name'
p46689
Nsa(dp46690
S'description'
p46691
S'The FE solution in y direction\n'
p46692
sS'cpp_type'
p46693
S'std::vector<VariableName>'
p46694
sS'default'
p46695
S'0'
p46696
sS'name'
p46697
S'var_y'
p46698
sS'required'
p46699
I00
sS'group_name'
p46700
Nsa(dp46701
S'description'
p46702
S'The FE solution in z direction\n'
p46703
sS'cpp_type'
p46704
S'std::vector<VariableName>'
p46705
sS'default'
p46706
S'0'
p46707
sS'name'
p46708
S'var_z'
p46709
sS'required'
p46710
I00
sS'group_name'
p46711
NsasS'name'
p46712
S'/UserObjects/ElementVectorL2Error'
p46713
sa(dp46714
S'description'
p46715
g3
sS'subblocks'
p46716
NsS'parameters'
p46717
(lp46718
(dp46719
S'description'
p46720
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46721
sS'cpp_type'
p46722
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p46723
sS'default'
p46724
g3
sS'name'
p46725
S'block'
p46726
sS'required'
p46727
I00
sS'group_name'
p46728
Nsa(dp46729
S'description'
p46730
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46731
sS'cpp_type'
p46732
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46733
sS'default'
p46734
g3
sS'name'
p46735
S'control_tags'
p46736
sS'required'
p46737
I00
sS'group_name'
p46738
S'Advanced'
p46739
sa(dp46740
S'description'
p46741
S'Set the enabled status of the MooseObject.\n'
p46742
sS'cpp_type'
p46743
S'bool'
p46744
sS'default'
p46745
S'1'
p46746
sS'name'
p46747
S'enable'
p46748
sS'required'
p46749
I00
sS'group_name'
p46750
S'Advanced'
p46751
sa(dp46752
S'name'
p46753
S'execute_on'
p46754
sS'cpp_type'
p46755
S'MultiMooseEnum'
p46756
sS'default'
p46757
S'TIMESTEP_END'
p46758
sS'description'
p46759
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46760
sS'required'
p46761
I00
sS'options'
p46762
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46763
sS'group_name'
p46764
Nsa(dp46765
S'description'
p46766
S'The analytic solution to compare against\n'
p46767
sS'cpp_type'
p46768
S'FunctionName'
p46769
sS'default'
p46770
g3
sS'name'
p46771
S'function'
p46772
sS'required'
p46773
I01
sS'group_name'
p46774
Nsa(dp46775
S'description'
p46776
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46777
sS'cpp_type'
p46778
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46779
sS'default'
p46780
g3
sS'name'
p46781
S'outputs'
p46782
sS'required'
p46783
I00
sS'group_name'
p46784
S'Advanced'
p46785
sa(dp46786
S'description'
p46787
S'The exponent used in the norm.\n'
p46788
sS'cpp_type'
p46789
S'double'
p46790
sS'default'
p46791
S'2'
p46792
sS'name'
p46793
S'p'
p46794
sS'required'
p46795
I00
sS'group_name'
p46796
Nsa(dp46797
S'description'
p46798
S'The seed for the master random number generator\n'
p46799
sS'cpp_type'
p46800
S'unsigned int'
p46801
sS'default'
p46802
S'0'
p46803
sS'name'
p46804
S'seed'
p46805
sS'required'
p46806
I00
sS'group_name'
p46807
S'Advanced'
p46808
sa(dp46809
S'description'
p46810
g3
sS'cpp_type'
p46811
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46812
sS'default'
p46813
S'ElementW1pError'
p46814
sS'name'
p46815
S'type'
p46816
sS'required'
p46817
I00
sS'group_name'
p46818
Nsa(dp46819
S'description'
p46820
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46821
sS'cpp_type'
p46822
S'bool'
p46823
sS'default'
p46824
S'0'
p46825
sS'name'
p46826
S'use_displaced_mesh'
p46827
sS'required'
p46828
I00
sS'group_name'
p46829
S'Advanced'
p46830
sa(dp46831
S'description'
p46832
S'The name of the variable that this object operates on\n'
p46833
sS'cpp_type'
p46834
S'std::vector<VariableName>'
p46835
sS'default'
p46836
g3
sS'name'
p46837
S'variable'
p46838
sS'required'
p46839
I01
sS'group_name'
p46840
NsasS'name'
p46841
S'/UserObjects/ElementW1pError'
p46842
sa(dp46843
S'description'
p46844
g3
sS'subblocks'
p46845
NsS'parameters'
p46846
(lp46847
(dp46848
S'description'
p46849
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46850
sS'cpp_type'
p46851
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46852
sS'default'
p46853
g3
sS'name'
p46854
S'control_tags'
p46855
sS'required'
p46856
I00
sS'group_name'
p46857
S'Advanced'
p46858
sa(dp46859
S'description'
p46860
S'The ID of the element where we monitor\n'
p46861
sS'cpp_type'
p46862
S'unsigned int'
p46863
sS'default'
p46864
g3
sS'name'
p46865
S'elementid'
p46866
sS'required'
p46867
I01
sS'group_name'
p46868
Nsa(dp46869
S'description'
p46870
S'Set the enabled status of the MooseObject.\n'
p46871
sS'cpp_type'
p46872
S'bool'
p46873
sS'default'
p46874
S'1'
p46875
sS'name'
p46876
S'enable'
p46877
sS'required'
p46878
I00
sS'group_name'
p46879
S'Advanced'
p46880
sa(dp46881
S'name'
p46882
S'execute_on'
p46883
sS'cpp_type'
p46884
S'MultiMooseEnum'
p46885
sS'default'
p46886
S'TIMESTEP_END'
p46887
sS'description'
p46888
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46889
sS'required'
p46890
I00
sS'options'
p46891
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46892
sS'group_name'
p46893
Nsa(dp46894
S'description'
p46895
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46896
sS'cpp_type'
p46897
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46898
sS'default'
p46899
g3
sS'name'
p46900
S'outputs'
p46901
sS'required'
p46902
I00
sS'group_name'
p46903
S'Advanced'
p46904
sa(dp46905
S'description'
p46906
g3
sS'cpp_type'
p46907
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46908
sS'default'
p46909
S'ElementalVariableValue'
p46910
sS'name'
p46911
S'type'
p46912
sS'required'
p46913
I00
sS'group_name'
p46914
Nsa(dp46915
S'description'
p46916
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46917
sS'cpp_type'
p46918
S'bool'
p46919
sS'default'
p46920
S'0'
p46921
sS'name'
p46922
S'use_displaced_mesh'
p46923
sS'required'
p46924
I00
sS'group_name'
p46925
S'Advanced'
p46926
sa(dp46927
S'description'
p46928
S'The variable to be monitored\n'
p46929
sS'cpp_type'
p46930
S'VariableName'
p46931
sS'default'
p46932
g3
sS'name'
p46933
S'variable'
p46934
sS'required'
p46935
I01
sS'group_name'
p46936
NsasS'name'
p46937
S'/UserObjects/ElementalVariableValue'
p46938
sa(dp46939
S'description'
p46940
g3
sS'subblocks'
p46941
NsS'parameters'
p46942
(lp46943
(dp46944
S'description'
p46945
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46946
sS'cpp_type'
p46947
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46948
sS'default'
p46949
g3
sS'name'
p46950
S'control_tags'
p46951
sS'required'
p46952
I00
sS'group_name'
p46953
S'Advanced'
p46954
sa(dp46955
S'description'
p46956
S'Set the enabled status of the MooseObject.\n'
p46957
sS'cpp_type'
p46958
S'bool'
p46959
sS'default'
p46960
S'1'
p46961
sS'name'
p46962
S'enable'
p46963
sS'required'
p46964
I00
sS'group_name'
p46965
S'Advanced'
p46966
sa(dp46967
S'name'
p46968
S'execute_on'
p46969
sS'cpp_type'
p46970
S'MultiMooseEnum'
p46971
sS'default'
p46972
S'TIMESTEP_END'
p46973
sS'description'
p46974
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46975
sS'required'
p46976
I00
sS'options'
p46977
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46978
sS'group_name'
p46979
Nsa(dp46980
S'description'
p46981
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46982
sS'cpp_type'
p46983
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46984
sS'default'
p46985
g3
sS'name'
p46986
S'outputs'
p46987
sS'required'
p46988
I00
sS'group_name'
p46989
S'Advanced'
p46990
sa(dp46991
S'description'
p46992
g3
sS'cpp_type'
p46993
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46994
sS'default'
p46995
S'EmptyPostprocessor'
p46996
sS'name'
p46997
S'type'
p46998
sS'required'
p46999
I00
sS'group_name'
p47000
Nsa(dp47001
S'description'
p47002
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47003
sS'cpp_type'
p47004
S'bool'
p47005
sS'default'
p47006
S'0'
p47007
sS'name'
p47008
S'use_displaced_mesh'
p47009
sS'required'
p47010
I00
sS'group_name'
p47011
S'Advanced'
p47012
sasS'name'
p47013
S'/UserObjects/EmptyPostprocessor'
p47014
sa(dp47015
S'description'
p47016
g3
sS'subblocks'
p47017
NsS'parameters'
p47018
(lp47019
(dp47020
S'description'
p47021
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47022
sS'cpp_type'
p47023
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p47024
sS'default'
p47025
g3
sS'name'
p47026
S'control_tags'
p47027
sS'required'
p47028
I00
sS'group_name'
p47029
S'Advanced'
p47030
sa(dp47031
S'description'
p47032
S'Set the enabled status of the MooseObject.\n'
p47033
sS'cpp_type'
p47034
S'bool'
p47035
sS'default'
p47036
S'1'
p47037
sS'name'
p47038
S'enable'
p47039
sS'required'
p47040
I00
sS'group_name'
p47041
S'Advanced'
p47042
sa(dp47043
S'name'
p47044
S'execute_on'
p47045
sS'cpp_type'
p47046
S'MultiMooseEnum'
p47047
sS'default'
p47048
S'TIMESTEP_END'
p47049
sS'description'
p47050
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p47051
sS'required'
p47052
I00
sS'options'
p47053
S'none initial linear nonlinear timestep_end timestep_begin custom'
p47054
sS'group_name'
p47055
Nsa(dp47056
S'description'
p47057
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p47058
sS'cpp_type'
p47059
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p47060
sS'default'
p47061
g3
sS'name'
p47062
S'outputs'
p47063
sS'required'
p47064
I00
sS'group_name'
p47065
S'Advanced'
p47066
sa(dp47067
S'description'
p47068
g3
sS'cpp_type'
p47069
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47070
sS'default'
p47071
S'ExecutionerAttributeReporter'
p47072
sS'name'
p47073
S'type'
p47074
sS'required'
p47075
I00
sS'group_name'
p47076
Nsa(dp47077
S'description'
p47078
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47079
sS'cpp_type'
p47080
S'bool'
p47081
sS'default'
p47082
S'0'
p47083
sS'name'
p47084
S'use_displaced_mesh'
p47085
sS'required'
p47086
I00
sS'group_name'
p47087
S'Advanced'
p47088
sasS'name'
p47089
S'/UserObjects/ExecutionerAttributeReporter'
p47090
sa(dp47091
S'description'
p47092
S'Find a specific target value along a sampling line. The variable values along the line should change monotonically. The target value is searched using a bisection algorithm.\n'
p47093
sS'subblocks'
p47094
NsS'parameters'
p47095
(lp47096
(dp47097
S'description'
p47098
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47099
sS'cpp_type'
p47100
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p47101
sS'default'
p47102
g3
sS'name'
p47103
S'control_tags'
p47104
sS'required'
p47105
I00
sS'group_name'
p47106
S'Advanced'
p47107
sa(dp47108
S'description'
p47109
S'Maximum number of bisections to perform.\n'
p47110
sS'cpp_type'
p47111
S'unsigned int'
p47112
sS'default'
p47113
S'36'
p47114
sS'name'
p47115
S'depth'
p47116
sS'required'
p47117
I00
sS'group_name'
p47118
Nsa(dp47119
S'description'
p47120
S'Set the enabled status of the MooseObject.\n'
p47121
sS'cpp_type'
p47122
S'bool'
p47123
sS'default'
p47124
S'1'
p47125
sS'name'
p47126
S'enable'
p47127
sS'required'
p47128
I00
sS'group_name'
p47129
S'Advanced'
p47130
sa(dp47131
S'description'
p47132
S'End point of the sampling line.\n'
p47133
sS'cpp_type'
p47134
S'libMesh::Point'
p47135
sS'default'
p47136
g3
sS'name'
p47137
S'end_point'
p47138
sS'required'
p47139
I00
sS'group_name'
p47140
Nsa(dp47141
S'name'
p47142
S'execute_on'
p47143
sS'cpp_type'
p47144
S'MultiMooseEnum'
p47145
sS'default'
p47146
S'TIMESTEP_END'
p47147
sS'description'
p47148
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p47149
sS'required'
p47150
I00
sS'options'
p47151
S'none initial linear nonlinear timestep_end timestep_begin custom'
p47152
sS'group_name'
p47153
Nsa(dp47154
S'description'
p47155
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p47156
sS'cpp_type'
p47157
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p47158
sS'default'
p47159
g3
sS'name'
p47160
S'outputs'
p47161
sS'required'
p47162
I00
sS'group_name'
p47163
S'Advanced'
p47164
sa(dp47165
S'description'
p47166
S'Start point of the sampling line.\n'
p47167
sS'cpp_type'
p47168
S'libMesh::Point'
p47169
sS'default'
p47170
g3
sS'name'
p47171
S'start_point'
p47172
sS'required'
p47173
I00
sS'group_name'
p47174
Nsa(dp47175
S'description'
p47176
S'Target value to locate.\n'
p47177
sS'cpp_type'
p47178
S'double'
p47179
sS'default'
p47180
g3
sS'name'
p47181
S'target'
p47182
sS'required'
p47183
I00
sS'group_name'
p47184
Nsa(dp47185
S'description'
p47186
S'Stop search if a value is found that is equal to the target with this tolerance applied.\n'
p47187
sS'cpp_type'
p47188
S'double'
p47189
sS'default'
p47190
S'1e-10'
p47191
sS'name'
p47192
S'tol'
p47193
sS'required'
p47194
I00
sS'group_name'
p47195
Nsa(dp47196
S'description'
p47197
g3
sS'cpp_type'
p47198
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47199
sS'default'
p47200
S'FindValueOnLine'
p47201
sS'name'
p47202
S'type'
p47203
sS'required'
p47204
I00
sS'group_name'
p47205
Nsa(dp47206
S'description'
p47207
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47208
sS'cpp_type'
p47209
S'bool'
p47210
sS'default'
p47211
S'0'
p47212
sS'name'
p47213
S'use_displaced_mesh'
p47214
sS'required'
p47215
I00
sS'group_name'
p47216
S'Advanced'
p47217
sa(dp47218
S'description'
p47219
S'Variable to inspect\n'
p47220
sS'cpp_type'
p47221
S'std::vector<VariableName>'
p47222
sS'default'
p47223
g3
sS'name'
p47224
S'v'
p47225
sS'required'
p47226
I00
sS'group_name'
p47227
NsasS'name'
p47228
S'/UserObjects/FindValueOnLine'
p47229
sa(dp47230
S'description'
p47231
g3
sS'subblocks'
p47232
NsS'parameters'
p47233
(lp47234
(dp47235
S'description'
p47236
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p47237
sS'cpp_type'
p47238
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p47239
sS'default'
p47240
g3
sS'name'
p47241
S'boundary'
p47242
sS'required'
p47243
I01
sS'group_name'
p47244
Nsa(dp47245
S'description'
p47246
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47247
sS'cpp_type'
p47248
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p47249
sS'default'
p47250
g3
sS'name'
p47251
S'control_tags'
p47252
sS'required'
p47253
I00
sS'group_name'
p47254
S'Advanced'
p47255
sa(dp47256
S'description'
p47257
S'Set the enabled status of the MooseObject.\n'
p47258
sS'cpp_type'
p47259
S'bool'
p47260
sS'default'
p47261
S'1'
p47262
sS'name'
p47263
S'enable'
p47264
sS'required'
p47265
I00
sS'group_name'
p47266
S'Advanced'
p47267
sa(dp47268
S'name'
p47269
S'execute_on'
p47270
sS'cpp_type'
p47271
S'MultiMooseEnum'
p47272
sS'default'
p47273
S'TIMESTEP_END'
p47274
sS'description'
p47275
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p47276
sS'required'
p47277
I00
sS'options'
p47278
S'none initial linear nonlinear timestep_end timestep_begin custom'
p47279
sS'group_name'
p47280
Nsa(dp47281
S'description'
p47282
S'This postprocessor will return the integral of this function over the boundary\n'
p47283
sS'cpp_type'
p47284
S'FunctionName'
p47285
sS'default'
p47286
S'1'
p47287
sS'name'
p47288
S'function'
p47289
sS'required'
p47290
I00
sS'group_name'
p47291
Nsa(dp47292
S'description'
p47293
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p47294
sS'cpp_type'
p47295
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p47296
sS'default'
p47297
g3
sS'name'
p47298
S'outputs'
p47299
sS'required'
p47300
I00
sS'group_name'
p47301
S'Advanced'
p47302
sa(dp47303
S'description'
p47304
g3
sS'cpp_type'
p47305
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47306
sS'default'
p47307
S'FunctionSideIntegral'
p47308
sS'name'
p47309
S'type'
p47310
sS'required'
p47311
I00
sS'group_name'
p47312
Nsa(dp47313
S'description'
p47314
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47315
sS'cpp_type'
p47316
S'bool'
p47317
sS'default'
p47318
S'0'
p47319
sS'name'
p47320
S'use_displaced_mesh'
p47321
sS'required'
p47322
I00
sS'group_name'
p47323
S'Advanced'
p47324
sasS'name'
p47325
S'/UserObjects/FunctionSideIntegral'
p47326
sa(dp47327
S'description'
p47328
g3
sS'subblocks'
p47329
NsS'parameters'
p47330
(lp47331
(dp47332
S'description'
p47333
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47334
sS'cpp_type'
p47335
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p47336
sS'default'
p47337
g3
sS'name'
p47338
S'control_tags'
p47339
sS'required'
p47340
I00
sS'group_name'
p47341
S'Advanced'
p47342
sa(dp47343
S'description'
p47344
S'Set the enabled status of the MooseObject.\n'
p47345
sS'cpp_type'
p47346
S'bool'
p47347
sS'default'
p47348
S'1'
p47349
sS'name'
p47350
S'enable'
p47351
sS'required'
p47352
I00
sS'group_name'
p47353
S'Advanced'
p47354
sa(dp47355
S'name'
p47356
S'execute_on'
p47357
sS'cpp_type'
p47358
S'MultiMooseEnum'
p47359
sS'default'
p47360
S'TIMESTEP_END'
p47361
sS'description'
p47362
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p47363
sS'required'
p47364
I00
sS'options'
p47365
S'none initial linear nonlinear timestep_end timestep_begin custom'
p47366
sS'group_name'
p47367
Nsa(dp47368
S'description'
p47369
S'The function which supplies the postprocessor value.\n'
p47370
sS'cpp_type'
p47371
S'FunctionName'
p47372
sS'default'
p47373
g3
sS'name'
p47374
S'function'
p47375
sS'required'
p47376
I01
sS'group_name'
p47377
Nsa(dp47378
S'description'
p47379
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p47380
sS'cpp_type'
p47381
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p47382
sS'default'
p47383
g3
sS'name'
p47384
S'outputs'
p47385
sS'required'
p47386
I00
sS'group_name'
p47387
S'Advanced'
p47388
sa(dp47389
S'description'
p47390
S'A point in space to be given to the function Default: (0, 0, 0)\n'
p47391
sS'cpp_type'
p47392
S'libMesh::Point'
p47393
sS'default'
p47394
S'0 0 0'
p47395
sS'name'
p47396
S'point'
p47397
sS'required'
p47398
I00
sS'group_name'
p47399
Nsa(dp47400
S'description'
p47401
S'A scale factor to be applied to the function\n'
p47402
sS'cpp_type'
p47403
S'double'
p47404
sS'default'
p47405
S'1'
p47406
sS'name'
p47407
S'scale_factor'
p47408
sS'required'
p47409
I00
sS'group_name'
p47410
Nsa(dp47411
S'description'
p47412
g3
sS'cpp_type'
p47413
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47414
sS'default'
p47415
S'FunctionValuePostprocessor'
p47416
sS'name'
p47417
S'type'
p47418
sS'required'
p47419
I00
sS'group_name'
p47420
Nsa(dp47421
S'description'
p47422
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47423
sS'cpp_type'
p47424
S'bool'
p47425
sS'default'
p47426
S'0'
p47427
sS'name'
p47428
S'use_displaced_mesh'
p47429
sS'required'
p47430
I00
sS'group_name'
p47431
S'Advanced'
p47432
sasS'name'
p47433
S'/UserObjects/FunctionValuePostprocessor'
p47434
sa(dp47435
S'description'
p47436
g3
sS'subblocks'
p47437
NsS'parameters'
p47438
(lp47439
(dp47440
S'description'
p47441
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p47442
sS'cpp_type'
p47443
S'unsigned int'
p47444
sS'default'
p47445
S'1'
p47446
sS'name'
p47447
S'average_radius'
p47448
sS'required'
p47449
I00
sS'group_name'
p47450
Nsa(dp47451
S'description'
p47452
S'The list of block ids (SubdomainID) that this object will be applied\n'
p47453
sS'cpp_type'
p47454
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p47455
sS'default'
p47456
g3
sS'name'
p47457
S'block'
p47458
sS'required'
p47459
I00
sS'group_name'
p47460
Nsa(dp47461
S'description'
p47462
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p47463
sS'cpp_type'
p47464
S'std::__1::vector<double, std::__1::allocator<double> >'
p47465
sS'default'
p47466
g3
sS'name'
p47467
S'bounds'
p47468
sS'required'
p47469
I00
sS'group_name'
p47470
Nsa(dp47471
S'description'
p47472
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47473
sS'cpp_type'
p47474
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p47475
sS'default'
p47476
g3
sS'name'
p47477
S'control_tags'
p47478
sS'required'
p47479
I00
sS'group_name'
p47480
S'Advanced'
p47481
sa(dp47482
S'description'
p47483
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p47484
sS'cpp_type'
p47485
S'bool'
p47486
sS'default'
p47487
S'0'
p47488
sS'name'
p47489
S'cumulative'
p47490
sS'required'
p47491
I00
sS'group_name'
p47492
Nsa(dp47493
S'name'
p47494
S'direction'
p47495
sS'cpp_type'
p47496
S'MooseEnum'
p47497
sS'default'
p47498
g3
sS'description'
p47499
S'The direction of the layers.\n'
p47500
sS'required'
p47501
I01
sS'options'
p47502
S'x y z'
p47503
sS'group_name'
p47504
Nsa(dp47505
S'description'
p47506
S'Set the enabled status of the MooseObject.\n'
p47507
sS'cpp_type'
p47508
S'bool'
p47509
sS'default'
p47510
S'1'
p47511
sS'name'
p47512
S'enable'
p47513
sS'required'
p47514
I00
sS'group_name'
p47515
S'Advanced'
p47516
sa(dp47517
S'name'
p47518
S'execute_on'
p47519
sS'cpp_type'
p47520
S'MultiMooseEnum'
p47521
sS'default'
p47522
S'TIMESTEP_END'
p47523
sS'description'
p47524
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p47525
sS'required'
p47526
I00
sS'options'
p47527
S'none initial linear nonlinear timestep_end timestep_begin custom'
p47528
sS'group_name'
p47529
Nsa(dp47530
S'description'
p47531
S'The number of layers.\n'
p47532
sS'cpp_type'
p47533
S'unsigned int'
p47534
sS'default'
p47535
g3
sS'name'
p47536
S'num_layers'
p47537
sS'required'
p47538
I00
sS'group_name'
p47539
Nsa(dp47540
S'name'
p47541
S'sample_type'
p47542
sS'cpp_type'
p47543
S'MooseEnum'
p47544
sS'default'
p47545
S'direct'
p47546
sS'description'
p47547
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p47548
sS'required'
p47549
I00
sS'options'
p47550
S'direct interpolate average'
p47551
sS'group_name'
p47552
Nsa(dp47553
S'description'
p47554
S'The seed for the master random number generator\n'
p47555
sS'cpp_type'
p47556
S'unsigned int'
p47557
sS'default'
p47558
S'0'
p47559
sS'name'
p47560
S'seed'
p47561
sS'required'
p47562
I00
sS'group_name'
p47563
S'Advanced'
p47564
sa(dp47565
S'description'
p47566
g3
sS'cpp_type'
p47567
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47568
sS'default'
p47569
S'LayeredAverage'
p47570
sS'name'
p47571
S'type'
p47572
sS'required'
p47573
I00
sS'group_name'
p47574
Nsa(dp47575
S'description'
p47576
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47577
sS'cpp_type'
p47578
S'bool'
p47579
sS'default'
p47580
S'0'
p47581
sS'name'
p47582
S'use_displaced_mesh'
p47583
sS'required'
p47584
I00
sS'group_name'
p47585
S'Advanced'
p47586
sa(dp47587
S'description'
p47588
S'The name of the variable that this object operates on\n'
p47589
sS'cpp_type'
p47590
S'std::vector<VariableName>'
p47591
sS'default'
p47592
g3
sS'name'
p47593
S'variable'
p47594
sS'required'
p47595
I01
sS'group_name'
p47596
NsasS'name'
p47597
S'/UserObjects/LayeredAverage'
p47598
sa(dp47599
S'description'
p47600
g3
sS'subblocks'
p47601
NsS'parameters'
p47602
(lp47603
(dp47604
S'description'
p47605
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p47606
sS'cpp_type'
p47607
S'unsigned int'
p47608
sS'default'
p47609
S'1'
p47610
sS'name'
p47611
S'average_radius'
p47612
sS'required'
p47613
I00
sS'group_name'
p47614
Nsa(dp47615
S'description'
p47616
S'The list of block ids (SubdomainID) that this object will be applied\n'
p47617
sS'cpp_type'
p47618
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p47619
sS'default'
p47620
g3
sS'name'
p47621
S'block'
p47622
sS'required'
p47623
I00
sS'group_name'
p47624
Nsa(dp47625
S'description'
p47626
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p47627
sS'cpp_type'
p47628
S'std::__1::vector<double, std::__1::allocator<double> >'
p47629
sS'default'
p47630
g3
sS'name'
p47631
S'bounds'
p47632
sS'required'
p47633
I00
sS'group_name'
p47634
Nsa(dp47635
S'description'
p47636
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47637
sS'cpp_type'
p47638
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p47639
sS'default'
p47640
g3
sS'name'
p47641
S'control_tags'
p47642
sS'required'
p47643
I00
sS'group_name'
p47644
S'Advanced'
p47645
sa(dp47646
S'description'
p47647
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p47648
sS'cpp_type'
p47649
S'bool'
p47650
sS'default'
p47651
S'0'
p47652
sS'name'
p47653
S'cumulative'
p47654
sS'required'
p47655
I00
sS'group_name'
p47656
Nsa(dp47657
S'name'
p47658
S'direction'
p47659
sS'cpp_type'
p47660
S'MooseEnum'
p47661
sS'default'
p47662
g3
sS'description'
p47663
S'The direction of the layers.\n'
p47664
sS'required'
p47665
I01
sS'options'
p47666
S'x y z'
p47667
sS'group_name'
p47668
Nsa(dp47669
S'description'
p47670
S'Set the enabled status of the MooseObject.\n'
p47671
sS'cpp_type'
p47672
S'bool'
p47673
sS'default'
p47674
S'1'
p47675
sS'name'
p47676
S'enable'
p47677
sS'required'
p47678
I00
sS'group_name'
p47679
S'Advanced'
p47680
sa(dp47681
S'name'
p47682
S'execute_on'
p47683
sS'cpp_type'
p47684
S'MultiMooseEnum'
p47685
sS'default'
p47686
S'TIMESTEP_END'
p47687
sS'description'
p47688
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p47689
sS'required'
p47690
I00
sS'options'
p47691
S'none initial linear nonlinear timestep_end timestep_begin custom'
p47692
sS'group_name'
p47693
Nsa(dp47694
S'description'
p47695
S'The number of layers.\n'
p47696
sS'cpp_type'
p47697
S'unsigned int'
p47698
sS'default'
p47699
g3
sS'name'
p47700
S'num_layers'
p47701
sS'required'
p47702
I00
sS'group_name'
p47703
Nsa(dp47704
S'name'
p47705
S'sample_type'
p47706
sS'cpp_type'
p47707
S'MooseEnum'
p47708
sS'default'
p47709
S'direct'
p47710
sS'description'
p47711
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p47712
sS'required'
p47713
I00
sS'options'
p47714
S'direct interpolate average'
p47715
sS'group_name'
p47716
Nsa(dp47717
S'description'
p47718
S'The seed for the master random number generator\n'
p47719
sS'cpp_type'
p47720
S'unsigned int'
p47721
sS'default'
p47722
S'0'
p47723
sS'name'
p47724
S'seed'
p47725
sS'required'
p47726
I00
sS'group_name'
p47727
S'Advanced'
p47728
sa(dp47729
S'description'
p47730
g3
sS'cpp_type'
p47731
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47732
sS'default'
p47733
S'LayeredIntegral'
p47734
sS'name'
p47735
S'type'
p47736
sS'required'
p47737
I00
sS'group_name'
p47738
Nsa(dp47739
S'description'
p47740
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47741
sS'cpp_type'
p47742
S'bool'
p47743
sS'default'
p47744
S'0'
p47745
sS'name'
p47746
S'use_displaced_mesh'
p47747
sS'required'
p47748
I00
sS'group_name'
p47749
S'Advanced'
p47750
sa(dp47751
S'description'
p47752
S'The name of the variable that this object operates on\n'
p47753
sS'cpp_type'
p47754
S'std::vector<VariableName>'
p47755
sS'default'
p47756
g3
sS'name'
p47757
S'variable'
p47758
sS'required'
p47759
I01
sS'group_name'
p47760
NsasS'name'
p47761
S'/UserObjects/LayeredIntegral'
p47762
sa(dp47763
S'description'
p47764
g3
sS'subblocks'
p47765
NsS'parameters'
p47766
(lp47767
(dp47768
S'description'
p47769
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p47770
sS'cpp_type'
p47771
S'unsigned int'
p47772
sS'default'
p47773
S'1'
p47774
sS'name'
p47775
S'average_radius'
p47776
sS'required'
p47777
I00
sS'group_name'
p47778
Nsa(dp47779
S'description'
p47780
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p47781
sS'cpp_type'
p47782
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p47783
sS'default'
p47784
g3
sS'name'
p47785
S'boundary'
p47786
sS'required'
p47787
I01
sS'group_name'
p47788
Nsa(dp47789
S'description'
p47790
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p47791
sS'cpp_type'
p47792
S'std::__1::vector<double, std::__1::allocator<double> >'
p47793
sS'default'
p47794
g3
sS'name'
p47795
S'bounds'
p47796
sS'required'
p47797
I00
sS'group_name'
p47798
Nsa(dp47799
S'description'
p47800
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47801
sS'cpp_type'
p47802
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p47803
sS'default'
p47804
g3
sS'name'
p47805
S'control_tags'
p47806
sS'required'
p47807
I00
sS'group_name'
p47808
S'Advanced'
p47809
sa(dp47810
S'description'
p47811
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p47812
sS'cpp_type'
p47813
S'bool'
p47814
sS'default'
p47815
S'0'
p47816
sS'name'
p47817
S'cumulative'
p47818
sS'required'
p47819
I00
sS'group_name'
p47820
Nsa(dp47821
S'name'
p47822
S'direction'
p47823
sS'cpp_type'
p47824
S'MooseEnum'
p47825
sS'default'
p47826
g3
sS'description'
p47827
S'The direction of the layers.\n'
p47828
sS'required'
p47829
I01
sS'options'
p47830
S'x y z'
p47831
sS'group_name'
p47832
Nsa(dp47833
S'description'
p47834
S'Set the enabled status of the MooseObject.\n'
p47835
sS'cpp_type'
p47836
S'bool'
p47837
sS'default'
p47838
S'1'
p47839
sS'name'
p47840
S'enable'
p47841
sS'required'
p47842
I00
sS'group_name'
p47843
S'Advanced'
p47844
sa(dp47845
S'name'
p47846
S'execute_on'
p47847
sS'cpp_type'
p47848
S'MultiMooseEnum'
p47849
sS'default'
p47850
S'TIMESTEP_END'
p47851
sS'description'
p47852
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p47853
sS'required'
p47854
I00
sS'options'
p47855
S'none initial linear nonlinear timestep_end timestep_begin custom'
p47856
sS'group_name'
p47857
Nsa(dp47858
S'description'
p47859
S'The number of layers.\n'
p47860
sS'cpp_type'
p47861
S'unsigned int'
p47862
sS'default'
p47863
g3
sS'name'
p47864
S'num_layers'
p47865
sS'required'
p47866
I00
sS'group_name'
p47867
Nsa(dp47868
S'name'
p47869
S'sample_type'
p47870
sS'cpp_type'
p47871
S'MooseEnum'
p47872
sS'default'
p47873
S'direct'
p47874
sS'description'
p47875
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p47876
sS'required'
p47877
I00
sS'options'
p47878
S'direct interpolate average'
p47879
sS'group_name'
p47880
Nsa(dp47881
S'description'
p47882
g3
sS'cpp_type'
p47883
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47884
sS'default'
p47885
S'LayeredSideAverage'
p47886
sS'name'
p47887
S'type'
p47888
sS'required'
p47889
I00
sS'group_name'
p47890
Nsa(dp47891
S'description'
p47892
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47893
sS'cpp_type'
p47894
S'bool'
p47895
sS'default'
p47896
S'0'
p47897
sS'name'
p47898
S'use_displaced_mesh'
p47899
sS'required'
p47900
I00
sS'group_name'
p47901
S'Advanced'
p47902
sa(dp47903
S'description'
p47904
S'The name of the variable that this boundary condition applies to\n'
p47905
sS'cpp_type'
p47906
S'std::vector<VariableName>'
p47907
sS'default'
p47908
g3
sS'name'
p47909
S'variable'
p47910
sS'required'
p47911
I01
sS'group_name'
p47912
NsasS'name'
p47913
S'/UserObjects/LayeredSideAverage'
p47914
sa(dp47915
S'description'
p47916
g3
sS'subblocks'
p47917
NsS'parameters'
p47918
(lp47919
(dp47920
S'description'
p47921
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p47922
sS'cpp_type'
p47923
S'unsigned int'
p47924
sS'default'
p47925
S'1'
p47926
sS'name'
p47927
S'average_radius'
p47928
sS'required'
p47929
I00
sS'group_name'
p47930
Nsa(dp47931
S'description'
p47932
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p47933
sS'cpp_type'
p47934
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p47935
sS'default'
p47936
g3
sS'name'
p47937
S'boundary'
p47938
sS'required'
p47939
I01
sS'group_name'
p47940
Nsa(dp47941
S'description'
p47942
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p47943
sS'cpp_type'
p47944
S'std::__1::vector<double, std::__1::allocator<double> >'
p47945
sS'default'
p47946
g3
sS'name'
p47947
S'bounds'
p47948
sS'required'
p47949
I00
sS'group_name'
p47950
Nsa(dp47951
S'description'
p47952
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47953
sS'cpp_type'
p47954
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p47955
sS'default'
p47956
g3
sS'name'
p47957
S'control_tags'
p47958
sS'required'
p47959
I00
sS'group_name'
p47960
S'Advanced'
p47961
sa(dp47962
S'description'
p47963
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p47964
sS'cpp_type'
p47965
S'bool'
p47966
sS'default'
p47967
S'0'
p47968
sS'name'
p47969
S'cumulative'
p47970
sS'required'
p47971
I00
sS'group_name'
p47972
Nsa(dp47973
S'description'
p47974
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p47975
sS'cpp_type'
p47976
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47977
sS'default'
p47978
g3
sS'name'
p47979
S'diffusivity'
p47980
sS'required'
p47981
I01
sS'group_name'
p47982
Nsa(dp47983
S'name'
p47984
S'direction'
p47985
sS'cpp_type'
p47986
S'MooseEnum'
p47987
sS'default'
p47988
g3
sS'description'
p47989
S'The direction of the layers.\n'
p47990
sS'required'
p47991
I01
sS'options'
p47992
S'x y z'
p47993
sS'group_name'
p47994
Nsa(dp47995
S'description'
p47996
S'Set the enabled status of the MooseObject.\n'
p47997
sS'cpp_type'
p47998
S'bool'
p47999
sS'default'
p48000
S'1'
p48001
sS'name'
p48002
S'enable'
p48003
sS'required'
p48004
I00
sS'group_name'
p48005
S'Advanced'
p48006
sa(dp48007
S'name'
p48008
S'execute_on'
p48009
sS'cpp_type'
p48010
S'MultiMooseEnum'
p48011
sS'default'
p48012
S'TIMESTEP_END'
p48013
sS'description'
p48014
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48015
sS'required'
p48016
I00
sS'options'
p48017
S'none initial linear nonlinear timestep_end timestep_begin custom'
p48018
sS'group_name'
p48019
Nsa(dp48020
S'description'
p48021
S'The number of layers.\n'
p48022
sS'cpp_type'
p48023
S'unsigned int'
p48024
sS'default'
p48025
g3
sS'name'
p48026
S'num_layers'
p48027
sS'required'
p48028
I00
sS'group_name'
p48029
Nsa(dp48030
S'name'
p48031
S'sample_type'
p48032
sS'cpp_type'
p48033
S'MooseEnum'
p48034
sS'default'
p48035
S'direct'
p48036
sS'description'
p48037
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p48038
sS'required'
p48039
I00
sS'options'
p48040
S'direct interpolate average'
p48041
sS'group_name'
p48042
Nsa(dp48043
S'description'
p48044
g3
sS'cpp_type'
p48045
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p48046
sS'default'
p48047
S'LayeredSideFluxAverage'
p48048
sS'name'
p48049
S'type'
p48050
sS'required'
p48051
I00
sS'group_name'
p48052
Nsa(dp48053
S'description'
p48054
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48055
sS'cpp_type'
p48056
S'bool'
p48057
sS'default'
p48058
S'0'
p48059
sS'name'
p48060
S'use_displaced_mesh'
p48061
sS'required'
p48062
I00
sS'group_name'
p48063
S'Advanced'
p48064
sa(dp48065
S'description'
p48066
S'The name of the variable that this boundary condition applies to\n'
p48067
sS'cpp_type'
p48068
S'std::vector<VariableName>'
p48069
sS'default'
p48070
g3
sS'name'
p48071
S'variable'
p48072
sS'required'
p48073
I01
sS'group_name'
p48074
NsasS'name'
p48075
S'/UserObjects/LayeredSideFluxAverage'
p48076
sa(dp48077
S'description'
p48078
g3
sS'subblocks'
p48079
NsS'parameters'
p48080
(lp48081
(dp48082
S'description'
p48083
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p48084
sS'cpp_type'
p48085
S'unsigned int'
p48086
sS'default'
p48087
S'1'
p48088
sS'name'
p48089
S'average_radius'
p48090
sS'required'
p48091
I00
sS'group_name'
p48092
Nsa(dp48093
S'description'
p48094
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p48095
sS'cpp_type'
p48096
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p48097
sS'default'
p48098
g3
sS'name'
p48099
S'boundary'
p48100
sS'required'
p48101
I01
sS'group_name'
p48102
Nsa(dp48103
S'description'
p48104
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p48105
sS'cpp_type'
p48106
S'std::__1::vector<double, std::__1::allocator<double> >'
p48107
sS'default'
p48108
g3
sS'name'
p48109
S'bounds'
p48110
sS'required'
p48111
I00
sS'group_name'
p48112
Nsa(dp48113
S'description'
p48114
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48115
sS'cpp_type'
p48116
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p48117
sS'default'
p48118
g3
sS'name'
p48119
S'control_tags'
p48120
sS'required'
p48121
I00
sS'group_name'
p48122
S'Advanced'
p48123
sa(dp48124
S'description'
p48125
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p48126
sS'cpp_type'
p48127
S'bool'
p48128
sS'default'
p48129
S'0'
p48130
sS'name'
p48131
S'cumulative'
p48132
sS'required'
p48133
I00
sS'group_name'
p48134
Nsa(dp48135
S'name'
p48136
S'direction'
p48137
sS'cpp_type'
p48138
S'MooseEnum'
p48139
sS'default'
p48140
g3
sS'description'
p48141
S'The direction of the layers.\n'
p48142
sS'required'
p48143
I01
sS'options'
p48144
S'x y z'
p48145
sS'group_name'
p48146
Nsa(dp48147
S'description'
p48148
S'Set the enabled status of the MooseObject.\n'
p48149
sS'cpp_type'
p48150
S'bool'
p48151
sS'default'
p48152
S'1'
p48153
sS'name'
p48154
S'enable'
p48155
sS'required'
p48156
I00
sS'group_name'
p48157
S'Advanced'
p48158
sa(dp48159
S'name'
p48160
S'execute_on'
p48161
sS'cpp_type'
p48162
S'MultiMooseEnum'
p48163
sS'default'
p48164
S'TIMESTEP_END'
p48165
sS'description'
p48166
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48167
sS'required'
p48168
I00
sS'options'
p48169
S'none initial linear nonlinear timestep_end timestep_begin custom'
p48170
sS'group_name'
p48171
Nsa(dp48172
S'description'
p48173
S'The number of layers.\n'
p48174
sS'cpp_type'
p48175
S'unsigned int'
p48176
sS'default'
p48177
g3
sS'name'
p48178
S'num_layers'
p48179
sS'required'
p48180
I00
sS'group_name'
p48181
Nsa(dp48182
S'name'
p48183
S'sample_type'
p48184
sS'cpp_type'
p48185
S'MooseEnum'
p48186
sS'default'
p48187
S'direct'
p48188
sS'description'
p48189
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p48190
sS'required'
p48191
I00
sS'options'
p48192
S'direct interpolate average'
p48193
sS'group_name'
p48194
Nsa(dp48195
S'description'
p48196
g3
sS'cpp_type'
p48197
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p48198
sS'default'
p48199
S'LayeredSideIntegral'
p48200
sS'name'
p48201
S'type'
p48202
sS'required'
p48203
I00
sS'group_name'
p48204
Nsa(dp48205
S'description'
p48206
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48207
sS'cpp_type'
p48208
S'bool'
p48209
sS'default'
p48210
S'0'
p48211
sS'name'
p48212
S'use_displaced_mesh'
p48213
sS'required'
p48214
I00
sS'group_name'
p48215
S'Advanced'
p48216
sa(dp48217
S'description'
p48218
S'The name of the variable that this boundary condition applies to\n'
p48219
sS'cpp_type'
p48220
S'std::vector<VariableName>'
p48221
sS'default'
p48222
g3
sS'name'
p48223
S'variable'
p48224
sS'required'
p48225
I01
sS'group_name'
p48226
NsasS'name'
p48227
S'/UserObjects/LayeredSideIntegral'
p48228
sa(dp48229
S'description'
p48230
g3
sS'subblocks'
p48231
NsS'parameters'
p48232
(lp48233
(dp48234
S'description'
p48235
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p48236
sS'cpp_type'
p48237
S'unsigned int'
p48238
sS'default'
p48239
S'1'
p48240
sS'name'
p48241
S'average_radius'
p48242
sS'required'
p48243
I00
sS'group_name'
p48244
Nsa(dp48245
S'description'
p48246
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48247
sS'cpp_type'
p48248
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p48249
sS'default'
p48250
g3
sS'name'
p48251
S'block'
p48252
sS'required'
p48253
I00
sS'group_name'
p48254
Nsa(dp48255
S'description'
p48256
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p48257
sS'cpp_type'
p48258
S'std::__1::vector<double, std::__1::allocator<double> >'
p48259
sS'default'
p48260
g3
sS'name'
p48261
S'bounds'
p48262
sS'required'
p48263
I00
sS'group_name'
p48264
Nsa(dp48265
S'description'
p48266
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48267
sS'cpp_type'
p48268
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p48269
sS'default'
p48270
g3
sS'name'
p48271
S'control_tags'
p48272
sS'required'
p48273
I00
sS'group_name'
p48274
S'Advanced'
p48275
sa(dp48276
S'description'
p48277
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p48278
sS'cpp_type'
p48279
S'bool'
p48280
sS'default'
p48281
S'0'
p48282
sS'name'
p48283
S'cumulative'
p48284
sS'required'
p48285
I00
sS'group_name'
p48286
Nsa(dp48287
S'name'
p48288
S'direction'
p48289
sS'cpp_type'
p48290
S'MooseEnum'
p48291
sS'default'
p48292
g3
sS'description'
p48293
S'The direction of the layers.\n'
p48294
sS'required'
p48295
I01
sS'options'
p48296
S'x y z'
p48297
sS'group_name'
p48298
Nsa(dp48299
S'description'
p48300
S'Set the enabled status of the MooseObject.\n'
p48301
sS'cpp_type'
p48302
S'bool'
p48303
sS'default'
p48304
S'1'
p48305
sS'name'
p48306
S'enable'
p48307
sS'required'
p48308
I00
sS'group_name'
p48309
S'Advanced'
p48310
sa(dp48311
S'name'
p48312
S'execute_on'
p48313
sS'cpp_type'
p48314
S'MultiMooseEnum'
p48315
sS'default'
p48316
S'TIMESTEP_END'
p48317
sS'description'
p48318
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48319
sS'required'
p48320
I00
sS'options'
p48321
S'none initial linear nonlinear timestep_end timestep_begin custom'
p48322
sS'group_name'
p48323
Nsa(dp48324
S'description'
p48325
S'The number of layers.\n'
p48326
sS'cpp_type'
p48327
S'unsigned int'
p48328
sS'default'
p48329
g3
sS'name'
p48330
S'num_layers'
p48331
sS'required'
p48332
I00
sS'group_name'
p48333
Nsa(dp48334
S'description'
p48335
S'Computations will be lumped into values at these points.\n'
p48336
sS'cpp_type'
p48337
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p48338
sS'default'
p48339
g3
sS'name'
p48340
S'points'
p48341
sS'required'
p48342
I01
sS'group_name'
p48343
Nsa(dp48344
S'name'
p48345
S'sample_type'
p48346
sS'cpp_type'
p48347
S'MooseEnum'
p48348
sS'default'
p48349
S'direct'
p48350
sS'description'
p48351
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p48352
sS'required'
p48353
I00
sS'options'
p48354
S'direct interpolate average'
p48355
sS'group_name'
p48356
Nsa(dp48357
S'description'
p48358
S'The seed for the master random number generator\n'
p48359
sS'cpp_type'
p48360
S'unsigned int'
p48361
sS'default'
p48362
S'0'
p48363
sS'name'
p48364
S'seed'
p48365
sS'required'
p48366
I00
sS'group_name'
p48367
S'Advanced'
p48368
sa(dp48369
S'description'
p48370
g3
sS'cpp_type'
p48371
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p48372
sS'default'
p48373
S'NearestPointLayeredAverage'
p48374
sS'name'
p48375
S'type'
p48376
sS'required'
p48377
I00
sS'group_name'
p48378
Nsa(dp48379
S'description'
p48380
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48381
sS'cpp_type'
p48382
S'bool'
p48383
sS'default'
p48384
S'0'
p48385
sS'name'
p48386
S'use_displaced_mesh'
p48387
sS'required'
p48388
I00
sS'group_name'
p48389
S'Advanced'
p48390
sa(dp48391
S'description'
p48392
S'The name of the variable that this object operates on\n'
p48393
sS'cpp_type'
p48394
S'std::vector<VariableName>'
p48395
sS'default'
p48396
g3
sS'name'
p48397
S'variable'
p48398
sS'required'
p48399
I01
sS'group_name'
p48400
NsasS'name'
p48401
S'/UserObjects/NearestPointLayeredAverage'
p48402
sa(dp48403
S'description'
p48404
g3
sS'subblocks'
p48405
NsS'parameters'
p48406
(lp48407
(dp48408
S'description'
p48409
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48410
sS'cpp_type'
p48411
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p48412
sS'default'
p48413
g3
sS'name'
p48414
S'block'
p48415
sS'required'
p48416
I00
sS'group_name'
p48417
Nsa(dp48418
S'description'
p48419
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p48420
sS'cpp_type'
p48421
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p48422
sS'default'
p48423
g3
sS'name'
p48424
S'boundary'
p48425
sS'required'
p48426
I00
sS'group_name'
p48427
Nsa(dp48428
S'description'
p48429
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48430
sS'cpp_type'
p48431
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p48432
sS'default'
p48433
g3
sS'name'
p48434
S'control_tags'
p48435
sS'required'
p48436
I00
sS'group_name'
p48437
S'Advanced'
p48438
sa(dp48439
S'description'
p48440
S'Set the enabled status of the MooseObject.\n'
p48441
sS'cpp_type'
p48442
S'bool'
p48443
sS'default'
p48444
S'1'
p48445
sS'name'
p48446
S'enable'
p48447
sS'required'
p48448
I00
sS'group_name'
p48449
S'Advanced'
p48450
sa(dp48451
S'name'
p48452
S'execute_on'
p48453
sS'cpp_type'
p48454
S'MultiMooseEnum'
p48455
sS'default'
p48456
S'TIMESTEP_END'
p48457
sS'description'
p48458
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48459
sS'required'
p48460
I00
sS'options'
p48461
S'none initial linear nonlinear timestep_end timestep_begin custom'
p48462
sS'group_name'
p48463
Nsa(dp48464
S'description'
p48465
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p48466
sS'cpp_type'
p48467
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p48468
sS'default'
p48469
g3
sS'name'
p48470
S'outputs'
p48471
sS'required'
p48472
I00
sS'group_name'
p48473
S'Advanced'
p48474
sa(dp48475
S'description'
p48476
S'The seed for the master random number generator\n'
p48477
sS'cpp_type'
p48478
S'unsigned int'
p48479
sS'default'
p48480
S'0'
p48481
sS'name'
p48482
S'seed'
p48483
sS'required'
p48484
I00
sS'group_name'
p48485
S'Advanced'
p48486
sa(dp48487
S'description'
p48488
g3
sS'cpp_type'
p48489
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p48490
sS'default'
p48491
S'NodalExtremeValue'
p48492
sS'name'
p48493
S'type'
p48494
sS'required'
p48495
I00
sS'group_name'
p48496
Nsa(dp48497
S'description'
p48498
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p48499
sS'cpp_type'
p48500
S'bool'
p48501
sS'default'
p48502
S'0'
p48503
sS'name'
p48504
S'unique_node_execute'
p48505
sS'required'
p48506
I00
sS'group_name'
p48507
Nsa(dp48508
S'description'
p48509
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48510
sS'cpp_type'
p48511
S'bool'
p48512
sS'default'
p48513
S'0'
p48514
sS'name'
p48515
S'use_displaced_mesh'
p48516
sS'required'
p48517
I00
sS'group_name'
p48518
S'Advanced'
p48519
sa(dp48520
S'name'
p48521
S'value_type'
p48522
sS'cpp_type'
p48523
S'MooseEnum'
p48524
sS'default'
p48525
S'max'
p48526
sS'description'
p48527
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p48528
sS'required'
p48529
I00
sS'options'
p48530
S'max min'
p48531
sS'group_name'
p48532
Nsa(dp48533
S'description'
p48534
S'The name of the variable that this postprocessor operates on\n'
p48535
sS'cpp_type'
p48536
S'std::vector<VariableName>'
p48537
sS'default'
p48538
g3
sS'name'
p48539
S'variable'
p48540
sS'required'
p48541
I01
sS'group_name'
p48542
NsasS'name'
p48543
S'/UserObjects/NodalExtremeValue'
p48544
sa(dp48545
S'description'
p48546
g3
sS'subblocks'
p48547
NsS'parameters'
p48548
(lp48549
(dp48550
S'description'
p48551
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48552
sS'cpp_type'
p48553
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p48554
sS'default'
p48555
g3
sS'name'
p48556
S'block'
p48557
sS'required'
p48558
I00
sS'group_name'
p48559
Nsa(dp48560
S'description'
p48561
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p48562
sS'cpp_type'
p48563
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p48564
sS'default'
p48565
g3
sS'name'
p48566
S'boundary'
p48567
sS'required'
p48568
I00
sS'group_name'
p48569
Nsa(dp48570
S'description'
p48571
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48572
sS'cpp_type'
p48573
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p48574
sS'default'
p48575
g3
sS'name'
p48576
S'control_tags'
p48577
sS'required'
p48578
I00
sS'group_name'
p48579
S'Advanced'
p48580
sa(dp48581
S'description'
p48582
S'Set the enabled status of the MooseObject.\n'
p48583
sS'cpp_type'
p48584
S'bool'
p48585
sS'default'
p48586
S'1'
p48587
sS'name'
p48588
S'enable'
p48589
sS'required'
p48590
I00
sS'group_name'
p48591
S'Advanced'
p48592
sa(dp48593
S'name'
p48594
S'execute_on'
p48595
sS'cpp_type'
p48596
S'MultiMooseEnum'
p48597
sS'default'
p48598
S'TIMESTEP_END'
p48599
sS'description'
p48600
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48601
sS'required'
p48602
I00
sS'options'
p48603
S'none initial linear nonlinear timestep_end timestep_begin custom'
p48604
sS'group_name'
p48605
Nsa(dp48606
S'description'
p48607
S'The analytic solution to compare against\n'
p48608
sS'cpp_type'
p48609
S'FunctionName'
p48610
sS'default'
p48611
g3
sS'name'
p48612
S'function'
p48613
sS'required'
p48614
I01
sS'group_name'
p48615
Nsa(dp48616
S'description'
p48617
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p48618
sS'cpp_type'
p48619
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p48620
sS'default'
p48621
g3
sS'name'
p48622
S'outputs'
p48623
sS'required'
p48624
I00
sS'group_name'
p48625
S'Advanced'
p48626
sa(dp48627
S'description'
p48628
S'The seed for the master random number generator\n'
p48629
sS'cpp_type'
p48630
S'unsigned int'
p48631
sS'default'
p48632
S'0'
p48633
sS'name'
p48634
S'seed'
p48635
sS'required'
p48636
I00
sS'group_name'
p48637
S'Advanced'
p48638
sa(dp48639
S'description'
p48640
g3
sS'cpp_type'
p48641
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p48642
sS'default'
p48643
S'NodalL2Error'
p48644
sS'name'
p48645
S'type'
p48646
sS'required'
p48647
I00
sS'group_name'
p48648
Nsa(dp48649
S'description'
p48650
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p48651
sS'cpp_type'
p48652
S'bool'
p48653
sS'default'
p48654
S'0'
p48655
sS'name'
p48656
S'unique_node_execute'
p48657
sS'required'
p48658
I00
sS'group_name'
p48659
Nsa(dp48660
S'description'
p48661
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48662
sS'cpp_type'
p48663
S'bool'
p48664
sS'default'
p48665
S'0'
p48666
sS'name'
p48667
S'use_displaced_mesh'
p48668
sS'required'
p48669
I00
sS'group_name'
p48670
S'Advanced'
p48671
sa(dp48672
S'description'
p48673
S'The name of the variable that this postprocessor operates on\n'
p48674
sS'cpp_type'
p48675
S'std::vector<VariableName>'
p48676
sS'default'
p48677
g3
sS'name'
p48678
S'variable'
p48679
sS'required'
p48680
I01
sS'group_name'
p48681
NsasS'name'
p48682
S'/UserObjects/NodalL2Error'
p48683
sa(dp48684
S'description'
p48685
g3
sS'subblocks'
p48686
NsS'parameters'
p48687
(lp48688
(dp48689
S'description'
p48690
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48691
sS'cpp_type'
p48692
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p48693
sS'default'
p48694
g3
sS'name'
p48695
S'block'
p48696
sS'required'
p48697
I00
sS'group_name'
p48698
Nsa(dp48699
S'description'
p48700
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p48701
sS'cpp_type'
p48702
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p48703
sS'default'
p48704
g3
sS'name'
p48705
S'boundary'
p48706
sS'required'
p48707
I00
sS'group_name'
p48708
Nsa(dp48709
S'description'
p48710
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48711
sS'cpp_type'
p48712
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p48713
sS'default'
p48714
g3
sS'name'
p48715
S'control_tags'
p48716
sS'required'
p48717
I00
sS'group_name'
p48718
S'Advanced'
p48719
sa(dp48720
S'description'
p48721
S'Set the enabled status of the MooseObject.\n'
p48722
sS'cpp_type'
p48723
S'bool'
p48724
sS'default'
p48725
S'1'
p48726
sS'name'
p48727
S'enable'
p48728
sS'required'
p48729
I00
sS'group_name'
p48730
S'Advanced'
p48731
sa(dp48732
S'name'
p48733
S'execute_on'
p48734
sS'cpp_type'
p48735
S'MultiMooseEnum'
p48736
sS'default'
p48737
S'TIMESTEP_END'
p48738
sS'description'
p48739
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48740
sS'required'
p48741
I00
sS'options'
p48742
S'none initial linear nonlinear timestep_end timestep_begin custom'
p48743
sS'group_name'
p48744
Nsa(dp48745
S'description'
p48746
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p48747
sS'cpp_type'
p48748
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p48749
sS'default'
p48750
g3
sS'name'
p48751
S'outputs'
p48752
sS'required'
p48753
I00
sS'group_name'
p48754
S'Advanced'
p48755
sa(dp48756
S'description'
p48757
S'The seed for the master random number generator\n'
p48758
sS'cpp_type'
p48759
S'unsigned int'
p48760
sS'default'
p48761
S'0'
p48762
sS'name'
p48763
S'seed'
p48764
sS'required'
p48765
I00
sS'group_name'
p48766
S'Advanced'
p48767
sa(dp48768
S'description'
p48769
g3
sS'cpp_type'
p48770
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p48771
sS'default'
p48772
S'NodalL2Norm'
p48773
sS'name'
p48774
S'type'
p48775
sS'required'
p48776
I00
sS'group_name'
p48777
Nsa(dp48778
S'description'
p48779
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p48780
sS'cpp_type'
p48781
S'bool'
p48782
sS'default'
p48783
S'1'
p48784
sS'name'
p48785
S'unique_node_execute'
p48786
sS'required'
p48787
I00
sS'group_name'
p48788
Nsa(dp48789
S'description'
p48790
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48791
sS'cpp_type'
p48792
S'bool'
p48793
sS'default'
p48794
S'0'
p48795
sS'name'
p48796
S'use_displaced_mesh'
p48797
sS'required'
p48798
I00
sS'group_name'
p48799
S'Advanced'
p48800
sa(dp48801
S'description'
p48802
S'The name of the variable that this postprocessor operates on\n'
p48803
sS'cpp_type'
p48804
S'std::vector<VariableName>'
p48805
sS'default'
p48806
g3
sS'name'
p48807
S'variable'
p48808
sS'required'
p48809
I01
sS'group_name'
p48810
NsasS'name'
p48811
S'/UserObjects/NodalL2Norm'
p48812
sa(dp48813
S'description'
p48814
g3
sS'subblocks'
p48815
NsS'parameters'
p48816
(lp48817
(dp48818
S'description'
p48819
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48820
sS'cpp_type'
p48821
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p48822
sS'default'
p48823
g3
sS'name'
p48824
S'block'
p48825
sS'required'
p48826
I00
sS'group_name'
p48827
Nsa(dp48828
S'description'
p48829
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p48830
sS'cpp_type'
p48831
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p48832
sS'default'
p48833
g3
sS'name'
p48834
S'boundary'
p48835
sS'required'
p48836
I00
sS'group_name'
p48837
Nsa(dp48838
S'description'
p48839
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48840
sS'cpp_type'
p48841
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p48842
sS'default'
p48843
g3
sS'name'
p48844
S'control_tags'
p48845
sS'required'
p48846
I00
sS'group_name'
p48847
S'Advanced'
p48848
sa(dp48849
S'description'
p48850
S'Set the enabled status of the MooseObject.\n'
p48851
sS'cpp_type'
p48852
S'bool'
p48853
sS'default'
p48854
S'1'
p48855
sS'name'
p48856
S'enable'
p48857
sS'required'
p48858
I00
sS'group_name'
p48859
S'Advanced'
p48860
sa(dp48861
S'name'
p48862
S'execute_on'
p48863
sS'cpp_type'
p48864
S'MultiMooseEnum'
p48865
sS'default'
p48866
S'TIMESTEP_END'
p48867
sS'description'
p48868
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48869
sS'required'
p48870
I00
sS'options'
p48871
S'none initial linear nonlinear timestep_end timestep_begin custom'
p48872
sS'group_name'
p48873
Nsa(dp48874
S'description'
p48875
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p48876
sS'cpp_type'
p48877
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p48878
sS'default'
p48879
g3
sS'name'
p48880
S'outputs'
p48881
sS'required'
p48882
I00
sS'group_name'
p48883
S'Advanced'
p48884
sa(dp48885
S'description'
p48886
S'The seed for the master random number generator\n'
p48887
sS'cpp_type'
p48888
S'unsigned int'
p48889
sS'default'
p48890
S'0'
p48891
sS'name'
p48892
S'seed'
p48893
sS'required'
p48894
I00
sS'group_name'
p48895
S'Advanced'
p48896
sa(dp48897
S'description'
p48898
g3
sS'cpp_type'
p48899
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p48900
sS'default'
p48901
S'NodalMaxValue'
p48902
sS'name'
p48903
S'type'
p48904
sS'required'
p48905
I00
sS'group_name'
p48906
Nsa(dp48907
S'description'
p48908
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p48909
sS'cpp_type'
p48910
S'bool'
p48911
sS'default'
p48912
S'0'
p48913
sS'name'
p48914
S'unique_node_execute'
p48915
sS'required'
p48916
I00
sS'group_name'
p48917
Nsa(dp48918
S'description'
p48919
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48920
sS'cpp_type'
p48921
S'bool'
p48922
sS'default'
p48923
S'0'
p48924
sS'name'
p48925
S'use_displaced_mesh'
p48926
sS'required'
p48927
I00
sS'group_name'
p48928
S'Advanced'
p48929
sa(dp48930
S'description'
p48931
S'The name of the variable that this postprocessor operates on\n'
p48932
sS'cpp_type'
p48933
S'std::vector<VariableName>'
p48934
sS'default'
p48935
g3
sS'name'
p48936
S'variable'
p48937
sS'required'
p48938
I01
sS'group_name'
p48939
NsasS'name'
p48940
S'/UserObjects/NodalMaxValue'
p48941
sa(dp48942
S'description'
p48943
g3
sS'subblocks'
p48944
NsS'parameters'
p48945
(lp48946
(dp48947
S'description'
p48948
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p48949
sS'cpp_type'
p48950
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p48951
sS'default'
p48952
g3
sS'name'
p48953
S'boundary'
p48954
sS'required'
p48955
I01
sS'group_name'
p48956
Nsa(dp48957
S'description'
p48958
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48959
sS'cpp_type'
p48960
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p48961
sS'default'
p48962
g3
sS'name'
p48963
S'control_tags'
p48964
sS'required'
p48965
I00
sS'group_name'
p48966
S'Advanced'
p48967
sa(dp48968
S'description'
p48969
S"Node set ID which contains the nodes that are in 'corners'.\n"
p48970
sS'cpp_type'
p48971
S'BoundaryName'
p48972
sS'default'
p48973
g3
sS'name'
p48974
S'corner_boundary'
p48975
sS'required'
p48976
I01
sS'group_name'
p48977
Nsa(dp48978
S'description'
p48979
S'Set the enabled status of the MooseObject.\n'
p48980
sS'cpp_type'
p48981
S'bool'
p48982
sS'default'
p48983
S'1'
p48984
sS'name'
p48985
S'enable'
p48986
sS'required'
p48987
I00
sS'group_name'
p48988
S'Advanced'
p48989
sa(dp48990
S'name'
p48991
S'execute_on'
p48992
sS'cpp_type'
p48993
S'MultiMooseEnum'
p48994
sS'default'
p48995
S'TIMESTEP_END'
p48996
sS'description'
p48997
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48998
sS'required'
p48999
I00
sS'options'
p49000
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49001
sS'group_name'
p49002
Nsa(dp49003
S'description'
p49004
g3
sS'cpp_type'
p49005
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49006
sS'default'
p49007
S'NodalNormalsCorner'
p49008
sS'name'
p49009
S'type'
p49010
sS'required'
p49011
I00
sS'group_name'
p49012
Nsa(dp49013
S'description'
p49014
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49015
sS'cpp_type'
p49016
S'bool'
p49017
sS'default'
p49018
S'0'
p49019
sS'name'
p49020
S'use_displaced_mesh'
p49021
sS'required'
p49022
I00
sS'group_name'
p49023
S'Advanced'
p49024
sasS'name'
p49025
S'/UserObjects/NodalNormalsCorner'
p49026
sa(dp49027
S'description'
p49028
g3
sS'subblocks'
p49029
NsS'parameters'
p49030
(lp49031
(dp49032
S'description'
p49033
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49034
sS'cpp_type'
p49035
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p49036
sS'default'
p49037
g3
sS'name'
p49038
S'block'
p49039
sS'required'
p49040
I00
sS'group_name'
p49041
Nsa(dp49042
S'description'
p49043
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p49044
sS'cpp_type'
p49045
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p49046
sS'default'
p49047
g3
sS'name'
p49048
S'boundary'
p49049
sS'required'
p49050
I00
sS'group_name'
p49051
Nsa(dp49052
S'description'
p49053
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49054
sS'cpp_type'
p49055
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49056
sS'default'
p49057
g3
sS'name'
p49058
S'control_tags'
p49059
sS'required'
p49060
I00
sS'group_name'
p49061
S'Advanced'
p49062
sa(dp49063
S'description'
p49064
S'Set the enabled status of the MooseObject.\n'
p49065
sS'cpp_type'
p49066
S'bool'
p49067
sS'default'
p49068
S'1'
p49069
sS'name'
p49070
S'enable'
p49071
sS'required'
p49072
I00
sS'group_name'
p49073
S'Advanced'
p49074
sa(dp49075
S'name'
p49076
S'execute_on'
p49077
sS'cpp_type'
p49078
S'MultiMooseEnum'
p49079
sS'default'
p49080
S'TIMESTEP_END'
p49081
sS'description'
p49082
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49083
sS'required'
p49084
I00
sS'options'
p49085
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49086
sS'group_name'
p49087
Nsa(dp49088
S'description'
p49089
S'The seed for the master random number generator\n'
p49090
sS'cpp_type'
p49091
S'unsigned int'
p49092
sS'default'
p49093
S'0'
p49094
sS'name'
p49095
S'seed'
p49096
sS'required'
p49097
I00
sS'group_name'
p49098
S'Advanced'
p49099
sa(dp49100
S'description'
p49101
g3
sS'cpp_type'
p49102
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49103
sS'default'
p49104
S'NodalNormalsEvaluator'
p49105
sS'name'
p49106
S'type'
p49107
sS'required'
p49108
I00
sS'group_name'
p49109
Nsa(dp49110
S'description'
p49111
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p49112
sS'cpp_type'
p49113
S'bool'
p49114
sS'default'
p49115
S'0'
p49116
sS'name'
p49117
S'unique_node_execute'
p49118
sS'required'
p49119
I00
sS'group_name'
p49120
Nsa(dp49121
S'description'
p49122
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49123
sS'cpp_type'
p49124
S'bool'
p49125
sS'default'
p49126
S'0'
p49127
sS'name'
p49128
S'use_displaced_mesh'
p49129
sS'required'
p49130
I00
sS'group_name'
p49131
S'Advanced'
p49132
sasS'name'
p49133
S'/UserObjects/NodalNormalsEvaluator'
p49134
sa(dp49135
S'description'
p49136
g3
sS'subblocks'
p49137
NsS'parameters'
p49138
(lp49139
(dp49140
S'description'
p49141
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49142
sS'cpp_type'
p49143
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p49144
sS'default'
p49145
g3
sS'name'
p49146
S'block'
p49147
sS'required'
p49148
I00
sS'group_name'
p49149
Nsa(dp49150
S'description'
p49151
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p49152
sS'cpp_type'
p49153
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p49154
sS'default'
p49155
g3
sS'name'
p49156
S'boundary'
p49157
sS'required'
p49158
I00
sS'group_name'
p49159
Nsa(dp49160
S'description'
p49161
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49162
sS'cpp_type'
p49163
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49164
sS'default'
p49165
g3
sS'name'
p49166
S'control_tags'
p49167
sS'required'
p49168
I00
sS'group_name'
p49169
S'Advanced'
p49170
sa(dp49171
S'description'
p49172
S"Node set ID which contains the nodes that are in 'corners'.\n"
p49173
sS'cpp_type'
p49174
S'BoundaryName'
p49175
sS'default'
p49176
g3
sS'name'
p49177
S'corner_boundary'
p49178
sS'required'
p49179
I00
sS'group_name'
p49180
Nsa(dp49181
S'description'
p49182
S'Set the enabled status of the MooseObject.\n'
p49183
sS'cpp_type'
p49184
S'bool'
p49185
sS'default'
p49186
S'1'
p49187
sS'name'
p49188
S'enable'
p49189
sS'required'
p49190
I00
sS'group_name'
p49191
S'Advanced'
p49192
sa(dp49193
S'name'
p49194
S'execute_on'
p49195
sS'cpp_type'
p49196
S'MultiMooseEnum'
p49197
sS'default'
p49198
S'TIMESTEP_END'
p49199
sS'description'
p49200
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49201
sS'required'
p49202
I00
sS'options'
p49203
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49204
sS'group_name'
p49205
Nsa(dp49206
S'description'
p49207
S'The seed for the master random number generator\n'
p49208
sS'cpp_type'
p49209
S'unsigned int'
p49210
sS'default'
p49211
S'0'
p49212
sS'name'
p49213
S'seed'
p49214
sS'required'
p49215
I00
sS'group_name'
p49216
S'Advanced'
p49217
sa(dp49218
S'description'
p49219
g3
sS'cpp_type'
p49220
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49221
sS'default'
p49222
S'NodalNormalsPreprocessor'
p49223
sS'name'
p49224
S'type'
p49225
sS'required'
p49226
I00
sS'group_name'
p49227
Nsa(dp49228
S'description'
p49229
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49230
sS'cpp_type'
p49231
S'bool'
p49232
sS'default'
p49233
S'0'
p49234
sS'name'
p49235
S'use_displaced_mesh'
p49236
sS'required'
p49237
I00
sS'group_name'
p49238
S'Advanced'
p49239
sasS'name'
p49240
S'/UserObjects/NodalNormalsPreprocessor'
p49241
sa(dp49242
S'description'
p49243
g3
sS'subblocks'
p49244
NsS'parameters'
p49245
(lp49246
(dp49247
S'description'
p49248
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49249
sS'cpp_type'
p49250
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p49251
sS'default'
p49252
g3
sS'name'
p49253
S'block'
p49254
sS'required'
p49255
I00
sS'group_name'
p49256
Nsa(dp49257
S'description'
p49258
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p49259
sS'cpp_type'
p49260
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p49261
sS'default'
p49262
g3
sS'name'
p49263
S'boundary'
p49264
sS'required'
p49265
I00
sS'group_name'
p49266
Nsa(dp49267
S'description'
p49268
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49269
sS'cpp_type'
p49270
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49271
sS'default'
p49272
g3
sS'name'
p49273
S'control_tags'
p49274
sS'required'
p49275
I00
sS'group_name'
p49276
S'Advanced'
p49277
sa(dp49278
S'description'
p49279
S'Set the enabled status of the MooseObject.\n'
p49280
sS'cpp_type'
p49281
S'bool'
p49282
sS'default'
p49283
S'1'
p49284
sS'name'
p49285
S'enable'
p49286
sS'required'
p49287
I00
sS'group_name'
p49288
S'Advanced'
p49289
sa(dp49290
S'name'
p49291
S'execute_on'
p49292
sS'cpp_type'
p49293
S'MultiMooseEnum'
p49294
sS'default'
p49295
S'TIMESTEP_END'
p49296
sS'description'
p49297
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49298
sS'required'
p49299
I00
sS'options'
p49300
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49301
sS'group_name'
p49302
Nsa(dp49303
S'description'
p49304
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49305
sS'cpp_type'
p49306
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49307
sS'default'
p49308
g3
sS'name'
p49309
S'outputs'
p49310
sS'required'
p49311
I00
sS'group_name'
p49312
S'Advanced'
p49313
sa(dp49314
S'description'
p49315
S'The seed for the master random number generator\n'
p49316
sS'cpp_type'
p49317
S'unsigned int'
p49318
sS'default'
p49319
S'0'
p49320
sS'name'
p49321
S'seed'
p49322
sS'required'
p49323
I00
sS'group_name'
p49324
S'Advanced'
p49325
sa(dp49326
S'description'
p49327
g3
sS'cpp_type'
p49328
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49329
sS'default'
p49330
S'NodalProxyMaxValue'
p49331
sS'name'
p49332
S'type'
p49333
sS'required'
p49334
I00
sS'group_name'
p49335
Nsa(dp49336
S'description'
p49337
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p49338
sS'cpp_type'
p49339
S'bool'
p49340
sS'default'
p49341
S'0'
p49342
sS'name'
p49343
S'unique_node_execute'
p49344
sS'required'
p49345
I00
sS'group_name'
p49346
Nsa(dp49347
S'description'
p49348
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49349
sS'cpp_type'
p49350
S'bool'
p49351
sS'default'
p49352
S'0'
p49353
sS'name'
p49354
S'use_displaced_mesh'
p49355
sS'required'
p49356
I00
sS'group_name'
p49357
S'Advanced'
p49358
sa(dp49359
S'description'
p49360
S'The name of the variable that this postprocessor operates on\n'
p49361
sS'cpp_type'
p49362
S'std::vector<VariableName>'
p49363
sS'default'
p49364
g3
sS'name'
p49365
S'variable'
p49366
sS'required'
p49367
I01
sS'group_name'
p49368
NsasS'name'
p49369
S'/UserObjects/NodalProxyMaxValue'
p49370
sa(dp49371
S'description'
p49372
g3
sS'subblocks'
p49373
NsS'parameters'
p49374
(lp49375
(dp49376
S'description'
p49377
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49378
sS'cpp_type'
p49379
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p49380
sS'default'
p49381
g3
sS'name'
p49382
S'block'
p49383
sS'required'
p49384
I00
sS'group_name'
p49385
Nsa(dp49386
S'description'
p49387
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p49388
sS'cpp_type'
p49389
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p49390
sS'default'
p49391
g3
sS'name'
p49392
S'boundary'
p49393
sS'required'
p49394
I00
sS'group_name'
p49395
Nsa(dp49396
S'description'
p49397
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49398
sS'cpp_type'
p49399
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49400
sS'default'
p49401
g3
sS'name'
p49402
S'control_tags'
p49403
sS'required'
p49404
I00
sS'group_name'
p49405
S'Advanced'
p49406
sa(dp49407
S'description'
p49408
S'Set the enabled status of the MooseObject.\n'
p49409
sS'cpp_type'
p49410
S'bool'
p49411
sS'default'
p49412
S'1'
p49413
sS'name'
p49414
S'enable'
p49415
sS'required'
p49416
I00
sS'group_name'
p49417
S'Advanced'
p49418
sa(dp49419
S'name'
p49420
S'execute_on'
p49421
sS'cpp_type'
p49422
S'MultiMooseEnum'
p49423
sS'default'
p49424
S'TIMESTEP_END'
p49425
sS'description'
p49426
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49427
sS'required'
p49428
I00
sS'options'
p49429
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49430
sS'group_name'
p49431
Nsa(dp49432
S'description'
p49433
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49434
sS'cpp_type'
p49435
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49436
sS'default'
p49437
g3
sS'name'
p49438
S'outputs'
p49439
sS'required'
p49440
I00
sS'group_name'
p49441
S'Advanced'
p49442
sa(dp49443
S'description'
p49444
S'The seed for the master random number generator\n'
p49445
sS'cpp_type'
p49446
S'unsigned int'
p49447
sS'default'
p49448
S'0'
p49449
sS'name'
p49450
S'seed'
p49451
sS'required'
p49452
I00
sS'group_name'
p49453
S'Advanced'
p49454
sa(dp49455
S'description'
p49456
g3
sS'cpp_type'
p49457
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49458
sS'default'
p49459
S'NodalSum'
p49460
sS'name'
p49461
S'type'
p49462
sS'required'
p49463
I00
sS'group_name'
p49464
Nsa(dp49465
S'description'
p49466
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p49467
sS'cpp_type'
p49468
S'bool'
p49469
sS'default'
p49470
S'1'
p49471
sS'name'
p49472
S'unique_node_execute'
p49473
sS'required'
p49474
I00
sS'group_name'
p49475
Nsa(dp49476
S'description'
p49477
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49478
sS'cpp_type'
p49479
S'bool'
p49480
sS'default'
p49481
S'0'
p49482
sS'name'
p49483
S'use_displaced_mesh'
p49484
sS'required'
p49485
I00
sS'group_name'
p49486
S'Advanced'
p49487
sa(dp49488
S'description'
p49489
S'The name of the variable that this postprocessor operates on\n'
p49490
sS'cpp_type'
p49491
S'std::vector<VariableName>'
p49492
sS'default'
p49493
g3
sS'name'
p49494
S'variable'
p49495
sS'required'
p49496
I01
sS'group_name'
p49497
NsasS'name'
p49498
S'/UserObjects/NodalSum'
p49499
sa(dp49500
S'description'
p49501
g3
sS'subblocks'
p49502
NsS'parameters'
p49503
(lp49504
(dp49505
S'description'
p49506
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49507
sS'cpp_type'
p49508
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49509
sS'default'
p49510
g3
sS'name'
p49511
S'control_tags'
p49512
sS'required'
p49513
I00
sS'group_name'
p49514
S'Advanced'
p49515
sa(dp49516
S'description'
p49517
S'Set the enabled status of the MooseObject.\n'
p49518
sS'cpp_type'
p49519
S'bool'
p49520
sS'default'
p49521
S'1'
p49522
sS'name'
p49523
S'enable'
p49524
sS'required'
p49525
I00
sS'group_name'
p49526
S'Advanced'
p49527
sa(dp49528
S'name'
p49529
S'execute_on'
p49530
sS'cpp_type'
p49531
S'MultiMooseEnum'
p49532
sS'default'
p49533
S'TIMESTEP_END'
p49534
sS'description'
p49535
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49536
sS'required'
p49537
I00
sS'options'
p49538
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49539
sS'group_name'
p49540
Nsa(dp49541
S'description'
p49542
S'The ID of the node where we monitor\n'
p49543
sS'cpp_type'
p49544
S'unsigned int'
p49545
sS'default'
p49546
g3
sS'name'
p49547
S'nodeid'
p49548
sS'required'
p49549
I01
sS'group_name'
p49550
Nsa(dp49551
S'description'
p49552
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49553
sS'cpp_type'
p49554
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49555
sS'default'
p49556
g3
sS'name'
p49557
S'outputs'
p49558
sS'required'
p49559
I00
sS'group_name'
p49560
S'Advanced'
p49561
sa(dp49562
S'description'
p49563
S'A scale factor to be applied to the variable\n'
p49564
sS'cpp_type'
p49565
S'double'
p49566
sS'default'
p49567
S'1'
p49568
sS'name'
p49569
S'scale_factor'
p49570
sS'required'
p49571
I00
sS'group_name'
p49572
Nsa(dp49573
S'description'
p49574
g3
sS'cpp_type'
p49575
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49576
sS'default'
p49577
S'NodalVariableValue'
p49578
sS'name'
p49579
S'type'
p49580
sS'required'
p49581
I00
sS'group_name'
p49582
Nsa(dp49583
S'description'
p49584
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49585
sS'cpp_type'
p49586
S'bool'
p49587
sS'default'
p49588
S'0'
p49589
sS'name'
p49590
S'use_displaced_mesh'
p49591
sS'required'
p49592
I00
sS'group_name'
p49593
S'Advanced'
p49594
sa(dp49595
S'description'
p49596
S'The variable to be monitored\n'
p49597
sS'cpp_type'
p49598
S'VariableName'
p49599
sS'default'
p49600
g3
sS'name'
p49601
S'variable'
p49602
sS'required'
p49603
I01
sS'group_name'
p49604
NsasS'name'
p49605
S'/UserObjects/NodalVariableValue'
p49606
sa(dp49607
S'description'
p49608
g3
sS'subblocks'
p49609
NsS'parameters'
p49610
(lp49611
(dp49612
S'description'
p49613
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49614
sS'cpp_type'
p49615
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49616
sS'default'
p49617
g3
sS'name'
p49618
S'control_tags'
p49619
sS'required'
p49620
I00
sS'group_name'
p49621
S'Advanced'
p49622
sa(dp49623
S'description'
p49624
S'Set the enabled status of the MooseObject.\n'
p49625
sS'cpp_type'
p49626
S'bool'
p49627
sS'default'
p49628
S'1'
p49629
sS'name'
p49630
S'enable'
p49631
sS'required'
p49632
I00
sS'group_name'
p49633
S'Advanced'
p49634
sa(dp49635
S'name'
p49636
S'execute_on'
p49637
sS'cpp_type'
p49638
S'MultiMooseEnum'
p49639
sS'default'
p49640
S'TIMESTEP_END'
p49641
sS'description'
p49642
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49643
sS'required'
p49644
I00
sS'options'
p49645
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49646
sS'group_name'
p49647
Nsa(dp49648
S'description'
p49649
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49650
sS'cpp_type'
p49651
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49652
sS'default'
p49653
g3
sS'name'
p49654
S'outputs'
p49655
sS'required'
p49656
I00
sS'group_name'
p49657
S'Advanced'
p49658
sa(dp49659
S'name'
p49660
S'system'
p49661
sS'cpp_type'
p49662
S'MooseEnum'
p49663
sS'default'
p49664
S'ALL'
p49665
sS'description'
p49666
S'The system(s) to retrieve the number of DOFs from (NL, AUX, ALL). Default == ALL\n'
p49667
sS'required'
p49668
I00
sS'options'
p49669
S'NL AUX ALL'
p49670
sS'group_name'
p49671
Nsa(dp49672
S'description'
p49673
g3
sS'cpp_type'
p49674
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49675
sS'default'
p49676
S'NumDOFs'
p49677
sS'name'
p49678
S'type'
p49679
sS'required'
p49680
I00
sS'group_name'
p49681
Nsa(dp49682
S'description'
p49683
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49684
sS'cpp_type'
p49685
S'bool'
p49686
sS'default'
p49687
S'0'
p49688
sS'name'
p49689
S'use_displaced_mesh'
p49690
sS'required'
p49691
I00
sS'group_name'
p49692
S'Advanced'
p49693
sasS'name'
p49694
S'/UserObjects/NumDOFs'
p49695
sa(dp49696
S'description'
p49697
g3
sS'subblocks'
p49698
NsS'parameters'
p49699
(lp49700
(dp49701
S'description'
p49702
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49703
sS'cpp_type'
p49704
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49705
sS'default'
p49706
g3
sS'name'
p49707
S'control_tags'
p49708
sS'required'
p49709
I00
sS'group_name'
p49710
S'Advanced'
p49711
sa(dp49712
S'name'
p49713
S'elem_filter'
p49714
sS'cpp_type'
p49715
S'MooseEnum'
p49716
sS'default'
p49717
S'active'
p49718
sS'description'
p49719
S'The type of elements to include in the count (active, total). Default == active\n'
p49720
sS'required'
p49721
I00
sS'options'
p49722
S'active total'
p49723
sS'group_name'
p49724
Nsa(dp49725
S'description'
p49726
S'Set the enabled status of the MooseObject.\n'
p49727
sS'cpp_type'
p49728
S'bool'
p49729
sS'default'
p49730
S'1'
p49731
sS'name'
p49732
S'enable'
p49733
sS'required'
p49734
I00
sS'group_name'
p49735
S'Advanced'
p49736
sa(dp49737
S'name'
p49738
S'execute_on'
p49739
sS'cpp_type'
p49740
S'MultiMooseEnum'
p49741
sS'default'
p49742
S'TIMESTEP_END'
p49743
sS'description'
p49744
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49745
sS'required'
p49746
I00
sS'options'
p49747
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49748
sS'group_name'
p49749
Nsa(dp49750
S'description'
p49751
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49752
sS'cpp_type'
p49753
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49754
sS'default'
p49755
g3
sS'name'
p49756
S'outputs'
p49757
sS'required'
p49758
I00
sS'group_name'
p49759
S'Advanced'
p49760
sa(dp49761
S'description'
p49762
g3
sS'cpp_type'
p49763
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49764
sS'default'
p49765
S'NumElems'
p49766
sS'name'
p49767
S'type'
p49768
sS'required'
p49769
I00
sS'group_name'
p49770
Nsa(dp49771
S'description'
p49772
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49773
sS'cpp_type'
p49774
S'bool'
p49775
sS'default'
p49776
S'0'
p49777
sS'name'
p49778
S'use_displaced_mesh'
p49779
sS'required'
p49780
I00
sS'group_name'
p49781
S'Advanced'
p49782
sasS'name'
p49783
S'/UserObjects/NumElems'
p49784
sa(dp49785
S'description'
p49786
g3
sS'subblocks'
p49787
NsS'parameters'
p49788
(lp49789
(dp49790
S'description'
p49791
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49792
sS'cpp_type'
p49793
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49794
sS'default'
p49795
g3
sS'name'
p49796
S'control_tags'
p49797
sS'required'
p49798
I00
sS'group_name'
p49799
S'Advanced'
p49800
sa(dp49801
S'description'
p49802
S'Set the enabled status of the MooseObject.\n'
p49803
sS'cpp_type'
p49804
S'bool'
p49805
sS'default'
p49806
S'1'
p49807
sS'name'
p49808
S'enable'
p49809
sS'required'
p49810
I00
sS'group_name'
p49811
S'Advanced'
p49812
sa(dp49813
S'name'
p49814
S'execute_on'
p49815
sS'cpp_type'
p49816
S'MultiMooseEnum'
p49817
sS'default'
p49818
S'TIMESTEP_END'
p49819
sS'description'
p49820
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49821
sS'required'
p49822
I00
sS'options'
p49823
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49824
sS'group_name'
p49825
Nsa(dp49826
S'description'
p49827
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49828
sS'cpp_type'
p49829
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49830
sS'default'
p49831
g3
sS'name'
p49832
S'outputs'
p49833
sS'required'
p49834
I00
sS'group_name'
p49835
S'Advanced'
p49836
sa(dp49837
S'description'
p49838
g3
sS'cpp_type'
p49839
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49840
sS'default'
p49841
S'NumLinearIterations'
p49842
sS'name'
p49843
S'type'
p49844
sS'required'
p49845
I00
sS'group_name'
p49846
Nsa(dp49847
S'description'
p49848
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49849
sS'cpp_type'
p49850
S'bool'
p49851
sS'default'
p49852
S'0'
p49853
sS'name'
p49854
S'use_displaced_mesh'
p49855
sS'required'
p49856
I00
sS'group_name'
p49857
S'Advanced'
p49858
sasS'name'
p49859
S'/UserObjects/NumLinearIterations'
p49860
sa(dp49861
S'description'
p49862
g3
sS'subblocks'
p49863
NsS'parameters'
p49864
(lp49865
(dp49866
S'description'
p49867
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49868
sS'cpp_type'
p49869
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49870
sS'default'
p49871
g3
sS'name'
p49872
S'control_tags'
p49873
sS'required'
p49874
I00
sS'group_name'
p49875
S'Advanced'
p49876
sa(dp49877
S'description'
p49878
S'Set the enabled status of the MooseObject.\n'
p49879
sS'cpp_type'
p49880
S'bool'
p49881
sS'default'
p49882
S'1'
p49883
sS'name'
p49884
S'enable'
p49885
sS'required'
p49886
I00
sS'group_name'
p49887
S'Advanced'
p49888
sa(dp49889
S'name'
p49890
S'execute_on'
p49891
sS'cpp_type'
p49892
S'MultiMooseEnum'
p49893
sS'default'
p49894
S'TIMESTEP_END'
p49895
sS'description'
p49896
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49897
sS'required'
p49898
I00
sS'options'
p49899
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49900
sS'group_name'
p49901
Nsa(dp49902
S'description'
p49903
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49904
sS'cpp_type'
p49905
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49906
sS'default'
p49907
g3
sS'name'
p49908
S'outputs'
p49909
sS'required'
p49910
I00
sS'group_name'
p49911
S'Advanced'
p49912
sa(dp49913
S'description'
p49914
g3
sS'cpp_type'
p49915
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49916
sS'default'
p49917
S'NumNodes'
p49918
sS'name'
p49919
S'type'
p49920
sS'required'
p49921
I00
sS'group_name'
p49922
Nsa(dp49923
S'description'
p49924
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49925
sS'cpp_type'
p49926
S'bool'
p49927
sS'default'
p49928
S'0'
p49929
sS'name'
p49930
S'use_displaced_mesh'
p49931
sS'required'
p49932
I00
sS'group_name'
p49933
S'Advanced'
p49934
sasS'name'
p49935
S'/UserObjects/NumNodes'
p49936
sa(dp49937
S'description'
p49938
g3
sS'subblocks'
p49939
NsS'parameters'
p49940
(lp49941
(dp49942
S'description'
p49943
S'When set to true, accumulates to count the total over all Picard iterations for each step\n'
p49944
sS'cpp_type'
p49945
S'bool'
p49946
sS'default'
p49947
S'0'
p49948
sS'name'
p49949
S'accumulate_over_step'
p49950
sS'required'
p49951
I00
sS'group_name'
p49952
Nsa(dp49953
S'description'
p49954
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49955
sS'cpp_type'
p49956
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49957
sS'default'
p49958
g3
sS'name'
p49959
S'control_tags'
p49960
sS'required'
p49961
I00
sS'group_name'
p49962
S'Advanced'
p49963
sa(dp49964
S'description'
p49965
S'Set the enabled status of the MooseObject.\n'
p49966
sS'cpp_type'
p49967
S'bool'
p49968
sS'default'
p49969
S'1'
p49970
sS'name'
p49971
S'enable'
p49972
sS'required'
p49973
I00
sS'group_name'
p49974
S'Advanced'
p49975
sa(dp49976
S'name'
p49977
S'execute_on'
p49978
sS'cpp_type'
p49979
S'MultiMooseEnum'
p49980
sS'default'
p49981
S'TIMESTEP_END'
p49982
sS'description'
p49983
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49984
sS'required'
p49985
I00
sS'options'
p49986
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49987
sS'group_name'
p49988
Nsa(dp49989
S'description'
p49990
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49991
sS'cpp_type'
p49992
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49993
sS'default'
p49994
g3
sS'name'
p49995
S'outputs'
p49996
sS'required'
p49997
I00
sS'group_name'
p49998
S'Advanced'
p49999
sa(dp50000
S'description'
p50001
g3
sS'cpp_type'
p50002
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50003
sS'default'
p50004
S'NumNonlinearIterations'
p50005
sS'name'
p50006
S'type'
p50007
sS'required'
p50008
I00
sS'group_name'
p50009
Nsa(dp50010
S'description'
p50011
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50012
sS'cpp_type'
p50013
S'bool'
p50014
sS'default'
p50015
S'0'
p50016
sS'name'
p50017
S'use_displaced_mesh'
p50018
sS'required'
p50019
I00
sS'group_name'
p50020
S'Advanced'
p50021
sasS'name'
p50022
S'/UserObjects/NumNonlinearIterations'
p50023
sa(dp50024
S'description'
p50025
g3
sS'subblocks'
p50026
NsS'parameters'
p50027
(lp50028
(dp50029
S'description'
p50030
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50031
sS'cpp_type'
p50032
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50033
sS'default'
p50034
g3
sS'name'
p50035
S'control_tags'
p50036
sS'required'
p50037
I00
sS'group_name'
p50038
S'Advanced'
p50039
sa(dp50040
S'description'
p50041
S'Set the enabled status of the MooseObject.\n'
p50042
sS'cpp_type'
p50043
S'bool'
p50044
sS'default'
p50045
S'1'
p50046
sS'name'
p50047
S'enable'
p50048
sS'required'
p50049
I00
sS'group_name'
p50050
S'Advanced'
p50051
sa(dp50052
S'name'
p50053
S'execute_on'
p50054
sS'cpp_type'
p50055
S'MultiMooseEnum'
p50056
sS'default'
p50057
S'TIMESTEP_END'
p50058
sS'description'
p50059
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50060
sS'required'
p50061
I00
sS'options'
p50062
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50063
sS'group_name'
p50064
Nsa(dp50065
S'description'
p50066
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50067
sS'cpp_type'
p50068
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50069
sS'default'
p50070
g3
sS'name'
p50071
S'outputs'
p50072
sS'required'
p50073
I00
sS'group_name'
p50074
S'Advanced'
p50075
sa(dp50076
S'description'
p50077
g3
sS'cpp_type'
p50078
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50079
sS'default'
p50080
S'NumPicardIterations'
p50081
sS'name'
p50082
S'type'
p50083
sS'required'
p50084
I00
sS'group_name'
p50085
Nsa(dp50086
S'description'
p50087
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50088
sS'cpp_type'
p50089
S'bool'
p50090
sS'default'
p50091
S'0'
p50092
sS'name'
p50093
S'use_displaced_mesh'
p50094
sS'required'
p50095
I00
sS'group_name'
p50096
S'Advanced'
p50097
sasS'name'
p50098
S'/UserObjects/NumPicardIterations'
p50099
sa(dp50100
S'description'
p50101
g3
sS'subblocks'
p50102
NsS'parameters'
p50103
(lp50104
(dp50105
S'description'
p50106
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50107
sS'cpp_type'
p50108
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50109
sS'default'
p50110
g3
sS'name'
p50111
S'control_tags'
p50112
sS'required'
p50113
I00
sS'group_name'
p50114
S'Advanced'
p50115
sa(dp50116
S'description'
p50117
S'Set the enabled status of the MooseObject.\n'
p50118
sS'cpp_type'
p50119
S'bool'
p50120
sS'default'
p50121
S'1'
p50122
sS'name'
p50123
S'enable'
p50124
sS'required'
p50125
I00
sS'group_name'
p50126
S'Advanced'
p50127
sa(dp50128
S'name'
p50129
S'execute_on'
p50130
sS'cpp_type'
p50131
S'MultiMooseEnum'
p50132
sS'default'
p50133
S'TIMESTEP_END'
p50134
sS'description'
p50135
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50136
sS'required'
p50137
I00
sS'options'
p50138
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50139
sS'group_name'
p50140
Nsa(dp50141
S'description'
p50142
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50143
sS'cpp_type'
p50144
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50145
sS'default'
p50146
g3
sS'name'
p50147
S'outputs'
p50148
sS'required'
p50149
I00
sS'group_name'
p50150
S'Advanced'
p50151
sa(dp50152
S'description'
p50153
g3
sS'cpp_type'
p50154
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50155
sS'default'
p50156
S'NumResidualEvaluations'
p50157
sS'name'
p50158
S'type'
p50159
sS'required'
p50160
I00
sS'group_name'
p50161
Nsa(dp50162
S'description'
p50163
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50164
sS'cpp_type'
p50165
S'bool'
p50166
sS'default'
p50167
S'0'
p50168
sS'name'
p50169
S'use_displaced_mesh'
p50170
sS'required'
p50171
I00
sS'group_name'
p50172
S'Advanced'
p50173
sasS'name'
p50174
S'/UserObjects/NumResidualEvaluations'
p50175
sa(dp50176
S'description'
p50177
g3
sS'subblocks'
p50178
NsS'parameters'
p50179
(lp50180
(dp50181
S'description'
p50182
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50183
sS'cpp_type'
p50184
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50185
sS'default'
p50186
g3
sS'name'
p50187
S'control_tags'
p50188
sS'required'
p50189
I00
sS'group_name'
p50190
S'Advanced'
p50191
sa(dp50192
S'description'
p50193
S'Set the enabled status of the MooseObject.\n'
p50194
sS'cpp_type'
p50195
S'bool'
p50196
sS'default'
p50197
S'1'
p50198
sS'name'
p50199
S'enable'
p50200
sS'required'
p50201
I00
sS'group_name'
p50202
S'Advanced'
p50203
sa(dp50204
S'name'
p50205
S'execute_on'
p50206
sS'cpp_type'
p50207
S'MultiMooseEnum'
p50208
sS'default'
p50209
S'TIMESTEP_END'
p50210
sS'description'
p50211
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50212
sS'required'
p50213
I00
sS'options'
p50214
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50215
sS'group_name'
p50216
Nsa(dp50217
S'description'
p50218
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50219
sS'cpp_type'
p50220
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50221
sS'default'
p50222
g3
sS'name'
p50223
S'outputs'
p50224
sS'required'
p50225
I00
sS'group_name'
p50226
S'Advanced'
p50227
sa(dp50228
S'name'
p50229
S'system'
p50230
sS'cpp_type'
p50231
S'MooseEnum'
p50232
sS'default'
p50233
S'nonlinear'
p50234
sS'description'
p50235
S'The system for which you want to print the number of variables.\n'
p50236
sS'required'
p50237
I00
sS'options'
p50238
S'nonlinear auxiliary'
p50239
sS'group_name'
p50240
Nsa(dp50241
S'description'
p50242
g3
sS'cpp_type'
p50243
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50244
sS'default'
p50245
S'NumVars'
p50246
sS'name'
p50247
S'type'
p50248
sS'required'
p50249
I00
sS'group_name'
p50250
Nsa(dp50251
S'description'
p50252
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50253
sS'cpp_type'
p50254
S'bool'
p50255
sS'default'
p50256
S'0'
p50257
sS'name'
p50258
S'use_displaced_mesh'
p50259
sS'required'
p50260
I00
sS'group_name'
p50261
S'Advanced'
p50262
sasS'name'
p50263
S'/UserObjects/NumVars'
p50264
sa(dp50265
S'description'
p50266
g3
sS'subblocks'
p50267
NsS'parameters'
p50268
(lp50269
(dp50270
S'description'
p50271
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50272
sS'cpp_type'
p50273
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50274
sS'default'
p50275
g3
sS'name'
p50276
S'control_tags'
p50277
sS'required'
p50278
I00
sS'group_name'
p50279
S'Advanced'
p50280
sa(dp50281
S'description'
p50282
S'Set the enabled status of the MooseObject.\n'
p50283
sS'cpp_type'
p50284
S'bool'
p50285
sS'default'
p50286
S'1'
p50287
sS'name'
p50288
S'enable'
p50289
sS'required'
p50290
I00
sS'group_name'
p50291
S'Advanced'
p50292
sa(dp50293
S'name'
p50294
S'execute_on'
p50295
sS'cpp_type'
p50296
S'MultiMooseEnum'
p50297
sS'default'
p50298
S'TIMESTEP_END'
p50299
sS'description'
p50300
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50301
sS'required'
p50302
I00
sS'options'
p50303
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50304
sS'group_name'
p50305
Nsa(dp50306
S'description'
p50307
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50308
sS'cpp_type'
p50309
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50310
sS'default'
p50311
g3
sS'name'
p50312
S'outputs'
p50313
sS'required'
p50314
I00
sS'group_name'
p50315
S'Advanced'
p50316
sa(dp50317
S'description'
p50318
S'The name of the postprocessor used for exit criterion\n'
p50319
sS'cpp_type'
p50320
S'PostprocessorName'
p50321
sS'default'
p50322
g3
sS'name'
p50323
S'postprocessor'
p50324
sS'required'
p50325
I01
sS'group_name'
p50326
Nsa(dp50327
S'description'
p50328
g3
sS'cpp_type'
p50329
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50330
sS'default'
p50331
S'PercentChangePostprocessor'
p50332
sS'name'
p50333
S'type'
p50334
sS'required'
p50335
I00
sS'group_name'
p50336
Nsa(dp50337
S'description'
p50338
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50339
sS'cpp_type'
p50340
S'bool'
p50341
sS'default'
p50342
S'0'
p50343
sS'name'
p50344
S'use_displaced_mesh'
p50345
sS'required'
p50346
I00
sS'group_name'
p50347
S'Advanced'
p50348
sasS'name'
p50349
S'/UserObjects/PercentChangePostprocessor'
p50350
sa(dp50351
S'description'
p50352
g3
sS'subblocks'
p50353
NsS'parameters'
p50354
(lp50355
(dp50356
S'description'
p50357
S'The category or "Header" for the event\n'
p50358
sS'cpp_type'
p50359
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50360
sS'default'
p50361
S'Execution'
p50362
sS'name'
p50363
S'category'
p50364
sS'required'
p50365
I00
sS'group_name'
p50366
Nsa(dp50367
S'name'
p50368
S'column'
p50369
sS'cpp_type'
p50370
S'MooseEnum'
p50371
sS'default'
p50372
S'total_time_with_sub'
p50373
sS'description'
p50374
S'The column you want the value of (Default: total_time_with_sub).\n'
p50375
sS'required'
p50376
I00
sS'options'
p50377
S'n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub'
p50378
sS'group_name'
p50379
Nsa(dp50380
S'description'
p50381
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50382
sS'cpp_type'
p50383
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50384
sS'default'
p50385
g3
sS'name'
p50386
S'control_tags'
p50387
sS'required'
p50388
I00
sS'group_name'
p50389
S'Advanced'
p50390
sa(dp50391
S'description'
p50392
S'Set the enabled status of the MooseObject.\n'
p50393
sS'cpp_type'
p50394
S'bool'
p50395
sS'default'
p50396
S'1'
p50397
sS'name'
p50398
S'enable'
p50399
sS'required'
p50400
I00
sS'group_name'
p50401
S'Advanced'
p50402
sa(dp50403
S'description'
p50404
S'The name or "label" of the event ("ALIVE" and "ACTIVE" are also valid events, category and column are ignored for these cases).\n'
p50405
sS'cpp_type'
p50406
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50407
sS'default'
p50408
g3
sS'name'
p50409
S'event'
p50410
sS'required'
p50411
I01
sS'group_name'
p50412
Nsa(dp50413
S'name'
p50414
S'execute_on'
p50415
sS'cpp_type'
p50416
S'MultiMooseEnum'
p50417
sS'default'
p50418
S'TIMESTEP_END'
p50419
sS'description'
p50420
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50421
sS'required'
p50422
I00
sS'options'
p50423
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50424
sS'group_name'
p50425
Nsa(dp50426
S'description'
p50427
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50428
sS'cpp_type'
p50429
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50430
sS'default'
p50431
g3
sS'name'
p50432
S'outputs'
p50433
sS'required'
p50434
I00
sS'group_name'
p50435
S'Advanced'
p50436
sa(dp50437
S'description'
p50438
g3
sS'cpp_type'
p50439
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50440
sS'default'
p50441
S'PerformanceData'
p50442
sS'name'
p50443
S'type'
p50444
sS'required'
p50445
I00
sS'group_name'
p50446
Nsa(dp50447
S'description'
p50448
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50449
sS'cpp_type'
p50450
S'bool'
p50451
sS'default'
p50452
S'0'
p50453
sS'name'
p50454
S'use_displaced_mesh'
p50455
sS'required'
p50456
I00
sS'group_name'
p50457
S'Advanced'
p50458
sasS'name'
p50459
S'/UserObjects/PerformanceData'
p50460
sa(dp50461
S'description'
p50462
g3
sS'subblocks'
p50463
NsS'parameters'
p50464
(lp50465
(dp50466
S'description'
p50467
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50468
sS'cpp_type'
p50469
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50470
sS'default'
p50471
g3
sS'name'
p50472
S'control_tags'
p50473
sS'required'
p50474
I00
sS'group_name'
p50475
S'Advanced'
p50476
sa(dp50477
S'description'
p50478
S'Set the enabled status of the MooseObject.\n'
p50479
sS'cpp_type'
p50480
S'bool'
p50481
sS'default'
p50482
S'1'
p50483
sS'name'
p50484
S'enable'
p50485
sS'required'
p50486
I00
sS'group_name'
p50487
S'Advanced'
p50488
sa(dp50489
S'name'
p50490
S'execute_on'
p50491
sS'cpp_type'
p50492
S'MultiMooseEnum'
p50493
sS'default'
p50494
S'TIMESTEP_END'
p50495
sS'description'
p50496
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50497
sS'required'
p50498
I00
sS'options'
p50499
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50500
sS'group_name'
p50501
Nsa(dp50502
S'description'
p50503
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50504
sS'cpp_type'
p50505
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50506
sS'default'
p50507
g3
sS'name'
p50508
S'outputs'
p50509
sS'required'
p50510
I00
sS'group_name'
p50511
S'Advanced'
p50512
sa(dp50513
S'description'
p50514
S'The physical point where the solution will be evaluated.\n'
p50515
sS'cpp_type'
p50516
S'libMesh::Point'
p50517
sS'default'
p50518
g3
sS'name'
p50519
S'point'
p50520
sS'required'
p50521
I01
sS'group_name'
p50522
Nsa(dp50523
S'description'
p50524
g3
sS'cpp_type'
p50525
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50526
sS'default'
p50527
S'PointValue'
p50528
sS'name'
p50529
S'type'
p50530
sS'required'
p50531
I00
sS'group_name'
p50532
Nsa(dp50533
S'description'
p50534
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50535
sS'cpp_type'
p50536
S'bool'
p50537
sS'default'
p50538
S'0'
p50539
sS'name'
p50540
S'use_displaced_mesh'
p50541
sS'required'
p50542
I00
sS'group_name'
p50543
S'Advanced'
p50544
sa(dp50545
S'description'
p50546
S'The name of the variable that this postprocessor operates on.\n'
p50547
sS'cpp_type'
p50548
S'VariableName'
p50549
sS'default'
p50550
g3
sS'name'
p50551
S'variable'
p50552
sS'required'
p50553
I01
sS'group_name'
p50554
NsasS'name'
p50555
S'/UserObjects/PointValue'
p50556
sa(dp50557
S'description'
p50558
g3
sS'subblocks'
p50559
NsS'parameters'
p50560
(lp50561
(dp50562
S'description'
p50563
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50564
sS'cpp_type'
p50565
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50566
sS'default'
p50567
g3
sS'name'
p50568
S'control_tags'
p50569
sS'required'
p50570
I00
sS'group_name'
p50571
S'Advanced'
p50572
sa(dp50573
S'description'
p50574
S'The default value\n'
p50575
sS'cpp_type'
p50576
S'double'
p50577
sS'default'
p50578
g3
sS'name'
p50579
S'default'
p50580
sS'required'
p50581
I00
sS'group_name'
p50582
Nsa(dp50583
S'description'
p50584
S'Set the enabled status of the MooseObject.\n'
p50585
sS'cpp_type'
p50586
S'bool'
p50587
sS'default'
p50588
S'1'
p50589
sS'name'
p50590
S'enable'
p50591
sS'required'
p50592
I00
sS'group_name'
p50593
S'Advanced'
p50594
sa(dp50595
S'name'
p50596
S'execute_on'
p50597
sS'cpp_type'
p50598
S'MultiMooseEnum'
p50599
sS'default'
p50600
S'TIMESTEP_END'
p50601
sS'description'
p50602
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50603
sS'required'
p50604
I00
sS'options'
p50605
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50606
sS'group_name'
p50607
Nsa(dp50608
S'description'
p50609
S'Initialize the old postprocessor value with the default value\n'
p50610
sS'cpp_type'
p50611
S'bool'
p50612
sS'default'
p50613
S'1'
p50614
sS'name'
p50615
S'initialize_old'
p50616
sS'required'
p50617
I00
sS'group_name'
p50618
Nsa(dp50619
S'description'
p50620
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50621
sS'cpp_type'
p50622
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50623
sS'default'
p50624
g3
sS'name'
p50625
S'outputs'
p50626
sS'required'
p50627
I00
sS'group_name'
p50628
S'Advanced'
p50629
sa(dp50630
S'description'
p50631
g3
sS'cpp_type'
p50632
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50633
sS'default'
p50634
S'Receiver'
p50635
sS'name'
p50636
S'type'
p50637
sS'required'
p50638
I00
sS'group_name'
p50639
Nsa(dp50640
S'description'
p50641
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50642
sS'cpp_type'
p50643
S'bool'
p50644
sS'default'
p50645
S'0'
p50646
sS'name'
p50647
S'use_displaced_mesh'
p50648
sS'required'
p50649
I00
sS'group_name'
p50650
S'Advanced'
p50651
sasS'name'
p50652
S'/UserObjects/Receiver'
p50653
sa(dp50654
S'description'
p50655
g3
sS'subblocks'
p50656
NsS'parameters'
p50657
(lp50658
(dp50659
S'description'
p50660
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50661
sS'cpp_type'
p50662
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50663
sS'default'
p50664
g3
sS'name'
p50665
S'control_tags'
p50666
sS'required'
p50667
I00
sS'group_name'
p50668
S'Advanced'
p50669
sa(dp50670
S'description'
p50671
S'Set the enabled status of the MooseObject.\n'
p50672
sS'cpp_type'
p50673
S'bool'
p50674
sS'default'
p50675
S'1'
p50676
sS'name'
p50677
S'enable'
p50678
sS'required'
p50679
I00
sS'group_name'
p50680
S'Advanced'
p50681
sa(dp50682
S'name'
p50683
S'execute_on'
p50684
sS'cpp_type'
p50685
S'MultiMooseEnum'
p50686
sS'default'
p50687
S'TIMESTEP_END'
p50688
sS'description'
p50689
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50690
sS'required'
p50691
I00
sS'options'
p50692
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50693
sS'group_name'
p50694
Nsa(dp50695
S'description'
p50696
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50697
sS'cpp_type'
p50698
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50699
sS'default'
p50700
g3
sS'name'
p50701
S'outputs'
p50702
sS'required'
p50703
I00
sS'group_name'
p50704
S'Advanced'
p50705
sa(dp50706
S'description'
p50707
g3
sS'cpp_type'
p50708
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50709
sS'default'
p50710
S'RelativeSolutionDifferenceNorm'
p50711
sS'name'
p50712
S'type'
p50713
sS'required'
p50714
I00
sS'group_name'
p50715
Nsa(dp50716
S'description'
p50717
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50718
sS'cpp_type'
p50719
S'bool'
p50720
sS'default'
p50721
S'0'
p50722
sS'name'
p50723
S'use_displaced_mesh'
p50724
sS'required'
p50725
I00
sS'group_name'
p50726
S'Advanced'
p50727
sasS'name'
p50728
S'/UserObjects/RelativeSolutionDifferenceNorm'
p50729
sa(dp50730
S'description'
p50731
g3
sS'subblocks'
p50732
NsS'parameters'
p50733
(lp50734
(dp50735
S'description'
p50736
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50737
sS'cpp_type'
p50738
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50739
sS'default'
p50740
g3
sS'name'
p50741
S'control_tags'
p50742
sS'required'
p50743
I00
sS'group_name'
p50744
S'Advanced'
p50745
sa(dp50746
S'description'
p50747
S'Set the enabled status of the MooseObject.\n'
p50748
sS'cpp_type'
p50749
S'bool'
p50750
sS'default'
p50751
S'1'
p50752
sS'name'
p50753
S'enable'
p50754
sS'required'
p50755
I00
sS'group_name'
p50756
S'Advanced'
p50757
sa(dp50758
S'name'
p50759
S'execute_on'
p50760
sS'cpp_type'
p50761
S'MultiMooseEnum'
p50762
sS'default'
p50763
S'TIMESTEP_END'
p50764
sS'description'
p50765
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50766
sS'required'
p50767
I00
sS'options'
p50768
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50769
sS'group_name'
p50770
Nsa(dp50771
S'description'
p50772
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50773
sS'cpp_type'
p50774
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50775
sS'default'
p50776
g3
sS'name'
p50777
S'outputs'
p50778
sS'required'
p50779
I00
sS'group_name'
p50780
S'Advanced'
p50781
sa(dp50782
S'name'
p50783
S'residual_type'
p50784
sS'cpp_type'
p50785
S'MooseEnum'
p50786
sS'default'
p50787
S'FINAL'
p50788
sS'description'
p50789
S'Type of residual to be reported.  Choices are: FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET\n'
p50790
sS'required'
p50791
I00
sS'options'
p50792
S'FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET'
p50793
sS'group_name'
p50794
Nsa(dp50795
S'description'
p50796
g3
sS'cpp_type'
p50797
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50798
sS'default'
p50799
S'Residual'
p50800
sS'name'
p50801
S'type'
p50802
sS'required'
p50803
I00
sS'group_name'
p50804
Nsa(dp50805
S'description'
p50806
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50807
sS'cpp_type'
p50808
S'bool'
p50809
sS'default'
p50810
S'0'
p50811
sS'name'
p50812
S'use_displaced_mesh'
p50813
sS'required'
p50814
I00
sS'group_name'
p50815
S'Advanced'
p50816
sasS'name'
p50817
S'/UserObjects/Residual'
p50818
sa(dp50819
S'description'
p50820
g3
sS'subblocks'
p50821
NsS'parameters'
p50822
(lp50823
(dp50824
S'description'
p50825
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50826
sS'cpp_type'
p50827
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50828
sS'default'
p50829
g3
sS'name'
p50830
S'control_tags'
p50831
sS'required'
p50832
I00
sS'group_name'
p50833
S'Advanced'
p50834
sa(dp50835
S'description'
p50836
S'Set the enabled status of the MooseObject.\n'
p50837
sS'cpp_type'
p50838
S'bool'
p50839
sS'default'
p50840
S'1'
p50841
sS'name'
p50842
S'enable'
p50843
sS'required'
p50844
I00
sS'group_name'
p50845
S'Advanced'
p50846
sa(dp50847
S'name'
p50848
S'execute_on'
p50849
sS'cpp_type'
p50850
S'MultiMooseEnum'
p50851
sS'default'
p50852
S'TIMESTEP_END'
p50853
sS'description'
p50854
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50855
sS'required'
p50856
I00
sS'options'
p50857
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50858
sS'group_name'
p50859
Nsa(dp50860
S'description'
p50861
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50862
sS'cpp_type'
p50863
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50864
sS'default'
p50865
g3
sS'name'
p50866
S'outputs'
p50867
sS'required'
p50868
I00
sS'group_name'
p50869
S'Advanced'
p50870
sa(dp50871
S'name'
p50872
S'time_type'
p50873
sS'cpp_type'
p50874
S'MooseEnum'
p50875
sS'default'
p50876
g3
sS'description'
p50877
S'Whether to output the total elapsed or just the active time\n'
p50878
sS'required'
p50879
I01
sS'options'
p50880
S'alive active'
p50881
sS'group_name'
p50882
Nsa(dp50883
S'description'
p50884
g3
sS'cpp_type'
p50885
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50886
sS'default'
p50887
S'RunTime'
p50888
sS'name'
p50889
S'type'
p50890
sS'required'
p50891
I00
sS'group_name'
p50892
Nsa(dp50893
S'description'
p50894
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50895
sS'cpp_type'
p50896
S'bool'
p50897
sS'default'
p50898
S'0'
p50899
sS'name'
p50900
S'use_displaced_mesh'
p50901
sS'required'
p50902
I00
sS'group_name'
p50903
S'Advanced'
p50904
sasS'name'
p50905
S'/UserObjects/RunTime'
p50906
sa(dp50907
S'description'
p50908
g3
sS'subblocks'
p50909
NsS'parameters'
p50910
(lp50911
(dp50912
S'description'
p50913
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50914
sS'cpp_type'
p50915
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50916
sS'default'
p50917
g3
sS'name'
p50918
S'control_tags'
p50919
sS'required'
p50920
I00
sS'group_name'
p50921
S'Advanced'
p50922
sa(dp50923
S'description'
p50924
S'Set the enabled status of the MooseObject.\n'
p50925
sS'cpp_type'
p50926
S'bool'
p50927
sS'default'
p50928
S'1'
p50929
sS'name'
p50930
S'enable'
p50931
sS'required'
p50932
I00
sS'group_name'
p50933
S'Advanced'
p50934
sa(dp50935
S'name'
p50936
S'execute_on'
p50937
sS'cpp_type'
p50938
S'MultiMooseEnum'
p50939
sS'default'
p50940
S'TIMESTEP_END'
p50941
sS'description'
p50942
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50943
sS'required'
p50944
I00
sS'options'
p50945
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50946
sS'group_name'
p50947
Nsa(dp50948
S'description'
p50949
S'The analytic solution to compare against\n'
p50950
sS'cpp_type'
p50951
S'FunctionName'
p50952
sS'default'
p50953
g3
sS'name'
p50954
S'function'
p50955
sS'required'
p50956
I01
sS'group_name'
p50957
Nsa(dp50958
S'description'
p50959
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50960
sS'cpp_type'
p50961
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50962
sS'default'
p50963
g3
sS'name'
p50964
S'outputs'
p50965
sS'required'
p50966
I00
sS'group_name'
p50967
S'Advanced'
p50968
sa(dp50969
S'description'
p50970
g3
sS'cpp_type'
p50971
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50972
sS'default'
p50973
S'ScalarL2Error'
p50974
sS'name'
p50975
S'type'
p50976
sS'required'
p50977
I00
sS'group_name'
p50978
Nsa(dp50979
S'description'
p50980
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50981
sS'cpp_type'
p50982
S'bool'
p50983
sS'default'
p50984
S'0'
p50985
sS'name'
p50986
S'use_displaced_mesh'
p50987
sS'required'
p50988
I00
sS'group_name'
p50989
S'Advanced'
p50990
sa(dp50991
S'description'
p50992
S'The name of the scalar variable\n'
p50993
sS'cpp_type'
p50994
S'VariableName'
p50995
sS'default'
p50996
g3
sS'name'
p50997
S'variable'
p50998
sS'required'
p50999
I01
sS'group_name'
p51000
NsasS'name'
p51001
S'/UserObjects/ScalarL2Error'
p51002
sa(dp51003
S'description'
p51004
g3
sS'subblocks'
p51005
NsS'parameters'
p51006
(lp51007
(dp51008
S'description'
p51009
S'Component to output for this variable\n'
p51010
sS'cpp_type'
p51011
S'unsigned int'
p51012
sS'default'
p51013
S'0'
p51014
sS'name'
p51015
S'component'
p51016
sS'required'
p51017
I00
sS'group_name'
p51018
Nsa(dp51019
S'description'
p51020
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51021
sS'cpp_type'
p51022
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51023
sS'default'
p51024
g3
sS'name'
p51025
S'control_tags'
p51026
sS'required'
p51027
I00
sS'group_name'
p51028
S'Advanced'
p51029
sa(dp51030
S'description'
p51031
S'Set the enabled status of the MooseObject.\n'
p51032
sS'cpp_type'
p51033
S'bool'
p51034
sS'default'
p51035
S'1'
p51036
sS'name'
p51037
S'enable'
p51038
sS'required'
p51039
I00
sS'group_name'
p51040
S'Advanced'
p51041
sa(dp51042
S'name'
p51043
S'execute_on'
p51044
sS'cpp_type'
p51045
S'MultiMooseEnum'
p51046
sS'default'
p51047
S'TIMESTEP_END'
p51048
sS'description'
p51049
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51050
sS'required'
p51051
I00
sS'options'
p51052
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51053
sS'group_name'
p51054
Nsa(dp51055
S'description'
p51056
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p51057
sS'cpp_type'
p51058
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p51059
sS'default'
p51060
g3
sS'name'
p51061
S'outputs'
p51062
sS'required'
p51063
I00
sS'group_name'
p51064
S'Advanced'
p51065
sa(dp51066
S'description'
p51067
g3
sS'cpp_type'
p51068
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51069
sS'default'
p51070
S'ScalarVariable'
p51071
sS'name'
p51072
S'type'
p51073
sS'required'
p51074
I00
sS'group_name'
p51075
Nsa(dp51076
S'description'
p51077
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51078
sS'cpp_type'
p51079
S'bool'
p51080
sS'default'
p51081
S'0'
p51082
sS'name'
p51083
S'use_displaced_mesh'
p51084
sS'required'
p51085
I00
sS'group_name'
p51086
S'Advanced'
p51087
sa(dp51088
S'description'
p51089
S'Name of the variable\n'
p51090
sS'cpp_type'
p51091
S'VariableName'
p51092
sS'default'
p51093
g3
sS'name'
p51094
S'variable'
p51095
sS'required'
p51096
I01
sS'group_name'
p51097
NsasS'name'
p51098
S'/UserObjects/ScalarVariable'
p51099
sa(dp51100
S'description'
p51101
g3
sS'subblocks'
p51102
NsS'parameters'
p51103
(lp51104
(dp51105
S'description'
p51106
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51107
sS'cpp_type'
p51108
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51109
sS'default'
p51110
g3
sS'name'
p51111
S'control_tags'
p51112
sS'required'
p51113
I00
sS'group_name'
p51114
S'Advanced'
p51115
sa(dp51116
S'description'
p51117
S'Set the enabled status of the MooseObject.\n'
p51118
sS'cpp_type'
p51119
S'bool'
p51120
sS'default'
p51121
S'1'
p51122
sS'name'
p51123
S'enable'
p51124
sS'required'
p51125
I00
sS'group_name'
p51126
S'Advanced'
p51127
sa(dp51128
S'name'
p51129
S'execute_on'
p51130
sS'cpp_type'
p51131
S'MultiMooseEnum'
p51132
sS'default'
p51133
S'TIMESTEP_END'
p51134
sS'description'
p51135
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51136
sS'required'
p51137
I00
sS'options'
p51138
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51139
sS'group_name'
p51140
Nsa(dp51141
S'description'
p51142
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p51143
sS'cpp_type'
p51144
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p51145
sS'default'
p51146
g3
sS'name'
p51147
S'outputs'
p51148
sS'required'
p51149
I00
sS'group_name'
p51150
S'Advanced'
p51151
sa(dp51152
S'description'
p51153
S'The scaling factor\n'
p51154
sS'cpp_type'
p51155
S'double'
p51156
sS'default'
p51157
S'1'
p51158
sS'name'
p51159
S'scaling_factor'
p51160
sS'required'
p51161
I00
sS'group_name'
p51162
Nsa(dp51163
S'description'
p51164
g3
sS'cpp_type'
p51165
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51166
sS'default'
p51167
S'ScalePostprocessor'
p51168
sS'name'
p51169
S'type'
p51170
sS'required'
p51171
I00
sS'group_name'
p51172
Nsa(dp51173
S'description'
p51174
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51175
sS'cpp_type'
p51176
S'bool'
p51177
sS'default'
p51178
S'0'
p51179
sS'name'
p51180
S'use_displaced_mesh'
p51181
sS'required'
p51182
I00
sS'group_name'
p51183
S'Advanced'
p51184
sa(dp51185
S'description'
p51186
S'The postprocessor to be scaled\n'
p51187
sS'cpp_type'
p51188
S'PostprocessorName'
p51189
sS'default'
p51190
g3
sS'name'
p51191
S'value'
p51192
sS'required'
p51193
I01
sS'group_name'
p51194
NsasS'name'
p51195
S'/UserObjects/ScalePostprocessor'
p51196
sa(dp51197
S'description'
p51198
g3
sS'subblocks'
p51199
NsS'parameters'
p51200
(lp51201
(dp51202
S'description'
p51203
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p51204
sS'cpp_type'
p51205
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p51206
sS'default'
p51207
g3
sS'name'
p51208
S'boundary'
p51209
sS'required'
p51210
I01
sS'group_name'
p51211
Nsa(dp51212
S'description'
p51213
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51214
sS'cpp_type'
p51215
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51216
sS'default'
p51217
g3
sS'name'
p51218
S'control_tags'
p51219
sS'required'
p51220
I00
sS'group_name'
p51221
S'Advanced'
p51222
sa(dp51223
S'description'
p51224
S'Set the enabled status of the MooseObject.\n'
p51225
sS'cpp_type'
p51226
S'bool'
p51227
sS'default'
p51228
S'1'
p51229
sS'name'
p51230
S'enable'
p51231
sS'required'
p51232
I00
sS'group_name'
p51233
S'Advanced'
p51234
sa(dp51235
S'name'
p51236
S'execute_on'
p51237
sS'cpp_type'
p51238
S'MultiMooseEnum'
p51239
sS'default'
p51240
S'TIMESTEP_END'
p51241
sS'description'
p51242
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51243
sS'required'
p51244
I00
sS'options'
p51245
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51246
sS'group_name'
p51247
Nsa(dp51248
S'description'
p51249
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p51250
sS'cpp_type'
p51251
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p51252
sS'default'
p51253
g3
sS'name'
p51254
S'outputs'
p51255
sS'required'
p51256
I00
sS'group_name'
p51257
S'Advanced'
p51258
sa(dp51259
S'description'
p51260
g3
sS'cpp_type'
p51261
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51262
sS'default'
p51263
S'SideAverageValue'
p51264
sS'name'
p51265
S'type'
p51266
sS'required'
p51267
I00
sS'group_name'
p51268
Nsa(dp51269
S'description'
p51270
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51271
sS'cpp_type'
p51272
S'bool'
p51273
sS'default'
p51274
S'0'
p51275
sS'name'
p51276
S'use_displaced_mesh'
p51277
sS'required'
p51278
I00
sS'group_name'
p51279
S'Advanced'
p51280
sa(dp51281
S'description'
p51282
S'The name of the variable that this boundary condition applies to\n'
p51283
sS'cpp_type'
p51284
S'std::vector<VariableName>'
p51285
sS'default'
p51286
g3
sS'name'
p51287
S'variable'
p51288
sS'required'
p51289
I01
sS'group_name'
p51290
NsasS'name'
p51291
S'/UserObjects/SideAverageValue'
p51292
sa(dp51293
S'description'
p51294
g3
sS'subblocks'
p51295
NsS'parameters'
p51296
(lp51297
(dp51298
S'description'
p51299
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p51300
sS'cpp_type'
p51301
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p51302
sS'default'
p51303
g3
sS'name'
p51304
S'boundary'
p51305
sS'required'
p51306
I01
sS'group_name'
p51307
Nsa(dp51308
S'description'
p51309
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51310
sS'cpp_type'
p51311
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51312
sS'default'
p51313
g3
sS'name'
p51314
S'control_tags'
p51315
sS'required'
p51316
I00
sS'group_name'
p51317
S'Advanced'
p51318
sa(dp51319
S'description'
p51320
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p51321
sS'cpp_type'
p51322
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51323
sS'default'
p51324
g3
sS'name'
p51325
S'diffusivity'
p51326
sS'required'
p51327
I01
sS'group_name'
p51328
Nsa(dp51329
S'description'
p51330
S'Set the enabled status of the MooseObject.\n'
p51331
sS'cpp_type'
p51332
S'bool'
p51333
sS'default'
p51334
S'1'
p51335
sS'name'
p51336
S'enable'
p51337
sS'required'
p51338
I00
sS'group_name'
p51339
S'Advanced'
p51340
sa(dp51341
S'name'
p51342
S'execute_on'
p51343
sS'cpp_type'
p51344
S'MultiMooseEnum'
p51345
sS'default'
p51346
S'TIMESTEP_END'
p51347
sS'description'
p51348
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51349
sS'required'
p51350
I00
sS'options'
p51351
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51352
sS'group_name'
p51353
Nsa(dp51354
S'description'
p51355
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p51356
sS'cpp_type'
p51357
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p51358
sS'default'
p51359
g3
sS'name'
p51360
S'outputs'
p51361
sS'required'
p51362
I00
sS'group_name'
p51363
S'Advanced'
p51364
sa(dp51365
S'description'
p51366
g3
sS'cpp_type'
p51367
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51368
sS'default'
p51369
S'SideFluxAverage'
p51370
sS'name'
p51371
S'type'
p51372
sS'required'
p51373
I00
sS'group_name'
p51374
Nsa(dp51375
S'description'
p51376
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51377
sS'cpp_type'
p51378
S'bool'
p51379
sS'default'
p51380
S'0'
p51381
sS'name'
p51382
S'use_displaced_mesh'
p51383
sS'required'
p51384
I00
sS'group_name'
p51385
S'Advanced'
p51386
sa(dp51387
S'description'
p51388
S'The name of the variable that this boundary condition applies to\n'
p51389
sS'cpp_type'
p51390
S'std::vector<VariableName>'
p51391
sS'default'
p51392
g3
sS'name'
p51393
S'variable'
p51394
sS'required'
p51395
I01
sS'group_name'
p51396
NsasS'name'
p51397
S'/UserObjects/SideFluxAverage'
p51398
sa(dp51399
S'description'
p51400
g3
sS'subblocks'
p51401
NsS'parameters'
p51402
(lp51403
(dp51404
S'description'
p51405
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p51406
sS'cpp_type'
p51407
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p51408
sS'default'
p51409
g3
sS'name'
p51410
S'boundary'
p51411
sS'required'
p51412
I01
sS'group_name'
p51413
Nsa(dp51414
S'description'
p51415
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51416
sS'cpp_type'
p51417
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51418
sS'default'
p51419
g3
sS'name'
p51420
S'control_tags'
p51421
sS'required'
p51422
I00
sS'group_name'
p51423
S'Advanced'
p51424
sa(dp51425
S'description'
p51426
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p51427
sS'cpp_type'
p51428
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51429
sS'default'
p51430
g3
sS'name'
p51431
S'diffusivity'
p51432
sS'required'
p51433
I01
sS'group_name'
p51434
Nsa(dp51435
S'description'
p51436
S'Set the enabled status of the MooseObject.\n'
p51437
sS'cpp_type'
p51438
S'bool'
p51439
sS'default'
p51440
S'1'
p51441
sS'name'
p51442
S'enable'
p51443
sS'required'
p51444
I00
sS'group_name'
p51445
S'Advanced'
p51446
sa(dp51447
S'name'
p51448
S'execute_on'
p51449
sS'cpp_type'
p51450
S'MultiMooseEnum'
p51451
sS'default'
p51452
S'TIMESTEP_END'
p51453
sS'description'
p51454
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51455
sS'required'
p51456
I00
sS'options'
p51457
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51458
sS'group_name'
p51459
Nsa(dp51460
S'description'
p51461
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p51462
sS'cpp_type'
p51463
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p51464
sS'default'
p51465
g3
sS'name'
p51466
S'outputs'
p51467
sS'required'
p51468
I00
sS'group_name'
p51469
S'Advanced'
p51470
sa(dp51471
S'description'
p51472
g3
sS'cpp_type'
p51473
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51474
sS'default'
p51475
S'SideFluxIntegral'
p51476
sS'name'
p51477
S'type'
p51478
sS'required'
p51479
I00
sS'group_name'
p51480
Nsa(dp51481
S'description'
p51482
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51483
sS'cpp_type'
p51484
S'bool'
p51485
sS'default'
p51486
S'0'
p51487
sS'name'
p51488
S'use_displaced_mesh'
p51489
sS'required'
p51490
I00
sS'group_name'
p51491
S'Advanced'
p51492
sa(dp51493
S'description'
p51494
S'The name of the variable that this boundary condition applies to\n'
p51495
sS'cpp_type'
p51496
S'std::vector<VariableName>'
p51497
sS'default'
p51498
g3
sS'name'
p51499
S'variable'
p51500
sS'required'
p51501
I01
sS'group_name'
p51502
NsasS'name'
p51503
S'/UserObjects/SideFluxIntegral'
p51504
sa(dp51505
S'description'
p51506
g3
sS'subblocks'
p51507
NsS'parameters'
p51508
(lp51509
(dp51510
S'description'
p51511
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p51512
sS'cpp_type'
p51513
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p51514
sS'default'
p51515
g3
sS'name'
p51516
S'boundary'
p51517
sS'required'
p51518
I01
sS'group_name'
p51519
Nsa(dp51520
S'description'
p51521
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51522
sS'cpp_type'
p51523
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51524
sS'default'
p51525
g3
sS'name'
p51526
S'control_tags'
p51527
sS'required'
p51528
I00
sS'group_name'
p51529
S'Advanced'
p51530
sa(dp51531
S'description'
p51532
S'Set the enabled status of the MooseObject.\n'
p51533
sS'cpp_type'
p51534
S'bool'
p51535
sS'default'
p51536
S'1'
p51537
sS'name'
p51538
S'enable'
p51539
sS'required'
p51540
I00
sS'group_name'
p51541
S'Advanced'
p51542
sa(dp51543
S'name'
p51544
S'execute_on'
p51545
sS'cpp_type'
p51546
S'MultiMooseEnum'
p51547
sS'default'
p51548
S'TIMESTEP_END'
p51549
sS'description'
p51550
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51551
sS'required'
p51552
I00
sS'options'
p51553
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51554
sS'group_name'
p51555
Nsa(dp51556
S'description'
p51557
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p51558
sS'cpp_type'
p51559
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p51560
sS'default'
p51561
g3
sS'name'
p51562
S'outputs'
p51563
sS'required'
p51564
I00
sS'group_name'
p51565
S'Advanced'
p51566
sa(dp51567
S'description'
p51568
g3
sS'cpp_type'
p51569
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51570
sS'default'
p51571
S'SideIntegralVariablePostprocessor'
p51572
sS'name'
p51573
S'type'
p51574
sS'required'
p51575
I00
sS'group_name'
p51576
Nsa(dp51577
S'description'
p51578
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51579
sS'cpp_type'
p51580
S'bool'
p51581
sS'default'
p51582
S'0'
p51583
sS'name'
p51584
S'use_displaced_mesh'
p51585
sS'required'
p51586
I00
sS'group_name'
p51587
S'Advanced'
p51588
sa(dp51589
S'description'
p51590
S'The name of the variable that this boundary condition applies to\n'
p51591
sS'cpp_type'
p51592
S'std::vector<VariableName>'
p51593
sS'default'
p51594
g3
sS'name'
p51595
S'variable'
p51596
sS'required'
p51597
I01
sS'group_name'
p51598
NsasS'name'
p51599
S'/UserObjects/SideIntegralVariablePostprocessor'
p51600
sa(dp51601
S'description'
p51602
g3
sS'subblocks'
p51603
NsS'parameters'
p51604
(lp51605
(dp51606
S'description'
p51607
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51608
sS'cpp_type'
p51609
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51610
sS'default'
p51611
g3
sS'name'
p51612
S'control_tags'
p51613
sS'required'
p51614
I00
sS'group_name'
p51615
S'Advanced'
p51616
sa(dp51617
S'description'
p51618
S'Set the enabled status of the MooseObject.\n'
p51619
sS'cpp_type'
p51620
S'bool'
p51621
sS'default'
p51622
S'1'
p51623
sS'name'
p51624
S'enable'
p51625
sS'required'
p51626
I00
sS'group_name'
p51627
S'Advanced'
p51628
sa(dp51629
S'description'
p51630
S'The name of the file holding the equation system info in xda format (xda only).\n'
p51631
sS'cpp_type'
p51632
S'FileName'
p51633
sS'default'
p51634
S'<not supplied>'
p51635
sS'name'
p51636
S'es'
p51637
sS'required'
p51638
I00
sS'group_name'
p51639
Nsa(dp51640
S'name'
p51641
S'execute_on'
p51642
sS'cpp_type'
p51643
S'MultiMooseEnum'
p51644
sS'default'
p51645
S'TIMESTEP_END'
p51646
sS'description'
p51647
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51648
sS'required'
p51649
I00
sS'options'
p51650
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51651
sS'group_name'
p51652
Nsa(dp51653
S'description'
p51654
S'The name of the mesh file (must be xda or exodusII file).\n'
p51655
sS'cpp_type'
p51656
S'MeshFileName'
p51657
sS'default'
p51658
g3
sS'name'
p51659
S'mesh'
p51660
sS'required'
p51661
I01
sS'group_name'
p51662
Nsa(dp51663
S'description'
p51664
S'Anticlockwise rotation angle (in degrees) to use for rotation about rotation0_vector.\n'
p51665
sS'cpp_type'
p51666
S'double'
p51667
sS'default'
p51668
S'0'
p51669
sS'name'
p51670
S'rotation0_angle'
p51671
sS'required'
p51672
I00
sS'group_name'
p51673
Nsa(dp51674
S'description'
p51675
S'Vector about which to rotate points of the simulation.\n'
p51676
sS'cpp_type'
p51677
S'libMesh::VectorValue<double>'
p51678
sS'default'
p51679
S'0 0 1'
p51680
sS'name'
p51681
S'rotation0_vector'
p51682
sS'required'
p51683
I00
sS'group_name'
p51684
Nsa(dp51685
S'description'
p51686
S'Anticlockwise rotation angle (in degrees) to use for rotation about rotation1_vector.\n'
p51687
sS'cpp_type'
p51688
S'double'
p51689
sS'default'
p51690
S'0'
p51691
sS'name'
p51692
S'rotation1_angle'
p51693
sS'required'
p51694
I00
sS'group_name'
p51695
Nsa(dp51696
S'description'
p51697
S'Vector about which to rotate points of the simulation.\n'
p51698
sS'cpp_type'
p51699
S'libMesh::VectorValue<double>'
p51700
sS'default'
p51701
S'0 0 1'
p51702
sS'name'
p51703
S'rotation1_vector'
p51704
sS'required'
p51705
I00
sS'group_name'
p51706
Nsa(dp51707
S'description'
p51708
S'Scale factor for points in the simulation\n'
p51709
sS'cpp_type'
p51710
S'std::__1::vector<double, std::__1::allocator<double> >'
p51711
sS'default'
p51712
S'1 1 1'
p51713
sS'name'
p51714
S'scale'
p51715
sS'required'
p51716
I00
sS'group_name'
p51717
Nsa(dp51718
S'description'
p51719
S'Scale multiplying factor for points in the simulation\n'
p51720
sS'cpp_type'
p51721
S'std::__1::vector<double, std::__1::allocator<double> >'
p51722
sS'default'
p51723
S'1 1 1'
p51724
sS'name'
p51725
S'scale_multiplier'
p51726
sS'required'
p51727
I00
sS'group_name'
p51728
Nsa(dp51729
S'description'
p51730
S'The name of the system to pull values out of (xda only).\n'
p51731
sS'cpp_type'
p51732
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51733
sS'default'
p51734
S'nl0'
p51735
sS'name'
p51736
S'system'
p51737
sS'required'
p51738
I00
sS'group_name'
p51739
Nsa(dp51740
S'description'
p51741
S'The name of the nodal and elemental variables from the file you want to use for values\n'
p51742
sS'cpp_type'
p51743
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51744
sS'default'
p51745
g3
sS'name'
p51746
S'system_variables'
p51747
sS'required'
p51748
I00
sS'group_name'
p51749
Nsa(dp51750
S'description'
p51751
S'Index of the single timestep used or "LATEST" for the last timestep (exodusII only).  If not supplied, time interpolation will occur.\n'
p51752
sS'cpp_type'
p51753
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51754
sS'default'
p51755
g3
sS'name'
p51756
S'timestep'
p51757
sS'required'
p51758
I00
sS'group_name'
p51759
Nsa(dp51760
S'name'
p51761
S'transformation_order'
p51762
sS'cpp_type'
p51763
S'MultiMooseEnum'
p51764
sS'default'
p51765
S'SCALE TRANSLATION'
p51766
sS'description'
p51767
S"The order to perform the operations in.  Define R0 to be the rotation matrix encoded by rotation0_vector and rotation0_angle.  Similarly for R1.  Denote the scale by s, the scale_multiplier by m, and the translation by t.  Then, given a point x in the simulation, if transformation_order = 'rotation0 scale_multiplier translation scale rotation1' then form p = R1*(R0*x*m - t)/s.  Then the values provided by the SolutionUserObject at point x in the simulation are the variable values at point p in the mesh.\n"
p51768
sS'required'
p51769
I00
sS'options'
p51770
S'rotation0 translation scale rotation1 scale_multiplier'
p51771
sS'group_name'
p51772
Nsa(dp51773
S'description'
p51774
S'Translation factors for x,y,z coordinates of the simulation\n'
p51775
sS'cpp_type'
p51776
S'std::__1::vector<double, std::__1::allocator<double> >'
p51777
sS'default'
p51778
S'0 0 0'
p51779
sS'name'
p51780
S'translation'
p51781
sS'required'
p51782
I00
sS'group_name'
p51783
Nsa(dp51784
S'description'
p51785
g3
sS'cpp_type'
p51786
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51787
sS'default'
p51788
S'SolutionUserObject'
p51789
sS'name'
p51790
S'type'
p51791
sS'required'
p51792
I00
sS'group_name'
p51793
Nsa(dp51794
S'description'
p51795
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51796
sS'cpp_type'
p51797
S'bool'
p51798
sS'default'
p51799
S'0'
p51800
sS'name'
p51801
S'use_displaced_mesh'
p51802
sS'required'
p51803
I00
sS'group_name'
p51804
S'Advanced'
p51805
sasS'name'
p51806
S'/UserObjects/SolutionUserObject'
p51807
sa(dp51808
S'description'
p51809
g3
sS'subblocks'
p51810
NsS'parameters'
p51811
(lp51812
(dp51813
S'description'
p51814
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51815
sS'cpp_type'
p51816
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51817
sS'default'
p51818
g3
sS'name'
p51819
S'control_tags'
p51820
sS'required'
p51821
I00
sS'group_name'
p51822
S'Advanced'
p51823
sa(dp51824
S'description'
p51825
S'Set the enabled status of the MooseObject.\n'
p51826
sS'cpp_type'
p51827
S'bool'
p51828
sS'default'
p51829
S'1'
p51830
sS'name'
p51831
S'enable'
p51832
sS'required'
p51833
I00
sS'group_name'
p51834
S'Advanced'
p51835
sa(dp51836
S'name'
p51837
S'execute_on'
p51838
sS'cpp_type'
p51839
S'MultiMooseEnum'
p51840
sS'default'
p51841
S'TIMESTEP_END'
p51842
sS'description'
p51843
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51844
sS'required'
p51845
I00
sS'options'
p51846
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51847
sS'group_name'
p51848
Nsa(dp51849
S'description'
p51850
S'FParser expression to process Postprocessor values into a boolean value. Termination of the simulation occurs when this returns true.\n'
p51851
sS'cpp_type'
p51852
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51853
sS'default'
p51854
g3
sS'name'
p51855
S'expression'
p51856
sS'required'
p51857
I01
sS'group_name'
p51858
Nsa(dp51859
S'description'
p51860
g3
sS'cpp_type'
p51861
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51862
sS'default'
p51863
S'Terminator'
p51864
sS'name'
p51865
S'type'
p51866
sS'required'
p51867
I00
sS'group_name'
p51868
Nsa(dp51869
S'description'
p51870
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51871
sS'cpp_type'
p51872
S'bool'
p51873
sS'default'
p51874
S'0'
p51875
sS'name'
p51876
S'use_displaced_mesh'
p51877
sS'required'
p51878
I00
sS'group_name'
p51879
S'Advanced'
p51880
sasS'name'
p51881
S'/UserObjects/Terminator'
p51882
sa(dp51883
S'description'
p51884
S'A postprocessor for reporting the extreme value of another postprocessor over time.\n'
p51885
sS'subblocks'
p51886
NsS'parameters'
p51887
(lp51888
(dp51889
S'description'
p51890
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51891
sS'cpp_type'
p51892
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51893
sS'default'
p51894
g3
sS'name'
p51895
S'control_tags'
p51896
sS'required'
p51897
I00
sS'group_name'
p51898
S'Advanced'
p51899
sa(dp51900
S'description'
p51901
S'Set the enabled status of the MooseObject.\n'
p51902
sS'cpp_type'
p51903
S'bool'
p51904
sS'default'
p51905
S'1'
p51906
sS'name'
p51907
S'enable'
p51908
sS'required'
p51909
I00
sS'group_name'
p51910
S'Advanced'
p51911
sa(dp51912
S'name'
p51913
S'execute_on'
p51914
sS'cpp_type'
p51915
S'MultiMooseEnum'
p51916
sS'default'
p51917
S'TIMESTEP_END'
p51918
sS'description'
p51919
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51920
sS'required'
p51921
I00
sS'options'
p51922
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51923
sS'group_name'
p51924
Nsa(dp51925
S'description'
p51926
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p51927
sS'cpp_type'
p51928
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p51929
sS'default'
p51930
g3
sS'name'
p51931
S'outputs'
p51932
sS'required'
p51933
I00
sS'group_name'
p51934
S'Advanced'
p51935
sa(dp51936
S'description'
p51937
S'The name of the postprocessor used for reporting time extreme values\n'
p51938
sS'cpp_type'
p51939
S'PostprocessorName'
p51940
sS'default'
p51941
g3
sS'name'
p51942
S'postprocessor'
p51943
sS'required'
p51944
I01
sS'group_name'
p51945
Nsa(dp51946
S'description'
p51947
g3
sS'cpp_type'
p51948
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51949
sS'default'
p51950
S'TimeExtremeValue'
p51951
sS'name'
p51952
S'type'
p51953
sS'required'
p51954
I00
sS'group_name'
p51955
Nsa(dp51956
S'description'
p51957
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51958
sS'cpp_type'
p51959
S'bool'
p51960
sS'default'
p51961
S'0'
p51962
sS'name'
p51963
S'use_displaced_mesh'
p51964
sS'required'
p51965
I00
sS'group_name'
p51966
S'Advanced'
p51967
sa(dp51968
S'name'
p51969
S'value_type'
p51970
sS'cpp_type'
p51971
S'MooseEnum'
p51972
sS'default'
p51973
S'max'
p51974
sS'description'
p51975
S"Type of extreme value to return.'max' returns the maximum value.'min' returns the minimum value.'abs_max' returns the maximum absolute value.'abs_min' returns the minimum absolute value.\n"
p51976
sS'required'
p51977
I00
sS'options'
p51978
S'max min abs_max abs_min'
p51979
sS'group_name'
p51980
NsasS'name'
p51981
S'/UserObjects/TimeExtremeValue'
p51982
sa(dp51983
S'description'
p51984
g3
sS'subblocks'
p51985
NsS'parameters'
p51986
(lp51987
(dp51988
S'description'
p51989
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51990
sS'cpp_type'
p51991
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51992
sS'default'
p51993
g3
sS'name'
p51994
S'control_tags'
p51995
sS'required'
p51996
I00
sS'group_name'
p51997
S'Advanced'
p51998
sa(dp51999
S'description'
p52000
S'Set the enabled status of the MooseObject.\n'
p52001
sS'cpp_type'
p52002
S'bool'
p52003
sS'default'
p52004
S'1'
p52005
sS'name'
p52006
S'enable'
p52007
sS'required'
p52008
I00
sS'group_name'
p52009
S'Advanced'
p52010
sa(dp52011
S'name'
p52012
S'execute_on'
p52013
sS'cpp_type'
p52014
S'MultiMooseEnum'
p52015
sS'default'
p52016
S'TIMESTEP_END'
p52017
sS'description'
p52018
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p52019
sS'required'
p52020
I00
sS'options'
p52021
S'none initial linear nonlinear timestep_end timestep_begin custom'
p52022
sS'group_name'
p52023
Nsa(dp52024
S'description'
p52025
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p52026
sS'cpp_type'
p52027
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p52028
sS'default'
p52029
g3
sS'name'
p52030
S'outputs'
p52031
sS'required'
p52032
I00
sS'group_name'
p52033
S'Advanced'
p52034
sa(dp52035
S'description'
p52036
g3
sS'cpp_type'
p52037
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52038
sS'default'
p52039
S'TimestepSize'
p52040
sS'name'
p52041
S'type'
p52042
sS'required'
p52043
I00
sS'group_name'
p52044
Nsa(dp52045
S'description'
p52046
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52047
sS'cpp_type'
p52048
S'bool'
p52049
sS'default'
p52050
S'0'
p52051
sS'name'
p52052
S'use_displaced_mesh'
p52053
sS'required'
p52054
I00
sS'group_name'
p52055
S'Advanced'
p52056
sasS'name'
p52057
S'/UserObjects/TimestepSize'
p52058
sa(dp52059
S'description'
p52060
g3
sS'subblocks'
p52061
NsS'parameters'
p52062
(lp52063
(dp52064
S'description'
p52065
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52066
sS'cpp_type'
p52067
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52068
sS'default'
p52069
g3
sS'name'
p52070
S'control_tags'
p52071
sS'required'
p52072
I00
sS'group_name'
p52073
S'Advanced'
p52074
sa(dp52075
S'description'
p52076
S'Set the enabled status of the MooseObject.\n'
p52077
sS'cpp_type'
p52078
S'bool'
p52079
sS'default'
p52080
S'1'
p52081
sS'name'
p52082
S'enable'
p52083
sS'required'
p52084
I00
sS'group_name'
p52085
S'Advanced'
p52086
sa(dp52087
S'name'
p52088
S'execute_on'
p52089
sS'cpp_type'
p52090
S'MultiMooseEnum'
p52091
sS'default'
p52092
S'TIMESTEP_END'
p52093
sS'description'
p52094
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p52095
sS'required'
p52096
I00
sS'options'
p52097
S'none initial linear nonlinear timestep_end timestep_begin custom'
p52098
sS'group_name'
p52099
Nsa(dp52100
S'description'
p52101
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p52102
sS'cpp_type'
p52103
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p52104
sS'default'
p52105
g3
sS'name'
p52106
S'outputs'
p52107
sS'required'
p52108
I00
sS'group_name'
p52109
S'Advanced'
p52110
sa(dp52111
S'description'
p52112
g3
sS'cpp_type'
p52113
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52114
sS'default'
p52115
S'TotalVariableValue'
p52116
sS'name'
p52117
S'type'
p52118
sS'required'
p52119
I00
sS'group_name'
p52120
Nsa(dp52121
S'description'
p52122
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52123
sS'cpp_type'
p52124
S'bool'
p52125
sS'default'
p52126
S'0'
p52127
sS'name'
p52128
S'use_displaced_mesh'
p52129
sS'required'
p52130
I00
sS'group_name'
p52131
S'Advanced'
p52132
sa(dp52133
S'description'
p52134
S'The name of the postprocessor\n'
p52135
sS'cpp_type'
p52136
S'PostprocessorName'
p52137
sS'default'
p52138
g3
sS'name'
p52139
S'value'
p52140
sS'required'
p52141
I00
sS'group_name'
p52142
NsasS'name'
p52143
S'/UserObjects/TotalVariableValue'
p52144
sa(dp52145
S'description'
p52146
g3
sS'subblocks'
p52147
NsS'parameters'
p52148
(lp52149
(dp52150
S'description'
p52151
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52152
sS'cpp_type'
p52153
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p52154
sS'default'
p52155
g3
sS'name'
p52156
S'block'
p52157
sS'required'
p52158
I00
sS'group_name'
p52159
Nsa(dp52160
S'description'
p52161
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52162
sS'cpp_type'
p52163
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52164
sS'default'
p52165
g3
sS'name'
p52166
S'control_tags'
p52167
sS'required'
p52168
I00
sS'group_name'
p52169
S'Advanced'
p52170
sa(dp52171
S'description'
p52172
S'Set the enabled status of the MooseObject.\n'
p52173
sS'cpp_type'
p52174
S'bool'
p52175
sS'default'
p52176
S'1'
p52177
sS'name'
p52178
S'enable'
p52179
sS'required'
p52180
I00
sS'group_name'
p52181
S'Advanced'
p52182
sa(dp52183
S'name'
p52184
S'execute_on'
p52185
sS'cpp_type'
p52186
S'MultiMooseEnum'
p52187
sS'default'
p52188
S'TIMESTEP_END'
p52189
sS'description'
p52190
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p52191
sS'required'
p52192
I00
sS'options'
p52193
S'none initial linear nonlinear timestep_end timestep_begin custom'
p52194
sS'group_name'
p52195
Nsa(dp52196
S'description'
p52197
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p52198
sS'cpp_type'
p52199
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p52200
sS'default'
p52201
g3
sS'name'
p52202
S'outputs'
p52203
sS'required'
p52204
I00
sS'group_name'
p52205
S'Advanced'
p52206
sa(dp52207
S'description'
p52208
S'The name of the second variable in the inner product (variable, second_variable)\n'
p52209
sS'cpp_type'
p52210
S'std::vector<VariableName>'
p52211
sS'default'
p52212
g3
sS'name'
p52213
S'second_variable'
p52214
sS'required'
p52215
I01
sS'group_name'
p52216
Nsa(dp52217
S'description'
p52218
S'The seed for the master random number generator\n'
p52219
sS'cpp_type'
p52220
S'unsigned int'
p52221
sS'default'
p52222
S'0'
p52223
sS'name'
p52224
S'seed'
p52225
sS'required'
p52226
I00
sS'group_name'
p52227
S'Advanced'
p52228
sa(dp52229
S'description'
p52230
g3
sS'cpp_type'
p52231
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52232
sS'default'
p52233
S'VariableInnerProduct'
p52234
sS'name'
p52235
S'type'
p52236
sS'required'
p52237
I00
sS'group_name'
p52238
Nsa(dp52239
S'description'
p52240
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52241
sS'cpp_type'
p52242
S'bool'
p52243
sS'default'
p52244
S'0'
p52245
sS'name'
p52246
S'use_displaced_mesh'
p52247
sS'required'
p52248
I00
sS'group_name'
p52249
S'Advanced'
p52250
sa(dp52251
S'description'
p52252
S'The name of the variable that this object operates on\n'
p52253
sS'cpp_type'
p52254
S'std::vector<VariableName>'
p52255
sS'default'
p52256
g3
sS'name'
p52257
S'variable'
p52258
sS'required'
p52259
I01
sS'group_name'
p52260
NsasS'name'
p52261
S'/UserObjects/VariableInnerProduct'
p52262
sa(dp52263
S'description'
p52264
g3
sS'subblocks'
p52265
NsS'parameters'
p52266
(lp52267
(dp52268
S'description'
p52269
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52270
sS'cpp_type'
p52271
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p52272
sS'default'
p52273
g3
sS'name'
p52274
S'block'
p52275
sS'required'
p52276
I00
sS'group_name'
p52277
Nsa(dp52278
S'description'
p52279
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52280
sS'cpp_type'
p52281
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52282
sS'default'
p52283
g3
sS'name'
p52284
S'control_tags'
p52285
sS'required'
p52286
I00
sS'group_name'
p52287
S'Advanced'
p52288
sa(dp52289
S'description'
p52290
S'Set the enabled status of the MooseObject.\n'
p52291
sS'cpp_type'
p52292
S'bool'
p52293
sS'default'
p52294
S'1'
p52295
sS'name'
p52296
S'enable'
p52297
sS'required'
p52298
I00
sS'group_name'
p52299
S'Advanced'
p52300
sa(dp52301
S'name'
p52302
S'execute_on'
p52303
sS'cpp_type'
p52304
S'MultiMooseEnum'
p52305
sS'default'
p52306
S'TIMESTEP_END'
p52307
sS'description'
p52308
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p52309
sS'required'
p52310
I00
sS'options'
p52311
S'none initial linear nonlinear timestep_end timestep_begin custom'
p52312
sS'group_name'
p52313
Nsa(dp52314
S'description'
p52315
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p52316
sS'cpp_type'
p52317
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p52318
sS'default'
p52319
g3
sS'name'
p52320
S'outputs'
p52321
sS'required'
p52322
I00
sS'group_name'
p52323
S'Advanced'
p52324
sa(dp52325
S'description'
p52326
S'The seed for the master random number generator\n'
p52327
sS'cpp_type'
p52328
S'unsigned int'
p52329
sS'default'
p52330
S'0'
p52331
sS'name'
p52332
S'seed'
p52333
sS'required'
p52334
I00
sS'group_name'
p52335
S'Advanced'
p52336
sa(dp52337
S'description'
p52338
g3
sS'cpp_type'
p52339
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52340
sS'default'
p52341
S'VolumePostprocessor'
p52342
sS'name'
p52343
S'type'
p52344
sS'required'
p52345
I00
sS'group_name'
p52346
Nsa(dp52347
S'description'
p52348
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52349
sS'cpp_type'
p52350
S'bool'
p52351
sS'default'
p52352
S'0'
p52353
sS'name'
p52354
S'use_displaced_mesh'
p52355
sS'required'
p52356
I00
sS'group_name'
p52357
S'Advanced'
p52358
sasS'name'
p52359
S'/UserObjects/VolumePostprocessor'
p52360
sasS'parameters'
p52361
NsS'name'
p52362
S'/UserObjects'
p52363
sa(dp52364
S'description'
p52365
g3
sS'subblocks'
p52366
(lp52367
(dp52368
S'description'
p52369
g3
sS'subblocks'
p52370
(lp52371
(dp52372
S'description'
p52373
g3
sS'subblocks'
p52374
(lp52375
(dp52376
S'description'
p52377
g3
sS'subblocks'
p52378
(lp52379
(dp52380
S'description'
p52381
g3
sS'subblocks'
p52382
NsS'parameters'
p52383
(lp52384
(dp52385
S'description'
p52386
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52387
sS'cpp_type'
p52388
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p52389
sS'default'
p52390
g3
sS'name'
p52391
S'block'
p52392
sS'required'
p52393
I00
sS'group_name'
p52394
Nsa(dp52395
S'description'
p52396
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p52397
sS'cpp_type'
p52398
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p52399
sS'default'
p52400
g3
sS'name'
p52401
S'boundary'
p52402
sS'required'
p52403
I00
sS'group_name'
p52404
Nsa(dp52405
S'description'
p52406
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52407
sS'cpp_type'
p52408
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52409
sS'default'
p52410
g3
sS'name'
p52411
S'control_tags'
p52412
sS'required'
p52413
I00
sS'group_name'
p52414
S'Advanced'
p52415
sa(dp52416
S'description'
p52417
S'Set the enabled status of the MooseObject.\n'
p52418
sS'cpp_type'
p52419
S'bool'
p52420
sS'default'
p52421
S'1'
p52422
sS'name'
p52423
S'enable'
p52424
sS'required'
p52425
I00
sS'group_name'
p52426
S'Advanced'
p52427
sa(dp52428
S'description'
p52429
S'The value of the variable inside the box\n'
p52430
sS'cpp_type'
p52431
S'double'
p52432
sS'default'
p52433
S'0'
p52434
sS'name'
p52435
S'inside'
p52436
sS'required'
p52437
I00
sS'group_name'
p52438
Nsa(dp52439
S'description'
p52440
S'The value of the variable outside the box\n'
p52441
sS'cpp_type'
p52442
S'double'
p52443
sS'default'
p52444
S'0'
p52445
sS'name'
p52446
S'outside'
p52447
sS'required'
p52448
I00
sS'group_name'
p52449
Nsa(dp52450
S'description'
p52451
g3
sS'cpp_type'
p52452
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52453
sS'default'
p52454
S'BoundingBoxIC'
p52455
sS'name'
p52456
S'type'
p52457
sS'required'
p52458
I00
sS'group_name'
p52459
Nsa(dp52460
S'description'
p52461
S'The variable this initial condition is supposed to provide values for.\n'
p52462
sS'cpp_type'
p52463
S'VariableName'
p52464
sS'default'
p52465
g3
sS'name'
p52466
S'variable'
p52467
sS'required'
p52468
I01
sS'group_name'
p52469
Nsa(dp52470
S'description'
p52471
S'The x coordinate of the lower left-hand corner of the box\n'
p52472
sS'cpp_type'
p52473
S'double'
p52474
sS'default'
p52475
g3
sS'name'
p52476
S'x1'
p52477
sS'required'
p52478
I01
sS'group_name'
p52479
Nsa(dp52480
S'description'
p52481
S'The x coordinate of the upper right-hand corner of the box\n'
p52482
sS'cpp_type'
p52483
S'double'
p52484
sS'default'
p52485
g3
sS'name'
p52486
S'x2'
p52487
sS'required'
p52488
I01
sS'group_name'
p52489
Nsa(dp52490
S'description'
p52491
S'The y coordinate of the lower left-hand corner of the box\n'
p52492
sS'cpp_type'
p52493
S'double'
p52494
sS'default'
p52495
g3
sS'name'
p52496
S'y1'
p52497
sS'required'
p52498
I01
sS'group_name'
p52499
Nsa(dp52500
S'description'
p52501
S'The y coordinate of the upper right-hand corner of the box\n'
p52502
sS'cpp_type'
p52503
S'double'
p52504
sS'default'
p52505
g3
sS'name'
p52506
S'y2'
p52507
sS'required'
p52508
I01
sS'group_name'
p52509
Nsa(dp52510
S'description'
p52511
S'The z coordinate of the lower left-hand corner of the box\n'
p52512
sS'cpp_type'
p52513
S'double'
p52514
sS'default'
p52515
S'0'
p52516
sS'name'
p52517
S'z1'
p52518
sS'required'
p52519
I00
sS'group_name'
p52520
Nsa(dp52521
S'description'
p52522
S'The z coordinate of the upper right-hand corner of the box\n'
p52523
sS'cpp_type'
p52524
S'double'
p52525
sS'default'
p52526
S'0'
p52527
sS'name'
p52528
S'z2'
p52529
sS'required'
p52530
I00
sS'group_name'
p52531
NsasS'name'
p52532
S'/Variables/*/InitialCondition/<type>/BoundingBoxIC'
p52533
sa(dp52534
S'description'
p52535
g3
sS'subblocks'
p52536
NsS'parameters'
p52537
(lp52538
(dp52539
S'description'
p52540
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52541
sS'cpp_type'
p52542
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p52543
sS'default'
p52544
g3
sS'name'
p52545
S'block'
p52546
sS'required'
p52547
I00
sS'group_name'
p52548
Nsa(dp52549
S'description'
p52550
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p52551
sS'cpp_type'
p52552
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p52553
sS'default'
p52554
g3
sS'name'
p52555
S'boundary'
p52556
sS'required'
p52557
I00
sS'group_name'
p52558
Nsa(dp52559
S'description'
p52560
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52561
sS'cpp_type'
p52562
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52563
sS'default'
p52564
g3
sS'name'
p52565
S'control_tags'
p52566
sS'required'
p52567
I00
sS'group_name'
p52568
S'Advanced'
p52569
sa(dp52570
S'description'
p52571
S'Set the enabled status of the MooseObject.\n'
p52572
sS'cpp_type'
p52573
S'bool'
p52574
sS'default'
p52575
S'1'
p52576
sS'name'
p52577
S'enable'
p52578
sS'required'
p52579
I00
sS'group_name'
p52580
S'Advanced'
p52581
sa(dp52582
S'description'
p52583
g3
sS'cpp_type'
p52584
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52585
sS'default'
p52586
S'ConstantIC'
p52587
sS'name'
p52588
S'type'
p52589
sS'required'
p52590
I00
sS'group_name'
p52591
Nsa(dp52592
S'description'
p52593
S'The value to be set in IC\n'
p52594
sS'cpp_type'
p52595
S'double'
p52596
sS'default'
p52597
g3
sS'name'
p52598
S'value'
p52599
sS'required'
p52600
I01
sS'group_name'
p52601
Nsa(dp52602
S'description'
p52603
S'The variable this initial condition is supposed to provide values for.\n'
p52604
sS'cpp_type'
p52605
S'VariableName'
p52606
sS'default'
p52607
g3
sS'name'
p52608
S'variable'
p52609
sS'required'
p52610
I01
sS'group_name'
p52611
NsasS'name'
p52612
S'/Variables/*/InitialCondition/<type>/ConstantIC'
p52613
sa(dp52614
S'description'
p52615
g3
sS'subblocks'
p52616
NsS'parameters'
p52617
(lp52618
(dp52619
S'description'
p52620
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52621
sS'cpp_type'
p52622
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p52623
sS'default'
p52624
g3
sS'name'
p52625
S'block'
p52626
sS'required'
p52627
I00
sS'group_name'
p52628
Nsa(dp52629
S'description'
p52630
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p52631
sS'cpp_type'
p52632
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p52633
sS'default'
p52634
g3
sS'name'
p52635
S'boundary'
p52636
sS'required'
p52637
I00
sS'group_name'
p52638
Nsa(dp52639
S'description'
p52640
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52641
sS'cpp_type'
p52642
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52643
sS'default'
p52644
g3
sS'name'
p52645
S'control_tags'
p52646
sS'required'
p52647
I00
sS'group_name'
p52648
S'Advanced'
p52649
sa(dp52650
S'description'
p52651
S'Set the enabled status of the MooseObject.\n'
p52652
sS'cpp_type'
p52653
S'bool'
p52654
sS'default'
p52655
S'1'
p52656
sS'name'
p52657
S'enable'
p52658
sS'required'
p52659
I00
sS'group_name'
p52660
S'Advanced'
p52661
sa(dp52662
S'description'
p52663
S'The initial condition function.\n'
p52664
sS'cpp_type'
p52665
S'FunctionName'
p52666
sS'default'
p52667
g3
sS'name'
p52668
S'function'
p52669
sS'required'
p52670
I01
sS'group_name'
p52671
Nsa(dp52672
S'description'
p52673
g3
sS'cpp_type'
p52674
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52675
sS'default'
p52676
S'FunctionIC'
p52677
sS'name'
p52678
S'type'
p52679
sS'required'
p52680
I00
sS'group_name'
p52681
Nsa(dp52682
S'description'
p52683
S'The variable this initial condition is supposed to provide values for.\n'
p52684
sS'cpp_type'
p52685
S'VariableName'
p52686
sS'default'
p52687
g3
sS'name'
p52688
S'variable'
p52689
sS'required'
p52690
I01
sS'group_name'
p52691
NsasS'name'
p52692
S'/Variables/*/InitialCondition/<type>/FunctionIC'
p52693
sa(dp52694
S'description'
p52695
g3
sS'subblocks'
p52696
NsS'parameters'
p52697
(lp52698
(dp52699
S'description'
p52700
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52701
sS'cpp_type'
p52702
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52703
sS'default'
p52704
g3
sS'name'
p52705
S'control_tags'
p52706
sS'required'
p52707
I00
sS'group_name'
p52708
S'Advanced'
p52709
sa(dp52710
S'description'
p52711
S'Set the enabled status of the MooseObject.\n'
p52712
sS'cpp_type'
p52713
S'bool'
p52714
sS'default'
p52715
S'1'
p52716
sS'name'
p52717
S'enable'
p52718
sS'required'
p52719
I00
sS'group_name'
p52720
S'Advanced'
p52721
sa(dp52722
S'description'
p52723
S'The initial condition function.\n'
p52724
sS'cpp_type'
p52725
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p52726
sS'default'
p52727
g3
sS'name'
p52728
S'function'
p52729
sS'required'
p52730
I01
sS'group_name'
p52731
Nsa(dp52732
S'description'
p52733
g3
sS'cpp_type'
p52734
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52735
sS'default'
p52736
S'FunctionScalarIC'
p52737
sS'name'
p52738
S'type'
p52739
sS'required'
p52740
I00
sS'group_name'
p52741
Nsa(dp52742
S'description'
p52743
S'The variable this initial condition is supposed to provide values for.\n'
p52744
sS'cpp_type'
p52745
S'VariableName'
p52746
sS'default'
p52747
g3
sS'name'
p52748
S'variable'
p52749
sS'required'
p52750
I00
sS'group_name'
p52751
NsasS'name'
p52752
S'/Variables/*/InitialCondition/<type>/FunctionScalarIC'
p52753
sa(dp52754
S'description'
p52755
g3
sS'subblocks'
p52756
NsS'parameters'
p52757
(lp52758
(dp52759
S'description'
p52760
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52761
sS'cpp_type'
p52762
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p52763
sS'default'
p52764
g3
sS'name'
p52765
S'block'
p52766
sS'required'
p52767
I00
sS'group_name'
p52768
Nsa(dp52769
S'description'
p52770
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p52771
sS'cpp_type'
p52772
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p52773
sS'default'
p52774
g3
sS'name'
p52775
S'boundary'
p52776
sS'required'
p52777
I00
sS'group_name'
p52778
Nsa(dp52779
S'description'
p52780
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52781
sS'cpp_type'
p52782
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52783
sS'default'
p52784
g3
sS'name'
p52785
S'control_tags'
p52786
sS'required'
p52787
I00
sS'group_name'
p52788
S'Advanced'
p52789
sa(dp52790
S'description'
p52791
S'Set the enabled status of the MooseObject.\n'
p52792
sS'cpp_type'
p52793
S'bool'
p52794
sS'default'
p52795
S'1'
p52796
sS'name'
p52797
S'enable'
p52798
sS'required'
p52799
I00
sS'group_name'
p52800
S'Advanced'
p52801
sa(dp52802
S'description'
p52803
S'Upper bound of the randomly generated values\n'
p52804
sS'cpp_type'
p52805
S'double'
p52806
sS'default'
p52807
S'1'
p52808
sS'name'
p52809
S'max'
p52810
sS'required'
p52811
I00
sS'group_name'
p52812
Nsa(dp52813
S'description'
p52814
S'Lower bound of the randomly generated values\n'
p52815
sS'cpp_type'
p52816
S'double'
p52817
sS'default'
p52818
S'0'
p52819
sS'name'
p52820
S'min'
p52821
sS'required'
p52822
I00
sS'group_name'
p52823
Nsa(dp52824
S'description'
p52825
S'Seed value for the random number generator\n'
p52826
sS'cpp_type'
p52827
S'unsigned int'
p52828
sS'default'
p52829
S'0'
p52830
sS'name'
p52831
S'seed'
p52832
sS'required'
p52833
I00
sS'group_name'
p52834
Nsa(dp52835
S'description'
p52836
g3
sS'cpp_type'
p52837
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52838
sS'default'
p52839
S'RandomIC'
p52840
sS'name'
p52841
S'type'
p52842
sS'required'
p52843
I00
sS'group_name'
p52844
Nsa(dp52845
S'description'
p52846
S'The variable this initial condition is supposed to provide values for.\n'
p52847
sS'cpp_type'
p52848
S'VariableName'
p52849
sS'default'
p52850
g3
sS'name'
p52851
S'variable'
p52852
sS'required'
p52853
I01
sS'group_name'
p52854
NsasS'name'
p52855
S'/Variables/*/InitialCondition/<type>/RandomIC'
p52856
sa(dp52857
S'description'
p52858
g3
sS'subblocks'
p52859
NsS'parameters'
p52860
(lp52861
(dp52862
S'description'
p52863
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52864
sS'cpp_type'
p52865
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52866
sS'default'
p52867
g3
sS'name'
p52868
S'control_tags'
p52869
sS'required'
p52870
I00
sS'group_name'
p52871
S'Advanced'
p52872
sa(dp52873
S'description'
p52874
S'Set the enabled status of the MooseObject.\n'
p52875
sS'cpp_type'
p52876
S'bool'
p52877
sS'default'
p52878
S'1'
p52879
sS'name'
p52880
S'enable'
p52881
sS'required'
p52882
I00
sS'group_name'
p52883
S'Advanced'
p52884
sa(dp52885
S'description'
p52886
g3
sS'cpp_type'
p52887
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52888
sS'default'
p52889
S'ScalarComponentIC'
p52890
sS'name'
p52891
S'type'
p52892
sS'required'
p52893
I00
sS'group_name'
p52894
Nsa(dp52895
S'description'
p52896
S'Initial values to initialize the scalar variable.\n'
p52897
sS'cpp_type'
p52898
S'std::__1::vector<double, std::__1::allocator<double> >'
p52899
sS'default'
p52900
g3
sS'name'
p52901
S'values'
p52902
sS'required'
p52903
I01
sS'group_name'
p52904
Nsa(dp52905
S'description'
p52906
S'The variable this initial condition is supposed to provide values for.\n'
p52907
sS'cpp_type'
p52908
S'VariableName'
p52909
sS'default'
p52910
g3
sS'name'
p52911
S'variable'
p52912
sS'required'
p52913
I00
sS'group_name'
p52914
NsasS'name'
p52915
S'/Variables/*/InitialCondition/<type>/ScalarComponentIC'
p52916
sa(dp52917
S'description'
p52918
g3
sS'subblocks'
p52919
NsS'parameters'
p52920
(lp52921
(dp52922
S'description'
p52923
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52924
sS'cpp_type'
p52925
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52926
sS'default'
p52927
g3
sS'name'
p52928
S'control_tags'
p52929
sS'required'
p52930
I00
sS'group_name'
p52931
S'Advanced'
p52932
sa(dp52933
S'description'
p52934
S'Set the enabled status of the MooseObject.\n'
p52935
sS'cpp_type'
p52936
S'bool'
p52937
sS'default'
p52938
S'1'
p52939
sS'name'
p52940
S'enable'
p52941
sS'required'
p52942
I00
sS'group_name'
p52943
S'Advanced'
p52944
sa(dp52945
S'description'
p52946
g3
sS'cpp_type'
p52947
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52948
sS'default'
p52949
S'ScalarConstantIC'
p52950
sS'name'
p52951
S'type'
p52952
sS'required'
p52953
I00
sS'group_name'
p52954
Nsa(dp52955
S'description'
p52956
g3
sS'cpp_type'
p52957
S'double'
p52958
sS'default'
p52959
S'0'
p52960
sS'name'
p52961
S'value'
p52962
sS'required'
p52963
I00
sS'group_name'
p52964
Nsa(dp52965
S'description'
p52966
S'The variable this initial condition is supposed to provide values for.\n'
p52967
sS'cpp_type'
p52968
S'VariableName'
p52969
sS'default'
p52970
g3
sS'name'
p52971
S'variable'
p52972
sS'required'
p52973
I00
sS'group_name'
p52974
NsasS'name'
p52975
S'/Variables/*/InitialCondition/<type>/ScalarConstantIC'
p52976
sasS'parameters'
p52977
NsS'name'
p52978
S'/Variables/*/InitialCondition/<type>'
p52979
sasS'parameters'
p52980
(lp52981
(dp52982
S'description'
p52983
S'A string representing the Moose Object that will be built by this Action\n'
p52984
sS'cpp_type'
p52985
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52986
sS'default'
p52987
g3
sS'name'
p52988
S'type'
p52989
sS'required'
p52990
I01
sS'group_name'
p52991
NsasS'name'
p52992
S'/Variables/*/InitialCondition'
p52993
sasS'parameters'
p52994
(lp52995
(dp52996
S'description'
p52997
S'The block id where this variable lives\n'
p52998
sS'cpp_type'
p52999
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p53000
sS'default'
p53001
g3
sS'name'
p53002
S'block'
p53003
sS'required'
p53004
I00
sS'group_name'
p53005
Nsa(dp53006
S'description'
p53007
S'True to make this variable an eigen variable\n'
p53008
sS'cpp_type'
p53009
S'bool'
p53010
sS'default'
p53011
S'0'
p53012
sS'name'
p53013
S'eigen'
p53014
sS'required'
p53015
I00
sS'group_name'
p53016
S'Advanced'
p53017
sa(dp53018
S'name'
p53019
S'family'
p53020
sS'cpp_type'
p53021
S'MooseEnum'
p53022
sS'default'
p53023
S'LAGRANGE'
p53024
sS'description'
p53025
S'Specifies the family of FE shape functions to use for this variable\n'
p53026
sS'required'
p53027
I00
sS'options'
p53028
S'LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC'
p53029
sS'group_name'
p53030
Nsa(dp53031
S'description'
p53032
S'Specifies the initial condition for this variable\n'
p53033
sS'cpp_type'
p53034
S'double'
p53035
sS'default'
p53036
g3
sS'name'
p53037
S'initial_condition'
p53038
sS'required'
p53039
I00
sS'group_name'
p53040
Nsa(dp53041
S'name'
p53042
S'order'
p53043
sS'cpp_type'
p53044
S'MooseEnum'
p53045
sS'default'
p53046
S'FIRST'
p53047
sS'description'
p53048
S'Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n'
p53049
sS'required'
p53050
I00
sS'options'
p53051
S'CONSTANT FIRST SECOND THIRD FOURTH'
p53052
sS'group_name'
p53053
Nsa(dp53054
S'description'
p53055
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53056
sS'cpp_type'
p53057
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53058
sS'default'
p53059
g3
sS'name'
p53060
S'outputs'
p53061
sS'required'
p53062
I00
sS'group_name'
p53063
S'Advanced'
p53064
sa(dp53065
S'description'
p53066
S'Specifies a scaling factor to apply to this variable\n'
p53067
sS'cpp_type'
p53068
S'double'
p53069
sS'default'
p53070
S'1'
p53071
sS'name'
p53072
S'scaling'
p53073
sS'required'
p53074
I00
sS'group_name'
p53075
S'Advanced'
p53076
sa(dp53077
S'description'
p53078
S'Gives the timestep (or "LATEST") for which to read a solution from a file for a given variable. (Default: LATEST)\n'
p53079
sS'cpp_type'
p53080
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53081
sS'default'
p53082
S'LATEST'
p53083
sS'name'
p53084
S'initial_from_file_timestep'
p53085
sS'required'
p53086
I00
sS'group_name'
p53087
S'Initial From File'
p53088
sa(dp53089
S'description'
p53090
S'Gives the name of a variable for which to read an initial condition from a mesh file\n'
p53091
sS'cpp_type'
p53092
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53093
sS'default'
p53094
g3
sS'name'
p53095
S'initial_from_file_var'
p53096
sS'required'
p53097
I00
sS'group_name'
p53098
S'Initial From File'
p53099
sasS'name'
p53100
S'/Variables/*'
p53101
sasS'parameters'
p53102
NsS'name'
p53103
S'/Variables'
p53104
sa(dp53105
S'description'
p53106
g3
sS'subblocks'
p53107
(lp53108
(dp53109
S'description'
p53110
g3
sS'subblocks'
p53111
NsS'parameters'
p53112
(lp53113
(dp53114
S'description'
p53115
S'A string representing the Moose Object that will be built by this Action\n'
p53116
sS'cpp_type'
p53117
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53118
sS'default'
p53119
g3
sS'name'
p53120
S'type'
p53121
sS'required'
p53122
I01
sS'group_name'
p53123
NsasS'name'
p53124
S'/VectorPostprocessors/*'
p53125
sa(dp53126
S'description'
p53127
g3
sS'subblocks'
p53128
NsS'parameters'
p53129
(lp53130
(dp53131
S'description'
p53132
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53133
sS'cpp_type'
p53134
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53135
sS'default'
p53136
g3
sS'name'
p53137
S'control_tags'
p53138
sS'required'
p53139
I00
sS'group_name'
p53140
S'Advanced'
p53141
sa(dp53142
S'description'
p53143
S'Set the enabled status of the MooseObject.\n'
p53144
sS'cpp_type'
p53145
S'bool'
p53146
sS'default'
p53147
S'1'
p53148
sS'name'
p53149
S'enable'
p53150
sS'required'
p53151
I00
sS'group_name'
p53152
S'Advanced'
p53153
sa(dp53154
S'name'
p53155
S'execute_on'
p53156
sS'cpp_type'
p53157
S'MultiMooseEnum'
p53158
sS'default'
p53159
S'TIMESTEP_END'
p53160
sS'description'
p53161
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53162
sS'required'
p53163
I00
sS'options'
p53164
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53165
sS'group_name'
p53166
Nsa(dp53167
S'description'
p53168
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53169
sS'cpp_type'
p53170
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53171
sS'default'
p53172
g3
sS'name'
p53173
S'outputs'
p53174
sS'required'
p53175
I00
sS'group_name'
p53176
S'Advanced'
p53177
sa(dp53178
S'description'
p53179
g3
sS'cpp_type'
p53180
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53181
sS'default'
p53182
S'ConstantVectorPostprocessor'
p53183
sS'name'
p53184
S'type'
p53185
sS'required'
p53186
I00
sS'group_name'
p53187
Nsa(dp53188
S'description'
p53189
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53190
sS'cpp_type'
p53191
S'bool'
p53192
sS'default'
p53193
S'0'
p53194
sS'name'
p53195
S'use_displaced_mesh'
p53196
sS'required'
p53197
I00
sS'group_name'
p53198
S'Advanced'
p53199
sa(dp53200
S'description'
p53201
S'The vector value this object will have.\n'
p53202
sS'cpp_type'
p53203
S'std::__1::vector<double, std::__1::allocator<double> >'
p53204
sS'default'
p53205
g3
sS'name'
p53206
S'value'
p53207
sS'required'
p53208
I01
sS'group_name'
p53209
NsasS'name'
p53210
S'/VectorPostprocessors/ConstantVectorPostprocessor'
p53211
sa(dp53212
S'description'
p53213
g3
sS'subblocks'
p53214
NsS'parameters'
p53215
(lp53216
(dp53217
S'description'
p53218
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53219
sS'cpp_type'
p53220
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53221
sS'default'
p53222
g3
sS'name'
p53223
S'control_tags'
p53224
sS'required'
p53225
I00
sS'group_name'
p53226
S'Advanced'
p53227
sa(dp53228
S'description'
p53229
S'Set the enabled status of the MooseObject.\n'
p53230
sS'cpp_type'
p53231
S'bool'
p53232
sS'default'
p53233
S'1'
p53234
sS'name'
p53235
S'enable'
p53236
sS'required'
p53237
I00
sS'group_name'
p53238
S'Advanced'
p53239
sa(dp53240
S'name'
p53241
S'execute_on'
p53242
sS'cpp_type'
p53243
S'MultiMooseEnum'
p53244
sS'default'
p53245
S'TIMESTEP_END'
p53246
sS'description'
p53247
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53248
sS'required'
p53249
I00
sS'options'
p53250
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53251
sS'group_name'
p53252
Nsa(dp53253
S'description'
p53254
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53255
sS'cpp_type'
p53256
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53257
sS'default'
p53258
g3
sS'name'
p53259
S'outputs'
p53260
sS'required'
p53261
I00
sS'group_name'
p53262
S'Advanced'
p53263
sa(dp53264
S'description'
p53265
g3
sS'cpp_type'
p53266
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53267
sS'default'
p53268
S'Eigenvalues'
p53269
sS'name'
p53270
S'type'
p53271
sS'required'
p53272
I00
sS'group_name'
p53273
Nsa(dp53274
S'description'
p53275
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53276
sS'cpp_type'
p53277
S'bool'
p53278
sS'default'
p53279
S'0'
p53280
sS'name'
p53281
S'use_displaced_mesh'
p53282
sS'required'
p53283
I00
sS'group_name'
p53284
S'Advanced'
p53285
sasS'name'
p53286
S'/VectorPostprocessors/Eigenvalues'
p53287
sa(dp53288
S'description'
p53289
g3
sS'subblocks'
p53290
NsS'parameters'
p53291
(lp53292
(dp53293
S'description'
p53294
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53295
sS'cpp_type'
p53296
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53297
sS'default'
p53298
g3
sS'name'
p53299
S'control_tags'
p53300
sS'required'
p53301
I00
sS'group_name'
p53302
S'Advanced'
p53303
sa(dp53304
S'description'
p53305
S'Set the enabled status of the MooseObject.\n'
p53306
sS'cpp_type'
p53307
S'bool'
p53308
sS'default'
p53309
S'1'
p53310
sS'name'
p53311
S'enable'
p53312
sS'required'
p53313
I00
sS'group_name'
p53314
S'Advanced'
p53315
sa(dp53316
S'description'
p53317
S'The end of the line\n'
p53318
sS'cpp_type'
p53319
S'libMesh::Point'
p53320
sS'default'
p53321
g3
sS'name'
p53322
S'end'
p53323
sS'required'
p53324
I01
sS'group_name'
p53325
Nsa(dp53326
S'name'
p53327
S'execute_on'
p53328
sS'cpp_type'
p53329
S'MultiMooseEnum'
p53330
sS'default'
p53331
S'TIMESTEP_END'
p53332
sS'description'
p53333
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53334
sS'required'
p53335
I00
sS'options'
p53336
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53337
sS'group_name'
p53338
Nsa(dp53339
S'description'
p53340
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53341
sS'cpp_type'
p53342
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53343
sS'default'
p53344
g3
sS'name'
p53345
S'outputs'
p53346
sS'required'
p53347
I00
sS'group_name'
p53348
S'Advanced'
p53349
sa(dp53350
S'description'
p53351
S'The beginning of the line\n'
p53352
sS'cpp_type'
p53353
S'libMesh::Point'
p53354
sS'default'
p53355
g3
sS'name'
p53356
S'start'
p53357
sS'required'
p53358
I01
sS'group_name'
p53359
Nsa(dp53360
S'description'
p53361
g3
sS'cpp_type'
p53362
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53363
sS'default'
p53364
S'ElementsAlongLine'
p53365
sS'name'
p53366
S'type'
p53367
sS'required'
p53368
I00
sS'group_name'
p53369
Nsa(dp53370
S'description'
p53371
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53372
sS'cpp_type'
p53373
S'bool'
p53374
sS'default'
p53375
S'0'
p53376
sS'name'
p53377
S'use_displaced_mesh'
p53378
sS'required'
p53379
I00
sS'group_name'
p53380
S'Advanced'
p53381
sasS'name'
p53382
S'/VectorPostprocessors/ElementsAlongLine'
p53383
sa(dp53384
S'description'
p53385
g3
sS'subblocks'
p53386
NsS'parameters'
p53387
(lp53388
(dp53389
S'description'
p53390
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53391
sS'cpp_type'
p53392
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53393
sS'default'
p53394
g3
sS'name'
p53395
S'control_tags'
p53396
sS'required'
p53397
I00
sS'group_name'
p53398
S'Advanced'
p53399
sa(dp53400
S'description'
p53401
S'Set the enabled status of the MooseObject.\n'
p53402
sS'cpp_type'
p53403
S'bool'
p53404
sS'default'
p53405
S'1'
p53406
sS'name'
p53407
S'enable'
p53408
sS'required'
p53409
I00
sS'group_name'
p53410
S'Advanced'
p53411
sa(dp53412
S'name'
p53413
S'execute_on'
p53414
sS'cpp_type'
p53415
S'MultiMooseEnum'
p53416
sS'default'
p53417
S'TIMESTEP_END'
p53418
sS'description'
p53419
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53420
sS'required'
p53421
I00
sS'options'
p53422
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53423
sS'group_name'
p53424
Nsa(dp53425
S'description'
p53426
S'Normal vector to the plane\n'
p53427
sS'cpp_type'
p53428
S'libMesh::Point'
p53429
sS'default'
p53430
g3
sS'name'
p53431
S'normal'
p53432
sS'required'
p53433
I01
sS'group_name'
p53434
Nsa(dp53435
S'description'
p53436
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53437
sS'cpp_type'
p53438
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53439
sS'default'
p53440
g3
sS'name'
p53441
S'outputs'
p53442
sS'required'
p53443
I00
sS'group_name'
p53444
S'Advanced'
p53445
sa(dp53446
S'description'
p53447
S'Point in the plane\n'
p53448
sS'cpp_type'
p53449
S'libMesh::Point'
p53450
sS'default'
p53451
g3
sS'name'
p53452
S'point'
p53453
sS'required'
p53454
I01
sS'group_name'
p53455
Nsa(dp53456
S'description'
p53457
g3
sS'cpp_type'
p53458
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53459
sS'default'
p53460
S'ElementsAlongPlane'
p53461
sS'name'
p53462
S'type'
p53463
sS'required'
p53464
I00
sS'group_name'
p53465
Nsa(dp53466
S'description'
p53467
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53468
sS'cpp_type'
p53469
S'bool'
p53470
sS'default'
p53471
S'0'
p53472
sS'name'
p53473
S'use_displaced_mesh'
p53474
sS'required'
p53475
I00
sS'group_name'
p53476
S'Advanced'
p53477
sasS'name'
p53478
S'/VectorPostprocessors/ElementsAlongPlane'
p53479
sa(dp53480
S'description'
p53481
g3
sS'subblocks'
p53482
NsS'parameters'
p53483
(lp53484
(dp53485
S'description'
p53486
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53487
sS'cpp_type'
p53488
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53489
sS'default'
p53490
g3
sS'name'
p53491
S'control_tags'
p53492
sS'required'
p53493
I00
sS'group_name'
p53494
S'Advanced'
p53495
sa(dp53496
S'description'
p53497
S'Set the enabled status of the MooseObject.\n'
p53498
sS'cpp_type'
p53499
S'bool'
p53500
sS'default'
p53501
S'1'
p53502
sS'name'
p53503
S'enable'
p53504
sS'required'
p53505
I00
sS'group_name'
p53506
S'Advanced'
p53507
sa(dp53508
S'description'
p53509
S'The end of the line\n'
p53510
sS'cpp_type'
p53511
S'libMesh::Point'
p53512
sS'default'
p53513
g3
sS'name'
p53514
S'end'
p53515
sS'required'
p53516
I01
sS'group_name'
p53517
Nsa(dp53518
S'name'
p53519
S'execute_on'
p53520
sS'cpp_type'
p53521
S'MultiMooseEnum'
p53522
sS'default'
p53523
S'TIMESTEP_END'
p53524
sS'description'
p53525
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53526
sS'required'
p53527
I00
sS'options'
p53528
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53529
sS'group_name'
p53530
Nsa(dp53531
S'description'
p53532
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53533
sS'cpp_type'
p53534
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53535
sS'default'
p53536
g3
sS'name'
p53537
S'outputs'
p53538
sS'required'
p53539
I00
sS'group_name'
p53540
S'Advanced'
p53541
sa(dp53542
S'description'
p53543
S'The beginning of the line\n'
p53544
sS'cpp_type'
p53545
S'libMesh::Point'
p53546
sS'default'
p53547
g3
sS'name'
p53548
S'start'
p53549
sS'required'
p53550
I01
sS'group_name'
p53551
Nsa(dp53552
S'description'
p53553
g3
sS'cpp_type'
p53554
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53555
sS'default'
p53556
S'IntersectionPointsAlongLine'
p53557
sS'name'
p53558
S'type'
p53559
sS'required'
p53560
I00
sS'group_name'
p53561
Nsa(dp53562
S'description'
p53563
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53564
sS'cpp_type'
p53565
S'bool'
p53566
sS'default'
p53567
S'0'
p53568
sS'name'
p53569
S'use_displaced_mesh'
p53570
sS'required'
p53571
I00
sS'group_name'
p53572
S'Advanced'
p53573
sasS'name'
p53574
S'/VectorPostprocessors/IntersectionPointsAlongLine'
p53575
sa(dp53576
S'description'
p53577
S'Performs a polynomial least squares fit on the data contained in another VectorPostprocessor\n'
p53578
sS'subblocks'
p53579
NsS'parameters'
p53580
(lp53581
(dp53582
S'description'
p53583
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53584
sS'cpp_type'
p53585
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53586
sS'default'
p53587
g3
sS'name'
p53588
S'control_tags'
p53589
sS'required'
p53590
I00
sS'group_name'
p53591
S'Advanced'
p53592
sa(dp53593
S'description'
p53594
S'Set the enabled status of the MooseObject.\n'
p53595
sS'cpp_type'
p53596
S'bool'
p53597
sS'default'
p53598
S'1'
p53599
sS'name'
p53600
S'enable'
p53601
sS'required'
p53602
I00
sS'group_name'
p53603
S'Advanced'
p53604
sa(dp53605
S'name'
p53606
S'execute_on'
p53607
sS'cpp_type'
p53608
S'MultiMooseEnum'
p53609
sS'default'
p53610
S'TIMESTEP_END'
p53611
sS'description'
p53612
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53613
sS'required'
p53614
I00
sS'options'
p53615
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53616
sS'group_name'
p53617
Nsa(dp53618
S'description'
p53619
S'The number of samples to be output\n'
p53620
sS'cpp_type'
p53621
S'unsigned int'
p53622
sS'default'
p53623
g3
sS'name'
p53624
S'num_samples'
p53625
sS'required'
p53626
I00
sS'group_name'
p53627
Nsa(dp53628
S'description'
p53629
S'The order of the polynomial fit\n'
p53630
sS'cpp_type'
p53631
S'unsigned int'
p53632
sS'default'
p53633
g3
sS'name'
p53634
S'order'
p53635
sS'required'
p53636
I01
sS'group_name'
p53637
Nsa(dp53638
S'name'
p53639
S'output'
p53640
sS'cpp_type'
p53641
S'MooseEnum'
p53642
sS'default'
p53643
S'Coefficients'
p53644
sS'description'
p53645
S'The quantity to output.  Options are: Coefficients Samples\n'
p53646
sS'required'
p53647
I00
sS'options'
p53648
S'Coefficients Samples'
p53649
sS'group_name'
p53650
Nsa(dp53651
S'description'
p53652
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53653
sS'cpp_type'
p53654
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53655
sS'default'
p53656
g3
sS'name'
p53657
S'outputs'
p53658
sS'required'
p53659
I00
sS'group_name'
p53660
S'Advanced'
p53661
sa(dp53662
S'description'
p53663
S'The maximum x value of the of samples to be output\n'
p53664
sS'cpp_type'
p53665
S'double'
p53666
sS'default'
p53667
g3
sS'name'
p53668
S'sample_x_max'
p53669
sS'required'
p53670
I00
sS'group_name'
p53671
Nsa(dp53672
S'description'
p53673
S'The minimum x value of the of samples to be output\n'
p53674
sS'cpp_type'
p53675
S'double'
p53676
sS'default'
p53677
g3
sS'name'
p53678
S'sample_x_min'
p53679
sS'required'
p53680
I00
sS'group_name'
p53681
Nsa(dp53682
S'description'
p53683
g3
sS'cpp_type'
p53684
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53685
sS'default'
p53686
S'LeastSquaresFit'
p53687
sS'name'
p53688
S'type'
p53689
sS'required'
p53690
I00
sS'group_name'
p53691
Nsa(dp53692
S'description'
p53693
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53694
sS'cpp_type'
p53695
S'bool'
p53696
sS'default'
p53697
S'0'
p53698
sS'name'
p53699
S'use_displaced_mesh'
p53700
sS'required'
p53701
I00
sS'group_name'
p53702
S'Advanced'
p53703
sa(dp53704
S'description'
p53705
S'The vectorpostprocessor on whose values we perform a least squares fit\n'
p53706
sS'cpp_type'
p53707
S'VectorPostprocessorName'
p53708
sS'default'
p53709
g3
sS'name'
p53710
S'vectorpostprocessor'
p53711
sS'required'
p53712
I01
sS'group_name'
p53713
Nsa(dp53714
S'description'
p53715
S'The name of the independent variable\n'
p53716
sS'cpp_type'
p53717
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53718
sS'default'
p53719
g3
sS'name'
p53720
S'x_name'
p53721
sS'required'
p53722
I01
sS'group_name'
p53723
Nsa(dp53724
S'description'
p53725
S'Value used to scale x values (scaling is done after shifting)\n'
p53726
sS'cpp_type'
p53727
S'double'
p53728
sS'default'
p53729
S'1'
p53730
sS'name'
p53731
S'x_scale'
p53732
sS'required'
p53733
I00
sS'group_name'
p53734
Nsa(dp53735
S'description'
p53736
S'Value used to shift x values (shifting is done before scaling)\n'
p53737
sS'cpp_type'
p53738
S'double'
p53739
sS'default'
p53740
S'0'
p53741
sS'name'
p53742
S'x_shift'
p53743
sS'required'
p53744
I00
sS'group_name'
p53745
Nsa(dp53746
S'description'
p53747
S'The name of the dependent variable\n'
p53748
sS'cpp_type'
p53749
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53750
sS'default'
p53751
g3
sS'name'
p53752
S'y_name'
p53753
sS'required'
p53754
I01
sS'group_name'
p53755
Nsa(dp53756
S'description'
p53757
S'Value used to scale y values (scaling is done after shifting)\n'
p53758
sS'cpp_type'
p53759
S'double'
p53760
sS'default'
p53761
S'1'
p53762
sS'name'
p53763
S'y_scale'
p53764
sS'required'
p53765
I00
sS'group_name'
p53766
Nsa(dp53767
S'description'
p53768
S'Value used to shift y values (shifting is done before scaling)\n'
p53769
sS'cpp_type'
p53770
S'double'
p53771
sS'default'
p53772
S'0'
p53773
sS'name'
p53774
S'y_shift'
p53775
sS'required'
p53776
I00
sS'group_name'
p53777
NsasS'name'
p53778
S'/VectorPostprocessors/LeastSquaresFit'
p53779
sa(dp53780
S'description'
p53781
g3
sS'subblocks'
p53782
NsS'parameters'
p53783
(lp53784
(dp53785
S'description'
p53786
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53787
sS'cpp_type'
p53788
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53789
sS'default'
p53790
g3
sS'name'
p53791
S'control_tags'
p53792
sS'required'
p53793
I00
sS'group_name'
p53794
S'Advanced'
p53795
sa(dp53796
S'description'
p53797
S'Set the enabled status of the MooseObject.\n'
p53798
sS'cpp_type'
p53799
S'bool'
p53800
sS'default'
p53801
S'1'
p53802
sS'name'
p53803
S'enable'
p53804
sS'required'
p53805
I00
sS'group_name'
p53806
S'Advanced'
p53807
sa(dp53808
S'description'
p53809
S'The ending of the line\n'
p53810
sS'cpp_type'
p53811
S'libMesh::Point'
p53812
sS'default'
p53813
g3
sS'name'
p53814
S'end_point'
p53815
sS'required'
p53816
I01
sS'group_name'
p53817
Nsa(dp53818
S'name'
p53819
S'execute_on'
p53820
sS'cpp_type'
p53821
S'MultiMooseEnum'
p53822
sS'default'
p53823
S'TIMESTEP_END'
p53824
sS'description'
p53825
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53826
sS'required'
p53827
I00
sS'options'
p53828
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53829
sS'group_name'
p53830
Nsa(dp53831
S'description'
p53832
S'The Functions to sample along the line\n'
p53833
sS'cpp_type'
p53834
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p53835
sS'default'
p53836
g3
sS'name'
p53837
S'functions'
p53838
sS'required'
p53839
I01
sS'group_name'
p53840
Nsa(dp53841
S'description'
p53842
S'The number of points to sample along the line\n'
p53843
sS'cpp_type'
p53844
S'unsigned int'
p53845
sS'default'
p53846
g3
sS'name'
p53847
S'num_points'
p53848
sS'required'
p53849
I01
sS'group_name'
p53850
Nsa(dp53851
S'description'
p53852
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53853
sS'cpp_type'
p53854
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53855
sS'default'
p53856
g3
sS'name'
p53857
S'outputs'
p53858
sS'required'
p53859
I00
sS'group_name'
p53860
S'Advanced'
p53861
sa(dp53862
S'name'
p53863
S'sort_by'
p53864
sS'cpp_type'
p53865
S'MooseEnum'
p53866
sS'default'
p53867
g3
sS'description'
p53868
S'What to sort the samples by\n'
p53869
sS'required'
p53870
I01
sS'options'
p53871
S'x y z id'
p53872
sS'group_name'
p53873
Nsa(dp53874
S'description'
p53875
S'The beginning of the line\n'
p53876
sS'cpp_type'
p53877
S'libMesh::Point'
p53878
sS'default'
p53879
g3
sS'name'
p53880
S'start_point'
p53881
sS'required'
p53882
I01
sS'group_name'
p53883
Nsa(dp53884
S'description'
p53885
g3
sS'cpp_type'
p53886
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53887
sS'default'
p53888
S'LineFunctionSampler'
p53889
sS'name'
p53890
S'type'
p53891
sS'required'
p53892
I00
sS'group_name'
p53893
Nsa(dp53894
S'description'
p53895
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53896
sS'cpp_type'
p53897
S'bool'
p53898
sS'default'
p53899
S'0'
p53900
sS'name'
p53901
S'use_displaced_mesh'
p53902
sS'required'
p53903
I00
sS'group_name'
p53904
S'Advanced'
p53905
sasS'name'
p53906
S'/VectorPostprocessors/LineFunctionSampler'
p53907
sa(dp53908
S'description'
p53909
g3
sS'subblocks'
p53910
NsS'parameters'
p53911
(lp53912
(dp53913
S'description'
p53914
S'The list of block ids (SubdomainID) that this object will be applied\n'
p53915
sS'cpp_type'
p53916
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p53917
sS'default'
p53918
g3
sS'name'
p53919
S'block'
p53920
sS'required'
p53921
I00
sS'group_name'
p53922
Nsa(dp53923
S'description'
p53924
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53925
sS'cpp_type'
p53926
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53927
sS'default'
p53928
g3
sS'name'
p53929
S'control_tags'
p53930
sS'required'
p53931
I00
sS'group_name'
p53932
S'Advanced'
p53933
sa(dp53934
S'description'
p53935
S'Set the enabled status of the MooseObject.\n'
p53936
sS'cpp_type'
p53937
S'bool'
p53938
sS'default'
p53939
S'1'
p53940
sS'name'
p53941
S'enable'
p53942
sS'required'
p53943
I00
sS'group_name'
p53944
S'Advanced'
p53945
sa(dp53946
S'description'
p53947
S'The end of the line\n'
p53948
sS'cpp_type'
p53949
S'libMesh::Point'
p53950
sS'default'
p53951
g3
sS'name'
p53952
S'end'
p53953
sS'required'
p53954
I01
sS'group_name'
p53955
Nsa(dp53956
S'name'
p53957
S'execute_on'
p53958
sS'cpp_type'
p53959
S'MultiMooseEnum'
p53960
sS'default'
p53961
S'TIMESTEP_END'
p53962
sS'description'
p53963
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53964
sS'required'
p53965
I00
sS'options'
p53966
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53967
sS'group_name'
p53968
Nsa(dp53969
S'description'
p53970
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53971
sS'cpp_type'
p53972
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53973
sS'default'
p53974
g3
sS'name'
p53975
S'outputs'
p53976
sS'required'
p53977
I00
sS'group_name'
p53978
S'Advanced'
p53979
sa(dp53980
S'description'
p53981
S'Name of the material property to be output along a line\n'
p53982
sS'cpp_type'
p53983
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53984
sS'default'
p53985
g3
sS'name'
p53986
S'property'
p53987
sS'required'
p53988
I01
sS'group_name'
p53989
Nsa(dp53990
S'name'
p53991
S'sort_by'
p53992
sS'cpp_type'
p53993
S'MooseEnum'
p53994
sS'default'
p53995
g3
sS'description'
p53996
S'What to sort the samples by\n'
p53997
sS'required'
p53998
I01
sS'options'
p53999
S'x y z id'
p54000
sS'group_name'
p54001
Nsa(dp54002
S'description'
p54003
S'The beginning of the line\n'
p54004
sS'cpp_type'
p54005
S'libMesh::Point'
p54006
sS'default'
p54007
g3
sS'name'
p54008
S'start'
p54009
sS'required'
p54010
I01
sS'group_name'
p54011
Nsa(dp54012
S'description'
p54013
g3
sS'cpp_type'
p54014
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p54015
sS'default'
p54016
S'LineMaterialRealSampler'
p54017
sS'name'
p54018
S'type'
p54019
sS'required'
p54020
I00
sS'group_name'
p54021
Nsa(dp54022
S'description'
p54023
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54024
sS'cpp_type'
p54025
S'bool'
p54026
sS'default'
p54027
S'0'
p54028
sS'name'
p54029
S'use_displaced_mesh'
p54030
sS'required'
p54031
I00
sS'group_name'
p54032
S'Advanced'
p54033
sasS'name'
p54034
S'/VectorPostprocessors/LineMaterialRealSampler'
p54035
sa(dp54036
S'description'
p54037
g3
sS'subblocks'
p54038
NsS'parameters'
p54039
(lp54040
(dp54041
S'description'
p54042
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54043
sS'cpp_type'
p54044
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p54045
sS'default'
p54046
g3
sS'name'
p54047
S'control_tags'
p54048
sS'required'
p54049
I00
sS'group_name'
p54050
S'Advanced'
p54051
sa(dp54052
S'description'
p54053
S'Set the enabled status of the MooseObject.\n'
p54054
sS'cpp_type'
p54055
S'bool'
p54056
sS'default'
p54057
S'1'
p54058
sS'name'
p54059
S'enable'
p54060
sS'required'
p54061
I00
sS'group_name'
p54062
S'Advanced'
p54063
sa(dp54064
S'description'
p54065
S'The ending of the line\n'
p54066
sS'cpp_type'
p54067
S'libMesh::Point'
p54068
sS'default'
p54069
g3
sS'name'
p54070
S'end_point'
p54071
sS'required'
p54072
I01
sS'group_name'
p54073
Nsa(dp54074
S'name'
p54075
S'execute_on'
p54076
sS'cpp_type'
p54077
S'MultiMooseEnum'
p54078
sS'default'
p54079
S'TIMESTEP_END'
p54080
sS'description'
p54081
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p54082
sS'required'
p54083
I00
sS'options'
p54084
S'none initial linear nonlinear timestep_end timestep_begin custom'
p54085
sS'group_name'
p54086
Nsa(dp54087
S'description'
p54088
S'The number of points to sample along the line\n'
p54089
sS'cpp_type'
p54090
S'unsigned int'
p54091
sS'default'
p54092
g3
sS'name'
p54093
S'num_points'
p54094
sS'required'
p54095
I01
sS'group_name'
p54096
Nsa(dp54097
S'description'
p54098
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p54099
sS'cpp_type'
p54100
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p54101
sS'default'
p54102
g3
sS'name'
p54103
S'outputs'
p54104
sS'required'
p54105
I00
sS'group_name'
p54106
S'Advanced'
p54107
sa(dp54108
S'name'
p54109
S'sort_by'
p54110
sS'cpp_type'
p54111
S'MooseEnum'
p54112
sS'default'
p54113
g3
sS'description'
p54114
S'What to sort the samples by\n'
p54115
sS'required'
p54116
I01
sS'options'
p54117
S'x y z id'
p54118
sS'group_name'
p54119
Nsa(dp54120
S'description'
p54121
S'The beginning of the line\n'
p54122
sS'cpp_type'
p54123
S'libMesh::Point'
p54124
sS'default'
p54125
g3
sS'name'
p54126
S'start_point'
p54127
sS'required'
p54128
I01
sS'group_name'
p54129
Nsa(dp54130
S'description'
p54131
g3
sS'cpp_type'
p54132
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p54133
sS'default'
p54134
S'LineValueSampler'
p54135
sS'name'
p54136
S'type'
p54137
sS'required'
p54138
I00
sS'group_name'
p54139
Nsa(dp54140
S'description'
p54141
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54142
sS'cpp_type'
p54143
S'bool'
p54144
sS'default'
p54145
S'0'
p54146
sS'name'
p54147
S'use_displaced_mesh'
p54148
sS'required'
p54149
I00
sS'group_name'
p54150
S'Advanced'
p54151
sa(dp54152
S'description'
p54153
S'The names of the variables that this VectorPostprocessor operates on\n'
p54154
sS'cpp_type'
p54155
S'std::vector<VariableName>'
p54156
sS'default'
p54157
g3
sS'name'
p54158
S'variable'
p54159
sS'required'
p54160
I01
sS'group_name'
p54161
NsasS'name'
p54162
S'/VectorPostprocessors/LineValueSampler'
p54163
sa(dp54164
S'description'
p54165
g3
sS'subblocks'
p54166
NsS'parameters'
p54167
(lp54168
(dp54169
S'description'
p54170
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54171
sS'cpp_type'
p54172
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p54173
sS'default'
p54174
g3
sS'name'
p54175
S'block'
p54176
sS'required'
p54177
I00
sS'group_name'
p54178
Nsa(dp54179
S'description'
p54180
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p54181
sS'cpp_type'
p54182
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p54183
sS'default'
p54184
g3
sS'name'
p54185
S'boundary'
p54186
sS'required'
p54187
I00
sS'group_name'
p54188
Nsa(dp54189
S'description'
p54190
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54191
sS'cpp_type'
p54192
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p54193
sS'default'
p54194
g3
sS'name'
p54195
S'control_tags'
p54196
sS'required'
p54197
I00
sS'group_name'
p54198
S'Advanced'
p54199
sa(dp54200
S'description'
p54201
S'Set the enabled status of the MooseObject.\n'
p54202
sS'cpp_type'
p54203
S'bool'
p54204
sS'default'
p54205
S'1'
p54206
sS'name'
p54207
S'enable'
p54208
sS'required'
p54209
I00
sS'group_name'
p54210
S'Advanced'
p54211
sa(dp54212
S'name'
p54213
S'execute_on'
p54214
sS'cpp_type'
p54215
S'MultiMooseEnum'
p54216
sS'default'
p54217
S'TIMESTEP_END'
p54218
sS'description'
p54219
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p54220
sS'required'
p54221
I00
sS'options'
p54222
S'none initial linear nonlinear timestep_end timestep_begin custom'
p54223
sS'group_name'
p54224
Nsa(dp54225
S'description'
p54226
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p54227
sS'cpp_type'
p54228
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p54229
sS'default'
p54230
g3
sS'name'
p54231
S'outputs'
p54232
sS'required'
p54233
I00
sS'group_name'
p54234
S'Advanced'
p54235
sa(dp54236
S'description'
p54237
S'The seed for the master random number generator\n'
p54238
sS'cpp_type'
p54239
S'unsigned int'
p54240
sS'default'
p54241
S'0'
p54242
sS'name'
p54243
S'seed'
p54244
sS'required'
p54245
I00
sS'group_name'
p54246
S'Advanced'
p54247
sa(dp54248
S'name'
p54249
S'sort_by'
p54250
sS'cpp_type'
p54251
S'MooseEnum'
p54252
sS'default'
p54253
g3
sS'description'
p54254
S'What to sort the samples by\n'
p54255
sS'required'
p54256
I01
sS'options'
p54257
S'x y z id'
p54258
sS'group_name'
p54259
Nsa(dp54260
S'description'
p54261
g3
sS'cpp_type'
p54262
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p54263
sS'default'
p54264
S'NodalValueSampler'
p54265
sS'name'
p54266
S'type'
p54267
sS'required'
p54268
I00
sS'group_name'
p54269
Nsa(dp54270
S'description'
p54271
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p54272
sS'cpp_type'
p54273
S'bool'
p54274
sS'default'
p54275
S'0'
p54276
sS'name'
p54277
S'unique_node_execute'
p54278
sS'required'
p54279
I00
sS'group_name'
p54280
Nsa(dp54281
S'description'
p54282
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54283
sS'cpp_type'
p54284
S'bool'
p54285
sS'default'
p54286
S'0'
p54287
sS'name'
p54288
S'use_displaced_mesh'
p54289
sS'required'
p54290
I00
sS'group_name'
p54291
S'Advanced'
p54292
sa(dp54293
S'description'
p54294
S'The names of the variables that this VectorPostprocessor operates on\n'
p54295
sS'cpp_type'
p54296
S'std::vector<VariableName>'
p54297
sS'default'
p54298
g3
sS'name'
p54299
S'variable'
p54300
sS'required'
p54301
I01
sS'group_name'
p54302
NsasS'name'
p54303
S'/VectorPostprocessors/NodalValueSampler'
p54304
sa(dp54305
S'description'
p54306
g3
sS'subblocks'
p54307
NsS'parameters'
p54308
(lp54309
(dp54310
S'description'
p54311
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54312
sS'cpp_type'
p54313
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p54314
sS'default'
p54315
g3
sS'name'
p54316
S'control_tags'
p54317
sS'required'
p54318
I00
sS'group_name'
p54319
S'Advanced'
p54320
sa(dp54321
S'description'
p54322
S'Set the enabled status of the MooseObject.\n'
p54323
sS'cpp_type'
p54324
S'bool'
p54325
sS'default'
p54326
S'1'
p54327
sS'name'
p54328
S'enable'
p54329
sS'required'
p54330
I00
sS'group_name'
p54331
S'Advanced'
p54332
sa(dp54333
S'name'
p54334
S'execute_on'
p54335
sS'cpp_type'
p54336
S'MultiMooseEnum'
p54337
sS'default'
p54338
S'TIMESTEP_END'
p54339
sS'description'
p54340
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p54341
sS'required'
p54342
I00
sS'options'
p54343
S'none initial linear nonlinear timestep_end timestep_begin custom'
p54344
sS'group_name'
p54345
Nsa(dp54346
S'description'
p54347
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p54348
sS'cpp_type'
p54349
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p54350
sS'default'
p54351
g3
sS'name'
p54352
S'outputs'
p54353
sS'required'
p54354
I00
sS'group_name'
p54355
S'Advanced'
p54356
sa(dp54357
S'description'
p54358
S'The points where you want to evaluate the variables\n'
p54359
sS'cpp_type'
p54360
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p54361
sS'default'
p54362
g3
sS'name'
p54363
S'points'
p54364
sS'required'
p54365
I01
sS'group_name'
p54366
Nsa(dp54367
S'name'
p54368
S'sort_by'
p54369
sS'cpp_type'
p54370
S'MooseEnum'
p54371
sS'default'
p54372
g3
sS'description'
p54373
S'What to sort the samples by\n'
p54374
sS'required'
p54375
I01
sS'options'
p54376
S'x y z id'
p54377
sS'group_name'
p54378
Nsa(dp54379
S'description'
p54380
g3
sS'cpp_type'
p54381
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p54382
sS'default'
p54383
S'PointValueSampler'
p54384
sS'name'
p54385
S'type'
p54386
sS'required'
p54387
I00
sS'group_name'
p54388
Nsa(dp54389
S'description'
p54390
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54391
sS'cpp_type'
p54392
S'bool'
p54393
sS'default'
p54394
S'0'
p54395
sS'name'
p54396
S'use_displaced_mesh'
p54397
sS'required'
p54398
I00
sS'group_name'
p54399
S'Advanced'
p54400
sa(dp54401
S'description'
p54402
S'The names of the variables that this VectorPostprocessor operates on\n'
p54403
sS'cpp_type'
p54404
S'std::vector<VariableName>'
p54405
sS'default'
p54406
g3
sS'name'
p54407
S'variable'
p54408
sS'required'
p54409
I01
sS'group_name'
p54410
NsasS'name'
p54411
S'/VectorPostprocessors/PointValueSampler'
p54412
sa(dp54413
S'description'
p54414
g3
sS'subblocks'
p54415
NsS'parameters'
p54416
(lp54417
(dp54418
S'description'
p54419
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p54420
sS'cpp_type'
p54421
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p54422
sS'default'
p54423
g3
sS'name'
p54424
S'boundary'
p54425
sS'required'
p54426
I01
sS'group_name'
p54427
Nsa(dp54428
S'description'
p54429
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54430
sS'cpp_type'
p54431
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p54432
sS'default'
p54433
g3
sS'name'
p54434
S'control_tags'
p54435
sS'required'
p54436
I00
sS'group_name'
p54437
S'Advanced'
p54438
sa(dp54439
S'description'
p54440
S'Set the enabled status of the MooseObject.\n'
p54441
sS'cpp_type'
p54442
S'bool'
p54443
sS'default'
p54444
S'1'
p54445
sS'name'
p54446
S'enable'
p54447
sS'required'
p54448
I00
sS'group_name'
p54449
S'Advanced'
p54450
sa(dp54451
S'name'
p54452
S'execute_on'
p54453
sS'cpp_type'
p54454
S'MultiMooseEnum'
p54455
sS'default'
p54456
S'TIMESTEP_END'
p54457
sS'description'
p54458
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p54459
sS'required'
p54460
I00
sS'options'
p54461
S'none initial linear nonlinear timestep_end timestep_begin custom'
p54462
sS'group_name'
p54463
Nsa(dp54464
S'description'
p54465
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p54466
sS'cpp_type'
p54467
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p54468
sS'default'
p54469
g3
sS'name'
p54470
S'outputs'
p54471
sS'required'
p54472
I00
sS'group_name'
p54473
S'Advanced'
p54474
sa(dp54475
S'name'
p54476
S'sort_by'
p54477
sS'cpp_type'
p54478
S'MooseEnum'
p54479
sS'default'
p54480
g3
sS'description'
p54481
S'What to sort the samples by\n'
p54482
sS'required'
p54483
I01
sS'options'
p54484
S'x y z id'
p54485
sS'group_name'
p54486
Nsa(dp54487
S'description'
p54488
g3
sS'cpp_type'
p54489
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p54490
sS'default'
p54491
S'SideValueSampler'
p54492
sS'name'
p54493
S'type'
p54494
sS'required'
p54495
I00
sS'group_name'
p54496
Nsa(dp54497
S'description'
p54498
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54499
sS'cpp_type'
p54500
S'bool'
p54501
sS'default'
p54502
S'0'
p54503
sS'name'
p54504
S'use_displaced_mesh'
p54505
sS'required'
p54506
I00
sS'group_name'
p54507
S'Advanced'
p54508
sa(dp54509
S'description'
p54510
S'The names of the variables that this VectorPostprocessor operates on\n'
p54511
sS'cpp_type'
p54512
S'std::vector<VariableName>'
p54513
sS'default'
p54514
g3
sS'name'
p54515
S'variable'
p54516
sS'required'
p54517
I01
sS'group_name'
p54518
NsasS'name'
p54519
S'/VectorPostprocessors/SideValueSampler'
p54520
sa(dp54521
S'description'
p54522
g3
sS'subblocks'
p54523
NsS'parameters'
p54524
(lp54525
(dp54526
S'description'
p54527
S'Number of histogram bins\n'
p54528
sS'cpp_type'
p54529
S'unsigned int'
p54530
sS'default'
p54531
S'50'
p54532
sS'name'
p54533
S'bin_number'
p54534
sS'required'
p54535
I00
sS'group_name'
p54536
Nsa(dp54537
S'description'
p54538
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54539
sS'cpp_type'
p54540
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p54541
sS'default'
p54542
g3
sS'name'
p54543
S'block'
p54544
sS'required'
p54545
I00
sS'group_name'
p54546
Nsa(dp54547
S'description'
p54548
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54549
sS'cpp_type'
p54550
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p54551
sS'default'
p54552
g3
sS'name'
p54553
S'control_tags'
p54554
sS'required'
p54555
I00
sS'group_name'
p54556
S'Advanced'
p54557
sa(dp54558
S'description'
p54559
S'Value to assign to bins into which no datapoints fall\n'
p54560
sS'cpp_type'
p54561
S'double'
p54562
sS'default'
p54563
S'0'
p54564
sS'name'
p54565
S'empty_bin_value'
p54566
sS'required'
p54567
I00
sS'group_name'
p54568
Nsa(dp54569
S'description'
p54570
S'Set the enabled status of the MooseObject.\n'
p54571
sS'cpp_type'
p54572
S'bool'
p54573
sS'default'
p54574
S'1'
p54575
sS'name'
p54576
S'enable'
p54577
sS'required'
p54578
I00
sS'group_name'
p54579
S'Advanced'
p54580
sa(dp54581
S'name'
p54582
S'execute_on'
p54583
sS'cpp_type'
p54584
S'MultiMooseEnum'
p54585
sS'default'
p54586
S'TIMESTEP_END'
p54587
sS'description'
p54588
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p54589
sS'required'
p54590
I00
sS'options'
p54591
S'none initial linear nonlinear timestep_end timestep_begin custom'
p54592
sS'group_name'
p54593
Nsa(dp54594
S'description'
p54595
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p54596
sS'cpp_type'
p54597
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p54598
sS'default'
p54599
g3
sS'name'
p54600
S'outputs'
p54601
sS'required'
p54602
I00
sS'group_name'
p54603
S'Advanced'
p54604
sa(dp54605
S'description'
p54606
S'Radius to average out to\n'
p54607
sS'cpp_type'
p54608
S'double'
p54609
sS'default'
p54610
g3
sS'name'
p54611
S'radius'
p54612
sS'required'
p54613
I01
sS'group_name'
p54614
Nsa(dp54615
S'description'
p54616
S'The seed for the master random number generator\n'
p54617
sS'cpp_type'
p54618
S'unsigned int'
p54619
sS'default'
p54620
S'0'
p54621
sS'name'
p54622
S'seed'
p54623
sS'required'
p54624
I00
sS'group_name'
p54625
S'Advanced'
p54626
sa(dp54627
S'description'
p54628
g3
sS'cpp_type'
p54629
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p54630
sS'default'
p54631
S'SphericalAverage'
p54632
sS'name'
p54633
S'type'
p54634
sS'required'
p54635
I00
sS'group_name'
p54636
Nsa(dp54637
S'description'
p54638
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54639
sS'cpp_type'
p54640
S'bool'
p54641
sS'default'
p54642
S'0'
p54643
sS'name'
p54644
S'use_displaced_mesh'
p54645
sS'required'
p54646
I00
sS'group_name'
p54647
S'Advanced'
p54648
sa(dp54649
S'description'
p54650
S'Variables to average radially\n'
p54651
sS'cpp_type'
p54652
S'std::vector<VariableName>'
p54653
sS'default'
p54654
g3
sS'name'
p54655
S'variable'
p54656
sS'required'
p54657
I00
sS'group_name'
p54658
NsasS'name'
p54659
S'/VectorPostprocessors/SphericalAverage'
p54660
sa(dp54661
S'description'
p54662
S'Outputs the values of an arbitrary user-specified set of postprocessors as a vector in the order specified by the user\n'
p54663
sS'subblocks'
p54664
NsS'parameters'
p54665
(lp54666
(dp54667
S'description'
p54668
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54669
sS'cpp_type'
p54670
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p54671
sS'default'
p54672
g3
sS'name'
p54673
S'control_tags'
p54674
sS'required'
p54675
I00
sS'group_name'
p54676
S'Advanced'
p54677
sa(dp54678
S'description'
p54679
S'Set the enabled status of the MooseObject.\n'
p54680
sS'cpp_type'
p54681
S'bool'
p54682
sS'default'
p54683
S'1'
p54684
sS'name'
p54685
S'enable'
p54686
sS'required'
p54687
I00
sS'group_name'
p54688
S'Advanced'
p54689
sa(dp54690
S'name'
p54691
S'execute_on'
p54692
sS'cpp_type'
p54693
S'MultiMooseEnum'
p54694
sS'default'
p54695
S'TIMESTEP_END'
p54696
sS'description'
p54697
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p54698
sS'required'
p54699
I00
sS'options'
p54700
S'none initial linear nonlinear timestep_end timestep_begin custom'
p54701
sS'group_name'
p54702
Nsa(dp54703
S'description'
p54704
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p54705
sS'cpp_type'
p54706
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p54707
sS'default'
p54708
g3
sS'name'
p54709
S'outputs'
p54710
sS'required'
p54711
I00
sS'group_name'
p54712
S'Advanced'
p54713
sa(dp54714
S'description'
p54715
S'The postprocessors whose values are to be reported\n'
p54716
sS'cpp_type'
p54717
S'std::__1::vector<PostprocessorName, std::__1::allocator<PostprocessorName> >'
p54718
sS'default'
p54719
g3
sS'name'
p54720
S'postprocessors'
p54721
sS'required'
p54722
I01
sS'group_name'
p54723
Nsa(dp54724
S'description'
p54725
g3
sS'cpp_type'
p54726
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p54727
sS'default'
p54728
S'VectorOfPostprocessors'
p54729
sS'name'
p54730
S'type'
p54731
sS'required'
p54732
I00
sS'group_name'
p54733
Nsa(dp54734
S'description'
p54735
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54736
sS'cpp_type'
p54737
S'bool'
p54738
sS'default'
p54739
S'0'
p54740
sS'name'
p54741
S'use_displaced_mesh'
p54742
sS'required'
p54743
I00
sS'group_name'
p54744
S'Advanced'
p54745
sasS'name'
p54746
S'/VectorPostprocessors/VectorOfPostprocessors'
p54747
sa(dp54748
S'description'
p54749
g3
sS'subblocks'
p54750
NsS'parameters'
p54751
(lp54752
(dp54753
S'description'
p54754
S'Number of histogram bins\n'
p54755
sS'cpp_type'
p54756
S'unsigned int'
p54757
sS'default'
p54758
S'50'
p54759
sS'name'
p54760
S'bin_number'
p54761
sS'required'
p54762
I00
sS'group_name'
p54763
Nsa(dp54764
S'description'
p54765
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54766
sS'cpp_type'
p54767
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p54768
sS'default'
p54769
g3
sS'name'
p54770
S'block'
p54771
sS'required'
p54772
I00
sS'group_name'
p54773
Nsa(dp54774
S'description'
p54775
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54776
sS'cpp_type'
p54777
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p54778
sS'default'
p54779
g3
sS'name'
p54780
S'control_tags'
p54781
sS'required'
p54782
I00
sS'group_name'
p54783
S'Advanced'
p54784
sa(dp54785
S'description'
p54786
S'Set the enabled status of the MooseObject.\n'
p54787
sS'cpp_type'
p54788
S'bool'
p54789
sS'default'
p54790
S'1'
p54791
sS'name'
p54792
S'enable'
p54793
sS'required'
p54794
I00
sS'group_name'
p54795
S'Advanced'
p54796
sa(dp54797
S'name'
p54798
S'execute_on'
p54799
sS'cpp_type'
p54800
S'MultiMooseEnum'
p54801
sS'default'
p54802
S'TIMESTEP_END'
p54803
sS'description'
p54804
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p54805
sS'required'
p54806
I00
sS'options'
p54807
S'none initial linear nonlinear timestep_end timestep_begin custom'
p54808
sS'group_name'
p54809
Nsa(dp54810
S'description'
p54811
S'Maximum variable value\n'
p54812
sS'cpp_type'
p54813
S'double'
p54814
sS'default'
p54815
g3
sS'name'
p54816
S'max_value'
p54817
sS'required'
p54818
I01
sS'group_name'
p54819
Nsa(dp54820
S'description'
p54821
S'Minimum variable value\n'
p54822
sS'cpp_type'
p54823
S'double'
p54824
sS'default'
p54825
g3
sS'name'
p54826
S'min_value'
p54827
sS'required'
p54828
I01
sS'group_name'
p54829
Nsa(dp54830
S'description'
p54831
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p54832
sS'cpp_type'
p54833
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p54834
sS'default'
p54835
g3
sS'name'
p54836
S'outputs'
p54837
sS'required'
p54838
I00
sS'group_name'
p54839
S'Advanced'
p54840
sa(dp54841
S'description'
p54842
S'The seed for the master random number generator\n'
p54843
sS'cpp_type'
p54844
S'unsigned int'
p54845
sS'default'
p54846
S'0'
p54847
sS'name'
p54848
S'seed'
p54849
sS'required'
p54850
I00
sS'group_name'
p54851
S'Advanced'
p54852
sa(dp54853
S'description'
p54854
g3
sS'cpp_type'
p54855
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p54856
sS'default'
p54857
S'VolumeHistogram'
p54858
sS'name'
p54859
S'type'
p54860
sS'required'
p54861
I00
sS'group_name'
p54862
Nsa(dp54863
S'description'
p54864
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54865
sS'cpp_type'
p54866
S'bool'
p54867
sS'default'
p54868
S'0'
p54869
sS'name'
p54870
S'use_displaced_mesh'
p54871
sS'required'
p54872
I00
sS'group_name'
p54873
S'Advanced'
p54874
sa(dp54875
S'description'
p54876
S'Variable to bin the volume of\n'
p54877
sS'cpp_type'
p54878
S'std::vector<VariableName>'
p54879
sS'default'
p54880
g3
sS'name'
p54881
S'variable'
p54882
sS'required'
p54883
I00
sS'group_name'
p54884
NsasS'name'
p54885
S'/VectorPostprocessors/VolumeHistogram'
p54886
sasS'parameters'
p54887
NsS'name'
p54888
S'/VectorPostprocessors'
p54889
sa.