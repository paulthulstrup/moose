(lp0
(dp1
S'description'
p2
S''
p3
sS'subblocks'
p4
(lp5
(dp6
S'description'
p7
g3
sS'subblocks'
p8
(lp9
(dp10
S'description'
p11
g3
sS'subblocks'
p12
NsS'parameters'
p13
(lp14
(dp15
S'description'
p16
S'The block id where this object lives.\n'
p17
sS'cpp_type'
p18
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p19
sS'default'
p20
g3
sS'name'
p21
S'block'
p22
sS'required'
p23
I00
sS'group_name'
p24
Nsa(dp25
S'description'
p26
S'A string representing the Moose Object that will be built by this Action\n'
p27
sS'cpp_type'
p28
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29
sS'default'
p30
g3
sS'name'
p31
S'type'
p32
sS'required'
p33
I01
sS'group_name'
p34
NsasS'name'
p35
S'/Adaptivity/Indicators/*'
p36
sa(dp37
S'description'
p38
g3
sS'subblocks'
p39
NsS'parameters'
p40
(lp41
(dp42
S'description'
p43
S'block ID or name where the object works\n'
p44
sS'cpp_type'
p45
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p46
sS'default'
p47
S'ANY_BLOCK_ID'
p48
sS'name'
p49
S'block'
p50
sS'required'
p51
I00
sS'group_name'
p52
Nsa(dp53
S'description'
p54
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p55
sS'cpp_type'
p56
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p57
sS'default'
p58
g3
sS'name'
p59
S'control_tags'
p60
sS'required'
p61
I00
sS'group_name'
p62
S'Advanced'
p63
sa(dp64
S'description'
p65
S'Set the enabled status of the MooseObject.\n'
p66
sS'cpp_type'
p67
S'bool'
p68
sS'default'
p69
S'1'
p70
sS'name'
p71
S'enable'
p72
sS'required'
p73
I00
sS'group_name'
p74
S'Advanced'
p75
sa(dp76
S'description'
p77
S'The analytic solution to compare against\n'
p78
sS'cpp_type'
p79
S'FunctionName'
p80
sS'default'
p81
g3
sS'name'
p82
S'function'
p83
sS'required'
p84
I01
sS'group_name'
p85
Nsa(dp86
S'description'
p87
S'Determines whether this object is calculated using an implicit or explicit form\n'
p88
sS'cpp_type'
p89
S'bool'
p90
sS'default'
p91
S'1'
p92
sS'name'
p93
S'implicit'
p94
sS'required'
p95
I00
sS'group_name'
p96
S'Advanced'
p97
sa(dp98
S'description'
p99
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p100
sS'cpp_type'
p101
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p102
sS'default'
p103
g3
sS'name'
p104
S'outputs'
p105
sS'required'
p106
I00
sS'group_name'
p107
S'Advanced'
p108
sa(dp109
S'description'
p110
g3
sS'cpp_type'
p111
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p112
sS'default'
p113
S'AnalyticalIndicator'
p114
sS'name'
p115
S'type'
p116
sS'required'
p117
I00
sS'group_name'
p118
Nsa(dp119
S'description'
p120
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p121
sS'cpp_type'
p122
S'bool'
p123
sS'default'
p124
S'0'
p125
sS'name'
p126
S'use_displaced_mesh'
p127
sS'required'
p128
I00
sS'group_name'
p129
S'Advanced'
p130
sa(dp131
S'description'
p132
S'The name of the variable that this Indicator operates on\n'
p133
sS'cpp_type'
p134
S'VariableName'
p135
sS'default'
p136
g3
sS'name'
p137
S'variable'
p138
sS'required'
p139
I01
sS'group_name'
p140
NsasS'name'
p141
S'/Adaptivity/Indicators/AnalyticalIndicator'
p142
sa(dp143
S'description'
p144
g3
sS'subblocks'
p145
NsS'parameters'
p146
(lp147
(dp148
S'description'
p149
S'The list of block ids (SubdomainID) that this object will be applied\n'
p150
sS'cpp_type'
p151
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p152
sS'default'
p153
g3
sS'name'
p154
S'block'
p155
sS'required'
p156
I00
sS'group_name'
p157
Nsa(dp158
S'description'
p159
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p160
sS'cpp_type'
p161
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p162
sS'default'
p163
g3
sS'name'
p164
S'control_tags'
p165
sS'required'
p166
I00
sS'group_name'
p167
S'Advanced'
p168
sa(dp169
S'description'
p170
S'Set the enabled status of the MooseObject.\n'
p171
sS'cpp_type'
p172
S'bool'
p173
sS'default'
p174
S'1'
p175
sS'name'
p176
S'enable'
p177
sS'required'
p178
I00
sS'group_name'
p179
S'Advanced'
p180
sa(dp181
S'description'
p182
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p183
sS'cpp_type'
p184
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p185
sS'default'
p186
g3
sS'name'
p187
S'outputs'
p188
sS'required'
p189
I00
sS'group_name'
p190
S'Advanced'
p191
sa(dp192
S'description'
p193
S'Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n'
p194
sS'cpp_type'
p195
S'bool'
p196
sS'default'
p197
S'0'
p198
sS'name'
p199
S'scale_by_flux_faces'
p200
sS'required'
p201
I00
sS'group_name'
p202
Nsa(dp203
S'description'
p204
g3
sS'cpp_type'
p205
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p206
sS'default'
p207
S'GradientJumpIndicator'
p208
sS'name'
p209
S'type'
p210
sS'required'
p211
I00
sS'group_name'
p212
Nsa(dp213
S'description'
p214
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p215
sS'cpp_type'
p216
S'bool'
p217
sS'default'
p218
S'0'
p219
sS'name'
p220
S'use_displaced_mesh'
p221
sS'required'
p222
I00
sS'group_name'
p223
S'Advanced'
p224
sa(dp225
S'description'
p226
S'The name of the variable that this side indicator applies to\n'
p227
sS'cpp_type'
p228
S'VariableName'
p229
sS'default'
p230
g3
sS'name'
p231
S'variable'
p232
sS'required'
p233
I01
sS'group_name'
p234
NsasS'name'
p235
S'/Adaptivity/Indicators/GradientJumpIndicator'
p236
sa(dp237
S'description'
p238
g3
sS'subblocks'
p239
NsS'parameters'
p240
(lp241
(dp242
S'description'
p243
S'The list of block ids (SubdomainID) that this object will be applied\n'
p244
sS'cpp_type'
p245
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p246
sS'default'
p247
g3
sS'name'
p248
S'block'
p249
sS'required'
p250
I00
sS'group_name'
p251
Nsa(dp252
S'description'
p253
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p254
sS'cpp_type'
p255
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p256
sS'default'
p257
g3
sS'name'
p258
S'control_tags'
p259
sS'required'
p260
I00
sS'group_name'
p261
S'Advanced'
p262
sa(dp263
S'description'
p264
S'Set the enabled status of the MooseObject.\n'
p265
sS'cpp_type'
p266
S'bool'
p267
sS'default'
p268
S'1'
p269
sS'name'
p270
S'enable'
p271
sS'required'
p272
I00
sS'group_name'
p273
S'Advanced'
p274
sa(dp275
S'description'
p276
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p277
sS'cpp_type'
p278
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p279
sS'default'
p280
g3
sS'name'
p281
S'outputs'
p282
sS'required'
p283
I00
sS'group_name'
p284
S'Advanced'
p285
sa(dp286
S'description'
p287
S'Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n'
p288
sS'cpp_type'
p289
S'bool'
p290
sS'default'
p291
S'0'
p292
sS'name'
p293
S'scale_by_flux_faces'
p294
sS'required'
p295
I00
sS'group_name'
p296
Nsa(dp297
S'description'
p298
g3
sS'cpp_type'
p299
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p300
sS'default'
p301
S'LaplacianJumpIndicator'
p302
sS'name'
p303
S'type'
p304
sS'required'
p305
I00
sS'group_name'
p306
Nsa(dp307
S'description'
p308
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p309
sS'cpp_type'
p310
S'bool'
p311
sS'default'
p312
S'0'
p313
sS'name'
p314
S'use_displaced_mesh'
p315
sS'required'
p316
I00
sS'group_name'
p317
S'Advanced'
p318
sa(dp319
S'description'
p320
S'The name of the variable that this side indicator applies to\n'
p321
sS'cpp_type'
p322
S'VariableName'
p323
sS'default'
p324
g3
sS'name'
p325
S'variable'
p326
sS'required'
p327
I01
sS'group_name'
p328
NsasS'name'
p329
S'/Adaptivity/Indicators/LaplacianJumpIndicator'
p330
sasS'parameters'
p331
NsS'name'
p332
S'/Adaptivity/Indicators'
p333
sa(dp334
S'description'
p335
g3
sS'subblocks'
p336
(lp337
(dp338
S'description'
p339
g3
sS'subblocks'
p340
NsS'parameters'
p341
(lp342
(dp343
S'description'
p344
S'The block id where this object lives.\n'
p345
sS'cpp_type'
p346
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p347
sS'default'
p348
g3
sS'name'
p349
S'block'
p350
sS'required'
p351
I00
sS'group_name'
p352
Nsa(dp353
S'description'
p354
S'A string representing the Moose Object that will be built by this Action\n'
p355
sS'cpp_type'
p356
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p357
sS'default'
p358
g3
sS'name'
p359
S'type'
p360
sS'required'
p361
I01
sS'group_name'
p362
NsasS'name'
p363
S'/Adaptivity/Markers/*'
p364
sa(dp365
S'description'
p366
S"Marks the region inside and outside of a 'box' domain for refinement or coarsening.\n"
p367
sS'subblocks'
p368
NsS'parameters'
p369
(lp370
(dp371
S'description'
p372
S'The list of block ids (SubdomainID) that this object will be applied\n'
p373
sS'cpp_type'
p374
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p375
sS'default'
p376
g3
sS'name'
p377
S'block'
p378
sS'required'
p379
I00
sS'group_name'
p380
Nsa(dp381
S'description'
p382
S'The bottom left point (in x,y,z with spaces in-between).\n'
p383
sS'cpp_type'
p384
S'libMesh::VectorValue<double>'
p385
sS'default'
p386
g3
sS'name'
p387
S'bottom_left'
p388
sS'required'
p389
I01
sS'group_name'
p390
Nsa(dp391
S'description'
p392
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p393
sS'cpp_type'
p394
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p395
sS'default'
p396
g3
sS'name'
p397
S'control_tags'
p398
sS'required'
p399
I00
sS'group_name'
p400
S'Advanced'
p401
sa(dp402
S'description'
p403
S'Set the enabled status of the MooseObject.\n'
p404
sS'cpp_type'
p405
S'bool'
p406
sS'default'
p407
S'1'
p408
sS'name'
p409
S'enable'
p410
sS'required'
p411
I00
sS'group_name'
p412
S'Advanced'
p413
sa(dp414
S'name'
p415
S'inside'
p416
sS'cpp_type'
p417
S'MooseEnum'
p418
sS'default'
p419
g3
sS'description'
p420
S'How to mark elements inside the box.\n'
p421
sS'required'
p422
I01
sS'options'
p423
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p424
sS'group_name'
p425
Nsa(dp426
S'description'
p427
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p428
sS'cpp_type'
p429
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p430
sS'default'
p431
g3
sS'name'
p432
S'outputs'
p433
sS'required'
p434
I00
sS'group_name'
p435
S'Advanced'
p436
sa(dp437
S'name'
p438
S'outside'
p439
sS'cpp_type'
p440
S'MooseEnum'
p441
sS'default'
p442
g3
sS'description'
p443
S'How to mark elements outside the box.\n'
p444
sS'required'
p445
I01
sS'options'
p446
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p447
sS'group_name'
p448
Nsa(dp449
S'description'
p450
S'The bottom left point (in x,y,z with spaces in-between).\n'
p451
sS'cpp_type'
p452
S'libMesh::VectorValue<double>'
p453
sS'default'
p454
g3
sS'name'
p455
S'top_right'
p456
sS'required'
p457
I01
sS'group_name'
p458
Nsa(dp459
S'description'
p460
g3
sS'cpp_type'
p461
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p462
sS'default'
p463
S'BoxMarker'
p464
sS'name'
p465
S'type'
p466
sS'required'
p467
I00
sS'group_name'
p468
Nsa(dp469
S'description'
p470
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p471
sS'cpp_type'
p472
S'bool'
p473
sS'default'
p474
S'0'
p475
sS'name'
p476
S'use_displaced_mesh'
p477
sS'required'
p478
I00
sS'group_name'
p479
S'Advanced'
p480
sasS'name'
p481
S'/Adaptivity/Markers/BoxMarker'
p482
sa(dp483
S'description'
p484
S'A marker that converts many markers into a single marker by considering the maximum value of the listed markers (i.e., refinement takes precedent).\n'
p485
sS'subblocks'
p486
NsS'parameters'
p487
(lp488
(dp489
S'description'
p490
S'The list of block ids (SubdomainID) that this object will be applied\n'
p491
sS'cpp_type'
p492
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p493
sS'default'
p494
g3
sS'name'
p495
S'block'
p496
sS'required'
p497
I00
sS'group_name'
p498
Nsa(dp499
S'description'
p500
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p501
sS'cpp_type'
p502
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p503
sS'default'
p504
g3
sS'name'
p505
S'control_tags'
p506
sS'required'
p507
I00
sS'group_name'
p508
S'Advanced'
p509
sa(dp510
S'description'
p511
S'Set the enabled status of the MooseObject.\n'
p512
sS'cpp_type'
p513
S'bool'
p514
sS'default'
p515
S'1'
p516
sS'name'
p517
S'enable'
p518
sS'required'
p519
I00
sS'group_name'
p520
S'Advanced'
p521
sa(dp522
S'description'
p523
S'A list of marker names to combine into a single marker.\n'
p524
sS'cpp_type'
p525
S'std::__1::vector<MarkerName, std::__1::allocator<MarkerName> >'
p526
sS'default'
p527
g3
sS'name'
p528
S'markers'
p529
sS'required'
p530
I01
sS'group_name'
p531
Nsa(dp532
S'description'
p533
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p534
sS'cpp_type'
p535
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p536
sS'default'
p537
g3
sS'name'
p538
S'outputs'
p539
sS'required'
p540
I00
sS'group_name'
p541
S'Advanced'
p542
sa(dp543
S'description'
p544
g3
sS'cpp_type'
p545
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p546
sS'default'
p547
S'ComboMarker'
p548
sS'name'
p549
S'type'
p550
sS'required'
p551
I00
sS'group_name'
p552
Nsa(dp553
S'description'
p554
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p555
sS'cpp_type'
p556
S'bool'
p557
sS'default'
p558
S'0'
p559
sS'name'
p560
S'use_displaced_mesh'
p561
sS'required'
p562
I00
sS'group_name'
p563
S'Advanced'
p564
sasS'name'
p565
S'/Adaptivity/Markers/ComboMarker'
p566
sa(dp567
S'description'
p568
S'Marks elements for refinement or coarsening based on the fraction of the total error from the supplied indicator.\n'
p569
sS'subblocks'
p570
NsS'parameters'
p571
(lp572
(dp573
S'description'
p574
S'The list of block ids (SubdomainID) that this object will be applied\n'
p575
sS'cpp_type'
p576
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p577
sS'default'
p578
g3
sS'name'
p579
S'block'
p580
sS'required'
p581
I00
sS'group_name'
p582
Nsa(dp583
S'description'
p584
S'Elements within this percentage of the min error will be coarsened.  Must be between 0 and 1!\n'
p585
sS'cpp_type'
p586
S'double'
p587
sS'default'
p588
S'0'
p589
sS'name'
p590
S'coarsen'
p591
sS'required'
p592
I00
sS'group_name'
p593
Nsa(dp594
S'description'
p595
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p596
sS'cpp_type'
p597
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p598
sS'default'
p599
g3
sS'name'
p600
S'control_tags'
p601
sS'required'
p602
I00
sS'group_name'
p603
S'Advanced'
p604
sa(dp605
S'description'
p606
S'Set the enabled status of the MooseObject.\n'
p607
sS'cpp_type'
p608
S'bool'
p609
sS'default'
p610
S'1'
p611
sS'name'
p612
S'enable'
p613
sS'required'
p614
I00
sS'group_name'
p615
S'Advanced'
p616
sa(dp617
S'description'
p618
S'The name of the Indicator that this Marker uses.\n'
p619
sS'cpp_type'
p620
S'IndicatorName'
p621
sS'default'
p622
g3
sS'name'
p623
S'indicator'
p624
sS'required'
p625
I01
sS'group_name'
p626
Nsa(dp627
S'description'
p628
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p629
sS'cpp_type'
p630
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p631
sS'default'
p632
g3
sS'name'
p633
S'outputs'
p634
sS'required'
p635
I00
sS'group_name'
p636
S'Advanced'
p637
sa(dp638
S'description'
p639
S'Elements within this percentage of the max error will be refined.  Must be between 0 and 1!\n'
p640
sS'cpp_type'
p641
S'double'
p642
sS'default'
p643
S'0'
p644
sS'name'
p645
S'refine'
p646
sS'required'
p647
I00
sS'group_name'
p648
Nsa(dp649
S'description'
p650
g3
sS'cpp_type'
p651
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p652
sS'default'
p653
S'ErrorFractionMarker'
p654
sS'name'
p655
S'type'
p656
sS'required'
p657
I00
sS'group_name'
p658
Nsa(dp659
S'description'
p660
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p661
sS'cpp_type'
p662
S'bool'
p663
sS'default'
p664
S'0'
p665
sS'name'
p666
S'use_displaced_mesh'
p667
sS'required'
p668
I00
sS'group_name'
p669
S'Advanced'
p670
sasS'name'
p671
S'/Adaptivity/Markers/ErrorFractionMarker'
p672
sa(dp673
S'description'
p674
S'Coarsen or refine elements based on an absolute tolerance allowed from the supplied indicator.\n'
p675
sS'subblocks'
p676
NsS'parameters'
p677
(lp678
(dp679
S'description'
p680
S'The list of block ids (SubdomainID) that this object will be applied\n'
p681
sS'cpp_type'
p682
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p683
sS'default'
p684
g3
sS'name'
p685
S'block'
p686
sS'required'
p687
I00
sS'group_name'
p688
Nsa(dp689
S'description'
p690
S'Elements with error less than this will be coarsened.\n'
p691
sS'cpp_type'
p692
S'double'
p693
sS'default'
p694
S'0'
p695
sS'name'
p696
S'coarsen'
p697
sS'required'
p698
I00
sS'group_name'
p699
Nsa(dp700
S'description'
p701
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p702
sS'cpp_type'
p703
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p704
sS'default'
p705
g3
sS'name'
p706
S'control_tags'
p707
sS'required'
p708
I00
sS'group_name'
p709
S'Advanced'
p710
sa(dp711
S'description'
p712
S'Set the enabled status of the MooseObject.\n'
p713
sS'cpp_type'
p714
S'bool'
p715
sS'default'
p716
S'1'
p717
sS'name'
p718
S'enable'
p719
sS'required'
p720
I00
sS'group_name'
p721
S'Advanced'
p722
sa(dp723
S'description'
p724
S'The name of the Indicator that this Marker uses.\n'
p725
sS'cpp_type'
p726
S'IndicatorName'
p727
sS'default'
p728
g3
sS'name'
p729
S'indicator'
p730
sS'required'
p731
I01
sS'group_name'
p732
Nsa(dp733
S'description'
p734
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p735
sS'cpp_type'
p736
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p737
sS'default'
p738
g3
sS'name'
p739
S'outputs'
p740
sS'required'
p741
I00
sS'group_name'
p742
S'Advanced'
p743
sa(dp744
S'description'
p745
S'Elements with error more than this will be refined.\n'
p746
sS'cpp_type'
p747
S'double'
p748
sS'default'
p749
S'1.79769e+308'
p750
sS'name'
p751
S'refine'
p752
sS'required'
p753
I00
sS'group_name'
p754
Nsa(dp755
S'description'
p756
g3
sS'cpp_type'
p757
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p758
sS'default'
p759
S'ErrorToleranceMarker'
p760
sS'name'
p761
S'type'
p762
sS'required'
p763
I00
sS'group_name'
p764
Nsa(dp765
S'description'
p766
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p767
sS'cpp_type'
p768
S'bool'
p769
sS'default'
p770
S'0'
p771
sS'name'
p772
S'use_displaced_mesh'
p773
sS'required'
p774
I00
sS'group_name'
p775
S'Advanced'
p776
sasS'name'
p777
S'/Adaptivity/Markers/ErrorToleranceMarker'
p778
sa(dp779
S'description'
p780
S'Marks inside and outside a box that can have arbitrary orientation and center point.\n'
p781
sS'subblocks'
p782
NsS'parameters'
p783
(lp784
(dp785
S'description'
p786
S'The list of block ids (SubdomainID) that this object will be applied\n'
p787
sS'cpp_type'
p788
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p789
sS'default'
p790
g3
sS'name'
p791
S'block'
p792
sS'required'
p793
I00
sS'group_name'
p794
Nsa(dp795
S'description'
p796
S"The center (many people spell this 'center') of the box.\n"
p797
sS'cpp_type'
p798
S'libMesh::Point'
p799
sS'default'
p800
g3
sS'name'
p801
S'center'
p802
sS'required'
p803
I01
sS'group_name'
p804
Nsa(dp805
S'description'
p806
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p807
sS'cpp_type'
p808
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p809
sS'default'
p810
g3
sS'name'
p811
S'control_tags'
p812
sS'required'
p813
I00
sS'group_name'
p814
S'Advanced'
p815
sa(dp816
S'description'
p817
S'Set the enabled status of the MooseObject.\n'
p818
sS'cpp_type'
p819
S'bool'
p820
sS'default'
p821
S'1'
p822
sS'name'
p823
S'enable'
p824
sS'required'
p825
I00
sS'group_name'
p826
S'Advanced'
p827
sa(dp828
S'description'
p829
S'The height of the box\n'
p830
sS'cpp_type'
p831
S'double'
p832
sS'default'
p833
g3
sS'name'
p834
S'height'
p835
sS'required'
p836
I01
sS'group_name'
p837
Nsa(dp838
S'name'
p839
S'inside'
p840
sS'cpp_type'
p841
S'MooseEnum'
p842
sS'default'
p843
g3
sS'description'
p844
S'How to mark elements inside the box.\n'
p845
sS'required'
p846
I01
sS'options'
p847
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p848
sS'group_name'
p849
Nsa(dp850
S'description'
p851
S'The length of the box\n'
p852
sS'cpp_type'
p853
S'double'
p854
sS'default'
p855
g3
sS'name'
p856
S'length'
p857
sS'required'
p858
I01
sS'group_name'
p859
Nsa(dp860
S'description'
p861
S'The direction along which the length is oriented (must be perpendicular to width_direction).\n'
p862
sS'cpp_type'
p863
S'libMesh::VectorValue<double>'
p864
sS'default'
p865
g3
sS'name'
p866
S'length_direction'
p867
sS'required'
p868
I01
sS'group_name'
p869
Nsa(dp870
S'description'
p871
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p872
sS'cpp_type'
p873
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p874
sS'default'
p875
g3
sS'name'
p876
S'outputs'
p877
sS'required'
p878
I00
sS'group_name'
p879
S'Advanced'
p880
sa(dp881
S'name'
p882
S'outside'
p883
sS'cpp_type'
p884
S'MooseEnum'
p885
sS'default'
p886
g3
sS'description'
p887
S'How to mark elements outside the box.\n'
p888
sS'required'
p889
I01
sS'options'
p890
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p891
sS'group_name'
p892
Nsa(dp893
S'description'
p894
g3
sS'cpp_type'
p895
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p896
sS'default'
p897
S'OrientedBoxMarker'
p898
sS'name'
p899
S'type'
p900
sS'required'
p901
I00
sS'group_name'
p902
Nsa(dp903
S'description'
p904
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p905
sS'cpp_type'
p906
S'bool'
p907
sS'default'
p908
S'0'
p909
sS'name'
p910
S'use_displaced_mesh'
p911
sS'required'
p912
I00
sS'group_name'
p913
S'Advanced'
p914
sa(dp915
S'description'
p916
S'The width of the box\n'
p917
sS'cpp_type'
p918
S'double'
p919
sS'default'
p920
g3
sS'name'
p921
S'width'
p922
sS'required'
p923
I01
sS'group_name'
p924
Nsa(dp925
S'description'
p926
S'The direction along which the width is oriented.\n'
p927
sS'cpp_type'
p928
S'libMesh::VectorValue<double>'
p929
sS'default'
p930
g3
sS'name'
p931
S'width_direction'
p932
sS'required'
p933
I01
sS'group_name'
p934
NsasS'name'
p935
S'/Adaptivity/Markers/OrientedBoxMarker'
p936
sa(dp937
S'description'
p938
S'Uniformly mark all elements for refinement or coarsening.\n'
p939
sS'subblocks'
p940
NsS'parameters'
p941
(lp942
(dp943
S'description'
p944
S'The list of block ids (SubdomainID) that this object will be applied\n'
p945
sS'cpp_type'
p946
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p947
sS'default'
p948
g3
sS'name'
p949
S'block'
p950
sS'required'
p951
I00
sS'group_name'
p952
Nsa(dp953
S'description'
p954
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p955
sS'cpp_type'
p956
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p957
sS'default'
p958
g3
sS'name'
p959
S'control_tags'
p960
sS'required'
p961
I00
sS'group_name'
p962
S'Advanced'
p963
sa(dp964
S'description'
p965
S'Set the enabled status of the MooseObject.\n'
p966
sS'cpp_type'
p967
S'bool'
p968
sS'default'
p969
S'1'
p970
sS'name'
p971
S'enable'
p972
sS'required'
p973
I00
sS'group_name'
p974
S'Advanced'
p975
sa(dp976
S'name'
p977
S'mark'
p978
sS'cpp_type'
p979
S'MooseEnum'
p980
sS'default'
p981
g3
sS'description'
p982
S'How to mark elements.\n'
p983
sS'required'
p984
I01
sS'options'
p985
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p986
sS'group_name'
p987
Nsa(dp988
S'description'
p989
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p990
sS'cpp_type'
p991
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p992
sS'default'
p993
g3
sS'name'
p994
S'outputs'
p995
sS'required'
p996
I00
sS'group_name'
p997
S'Advanced'
p998
sa(dp999
S'description'
p1000
g3
sS'cpp_type'
p1001
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1002
sS'default'
p1003
S'UniformMarker'
p1004
sS'name'
p1005
S'type'
p1006
sS'required'
p1007
I00
sS'group_name'
p1008
Nsa(dp1009
S'description'
p1010
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1011
sS'cpp_type'
p1012
S'bool'
p1013
sS'default'
p1014
S'0'
p1015
sS'name'
p1016
S'use_displaced_mesh'
p1017
sS'required'
p1018
I00
sS'group_name'
p1019
S'Advanced'
p1020
sasS'name'
p1021
S'/Adaptivity/Markers/UniformMarker'
p1022
sa(dp1023
S'description'
p1024
S'Mark elements for adaptivity based on the supplied upper and lower bounds and the specified variable.\n'
p1025
sS'subblocks'
p1026
NsS'parameters'
p1027
(lp1028
(dp1029
S'description'
p1030
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1031
sS'cpp_type'
p1032
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1033
sS'default'
p1034
g3
sS'name'
p1035
S'block'
p1036
sS'required'
p1037
I00
sS'group_name'
p1038
Nsa(dp1039
S'description'
p1040
S'A buffer zone value added to both ends of the range where a third_state marker can be returned.\n'
p1041
sS'cpp_type'
p1042
S'double'
p1043
sS'default'
p1044
S'0'
p1045
sS'name'
p1046
S'buffer_size'
p1047
sS'required'
p1048
I00
sS'group_name'
p1049
Nsa(dp1050
S'description'
p1051
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1052
sS'cpp_type'
p1053
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p1054
sS'default'
p1055
g3
sS'name'
p1056
S'control_tags'
p1057
sS'required'
p1058
I00
sS'group_name'
p1059
S'Advanced'
p1060
sa(dp1061
S'description'
p1062
S'Set the enabled status of the MooseObject.\n'
p1063
sS'cpp_type'
p1064
S'bool'
p1065
sS'default'
p1066
S'1'
p1067
sS'name'
p1068
S'enable'
p1069
sS'required'
p1070
I00
sS'group_name'
p1071
S'Advanced'
p1072
sa(dp1073
S'description'
p1074
S'If this is true then values inside the range will be coarsened, and values outside the range will be refined.\n'
p1075
sS'cpp_type'
p1076
S'bool'
p1077
sS'default'
p1078
S'0'
p1079
sS'name'
p1080
S'invert'
p1081
sS'required'
p1082
I00
sS'group_name'
p1083
Nsa(dp1084
S'description'
p1085
S'The lower bound value for the range.\n'
p1086
sS'cpp_type'
p1087
S'double'
p1088
sS'default'
p1089
g3
sS'name'
p1090
S'lower_bound'
p1091
sS'required'
p1092
I01
sS'group_name'
p1093
Nsa(dp1094
S'description'
p1095
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p1096
sS'cpp_type'
p1097
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p1098
sS'default'
p1099
g3
sS'name'
p1100
S'outputs'
p1101
sS'required'
p1102
I00
sS'group_name'
p1103
S'Advanced'
p1104
sa(dp1105
S'name'
p1106
S'third_state'
p1107
sS'cpp_type'
p1108
S'MooseEnum'
p1109
sS'default'
p1110
S'DONT_MARK'
p1111
sS'description'
p1112
S'The Marker state to apply to values in the buffer zone (both ends of the range).\n'
p1113
sS'required'
p1114
I00
sS'options'
p1115
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p1116
sS'group_name'
p1117
Nsa(dp1118
S'description'
p1119
g3
sS'cpp_type'
p1120
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1121
sS'default'
p1122
S'ValueRangeMarker'
p1123
sS'name'
p1124
S'type'
p1125
sS'required'
p1126
I00
sS'group_name'
p1127
Nsa(dp1128
S'description'
p1129
S'The upper bound value for the range.\n'
p1130
sS'cpp_type'
p1131
S'double'
p1132
sS'default'
p1133
g3
sS'name'
p1134
S'upper_bound'
p1135
sS'required'
p1136
I01
sS'group_name'
p1137
Nsa(dp1138
S'description'
p1139
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1140
sS'cpp_type'
p1141
S'bool'
p1142
sS'default'
p1143
S'0'
p1144
sS'name'
p1145
S'use_displaced_mesh'
p1146
sS'required'
p1147
I00
sS'group_name'
p1148
S'Advanced'
p1149
sa(dp1150
S'description'
p1151
S'The variable whose values are used in this marker.\n'
p1152
sS'cpp_type'
p1153
S'std::vector<VariableName>'
p1154
sS'default'
p1155
g3
sS'name'
p1156
S'variable'
p1157
sS'required'
p1158
I01
sS'group_name'
p1159
NsasS'name'
p1160
S'/Adaptivity/Markers/ValueRangeMarker'
p1161
sa(dp1162
S'description'
p1163
S'The the refinement state based on a threshold value compared to the specified variable.\n'
p1164
sS'subblocks'
p1165
NsS'parameters'
p1166
(lp1167
(dp1168
S'description'
p1169
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1170
sS'cpp_type'
p1171
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1172
sS'default'
p1173
g3
sS'name'
p1174
S'block'
p1175
sS'required'
p1176
I00
sS'group_name'
p1177
Nsa(dp1178
S'description'
p1179
S'The threshold value for coarsening.  Elements with variable values beyond this will be marked for coarsening.\n'
p1180
sS'cpp_type'
p1181
S'double'
p1182
sS'default'
p1183
g3
sS'name'
p1184
S'coarsen'
p1185
sS'required'
p1186
I00
sS'group_name'
p1187
Nsa(dp1188
S'description'
p1189
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1190
sS'cpp_type'
p1191
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p1192
sS'default'
p1193
g3
sS'name'
p1194
S'control_tags'
p1195
sS'required'
p1196
I00
sS'group_name'
p1197
S'Advanced'
p1198
sa(dp1199
S'description'
p1200
S'Set the enabled status of the MooseObject.\n'
p1201
sS'cpp_type'
p1202
S'bool'
p1203
sS'default'
p1204
S'1'
p1205
sS'name'
p1206
S'enable'
p1207
sS'required'
p1208
I00
sS'group_name'
p1209
S'Advanced'
p1210
sa(dp1211
S'description'
p1212
S"If this is true then values _below_ 'refine' will be refined and _above_ 'coarsen' will be coarsened.\n"
p1213
sS'cpp_type'
p1214
S'bool'
p1215
sS'default'
p1216
S'0'
p1217
sS'name'
p1218
S'invert'
p1219
sS'required'
p1220
I00
sS'group_name'
p1221
Nsa(dp1222
S'description'
p1223
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p1224
sS'cpp_type'
p1225
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p1226
sS'default'
p1227
g3
sS'name'
p1228
S'outputs'
p1229
sS'required'
p1230
I00
sS'group_name'
p1231
S'Advanced'
p1232
sa(dp1233
S'description'
p1234
S'The threshold value for refinement.  Elements with variable values beyond this will be marked for refinement.\n'
p1235
sS'cpp_type'
p1236
S'double'
p1237
sS'default'
p1238
g3
sS'name'
p1239
S'refine'
p1240
sS'required'
p1241
I00
sS'group_name'
p1242
Nsa(dp1243
S'name'
p1244
S'third_state'
p1245
sS'cpp_type'
p1246
S'MooseEnum'
p1247
sS'default'
p1248
S'DONT_MARK'
p1249
sS'description'
p1250
S'The Marker state to apply to values falling in-between the coarsen and refine thresholds.\n'
p1251
sS'required'
p1252
I00
sS'options'
p1253
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p1254
sS'group_name'
p1255
Nsa(dp1256
S'description'
p1257
g3
sS'cpp_type'
p1258
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1259
sS'default'
p1260
S'ValueThresholdMarker'
p1261
sS'name'
p1262
S'type'
p1263
sS'required'
p1264
I00
sS'group_name'
p1265
Nsa(dp1266
S'description'
p1267
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1268
sS'cpp_type'
p1269
S'bool'
p1270
sS'default'
p1271
S'0'
p1272
sS'name'
p1273
S'use_displaced_mesh'
p1274
sS'required'
p1275
I00
sS'group_name'
p1276
S'Advanced'
p1277
sa(dp1278
S'description'
p1279
S"The values of this variable will be compared to 'refine' and 'coarsen' to see what should be done with the element\n"
p1280
sS'cpp_type'
p1281
S'std::vector<VariableName>'
p1282
sS'default'
p1283
g3
sS'name'
p1284
S'variable'
p1285
sS'required'
p1286
I01
sS'group_name'
p1287
NsasS'name'
p1288
S'/Adaptivity/Markers/ValueThresholdMarker'
p1289
sasS'parameters'
p1290
NsS'name'
p1291
S'/Adaptivity/Markers'
p1292
sasS'parameters'
p1293
(lp1294
(dp1295
S'description'
p1296
S'The number of adaptive steps to use when on each timestep during a Transient simulation.\n'
p1297
sS'cpp_type'
p1298
S'unsigned int'
p1299
sS'default'
p1300
S'1'
p1301
sS'name'
p1302
S'cycles_per_step'
p1303
sS'required'
p1304
I00
sS'group_name'
p1305
Nsa(dp1306
S'description'
p1307
S'The name of the Marker to use to adapt the mesh during initial refinement.\n'
p1308
sS'cpp_type'
p1309
S'MarkerName'
p1310
sS'default'
p1311
g3
sS'name'
p1312
S'initial_marker'
p1313
sS'required'
p1314
I00
sS'group_name'
p1315
Nsa(dp1316
S'description'
p1317
S'The number of adaptive steps to do based on the initial condition.\n'
p1318
sS'cpp_type'
p1319
S'unsigned int'
p1320
sS'default'
p1321
S'0'
p1322
sS'name'
p1323
S'initial_steps'
p1324
sS'required'
p1325
I00
sS'group_name'
p1326
Nsa(dp1327
S'description'
p1328
S'The name of the Marker to use to actually adapt the mesh.\n'
p1329
sS'cpp_type'
p1330
S'MarkerName'
p1331
sS'default'
p1332
g3
sS'name'
p1333
S'marker'
p1334
sS'required'
p1335
I00
sS'group_name'
p1336
Nsa(dp1337
S'description'
p1338
S'Maximum number of times a single element can be refined. If 0 then infinite.\n'
p1339
sS'cpp_type'
p1340
S'unsigned int'
p1341
sS'default'
p1342
S'0'
p1343
sS'name'
p1344
S'max_h_level'
p1345
sS'required'
p1346
I00
sS'group_name'
p1347
Nsa(dp1348
S'description'
p1349
S'Recompute markers during adaptivity cycles\n'
p1350
sS'cpp_type'
p1351
S'bool'
p1352
sS'default'
p1353
S'0'
p1354
sS'name'
p1355
S'recompute_markers_during_cycles'
p1356
sS'required'
p1357
I00
sS'group_name'
p1358
Nsa(dp1359
S'description'
p1360
S'The time that adaptivity will be active after.\n'
p1361
sS'cpp_type'
p1362
S'double'
p1363
sS'default'
p1364
S'-1.79769e+308'
p1365
sS'name'
p1366
S'start_time'
p1367
sS'required'
p1368
I00
sS'group_name'
p1369
Nsa(dp1370
S'description'
p1371
S'The number of adaptive steps to use when doing a Steady simulation.\n'
p1372
sS'cpp_type'
p1373
S'unsigned int'
p1374
sS'default'
p1375
S'0'
p1376
sS'name'
p1377
S'steps'
p1378
sS'required'
p1379
I00
sS'group_name'
p1380
Nsa(dp1381
S'description'
p1382
S'The time after which adaptivity will no longer be active.\n'
p1383
sS'cpp_type'
p1384
S'double'
p1385
sS'default'
p1386
S'1.79769e+308'
p1387
sS'name'
p1388
S'stop_time'
p1389
sS'required'
p1390
I00
sS'group_name'
p1391
NsasS'name'
p1392
S'/Adaptivity'
p1393
sa(dp1394
S'description'
p1395
g3
sS'subblocks'
p1396
(lp1397
(dp1398
S'description'
p1399
g3
sS'subblocks'
p1400
NsS'parameters'
p1401
(lp1402
(dp1403
S'description'
p1404
S'A string representing the Moose Object that will be built by this Action\n'
p1405
sS'cpp_type'
p1406
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1407
sS'default'
p1408
g3
sS'name'
p1409
S'type'
p1410
sS'required'
p1411
I01
sS'group_name'
p1412
NsasS'name'
p1413
S'/AuxKernels/*'
p1414
sa(dp1415
S'description'
p1416
g3
sS'subblocks'
p1417
NsS'parameters'
p1418
(lp1419
(dp1420
S'description'
p1421
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1422
sS'cpp_type'
p1423
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1424
sS'default'
p1425
g3
sS'name'
p1426
S'block'
p1427
sS'required'
p1428
I00
sS'group_name'
p1429
Nsa(dp1430
S'description'
p1431
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1432
sS'cpp_type'
p1433
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p1434
sS'default'
p1435
g3
sS'name'
p1436
S'boundary'
p1437
sS'required'
p1438
I00
sS'group_name'
p1439
Nsa(dp1440
S'description'
p1441
S'The variable to be bounded\n'
p1442
sS'cpp_type'
p1443
S'std::vector<VariableName>'
p1444
sS'default'
p1445
g3
sS'name'
p1446
S'bounded_variable'
p1447
sS'required'
p1448
I01
sS'group_name'
p1449
Nsa(dp1450
S'description'
p1451
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1452
sS'cpp_type'
p1453
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p1454
sS'default'
p1455
g3
sS'name'
p1456
S'control_tags'
p1457
sS'required'
p1458
I00
sS'group_name'
p1459
S'Advanced'
p1460
sa(dp1461
S'description'
p1462
S'Set the enabled status of the MooseObject.\n'
p1463
sS'cpp_type'
p1464
S'bool'
p1465
sS'default'
p1466
S'1'
p1467
sS'name'
p1468
S'enable'
p1469
sS'required'
p1470
I00
sS'group_name'
p1471
S'Advanced'
p1472
sa(dp1473
S'name'
p1474
S'execute_on'
p1475
sS'cpp_type'
p1476
S'MultiMooseEnum'
p1477
sS'default'
p1478
S'LINEAR'
p1479
sS'description'
p1480
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1481
sS'required'
p1482
I00
sS'options'
p1483
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1484
sS'group_name'
p1485
Nsa(dp1486
S'description'
p1487
S'The lower bound for the variable\n'
p1488
sS'cpp_type'
p1489
S'double'
p1490
sS'default'
p1491
g3
sS'name'
p1492
S'lower'
p1493
sS'required'
p1494
I00
sS'group_name'
p1495
Nsa(dp1496
S'description'
p1497
S'The seed for the master random number generator\n'
p1498
sS'cpp_type'
p1499
S'unsigned int'
p1500
sS'default'
p1501
S'0'
p1502
sS'name'
p1503
S'seed'
p1504
sS'required'
p1505
I00
sS'group_name'
p1506
S'Advanced'
p1507
sa(dp1508
S'description'
p1509
g3
sS'cpp_type'
p1510
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1511
sS'default'
p1512
S'BoundsAux'
p1513
sS'name'
p1514
S'type'
p1515
sS'required'
p1516
I00
sS'group_name'
p1517
Nsa(dp1518
S'description'
p1519
S'The upper bound for the variable\n'
p1520
sS'cpp_type'
p1521
S'double'
p1522
sS'default'
p1523
g3
sS'name'
p1524
S'upper'
p1525
sS'required'
p1526
I00
sS'group_name'
p1527
Nsa(dp1528
S'description'
p1529
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1530
sS'cpp_type'
p1531
S'bool'
p1532
sS'default'
p1533
S'0'
p1534
sS'name'
p1535
S'use_displaced_mesh'
p1536
sS'required'
p1537
I00
sS'group_name'
p1538
S'Advanced'
p1539
sa(dp1540
S'description'
p1541
S'The name of the variable that this object applies to\n'
p1542
sS'cpp_type'
p1543
S'AuxVariableName'
p1544
sS'default'
p1545
g3
sS'name'
p1546
S'variable'
p1547
sS'required'
p1548
I01
sS'group_name'
p1549
NsasS'name'
p1550
S'/AuxKernels/BoundsAux'
p1551
sa(dp1552
S'description'
p1553
g3
sS'subblocks'
p1554
NsS'parameters'
p1555
(lp1556
(dp1557
S'description'
p1558
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1559
sS'cpp_type'
p1560
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1561
sS'default'
p1562
g3
sS'name'
p1563
S'block'
p1564
sS'required'
p1565
I00
sS'group_name'
p1566
Nsa(dp1567
S'description'
p1568
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1569
sS'cpp_type'
p1570
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p1571
sS'default'
p1572
g3
sS'name'
p1573
S'boundary'
p1574
sS'required'
p1575
I00
sS'group_name'
p1576
Nsa(dp1577
S'description'
p1578
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1579
sS'cpp_type'
p1580
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p1581
sS'default'
p1582
g3
sS'name'
p1583
S'control_tags'
p1584
sS'required'
p1585
I00
sS'group_name'
p1586
S'Advanced'
p1587
sa(dp1588
S'description'
p1589
S'Set the enabled status of the MooseObject.\n'
p1590
sS'cpp_type'
p1591
S'bool'
p1592
sS'default'
p1593
S'1'
p1594
sS'name'
p1595
S'enable'
p1596
sS'required'
p1597
I00
sS'group_name'
p1598
S'Advanced'
p1599
sa(dp1600
S'name'
p1601
S'execute_on'
p1602
sS'cpp_type'
p1603
S'MultiMooseEnum'
p1604
sS'default'
p1605
S'LINEAR'
p1606
sS'description'
p1607
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1608
sS'required'
p1609
I00
sS'options'
p1610
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1611
sS'group_name'
p1612
Nsa(dp1613
S'description'
p1614
S'The seed for the master random number generator\n'
p1615
sS'cpp_type'
p1616
S'unsigned int'
p1617
sS'default'
p1618
S'0'
p1619
sS'name'
p1620
S'seed'
p1621
sS'required'
p1622
I00
sS'group_name'
p1623
S'Advanced'
p1624
sa(dp1625
S'description'
p1626
g3
sS'cpp_type'
p1627
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1628
sS'default'
p1629
S'ConstantAux'
p1630
sS'name'
p1631
S'type'
p1632
sS'required'
p1633
I00
sS'group_name'
p1634
Nsa(dp1635
S'description'
p1636
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1637
sS'cpp_type'
p1638
S'bool'
p1639
sS'default'
p1640
S'0'
p1641
sS'name'
p1642
S'use_displaced_mesh'
p1643
sS'required'
p1644
I00
sS'group_name'
p1645
S'Advanced'
p1646
sa(dp1647
S'description'
p1648
S'Some constant value that can be read from the input file\n'
p1649
sS'cpp_type'
p1650
S'double'
p1651
sS'default'
p1652
S'0'
p1653
sS'name'
p1654
S'value'
p1655
sS'required'
p1656
I00
sS'group_name'
p1657
Nsa(dp1658
S'description'
p1659
S'The name of the variable that this object applies to\n'
p1660
sS'cpp_type'
p1661
S'AuxVariableName'
p1662
sS'default'
p1663
g3
sS'name'
p1664
S'variable'
p1665
sS'required'
p1666
I01
sS'group_name'
p1667
NsasS'name'
p1668
S'/AuxKernels/ConstantAux'
p1669
sa(dp1670
S'description'
p1671
g3
sS'subblocks'
p1672
NsS'parameters'
p1673
(lp1674
(dp1675
S'description'
p1676
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1677
sS'cpp_type'
p1678
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1679
sS'default'
p1680
g3
sS'name'
p1681
S'block'
p1682
sS'required'
p1683
I00
sS'group_name'
p1684
Nsa(dp1685
S'description'
p1686
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1687
sS'cpp_type'
p1688
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p1689
sS'default'
p1690
g3
sS'name'
p1691
S'boundary'
p1692
sS'required'
p1693
I00
sS'group_name'
p1694
Nsa(dp1695
S'description'
p1696
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1697
sS'cpp_type'
p1698
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p1699
sS'default'
p1700
g3
sS'name'
p1701
S'control_tags'
p1702
sS'required'
p1703
I00
sS'group_name'
p1704
S'Advanced'
p1705
sa(dp1706
S'description'
p1707
S'The variable that is being debugged.\n'
p1708
sS'cpp_type'
p1709
S'NonlinearVariableName'
p1710
sS'default'
p1711
g3
sS'name'
p1712
S'debug_variable'
p1713
sS'required'
p1714
I01
sS'group_name'
p1715
Nsa(dp1716
S'description'
p1717
S'Set the enabled status of the MooseObject.\n'
p1718
sS'cpp_type'
p1719
S'bool'
p1720
sS'default'
p1721
S'1'
p1722
sS'name'
p1723
S'enable'
p1724
sS'required'
p1725
I00
sS'group_name'
p1726
S'Advanced'
p1727
sa(dp1728
S'name'
p1729
S'execute_on'
p1730
sS'cpp_type'
p1731
S'MultiMooseEnum'
p1732
sS'default'
p1733
S'LINEAR'
p1734
sS'description'
p1735
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1736
sS'required'
p1737
I00
sS'options'
p1738
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1739
sS'group_name'
p1740
Nsa(dp1741
S'description'
p1742
S'The seed for the master random number generator\n'
p1743
sS'cpp_type'
p1744
S'unsigned int'
p1745
sS'default'
p1746
S'0'
p1747
sS'name'
p1748
S'seed'
p1749
sS'required'
p1750
I00
sS'group_name'
p1751
S'Advanced'
p1752
sa(dp1753
S'description'
p1754
g3
sS'cpp_type'
p1755
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1756
sS'default'
p1757
S'DebugResidualAux'
p1758
sS'name'
p1759
S'type'
p1760
sS'required'
p1761
I00
sS'group_name'
p1762
Nsa(dp1763
S'description'
p1764
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1765
sS'cpp_type'
p1766
S'bool'
p1767
sS'default'
p1768
S'0'
p1769
sS'name'
p1770
S'use_displaced_mesh'
p1771
sS'required'
p1772
I00
sS'group_name'
p1773
S'Advanced'
p1774
sa(dp1775
S'description'
p1776
S'The name of the variable that this object applies to\n'
p1777
sS'cpp_type'
p1778
S'AuxVariableName'
p1779
sS'default'
p1780
g3
sS'name'
p1781
S'variable'
p1782
sS'required'
p1783
I01
sS'group_name'
p1784
NsasS'name'
p1785
S'/AuxKernels/DebugResidualAux'
p1786
sa(dp1787
S'description'
p1788
g3
sS'subblocks'
p1789
NsS'parameters'
p1790
(lp1791
(dp1792
S'description'
p1793
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1794
sS'cpp_type'
p1795
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1796
sS'default'
p1797
g3
sS'name'
p1798
S'block'
p1799
sS'required'
p1800
I00
sS'group_name'
p1801
Nsa(dp1802
S'description'
p1803
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1804
sS'cpp_type'
p1805
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p1806
sS'default'
p1807
g3
sS'name'
p1808
S'boundary'
p1809
sS'required'
p1810
I00
sS'group_name'
p1811
Nsa(dp1812
S'description'
p1813
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1814
sS'cpp_type'
p1815
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p1816
sS'default'
p1817
g3
sS'name'
p1818
S'control_tags'
p1819
sS'required'
p1820
I00
sS'group_name'
p1821
S'Advanced'
p1822
sa(dp1823
S'description'
p1824
S'The variable to compute the norm of.\n'
p1825
sS'cpp_type'
p1826
S'std::vector<VariableName>'
p1827
sS'default'
p1828
g3
sS'name'
p1829
S'coupled_variable'
p1830
sS'required'
p1831
I01
sS'group_name'
p1832
Nsa(dp1833
S'description'
p1834
S'Set the enabled status of the MooseObject.\n'
p1835
sS'cpp_type'
p1836
S'bool'
p1837
sS'default'
p1838
S'1'
p1839
sS'name'
p1840
S'enable'
p1841
sS'required'
p1842
I00
sS'group_name'
p1843
S'Advanced'
p1844
sa(dp1845
S'name'
p1846
S'execute_on'
p1847
sS'cpp_type'
p1848
S'MultiMooseEnum'
p1849
sS'default'
p1850
S'LINEAR'
p1851
sS'description'
p1852
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1853
sS'required'
p1854
I00
sS'options'
p1855
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1856
sS'group_name'
p1857
Nsa(dp1858
S'description'
p1859
S'Function representing the exact solution\n'
p1860
sS'cpp_type'
p1861
S'FunctionName'
p1862
sS'default'
p1863
g3
sS'name'
p1864
S'function'
p1865
sS'required'
p1866
I01
sS'group_name'
p1867
Nsa(dp1868
S'description'
p1869
S'The exponent used in the norm.\n'
p1870
sS'cpp_type'
p1871
S'double'
p1872
sS'default'
p1873
S'2'
p1874
sS'name'
p1875
S'p'
p1876
sS'required'
p1877
I00
sS'group_name'
p1878
Nsa(dp1879
S'description'
p1880
S'The seed for the master random number generator\n'
p1881
sS'cpp_type'
p1882
S'unsigned int'
p1883
sS'default'
p1884
S'0'
p1885
sS'name'
p1886
S'seed'
p1887
sS'required'
p1888
I00
sS'group_name'
p1889
S'Advanced'
p1890
sa(dp1891
S'description'
p1892
g3
sS'cpp_type'
p1893
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1894
sS'default'
p1895
S'ElementH1ErrorFunctionAux'
p1896
sS'name'
p1897
S'type'
p1898
sS'required'
p1899
I00
sS'group_name'
p1900
Nsa(dp1901
S'description'
p1902
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1903
sS'cpp_type'
p1904
S'bool'
p1905
sS'default'
p1906
S'0'
p1907
sS'name'
p1908
S'use_displaced_mesh'
p1909
sS'required'
p1910
I00
sS'group_name'
p1911
S'Advanced'
p1912
sa(dp1913
S'description'
p1914
S'The name of the variable that this object applies to\n'
p1915
sS'cpp_type'
p1916
S'AuxVariableName'
p1917
sS'default'
p1918
g3
sS'name'
p1919
S'variable'
p1920
sS'required'
p1921
I01
sS'group_name'
p1922
NsasS'name'
p1923
S'/AuxKernels/ElementH1ErrorFunctionAux'
p1924
sa(dp1925
S'description'
p1926
g3
sS'subblocks'
p1927
NsS'parameters'
p1928
(lp1929
(dp1930
S'description'
p1931
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1932
sS'cpp_type'
p1933
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1934
sS'default'
p1935
g3
sS'name'
p1936
S'block'
p1937
sS'required'
p1938
I00
sS'group_name'
p1939
Nsa(dp1940
S'description'
p1941
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1942
sS'cpp_type'
p1943
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p1944
sS'default'
p1945
g3
sS'name'
p1946
S'boundary'
p1947
sS'required'
p1948
I00
sS'group_name'
p1949
Nsa(dp1950
S'description'
p1951
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p1952
sS'cpp_type'
p1953
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p1954
sS'default'
p1955
g3
sS'name'
p1956
S'control_tags'
p1957
sS'required'
p1958
I00
sS'group_name'
p1959
S'Advanced'
p1960
sa(dp1961
S'description'
p1962
S'The variable to compute the norm of.\n'
p1963
sS'cpp_type'
p1964
S'std::vector<VariableName>'
p1965
sS'default'
p1966
g3
sS'name'
p1967
S'coupled_variable'
p1968
sS'required'
p1969
I01
sS'group_name'
p1970
Nsa(dp1971
S'description'
p1972
S'Set the enabled status of the MooseObject.\n'
p1973
sS'cpp_type'
p1974
S'bool'
p1975
sS'default'
p1976
S'1'
p1977
sS'name'
p1978
S'enable'
p1979
sS'required'
p1980
I00
sS'group_name'
p1981
S'Advanced'
p1982
sa(dp1983
S'name'
p1984
S'execute_on'
p1985
sS'cpp_type'
p1986
S'MultiMooseEnum'
p1987
sS'default'
p1988
S'LINEAR'
p1989
sS'description'
p1990
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1991
sS'required'
p1992
I00
sS'options'
p1993
S'none initial linear nonlinear timestep_end timestep_begin custom'
p1994
sS'group_name'
p1995
Nsa(dp1996
S'description'
p1997
S'Function representing the exact solution\n'
p1998
sS'cpp_type'
p1999
S'FunctionName'
p2000
sS'default'
p2001
g3
sS'name'
p2002
S'function'
p2003
sS'required'
p2004
I01
sS'group_name'
p2005
Nsa(dp2006
S'description'
p2007
S'The exponent used in the norm.\n'
p2008
sS'cpp_type'
p2009
S'double'
p2010
sS'default'
p2011
S'2'
p2012
sS'name'
p2013
S'p'
p2014
sS'required'
p2015
I00
sS'group_name'
p2016
Nsa(dp2017
S'description'
p2018
S'The seed for the master random number generator\n'
p2019
sS'cpp_type'
p2020
S'unsigned int'
p2021
sS'default'
p2022
S'0'
p2023
sS'name'
p2024
S'seed'
p2025
sS'required'
p2026
I00
sS'group_name'
p2027
S'Advanced'
p2028
sa(dp2029
S'description'
p2030
g3
sS'cpp_type'
p2031
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2032
sS'default'
p2033
S'ElementL2ErrorFunctionAux'
p2034
sS'name'
p2035
S'type'
p2036
sS'required'
p2037
I00
sS'group_name'
p2038
Nsa(dp2039
S'description'
p2040
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2041
sS'cpp_type'
p2042
S'bool'
p2043
sS'default'
p2044
S'0'
p2045
sS'name'
p2046
S'use_displaced_mesh'
p2047
sS'required'
p2048
I00
sS'group_name'
p2049
S'Advanced'
p2050
sa(dp2051
S'description'
p2052
S'The name of the variable that this object applies to\n'
p2053
sS'cpp_type'
p2054
S'AuxVariableName'
p2055
sS'default'
p2056
g3
sS'name'
p2057
S'variable'
p2058
sS'required'
p2059
I01
sS'group_name'
p2060
NsasS'name'
p2061
S'/AuxKernels/ElementL2ErrorFunctionAux'
p2062
sa(dp2063
S'description'
p2064
S'Compute the element size using Elem::hmin() or Elem::hmax() from libMesh.\n'
p2065
sS'subblocks'
p2066
NsS'parameters'
p2067
(lp2068
(dp2069
S'description'
p2070
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2071
sS'cpp_type'
p2072
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2073
sS'default'
p2074
g3
sS'name'
p2075
S'block'
p2076
sS'required'
p2077
I00
sS'group_name'
p2078
Nsa(dp2079
S'description'
p2080
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2081
sS'cpp_type'
p2082
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2083
sS'default'
p2084
g3
sS'name'
p2085
S'boundary'
p2086
sS'required'
p2087
I00
sS'group_name'
p2088
Nsa(dp2089
S'description'
p2090
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2091
sS'cpp_type'
p2092
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p2093
sS'default'
p2094
g3
sS'name'
p2095
S'control_tags'
p2096
sS'required'
p2097
I00
sS'group_name'
p2098
S'Advanced'
p2099
sa(dp2100
S'description'
p2101
S'Set the enabled status of the MooseObject.\n'
p2102
sS'cpp_type'
p2103
S'bool'
p2104
sS'default'
p2105
S'1'
p2106
sS'name'
p2107
S'enable'
p2108
sS'required'
p2109
I00
sS'group_name'
p2110
S'Advanced'
p2111
sa(dp2112
S'name'
p2113
S'execute_on'
p2114
sS'cpp_type'
p2115
S'MultiMooseEnum'
p2116
sS'default'
p2117
S'LINEAR'
p2118
sS'description'
p2119
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2120
sS'required'
p2121
I00
sS'options'
p2122
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2123
sS'group_name'
p2124
Nsa(dp2125
S'name'
p2126
S'method'
p2127
sS'cpp_type'
p2128
S'MooseEnum'
p2129
sS'default'
p2130
g3
sS'description'
p2131
S"The size calculation to perform ('min' or 'max').\n"
p2132
sS'required'
p2133
I01
sS'options'
p2134
S'min max'
p2135
sS'group_name'
p2136
Nsa(dp2137
S'description'
p2138
S'The seed for the master random number generator\n'
p2139
sS'cpp_type'
p2140
S'unsigned int'
p2141
sS'default'
p2142
S'0'
p2143
sS'name'
p2144
S'seed'
p2145
sS'required'
p2146
I00
sS'group_name'
p2147
S'Advanced'
p2148
sa(dp2149
S'description'
p2150
g3
sS'cpp_type'
p2151
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2152
sS'default'
p2153
S'ElementLengthAux'
p2154
sS'name'
p2155
S'type'
p2156
sS'required'
p2157
I00
sS'group_name'
p2158
Nsa(dp2159
S'description'
p2160
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2161
sS'cpp_type'
p2162
S'bool'
p2163
sS'default'
p2164
S'0'
p2165
sS'name'
p2166
S'use_displaced_mesh'
p2167
sS'required'
p2168
I00
sS'group_name'
p2169
S'Advanced'
p2170
sa(dp2171
S'description'
p2172
S'The name of the variable that this object applies to\n'
p2173
sS'cpp_type'
p2174
S'AuxVariableName'
p2175
sS'default'
p2176
g3
sS'name'
p2177
S'variable'
p2178
sS'required'
p2179
I01
sS'group_name'
p2180
NsasS'name'
p2181
S'/AuxKernels/ElementLengthAux'
p2182
sa(dp2183
S'description'
p2184
g3
sS'subblocks'
p2185
NsS'parameters'
p2186
(lp2187
(dp2188
S'description'
p2189
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2190
sS'cpp_type'
p2191
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2192
sS'default'
p2193
g3
sS'name'
p2194
S'block'
p2195
sS'required'
p2196
I00
sS'group_name'
p2197
Nsa(dp2198
S'description'
p2199
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2200
sS'cpp_type'
p2201
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2202
sS'default'
p2203
g3
sS'name'
p2204
S'boundary'
p2205
sS'required'
p2206
I00
sS'group_name'
p2207
Nsa(dp2208
S'description'
p2209
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2210
sS'cpp_type'
p2211
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p2212
sS'default'
p2213
g3
sS'name'
p2214
S'control_tags'
p2215
sS'required'
p2216
I00
sS'group_name'
p2217
S'Advanced'
p2218
sa(dp2219
S'description'
p2220
S'The variable to compute the norm of.\n'
p2221
sS'cpp_type'
p2222
S'std::vector<VariableName>'
p2223
sS'default'
p2224
g3
sS'name'
p2225
S'coupled_variable'
p2226
sS'required'
p2227
I01
sS'group_name'
p2228
Nsa(dp2229
S'description'
p2230
S'Set the enabled status of the MooseObject.\n'
p2231
sS'cpp_type'
p2232
S'bool'
p2233
sS'default'
p2234
S'1'
p2235
sS'name'
p2236
S'enable'
p2237
sS'required'
p2238
I00
sS'group_name'
p2239
S'Advanced'
p2240
sa(dp2241
S'name'
p2242
S'execute_on'
p2243
sS'cpp_type'
p2244
S'MultiMooseEnum'
p2245
sS'default'
p2246
S'LINEAR'
p2247
sS'description'
p2248
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2249
sS'required'
p2250
I00
sS'options'
p2251
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2252
sS'group_name'
p2253
Nsa(dp2254
S'description'
p2255
S'The exponent used in the norm.\n'
p2256
sS'cpp_type'
p2257
S'double'
p2258
sS'default'
p2259
S'2'
p2260
sS'name'
p2261
S'p'
p2262
sS'required'
p2263
I00
sS'group_name'
p2264
Nsa(dp2265
S'description'
p2266
S'The seed for the master random number generator\n'
p2267
sS'cpp_type'
p2268
S'unsigned int'
p2269
sS'default'
p2270
S'0'
p2271
sS'name'
p2272
S'seed'
p2273
sS'required'
p2274
I00
sS'group_name'
p2275
S'Advanced'
p2276
sa(dp2277
S'description'
p2278
g3
sS'cpp_type'
p2279
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2280
sS'default'
p2281
S'ElementLpNormAux'
p2282
sS'name'
p2283
S'type'
p2284
sS'required'
p2285
I00
sS'group_name'
p2286
Nsa(dp2287
S'description'
p2288
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2289
sS'cpp_type'
p2290
S'bool'
p2291
sS'default'
p2292
S'0'
p2293
sS'name'
p2294
S'use_displaced_mesh'
p2295
sS'required'
p2296
I00
sS'group_name'
p2297
S'Advanced'
p2298
sa(dp2299
S'description'
p2300
S'The name of the variable that this object applies to\n'
p2301
sS'cpp_type'
p2302
S'AuxVariableName'
p2303
sS'default'
p2304
g3
sS'name'
p2305
S'variable'
p2306
sS'required'
p2307
I01
sS'group_name'
p2308
NsasS'name'
p2309
S'/AuxKernels/ElementLpNormAux'
p2310
sa(dp2311
S'description'
p2312
g3
sS'subblocks'
p2313
NsS'parameters'
p2314
(lp2315
(dp2316
S'description'
p2317
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2318
sS'cpp_type'
p2319
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2320
sS'default'
p2321
g3
sS'name'
p2322
S'block'
p2323
sS'required'
p2324
I00
sS'group_name'
p2325
Nsa(dp2326
S'description'
p2327
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2328
sS'cpp_type'
p2329
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2330
sS'default'
p2331
g3
sS'name'
p2332
S'boundary'
p2333
sS'required'
p2334
I00
sS'group_name'
p2335
Nsa(dp2336
S'description'
p2337
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2338
sS'cpp_type'
p2339
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p2340
sS'default'
p2341
g3
sS'name'
p2342
S'control_tags'
p2343
sS'required'
p2344
I00
sS'group_name'
p2345
S'Advanced'
p2346
sa(dp2347
S'description'
p2348
S'Set the enabled status of the MooseObject.\n'
p2349
sS'cpp_type'
p2350
S'bool'
p2351
sS'default'
p2352
S'1'
p2353
sS'name'
p2354
S'enable'
p2355
sS'required'
p2356
I00
sS'group_name'
p2357
S'Advanced'
p2358
sa(dp2359
S'name'
p2360
S'execute_on'
p2361
sS'cpp_type'
p2362
S'MultiMooseEnum'
p2363
sS'default'
p2364
S'LINEAR'
p2365
sS'description'
p2366
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2367
sS'required'
p2368
I00
sS'options'
p2369
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2370
sS'group_name'
p2371
Nsa(dp2372
S'description'
p2373
S'The function to use as the value\n'
p2374
sS'cpp_type'
p2375
S'FunctionName'
p2376
sS'default'
p2377
g3
sS'name'
p2378
S'function'
p2379
sS'required'
p2380
I01
sS'group_name'
p2381
Nsa(dp2382
S'description'
p2383
S'The seed for the master random number generator\n'
p2384
sS'cpp_type'
p2385
S'unsigned int'
p2386
sS'default'
p2387
S'0'
p2388
sS'name'
p2389
S'seed'
p2390
sS'required'
p2391
I00
sS'group_name'
p2392
S'Advanced'
p2393
sa(dp2394
S'description'
p2395
g3
sS'cpp_type'
p2396
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2397
sS'default'
p2398
S'FunctionAux'
p2399
sS'name'
p2400
S'type'
p2401
sS'required'
p2402
I00
sS'group_name'
p2403
Nsa(dp2404
S'description'
p2405
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2406
sS'cpp_type'
p2407
S'bool'
p2408
sS'default'
p2409
S'0'
p2410
sS'name'
p2411
S'use_displaced_mesh'
p2412
sS'required'
p2413
I00
sS'group_name'
p2414
S'Advanced'
p2415
sa(dp2416
S'description'
p2417
S'The name of the variable that this object applies to\n'
p2418
sS'cpp_type'
p2419
S'AuxVariableName'
p2420
sS'default'
p2421
g3
sS'name'
p2422
S'variable'
p2423
sS'required'
p2424
I01
sS'group_name'
p2425
NsasS'name'
p2426
S'/AuxKernels/FunctionAux'
p2427
sa(dp2428
S'description'
p2429
g3
sS'subblocks'
p2430
NsS'parameters'
p2431
(lp2432
(dp2433
S'description'
p2434
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2435
sS'cpp_type'
p2436
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2437
sS'default'
p2438
g3
sS'name'
p2439
S'block'
p2440
sS'required'
p2441
I00
sS'group_name'
p2442
Nsa(dp2443
S'description'
p2444
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2445
sS'cpp_type'
p2446
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2447
sS'default'
p2448
g3
sS'name'
p2449
S'boundary'
p2450
sS'required'
p2451
I00
sS'group_name'
p2452
Nsa(dp2453
S'description'
p2454
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2455
sS'cpp_type'
p2456
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p2457
sS'default'
p2458
g3
sS'name'
p2459
S'control_tags'
p2460
sS'required'
p2461
I00
sS'group_name'
p2462
S'Advanced'
p2463
sa(dp2464
S'description'
p2465
S'Set the enabled status of the MooseObject.\n'
p2466
sS'cpp_type'
p2467
S'bool'
p2468
sS'default'
p2469
S'1'
p2470
sS'name'
p2471
S'enable'
p2472
sS'required'
p2473
I00
sS'group_name'
p2474
S'Advanced'
p2475
sa(dp2476
S'name'
p2477
S'execute_on'
p2478
sS'cpp_type'
p2479
S'MultiMooseEnum'
p2480
sS'default'
p2481
S'LINEAR'
p2482
sS'description'
p2483
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2484
sS'required'
p2485
I00
sS'options'
p2486
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2487
sS'group_name'
p2488
Nsa(dp2489
S'description'
p2490
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p2491
sS'cpp_type'
p2492
S'double'
p2493
sS'default'
p2494
g3
sS'name'
p2495
S'normal_smoothing_distance'
p2496
sS'required'
p2497
I00
sS'group_name'
p2498
Nsa(dp2499
S'description'
p2500
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p2501
sS'cpp_type'
p2502
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2503
sS'default'
p2504
g3
sS'name'
p2505
S'normal_smoothing_method'
p2506
sS'required'
p2507
I00
sS'group_name'
p2508
Nsa(dp2509
S'name'
p2510
S'order'
p2511
sS'cpp_type'
p2512
S'MooseEnum'
p2513
sS'default'
p2514
S'FIRST'
p2515
sS'description'
p2516
S'The finite element order\n'
p2517
sS'required'
p2518
I00
sS'options'
p2519
S'FIRST SECOND THIRD FOURTH'
p2520
sS'group_name'
p2521
Nsa(dp2522
S'description'
p2523
S'The boundary on the other side of a gap.\n'
p2524
sS'cpp_type'
p2525
S'BoundaryName'
p2526
sS'default'
p2527
g3
sS'name'
p2528
S'paired_boundary'
p2529
sS'required'
p2530
I01
sS'group_name'
p2531
Nsa(dp2532
S'description'
p2533
S'The variable to get the value of.\n'
p2534
sS'cpp_type'
p2535
S'VariableName'
p2536
sS'default'
p2537
g3
sS'name'
p2538
S'paired_variable'
p2539
sS'required'
p2540
I01
sS'group_name'
p2541
Nsa(dp2542
S'description'
p2543
S'The seed for the master random number generator\n'
p2544
sS'cpp_type'
p2545
S'unsigned int'
p2546
sS'default'
p2547
S'0'
p2548
sS'name'
p2549
S'seed'
p2550
sS'required'
p2551
I00
sS'group_name'
p2552
S'Advanced'
p2553
sa(dp2554
S'description'
p2555
S'Tangential distance to extend edges of contact surfaces\n'
p2556
sS'cpp_type'
p2557
S'double'
p2558
sS'default'
p2559
g3
sS'name'
p2560
S'tangential_tolerance'
p2561
sS'required'
p2562
I00
sS'group_name'
p2563
Nsa(dp2564
S'description'
p2565
g3
sS'cpp_type'
p2566
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2567
sS'default'
p2568
S'GapValueAux'
p2569
sS'name'
p2570
S'type'
p2571
sS'required'
p2572
I00
sS'group_name'
p2573
Nsa(dp2574
S'description'
p2575
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2576
sS'cpp_type'
p2577
S'bool'
p2578
sS'default'
p2579
S'1'
p2580
sS'name'
p2581
S'use_displaced_mesh'
p2582
sS'required'
p2583
I00
sS'group_name'
p2584
S'Advanced'
p2585
sa(dp2586
S'description'
p2587
S'The name of the variable that this object applies to\n'
p2588
sS'cpp_type'
p2589
S'AuxVariableName'
p2590
sS'default'
p2591
g3
sS'name'
p2592
S'variable'
p2593
sS'required'
p2594
I01
sS'group_name'
p2595
Nsa(dp2596
S'description'
p2597
S'Whether to output warning messages concerning nodes not being found\n'
p2598
sS'cpp_type'
p2599
S'bool'
p2600
sS'default'
p2601
S'0'
p2602
sS'name'
p2603
S'warnings'
p2604
sS'required'
p2605
I00
sS'group_name'
p2606
NsasS'name'
p2607
S'/AuxKernels/GapValueAux'
p2608
sa(dp2609
S'description'
p2610
g3
sS'subblocks'
p2611
NsS'parameters'
p2612
(lp2613
(dp2614
S'description'
p2615
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2616
sS'cpp_type'
p2617
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2618
sS'default'
p2619
g3
sS'name'
p2620
S'block'
p2621
sS'required'
p2622
I00
sS'group_name'
p2623
Nsa(dp2624
S'description'
p2625
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2626
sS'cpp_type'
p2627
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2628
sS'default'
p2629
g3
sS'name'
p2630
S'boundary'
p2631
sS'required'
p2632
I00
sS'group_name'
p2633
Nsa(dp2634
S'description'
p2635
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2636
sS'cpp_type'
p2637
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p2638
sS'default'
p2639
g3
sS'name'
p2640
S'control_tags'
p2641
sS'required'
p2642
I00
sS'group_name'
p2643
S'Advanced'
p2644
sa(dp2645
S'description'
p2646
S'Set the enabled status of the MooseObject.\n'
p2647
sS'cpp_type'
p2648
S'bool'
p2649
sS'default'
p2650
S'1'
p2651
sS'name'
p2652
S'enable'
p2653
sS'required'
p2654
I00
sS'group_name'
p2655
S'Advanced'
p2656
sa(dp2657
S'name'
p2658
S'execute_on'
p2659
sS'cpp_type'
p2660
S'MultiMooseEnum'
p2661
sS'default'
p2662
S'LINEAR'
p2663
sS'description'
p2664
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2665
sS'required'
p2666
I00
sS'options'
p2667
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2668
sS'group_name'
p2669
Nsa(dp2670
S'description'
p2671
S'The factor by which to multiply your material property for visualization\n'
p2672
sS'cpp_type'
p2673
S'double'
p2674
sS'default'
p2675
S'1'
p2676
sS'name'
p2677
S'factor'
p2678
sS'required'
p2679
I00
sS'group_name'
p2680
Nsa(dp2681
S'description'
p2682
S'The offset to add to your material property for visualization\n'
p2683
sS'cpp_type'
p2684
S'double'
p2685
sS'default'
p2686
S'0'
p2687
sS'name'
p2688
S'offset'
p2689
sS'required'
p2690
I00
sS'group_name'
p2691
Nsa(dp2692
S'description'
p2693
S'The scalar material property name\n'
p2694
sS'cpp_type'
p2695
S'MaterialPropertyName'
p2696
sS'default'
p2697
g3
sS'name'
p2698
S'property'
p2699
sS'required'
p2700
I01
sS'group_name'
p2701
Nsa(dp2702
S'description'
p2703
S'The seed for the master random number generator\n'
p2704
sS'cpp_type'
p2705
S'unsigned int'
p2706
sS'default'
p2707
S'0'
p2708
sS'name'
p2709
S'seed'
p2710
sS'required'
p2711
I00
sS'group_name'
p2712
S'Advanced'
p2713
sa(dp2714
S'description'
p2715
g3
sS'cpp_type'
p2716
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2717
sS'default'
p2718
S'MaterialRealAux'
p2719
sS'name'
p2720
S'type'
p2721
sS'required'
p2722
I00
sS'group_name'
p2723
Nsa(dp2724
S'description'
p2725
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2726
sS'cpp_type'
p2727
S'bool'
p2728
sS'default'
p2729
S'0'
p2730
sS'name'
p2731
S'use_displaced_mesh'
p2732
sS'required'
p2733
I00
sS'group_name'
p2734
S'Advanced'
p2735
sa(dp2736
S'description'
p2737
S'The name of the variable that this object applies to\n'
p2738
sS'cpp_type'
p2739
S'AuxVariableName'
p2740
sS'default'
p2741
g3
sS'name'
p2742
S'variable'
p2743
sS'required'
p2744
I01
sS'group_name'
p2745
NsasS'name'
p2746
S'/AuxKernels/MaterialRealAux'
p2747
sa(dp2748
S'description'
p2749
g3
sS'subblocks'
p2750
NsS'parameters'
p2751
(lp2752
(dp2753
S'description'
p2754
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2755
sS'cpp_type'
p2756
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2757
sS'default'
p2758
g3
sS'name'
p2759
S'block'
p2760
sS'required'
p2761
I00
sS'group_name'
p2762
Nsa(dp2763
S'description'
p2764
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2765
sS'cpp_type'
p2766
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2767
sS'default'
p2768
g3
sS'name'
p2769
S'boundary'
p2770
sS'required'
p2771
I00
sS'group_name'
p2772
Nsa(dp2773
S'description'
p2774
S'The column component to consider for this kernel\n'
p2775
sS'cpp_type'
p2776
S'unsigned int'
p2777
sS'default'
p2778
S'0'
p2779
sS'name'
p2780
S'column'
p2781
sS'required'
p2782
I00
sS'group_name'
p2783
Nsa(dp2784
S'description'
p2785
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2786
sS'cpp_type'
p2787
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p2788
sS'default'
p2789
g3
sS'name'
p2790
S'control_tags'
p2791
sS'required'
p2792
I00
sS'group_name'
p2793
S'Advanced'
p2794
sa(dp2795
S'description'
p2796
S'Set the enabled status of the MooseObject.\n'
p2797
sS'cpp_type'
p2798
S'bool'
p2799
sS'default'
p2800
S'1'
p2801
sS'name'
p2802
S'enable'
p2803
sS'required'
p2804
I00
sS'group_name'
p2805
S'Advanced'
p2806
sa(dp2807
S'name'
p2808
S'execute_on'
p2809
sS'cpp_type'
p2810
S'MultiMooseEnum'
p2811
sS'default'
p2812
S'LINEAR'
p2813
sS'description'
p2814
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2815
sS'required'
p2816
I00
sS'options'
p2817
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2818
sS'group_name'
p2819
Nsa(dp2820
S'description'
p2821
S'The factor by which to multiply your material property for visualization\n'
p2822
sS'cpp_type'
p2823
S'double'
p2824
sS'default'
p2825
S'1'
p2826
sS'name'
p2827
S'factor'
p2828
sS'required'
p2829
I00
sS'group_name'
p2830
Nsa(dp2831
S'description'
p2832
S'The offset to add to your material property for visualization\n'
p2833
sS'cpp_type'
p2834
S'double'
p2835
sS'default'
p2836
S'0'
p2837
sS'name'
p2838
S'offset'
p2839
sS'required'
p2840
I00
sS'group_name'
p2841
Nsa(dp2842
S'description'
p2843
S'The scalar material property name\n'
p2844
sS'cpp_type'
p2845
S'MaterialPropertyName'
p2846
sS'default'
p2847
g3
sS'name'
p2848
S'property'
p2849
sS'required'
p2850
I01
sS'group_name'
p2851
Nsa(dp2852
S'description'
p2853
S'The row component to consider for this kernel\n'
p2854
sS'cpp_type'
p2855
S'unsigned int'
p2856
sS'default'
p2857
S'0'
p2858
sS'name'
p2859
S'row'
p2860
sS'required'
p2861
I00
sS'group_name'
p2862
Nsa(dp2863
S'description'
p2864
S'The seed for the master random number generator\n'
p2865
sS'cpp_type'
p2866
S'unsigned int'
p2867
sS'default'
p2868
S'0'
p2869
sS'name'
p2870
S'seed'
p2871
sS'required'
p2872
I00
sS'group_name'
p2873
S'Advanced'
p2874
sa(dp2875
S'description'
p2876
g3
sS'cpp_type'
p2877
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2878
sS'default'
p2879
S'MaterialRealDenseMatrixAux'
p2880
sS'name'
p2881
S'type'
p2882
sS'required'
p2883
I00
sS'group_name'
p2884
Nsa(dp2885
S'description'
p2886
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2887
sS'cpp_type'
p2888
S'bool'
p2889
sS'default'
p2890
S'0'
p2891
sS'name'
p2892
S'use_displaced_mesh'
p2893
sS'required'
p2894
I00
sS'group_name'
p2895
S'Advanced'
p2896
sa(dp2897
S'description'
p2898
S'The name of the variable that this object applies to\n'
p2899
sS'cpp_type'
p2900
S'AuxVariableName'
p2901
sS'default'
p2902
g3
sS'name'
p2903
S'variable'
p2904
sS'required'
p2905
I01
sS'group_name'
p2906
NsasS'name'
p2907
S'/AuxKernels/MaterialRealDenseMatrixAux'
p2908
sa(dp2909
S'description'
p2910
g3
sS'subblocks'
p2911
NsS'parameters'
p2912
(lp2913
(dp2914
S'description'
p2915
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2916
sS'cpp_type'
p2917
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2918
sS'default'
p2919
g3
sS'name'
p2920
S'block'
p2921
sS'required'
p2922
I00
sS'group_name'
p2923
Nsa(dp2924
S'description'
p2925
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2926
sS'cpp_type'
p2927
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2928
sS'default'
p2929
g3
sS'name'
p2930
S'boundary'
p2931
sS'required'
p2932
I00
sS'group_name'
p2933
Nsa(dp2934
S'description'
p2935
S'The column component to consider for this kernel\n'
p2936
sS'cpp_type'
p2937
S'unsigned int'
p2938
sS'default'
p2939
S'0'
p2940
sS'name'
p2941
S'column'
p2942
sS'required'
p2943
I00
sS'group_name'
p2944
Nsa(dp2945
S'description'
p2946
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p2947
sS'cpp_type'
p2948
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p2949
sS'default'
p2950
g3
sS'name'
p2951
S'control_tags'
p2952
sS'required'
p2953
I00
sS'group_name'
p2954
S'Advanced'
p2955
sa(dp2956
S'description'
p2957
S'Set the enabled status of the MooseObject.\n'
p2958
sS'cpp_type'
p2959
S'bool'
p2960
sS'default'
p2961
S'1'
p2962
sS'name'
p2963
S'enable'
p2964
sS'required'
p2965
I00
sS'group_name'
p2966
S'Advanced'
p2967
sa(dp2968
S'name'
p2969
S'execute_on'
p2970
sS'cpp_type'
p2971
S'MultiMooseEnum'
p2972
sS'default'
p2973
S'LINEAR'
p2974
sS'description'
p2975
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2976
sS'required'
p2977
I00
sS'options'
p2978
S'none initial linear nonlinear timestep_end timestep_begin custom'
p2979
sS'group_name'
p2980
Nsa(dp2981
S'description'
p2982
S'The factor by which to multiply your material property for visualization\n'
p2983
sS'cpp_type'
p2984
S'double'
p2985
sS'default'
p2986
S'1'
p2987
sS'name'
p2988
S'factor'
p2989
sS'required'
p2990
I00
sS'group_name'
p2991
Nsa(dp2992
S'description'
p2993
S'The offset to add to your material property for visualization\n'
p2994
sS'cpp_type'
p2995
S'double'
p2996
sS'default'
p2997
S'0'
p2998
sS'name'
p2999
S'offset'
p3000
sS'required'
p3001
I00
sS'group_name'
p3002
Nsa(dp3003
S'description'
p3004
S'The scalar material property name\n'
p3005
sS'cpp_type'
p3006
S'MaterialPropertyName'
p3007
sS'default'
p3008
g3
sS'name'
p3009
S'property'
p3010
sS'required'
p3011
I01
sS'group_name'
p3012
Nsa(dp3013
S'description'
p3014
S'The row component to consider for this kernel\n'
p3015
sS'cpp_type'
p3016
S'unsigned int'
p3017
sS'default'
p3018
S'0'
p3019
sS'name'
p3020
S'row'
p3021
sS'required'
p3022
I00
sS'group_name'
p3023
Nsa(dp3024
S'description'
p3025
S'The seed for the master random number generator\n'
p3026
sS'cpp_type'
p3027
S'unsigned int'
p3028
sS'default'
p3029
S'0'
p3030
sS'name'
p3031
S'seed'
p3032
sS'required'
p3033
I00
sS'group_name'
p3034
S'Advanced'
p3035
sa(dp3036
S'description'
p3037
g3
sS'cpp_type'
p3038
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3039
sS'default'
p3040
S'MaterialRealTensorValueAux'
p3041
sS'name'
p3042
S'type'
p3043
sS'required'
p3044
I00
sS'group_name'
p3045
Nsa(dp3046
S'description'
p3047
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3048
sS'cpp_type'
p3049
S'bool'
p3050
sS'default'
p3051
S'0'
p3052
sS'name'
p3053
S'use_displaced_mesh'
p3054
sS'required'
p3055
I00
sS'group_name'
p3056
S'Advanced'
p3057
sa(dp3058
S'description'
p3059
S'The name of the variable that this object applies to\n'
p3060
sS'cpp_type'
p3061
S'AuxVariableName'
p3062
sS'default'
p3063
g3
sS'name'
p3064
S'variable'
p3065
sS'required'
p3066
I01
sS'group_name'
p3067
NsasS'name'
p3068
S'/AuxKernels/MaterialRealTensorValueAux'
p3069
sa(dp3070
S'description'
p3071
g3
sS'subblocks'
p3072
NsS'parameters'
p3073
(lp3074
(dp3075
S'description'
p3076
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3077
sS'cpp_type'
p3078
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3079
sS'default'
p3080
g3
sS'name'
p3081
S'block'
p3082
sS'required'
p3083
I00
sS'group_name'
p3084
Nsa(dp3085
S'description'
p3086
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3087
sS'cpp_type'
p3088
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3089
sS'default'
p3090
g3
sS'name'
p3091
S'boundary'
p3092
sS'required'
p3093
I00
sS'group_name'
p3094
Nsa(dp3095
S'description'
p3096
S'The vector component to consider for this kernel\n'
p3097
sS'cpp_type'
p3098
S'unsigned int'
p3099
sS'default'
p3100
S'0'
p3101
sS'name'
p3102
S'component'
p3103
sS'required'
p3104
I00
sS'group_name'
p3105
Nsa(dp3106
S'description'
p3107
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3108
sS'cpp_type'
p3109
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3110
sS'default'
p3111
g3
sS'name'
p3112
S'control_tags'
p3113
sS'required'
p3114
I00
sS'group_name'
p3115
S'Advanced'
p3116
sa(dp3117
S'description'
p3118
S'Set the enabled status of the MooseObject.\n'
p3119
sS'cpp_type'
p3120
S'bool'
p3121
sS'default'
p3122
S'1'
p3123
sS'name'
p3124
S'enable'
p3125
sS'required'
p3126
I00
sS'group_name'
p3127
S'Advanced'
p3128
sa(dp3129
S'name'
p3130
S'execute_on'
p3131
sS'cpp_type'
p3132
S'MultiMooseEnum'
p3133
sS'default'
p3134
S'LINEAR'
p3135
sS'description'
p3136
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3137
sS'required'
p3138
I00
sS'options'
p3139
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3140
sS'group_name'
p3141
Nsa(dp3142
S'description'
p3143
S'The factor by which to multiply your material property for visualization\n'
p3144
sS'cpp_type'
p3145
S'double'
p3146
sS'default'
p3147
S'1'
p3148
sS'name'
p3149
S'factor'
p3150
sS'required'
p3151
I00
sS'group_name'
p3152
Nsa(dp3153
S'description'
p3154
S'The offset to add to your material property for visualization\n'
p3155
sS'cpp_type'
p3156
S'double'
p3157
sS'default'
p3158
S'0'
p3159
sS'name'
p3160
S'offset'
p3161
sS'required'
p3162
I00
sS'group_name'
p3163
Nsa(dp3164
S'description'
p3165
S'The scalar material property name\n'
p3166
sS'cpp_type'
p3167
S'MaterialPropertyName'
p3168
sS'default'
p3169
g3
sS'name'
p3170
S'property'
p3171
sS'required'
p3172
I01
sS'group_name'
p3173
Nsa(dp3174
S'description'
p3175
S'The seed for the master random number generator\n'
p3176
sS'cpp_type'
p3177
S'unsigned int'
p3178
sS'default'
p3179
S'0'
p3180
sS'name'
p3181
S'seed'
p3182
sS'required'
p3183
I00
sS'group_name'
p3184
S'Advanced'
p3185
sa(dp3186
S'description'
p3187
g3
sS'cpp_type'
p3188
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3189
sS'default'
p3190
S'MaterialRealVectorValueAux'
p3191
sS'name'
p3192
S'type'
p3193
sS'required'
p3194
I00
sS'group_name'
p3195
Nsa(dp3196
S'description'
p3197
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3198
sS'cpp_type'
p3199
S'bool'
p3200
sS'default'
p3201
S'0'
p3202
sS'name'
p3203
S'use_displaced_mesh'
p3204
sS'required'
p3205
I00
sS'group_name'
p3206
S'Advanced'
p3207
sa(dp3208
S'description'
p3209
S'The name of the variable that this object applies to\n'
p3210
sS'cpp_type'
p3211
S'AuxVariableName'
p3212
sS'default'
p3213
g3
sS'name'
p3214
S'variable'
p3215
sS'required'
p3216
I01
sS'group_name'
p3217
NsasS'name'
p3218
S'/AuxKernels/MaterialRealVectorValueAux'
p3219
sa(dp3220
S'description'
p3221
S'Extracts a component of a material type std::vector<Real> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n'
p3222
sS'subblocks'
p3223
NsS'parameters'
p3224
(lp3225
(dp3226
S'description'
p3227
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3228
sS'cpp_type'
p3229
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3230
sS'default'
p3231
g3
sS'name'
p3232
S'block'
p3233
sS'required'
p3234
I00
sS'group_name'
p3235
Nsa(dp3236
S'description'
p3237
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3238
sS'cpp_type'
p3239
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3240
sS'default'
p3241
g3
sS'name'
p3242
S'boundary'
p3243
sS'required'
p3244
I00
sS'group_name'
p3245
Nsa(dp3246
S'description'
p3247
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3248
sS'cpp_type'
p3249
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3250
sS'default'
p3251
g3
sS'name'
p3252
S'control_tags'
p3253
sS'required'
p3254
I00
sS'group_name'
p3255
S'Advanced'
p3256
sa(dp3257
S'description'
p3258
S'Set the enabled status of the MooseObject.\n'
p3259
sS'cpp_type'
p3260
S'bool'
p3261
sS'default'
p3262
S'1'
p3263
sS'name'
p3264
S'enable'
p3265
sS'required'
p3266
I00
sS'group_name'
p3267
S'Advanced'
p3268
sa(dp3269
S'name'
p3270
S'execute_on'
p3271
sS'cpp_type'
p3272
S'MultiMooseEnum'
p3273
sS'default'
p3274
S'LINEAR'
p3275
sS'description'
p3276
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3277
sS'required'
p3278
I00
sS'options'
p3279
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3280
sS'group_name'
p3281
Nsa(dp3282
S'description'
p3283
S'The factor by which to multiply your material property for visualization\n'
p3284
sS'cpp_type'
p3285
S'double'
p3286
sS'default'
p3287
S'1'
p3288
sS'name'
p3289
S'factor'
p3290
sS'required'
p3291
I00
sS'group_name'
p3292
Nsa(dp3293
S'description'
p3294
S'The index to consider for this kernel\n'
p3295
sS'cpp_type'
p3296
S'unsigned int'
p3297
sS'default'
p3298
S'0'
p3299
sS'name'
p3300
S'index'
p3301
sS'required'
p3302
I00
sS'group_name'
p3303
Nsa(dp3304
S'description'
p3305
S'The offset to add to your material property for visualization\n'
p3306
sS'cpp_type'
p3307
S'double'
p3308
sS'default'
p3309
S'0'
p3310
sS'name'
p3311
S'offset'
p3312
sS'required'
p3313
I00
sS'group_name'
p3314
Nsa(dp3315
S'description'
p3316
S'The scalar material property name\n'
p3317
sS'cpp_type'
p3318
S'MaterialPropertyName'
p3319
sS'default'
p3320
g3
sS'name'
p3321
S'property'
p3322
sS'required'
p3323
I01
sS'group_name'
p3324
Nsa(dp3325
S'description'
p3326
S'The seed for the master random number generator\n'
p3327
sS'cpp_type'
p3328
S'unsigned int'
p3329
sS'default'
p3330
S'0'
p3331
sS'name'
p3332
S'seed'
p3333
sS'required'
p3334
I00
sS'group_name'
p3335
S'Advanced'
p3336
sa(dp3337
S'description'
p3338
S'Evaluate the std::vector<Real> at this quadpoint.  This only needs to be used if you are interested in a particular quadpoint in each element: otherwise do not include this parameter in your input file\n'
p3339
sS'cpp_type'
p3340
S'unsigned int'
p3341
sS'default'
p3342
g3
sS'name'
p3343
S'selected_qp'
p3344
sS'required'
p3345
I00
sS'group_name'
p3346
S'Advanced'
p3347
sa(dp3348
S'description'
p3349
g3
sS'cpp_type'
p3350
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3351
sS'default'
p3352
S'MaterialStdVectorAux'
p3353
sS'name'
p3354
S'type'
p3355
sS'required'
p3356
I00
sS'group_name'
p3357
Nsa(dp3358
S'description'
p3359
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3360
sS'cpp_type'
p3361
S'bool'
p3362
sS'default'
p3363
S'0'
p3364
sS'name'
p3365
S'use_displaced_mesh'
p3366
sS'required'
p3367
I00
sS'group_name'
p3368
S'Advanced'
p3369
sa(dp3370
S'description'
p3371
S'The name of the variable that this object applies to\n'
p3372
sS'cpp_type'
p3373
S'AuxVariableName'
p3374
sS'default'
p3375
g3
sS'name'
p3376
S'variable'
p3377
sS'required'
p3378
I01
sS'group_name'
p3379
NsasS'name'
p3380
S'/AuxKernels/MaterialStdVectorAux'
p3381
sa(dp3382
S'description'
p3383
S"Extracts a component of a material's std::vector<RealGradient> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n"
p3384
sS'subblocks'
p3385
NsS'parameters'
p3386
(lp3387
(dp3388
S'description'
p3389
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3390
sS'cpp_type'
p3391
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3392
sS'default'
p3393
g3
sS'name'
p3394
S'block'
p3395
sS'required'
p3396
I00
sS'group_name'
p3397
Nsa(dp3398
S'description'
p3399
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3400
sS'cpp_type'
p3401
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3402
sS'default'
p3403
g3
sS'name'
p3404
S'boundary'
p3405
sS'required'
p3406
I00
sS'group_name'
p3407
Nsa(dp3408
S'description'
p3409
S'The gradient component to be extracted for this kernel\n'
p3410
sS'cpp_type'
p3411
S'unsigned int'
p3412
sS'default'
p3413
S'0'
p3414
sS'name'
p3415
S'component'
p3416
sS'required'
p3417
I00
sS'group_name'
p3418
Nsa(dp3419
S'description'
p3420
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3421
sS'cpp_type'
p3422
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3423
sS'default'
p3424
g3
sS'name'
p3425
S'control_tags'
p3426
sS'required'
p3427
I00
sS'group_name'
p3428
S'Advanced'
p3429
sa(dp3430
S'description'
p3431
S'Set the enabled status of the MooseObject.\n'
p3432
sS'cpp_type'
p3433
S'bool'
p3434
sS'default'
p3435
S'1'
p3436
sS'name'
p3437
S'enable'
p3438
sS'required'
p3439
I00
sS'group_name'
p3440
S'Advanced'
p3441
sa(dp3442
S'name'
p3443
S'execute_on'
p3444
sS'cpp_type'
p3445
S'MultiMooseEnum'
p3446
sS'default'
p3447
S'LINEAR'
p3448
sS'description'
p3449
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3450
sS'required'
p3451
I00
sS'options'
p3452
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3453
sS'group_name'
p3454
Nsa(dp3455
S'description'
p3456
S'The factor by which to multiply your material property for visualization\n'
p3457
sS'cpp_type'
p3458
S'double'
p3459
sS'default'
p3460
S'1'
p3461
sS'name'
p3462
S'factor'
p3463
sS'required'
p3464
I00
sS'group_name'
p3465
Nsa(dp3466
S'description'
p3467
S'The index to consider for this kernel\n'
p3468
sS'cpp_type'
p3469
S'unsigned int'
p3470
sS'default'
p3471
S'0'
p3472
sS'name'
p3473
S'index'
p3474
sS'required'
p3475
I00
sS'group_name'
p3476
Nsa(dp3477
S'description'
p3478
S'The offset to add to your material property for visualization\n'
p3479
sS'cpp_type'
p3480
S'double'
p3481
sS'default'
p3482
S'0'
p3483
sS'name'
p3484
S'offset'
p3485
sS'required'
p3486
I00
sS'group_name'
p3487
Nsa(dp3488
S'description'
p3489
S'The scalar material property name\n'
p3490
sS'cpp_type'
p3491
S'MaterialPropertyName'
p3492
sS'default'
p3493
g3
sS'name'
p3494
S'property'
p3495
sS'required'
p3496
I01
sS'group_name'
p3497
Nsa(dp3498
S'description'
p3499
S'The seed for the master random number generator\n'
p3500
sS'cpp_type'
p3501
S'unsigned int'
p3502
sS'default'
p3503
S'0'
p3504
sS'name'
p3505
S'seed'
p3506
sS'required'
p3507
I00
sS'group_name'
p3508
S'Advanced'
p3509
sa(dp3510
S'description'
p3511
g3
sS'cpp_type'
p3512
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3513
sS'default'
p3514
S'MaterialStdVectorRealGradientAux'
p3515
sS'name'
p3516
S'type'
p3517
sS'required'
p3518
I00
sS'group_name'
p3519
Nsa(dp3520
S'description'
p3521
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3522
sS'cpp_type'
p3523
S'bool'
p3524
sS'default'
p3525
S'0'
p3526
sS'name'
p3527
S'use_displaced_mesh'
p3528
sS'required'
p3529
I00
sS'group_name'
p3530
S'Advanced'
p3531
sa(dp3532
S'description'
p3533
S'The name of the variable that this object applies to\n'
p3534
sS'cpp_type'
p3535
S'AuxVariableName'
p3536
sS'default'
p3537
g3
sS'name'
p3538
S'variable'
p3539
sS'required'
p3540
I01
sS'group_name'
p3541
NsasS'name'
p3542
S'/AuxKernels/MaterialStdVectorRealGradientAux'
p3543
sa(dp3544
S'description'
p3545
g3
sS'subblocks'
p3546
NsS'parameters'
p3547
(lp3548
(dp3549
S'description'
p3550
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3551
sS'cpp_type'
p3552
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3553
sS'default'
p3554
g3
sS'name'
p3555
S'block'
p3556
sS'required'
p3557
I00
sS'group_name'
p3558
Nsa(dp3559
S'description'
p3560
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3561
sS'cpp_type'
p3562
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3563
sS'default'
p3564
g3
sS'name'
p3565
S'boundary'
p3566
sS'required'
p3567
I00
sS'group_name'
p3568
Nsa(dp3569
S'description'
p3570
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3571
sS'cpp_type'
p3572
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3573
sS'default'
p3574
g3
sS'name'
p3575
S'control_tags'
p3576
sS'required'
p3577
I00
sS'group_name'
p3578
S'Advanced'
p3579
sa(dp3580
S'description'
p3581
S'Set the enabled status of the MooseObject.\n'
p3582
sS'cpp_type'
p3583
S'bool'
p3584
sS'default'
p3585
S'1'
p3586
sS'name'
p3587
S'enable'
p3588
sS'required'
p3589
I00
sS'group_name'
p3590
S'Advanced'
p3591
sa(dp3592
S'name'
p3593
S'execute_on'
p3594
sS'cpp_type'
p3595
S'MultiMooseEnum'
p3596
sS'default'
p3597
S'LINEAR'
p3598
sS'description'
p3599
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3600
sS'required'
p3601
I00
sS'options'
p3602
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3603
sS'group_name'
p3604
Nsa(dp3605
S'description'
p3606
S'The boundary to find the distance to.\n'
p3607
sS'cpp_type'
p3608
S'BoundaryName'
p3609
sS'default'
p3610
g3
sS'name'
p3611
S'paired_boundary'
p3612
sS'required'
p3613
I01
sS'group_name'
p3614
Nsa(dp3615
S'description'
p3616
S'The seed for the master random number generator\n'
p3617
sS'cpp_type'
p3618
S'unsigned int'
p3619
sS'default'
p3620
S'0'
p3621
sS'name'
p3622
S'seed'
p3623
sS'required'
p3624
I00
sS'group_name'
p3625
S'Advanced'
p3626
sa(dp3627
S'description'
p3628
g3
sS'cpp_type'
p3629
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3630
sS'default'
p3631
S'NearestNodeDistanceAux'
p3632
sS'name'
p3633
S'type'
p3634
sS'required'
p3635
I00
sS'group_name'
p3636
Nsa(dp3637
S'description'
p3638
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3639
sS'cpp_type'
p3640
S'bool'
p3641
sS'default'
p3642
S'1'
p3643
sS'name'
p3644
S'use_displaced_mesh'
p3645
sS'required'
p3646
I00
sS'group_name'
p3647
S'Advanced'
p3648
sa(dp3649
S'description'
p3650
S'The name of the variable that this object applies to\n'
p3651
sS'cpp_type'
p3652
S'AuxVariableName'
p3653
sS'default'
p3654
g3
sS'name'
p3655
S'variable'
p3656
sS'required'
p3657
I01
sS'group_name'
p3658
NsasS'name'
p3659
S'/AuxKernels/NearestNodeDistanceAux'
p3660
sa(dp3661
S'description'
p3662
g3
sS'subblocks'
p3663
NsS'parameters'
p3664
(lp3665
(dp3666
S'description'
p3667
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3668
sS'cpp_type'
p3669
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3670
sS'default'
p3671
g3
sS'name'
p3672
S'block'
p3673
sS'required'
p3674
I00
sS'group_name'
p3675
Nsa(dp3676
S'description'
p3677
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3678
sS'cpp_type'
p3679
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3680
sS'default'
p3681
g3
sS'name'
p3682
S'boundary'
p3683
sS'required'
p3684
I00
sS'group_name'
p3685
Nsa(dp3686
S'description'
p3687
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3688
sS'cpp_type'
p3689
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3690
sS'default'
p3691
g3
sS'name'
p3692
S'control_tags'
p3693
sS'required'
p3694
I00
sS'group_name'
p3695
S'Advanced'
p3696
sa(dp3697
S'description'
p3698
S'Set the enabled status of the MooseObject.\n'
p3699
sS'cpp_type'
p3700
S'bool'
p3701
sS'default'
p3702
S'1'
p3703
sS'name'
p3704
S'enable'
p3705
sS'required'
p3706
I00
sS'group_name'
p3707
S'Advanced'
p3708
sa(dp3709
S'name'
p3710
S'execute_on'
p3711
sS'cpp_type'
p3712
S'MultiMooseEnum'
p3713
sS'default'
p3714
S'LINEAR'
p3715
sS'description'
p3716
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3717
sS'required'
p3718
I00
sS'options'
p3719
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3720
sS'group_name'
p3721
Nsa(dp3722
S'description'
p3723
S'The boundary to get the value from.\n'
p3724
sS'cpp_type'
p3725
S'BoundaryName'
p3726
sS'default'
p3727
g3
sS'name'
p3728
S'paired_boundary'
p3729
sS'required'
p3730
I01
sS'group_name'
p3731
Nsa(dp3732
S'description'
p3733
S'The variable to get the value of.\n'
p3734
sS'cpp_type'
p3735
S'std::vector<VariableName>'
p3736
sS'default'
p3737
g3
sS'name'
p3738
S'paired_variable'
p3739
sS'required'
p3740
I01
sS'group_name'
p3741
Nsa(dp3742
S'description'
p3743
S'The seed for the master random number generator\n'
p3744
sS'cpp_type'
p3745
S'unsigned int'
p3746
sS'default'
p3747
S'0'
p3748
sS'name'
p3749
S'seed'
p3750
sS'required'
p3751
I00
sS'group_name'
p3752
S'Advanced'
p3753
sa(dp3754
S'description'
p3755
g3
sS'cpp_type'
p3756
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3757
sS'default'
p3758
S'NearestNodeValueAux'
p3759
sS'name'
p3760
S'type'
p3761
sS'required'
p3762
I00
sS'group_name'
p3763
Nsa(dp3764
S'description'
p3765
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3766
sS'cpp_type'
p3767
S'bool'
p3768
sS'default'
p3769
S'1'
p3770
sS'name'
p3771
S'use_displaced_mesh'
p3772
sS'required'
p3773
I00
sS'group_name'
p3774
S'Advanced'
p3775
sa(dp3776
S'description'
p3777
S'The name of the variable that this object applies to\n'
p3778
sS'cpp_type'
p3779
S'AuxVariableName'
p3780
sS'default'
p3781
g3
sS'name'
p3782
S'variable'
p3783
sS'required'
p3784
I01
sS'group_name'
p3785
NsasS'name'
p3786
S'/AuxKernels/NearestNodeValueAux'
p3787
sa(dp3788
S'description'
p3789
g3
sS'subblocks'
p3790
NsS'parameters'
p3791
(lp3792
(dp3793
S'description'
p3794
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3795
sS'cpp_type'
p3796
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3797
sS'default'
p3798
g3
sS'name'
p3799
S'block'
p3800
sS'required'
p3801
I00
sS'group_name'
p3802
Nsa(dp3803
S'description'
p3804
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3805
sS'cpp_type'
p3806
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3807
sS'default'
p3808
g3
sS'name'
p3809
S'boundary'
p3810
sS'required'
p3811
I00
sS'group_name'
p3812
Nsa(dp3813
S'description'
p3814
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3815
sS'cpp_type'
p3816
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3817
sS'default'
p3818
g3
sS'name'
p3819
S'control_tags'
p3820
sS'required'
p3821
I00
sS'group_name'
p3822
S'Advanced'
p3823
sa(dp3824
S'description'
p3825
S'Set the enabled status of the MooseObject.\n'
p3826
sS'cpp_type'
p3827
S'bool'
p3828
sS'default'
p3829
S'1'
p3830
sS'name'
p3831
S'enable'
p3832
sS'required'
p3833
I00
sS'group_name'
p3834
S'Advanced'
p3835
sa(dp3836
S'name'
p3837
S'execute_on'
p3838
sS'cpp_type'
p3839
S'MultiMooseEnum'
p3840
sS'default'
p3841
S'LINEAR'
p3842
sS'description'
p3843
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3844
sS'required'
p3845
I00
sS'options'
p3846
S'none initial linear nonlinear timestep_end timestep_begin custom'
p3847
sS'group_name'
p3848
Nsa(dp3849
S'description'
p3850
S'The normalization factor\n'
p3851
sS'cpp_type'
p3852
S'double'
p3853
sS'default'
p3854
S'1'
p3855
sS'name'
p3856
S'normal_factor'
p3857
sS'required'
p3858
I00
sS'group_name'
p3859
Nsa(dp3860
S'description'
p3861
S'The postprocessor on the source\n'
p3862
sS'cpp_type'
p3863
S'PostprocessorName'
p3864
sS'default'
p3865
g3
sS'name'
p3866
S'normalization'
p3867
sS'required'
p3868
I01
sS'group_name'
p3869
Nsa(dp3870
S'description'
p3871
S'The seed for the master random number generator\n'
p3872
sS'cpp_type'
p3873
S'unsigned int'
p3874
sS'default'
p3875
S'0'
p3876
sS'name'
p3877
S'seed'
p3878
sS'required'
p3879
I00
sS'group_name'
p3880
S'Advanced'
p3881
sa(dp3882
S'description'
p3883
S'The variable to be normalized\n'
p3884
sS'cpp_type'
p3885
S'std::vector<VariableName>'
p3886
sS'default'
p3887
g3
sS'name'
p3888
S'source_variable'
p3889
sS'required'
p3890
I01
sS'group_name'
p3891
Nsa(dp3892
S'description'
p3893
g3
sS'cpp_type'
p3894
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3895
sS'default'
p3896
S'NormalizationAux'
p3897
sS'name'
p3898
S'type'
p3899
sS'required'
p3900
I00
sS'group_name'
p3901
Nsa(dp3902
S'description'
p3903
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3904
sS'cpp_type'
p3905
S'bool'
p3906
sS'default'
p3907
S'0'
p3908
sS'name'
p3909
S'use_displaced_mesh'
p3910
sS'required'
p3911
I00
sS'group_name'
p3912
S'Advanced'
p3913
sa(dp3914
S'description'
p3915
S'The name of the variable that this object applies to\n'
p3916
sS'cpp_type'
p3917
S'AuxVariableName'
p3918
sS'default'
p3919
g3
sS'name'
p3920
S'variable'
p3921
sS'required'
p3922
I01
sS'group_name'
p3923
NsasS'name'
p3924
S'/AuxKernels/NormalizationAux'
p3925
sa(dp3926
S'description'
p3927
S'Parsed function AuxKernel.\n'
p3928
sS'subblocks'
p3929
NsS'parameters'
p3930
(lp3931
(dp3932
S'description'
p3933
S'coupled variables\n'
p3934
sS'cpp_type'
p3935
S'std::vector<VariableName>'
p3936
sS'default'
p3937
g3
sS'name'
p3938
S'args'
p3939
sS'required'
p3940
I00
sS'group_name'
p3941
Nsa(dp3942
S'description'
p3943
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3944
sS'cpp_type'
p3945
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3946
sS'default'
p3947
g3
sS'name'
p3948
S'block'
p3949
sS'required'
p3950
I00
sS'group_name'
p3951
Nsa(dp3952
S'description'
p3953
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3954
sS'cpp_type'
p3955
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3956
sS'default'
p3957
g3
sS'name'
p3958
S'boundary'
p3959
sS'required'
p3960
I00
sS'group_name'
p3961
Nsa(dp3962
S'description'
p3963
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p3964
sS'cpp_type'
p3965
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3966
sS'default'
p3967
g3
sS'name'
p3968
S'constant_expressions'
p3969
sS'required'
p3970
I00
sS'group_name'
p3971
Nsa(dp3972
S'description'
p3973
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p3974
sS'cpp_type'
p3975
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3976
sS'default'
p3977
g3
sS'name'
p3978
S'constant_names'
p3979
sS'required'
p3980
I00
sS'group_name'
p3981
Nsa(dp3982
S'description'
p3983
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p3984
sS'cpp_type'
p3985
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p3986
sS'default'
p3987
g3
sS'name'
p3988
S'control_tags'
p3989
sS'required'
p3990
I00
sS'group_name'
p3991
S'Advanced'
p3992
sa(dp3993
S'description'
p3994
S'Disable the function parser algebraic optimizer\n'
p3995
sS'cpp_type'
p3996
S'bool'
p3997
sS'default'
p3998
S'0'
p3999
sS'name'
p4000
S'disable_fpoptimizer'
p4001
sS'required'
p4002
I00
sS'group_name'
p4003
S'Advanced'
p4004
sa(dp4005
S'description'
p4006
S'Set the enabled status of the MooseObject.\n'
p4007
sS'cpp_type'
p4008
S'bool'
p4009
sS'default'
p4010
S'1'
p4011
sS'name'
p4012
S'enable'
p4013
sS'required'
p4014
I00
sS'group_name'
p4015
S'Advanced'
p4016
sa(dp4017
S'description'
p4018
S'Enable cacheing of function derivatives for faster startup time\n'
p4019
sS'cpp_type'
p4020
S'bool'
p4021
sS'default'
p4022
S'1'
p4023
sS'name'
p4024
S'enable_ad_cache'
p4025
sS'required'
p4026
I00
sS'group_name'
p4027
S'Advanced'
p4028
sa(dp4029
S'description'
p4030
S'Enable automatic immediate optimization of derivatives\n'
p4031
sS'cpp_type'
p4032
S'bool'
p4033
sS'default'
p4034
S'1'
p4035
sS'name'
p4036
S'enable_auto_optimize'
p4037
sS'required'
p4038
I00
sS'group_name'
p4039
S'Advanced'
p4040
sa(dp4041
S'description'
p4042
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p4043
sS'cpp_type'
p4044
S'bool'
p4045
sS'default'
p4046
S'1'
p4047
sS'name'
p4048
S'enable_jit'
p4049
sS'required'
p4050
I00
sS'group_name'
p4051
S'Advanced'
p4052
sa(dp4053
S'name'
p4054
S'execute_on'
p4055
sS'cpp_type'
p4056
S'MultiMooseEnum'
p4057
sS'default'
p4058
S'LINEAR'
p4059
sS'description'
p4060
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4061
sS'required'
p4062
I00
sS'options'
p4063
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4064
sS'group_name'
p4065
Nsa(dp4066
S'description'
p4067
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p4068
sS'cpp_type'
p4069
S'bool'
p4070
sS'default'
p4071
S'0'
p4072
sS'name'
p4073
S'fail_on_evalerror'
p4074
sS'required'
p4075
I00
sS'group_name'
p4076
S'Advanced'
p4077
sa(dp4078
S'description'
p4079
S'function expression\n'
p4080
sS'cpp_type'
p4081
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4082
sS'default'
p4083
g3
sS'name'
p4084
S'function'
p4085
sS'required'
p4086
I01
sS'group_name'
p4087
Nsa(dp4088
S'description'
p4089
S'The seed for the master random number generator\n'
p4090
sS'cpp_type'
p4091
S'unsigned int'
p4092
sS'default'
p4093
S'0'
p4094
sS'name'
p4095
S'seed'
p4096
sS'required'
p4097
I00
sS'group_name'
p4098
S'Advanced'
p4099
sa(dp4100
S'description'
p4101
g3
sS'cpp_type'
p4102
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4103
sS'default'
p4104
S'ParsedAux'
p4105
sS'name'
p4106
S'type'
p4107
sS'required'
p4108
I00
sS'group_name'
p4109
Nsa(dp4110
S'description'
p4111
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4112
sS'cpp_type'
p4113
S'bool'
p4114
sS'default'
p4115
S'0'
p4116
sS'name'
p4117
S'use_displaced_mesh'
p4118
sS'required'
p4119
I00
sS'group_name'
p4120
S'Advanced'
p4121
sa(dp4122
S'description'
p4123
S'The name of the variable that this object applies to\n'
p4124
sS'cpp_type'
p4125
S'AuxVariableName'
p4126
sS'default'
p4127
g3
sS'name'
p4128
S'variable'
p4129
sS'required'
p4130
I01
sS'group_name'
p4131
NsasS'name'
p4132
S'/AuxKernels/ParsedAux'
p4133
sa(dp4134
S'description'
p4135
g3
sS'subblocks'
p4136
NsS'parameters'
p4137
(lp4138
(dp4139
S'description'
p4140
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4141
sS'cpp_type'
p4142
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4143
sS'default'
p4144
g3
sS'name'
p4145
S'block'
p4146
sS'required'
p4147
I00
sS'group_name'
p4148
Nsa(dp4149
S'description'
p4150
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4151
sS'cpp_type'
p4152
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4153
sS'default'
p4154
g3
sS'name'
p4155
S'boundary'
p4156
sS'required'
p4157
I00
sS'group_name'
p4158
Nsa(dp4159
S'description'
p4160
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4161
sS'cpp_type'
p4162
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p4163
sS'default'
p4164
g3
sS'name'
p4165
S'control_tags'
p4166
sS'required'
p4167
I00
sS'group_name'
p4168
S'Advanced'
p4169
sa(dp4170
S'description'
p4171
S'Set the enabled status of the MooseObject.\n'
p4172
sS'cpp_type'
p4173
S'bool'
p4174
sS'default'
p4175
S'1'
p4176
sS'name'
p4177
S'enable'
p4178
sS'required'
p4179
I00
sS'group_name'
p4180
S'Advanced'
p4181
sa(dp4182
S'name'
p4183
S'execute_on'
p4184
sS'cpp_type'
p4185
S'MultiMooseEnum'
p4186
sS'default'
p4187
S'LINEAR'
p4188
sS'description'
p4189
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4190
sS'required'
p4191
I00
sS'options'
p4192
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4193
sS'group_name'
p4194
Nsa(dp4195
S'description'
p4196
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p4197
sS'cpp_type'
p4198
S'double'
p4199
sS'default'
p4200
g3
sS'name'
p4201
S'normal_smoothing_distance'
p4202
sS'required'
p4203
I00
sS'group_name'
p4204
Nsa(dp4205
S'description'
p4206
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p4207
sS'cpp_type'
p4208
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4209
sS'default'
p4210
g3
sS'name'
p4211
S'normal_smoothing_method'
p4212
sS'required'
p4213
I00
sS'group_name'
p4214
Nsa(dp4215
S'name'
p4216
S'order'
p4217
sS'cpp_type'
p4218
S'MooseEnum'
p4219
sS'default'
p4220
S'FIRST'
p4221
sS'description'
p4222
S'The finite element order\n'
p4223
sS'required'
p4224
I00
sS'options'
p4225
S'FIRST SECOND THIRD FOURTH'
p4226
sS'group_name'
p4227
Nsa(dp4228
S'description'
p4229
S'The boundary to be penetrated\n'
p4230
sS'cpp_type'
p4231
S'BoundaryName'
p4232
sS'default'
p4233
g3
sS'name'
p4234
S'paired_boundary'
p4235
sS'required'
p4236
I01
sS'group_name'
p4237
Nsa(dp4238
S'name'
p4239
S'quantity'
p4240
sS'cpp_type'
p4241
S'MooseEnum'
p4242
sS'default'
p4243
S'distance'
p4244
sS'description'
p4245
S'The quantity to recover from the available penetration information\n'
p4246
sS'required'
p4247
I00
sS'options'
p4248
S'distance tangential_distance normal_x normal_y normal_z closest_point_x closest_point_y closest_point_z element_id side incremental_slip_magnitude incremental_slip_x incremental_slip_y incremental_slip_z accumulated_slip force_x force_y force_z normal_force_magnitude normal_force_x normal_force_y normal_force_z tangential_force_magnitude tangential_force_x tangential_force_y tangential_force_z frictional_energy lagrange_multiplier mechanical_status'
p4249
sS'group_name'
p4250
Nsa(dp4251
S'description'
p4252
S'The seed for the master random number generator\n'
p4253
sS'cpp_type'
p4254
S'unsigned int'
p4255
sS'default'
p4256
S'0'
p4257
sS'name'
p4258
S'seed'
p4259
sS'required'
p4260
I00
sS'group_name'
p4261
S'Advanced'
p4262
sa(dp4263
S'description'
p4264
S'Tangential distance to extend edges of contact surfaces\n'
p4265
sS'cpp_type'
p4266
S'double'
p4267
sS'default'
p4268
g3
sS'name'
p4269
S'tangential_tolerance'
p4270
sS'required'
p4271
I00
sS'group_name'
p4272
Nsa(dp4273
S'description'
p4274
g3
sS'cpp_type'
p4275
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4276
sS'default'
p4277
S'PenetrationAux'
p4278
sS'name'
p4279
S'type'
p4280
sS'required'
p4281
I00
sS'group_name'
p4282
Nsa(dp4283
S'description'
p4284
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4285
sS'cpp_type'
p4286
S'bool'
p4287
sS'default'
p4288
S'1'
p4289
sS'name'
p4290
S'use_displaced_mesh'
p4291
sS'required'
p4292
I00
sS'group_name'
p4293
S'Advanced'
p4294
sa(dp4295
S'description'
p4296
S'The name of the variable that this object applies to\n'
p4297
sS'cpp_type'
p4298
S'AuxVariableName'
p4299
sS'default'
p4300
g3
sS'name'
p4301
S'variable'
p4302
sS'required'
p4303
I01
sS'group_name'
p4304
NsasS'name'
p4305
S'/AuxKernels/PenetrationAux'
p4306
sa(dp4307
S'description'
p4308
g3
sS'subblocks'
p4309
NsS'parameters'
p4310
(lp4311
(dp4312
S'description'
p4313
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4314
sS'cpp_type'
p4315
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4316
sS'default'
p4317
g3
sS'name'
p4318
S'block'
p4319
sS'required'
p4320
I00
sS'group_name'
p4321
Nsa(dp4322
S'description'
p4323
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4324
sS'cpp_type'
p4325
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4326
sS'default'
p4327
g3
sS'name'
p4328
S'boundary'
p4329
sS'required'
p4330
I00
sS'group_name'
p4331
Nsa(dp4332
S'description'
p4333
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4334
sS'cpp_type'
p4335
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p4336
sS'default'
p4337
g3
sS'name'
p4338
S'control_tags'
p4339
sS'required'
p4340
I00
sS'group_name'
p4341
S'Advanced'
p4342
sa(dp4343
S'description'
p4344
S'Set the enabled status of the MooseObject.\n'
p4345
sS'cpp_type'
p4346
S'bool'
p4347
sS'default'
p4348
S'1'
p4349
sS'name'
p4350
S'enable'
p4351
sS'required'
p4352
I00
sS'group_name'
p4353
S'Advanced'
p4354
sa(dp4355
S'name'
p4356
S'execute_on'
p4357
sS'cpp_type'
p4358
S'MultiMooseEnum'
p4359
sS'default'
p4360
S'LINEAR'
p4361
sS'description'
p4362
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4363
sS'required'
p4364
I00
sS'options'
p4365
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4366
sS'group_name'
p4367
Nsa(dp4368
S'description'
p4369
S'The seed for the master random number generator\n'
p4370
sS'cpp_type'
p4371
S'unsigned int'
p4372
sS'default'
p4373
S'0'
p4374
sS'name'
p4375
S'seed'
p4376
sS'required'
p4377
I00
sS'group_name'
p4378
S'Advanced'
p4379
sa(dp4380
S'description'
p4381
g3
sS'cpp_type'
p4382
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4383
sS'default'
p4384
S'ProcessorIDAux'
p4385
sS'name'
p4386
S'type'
p4387
sS'required'
p4388
I00
sS'group_name'
p4389
Nsa(dp4390
S'description'
p4391
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4392
sS'cpp_type'
p4393
S'bool'
p4394
sS'default'
p4395
S'0'
p4396
sS'name'
p4397
S'use_displaced_mesh'
p4398
sS'required'
p4399
I00
sS'group_name'
p4400
S'Advanced'
p4401
sa(dp4402
S'description'
p4403
S'The name of the variable that this object applies to\n'
p4404
sS'cpp_type'
p4405
S'AuxVariableName'
p4406
sS'default'
p4407
g3
sS'name'
p4408
S'variable'
p4409
sS'required'
p4410
I01
sS'group_name'
p4411
NsasS'name'
p4412
S'/AuxKernels/ProcessorIDAux'
p4413
sa(dp4414
S'description'
p4415
g3
sS'subblocks'
p4416
NsS'parameters'
p4417
(lp4418
(dp4419
S'description'
p4420
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4421
sS'cpp_type'
p4422
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4423
sS'default'
p4424
g3
sS'name'
p4425
S'block'
p4426
sS'required'
p4427
I00
sS'group_name'
p4428
Nsa(dp4429
S'description'
p4430
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4431
sS'cpp_type'
p4432
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4433
sS'default'
p4434
g3
sS'name'
p4435
S'boundary'
p4436
sS'required'
p4437
I00
sS'group_name'
p4438
Nsa(dp4439
S'description'
p4440
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4441
sS'cpp_type'
p4442
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p4443
sS'default'
p4444
g3
sS'name'
p4445
S'control_tags'
p4446
sS'required'
p4447
I00
sS'group_name'
p4448
S'Advanced'
p4449
sa(dp4450
S'description'
p4451
S'The downstairs of the quotient variable\n'
p4452
sS'cpp_type'
p4453
S'std::vector<VariableName>'
p4454
sS'default'
p4455
g3
sS'name'
p4456
S'denominator'
p4457
sS'required'
p4458
I00
sS'group_name'
p4459
Nsa(dp4460
S'description'
p4461
S'Set the enabled status of the MooseObject.\n'
p4462
sS'cpp_type'
p4463
S'bool'
p4464
sS'default'
p4465
S'1'
p4466
sS'name'
p4467
S'enable'
p4468
sS'required'
p4469
I00
sS'group_name'
p4470
S'Advanced'
p4471
sa(dp4472
S'name'
p4473
S'execute_on'
p4474
sS'cpp_type'
p4475
S'MultiMooseEnum'
p4476
sS'default'
p4477
S'LINEAR'
p4478
sS'description'
p4479
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4480
sS'required'
p4481
I00
sS'options'
p4482
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4483
sS'group_name'
p4484
Nsa(dp4485
S'description'
p4486
S'The upstairs of the quotient variable\n'
p4487
sS'cpp_type'
p4488
S'std::vector<VariableName>'
p4489
sS'default'
p4490
g3
sS'name'
p4491
S'numerator'
p4492
sS'required'
p4493
I00
sS'group_name'
p4494
Nsa(dp4495
S'description'
p4496
S'The seed for the master random number generator\n'
p4497
sS'cpp_type'
p4498
S'unsigned int'
p4499
sS'default'
p4500
S'0'
p4501
sS'name'
p4502
S'seed'
p4503
sS'required'
p4504
I00
sS'group_name'
p4505
S'Advanced'
p4506
sa(dp4507
S'description'
p4508
g3
sS'cpp_type'
p4509
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4510
sS'default'
p4511
S'QuotientAux'
p4512
sS'name'
p4513
S'type'
p4514
sS'required'
p4515
I00
sS'group_name'
p4516
Nsa(dp4517
S'description'
p4518
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4519
sS'cpp_type'
p4520
S'bool'
p4521
sS'default'
p4522
S'0'
p4523
sS'name'
p4524
S'use_displaced_mesh'
p4525
sS'required'
p4526
I00
sS'group_name'
p4527
S'Advanced'
p4528
sa(dp4529
S'description'
p4530
S'The name of the variable that this object applies to\n'
p4531
sS'cpp_type'
p4532
S'AuxVariableName'
p4533
sS'default'
p4534
g3
sS'name'
p4535
S'variable'
p4536
sS'required'
p4537
I01
sS'group_name'
p4538
NsasS'name'
p4539
S'/AuxKernels/QuotientAux'
p4540
sa(dp4541
S'description'
p4542
g3
sS'subblocks'
p4543
NsS'parameters'
p4544
(lp4545
(dp4546
S'description'
p4547
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4548
sS'cpp_type'
p4549
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4550
sS'default'
p4551
g3
sS'name'
p4552
S'block'
p4553
sS'required'
p4554
I00
sS'group_name'
p4555
Nsa(dp4556
S'description'
p4557
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4558
sS'cpp_type'
p4559
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4560
sS'default'
p4561
g3
sS'name'
p4562
S'boundary'
p4563
sS'required'
p4564
I00
sS'group_name'
p4565
Nsa(dp4566
S'description'
p4567
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4568
sS'cpp_type'
p4569
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p4570
sS'default'
p4571
g3
sS'name'
p4572
S'control_tags'
p4573
sS'required'
p4574
I00
sS'group_name'
p4575
S'Advanced'
p4576
sa(dp4577
S'description'
p4578
S'Set the enabled status of the MooseObject.\n'
p4579
sS'cpp_type'
p4580
S'bool'
p4581
sS'default'
p4582
S'1'
p4583
sS'name'
p4584
S'enable'
p4585
sS'required'
p4586
I00
sS'group_name'
p4587
S'Advanced'
p4588
sa(dp4589
S'name'
p4590
S'execute_on'
p4591
sS'cpp_type'
p4592
S'MultiMooseEnum'
p4593
sS'default'
p4594
S'LINEAR'
p4595
sS'description'
p4596
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4597
sS'required'
p4598
I00
sS'options'
p4599
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4600
sS'group_name'
p4601
Nsa(dp4602
S'description'
p4603
S'The seed for the master random number generator\n'
p4604
sS'cpp_type'
p4605
S'unsigned int'
p4606
sS'default'
p4607
S'0'
p4608
sS'name'
p4609
S'seed'
p4610
sS'required'
p4611
I00
sS'group_name'
p4612
S'Advanced'
p4613
sa(dp4614
S'description'
p4615
g3
sS'cpp_type'
p4616
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4617
sS'default'
p4618
S'SelfAux'
p4619
sS'name'
p4620
S'type'
p4621
sS'required'
p4622
I00
sS'group_name'
p4623
Nsa(dp4624
S'description'
p4625
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4626
sS'cpp_type'
p4627
S'bool'
p4628
sS'default'
p4629
S'0'
p4630
sS'name'
p4631
S'use_displaced_mesh'
p4632
sS'required'
p4633
I00
sS'group_name'
p4634
S'Advanced'
p4635
sa(dp4636
S'description'
p4637
S'The name of the variable that this object applies to\n'
p4638
sS'cpp_type'
p4639
S'AuxVariableName'
p4640
sS'default'
p4641
g3
sS'name'
p4642
S'variable'
p4643
sS'required'
p4644
I01
sS'group_name'
p4645
NsasS'name'
p4646
S'/AuxKernels/SelfAux'
p4647
sa(dp4648
S'description'
p4649
g3
sS'subblocks'
p4650
NsS'parameters'
p4651
(lp4652
(dp4653
S'description'
p4654
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p4655
sS'cpp_type'
p4656
S'double'
p4657
sS'default'
p4658
S'0'
p4659
sS'name'
p4660
S'add_factor'
p4661
sS'required'
p4662
I00
sS'group_name'
p4663
Nsa(dp4664
S'description'
p4665
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4666
sS'cpp_type'
p4667
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4668
sS'default'
p4669
g3
sS'name'
p4670
S'block'
p4671
sS'required'
p4672
I00
sS'group_name'
p4673
Nsa(dp4674
S'description'
p4675
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4676
sS'cpp_type'
p4677
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4678
sS'default'
p4679
g3
sS'name'
p4680
S'boundary'
p4681
sS'required'
p4682
I00
sS'group_name'
p4683
Nsa(dp4684
S'description'
p4685
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4686
sS'cpp_type'
p4687
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p4688
sS'default'
p4689
g3
sS'name'
p4690
S'control_tags'
p4691
sS'required'
p4692
I00
sS'group_name'
p4693
S'Advanced'
p4694
sa(dp4695
S'description'
p4696
S'If true the meshes must be the same and then the values are simply copied over.\n'
p4697
sS'cpp_type'
p4698
S'bool'
p4699
sS'default'
p4700
S'0'
p4701
sS'name'
p4702
S'direct'
p4703
sS'required'
p4704
I00
sS'group_name'
p4705
Nsa(dp4706
S'description'
p4707
S'Set the enabled status of the MooseObject.\n'
p4708
sS'cpp_type'
p4709
S'bool'
p4710
sS'default'
p4711
S'1'
p4712
sS'name'
p4713
S'enable'
p4714
sS'required'
p4715
I00
sS'group_name'
p4716
S'Advanced'
p4717
sa(dp4718
S'name'
p4719
S'execute_on'
p4720
sS'cpp_type'
p4721
S'MultiMooseEnum'
p4722
sS'default'
p4723
S'LINEAR'
p4724
sS'description'
p4725
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4726
sS'required'
p4727
I00
sS'options'
p4728
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4729
sS'group_name'
p4730
Nsa(dp4731
S'description'
p4732
S'The name of the variable to extract from the file\n'
p4733
sS'cpp_type'
p4734
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4735
sS'default'
p4736
g3
sS'name'
p4737
S'from_variable'
p4738
sS'required'
p4739
I00
sS'group_name'
p4740
Nsa(dp4741
S'description'
p4742
S"Scale factor (a)  to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p4743
sS'cpp_type'
p4744
S'double'
p4745
sS'default'
p4746
S'1'
p4747
sS'name'
p4748
S'scale_factor'
p4749
sS'required'
p4750
I00
sS'group_name'
p4751
Nsa(dp4752
S'description'
p4753
S'The seed for the master random number generator\n'
p4754
sS'cpp_type'
p4755
S'unsigned int'
p4756
sS'default'
p4757
S'0'
p4758
sS'name'
p4759
S'seed'
p4760
sS'required'
p4761
I00
sS'group_name'
p4762
S'Advanced'
p4763
sa(dp4764
S'description'
p4765
S'The name of the SolutionUserObject\n'
p4766
sS'cpp_type'
p4767
S'UserObjectName'
p4768
sS'default'
p4769
g3
sS'name'
p4770
S'solution'
p4771
sS'required'
p4772
I01
sS'group_name'
p4773
Nsa(dp4774
S'description'
p4775
g3
sS'cpp_type'
p4776
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4777
sS'default'
p4778
S'SolutionAux'
p4779
sS'name'
p4780
S'type'
p4781
sS'required'
p4782
I00
sS'group_name'
p4783
Nsa(dp4784
S'description'
p4785
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4786
sS'cpp_type'
p4787
S'bool'
p4788
sS'default'
p4789
S'0'
p4790
sS'name'
p4791
S'use_displaced_mesh'
p4792
sS'required'
p4793
I00
sS'group_name'
p4794
S'Advanced'
p4795
sa(dp4796
S'description'
p4797
S'The name of the variable that this object applies to\n'
p4798
sS'cpp_type'
p4799
S'AuxVariableName'
p4800
sS'default'
p4801
g3
sS'name'
p4802
S'variable'
p4803
sS'required'
p4804
I01
sS'group_name'
p4805
NsasS'name'
p4806
S'/AuxKernels/SolutionAux'
p4807
sa(dp4808
S'description'
p4809
g3
sS'subblocks'
p4810
NsS'parameters'
p4811
(lp4812
(dp4813
S'description'
p4814
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4815
sS'cpp_type'
p4816
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4817
sS'default'
p4818
g3
sS'name'
p4819
S'block'
p4820
sS'required'
p4821
I00
sS'group_name'
p4822
Nsa(dp4823
S'description'
p4824
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4825
sS'cpp_type'
p4826
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4827
sS'default'
p4828
g3
sS'name'
p4829
S'boundary'
p4830
sS'required'
p4831
I00
sS'group_name'
p4832
Nsa(dp4833
S'description'
p4834
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4835
sS'cpp_type'
p4836
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p4837
sS'default'
p4838
g3
sS'name'
p4839
S'control_tags'
p4840
sS'required'
p4841
I00
sS'group_name'
p4842
S'Advanced'
p4843
sa(dp4844
S'description'
p4845
S'Set the enabled status of the MooseObject.\n'
p4846
sS'cpp_type'
p4847
S'bool'
p4848
sS'default'
p4849
S'1'
p4850
sS'name'
p4851
S'enable'
p4852
sS'required'
p4853
I00
sS'group_name'
p4854
S'Advanced'
p4855
sa(dp4856
S'name'
p4857
S'execute_on'
p4858
sS'cpp_type'
p4859
S'MultiMooseEnum'
p4860
sS'default'
p4861
S'LINEAR'
p4862
sS'description'
p4863
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4864
sS'required'
p4865
I00
sS'options'
p4866
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4867
sS'group_name'
p4868
Nsa(dp4869
S'description'
p4870
S'The seed for the master random number generator\n'
p4871
sS'cpp_type'
p4872
S'unsigned int'
p4873
sS'default'
p4874
S'0'
p4875
sS'name'
p4876
S'seed'
p4877
sS'required'
p4878
I00
sS'group_name'
p4879
S'Advanced'
p4880
sa(dp4881
S'description'
p4882
g3
sS'cpp_type'
p4883
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4884
sS'default'
p4885
S'SpatialUserObjectAux'
p4886
sS'name'
p4887
S'type'
p4888
sS'required'
p4889
I00
sS'group_name'
p4890
Nsa(dp4891
S'description'
p4892
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4893
sS'cpp_type'
p4894
S'bool'
p4895
sS'default'
p4896
S'0'
p4897
sS'name'
p4898
S'use_displaced_mesh'
p4899
sS'required'
p4900
I00
sS'group_name'
p4901
S'Advanced'
p4902
sa(dp4903
S'description'
p4904
S'The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n'
p4905
sS'cpp_type'
p4906
S'UserObjectName'
p4907
sS'default'
p4908
g3
sS'name'
p4909
S'user_object'
p4910
sS'required'
p4911
I01
sS'group_name'
p4912
Nsa(dp4913
S'description'
p4914
S'The name of the variable that this object applies to\n'
p4915
sS'cpp_type'
p4916
S'AuxVariableName'
p4917
sS'default'
p4918
g3
sS'name'
p4919
S'variable'
p4920
sS'required'
p4921
I01
sS'group_name'
p4922
NsasS'name'
p4923
S'/AuxKernels/SpatialUserObjectAux'
p4924
sa(dp4925
S'description'
p4926
g3
sS'subblocks'
p4927
NsS'parameters'
p4928
(lp4929
(dp4930
S'description'
p4931
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4932
sS'cpp_type'
p4933
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4934
sS'default'
p4935
g3
sS'name'
p4936
S'block'
p4937
sS'required'
p4938
I00
sS'group_name'
p4939
Nsa(dp4940
S'description'
p4941
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4942
sS'cpp_type'
p4943
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4944
sS'default'
p4945
g3
sS'name'
p4946
S'boundary'
p4947
sS'required'
p4948
I00
sS'group_name'
p4949
Nsa(dp4950
S'name'
p4951
S'component'
p4952
sS'cpp_type'
p4953
S'MooseEnum'
p4954
sS'default'
p4955
g3
sS'description'
p4956
S'The gradient component to compute\n'
p4957
sS'required'
p4958
I00
sS'options'
p4959
S'x y z'
p4960
sS'group_name'
p4961
Nsa(dp4962
S'description'
p4963
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p4964
sS'cpp_type'
p4965
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p4966
sS'default'
p4967
g3
sS'name'
p4968
S'control_tags'
p4969
sS'required'
p4970
I00
sS'group_name'
p4971
S'Advanced'
p4972
sa(dp4973
S'description'
p4974
S'Set the enabled status of the MooseObject.\n'
p4975
sS'cpp_type'
p4976
S'bool'
p4977
sS'default'
p4978
S'1'
p4979
sS'name'
p4980
S'enable'
p4981
sS'required'
p4982
I00
sS'group_name'
p4983
S'Advanced'
p4984
sa(dp4985
S'name'
p4986
S'execute_on'
p4987
sS'cpp_type'
p4988
S'MultiMooseEnum'
p4989
sS'default'
p4990
S'LINEAR'
p4991
sS'description'
p4992
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4993
sS'required'
p4994
I00
sS'options'
p4995
S'none initial linear nonlinear timestep_end timestep_begin custom'
p4996
sS'group_name'
p4997
Nsa(dp4998
S'description'
p4999
S'The variable from which to compute the gradient component\n'
p5000
sS'cpp_type'
p5001
S'std::vector<VariableName>'
p5002
sS'default'
p5003
g3
sS'name'
p5004
S'gradient_variable'
p5005
sS'required'
p5006
I01
sS'group_name'
p5007
Nsa(dp5008
S'description'
p5009
S'The seed for the master random number generator\n'
p5010
sS'cpp_type'
p5011
S'unsigned int'
p5012
sS'default'
p5013
S'0'
p5014
sS'name'
p5015
S'seed'
p5016
sS'required'
p5017
I00
sS'group_name'
p5018
S'Advanced'
p5019
sa(dp5020
S'description'
p5021
g3
sS'cpp_type'
p5022
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5023
sS'default'
p5024
S'VariableGradientComponent'
p5025
sS'name'
p5026
S'type'
p5027
sS'required'
p5028
I00
sS'group_name'
p5029
Nsa(dp5030
S'description'
p5031
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5032
sS'cpp_type'
p5033
S'bool'
p5034
sS'default'
p5035
S'0'
p5036
sS'name'
p5037
S'use_displaced_mesh'
p5038
sS'required'
p5039
I00
sS'group_name'
p5040
S'Advanced'
p5041
sa(dp5042
S'description'
p5043
S'The name of the variable that this object applies to\n'
p5044
sS'cpp_type'
p5045
S'AuxVariableName'
p5046
sS'default'
p5047
g3
sS'name'
p5048
S'variable'
p5049
sS'required'
p5050
I01
sS'group_name'
p5051
NsasS'name'
p5052
S'/AuxKernels/VariableGradientComponent'
p5053
sa(dp5054
S'description'
p5055
g3
sS'subblocks'
p5056
NsS'parameters'
p5057
(lp5058
(dp5059
S'description'
p5060
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5061
sS'cpp_type'
p5062
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p5063
sS'default'
p5064
g3
sS'name'
p5065
S'block'
p5066
sS'required'
p5067
I00
sS'group_name'
p5068
Nsa(dp5069
S'description'
p5070
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5071
sS'cpp_type'
p5072
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p5073
sS'default'
p5074
g3
sS'name'
p5075
S'boundary'
p5076
sS'required'
p5077
I00
sS'group_name'
p5078
Nsa(dp5079
S'description'
p5080
S'A simple coefficient\n'
p5081
sS'cpp_type'
p5082
S'double'
p5083
sS'default'
p5084
S'1'
p5085
sS'name'
p5086
S'coefficient'
p5087
sS'required'
p5088
I00
sS'group_name'
p5089
Nsa(dp5090
S'description'
p5091
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5092
sS'cpp_type'
p5093
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5094
sS'default'
p5095
g3
sS'name'
p5096
S'control_tags'
p5097
sS'required'
p5098
I00
sS'group_name'
p5099
S'Advanced'
p5100
sa(dp5101
S'description'
p5102
S'Set the enabled status of the MooseObject.\n'
p5103
sS'cpp_type'
p5104
S'bool'
p5105
sS'default'
p5106
S'1'
p5107
sS'name'
p5108
S'enable'
p5109
sS'required'
p5110
I00
sS'group_name'
p5111
S'Advanced'
p5112
sa(dp5113
S'name'
p5114
S'execute_on'
p5115
sS'cpp_type'
p5116
S'MultiMooseEnum'
p5117
sS'default'
p5118
S'LINEAR'
p5119
sS'description'
p5120
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5121
sS'required'
p5122
I00
sS'options'
p5123
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5124
sS'group_name'
p5125
Nsa(dp5126
S'description'
p5127
S'The order of global truncation error: midpoint=1, trapazoidal=2, Simpson=3\n'
p5128
sS'cpp_type'
p5129
S'unsigned int'
p5130
sS'default'
p5131
S'2'
p5132
sS'name'
p5133
S'order'
p5134
sS'required'
p5135
I00
sS'group_name'
p5136
Nsa(dp5137
S'description'
p5138
S'The seed for the master random number generator\n'
p5139
sS'cpp_type'
p5140
S'unsigned int'
p5141
sS'default'
p5142
S'0'
p5143
sS'name'
p5144
S'seed'
p5145
sS'required'
p5146
I00
sS'group_name'
p5147
S'Advanced'
p5148
sa(dp5149
S'description'
p5150
g3
sS'cpp_type'
p5151
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5152
sS'default'
p5153
S'VariableTimeIntegrationAux'
p5154
sS'name'
p5155
S'type'
p5156
sS'required'
p5157
I00
sS'group_name'
p5158
Nsa(dp5159
S'description'
p5160
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5161
sS'cpp_type'
p5162
S'bool'
p5163
sS'default'
p5164
S'0'
p5165
sS'name'
p5166
S'use_displaced_mesh'
p5167
sS'required'
p5168
I00
sS'group_name'
p5169
S'Advanced'
p5170
sa(dp5171
S'description'
p5172
S'The name of the variable that this object applies to\n'
p5173
sS'cpp_type'
p5174
S'AuxVariableName'
p5175
sS'default'
p5176
g3
sS'name'
p5177
S'variable'
p5178
sS'required'
p5179
I01
sS'group_name'
p5180
Nsa(dp5181
S'description'
p5182
S'The variable to be integrated\n'
p5183
sS'cpp_type'
p5184
S'std::vector<VariableName>'
p5185
sS'default'
p5186
g3
sS'name'
p5187
S'variable_to_integrate'
p5188
sS'required'
p5189
I01
sS'group_name'
p5190
NsasS'name'
p5191
S'/AuxKernels/VariableTimeIntegrationAux'
p5192
sa(dp5193
S'description'
p5194
g3
sS'subblocks'
p5195
NsS'parameters'
p5196
(lp5197
(dp5198
S'description'
p5199
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5200
sS'cpp_type'
p5201
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p5202
sS'default'
p5203
g3
sS'name'
p5204
S'block'
p5205
sS'required'
p5206
I00
sS'group_name'
p5207
Nsa(dp5208
S'description'
p5209
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5210
sS'cpp_type'
p5211
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p5212
sS'default'
p5213
g3
sS'name'
p5214
S'boundary'
p5215
sS'required'
p5216
I00
sS'group_name'
p5217
Nsa(dp5218
S'description'
p5219
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5220
sS'cpp_type'
p5221
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5222
sS'default'
p5223
g3
sS'name'
p5224
S'control_tags'
p5225
sS'required'
p5226
I00
sS'group_name'
p5227
S'Advanced'
p5228
sa(dp5229
S'description'
p5230
S'Set the enabled status of the MooseObject.\n'
p5231
sS'cpp_type'
p5232
S'bool'
p5233
sS'default'
p5234
S'1'
p5235
sS'name'
p5236
S'enable'
p5237
sS'required'
p5238
I00
sS'group_name'
p5239
S'Advanced'
p5240
sa(dp5241
S'name'
p5242
S'execute_on'
p5243
sS'cpp_type'
p5244
S'MultiMooseEnum'
p5245
sS'default'
p5246
S'LINEAR'
p5247
sS'description'
p5248
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5249
sS'required'
p5250
I00
sS'options'
p5251
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5252
sS'group_name'
p5253
Nsa(dp5254
S'description'
p5255
S'The seed for the master random number generator\n'
p5256
sS'cpp_type'
p5257
S'unsigned int'
p5258
sS'default'
p5259
S'0'
p5260
sS'name'
p5261
S'seed'
p5262
sS'required'
p5263
I00
sS'group_name'
p5264
S'Advanced'
p5265
sa(dp5266
S'description'
p5267
g3
sS'cpp_type'
p5268
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5269
sS'default'
p5270
S'VectorMagnitudeAux'
p5271
sS'name'
p5272
S'type'
p5273
sS'required'
p5274
I00
sS'group_name'
p5275
Nsa(dp5276
S'description'
p5277
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5278
sS'cpp_type'
p5279
S'bool'
p5280
sS'default'
p5281
S'0'
p5282
sS'name'
p5283
S'use_displaced_mesh'
p5284
sS'required'
p5285
I00
sS'group_name'
p5286
S'Advanced'
p5287
sa(dp5288
S'description'
p5289
S'The name of the variable that this object applies to\n'
p5290
sS'cpp_type'
p5291
S'AuxVariableName'
p5292
sS'default'
p5293
g3
sS'name'
p5294
S'variable'
p5295
sS'required'
p5296
I01
sS'group_name'
p5297
Nsa(dp5298
S'description'
p5299
S'x-component of the vector\n'
p5300
sS'cpp_type'
p5301
S'std::vector<VariableName>'
p5302
sS'default'
p5303
g3
sS'name'
p5304
S'x'
p5305
sS'required'
p5306
I01
sS'group_name'
p5307
Nsa(dp5308
S'description'
p5309
S'y-component of the vector\n'
p5310
sS'cpp_type'
p5311
S'std::vector<VariableName>'
p5312
sS'default'
p5313
g3
sS'name'
p5314
S'y'
p5315
sS'required'
p5316
I00
sS'group_name'
p5317
Nsa(dp5318
S'description'
p5319
S'z-component of the vector\n'
p5320
sS'cpp_type'
p5321
S'std::vector<VariableName>'
p5322
sS'default'
p5323
g3
sS'name'
p5324
S'z'
p5325
sS'required'
p5326
I00
sS'group_name'
p5327
NsasS'name'
p5328
S'/AuxKernels/VectorMagnitudeAux'
p5329
sasS'parameters'
p5330
NsS'name'
p5331
S'/AuxKernels'
p5332
sa(dp5333
S'description'
p5334
g3
sS'subblocks'
p5335
(lp5336
(dp5337
S'description'
p5338
g3
sS'subblocks'
p5339
NsS'parameters'
p5340
(lp5341
(dp5342
S'description'
p5343
S'A string representing the Moose Object that will be built by this Action\n'
p5344
sS'cpp_type'
p5345
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5346
sS'default'
p5347
g3
sS'name'
p5348
S'type'
p5349
sS'required'
p5350
I01
sS'group_name'
p5351
NsasS'name'
p5352
S'/AuxScalarKernels/*'
p5353
sa(dp5354
S'description'
p5355
g3
sS'subblocks'
p5356
NsS'parameters'
p5357
(lp5358
(dp5359
S'description'
p5360
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5361
sS'cpp_type'
p5362
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5363
sS'default'
p5364
g3
sS'name'
p5365
S'control_tags'
p5366
sS'required'
p5367
I00
sS'group_name'
p5368
S'Advanced'
p5369
sa(dp5370
S'description'
p5371
S'Set the enabled status of the MooseObject.\n'
p5372
sS'cpp_type'
p5373
S'bool'
p5374
sS'default'
p5375
S'1'
p5376
sS'name'
p5377
S'enable'
p5378
sS'required'
p5379
I00
sS'group_name'
p5380
S'Advanced'
p5381
sa(dp5382
S'name'
p5383
S'execute_on'
p5384
sS'cpp_type'
p5385
S'MultiMooseEnum'
p5386
sS'default'
p5387
S'LINEAR'
p5388
sS'description'
p5389
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5390
sS'required'
p5391
I00
sS'options'
p5392
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5393
sS'group_name'
p5394
Nsa(dp5395
S'description'
p5396
g3
sS'cpp_type'
p5397
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5398
sS'default'
p5399
S'ConstantScalarAux'
p5400
sS'name'
p5401
S'type'
p5402
sS'required'
p5403
I00
sS'group_name'
p5404
Nsa(dp5405
S'description'
p5406
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5407
sS'cpp_type'
p5408
S'bool'
p5409
sS'default'
p5410
S'0'
p5411
sS'name'
p5412
S'use_displaced_mesh'
p5413
sS'required'
p5414
I00
sS'group_name'
p5415
S'Advanced'
p5416
sa(dp5417
S'description'
p5418
S'The value to be set to the scalar variable.\n'
p5419
sS'cpp_type'
p5420
S'double'
p5421
sS'default'
p5422
g3
sS'name'
p5423
S'value'
p5424
sS'required'
p5425
I01
sS'group_name'
p5426
Nsa(dp5427
S'description'
p5428
S'The name of the variable that this kernel operates on\n'
p5429
sS'cpp_type'
p5430
S'AuxVariableName'
p5431
sS'default'
p5432
g3
sS'name'
p5433
S'variable'
p5434
sS'required'
p5435
I01
sS'group_name'
p5436
NsasS'name'
p5437
S'/AuxScalarKernels/ConstantScalarAux'
p5438
sa(dp5439
S'description'
p5440
g3
sS'subblocks'
p5441
NsS'parameters'
p5442
(lp5443
(dp5444
S'description'
p5445
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5446
sS'cpp_type'
p5447
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5448
sS'default'
p5449
g3
sS'name'
p5450
S'control_tags'
p5451
sS'required'
p5452
I00
sS'group_name'
p5453
S'Advanced'
p5454
sa(dp5455
S'description'
p5456
S'Set the enabled status of the MooseObject.\n'
p5457
sS'cpp_type'
p5458
S'bool'
p5459
sS'default'
p5460
S'1'
p5461
sS'name'
p5462
S'enable'
p5463
sS'required'
p5464
I00
sS'group_name'
p5465
S'Advanced'
p5466
sa(dp5467
S'name'
p5468
S'execute_on'
p5469
sS'cpp_type'
p5470
S'MultiMooseEnum'
p5471
sS'default'
p5472
S'LINEAR'
p5473
sS'description'
p5474
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5475
sS'required'
p5476
I00
sS'options'
p5477
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5478
sS'group_name'
p5479
Nsa(dp5480
S'description'
p5481
S'The functions to set the scalar variable components.\n'
p5482
sS'cpp_type'
p5483
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p5484
sS'default'
p5485
g3
sS'name'
p5486
S'function'
p5487
sS'required'
p5488
I01
sS'group_name'
p5489
Nsa(dp5490
S'description'
p5491
g3
sS'cpp_type'
p5492
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5493
sS'default'
p5494
S'FunctionScalarAux'
p5495
sS'name'
p5496
S'type'
p5497
sS'required'
p5498
I00
sS'group_name'
p5499
Nsa(dp5500
S'description'
p5501
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5502
sS'cpp_type'
p5503
S'bool'
p5504
sS'default'
p5505
S'0'
p5506
sS'name'
p5507
S'use_displaced_mesh'
p5508
sS'required'
p5509
I00
sS'group_name'
p5510
S'Advanced'
p5511
sa(dp5512
S'description'
p5513
S'The name of the variable that this kernel operates on\n'
p5514
sS'cpp_type'
p5515
S'AuxVariableName'
p5516
sS'default'
p5517
g3
sS'name'
p5518
S'variable'
p5519
sS'required'
p5520
I01
sS'group_name'
p5521
NsasS'name'
p5522
S'/AuxScalarKernels/FunctionScalarAux'
p5523
sa(dp5524
S'description'
p5525
g3
sS'subblocks'
p5526
NsS'parameters'
p5527
(lp5528
(dp5529
S'description'
p5530
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5531
sS'cpp_type'
p5532
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5533
sS'default'
p5534
g3
sS'name'
p5535
S'control_tags'
p5536
sS'required'
p5537
I00
sS'group_name'
p5538
S'Advanced'
p5539
sa(dp5540
S'description'
p5541
S'The downstairs of the quotient variable\n'
p5542
sS'cpp_type'
p5543
S'std::vector<VariableName>'
p5544
sS'default'
p5545
g3
sS'name'
p5546
S'denominator'
p5547
sS'required'
p5548
I00
sS'group_name'
p5549
Nsa(dp5550
S'description'
p5551
S'Set the enabled status of the MooseObject.\n'
p5552
sS'cpp_type'
p5553
S'bool'
p5554
sS'default'
p5555
S'1'
p5556
sS'name'
p5557
S'enable'
p5558
sS'required'
p5559
I00
sS'group_name'
p5560
S'Advanced'
p5561
sa(dp5562
S'name'
p5563
S'execute_on'
p5564
sS'cpp_type'
p5565
S'MultiMooseEnum'
p5566
sS'default'
p5567
S'LINEAR'
p5568
sS'description'
p5569
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p5570
sS'required'
p5571
I00
sS'options'
p5572
S'none initial linear nonlinear timestep_end timestep_begin custom'
p5573
sS'group_name'
p5574
Nsa(dp5575
S'description'
p5576
S'The upstairs of the quotient variable\n'
p5577
sS'cpp_type'
p5578
S'std::vector<VariableName>'
p5579
sS'default'
p5580
g3
sS'name'
p5581
S'numerator'
p5582
sS'required'
p5583
I00
sS'group_name'
p5584
Nsa(dp5585
S'description'
p5586
g3
sS'cpp_type'
p5587
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5588
sS'default'
p5589
S'QuotientScalarAux'
p5590
sS'name'
p5591
S'type'
p5592
sS'required'
p5593
I00
sS'group_name'
p5594
Nsa(dp5595
S'description'
p5596
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p5597
sS'cpp_type'
p5598
S'bool'
p5599
sS'default'
p5600
S'0'
p5601
sS'name'
p5602
S'use_displaced_mesh'
p5603
sS'required'
p5604
I00
sS'group_name'
p5605
S'Advanced'
p5606
sa(dp5607
S'description'
p5608
S'The name of the variable that this kernel operates on\n'
p5609
sS'cpp_type'
p5610
S'AuxVariableName'
p5611
sS'default'
p5612
g3
sS'name'
p5613
S'variable'
p5614
sS'required'
p5615
I01
sS'group_name'
p5616
NsasS'name'
p5617
S'/AuxScalarKernels/QuotientScalarAux'
p5618
sasS'parameters'
p5619
NsS'name'
p5620
S'/AuxScalarKernels'
p5621
sa(dp5622
S'description'
p5623
g3
sS'subblocks'
p5624
(lp5625
(dp5626
S'description'
p5627
g3
sS'subblocks'
p5628
(lp5629
(dp5630
S'description'
p5631
g3
sS'subblocks'
p5632
(lp5633
(dp5634
S'description'
p5635
g3
sS'subblocks'
p5636
(lp5637
(dp5638
S'description'
p5639
g3
sS'subblocks'
p5640
NsS'parameters'
p5641
(lp5642
(dp5643
S'description'
p5644
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5645
sS'cpp_type'
p5646
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p5647
sS'default'
p5648
g3
sS'name'
p5649
S'block'
p5650
sS'required'
p5651
I00
sS'group_name'
p5652
Nsa(dp5653
S'description'
p5654
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5655
sS'cpp_type'
p5656
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p5657
sS'default'
p5658
g3
sS'name'
p5659
S'boundary'
p5660
sS'required'
p5661
I00
sS'group_name'
p5662
Nsa(dp5663
S'description'
p5664
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5665
sS'cpp_type'
p5666
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5667
sS'default'
p5668
g3
sS'name'
p5669
S'control_tags'
p5670
sS'required'
p5671
I00
sS'group_name'
p5672
S'Advanced'
p5673
sa(dp5674
S'description'
p5675
S'Set the enabled status of the MooseObject.\n'
p5676
sS'cpp_type'
p5677
S'bool'
p5678
sS'default'
p5679
S'1'
p5680
sS'name'
p5681
S'enable'
p5682
sS'required'
p5683
I00
sS'group_name'
p5684
S'Advanced'
p5685
sa(dp5686
S'description'
p5687
S'The value of the variable inside the box\n'
p5688
sS'cpp_type'
p5689
S'double'
p5690
sS'default'
p5691
S'0'
p5692
sS'name'
p5693
S'inside'
p5694
sS'required'
p5695
I00
sS'group_name'
p5696
Nsa(dp5697
S'description'
p5698
S'The value of the variable outside the box\n'
p5699
sS'cpp_type'
p5700
S'double'
p5701
sS'default'
p5702
S'0'
p5703
sS'name'
p5704
S'outside'
p5705
sS'required'
p5706
I00
sS'group_name'
p5707
Nsa(dp5708
S'description'
p5709
g3
sS'cpp_type'
p5710
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5711
sS'default'
p5712
S'BoundingBoxIC'
p5713
sS'name'
p5714
S'type'
p5715
sS'required'
p5716
I00
sS'group_name'
p5717
Nsa(dp5718
S'description'
p5719
S'The variable this initial condition is supposed to provide values for.\n'
p5720
sS'cpp_type'
p5721
S'VariableName'
p5722
sS'default'
p5723
g3
sS'name'
p5724
S'variable'
p5725
sS'required'
p5726
I01
sS'group_name'
p5727
Nsa(dp5728
S'description'
p5729
S'The x coordinate of the lower left-hand corner of the box\n'
p5730
sS'cpp_type'
p5731
S'double'
p5732
sS'default'
p5733
g3
sS'name'
p5734
S'x1'
p5735
sS'required'
p5736
I01
sS'group_name'
p5737
Nsa(dp5738
S'description'
p5739
S'The x coordinate of the upper right-hand corner of the box\n'
p5740
sS'cpp_type'
p5741
S'double'
p5742
sS'default'
p5743
g3
sS'name'
p5744
S'x2'
p5745
sS'required'
p5746
I01
sS'group_name'
p5747
Nsa(dp5748
S'description'
p5749
S'The y coordinate of the lower left-hand corner of the box\n'
p5750
sS'cpp_type'
p5751
S'double'
p5752
sS'default'
p5753
g3
sS'name'
p5754
S'y1'
p5755
sS'required'
p5756
I01
sS'group_name'
p5757
Nsa(dp5758
S'description'
p5759
S'The y coordinate of the upper right-hand corner of the box\n'
p5760
sS'cpp_type'
p5761
S'double'
p5762
sS'default'
p5763
g3
sS'name'
p5764
S'y2'
p5765
sS'required'
p5766
I01
sS'group_name'
p5767
Nsa(dp5768
S'description'
p5769
S'The z coordinate of the lower left-hand corner of the box\n'
p5770
sS'cpp_type'
p5771
S'double'
p5772
sS'default'
p5773
S'0'
p5774
sS'name'
p5775
S'z1'
p5776
sS'required'
p5777
I00
sS'group_name'
p5778
Nsa(dp5779
S'description'
p5780
S'The z coordinate of the upper right-hand corner of the box\n'
p5781
sS'cpp_type'
p5782
S'double'
p5783
sS'default'
p5784
S'0'
p5785
sS'name'
p5786
S'z2'
p5787
sS'required'
p5788
I00
sS'group_name'
p5789
NsasS'name'
p5790
S'/AuxVariables/*/InitialCondition/<type>/BoundingBoxIC'
p5791
sa(dp5792
S'description'
p5793
g3
sS'subblocks'
p5794
NsS'parameters'
p5795
(lp5796
(dp5797
S'description'
p5798
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5799
sS'cpp_type'
p5800
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p5801
sS'default'
p5802
g3
sS'name'
p5803
S'block'
p5804
sS'required'
p5805
I00
sS'group_name'
p5806
Nsa(dp5807
S'description'
p5808
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5809
sS'cpp_type'
p5810
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p5811
sS'default'
p5812
g3
sS'name'
p5813
S'boundary'
p5814
sS'required'
p5815
I00
sS'group_name'
p5816
Nsa(dp5817
S'description'
p5818
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5819
sS'cpp_type'
p5820
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5821
sS'default'
p5822
g3
sS'name'
p5823
S'control_tags'
p5824
sS'required'
p5825
I00
sS'group_name'
p5826
S'Advanced'
p5827
sa(dp5828
S'description'
p5829
S'Set the enabled status of the MooseObject.\n'
p5830
sS'cpp_type'
p5831
S'bool'
p5832
sS'default'
p5833
S'1'
p5834
sS'name'
p5835
S'enable'
p5836
sS'required'
p5837
I00
sS'group_name'
p5838
S'Advanced'
p5839
sa(dp5840
S'description'
p5841
g3
sS'cpp_type'
p5842
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5843
sS'default'
p5844
S'ConstantIC'
p5845
sS'name'
p5846
S'type'
p5847
sS'required'
p5848
I00
sS'group_name'
p5849
Nsa(dp5850
S'description'
p5851
S'The value to be set in IC\n'
p5852
sS'cpp_type'
p5853
S'double'
p5854
sS'default'
p5855
g3
sS'name'
p5856
S'value'
p5857
sS'required'
p5858
I01
sS'group_name'
p5859
Nsa(dp5860
S'description'
p5861
S'The variable this initial condition is supposed to provide values for.\n'
p5862
sS'cpp_type'
p5863
S'VariableName'
p5864
sS'default'
p5865
g3
sS'name'
p5866
S'variable'
p5867
sS'required'
p5868
I01
sS'group_name'
p5869
NsasS'name'
p5870
S'/AuxVariables/*/InitialCondition/<type>/ConstantIC'
p5871
sa(dp5872
S'description'
p5873
g3
sS'subblocks'
p5874
NsS'parameters'
p5875
(lp5876
(dp5877
S'description'
p5878
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5879
sS'cpp_type'
p5880
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p5881
sS'default'
p5882
g3
sS'name'
p5883
S'block'
p5884
sS'required'
p5885
I00
sS'group_name'
p5886
Nsa(dp5887
S'description'
p5888
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5889
sS'cpp_type'
p5890
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p5891
sS'default'
p5892
g3
sS'name'
p5893
S'boundary'
p5894
sS'required'
p5895
I00
sS'group_name'
p5896
Nsa(dp5897
S'description'
p5898
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5899
sS'cpp_type'
p5900
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5901
sS'default'
p5902
g3
sS'name'
p5903
S'control_tags'
p5904
sS'required'
p5905
I00
sS'group_name'
p5906
S'Advanced'
p5907
sa(dp5908
S'description'
p5909
S'Set the enabled status of the MooseObject.\n'
p5910
sS'cpp_type'
p5911
S'bool'
p5912
sS'default'
p5913
S'1'
p5914
sS'name'
p5915
S'enable'
p5916
sS'required'
p5917
I00
sS'group_name'
p5918
S'Advanced'
p5919
sa(dp5920
S'description'
p5921
S'The initial condition function.\n'
p5922
sS'cpp_type'
p5923
S'FunctionName'
p5924
sS'default'
p5925
g3
sS'name'
p5926
S'function'
p5927
sS'required'
p5928
I01
sS'group_name'
p5929
Nsa(dp5930
S'description'
p5931
g3
sS'cpp_type'
p5932
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5933
sS'default'
p5934
S'FunctionIC'
p5935
sS'name'
p5936
S'type'
p5937
sS'required'
p5938
I00
sS'group_name'
p5939
Nsa(dp5940
S'description'
p5941
S'The variable this initial condition is supposed to provide values for.\n'
p5942
sS'cpp_type'
p5943
S'VariableName'
p5944
sS'default'
p5945
g3
sS'name'
p5946
S'variable'
p5947
sS'required'
p5948
I01
sS'group_name'
p5949
NsasS'name'
p5950
S'/AuxVariables/*/InitialCondition/<type>/FunctionIC'
p5951
sa(dp5952
S'description'
p5953
g3
sS'subblocks'
p5954
NsS'parameters'
p5955
(lp5956
(dp5957
S'description'
p5958
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p5959
sS'cpp_type'
p5960
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p5961
sS'default'
p5962
g3
sS'name'
p5963
S'control_tags'
p5964
sS'required'
p5965
I00
sS'group_name'
p5966
S'Advanced'
p5967
sa(dp5968
S'description'
p5969
S'Set the enabled status of the MooseObject.\n'
p5970
sS'cpp_type'
p5971
S'bool'
p5972
sS'default'
p5973
S'1'
p5974
sS'name'
p5975
S'enable'
p5976
sS'required'
p5977
I00
sS'group_name'
p5978
S'Advanced'
p5979
sa(dp5980
S'description'
p5981
S'The initial condition function.\n'
p5982
sS'cpp_type'
p5983
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p5984
sS'default'
p5985
g3
sS'name'
p5986
S'function'
p5987
sS'required'
p5988
I01
sS'group_name'
p5989
Nsa(dp5990
S'description'
p5991
g3
sS'cpp_type'
p5992
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5993
sS'default'
p5994
S'FunctionScalarIC'
p5995
sS'name'
p5996
S'type'
p5997
sS'required'
p5998
I00
sS'group_name'
p5999
Nsa(dp6000
S'description'
p6001
S'The variable this initial condition is supposed to provide values for.\n'
p6002
sS'cpp_type'
p6003
S'VariableName'
p6004
sS'default'
p6005
g3
sS'name'
p6006
S'variable'
p6007
sS'required'
p6008
I00
sS'group_name'
p6009
NsasS'name'
p6010
S'/AuxVariables/*/InitialCondition/<type>/FunctionScalarIC'
p6011
sa(dp6012
S'description'
p6013
g3
sS'subblocks'
p6014
NsS'parameters'
p6015
(lp6016
(dp6017
S'description'
p6018
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6019
sS'cpp_type'
p6020
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p6021
sS'default'
p6022
g3
sS'name'
p6023
S'block'
p6024
sS'required'
p6025
I00
sS'group_name'
p6026
Nsa(dp6027
S'description'
p6028
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6029
sS'cpp_type'
p6030
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6031
sS'default'
p6032
g3
sS'name'
p6033
S'boundary'
p6034
sS'required'
p6035
I00
sS'group_name'
p6036
Nsa(dp6037
S'description'
p6038
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6039
sS'cpp_type'
p6040
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6041
sS'default'
p6042
g3
sS'name'
p6043
S'control_tags'
p6044
sS'required'
p6045
I00
sS'group_name'
p6046
S'Advanced'
p6047
sa(dp6048
S'description'
p6049
S'Set the enabled status of the MooseObject.\n'
p6050
sS'cpp_type'
p6051
S'bool'
p6052
sS'default'
p6053
S'1'
p6054
sS'name'
p6055
S'enable'
p6056
sS'required'
p6057
I00
sS'group_name'
p6058
S'Advanced'
p6059
sa(dp6060
S'description'
p6061
S'Upper bound of the randomly generated values\n'
p6062
sS'cpp_type'
p6063
S'double'
p6064
sS'default'
p6065
S'1'
p6066
sS'name'
p6067
S'max'
p6068
sS'required'
p6069
I00
sS'group_name'
p6070
Nsa(dp6071
S'description'
p6072
S'Lower bound of the randomly generated values\n'
p6073
sS'cpp_type'
p6074
S'double'
p6075
sS'default'
p6076
S'0'
p6077
sS'name'
p6078
S'min'
p6079
sS'required'
p6080
I00
sS'group_name'
p6081
Nsa(dp6082
S'description'
p6083
S'Seed value for the random number generator\n'
p6084
sS'cpp_type'
p6085
S'unsigned int'
p6086
sS'default'
p6087
S'0'
p6088
sS'name'
p6089
S'seed'
p6090
sS'required'
p6091
I00
sS'group_name'
p6092
Nsa(dp6093
S'description'
p6094
g3
sS'cpp_type'
p6095
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6096
sS'default'
p6097
S'RandomIC'
p6098
sS'name'
p6099
S'type'
p6100
sS'required'
p6101
I00
sS'group_name'
p6102
Nsa(dp6103
S'description'
p6104
S'The variable this initial condition is supposed to provide values for.\n'
p6105
sS'cpp_type'
p6106
S'VariableName'
p6107
sS'default'
p6108
g3
sS'name'
p6109
S'variable'
p6110
sS'required'
p6111
I01
sS'group_name'
p6112
NsasS'name'
p6113
S'/AuxVariables/*/InitialCondition/<type>/RandomIC'
p6114
sa(dp6115
S'description'
p6116
g3
sS'subblocks'
p6117
NsS'parameters'
p6118
(lp6119
(dp6120
S'description'
p6121
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6122
sS'cpp_type'
p6123
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6124
sS'default'
p6125
g3
sS'name'
p6126
S'control_tags'
p6127
sS'required'
p6128
I00
sS'group_name'
p6129
S'Advanced'
p6130
sa(dp6131
S'description'
p6132
S'Set the enabled status of the MooseObject.\n'
p6133
sS'cpp_type'
p6134
S'bool'
p6135
sS'default'
p6136
S'1'
p6137
sS'name'
p6138
S'enable'
p6139
sS'required'
p6140
I00
sS'group_name'
p6141
S'Advanced'
p6142
sa(dp6143
S'description'
p6144
g3
sS'cpp_type'
p6145
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6146
sS'default'
p6147
S'ScalarComponentIC'
p6148
sS'name'
p6149
S'type'
p6150
sS'required'
p6151
I00
sS'group_name'
p6152
Nsa(dp6153
S'description'
p6154
S'Initial values to initialize the scalar variable.\n'
p6155
sS'cpp_type'
p6156
S'std::__1::vector<double, std::__1::allocator<double> >'
p6157
sS'default'
p6158
g3
sS'name'
p6159
S'values'
p6160
sS'required'
p6161
I01
sS'group_name'
p6162
Nsa(dp6163
S'description'
p6164
S'The variable this initial condition is supposed to provide values for.\n'
p6165
sS'cpp_type'
p6166
S'VariableName'
p6167
sS'default'
p6168
g3
sS'name'
p6169
S'variable'
p6170
sS'required'
p6171
I00
sS'group_name'
p6172
NsasS'name'
p6173
S'/AuxVariables/*/InitialCondition/<type>/ScalarComponentIC'
p6174
sa(dp6175
S'description'
p6176
g3
sS'subblocks'
p6177
NsS'parameters'
p6178
(lp6179
(dp6180
S'description'
p6181
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6182
sS'cpp_type'
p6183
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6184
sS'default'
p6185
g3
sS'name'
p6186
S'control_tags'
p6187
sS'required'
p6188
I00
sS'group_name'
p6189
S'Advanced'
p6190
sa(dp6191
S'description'
p6192
S'Set the enabled status of the MooseObject.\n'
p6193
sS'cpp_type'
p6194
S'bool'
p6195
sS'default'
p6196
S'1'
p6197
sS'name'
p6198
S'enable'
p6199
sS'required'
p6200
I00
sS'group_name'
p6201
S'Advanced'
p6202
sa(dp6203
S'description'
p6204
g3
sS'cpp_type'
p6205
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6206
sS'default'
p6207
S'ScalarConstantIC'
p6208
sS'name'
p6209
S'type'
p6210
sS'required'
p6211
I00
sS'group_name'
p6212
Nsa(dp6213
S'description'
p6214
g3
sS'cpp_type'
p6215
S'double'
p6216
sS'default'
p6217
S'0'
p6218
sS'name'
p6219
S'value'
p6220
sS'required'
p6221
I00
sS'group_name'
p6222
Nsa(dp6223
S'description'
p6224
S'The variable this initial condition is supposed to provide values for.\n'
p6225
sS'cpp_type'
p6226
S'VariableName'
p6227
sS'default'
p6228
g3
sS'name'
p6229
S'variable'
p6230
sS'required'
p6231
I00
sS'group_name'
p6232
NsasS'name'
p6233
S'/AuxVariables/*/InitialCondition/<type>/ScalarConstantIC'
p6234
sasS'parameters'
p6235
NsS'name'
p6236
S'/AuxVariables/*/InitialCondition/<type>'
p6237
sasS'parameters'
p6238
(lp6239
(dp6240
S'description'
p6241
S'A string representing the Moose Object that will be built by this Action\n'
p6242
sS'cpp_type'
p6243
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6244
sS'default'
p6245
g3
sS'name'
p6246
S'type'
p6247
sS'required'
p6248
I01
sS'group_name'
p6249
NsasS'name'
p6250
S'/AuxVariables/*/InitialCondition'
p6251
sasS'parameters'
p6252
(lp6253
(dp6254
S'description'
p6255
S'The block id where this variable lives\n'
p6256
sS'cpp_type'
p6257
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p6258
sS'default'
p6259
g3
sS'name'
p6260
S'block'
p6261
sS'required'
p6262
I00
sS'group_name'
p6263
Nsa(dp6264
S'name'
p6265
S'family'
p6266
sS'cpp_type'
p6267
S'MooseEnum'
p6268
sS'default'
p6269
S'LAGRANGE'
p6270
sS'description'
p6271
S'Specifies the family of FE shape functions to use for this variable\n'
p6272
sS'required'
p6273
I00
sS'options'
p6274
S'LAGRANGE MONOMIAL SCALAR'
p6275
sS'group_name'
p6276
Nsa(dp6277
S'description'
p6278
S'Specifies the initial condition for this variable\n'
p6279
sS'cpp_type'
p6280
S'double'
p6281
sS'default'
p6282
g3
sS'name'
p6283
S'initial_condition'
p6284
sS'required'
p6285
I00
sS'group_name'
p6286
Nsa(dp6287
S'name'
p6288
S'order'
p6289
sS'cpp_type'
p6290
S'MooseEnum'
p6291
sS'default'
p6292
S'FIRST'
p6293
sS'description'
p6294
S'Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n'
p6295
sS'required'
p6296
I00
sS'options'
p6297
S'CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH'
p6298
sS'group_name'
p6299
Nsa(dp6300
S'description'
p6301
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p6302
sS'cpp_type'
p6303
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p6304
sS'default'
p6305
g3
sS'name'
p6306
S'outputs'
p6307
sS'required'
p6308
I00
sS'group_name'
p6309
S'Advanced'
p6310
sa(dp6311
S'description'
p6312
S'Gives the timestep (or "LATEST") for which to read a solution from a file for a given variable. (Default: LATEST)\n'
p6313
sS'cpp_type'
p6314
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6315
sS'default'
p6316
S'LATEST'
p6317
sS'name'
p6318
S'initial_from_file_timestep'
p6319
sS'required'
p6320
I00
sS'group_name'
p6321
S'Initial From File'
p6322
sa(dp6323
S'description'
p6324
S'Gives the name of a variable for which to read an initial condition from a mesh file\n'
p6325
sS'cpp_type'
p6326
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6327
sS'default'
p6328
g3
sS'name'
p6329
S'initial_from_file_var'
p6330
sS'required'
p6331
I00
sS'group_name'
p6332
S'Initial From File'
p6333
sasS'name'
p6334
S'/AuxVariables/*'
p6335
sasS'parameters'
p6336
NsS'name'
p6337
S'/AuxVariables'
p6338
sa(dp6339
S'description'
p6340
g3
sS'subblocks'
p6341
(lp6342
(dp6343
S'description'
p6344
g3
sS'subblocks'
p6345
NsS'parameters'
p6346
(lp6347
(dp6348
S'description'
p6349
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6350
sS'cpp_type'
p6351
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6352
sS'default'
p6353
g3
sS'name'
p6354
S'boundary'
p6355
sS'required'
p6356
I01
sS'group_name'
p6357
Nsa(dp6358
S'description'
p6359
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6360
sS'cpp_type'
p6361
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6362
sS'default'
p6363
g3
sS'name'
p6364
S'control_tags'
p6365
sS'required'
p6366
I00
sS'group_name'
p6367
S'Advanced'
p6368
sa(dp6369
S'description'
p6370
S'Set the enabled status of the MooseObject.\n'
p6371
sS'cpp_type'
p6372
S'bool'
p6373
sS'default'
p6374
S'1'
p6375
sS'name'
p6376
S'enable'
p6377
sS'required'
p6378
I00
sS'group_name'
p6379
S'Advanced'
p6380
sa(dp6381
S'description'
p6382
S'Determines whether this object is calculated using an implicit or explicit form\n'
p6383
sS'cpp_type'
p6384
S'bool'
p6385
sS'default'
p6386
S'1'
p6387
sS'name'
p6388
S'implicit'
p6389
sS'required'
p6390
I00
sS'group_name'
p6391
S'Advanced'
p6392
sa(dp6393
S'description'
p6394
S'A string representing the Moose Object that will be built by this Action\n'
p6395
sS'cpp_type'
p6396
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6397
sS'default'
p6398
g3
sS'name'
p6399
S'type'
p6400
sS'required'
p6401
I01
sS'group_name'
p6402
Nsa(dp6403
S'description'
p6404
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6405
sS'cpp_type'
p6406
S'bool'
p6407
sS'default'
p6408
S'0'
p6409
sS'name'
p6410
S'use_displaced_mesh'
p6411
sS'required'
p6412
I00
sS'group_name'
p6413
S'Advanced'
p6414
sa(dp6415
S'description'
p6416
S'The name of the variable that this boundary condition applies to\n'
p6417
sS'cpp_type'
p6418
S'NonlinearVariableName'
p6419
sS'default'
p6420
g3
sS'name'
p6421
S'variable'
p6422
sS'required'
p6423
I01
sS'group_name'
p6424
NsasS'name'
p6425
S'/BCs/*'
p6426
sa(dp6427
S'description'
p6428
g3
sS'subblocks'
p6429
NsS'parameters'
p6430
(lp6431
(dp6432
S'description'
p6433
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6434
sS'cpp_type'
p6435
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6436
sS'default'
p6437
g3
sS'name'
p6438
S'boundary'
p6439
sS'required'
p6440
I01
sS'group_name'
p6441
Nsa(dp6442
S'description'
p6443
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6444
sS'cpp_type'
p6445
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6446
sS'default'
p6447
g3
sS'name'
p6448
S'control_tags'
p6449
sS'required'
p6450
I00
sS'group_name'
p6451
S'Advanced'
p6452
sa(dp6453
S'description'
p6454
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6455
sS'cpp_type'
p6456
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6457
sS'default'
p6458
g3
sS'name'
p6459
S'diag_save_in'
p6460
sS'required'
p6461
I00
sS'group_name'
p6462
S'Advanced'
p6463
sa(dp6464
S'description'
p6465
g3
sS'cpp_type'
p6466
S'double'
p6467
sS'default'
p6468
S'0'
p6469
sS'name'
p6470
S'duration'
p6471
sS'required'
p6472
I00
sS'group_name'
p6473
Nsa(dp6474
S'description'
p6475
S'Set the enabled status of the MooseObject.\n'
p6476
sS'cpp_type'
p6477
S'bool'
p6478
sS'default'
p6479
S'1'
p6480
sS'name'
p6481
S'enable'
p6482
sS'required'
p6483
I00
sS'group_name'
p6484
S'Advanced'
p6485
sa(dp6486
S'description'
p6487
g3
sS'cpp_type'
p6488
S'double'
p6489
sS'default'
p6490
S'500'
p6491
sS'name'
p6492
S'final'
p6493
sS'required'
p6494
I00
sS'group_name'
p6495
Nsa(dp6496
S'description'
p6497
S'Determines whether this object is calculated using an implicit or explicit form\n'
p6498
sS'cpp_type'
p6499
S'bool'
p6500
sS'default'
p6501
S'1'
p6502
sS'name'
p6503
S'implicit'
p6504
sS'required'
p6505
I00
sS'group_name'
p6506
S'Advanced'
p6507
sa(dp6508
S'description'
p6509
g3
sS'cpp_type'
p6510
S'double'
p6511
sS'default'
p6512
S'500'
p6513
sS'name'
p6514
S'initial'
p6515
sS'required'
p6516
I00
sS'group_name'
p6517
Nsa(dp6518
S'description'
p6519
g3
sS'cpp_type'
p6520
S'double'
p6521
sS'default'
p6522
S'7500'
p6523
sS'name'
p6524
S'rate'
p6525
sS'required'
p6526
I00
sS'group_name'
p6527
Nsa(dp6528
S'description'
p6529
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6530
sS'cpp_type'
p6531
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6532
sS'default'
p6533
g3
sS'name'
p6534
S'save_in'
p6535
sS'required'
p6536
I00
sS'group_name'
p6537
S'Advanced'
p6538
sa(dp6539
S'description'
p6540
S'The seed for the master random number generator\n'
p6541
sS'cpp_type'
p6542
S'unsigned int'
p6543
sS'default'
p6544
S'0'
p6545
sS'name'
p6546
S'seed'
p6547
sS'required'
p6548
I00
sS'group_name'
p6549
S'Advanced'
p6550
sa(dp6551
S'description'
p6552
g3
sS'cpp_type'
p6553
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6554
sS'default'
p6555
S'ConvectiveFluxBC'
p6556
sS'name'
p6557
S'type'
p6558
sS'required'
p6559
I00
sS'group_name'
p6560
Nsa(dp6561
S'description'
p6562
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6563
sS'cpp_type'
p6564
S'bool'
p6565
sS'default'
p6566
S'0'
p6567
sS'name'
p6568
S'use_displaced_mesh'
p6569
sS'required'
p6570
I00
sS'group_name'
p6571
S'Advanced'
p6572
sa(dp6573
S'description'
p6574
S'The name of the variable that this boundary condition applies to\n'
p6575
sS'cpp_type'
p6576
S'NonlinearVariableName'
p6577
sS'default'
p6578
g3
sS'name'
p6579
S'variable'
p6580
sS'required'
p6581
I01
sS'group_name'
p6582
NsasS'name'
p6583
S'/BCs/ConvectiveFluxBC'
p6584
sa(dp6585
S'description'
p6586
g3
sS'subblocks'
p6587
NsS'parameters'
p6588
(lp6589
(dp6590
S'description'
p6591
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6592
sS'cpp_type'
p6593
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6594
sS'default'
p6595
g3
sS'name'
p6596
S'boundary'
p6597
sS'required'
p6598
I01
sS'group_name'
p6599
Nsa(dp6600
S'description'
p6601
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6602
sS'cpp_type'
p6603
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6604
sS'default'
p6605
g3
sS'name'
p6606
S'control_tags'
p6607
sS'required'
p6608
I00
sS'group_name'
p6609
S'Advanced'
p6610
sa(dp6611
S'description'
p6612
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6613
sS'cpp_type'
p6614
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6615
sS'default'
p6616
g3
sS'name'
p6617
S'diag_save_in'
p6618
sS'required'
p6619
I00
sS'group_name'
p6620
S'Advanced'
p6621
sa(dp6622
S'description'
p6623
S'The diffusion (or thermal conductivity or viscosity) coefficient.\n'
p6624
sS'cpp_type'
p6625
S'MaterialPropertyName'
p6626
sS'default'
p6627
S'1'
p6628
sS'name'
p6629
S'diff'
p6630
sS'required'
p6631
I00
sS'group_name'
p6632
Nsa(dp6633
S'description'
p6634
S'Set the enabled status of the MooseObject.\n'
p6635
sS'cpp_type'
p6636
S'bool'
p6637
sS'default'
p6638
S'1'
p6639
sS'name'
p6640
S'enable'
p6641
sS'required'
p6642
I00
sS'group_name'
p6643
S'Advanced'
p6644
sa(dp6645
S'description'
p6646
S'Epsilon\n'
p6647
sS'cpp_type'
p6648
S'double'
p6649
sS'default'
p6650
g3
sS'name'
p6651
S'epsilon'
p6652
sS'required'
p6653
I01
sS'group_name'
p6654
Nsa(dp6655
S'description'
p6656
S'The forcing function.\n'
p6657
sS'cpp_type'
p6658
S'FunctionName'
p6659
sS'default'
p6660
g3
sS'name'
p6661
S'function'
p6662
sS'required'
p6663
I01
sS'group_name'
p6664
Nsa(dp6665
S'description'
p6666
S'Determines whether this object is calculated using an implicit or explicit form\n'
p6667
sS'cpp_type'
p6668
S'bool'
p6669
sS'default'
p6670
S'1'
p6671
sS'name'
p6672
S'implicit'
p6673
sS'required'
p6674
I00
sS'group_name'
p6675
S'Advanced'
p6676
sa(dp6677
S'description'
p6678
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6679
sS'cpp_type'
p6680
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6681
sS'default'
p6682
g3
sS'name'
p6683
S'save_in'
p6684
sS'required'
p6685
I00
sS'group_name'
p6686
S'Advanced'
p6687
sa(dp6688
S'description'
p6689
S'The seed for the master random number generator\n'
p6690
sS'cpp_type'
p6691
S'unsigned int'
p6692
sS'default'
p6693
S'0'
p6694
sS'name'
p6695
S'seed'
p6696
sS'required'
p6697
I00
sS'group_name'
p6698
S'Advanced'
p6699
sa(dp6700
S'description'
p6701
S'Sigma\n'
p6702
sS'cpp_type'
p6703
S'double'
p6704
sS'default'
p6705
g3
sS'name'
p6706
S'sigma'
p6707
sS'required'
p6708
I01
sS'group_name'
p6709
Nsa(dp6710
S'description'
p6711
g3
sS'cpp_type'
p6712
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6713
sS'default'
p6714
S'DGFunctionDiffusionDirichletBC'
p6715
sS'name'
p6716
S'type'
p6717
sS'required'
p6718
I00
sS'group_name'
p6719
Nsa(dp6720
S'description'
p6721
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6722
sS'cpp_type'
p6723
S'bool'
p6724
sS'default'
p6725
S'0'
p6726
sS'name'
p6727
S'use_displaced_mesh'
p6728
sS'required'
p6729
I00
sS'group_name'
p6730
S'Advanced'
p6731
sa(dp6732
S'description'
p6733
S'The value the variable should have on the boundary\n'
p6734
sS'cpp_type'
p6735
S'double'
p6736
sS'default'
p6737
S'0'
p6738
sS'name'
p6739
S'value'
p6740
sS'required'
p6741
I00
sS'group_name'
p6742
Nsa(dp6743
S'description'
p6744
S'The name of the variable that this boundary condition applies to\n'
p6745
sS'cpp_type'
p6746
S'NonlinearVariableName'
p6747
sS'default'
p6748
g3
sS'name'
p6749
S'variable'
p6750
sS'required'
p6751
I01
sS'group_name'
p6752
NsasS'name'
p6753
S'/BCs/DGFunctionDiffusionDirichletBC'
p6754
sa(dp6755
S'description'
p6756
g3
sS'subblocks'
p6757
NsS'parameters'
p6758
(lp6759
(dp6760
S'description'
p6761
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6762
sS'cpp_type'
p6763
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6764
sS'default'
p6765
g3
sS'name'
p6766
S'boundary'
p6767
sS'required'
p6768
I01
sS'group_name'
p6769
Nsa(dp6770
S'description'
p6771
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6772
sS'cpp_type'
p6773
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6774
sS'default'
p6775
g3
sS'name'
p6776
S'control_tags'
p6777
sS'required'
p6778
I00
sS'group_name'
p6779
S'Advanced'
p6780
sa(dp6781
S'description'
p6782
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6783
sS'cpp_type'
p6784
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6785
sS'default'
p6786
g3
sS'name'
p6787
S'diag_save_in'
p6788
sS'required'
p6789
I00
sS'group_name'
p6790
S'Advanced'
p6791
sa(dp6792
S'description'
p6793
S'Set the enabled status of the MooseObject.\n'
p6794
sS'cpp_type'
p6795
S'bool'
p6796
sS'default'
p6797
S'1'
p6798
sS'name'
p6799
S'enable'
p6800
sS'required'
p6801
I00
sS'group_name'
p6802
S'Advanced'
p6803
sa(dp6804
S'description'
p6805
S'Determines whether this object is calculated using an implicit or explicit form\n'
p6806
sS'cpp_type'
p6807
S'bool'
p6808
sS'default'
p6809
S'1'
p6810
sS'name'
p6811
S'implicit'
p6812
sS'required'
p6813
I00
sS'group_name'
p6814
S'Advanced'
p6815
sa(dp6816
S'description'
p6817
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6818
sS'cpp_type'
p6819
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6820
sS'default'
p6821
g3
sS'name'
p6822
S'save_in'
p6823
sS'required'
p6824
I00
sS'group_name'
p6825
S'Advanced'
p6826
sa(dp6827
S'description'
p6828
S'The seed for the master random number generator\n'
p6829
sS'cpp_type'
p6830
S'unsigned int'
p6831
sS'default'
p6832
S'0'
p6833
sS'name'
p6834
S'seed'
p6835
sS'required'
p6836
I00
sS'group_name'
p6837
S'Advanced'
p6838
sa(dp6839
S'description'
p6840
g3
sS'cpp_type'
p6841
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6842
sS'default'
p6843
S'DiffusionFluxBC'
p6844
sS'name'
p6845
S'type'
p6846
sS'required'
p6847
I00
sS'group_name'
p6848
Nsa(dp6849
S'description'
p6850
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6851
sS'cpp_type'
p6852
S'bool'
p6853
sS'default'
p6854
S'0'
p6855
sS'name'
p6856
S'use_displaced_mesh'
p6857
sS'required'
p6858
I00
sS'group_name'
p6859
S'Advanced'
p6860
sa(dp6861
S'description'
p6862
S'The name of the variable that this boundary condition applies to\n'
p6863
sS'cpp_type'
p6864
S'NonlinearVariableName'
p6865
sS'default'
p6866
g3
sS'name'
p6867
S'variable'
p6868
sS'required'
p6869
I01
sS'group_name'
p6870
NsasS'name'
p6871
S'/BCs/DiffusionFluxBC'
p6872
sa(dp6873
S'description'
p6874
g3
sS'subblocks'
p6875
NsS'parameters'
p6876
(lp6877
(dp6878
S'description'
p6879
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6880
sS'cpp_type'
p6881
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6882
sS'default'
p6883
g3
sS'name'
p6884
S'boundary'
p6885
sS'required'
p6886
I01
sS'group_name'
p6887
Nsa(dp6888
S'description'
p6889
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p6890
sS'cpp_type'
p6891
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p6892
sS'default'
p6893
g3
sS'name'
p6894
S'control_tags'
p6895
sS'required'
p6896
I00
sS'group_name'
p6897
S'Advanced'
p6898
sa(dp6899
S'description'
p6900
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6901
sS'cpp_type'
p6902
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6903
sS'default'
p6904
g3
sS'name'
p6905
S'diag_save_in'
p6906
sS'required'
p6907
I00
sS'group_name'
p6908
Nsa(dp6909
S'description'
p6910
S'Set the enabled status of the MooseObject.\n'
p6911
sS'cpp_type'
p6912
S'bool'
p6913
sS'default'
p6914
S'1'
p6915
sS'name'
p6916
S'enable'
p6917
sS'required'
p6918
I00
sS'group_name'
p6919
S'Advanced'
p6920
sa(dp6921
S'description'
p6922
S'Determines whether this object is calculated using an implicit or explicit form\n'
p6923
sS'cpp_type'
p6924
S'bool'
p6925
sS'default'
p6926
S'1'
p6927
sS'name'
p6928
S'implicit'
p6929
sS'required'
p6930
I00
sS'group_name'
p6931
S'Advanced'
p6932
sa(dp6933
S'description'
p6934
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6935
sS'cpp_type'
p6936
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6937
sS'default'
p6938
g3
sS'name'
p6939
S'save_in'
p6940
sS'required'
p6941
I00
sS'group_name'
p6942
Nsa(dp6943
S'description'
p6944
S'The seed for the master random number generator\n'
p6945
sS'cpp_type'
p6946
S'unsigned int'
p6947
sS'default'
p6948
S'0'
p6949
sS'name'
p6950
S'seed'
p6951
sS'required'
p6952
I00
sS'group_name'
p6953
S'Advanced'
p6954
sa(dp6955
S'description'
p6956
g3
sS'cpp_type'
p6957
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6958
sS'default'
p6959
S'DirichletBC'
p6960
sS'name'
p6961
S'type'
p6962
sS'required'
p6963
I00
sS'group_name'
p6964
Nsa(dp6965
S'description'
p6966
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6967
sS'cpp_type'
p6968
S'bool'
p6969
sS'default'
p6970
S'0'
p6971
sS'name'
p6972
S'use_displaced_mesh'
p6973
sS'required'
p6974
I00
sS'group_name'
p6975
S'Advanced'
p6976
sa(dp6977
S'description'
p6978
S'Value of the BC\n'
p6979
sS'cpp_type'
p6980
S'double'
p6981
sS'default'
p6982
g3
sS'name'
p6983
S'value'
p6984
sS'required'
p6985
I01
sS'group_name'
p6986
Nsa(dp6987
S'description'
p6988
S'The name of the variable that this boundary condition applies to\n'
p6989
sS'cpp_type'
p6990
S'NonlinearVariableName'
p6991
sS'default'
p6992
g3
sS'name'
p6993
S'variable'
p6994
sS'required'
p6995
I01
sS'group_name'
p6996
NsasS'name'
p6997
S'/BCs/DirichletBC'
p6998
sa(dp6999
S'description'
p7000
g3
sS'subblocks'
p7001
NsS'parameters'
p7002
(lp7003
(dp7004
S'description'
p7005
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7006
sS'cpp_type'
p7007
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7008
sS'default'
p7009
g3
sS'name'
p7010
S'boundary'
p7011
sS'required'
p7012
I01
sS'group_name'
p7013
Nsa(dp7014
S'description'
p7015
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7016
sS'cpp_type'
p7017
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7018
sS'default'
p7019
g3
sS'name'
p7020
S'control_tags'
p7021
sS'required'
p7022
I00
sS'group_name'
p7023
S'Advanced'
p7024
sa(dp7025
S'description'
p7026
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7027
sS'cpp_type'
p7028
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7029
sS'default'
p7030
g3
sS'name'
p7031
S'diag_save_in'
p7032
sS'required'
p7033
I00
sS'group_name'
p7034
Nsa(dp7035
S'description'
p7036
S'Set the enabled status of the MooseObject.\n'
p7037
sS'cpp_type'
p7038
S'bool'
p7039
sS'default'
p7040
S'1'
p7041
sS'name'
p7042
S'enable'
p7043
sS'required'
p7044
I00
sS'group_name'
p7045
S'Advanced'
p7046
sa(dp7047
S'description'
p7048
S'The forcing function.\n'
p7049
sS'cpp_type'
p7050
S'FunctionName'
p7051
sS'default'
p7052
g3
sS'name'
p7053
S'function'
p7054
sS'required'
p7055
I01
sS'group_name'
p7056
Nsa(dp7057
S'description'
p7058
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7059
sS'cpp_type'
p7060
S'bool'
p7061
sS'default'
p7062
S'1'
p7063
sS'name'
p7064
S'implicit'
p7065
sS'required'
p7066
I00
sS'group_name'
p7067
S'Advanced'
p7068
sa(dp7069
S'description'
p7070
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7071
sS'cpp_type'
p7072
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7073
sS'default'
p7074
g3
sS'name'
p7075
S'save_in'
p7076
sS'required'
p7077
I00
sS'group_name'
p7078
Nsa(dp7079
S'description'
p7080
S'The seed for the master random number generator\n'
p7081
sS'cpp_type'
p7082
S'unsigned int'
p7083
sS'default'
p7084
S'0'
p7085
sS'name'
p7086
S'seed'
p7087
sS'required'
p7088
I00
sS'group_name'
p7089
S'Advanced'
p7090
sa(dp7091
S'description'
p7092
g3
sS'cpp_type'
p7093
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7094
sS'default'
p7095
S'FunctionDirichletBC'
p7096
sS'name'
p7097
S'type'
p7098
sS'required'
p7099
I00
sS'group_name'
p7100
Nsa(dp7101
S'description'
p7102
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7103
sS'cpp_type'
p7104
S'bool'
p7105
sS'default'
p7106
S'0'
p7107
sS'name'
p7108
S'use_displaced_mesh'
p7109
sS'required'
p7110
I00
sS'group_name'
p7111
S'Advanced'
p7112
sa(dp7113
S'description'
p7114
S'The name of the variable that this boundary condition applies to\n'
p7115
sS'cpp_type'
p7116
S'NonlinearVariableName'
p7117
sS'default'
p7118
g3
sS'name'
p7119
S'variable'
p7120
sS'required'
p7121
I01
sS'group_name'
p7122
NsasS'name'
p7123
S'/BCs/FunctionDirichletBC'
p7124
sa(dp7125
S'description'
p7126
g3
sS'subblocks'
p7127
NsS'parameters'
p7128
(lp7129
(dp7130
S'description'
p7131
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7132
sS'cpp_type'
p7133
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7134
sS'default'
p7135
g3
sS'name'
p7136
S'boundary'
p7137
sS'required'
p7138
I01
sS'group_name'
p7139
Nsa(dp7140
S'description'
p7141
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7142
sS'cpp_type'
p7143
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7144
sS'default'
p7145
g3
sS'name'
p7146
S'control_tags'
p7147
sS'required'
p7148
I00
sS'group_name'
p7149
S'Advanced'
p7150
sa(dp7151
S'description'
p7152
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7153
sS'cpp_type'
p7154
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7155
sS'default'
p7156
g3
sS'name'
p7157
S'diag_save_in'
p7158
sS'required'
p7159
I00
sS'group_name'
p7160
S'Advanced'
p7161
sa(dp7162
S'description'
p7163
S'Set the enabled status of the MooseObject.\n'
p7164
sS'cpp_type'
p7165
S'bool'
p7166
sS'default'
p7167
S'1'
p7168
sS'name'
p7169
S'enable'
p7170
sS'required'
p7171
I00
sS'group_name'
p7172
S'Advanced'
p7173
sa(dp7174
S'description'
p7175
S'The function.\n'
p7176
sS'cpp_type'
p7177
S'FunctionName'
p7178
sS'default'
p7179
g3
sS'name'
p7180
S'function'
p7181
sS'required'
p7182
I01
sS'group_name'
p7183
Nsa(dp7184
S'description'
p7185
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7186
sS'cpp_type'
p7187
S'bool'
p7188
sS'default'
p7189
S'1'
p7190
sS'name'
p7191
S'implicit'
p7192
sS'required'
p7193
I00
sS'group_name'
p7194
S'Advanced'
p7195
sa(dp7196
S'description'
p7197
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7198
sS'cpp_type'
p7199
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7200
sS'default'
p7201
g3
sS'name'
p7202
S'save_in'
p7203
sS'required'
p7204
I00
sS'group_name'
p7205
S'Advanced'
p7206
sa(dp7207
S'description'
p7208
S'The seed for the master random number generator\n'
p7209
sS'cpp_type'
p7210
S'unsigned int'
p7211
sS'default'
p7212
S'0'
p7213
sS'name'
p7214
S'seed'
p7215
sS'required'
p7216
I00
sS'group_name'
p7217
S'Advanced'
p7218
sa(dp7219
S'description'
p7220
g3
sS'cpp_type'
p7221
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7222
sS'default'
p7223
S'FunctionNeumannBC'
p7224
sS'name'
p7225
S'type'
p7226
sS'required'
p7227
I00
sS'group_name'
p7228
Nsa(dp7229
S'description'
p7230
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7231
sS'cpp_type'
p7232
S'bool'
p7233
sS'default'
p7234
S'0'
p7235
sS'name'
p7236
S'use_displaced_mesh'
p7237
sS'required'
p7238
I00
sS'group_name'
p7239
S'Advanced'
p7240
sa(dp7241
S'description'
p7242
S'The name of the variable that this boundary condition applies to\n'
p7243
sS'cpp_type'
p7244
S'NonlinearVariableName'
p7245
sS'default'
p7246
g3
sS'name'
p7247
S'variable'
p7248
sS'required'
p7249
I01
sS'group_name'
p7250
NsasS'name'
p7251
S'/BCs/FunctionNeumannBC'
p7252
sa(dp7253
S'description'
p7254
g3
sS'subblocks'
p7255
NsS'parameters'
p7256
(lp7257
(dp7258
S'description'
p7259
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7260
sS'cpp_type'
p7261
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7262
sS'default'
p7263
g3
sS'name'
p7264
S'boundary'
p7265
sS'required'
p7266
I01
sS'group_name'
p7267
Nsa(dp7268
S'description'
p7269
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7270
sS'cpp_type'
p7271
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7272
sS'default'
p7273
g3
sS'name'
p7274
S'control_tags'
p7275
sS'required'
p7276
I00
sS'group_name'
p7277
S'Advanced'
p7278
sa(dp7279
S'description'
p7280
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7281
sS'cpp_type'
p7282
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7283
sS'default'
p7284
g3
sS'name'
p7285
S'diag_save_in'
p7286
sS'required'
p7287
I00
sS'group_name'
p7288
S'Advanced'
p7289
sa(dp7290
S'description'
p7291
S'Set the enabled status of the MooseObject.\n'
p7292
sS'cpp_type'
p7293
S'bool'
p7294
sS'default'
p7295
S'1'
p7296
sS'name'
p7297
S'enable'
p7298
sS'required'
p7299
I00
sS'group_name'
p7300
S'Advanced'
p7301
sa(dp7302
S'description'
p7303
S'Forcing function\n'
p7304
sS'cpp_type'
p7305
S'FunctionName'
p7306
sS'default'
p7307
g3
sS'name'
p7308
S'function'
p7309
sS'required'
p7310
I01
sS'group_name'
p7311
Nsa(dp7312
S'description'
p7313
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7314
sS'cpp_type'
p7315
S'bool'
p7316
sS'default'
p7317
S'1'
p7318
sS'name'
p7319
S'implicit'
p7320
sS'required'
p7321
I00
sS'group_name'
p7322
S'Advanced'
p7323
sa(dp7324
S'description'
p7325
S'Penalty scalar\n'
p7326
sS'cpp_type'
p7327
S'double'
p7328
sS'default'
p7329
g3
sS'name'
p7330
S'penalty'
p7331
sS'required'
p7332
I01
sS'group_name'
p7333
Nsa(dp7334
S'description'
p7335
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7336
sS'cpp_type'
p7337
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7338
sS'default'
p7339
g3
sS'name'
p7340
S'save_in'
p7341
sS'required'
p7342
I00
sS'group_name'
p7343
S'Advanced'
p7344
sa(dp7345
S'description'
p7346
S'The seed for the master random number generator\n'
p7347
sS'cpp_type'
p7348
S'unsigned int'
p7349
sS'default'
p7350
S'0'
p7351
sS'name'
p7352
S'seed'
p7353
sS'required'
p7354
I00
sS'group_name'
p7355
S'Advanced'
p7356
sa(dp7357
S'description'
p7358
g3
sS'cpp_type'
p7359
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7360
sS'default'
p7361
S'FunctionPenaltyDirichletBC'
p7362
sS'name'
p7363
S'type'
p7364
sS'required'
p7365
I00
sS'group_name'
p7366
Nsa(dp7367
S'description'
p7368
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7369
sS'cpp_type'
p7370
S'bool'
p7371
sS'default'
p7372
S'0'
p7373
sS'name'
p7374
S'use_displaced_mesh'
p7375
sS'required'
p7376
I00
sS'group_name'
p7377
S'Advanced'
p7378
sa(dp7379
S'description'
p7380
S'The name of the variable that this boundary condition applies to\n'
p7381
sS'cpp_type'
p7382
S'NonlinearVariableName'
p7383
sS'default'
p7384
g3
sS'name'
p7385
S'variable'
p7386
sS'required'
p7387
I01
sS'group_name'
p7388
NsasS'name'
p7389
S'/BCs/FunctionPenaltyDirichletBC'
p7390
sa(dp7391
S'description'
p7392
g3
sS'subblocks'
p7393
NsS'parameters'
p7394
(lp7395
(dp7396
S'description'
p7397
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7398
sS'cpp_type'
p7399
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7400
sS'default'
p7401
g3
sS'name'
p7402
S'boundary'
p7403
sS'required'
p7404
I01
sS'group_name'
p7405
Nsa(dp7406
S'description'
p7407
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7408
sS'cpp_type'
p7409
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7410
sS'default'
p7411
g3
sS'name'
p7412
S'control_tags'
p7413
sS'required'
p7414
I00
sS'group_name'
p7415
S'Advanced'
p7416
sa(dp7417
S'description'
p7418
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7419
sS'cpp_type'
p7420
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7421
sS'default'
p7422
g3
sS'name'
p7423
S'diag_save_in'
p7424
sS'required'
p7425
I00
sS'group_name'
p7426
Nsa(dp7427
S'description'
p7428
S'Set the enabled status of the MooseObject.\n'
p7429
sS'cpp_type'
p7430
S'bool'
p7431
sS'default'
p7432
S'1'
p7433
sS'name'
p7434
S'enable'
p7435
sS'required'
p7436
I00
sS'group_name'
p7437
S'Advanced'
p7438
sa(dp7439
S'description'
p7440
S'The forcing function.\n'
p7441
sS'cpp_type'
p7442
S'FunctionName'
p7443
sS'default'
p7444
g3
sS'name'
p7445
S'function'
p7446
sS'required'
p7447
I01
sS'group_name'
p7448
Nsa(dp7449
S'description'
p7450
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7451
sS'cpp_type'
p7452
S'bool'
p7453
sS'default'
p7454
S'1'
p7455
sS'name'
p7456
S'implicit'
p7457
sS'required'
p7458
I00
sS'group_name'
p7459
S'Advanced'
p7460
sa(dp7461
S'description'
p7462
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7463
sS'cpp_type'
p7464
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7465
sS'default'
p7466
g3
sS'name'
p7467
S'save_in'
p7468
sS'required'
p7469
I00
sS'group_name'
p7470
Nsa(dp7471
S'description'
p7472
S'The seed for the master random number generator\n'
p7473
sS'cpp_type'
p7474
S'unsigned int'
p7475
sS'default'
p7476
S'0'
p7477
sS'name'
p7478
S'seed'
p7479
sS'required'
p7480
I00
sS'group_name'
p7481
S'Advanced'
p7482
sa(dp7483
S'description'
p7484
g3
sS'cpp_type'
p7485
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7486
sS'default'
p7487
S'FunctionPresetBC'
p7488
sS'name'
p7489
S'type'
p7490
sS'required'
p7491
I00
sS'group_name'
p7492
Nsa(dp7493
S'description'
p7494
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7495
sS'cpp_type'
p7496
S'bool'
p7497
sS'default'
p7498
S'0'
p7499
sS'name'
p7500
S'use_displaced_mesh'
p7501
sS'required'
p7502
I00
sS'group_name'
p7503
S'Advanced'
p7504
sa(dp7505
S'description'
p7506
S'The name of the variable that this boundary condition applies to\n'
p7507
sS'cpp_type'
p7508
S'NonlinearVariableName'
p7509
sS'default'
p7510
g3
sS'name'
p7511
S'variable'
p7512
sS'required'
p7513
I01
sS'group_name'
p7514
NsasS'name'
p7515
S'/BCs/FunctionPresetBC'
p7516
sa(dp7517
S'description'
p7518
g3
sS'subblocks'
p7519
NsS'parameters'
p7520
(lp7521
(dp7522
S'description'
p7523
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7524
sS'cpp_type'
p7525
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7526
sS'default'
p7527
g3
sS'name'
p7528
S'boundary'
p7529
sS'required'
p7530
I01
sS'group_name'
p7531
Nsa(dp7532
S'description'
p7533
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7534
sS'cpp_type'
p7535
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7536
sS'default'
p7537
g3
sS'name'
p7538
S'control_tags'
p7539
sS'required'
p7540
I00
sS'group_name'
p7541
S'Advanced'
p7542
sa(dp7543
S'description'
p7544
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7545
sS'cpp_type'
p7546
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7547
sS'default'
p7548
g3
sS'name'
p7549
S'diag_save_in'
p7550
sS'required'
p7551
I00
sS'group_name'
p7552
Nsa(dp7553
S'description'
p7554
S'Set the enabled status of the MooseObject.\n'
p7555
sS'cpp_type'
p7556
S'bool'
p7557
sS'default'
p7558
S'1'
p7559
sS'name'
p7560
S'enable'
p7561
sS'required'
p7562
I00
sS'group_name'
p7563
S'Advanced'
p7564
sa(dp7565
S'description'
p7566
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7567
sS'cpp_type'
p7568
S'bool'
p7569
sS'default'
p7570
S'1'
p7571
sS'name'
p7572
S'implicit'
p7573
sS'required'
p7574
I00
sS'group_name'
p7575
S'Advanced'
p7576
sa(dp7577
S'description'
p7578
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7579
sS'cpp_type'
p7580
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7581
sS'default'
p7582
g3
sS'name'
p7583
S'save_in'
p7584
sS'required'
p7585
I00
sS'group_name'
p7586
Nsa(dp7587
S'description'
p7588
S'The seed for the master random number generator\n'
p7589
sS'cpp_type'
p7590
S'unsigned int'
p7591
sS'default'
p7592
S'0'
p7593
sS'name'
p7594
S'seed'
p7595
sS'required'
p7596
I00
sS'group_name'
p7597
S'Advanced'
p7598
sa(dp7599
S'description'
p7600
g3
sS'cpp_type'
p7601
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7602
sS'default'
p7603
S'MatchedValueBC'
p7604
sS'name'
p7605
S'type'
p7606
sS'required'
p7607
I00
sS'group_name'
p7608
Nsa(dp7609
S'description'
p7610
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7611
sS'cpp_type'
p7612
S'bool'
p7613
sS'default'
p7614
S'0'
p7615
sS'name'
p7616
S'use_displaced_mesh'
p7617
sS'required'
p7618
I00
sS'group_name'
p7619
S'Advanced'
p7620
sa(dp7621
S'description'
p7622
S'The variable whose value we are to match.\n'
p7623
sS'cpp_type'
p7624
S'std::vector<VariableName>'
p7625
sS'default'
p7626
g3
sS'name'
p7627
S'v'
p7628
sS'required'
p7629
I01
sS'group_name'
p7630
Nsa(dp7631
S'description'
p7632
S'The name of the variable that this boundary condition applies to\n'
p7633
sS'cpp_type'
p7634
S'NonlinearVariableName'
p7635
sS'default'
p7636
g3
sS'name'
p7637
S'variable'
p7638
sS'required'
p7639
I01
sS'group_name'
p7640
NsasS'name'
p7641
S'/BCs/MatchedValueBC'
p7642
sa(dp7643
S'description'
p7644
g3
sS'subblocks'
p7645
NsS'parameters'
p7646
(lp7647
(dp7648
S'description'
p7649
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7650
sS'cpp_type'
p7651
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7652
sS'default'
p7653
g3
sS'name'
p7654
S'boundary'
p7655
sS'required'
p7656
I01
sS'group_name'
p7657
Nsa(dp7658
S'description'
p7659
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7660
sS'cpp_type'
p7661
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7662
sS'default'
p7663
g3
sS'name'
p7664
S'control_tags'
p7665
sS'required'
p7666
I00
sS'group_name'
p7667
S'Advanced'
p7668
sa(dp7669
S'description'
p7670
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7671
sS'cpp_type'
p7672
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7673
sS'default'
p7674
g3
sS'name'
p7675
S'diag_save_in'
p7676
sS'required'
p7677
I00
sS'group_name'
p7678
S'Advanced'
p7679
sa(dp7680
S'description'
p7681
S'Set the enabled status of the MooseObject.\n'
p7682
sS'cpp_type'
p7683
S'bool'
p7684
sS'default'
p7685
S'1'
p7686
sS'name'
p7687
S'enable'
p7688
sS'required'
p7689
I00
sS'group_name'
p7690
S'Advanced'
p7691
sa(dp7692
S'description'
p7693
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7694
sS'cpp_type'
p7695
S'bool'
p7696
sS'default'
p7697
S'1'
p7698
sS'name'
p7699
S'implicit'
p7700
sS'required'
p7701
I00
sS'group_name'
p7702
S'Advanced'
p7703
sa(dp7704
S'description'
p7705
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7706
sS'cpp_type'
p7707
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7708
sS'default'
p7709
g3
sS'name'
p7710
S'save_in'
p7711
sS'required'
p7712
I00
sS'group_name'
p7713
S'Advanced'
p7714
sa(dp7715
S'description'
p7716
S'The seed for the master random number generator\n'
p7717
sS'cpp_type'
p7718
S'unsigned int'
p7719
sS'default'
p7720
S'0'
p7721
sS'name'
p7722
S'seed'
p7723
sS'required'
p7724
I00
sS'group_name'
p7725
S'Advanced'
p7726
sa(dp7727
S'description'
p7728
g3
sS'cpp_type'
p7729
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7730
sS'default'
p7731
S'NeumannBC'
p7732
sS'name'
p7733
S'type'
p7734
sS'required'
p7735
I00
sS'group_name'
p7736
Nsa(dp7737
S'description'
p7738
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7739
sS'cpp_type'
p7740
S'bool'
p7741
sS'default'
p7742
S'0'
p7743
sS'name'
p7744
S'use_displaced_mesh'
p7745
sS'required'
p7746
I00
sS'group_name'
p7747
S'Advanced'
p7748
sa(dp7749
S'description'
p7750
S'The value of the gradient on the boundary.\n'
p7751
sS'cpp_type'
p7752
S'double'
p7753
sS'default'
p7754
S'0'
p7755
sS'name'
p7756
S'value'
p7757
sS'required'
p7758
I00
sS'group_name'
p7759
Nsa(dp7760
S'description'
p7761
S'The name of the variable that this boundary condition applies to\n'
p7762
sS'cpp_type'
p7763
S'NonlinearVariableName'
p7764
sS'default'
p7765
g3
sS'name'
p7766
S'variable'
p7767
sS'required'
p7768
I01
sS'group_name'
p7769
NsasS'name'
p7770
S'/BCs/NeumannBC'
p7771
sa(dp7772
S'description'
p7773
g3
sS'subblocks'
p7774
NsS'parameters'
p7775
(lp7776
(dp7777
S'description'
p7778
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7779
sS'cpp_type'
p7780
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7781
sS'default'
p7782
g3
sS'name'
p7783
S'boundary'
p7784
sS'required'
p7785
I01
sS'group_name'
p7786
Nsa(dp7787
S'description'
p7788
S'Component of the Lagrange multiplier\n'
p7789
sS'cpp_type'
p7790
S'unsigned int'
p7791
sS'default'
p7792
g3
sS'name'
p7793
S'component'
p7794
sS'required'
p7795
I01
sS'group_name'
p7796
Nsa(dp7797
S'description'
p7798
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7799
sS'cpp_type'
p7800
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7801
sS'default'
p7802
g3
sS'name'
p7803
S'control_tags'
p7804
sS'required'
p7805
I00
sS'group_name'
p7806
S'Advanced'
p7807
sa(dp7808
S'description'
p7809
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7810
sS'cpp_type'
p7811
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7812
sS'default'
p7813
g3
sS'name'
p7814
S'diag_save_in'
p7815
sS'required'
p7816
I00
sS'group_name'
p7817
S'Advanced'
p7818
sa(dp7819
S'description'
p7820
S'Set the enabled status of the MooseObject.\n'
p7821
sS'cpp_type'
p7822
S'bool'
p7823
sS'default'
p7824
S'1'
p7825
sS'name'
p7826
S'enable'
p7827
sS'required'
p7828
I00
sS'group_name'
p7829
S'Advanced'
p7830
sa(dp7831
S'description'
p7832
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7833
sS'cpp_type'
p7834
S'bool'
p7835
sS'default'
p7836
S'1'
p7837
sS'name'
p7838
S'implicit'
p7839
sS'required'
p7840
I00
sS'group_name'
p7841
S'Advanced'
p7842
sa(dp7843
S'description'
p7844
S'Lagrange multiplier\n'
p7845
sS'cpp_type'
p7846
S'std::vector<VariableName>'
p7847
sS'default'
p7848
g3
sS'name'
p7849
S'lambda'
p7850
sS'required'
p7851
I01
sS'group_name'
p7852
Nsa(dp7853
S'description'
p7854
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7855
sS'cpp_type'
p7856
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7857
sS'default'
p7858
g3
sS'name'
p7859
S'save_in'
p7860
sS'required'
p7861
I00
sS'group_name'
p7862
S'Advanced'
p7863
sa(dp7864
S'description'
p7865
S'The seed for the master random number generator\n'
p7866
sS'cpp_type'
p7867
S'unsigned int'
p7868
sS'default'
p7869
S'0'
p7870
sS'name'
p7871
S'seed'
p7872
sS'required'
p7873
I00
sS'group_name'
p7874
S'Advanced'
p7875
sa(dp7876
S'description'
p7877
g3
sS'cpp_type'
p7878
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7879
sS'default'
p7880
S'OneDEqualValueConstraintBC'
p7881
sS'name'
p7882
S'type'
p7883
sS'required'
p7884
I00
sS'group_name'
p7885
Nsa(dp7886
S'description'
p7887
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7888
sS'cpp_type'
p7889
S'bool'
p7890
sS'default'
p7891
S'0'
p7892
sS'name'
p7893
S'use_displaced_mesh'
p7894
sS'required'
p7895
I00
sS'group_name'
p7896
S'Advanced'
p7897
sa(dp7898
S'description'
p7899
S'The name of the variable that this boundary condition applies to\n'
p7900
sS'cpp_type'
p7901
S'NonlinearVariableName'
p7902
sS'default'
p7903
g3
sS'name'
p7904
S'variable'
p7905
sS'required'
p7906
I01
sS'group_name'
p7907
Nsa(dp7908
S'description'
p7909
S'Variation of the constraint g wrt this surface (+1 or -1). Note: g = value1 - value2 = 0 \n'
p7910
sS'cpp_type'
p7911
S'double'
p7912
sS'default'
p7913
g3
sS'name'
p7914
S'vg'
p7915
sS'required'
p7916
I01
sS'group_name'
p7917
NsasS'name'
p7918
S'/BCs/OneDEqualValueConstraintBC'
p7919
sa(dp7920
S'description'
p7921
g3
sS'subblocks'
p7922
NsS'parameters'
p7923
(lp7924
(dp7925
S'description'
p7926
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7927
sS'cpp_type'
p7928
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7929
sS'default'
p7930
g3
sS'name'
p7931
S'boundary'
p7932
sS'required'
p7933
I01
sS'group_name'
p7934
Nsa(dp7935
S'description'
p7936
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p7937
sS'cpp_type'
p7938
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7939
sS'default'
p7940
g3
sS'name'
p7941
S'control_tags'
p7942
sS'required'
p7943
I00
sS'group_name'
p7944
S'Advanced'
p7945
sa(dp7946
S'description'
p7947
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7948
sS'cpp_type'
p7949
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7950
sS'default'
p7951
g3
sS'name'
p7952
S'diag_save_in'
p7953
sS'required'
p7954
I00
sS'group_name'
p7955
S'Advanced'
p7956
sa(dp7957
S'description'
p7958
S'Set the enabled status of the MooseObject.\n'
p7959
sS'cpp_type'
p7960
S'bool'
p7961
sS'default'
p7962
S'1'
p7963
sS'name'
p7964
S'enable'
p7965
sS'required'
p7966
I00
sS'group_name'
p7967
S'Advanced'
p7968
sa(dp7969
S'description'
p7970
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7971
sS'cpp_type'
p7972
S'bool'
p7973
sS'default'
p7974
S'1'
p7975
sS'name'
p7976
S'implicit'
p7977
sS'required'
p7978
I00
sS'group_name'
p7979
S'Advanced'
p7980
sa(dp7981
S'description'
p7982
S'Penalty scalar\n'
p7983
sS'cpp_type'
p7984
S'double'
p7985
sS'default'
p7986
g3
sS'name'
p7987
S'penalty'
p7988
sS'required'
p7989
I01
sS'group_name'
p7990
Nsa(dp7991
S'description'
p7992
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7993
sS'cpp_type'
p7994
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7995
sS'default'
p7996
g3
sS'name'
p7997
S'save_in'
p7998
sS'required'
p7999
I00
sS'group_name'
p8000
S'Advanced'
p8001
sa(dp8002
S'description'
p8003
S'The seed for the master random number generator\n'
p8004
sS'cpp_type'
p8005
S'unsigned int'
p8006
sS'default'
p8007
S'0'
p8008
sS'name'
p8009
S'seed'
p8010
sS'required'
p8011
I00
sS'group_name'
p8012
S'Advanced'
p8013
sa(dp8014
S'description'
p8015
g3
sS'cpp_type'
p8016
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8017
sS'default'
p8018
S'PenaltyDirichletBC'
p8019
sS'name'
p8020
S'type'
p8021
sS'required'
p8022
I00
sS'group_name'
p8023
Nsa(dp8024
S'description'
p8025
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8026
sS'cpp_type'
p8027
S'bool'
p8028
sS'default'
p8029
S'0'
p8030
sS'name'
p8031
S'use_displaced_mesh'
p8032
sS'required'
p8033
I00
sS'group_name'
p8034
S'Advanced'
p8035
sa(dp8036
S'description'
p8037
S'Boundary value of the variable\n'
p8038
sS'cpp_type'
p8039
S'double'
p8040
sS'default'
p8041
S'0'
p8042
sS'name'
p8043
S'value'
p8044
sS'required'
p8045
I00
sS'group_name'
p8046
Nsa(dp8047
S'description'
p8048
S'The name of the variable that this boundary condition applies to\n'
p8049
sS'cpp_type'
p8050
S'NonlinearVariableName'
p8051
sS'default'
p8052
g3
sS'name'
p8053
S'variable'
p8054
sS'required'
p8055
I01
sS'group_name'
p8056
NsasS'name'
p8057
S'/BCs/PenaltyDirichletBC'
p8058
sa(dp8059
S'description'
p8060
g3
sS'subblocks'
p8061
(lp8062
(dp8063
S'description'
p8064
g3
sS'subblocks'
p8065
NsS'parameters'
p8066
(lp8067
(dp8068
S'description'
p8069
S'If using a generated mesh, you can specifiy just the dimension(s) you want to mark as periodic\n'
p8070
sS'cpp_type'
p8071
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8072
sS'default'
p8073
g3
sS'name'
p8074
S'auto_direction'
p8075
sS'required'
p8076
I00
sS'group_name'
p8077
Nsa(dp8078
S'description'
p8079
S'Functions that specify the inverse transformation\n'
p8080
sS'cpp_type'
p8081
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8082
sS'default'
p8083
g3
sS'name'
p8084
S'inv_transform_func'
p8085
sS'required'
p8086
I00
sS'group_name'
p8087
Nsa(dp8088
S'description'
p8089
S'Boundary ID associated with the primary boundary.\n'
p8090
sS'cpp_type'
p8091
S'BoundaryName'
p8092
sS'default'
p8093
g3
sS'name'
p8094
S'primary'
p8095
sS'required'
p8096
I00
sS'group_name'
p8097
Nsa(dp8098
S'description'
p8099
S'Boundary ID associated with the secondary boundary.\n'
p8100
sS'cpp_type'
p8101
S'BoundaryName'
p8102
sS'default'
p8103
g3
sS'name'
p8104
S'secondary'
p8105
sS'required'
p8106
I00
sS'group_name'
p8107
Nsa(dp8108
S'description'
p8109
S'Functions that specify the transformation\n'
p8110
sS'cpp_type'
p8111
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8112
sS'default'
p8113
g3
sS'name'
p8114
S'transform_func'
p8115
sS'required'
p8116
I00
sS'group_name'
p8117
Nsa(dp8118
S'description'
p8119
S'Vector that translates coordinates on the primary boundary to coordinates on the secondary boundary.\n'
p8120
sS'cpp_type'
p8121
S'libMesh::VectorValue<double>'
p8122
sS'default'
p8123
g3
sS'name'
p8124
S'translation'
p8125
sS'required'
p8126
I00
sS'group_name'
p8127
Nsa(dp8128
S'description'
p8129
S'Variable for the periodic boundary\n'
p8130
sS'cpp_type'
p8131
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p8132
sS'default'
p8133
g3
sS'name'
p8134
S'variable'
p8135
sS'required'
p8136
I00
sS'group_name'
p8137
NsasS'name'
p8138
S'/BCs/Periodic/*'
p8139
sasS'parameters'
p8140
NsS'name'
p8141
S'/BCs/Periodic'
p8142
sa(dp8143
S'description'
p8144
g3
sS'subblocks'
p8145
NsS'parameters'
p8146
(lp8147
(dp8148
S'description'
p8149
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8150
sS'cpp_type'
p8151
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8152
sS'default'
p8153
g3
sS'name'
p8154
S'boundary'
p8155
sS'required'
p8156
I01
sS'group_name'
p8157
Nsa(dp8158
S'description'
p8159
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8160
sS'cpp_type'
p8161
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8162
sS'default'
p8163
g3
sS'name'
p8164
S'control_tags'
p8165
sS'required'
p8166
I00
sS'group_name'
p8167
S'Advanced'
p8168
sa(dp8169
S'description'
p8170
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8171
sS'cpp_type'
p8172
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8173
sS'default'
p8174
g3
sS'name'
p8175
S'diag_save_in'
p8176
sS'required'
p8177
I00
sS'group_name'
p8178
Nsa(dp8179
S'description'
p8180
S'Set the enabled status of the MooseObject.\n'
p8181
sS'cpp_type'
p8182
S'bool'
p8183
sS'default'
p8184
S'1'
p8185
sS'name'
p8186
S'enable'
p8187
sS'required'
p8188
I00
sS'group_name'
p8189
S'Advanced'
p8190
sa(dp8191
S'description'
p8192
S'Determines whether this object is calculated using an implicit or explicit form\n'
p8193
sS'cpp_type'
p8194
S'bool'
p8195
sS'default'
p8196
S'1'
p8197
sS'name'
p8198
S'implicit'
p8199
sS'required'
p8200
I00
sS'group_name'
p8201
S'Advanced'
p8202
sa(dp8203
S'description'
p8204
S'The postprocessor to set the value to on the boundary.\n'
p8205
sS'cpp_type'
p8206
S'PostprocessorName'
p8207
sS'default'
p8208
g3
sS'name'
p8209
S'postprocessor'
p8210
sS'required'
p8211
I01
sS'group_name'
p8212
Nsa(dp8213
S'description'
p8214
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8215
sS'cpp_type'
p8216
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8217
sS'default'
p8218
g3
sS'name'
p8219
S'save_in'
p8220
sS'required'
p8221
I00
sS'group_name'
p8222
Nsa(dp8223
S'description'
p8224
S'The seed for the master random number generator\n'
p8225
sS'cpp_type'
p8226
S'unsigned int'
p8227
sS'default'
p8228
S'0'
p8229
sS'name'
p8230
S'seed'
p8231
sS'required'
p8232
I00
sS'group_name'
p8233
S'Advanced'
p8234
sa(dp8235
S'description'
p8236
g3
sS'cpp_type'
p8237
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8238
sS'default'
p8239
S'PostprocessorDirichletBC'
p8240
sS'name'
p8241
S'type'
p8242
sS'required'
p8243
I00
sS'group_name'
p8244
Nsa(dp8245
S'description'
p8246
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8247
sS'cpp_type'
p8248
S'bool'
p8249
sS'default'
p8250
S'0'
p8251
sS'name'
p8252
S'use_displaced_mesh'
p8253
sS'required'
p8254
I00
sS'group_name'
p8255
S'Advanced'
p8256
sa(dp8257
S'description'
p8258
S'The name of the variable that this boundary condition applies to\n'
p8259
sS'cpp_type'
p8260
S'NonlinearVariableName'
p8261
sS'default'
p8262
g3
sS'name'
p8263
S'variable'
p8264
sS'required'
p8265
I01
sS'group_name'
p8266
NsasS'name'
p8267
S'/BCs/PostprocessorDirichletBC'
p8268
sa(dp8269
S'description'
p8270
g3
sS'subblocks'
p8271
NsS'parameters'
p8272
(lp8273
(dp8274
S'description'
p8275
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8276
sS'cpp_type'
p8277
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8278
sS'default'
p8279
g3
sS'name'
p8280
S'boundary'
p8281
sS'required'
p8282
I01
sS'group_name'
p8283
Nsa(dp8284
S'description'
p8285
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8286
sS'cpp_type'
p8287
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8288
sS'default'
p8289
g3
sS'name'
p8290
S'control_tags'
p8291
sS'required'
p8292
I00
sS'group_name'
p8293
S'Advanced'
p8294
sa(dp8295
S'description'
p8296
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8297
sS'cpp_type'
p8298
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8299
sS'default'
p8300
g3
sS'name'
p8301
S'diag_save_in'
p8302
sS'required'
p8303
I00
sS'group_name'
p8304
S'Advanced'
p8305
sa(dp8306
S'description'
p8307
S'Set the enabled status of the MooseObject.\n'
p8308
sS'cpp_type'
p8309
S'bool'
p8310
sS'default'
p8311
S'1'
p8312
sS'name'
p8313
S'enable'
p8314
sS'required'
p8315
I00
sS'group_name'
p8316
S'Advanced'
p8317
sa(dp8318
S'description'
p8319
S'Determines whether this object is calculated using an implicit or explicit form\n'
p8320
sS'cpp_type'
p8321
S'bool'
p8322
sS'default'
p8323
S'1'
p8324
sS'name'
p8325
S'implicit'
p8326
sS'required'
p8327
I00
sS'group_name'
p8328
S'Advanced'
p8329
sa(dp8330
S'description'
p8331
S'The postprocessor to use for value of the gradient on the boundary.\n'
p8332
sS'cpp_type'
p8333
S'PostprocessorName'
p8334
sS'default'
p8335
S'0'
p8336
sS'name'
p8337
S'postprocessor'
p8338
sS'required'
p8339
I00
sS'group_name'
p8340
Nsa(dp8341
S'description'
p8342
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8343
sS'cpp_type'
p8344
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8345
sS'default'
p8346
g3
sS'name'
p8347
S'save_in'
p8348
sS'required'
p8349
I00
sS'group_name'
p8350
S'Advanced'
p8351
sa(dp8352
S'description'
p8353
S'The seed for the master random number generator\n'
p8354
sS'cpp_type'
p8355
S'unsigned int'
p8356
sS'default'
p8357
S'0'
p8358
sS'name'
p8359
S'seed'
p8360
sS'required'
p8361
I00
sS'group_name'
p8362
S'Advanced'
p8363
sa(dp8364
S'description'
p8365
g3
sS'cpp_type'
p8366
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8367
sS'default'
p8368
S'PostprocessorNeumannBC'
p8369
sS'name'
p8370
S'type'
p8371
sS'required'
p8372
I00
sS'group_name'
p8373
Nsa(dp8374
S'description'
p8375
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8376
sS'cpp_type'
p8377
S'bool'
p8378
sS'default'
p8379
S'0'
p8380
sS'name'
p8381
S'use_displaced_mesh'
p8382
sS'required'
p8383
I00
sS'group_name'
p8384
S'Advanced'
p8385
sa(dp8386
S'description'
p8387
S'The name of the variable that this boundary condition applies to\n'
p8388
sS'cpp_type'
p8389
S'NonlinearVariableName'
p8390
sS'default'
p8391
g3
sS'name'
p8392
S'variable'
p8393
sS'required'
p8394
I01
sS'group_name'
p8395
NsasS'name'
p8396
S'/BCs/PostprocessorNeumannBC'
p8397
sa(dp8398
S'description'
p8399
g3
sS'subblocks'
p8400
NsS'parameters'
p8401
(lp8402
(dp8403
S'description'
p8404
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8405
sS'cpp_type'
p8406
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8407
sS'default'
p8408
g3
sS'name'
p8409
S'boundary'
p8410
sS'required'
p8411
I01
sS'group_name'
p8412
Nsa(dp8413
S'description'
p8414
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8415
sS'cpp_type'
p8416
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8417
sS'default'
p8418
g3
sS'name'
p8419
S'control_tags'
p8420
sS'required'
p8421
I00
sS'group_name'
p8422
S'Advanced'
p8423
sa(dp8424
S'description'
p8425
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8426
sS'cpp_type'
p8427
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8428
sS'default'
p8429
g3
sS'name'
p8430
S'diag_save_in'
p8431
sS'required'
p8432
I00
sS'group_name'
p8433
Nsa(dp8434
S'description'
p8435
S'Set the enabled status of the MooseObject.\n'
p8436
sS'cpp_type'
p8437
S'bool'
p8438
sS'default'
p8439
S'1'
p8440
sS'name'
p8441
S'enable'
p8442
sS'required'
p8443
I00
sS'group_name'
p8444
S'Advanced'
p8445
sa(dp8446
S'description'
p8447
S'Determines whether this object is calculated using an implicit or explicit form\n'
p8448
sS'cpp_type'
p8449
S'bool'
p8450
sS'default'
p8451
S'1'
p8452
sS'name'
p8453
S'implicit'
p8454
sS'required'
p8455
I00
sS'group_name'
p8456
S'Advanced'
p8457
sa(dp8458
S'description'
p8459
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8460
sS'cpp_type'
p8461
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8462
sS'default'
p8463
g3
sS'name'
p8464
S'save_in'
p8465
sS'required'
p8466
I00
sS'group_name'
p8467
Nsa(dp8468
S'description'
p8469
S'The seed for the master random number generator\n'
p8470
sS'cpp_type'
p8471
S'unsigned int'
p8472
sS'default'
p8473
S'0'
p8474
sS'name'
p8475
S'seed'
p8476
sS'required'
p8477
I00
sS'group_name'
p8478
S'Advanced'
p8479
sa(dp8480
S'description'
p8481
g3
sS'cpp_type'
p8482
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8483
sS'default'
p8484
S'PresetBC'
p8485
sS'name'
p8486
S'type'
p8487
sS'required'
p8488
I00
sS'group_name'
p8489
Nsa(dp8490
S'description'
p8491
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8492
sS'cpp_type'
p8493
S'bool'
p8494
sS'default'
p8495
S'0'
p8496
sS'name'
p8497
S'use_displaced_mesh'
p8498
sS'required'
p8499
I00
sS'group_name'
p8500
S'Advanced'
p8501
sa(dp8502
S'description'
p8503
S'Value of the BC\n'
p8504
sS'cpp_type'
p8505
S'double'
p8506
sS'default'
p8507
g3
sS'name'
p8508
S'value'
p8509
sS'required'
p8510
I01
sS'group_name'
p8511
Nsa(dp8512
S'description'
p8513
S'The name of the variable that this boundary condition applies to\n'
p8514
sS'cpp_type'
p8515
S'NonlinearVariableName'
p8516
sS'default'
p8517
g3
sS'name'
p8518
S'variable'
p8519
sS'required'
p8520
I01
sS'group_name'
p8521
NsasS'name'
p8522
S'/BCs/PresetBC'
p8523
sa(dp8524
S'description'
p8525
g3
sS'subblocks'
p8526
NsS'parameters'
p8527
(lp8528
(dp8529
S'description'
p8530
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8531
sS'cpp_type'
p8532
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8533
sS'default'
p8534
g3
sS'name'
p8535
S'boundary'
p8536
sS'required'
p8537
I01
sS'group_name'
p8538
Nsa(dp8539
S'description'
p8540
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8541
sS'cpp_type'
p8542
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8543
sS'default'
p8544
g3
sS'name'
p8545
S'control_tags'
p8546
sS'required'
p8547
I00
sS'group_name'
p8548
S'Advanced'
p8549
sa(dp8550
S'description'
p8551
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8552
sS'cpp_type'
p8553
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8554
sS'default'
p8555
g3
sS'name'
p8556
S'diag_save_in'
p8557
sS'required'
p8558
I00
sS'group_name'
p8559
Nsa(dp8560
S'description'
p8561
g3
sS'cpp_type'
p8562
S'double'
p8563
sS'default'
p8564
S'0'
p8565
sS'name'
p8566
S'duration'
p8567
sS'required'
p8568
I00
sS'group_name'
p8569
Nsa(dp8570
S'description'
p8571
S'Set the enabled status of the MooseObject.\n'
p8572
sS'cpp_type'
p8573
S'bool'
p8574
sS'default'
p8575
S'1'
p8576
sS'name'
p8577
S'enable'
p8578
sS'required'
p8579
I00
sS'group_name'
p8580
S'Advanced'
p8581
sa(dp8582
S'description'
p8583
g3
sS'cpp_type'
p8584
S'double'
p8585
sS'default'
p8586
S'0'
p8587
sS'name'
p8588
S'final'
p8589
sS'required'
p8590
I00
sS'group_name'
p8591
Nsa(dp8592
S'description'
p8593
S'Determines whether this object is calculated using an implicit or explicit form\n'
p8594
sS'cpp_type'
p8595
S'bool'
p8596
sS'default'
p8597
S'1'
p8598
sS'name'
p8599
S'implicit'
p8600
sS'required'
p8601
I00
sS'group_name'
p8602
S'Advanced'
p8603
sa(dp8604
S'description'
p8605
g3
sS'cpp_type'
p8606
S'double'
p8607
sS'default'
p8608
S'0'
p8609
sS'name'
p8610
S'initial'
p8611
sS'required'
p8612
I00
sS'group_name'
p8613
Nsa(dp8614
S'description'
p8615
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8616
sS'cpp_type'
p8617
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8618
sS'default'
p8619
g3
sS'name'
p8620
S'save_in'
p8621
sS'required'
p8622
I00
sS'group_name'
p8623
Nsa(dp8624
S'description'
p8625
S'The seed for the master random number generator\n'
p8626
sS'cpp_type'
p8627
S'unsigned int'
p8628
sS'default'
p8629
S'0'
p8630
sS'name'
p8631
S'seed'
p8632
sS'required'
p8633
I00
sS'group_name'
p8634
S'Advanced'
p8635
sa(dp8636
S'description'
p8637
g3
sS'cpp_type'
p8638
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8639
sS'default'
p8640
S'SinDirichletBC'
p8641
sS'name'
p8642
S'type'
p8643
sS'required'
p8644
I00
sS'group_name'
p8645
Nsa(dp8646
S'description'
p8647
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8648
sS'cpp_type'
p8649
S'bool'
p8650
sS'default'
p8651
S'0'
p8652
sS'name'
p8653
S'use_displaced_mesh'
p8654
sS'required'
p8655
I00
sS'group_name'
p8656
S'Advanced'
p8657
sa(dp8658
S'description'
p8659
S'The name of the variable that this boundary condition applies to\n'
p8660
sS'cpp_type'
p8661
S'NonlinearVariableName'
p8662
sS'default'
p8663
g3
sS'name'
p8664
S'variable'
p8665
sS'required'
p8666
I01
sS'group_name'
p8667
NsasS'name'
p8668
S'/BCs/SinDirichletBC'
p8669
sa(dp8670
S'description'
p8671
g3
sS'subblocks'
p8672
NsS'parameters'
p8673
(lp8674
(dp8675
S'description'
p8676
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8677
sS'cpp_type'
p8678
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8679
sS'default'
p8680
g3
sS'name'
p8681
S'boundary'
p8682
sS'required'
p8683
I01
sS'group_name'
p8684
Nsa(dp8685
S'description'
p8686
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8687
sS'cpp_type'
p8688
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8689
sS'default'
p8690
g3
sS'name'
p8691
S'control_tags'
p8692
sS'required'
p8693
I00
sS'group_name'
p8694
S'Advanced'
p8695
sa(dp8696
S'description'
p8697
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8698
sS'cpp_type'
p8699
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8700
sS'default'
p8701
g3
sS'name'
p8702
S'diag_save_in'
p8703
sS'required'
p8704
I00
sS'group_name'
p8705
S'Advanced'
p8706
sa(dp8707
S'description'
p8708
S'The duration of the ramp\n'
p8709
sS'cpp_type'
p8710
S'double'
p8711
sS'default'
p8712
S'0'
p8713
sS'name'
p8714
S'duration'
p8715
sS'required'
p8716
I00
sS'group_name'
p8717
Nsa(dp8718
S'description'
p8719
S'Set the enabled status of the MooseObject.\n'
p8720
sS'cpp_type'
p8721
S'bool'
p8722
sS'default'
p8723
S'1'
p8724
sS'name'
p8725
S'enable'
p8726
sS'required'
p8727
I00
sS'group_name'
p8728
S'Advanced'
p8729
sa(dp8730
S'description'
p8731
S'The final value of the gradient on the boundary\n'
p8732
sS'cpp_type'
p8733
S'double'
p8734
sS'default'
p8735
S'0'
p8736
sS'name'
p8737
S'final'
p8738
sS'required'
p8739
I00
sS'group_name'
p8740
Nsa(dp8741
S'description'
p8742
S'Determines whether this object is calculated using an implicit or explicit form\n'
p8743
sS'cpp_type'
p8744
S'bool'
p8745
sS'default'
p8746
S'1'
p8747
sS'name'
p8748
S'implicit'
p8749
sS'required'
p8750
I00
sS'group_name'
p8751
S'Advanced'
p8752
sa(dp8753
S'description'
p8754
S'The initial value of the gradient on the boundary\n'
p8755
sS'cpp_type'
p8756
S'double'
p8757
sS'default'
p8758
S'0'
p8759
sS'name'
p8760
S'initial'
p8761
sS'required'
p8762
I00
sS'group_name'
p8763
Nsa(dp8764
S'description'
p8765
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8766
sS'cpp_type'
p8767
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8768
sS'default'
p8769
g3
sS'name'
p8770
S'save_in'
p8771
sS'required'
p8772
I00
sS'group_name'
p8773
S'Advanced'
p8774
sa(dp8775
S'description'
p8776
S'The seed for the master random number generator\n'
p8777
sS'cpp_type'
p8778
S'unsigned int'
p8779
sS'default'
p8780
S'0'
p8781
sS'name'
p8782
S'seed'
p8783
sS'required'
p8784
I00
sS'group_name'
p8785
S'Advanced'
p8786
sa(dp8787
S'description'
p8788
g3
sS'cpp_type'
p8789
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8790
sS'default'
p8791
S'SinNeumannBC'
p8792
sS'name'
p8793
S'type'
p8794
sS'required'
p8795
I00
sS'group_name'
p8796
Nsa(dp8797
S'description'
p8798
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8799
sS'cpp_type'
p8800
S'bool'
p8801
sS'default'
p8802
S'0'
p8803
sS'name'
p8804
S'use_displaced_mesh'
p8805
sS'required'
p8806
I00
sS'group_name'
p8807
S'Advanced'
p8808
sa(dp8809
S'description'
p8810
S'The name of the variable that this boundary condition applies to\n'
p8811
sS'cpp_type'
p8812
S'NonlinearVariableName'
p8813
sS'default'
p8814
g3
sS'name'
p8815
S'variable'
p8816
sS'required'
p8817
I01
sS'group_name'
p8818
NsasS'name'
p8819
S'/BCs/SinNeumannBC'
p8820
sa(dp8821
S'description'
p8822
g3
sS'subblocks'
p8823
NsS'parameters'
p8824
(lp8825
(dp8826
S'description'
p8827
S'No idea.\n'
p8828
sS'cpp_type'
p8829
S'double'
p8830
sS'default'
p8831
S'1'
p8832
sS'name'
p8833
S'alpha'
p8834
sS'required'
p8835
I00
sS'group_name'
p8836
Nsa(dp8837
S'description'
p8838
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8839
sS'cpp_type'
p8840
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8841
sS'default'
p8842
g3
sS'name'
p8843
S'boundary'
p8844
sS'required'
p8845
I01
sS'group_name'
p8846
Nsa(dp8847
S'description'
p8848
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8849
sS'cpp_type'
p8850
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8851
sS'default'
p8852
g3
sS'name'
p8853
S'control_tags'
p8854
sS'required'
p8855
I00
sS'group_name'
p8856
S'Advanced'
p8857
sa(dp8858
S'description'
p8859
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8860
sS'cpp_type'
p8861
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8862
sS'default'
p8863
g3
sS'name'
p8864
S'diag_save_in'
p8865
sS'required'
p8866
I00
sS'group_name'
p8867
S'Advanced'
p8868
sa(dp8869
S'description'
p8870
S'Set the enabled status of the MooseObject.\n'
p8871
sS'cpp_type'
p8872
S'bool'
p8873
sS'default'
p8874
S'1'
p8875
sS'name'
p8876
S'enable'
p8877
sS'required'
p8878
I00
sS'group_name'
p8879
S'Advanced'
p8880
sa(dp8881
S'description'
p8882
S'Determines whether this object is calculated using an implicit or explicit form\n'
p8883
sS'cpp_type'
p8884
S'bool'
p8885
sS'default'
p8886
S'1'
p8887
sS'name'
p8888
S'implicit'
p8889
sS'required'
p8890
I00
sS'group_name'
p8891
S'Advanced'
p8892
sa(dp8893
S'description'
p8894
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8895
sS'cpp_type'
p8896
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8897
sS'default'
p8898
g3
sS'name'
p8899
S'save_in'
p8900
sS'required'
p8901
I00
sS'group_name'
p8902
S'Advanced'
p8903
sa(dp8904
S'description'
p8905
S'The seed for the master random number generator\n'
p8906
sS'cpp_type'
p8907
S'unsigned int'
p8908
sS'default'
p8909
S'0'
p8910
sS'name'
p8911
S'seed'
p8912
sS'required'
p8913
I00
sS'group_name'
p8914
S'Advanced'
p8915
sa(dp8916
S'description'
p8917
g3
sS'cpp_type'
p8918
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8919
sS'default'
p8920
S'VacuumBC'
p8921
sS'name'
p8922
S'type'
p8923
sS'required'
p8924
I00
sS'group_name'
p8925
Nsa(dp8926
S'description'
p8927
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8928
sS'cpp_type'
p8929
S'bool'
p8930
sS'default'
p8931
S'0'
p8932
sS'name'
p8933
S'use_displaced_mesh'
p8934
sS'required'
p8935
I00
sS'group_name'
p8936
S'Advanced'
p8937
sa(dp8938
S'description'
p8939
S'The name of the variable that this boundary condition applies to\n'
p8940
sS'cpp_type'
p8941
S'NonlinearVariableName'
p8942
sS'default'
p8943
g3
sS'name'
p8944
S'variable'
p8945
sS'required'
p8946
I01
sS'group_name'
p8947
NsasS'name'
p8948
S'/BCs/VacuumBC'
p8949
sa(dp8950
S'description'
p8951
g3
sS'subblocks'
p8952
NsS'parameters'
p8953
(lp8954
(dp8955
S'description'
p8956
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8957
sS'cpp_type'
p8958
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8959
sS'default'
p8960
g3
sS'name'
p8961
S'boundary'
p8962
sS'required'
p8963
I01
sS'group_name'
p8964
Nsa(dp8965
S'description'
p8966
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p8967
sS'cpp_type'
p8968
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p8969
sS'default'
p8970
g3
sS'name'
p8971
S'control_tags'
p8972
sS'required'
p8973
I00
sS'group_name'
p8974
S'Advanced'
p8975
sa(dp8976
S'description'
p8977
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8978
sS'cpp_type'
p8979
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8980
sS'default'
p8981
g3
sS'name'
p8982
S'diag_save_in'
p8983
sS'required'
p8984
I00
sS'group_name'
p8985
S'Advanced'
p8986
sa(dp8987
S'description'
p8988
S'Set the enabled status of the MooseObject.\n'
p8989
sS'cpp_type'
p8990
S'bool'
p8991
sS'default'
p8992
S'1'
p8993
sS'name'
p8994
S'enable'
p8995
sS'required'
p8996
I00
sS'group_name'
p8997
S'Advanced'
p8998
sa(dp8999
S'description'
p9000
S'Determines whether this object is calculated using an implicit or explicit form\n'
p9001
sS'cpp_type'
p9002
S'bool'
p9003
sS'default'
p9004
S'1'
p9005
sS'name'
p9006
S'implicit'
p9007
sS'required'
p9008
I00
sS'group_name'
p9009
S'Advanced'
p9010
sa(dp9011
S'description'
p9012
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p9013
sS'cpp_type'
p9014
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p9015
sS'default'
p9016
g3
sS'name'
p9017
S'save_in'
p9018
sS'required'
p9019
I00
sS'group_name'
p9020
S'Advanced'
p9021
sa(dp9022
S'description'
p9023
S'The seed for the master random number generator\n'
p9024
sS'cpp_type'
p9025
S'unsigned int'
p9026
sS'default'
p9027
S'0'
p9028
sS'name'
p9029
S'seed'
p9030
sS'required'
p9031
I00
sS'group_name'
p9032
S'Advanced'
p9033
sa(dp9034
S'description'
p9035
g3
sS'cpp_type'
p9036
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9037
sS'default'
p9038
S'VectorNeumannBC'
p9039
sS'name'
p9040
S'type'
p9041
sS'required'
p9042
I00
sS'group_name'
p9043
Nsa(dp9044
S'description'
p9045
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9046
sS'cpp_type'
p9047
S'bool'
p9048
sS'default'
p9049
S'0'
p9050
sS'name'
p9051
S'use_displaced_mesh'
p9052
sS'required'
p9053
I00
sS'group_name'
p9054
S'Advanced'
p9055
sa(dp9056
S'description'
p9057
S'The name of the variable that this boundary condition applies to\n'
p9058
sS'cpp_type'
p9059
S'NonlinearVariableName'
p9060
sS'default'
p9061
g3
sS'name'
p9062
S'variable'
p9063
sS'required'
p9064
I01
sS'group_name'
p9065
Nsa(dp9066
S'description'
p9067
S'vector this BC should act in\n'
p9068
sS'cpp_type'
p9069
S'libMesh::VectorValue<double>'
p9070
sS'default'
p9071
S'0 0 0'
p9072
sS'name'
p9073
S'vector_value'
p9074
sS'required'
p9075
I00
sS'group_name'
p9076
NsasS'name'
p9077
S'/BCs/VectorNeumannBC'
p9078
sa(dp9079
S'description'
p9080
g3
sS'subblocks'
p9081
NsS'parameters'
p9082
(lp9083
(dp9084
S'description'
p9085
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9086
sS'cpp_type'
p9087
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9088
sS'default'
p9089
g3
sS'name'
p9090
S'boundary'
p9091
sS'required'
p9092
I01
sS'group_name'
p9093
Nsa(dp9094
S'description'
p9095
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9096
sS'cpp_type'
p9097
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p9098
sS'default'
p9099
g3
sS'name'
p9100
S'control_tags'
p9101
sS'required'
p9102
I00
sS'group_name'
p9103
S'Advanced'
p9104
sa(dp9105
S'description'
p9106
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p9107
sS'cpp_type'
p9108
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p9109
sS'default'
p9110
g3
sS'name'
p9111
S'diag_save_in'
p9112
sS'required'
p9113
I00
sS'group_name'
p9114
S'Advanced'
p9115
sa(dp9116
S'description'
p9117
S'Set the enabled status of the MooseObject.\n'
p9118
sS'cpp_type'
p9119
S'bool'
p9120
sS'default'
p9121
S'1'
p9122
sS'name'
p9123
S'enable'
p9124
sS'required'
p9125
I00
sS'group_name'
p9126
S'Advanced'
p9127
sa(dp9128
S'description'
p9129
S'Determines whether this object is calculated using an implicit or explicit form\n'
p9130
sS'cpp_type'
p9131
S'bool'
p9132
sS'default'
p9133
S'1'
p9134
sS'name'
p9135
S'implicit'
p9136
sS'required'
p9137
I00
sS'group_name'
p9138
S'Advanced'
p9139
sa(dp9140
S'description'
p9141
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p9142
sS'cpp_type'
p9143
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p9144
sS'default'
p9145
g3
sS'name'
p9146
S'save_in'
p9147
sS'required'
p9148
I00
sS'group_name'
p9149
S'Advanced'
p9150
sa(dp9151
S'description'
p9152
S'The seed for the master random number generator\n'
p9153
sS'cpp_type'
p9154
S'unsigned int'
p9155
sS'default'
p9156
S'0'
p9157
sS'name'
p9158
S'seed'
p9159
sS'required'
p9160
I00
sS'group_name'
p9161
S'Advanced'
p9162
sa(dp9163
S'description'
p9164
g3
sS'cpp_type'
p9165
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9166
sS'default'
p9167
S'WeakGradientBC'
p9168
sS'name'
p9169
S'type'
p9170
sS'required'
p9171
I00
sS'group_name'
p9172
Nsa(dp9173
S'description'
p9174
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9175
sS'cpp_type'
p9176
S'bool'
p9177
sS'default'
p9178
S'0'
p9179
sS'name'
p9180
S'use_displaced_mesh'
p9181
sS'required'
p9182
I00
sS'group_name'
p9183
S'Advanced'
p9184
sa(dp9185
S'description'
p9186
S'The name of the variable that this boundary condition applies to\n'
p9187
sS'cpp_type'
p9188
S'NonlinearVariableName'
p9189
sS'default'
p9190
g3
sS'name'
p9191
S'variable'
p9192
sS'required'
p9193
I01
sS'group_name'
p9194
NsasS'name'
p9195
S'/BCs/WeakGradientBC'
p9196
sasS'parameters'
p9197
NsS'name'
p9198
S'/BCs'
p9199
sa(dp9200
S'description'
p9201
g3
sS'subblocks'
p9202
(lp9203
(dp9204
S'description'
p9205
g3
sS'subblocks'
p9206
NsS'parameters'
p9207
(lp9208
(dp9209
S'description'
p9210
S'A string representing the Moose Object that will be built by this Action\n'
p9211
sS'cpp_type'
p9212
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9213
sS'default'
p9214
g3
sS'name'
p9215
S'type'
p9216
sS'required'
p9217
I01
sS'group_name'
p9218
NsasS'name'
p9219
S'/Bounds/*'
p9220
sa(dp9221
S'description'
p9222
g3
sS'subblocks'
p9223
NsS'parameters'
p9224
(lp9225
(dp9226
S'description'
p9227
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9228
sS'cpp_type'
p9229
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9230
sS'default'
p9231
g3
sS'name'
p9232
S'block'
p9233
sS'required'
p9234
I00
sS'group_name'
p9235
Nsa(dp9236
S'description'
p9237
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9238
sS'cpp_type'
p9239
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9240
sS'default'
p9241
g3
sS'name'
p9242
S'boundary'
p9243
sS'required'
p9244
I00
sS'group_name'
p9245
Nsa(dp9246
S'description'
p9247
S'The variable to be bounded\n'
p9248
sS'cpp_type'
p9249
S'std::vector<VariableName>'
p9250
sS'default'
p9251
g3
sS'name'
p9252
S'bounded_variable'
p9253
sS'required'
p9254
I01
sS'group_name'
p9255
Nsa(dp9256
S'description'
p9257
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9258
sS'cpp_type'
p9259
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p9260
sS'default'
p9261
g3
sS'name'
p9262
S'control_tags'
p9263
sS'required'
p9264
I00
sS'group_name'
p9265
S'Advanced'
p9266
sa(dp9267
S'description'
p9268
S'Set the enabled status of the MooseObject.\n'
p9269
sS'cpp_type'
p9270
S'bool'
p9271
sS'default'
p9272
S'1'
p9273
sS'name'
p9274
S'enable'
p9275
sS'required'
p9276
I00
sS'group_name'
p9277
S'Advanced'
p9278
sa(dp9279
S'name'
p9280
S'execute_on'
p9281
sS'cpp_type'
p9282
S'MultiMooseEnum'
p9283
sS'default'
p9284
S'LINEAR'
p9285
sS'description'
p9286
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9287
sS'required'
p9288
I00
sS'options'
p9289
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9290
sS'group_name'
p9291
Nsa(dp9292
S'description'
p9293
S'The lower bound for the variable\n'
p9294
sS'cpp_type'
p9295
S'double'
p9296
sS'default'
p9297
g3
sS'name'
p9298
S'lower'
p9299
sS'required'
p9300
I00
sS'group_name'
p9301
Nsa(dp9302
S'description'
p9303
S'The seed for the master random number generator\n'
p9304
sS'cpp_type'
p9305
S'unsigned int'
p9306
sS'default'
p9307
S'0'
p9308
sS'name'
p9309
S'seed'
p9310
sS'required'
p9311
I00
sS'group_name'
p9312
S'Advanced'
p9313
sa(dp9314
S'description'
p9315
g3
sS'cpp_type'
p9316
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9317
sS'default'
p9318
S'BoundsAux'
p9319
sS'name'
p9320
S'type'
p9321
sS'required'
p9322
I00
sS'group_name'
p9323
Nsa(dp9324
S'description'
p9325
S'The upper bound for the variable\n'
p9326
sS'cpp_type'
p9327
S'double'
p9328
sS'default'
p9329
g3
sS'name'
p9330
S'upper'
p9331
sS'required'
p9332
I00
sS'group_name'
p9333
Nsa(dp9334
S'description'
p9335
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9336
sS'cpp_type'
p9337
S'bool'
p9338
sS'default'
p9339
S'0'
p9340
sS'name'
p9341
S'use_displaced_mesh'
p9342
sS'required'
p9343
I00
sS'group_name'
p9344
S'Advanced'
p9345
sa(dp9346
S'description'
p9347
S'The name of the variable that this object applies to\n'
p9348
sS'cpp_type'
p9349
S'AuxVariableName'
p9350
sS'default'
p9351
g3
sS'name'
p9352
S'variable'
p9353
sS'required'
p9354
I01
sS'group_name'
p9355
NsasS'name'
p9356
S'/Bounds/BoundsAux'
p9357
sa(dp9358
S'description'
p9359
g3
sS'subblocks'
p9360
NsS'parameters'
p9361
(lp9362
(dp9363
S'description'
p9364
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9365
sS'cpp_type'
p9366
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9367
sS'default'
p9368
g3
sS'name'
p9369
S'block'
p9370
sS'required'
p9371
I00
sS'group_name'
p9372
Nsa(dp9373
S'description'
p9374
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9375
sS'cpp_type'
p9376
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9377
sS'default'
p9378
g3
sS'name'
p9379
S'boundary'
p9380
sS'required'
p9381
I00
sS'group_name'
p9382
Nsa(dp9383
S'description'
p9384
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9385
sS'cpp_type'
p9386
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p9387
sS'default'
p9388
g3
sS'name'
p9389
S'control_tags'
p9390
sS'required'
p9391
I00
sS'group_name'
p9392
S'Advanced'
p9393
sa(dp9394
S'description'
p9395
S'Set the enabled status of the MooseObject.\n'
p9396
sS'cpp_type'
p9397
S'bool'
p9398
sS'default'
p9399
S'1'
p9400
sS'name'
p9401
S'enable'
p9402
sS'required'
p9403
I00
sS'group_name'
p9404
S'Advanced'
p9405
sa(dp9406
S'name'
p9407
S'execute_on'
p9408
sS'cpp_type'
p9409
S'MultiMooseEnum'
p9410
sS'default'
p9411
S'LINEAR'
p9412
sS'description'
p9413
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9414
sS'required'
p9415
I00
sS'options'
p9416
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9417
sS'group_name'
p9418
Nsa(dp9419
S'description'
p9420
S'The seed for the master random number generator\n'
p9421
sS'cpp_type'
p9422
S'unsigned int'
p9423
sS'default'
p9424
S'0'
p9425
sS'name'
p9426
S'seed'
p9427
sS'required'
p9428
I00
sS'group_name'
p9429
S'Advanced'
p9430
sa(dp9431
S'description'
p9432
g3
sS'cpp_type'
p9433
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9434
sS'default'
p9435
S'ConstantAux'
p9436
sS'name'
p9437
S'type'
p9438
sS'required'
p9439
I00
sS'group_name'
p9440
Nsa(dp9441
S'description'
p9442
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9443
sS'cpp_type'
p9444
S'bool'
p9445
sS'default'
p9446
S'0'
p9447
sS'name'
p9448
S'use_displaced_mesh'
p9449
sS'required'
p9450
I00
sS'group_name'
p9451
S'Advanced'
p9452
sa(dp9453
S'description'
p9454
S'Some constant value that can be read from the input file\n'
p9455
sS'cpp_type'
p9456
S'double'
p9457
sS'default'
p9458
S'0'
p9459
sS'name'
p9460
S'value'
p9461
sS'required'
p9462
I00
sS'group_name'
p9463
Nsa(dp9464
S'description'
p9465
S'The name of the variable that this object applies to\n'
p9466
sS'cpp_type'
p9467
S'AuxVariableName'
p9468
sS'default'
p9469
g3
sS'name'
p9470
S'variable'
p9471
sS'required'
p9472
I01
sS'group_name'
p9473
NsasS'name'
p9474
S'/Bounds/ConstantAux'
p9475
sa(dp9476
S'description'
p9477
g3
sS'subblocks'
p9478
NsS'parameters'
p9479
(lp9480
(dp9481
S'description'
p9482
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9483
sS'cpp_type'
p9484
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9485
sS'default'
p9486
g3
sS'name'
p9487
S'block'
p9488
sS'required'
p9489
I00
sS'group_name'
p9490
Nsa(dp9491
S'description'
p9492
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9493
sS'cpp_type'
p9494
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9495
sS'default'
p9496
g3
sS'name'
p9497
S'boundary'
p9498
sS'required'
p9499
I00
sS'group_name'
p9500
Nsa(dp9501
S'description'
p9502
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9503
sS'cpp_type'
p9504
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p9505
sS'default'
p9506
g3
sS'name'
p9507
S'control_tags'
p9508
sS'required'
p9509
I00
sS'group_name'
p9510
S'Advanced'
p9511
sa(dp9512
S'description'
p9513
S'The variable that is being debugged.\n'
p9514
sS'cpp_type'
p9515
S'NonlinearVariableName'
p9516
sS'default'
p9517
g3
sS'name'
p9518
S'debug_variable'
p9519
sS'required'
p9520
I01
sS'group_name'
p9521
Nsa(dp9522
S'description'
p9523
S'Set the enabled status of the MooseObject.\n'
p9524
sS'cpp_type'
p9525
S'bool'
p9526
sS'default'
p9527
S'1'
p9528
sS'name'
p9529
S'enable'
p9530
sS'required'
p9531
I00
sS'group_name'
p9532
S'Advanced'
p9533
sa(dp9534
S'name'
p9535
S'execute_on'
p9536
sS'cpp_type'
p9537
S'MultiMooseEnum'
p9538
sS'default'
p9539
S'LINEAR'
p9540
sS'description'
p9541
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9542
sS'required'
p9543
I00
sS'options'
p9544
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9545
sS'group_name'
p9546
Nsa(dp9547
S'description'
p9548
S'The seed for the master random number generator\n'
p9549
sS'cpp_type'
p9550
S'unsigned int'
p9551
sS'default'
p9552
S'0'
p9553
sS'name'
p9554
S'seed'
p9555
sS'required'
p9556
I00
sS'group_name'
p9557
S'Advanced'
p9558
sa(dp9559
S'description'
p9560
g3
sS'cpp_type'
p9561
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9562
sS'default'
p9563
S'DebugResidualAux'
p9564
sS'name'
p9565
S'type'
p9566
sS'required'
p9567
I00
sS'group_name'
p9568
Nsa(dp9569
S'description'
p9570
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9571
sS'cpp_type'
p9572
S'bool'
p9573
sS'default'
p9574
S'0'
p9575
sS'name'
p9576
S'use_displaced_mesh'
p9577
sS'required'
p9578
I00
sS'group_name'
p9579
S'Advanced'
p9580
sa(dp9581
S'description'
p9582
S'The name of the variable that this object applies to\n'
p9583
sS'cpp_type'
p9584
S'AuxVariableName'
p9585
sS'default'
p9586
g3
sS'name'
p9587
S'variable'
p9588
sS'required'
p9589
I01
sS'group_name'
p9590
NsasS'name'
p9591
S'/Bounds/DebugResidualAux'
p9592
sa(dp9593
S'description'
p9594
g3
sS'subblocks'
p9595
NsS'parameters'
p9596
(lp9597
(dp9598
S'description'
p9599
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9600
sS'cpp_type'
p9601
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9602
sS'default'
p9603
g3
sS'name'
p9604
S'block'
p9605
sS'required'
p9606
I00
sS'group_name'
p9607
Nsa(dp9608
S'description'
p9609
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9610
sS'cpp_type'
p9611
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9612
sS'default'
p9613
g3
sS'name'
p9614
S'boundary'
p9615
sS'required'
p9616
I00
sS'group_name'
p9617
Nsa(dp9618
S'description'
p9619
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9620
sS'cpp_type'
p9621
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p9622
sS'default'
p9623
g3
sS'name'
p9624
S'control_tags'
p9625
sS'required'
p9626
I00
sS'group_name'
p9627
S'Advanced'
p9628
sa(dp9629
S'description'
p9630
S'The variable to compute the norm of.\n'
p9631
sS'cpp_type'
p9632
S'std::vector<VariableName>'
p9633
sS'default'
p9634
g3
sS'name'
p9635
S'coupled_variable'
p9636
sS'required'
p9637
I01
sS'group_name'
p9638
Nsa(dp9639
S'description'
p9640
S'Set the enabled status of the MooseObject.\n'
p9641
sS'cpp_type'
p9642
S'bool'
p9643
sS'default'
p9644
S'1'
p9645
sS'name'
p9646
S'enable'
p9647
sS'required'
p9648
I00
sS'group_name'
p9649
S'Advanced'
p9650
sa(dp9651
S'name'
p9652
S'execute_on'
p9653
sS'cpp_type'
p9654
S'MultiMooseEnum'
p9655
sS'default'
p9656
S'LINEAR'
p9657
sS'description'
p9658
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9659
sS'required'
p9660
I00
sS'options'
p9661
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9662
sS'group_name'
p9663
Nsa(dp9664
S'description'
p9665
S'Function representing the exact solution\n'
p9666
sS'cpp_type'
p9667
S'FunctionName'
p9668
sS'default'
p9669
g3
sS'name'
p9670
S'function'
p9671
sS'required'
p9672
I01
sS'group_name'
p9673
Nsa(dp9674
S'description'
p9675
S'The exponent used in the norm.\n'
p9676
sS'cpp_type'
p9677
S'double'
p9678
sS'default'
p9679
S'2'
p9680
sS'name'
p9681
S'p'
p9682
sS'required'
p9683
I00
sS'group_name'
p9684
Nsa(dp9685
S'description'
p9686
S'The seed for the master random number generator\n'
p9687
sS'cpp_type'
p9688
S'unsigned int'
p9689
sS'default'
p9690
S'0'
p9691
sS'name'
p9692
S'seed'
p9693
sS'required'
p9694
I00
sS'group_name'
p9695
S'Advanced'
p9696
sa(dp9697
S'description'
p9698
g3
sS'cpp_type'
p9699
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9700
sS'default'
p9701
S'ElementH1ErrorFunctionAux'
p9702
sS'name'
p9703
S'type'
p9704
sS'required'
p9705
I00
sS'group_name'
p9706
Nsa(dp9707
S'description'
p9708
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9709
sS'cpp_type'
p9710
S'bool'
p9711
sS'default'
p9712
S'0'
p9713
sS'name'
p9714
S'use_displaced_mesh'
p9715
sS'required'
p9716
I00
sS'group_name'
p9717
S'Advanced'
p9718
sa(dp9719
S'description'
p9720
S'The name of the variable that this object applies to\n'
p9721
sS'cpp_type'
p9722
S'AuxVariableName'
p9723
sS'default'
p9724
g3
sS'name'
p9725
S'variable'
p9726
sS'required'
p9727
I01
sS'group_name'
p9728
NsasS'name'
p9729
S'/Bounds/ElementH1ErrorFunctionAux'
p9730
sa(dp9731
S'description'
p9732
g3
sS'subblocks'
p9733
NsS'parameters'
p9734
(lp9735
(dp9736
S'description'
p9737
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9738
sS'cpp_type'
p9739
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9740
sS'default'
p9741
g3
sS'name'
p9742
S'block'
p9743
sS'required'
p9744
I00
sS'group_name'
p9745
Nsa(dp9746
S'description'
p9747
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9748
sS'cpp_type'
p9749
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9750
sS'default'
p9751
g3
sS'name'
p9752
S'boundary'
p9753
sS'required'
p9754
I00
sS'group_name'
p9755
Nsa(dp9756
S'description'
p9757
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9758
sS'cpp_type'
p9759
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p9760
sS'default'
p9761
g3
sS'name'
p9762
S'control_tags'
p9763
sS'required'
p9764
I00
sS'group_name'
p9765
S'Advanced'
p9766
sa(dp9767
S'description'
p9768
S'The variable to compute the norm of.\n'
p9769
sS'cpp_type'
p9770
S'std::vector<VariableName>'
p9771
sS'default'
p9772
g3
sS'name'
p9773
S'coupled_variable'
p9774
sS'required'
p9775
I01
sS'group_name'
p9776
Nsa(dp9777
S'description'
p9778
S'Set the enabled status of the MooseObject.\n'
p9779
sS'cpp_type'
p9780
S'bool'
p9781
sS'default'
p9782
S'1'
p9783
sS'name'
p9784
S'enable'
p9785
sS'required'
p9786
I00
sS'group_name'
p9787
S'Advanced'
p9788
sa(dp9789
S'name'
p9790
S'execute_on'
p9791
sS'cpp_type'
p9792
S'MultiMooseEnum'
p9793
sS'default'
p9794
S'LINEAR'
p9795
sS'description'
p9796
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9797
sS'required'
p9798
I00
sS'options'
p9799
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9800
sS'group_name'
p9801
Nsa(dp9802
S'description'
p9803
S'Function representing the exact solution\n'
p9804
sS'cpp_type'
p9805
S'FunctionName'
p9806
sS'default'
p9807
g3
sS'name'
p9808
S'function'
p9809
sS'required'
p9810
I01
sS'group_name'
p9811
Nsa(dp9812
S'description'
p9813
S'The exponent used in the norm.\n'
p9814
sS'cpp_type'
p9815
S'double'
p9816
sS'default'
p9817
S'2'
p9818
sS'name'
p9819
S'p'
p9820
sS'required'
p9821
I00
sS'group_name'
p9822
Nsa(dp9823
S'description'
p9824
S'The seed for the master random number generator\n'
p9825
sS'cpp_type'
p9826
S'unsigned int'
p9827
sS'default'
p9828
S'0'
p9829
sS'name'
p9830
S'seed'
p9831
sS'required'
p9832
I00
sS'group_name'
p9833
S'Advanced'
p9834
sa(dp9835
S'description'
p9836
g3
sS'cpp_type'
p9837
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9838
sS'default'
p9839
S'ElementL2ErrorFunctionAux'
p9840
sS'name'
p9841
S'type'
p9842
sS'required'
p9843
I00
sS'group_name'
p9844
Nsa(dp9845
S'description'
p9846
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9847
sS'cpp_type'
p9848
S'bool'
p9849
sS'default'
p9850
S'0'
p9851
sS'name'
p9852
S'use_displaced_mesh'
p9853
sS'required'
p9854
I00
sS'group_name'
p9855
S'Advanced'
p9856
sa(dp9857
S'description'
p9858
S'The name of the variable that this object applies to\n'
p9859
sS'cpp_type'
p9860
S'AuxVariableName'
p9861
sS'default'
p9862
g3
sS'name'
p9863
S'variable'
p9864
sS'required'
p9865
I01
sS'group_name'
p9866
NsasS'name'
p9867
S'/Bounds/ElementL2ErrorFunctionAux'
p9868
sa(dp9869
S'description'
p9870
S'Compute the element size using Elem::hmin() or Elem::hmax() from libMesh.\n'
p9871
sS'subblocks'
p9872
NsS'parameters'
p9873
(lp9874
(dp9875
S'description'
p9876
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9877
sS'cpp_type'
p9878
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9879
sS'default'
p9880
g3
sS'name'
p9881
S'block'
p9882
sS'required'
p9883
I00
sS'group_name'
p9884
Nsa(dp9885
S'description'
p9886
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9887
sS'cpp_type'
p9888
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9889
sS'default'
p9890
g3
sS'name'
p9891
S'boundary'
p9892
sS'required'
p9893
I00
sS'group_name'
p9894
Nsa(dp9895
S'description'
p9896
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p9897
sS'cpp_type'
p9898
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p9899
sS'default'
p9900
g3
sS'name'
p9901
S'control_tags'
p9902
sS'required'
p9903
I00
sS'group_name'
p9904
S'Advanced'
p9905
sa(dp9906
S'description'
p9907
S'Set the enabled status of the MooseObject.\n'
p9908
sS'cpp_type'
p9909
S'bool'
p9910
sS'default'
p9911
S'1'
p9912
sS'name'
p9913
S'enable'
p9914
sS'required'
p9915
I00
sS'group_name'
p9916
S'Advanced'
p9917
sa(dp9918
S'name'
p9919
S'execute_on'
p9920
sS'cpp_type'
p9921
S'MultiMooseEnum'
p9922
sS'default'
p9923
S'LINEAR'
p9924
sS'description'
p9925
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9926
sS'required'
p9927
I00
sS'options'
p9928
S'none initial linear nonlinear timestep_end timestep_begin custom'
p9929
sS'group_name'
p9930
Nsa(dp9931
S'name'
p9932
S'method'
p9933
sS'cpp_type'
p9934
S'MooseEnum'
p9935
sS'default'
p9936
g3
sS'description'
p9937
S"The size calculation to perform ('min' or 'max').\n"
p9938
sS'required'
p9939
I01
sS'options'
p9940
S'min max'
p9941
sS'group_name'
p9942
Nsa(dp9943
S'description'
p9944
S'The seed for the master random number generator\n'
p9945
sS'cpp_type'
p9946
S'unsigned int'
p9947
sS'default'
p9948
S'0'
p9949
sS'name'
p9950
S'seed'
p9951
sS'required'
p9952
I00
sS'group_name'
p9953
S'Advanced'
p9954
sa(dp9955
S'description'
p9956
g3
sS'cpp_type'
p9957
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9958
sS'default'
p9959
S'ElementLengthAux'
p9960
sS'name'
p9961
S'type'
p9962
sS'required'
p9963
I00
sS'group_name'
p9964
Nsa(dp9965
S'description'
p9966
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9967
sS'cpp_type'
p9968
S'bool'
p9969
sS'default'
p9970
S'0'
p9971
sS'name'
p9972
S'use_displaced_mesh'
p9973
sS'required'
p9974
I00
sS'group_name'
p9975
S'Advanced'
p9976
sa(dp9977
S'description'
p9978
S'The name of the variable that this object applies to\n'
p9979
sS'cpp_type'
p9980
S'AuxVariableName'
p9981
sS'default'
p9982
g3
sS'name'
p9983
S'variable'
p9984
sS'required'
p9985
I01
sS'group_name'
p9986
NsasS'name'
p9987
S'/Bounds/ElementLengthAux'
p9988
sa(dp9989
S'description'
p9990
g3
sS'subblocks'
p9991
NsS'parameters'
p9992
(lp9993
(dp9994
S'description'
p9995
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9996
sS'cpp_type'
p9997
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9998
sS'default'
p9999
g3
sS'name'
p10000
S'block'
p10001
sS'required'
p10002
I00
sS'group_name'
p10003
Nsa(dp10004
S'description'
p10005
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10006
sS'cpp_type'
p10007
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10008
sS'default'
p10009
g3
sS'name'
p10010
S'boundary'
p10011
sS'required'
p10012
I00
sS'group_name'
p10013
Nsa(dp10014
S'description'
p10015
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10016
sS'cpp_type'
p10017
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p10018
sS'default'
p10019
g3
sS'name'
p10020
S'control_tags'
p10021
sS'required'
p10022
I00
sS'group_name'
p10023
S'Advanced'
p10024
sa(dp10025
S'description'
p10026
S'The variable to compute the norm of.\n'
p10027
sS'cpp_type'
p10028
S'std::vector<VariableName>'
p10029
sS'default'
p10030
g3
sS'name'
p10031
S'coupled_variable'
p10032
sS'required'
p10033
I01
sS'group_name'
p10034
Nsa(dp10035
S'description'
p10036
S'Set the enabled status of the MooseObject.\n'
p10037
sS'cpp_type'
p10038
S'bool'
p10039
sS'default'
p10040
S'1'
p10041
sS'name'
p10042
S'enable'
p10043
sS'required'
p10044
I00
sS'group_name'
p10045
S'Advanced'
p10046
sa(dp10047
S'name'
p10048
S'execute_on'
p10049
sS'cpp_type'
p10050
S'MultiMooseEnum'
p10051
sS'default'
p10052
S'LINEAR'
p10053
sS'description'
p10054
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10055
sS'required'
p10056
I00
sS'options'
p10057
S'none initial linear nonlinear timestep_end timestep_begin custom'
p10058
sS'group_name'
p10059
Nsa(dp10060
S'description'
p10061
S'The exponent used in the norm.\n'
p10062
sS'cpp_type'
p10063
S'double'
p10064
sS'default'
p10065
S'2'
p10066
sS'name'
p10067
S'p'
p10068
sS'required'
p10069
I00
sS'group_name'
p10070
Nsa(dp10071
S'description'
p10072
S'The seed for the master random number generator\n'
p10073
sS'cpp_type'
p10074
S'unsigned int'
p10075
sS'default'
p10076
S'0'
p10077
sS'name'
p10078
S'seed'
p10079
sS'required'
p10080
I00
sS'group_name'
p10081
S'Advanced'
p10082
sa(dp10083
S'description'
p10084
g3
sS'cpp_type'
p10085
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10086
sS'default'
p10087
S'ElementLpNormAux'
p10088
sS'name'
p10089
S'type'
p10090
sS'required'
p10091
I00
sS'group_name'
p10092
Nsa(dp10093
S'description'
p10094
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10095
sS'cpp_type'
p10096
S'bool'
p10097
sS'default'
p10098
S'0'
p10099
sS'name'
p10100
S'use_displaced_mesh'
p10101
sS'required'
p10102
I00
sS'group_name'
p10103
S'Advanced'
p10104
sa(dp10105
S'description'
p10106
S'The name of the variable that this object applies to\n'
p10107
sS'cpp_type'
p10108
S'AuxVariableName'
p10109
sS'default'
p10110
g3
sS'name'
p10111
S'variable'
p10112
sS'required'
p10113
I01
sS'group_name'
p10114
NsasS'name'
p10115
S'/Bounds/ElementLpNormAux'
p10116
sa(dp10117
S'description'
p10118
g3
sS'subblocks'
p10119
NsS'parameters'
p10120
(lp10121
(dp10122
S'description'
p10123
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10124
sS'cpp_type'
p10125
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10126
sS'default'
p10127
g3
sS'name'
p10128
S'block'
p10129
sS'required'
p10130
I00
sS'group_name'
p10131
Nsa(dp10132
S'description'
p10133
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10134
sS'cpp_type'
p10135
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10136
sS'default'
p10137
g3
sS'name'
p10138
S'boundary'
p10139
sS'required'
p10140
I00
sS'group_name'
p10141
Nsa(dp10142
S'description'
p10143
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10144
sS'cpp_type'
p10145
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p10146
sS'default'
p10147
g3
sS'name'
p10148
S'control_tags'
p10149
sS'required'
p10150
I00
sS'group_name'
p10151
S'Advanced'
p10152
sa(dp10153
S'description'
p10154
S'Set the enabled status of the MooseObject.\n'
p10155
sS'cpp_type'
p10156
S'bool'
p10157
sS'default'
p10158
S'1'
p10159
sS'name'
p10160
S'enable'
p10161
sS'required'
p10162
I00
sS'group_name'
p10163
S'Advanced'
p10164
sa(dp10165
S'name'
p10166
S'execute_on'
p10167
sS'cpp_type'
p10168
S'MultiMooseEnum'
p10169
sS'default'
p10170
S'LINEAR'
p10171
sS'description'
p10172
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10173
sS'required'
p10174
I00
sS'options'
p10175
S'none initial linear nonlinear timestep_end timestep_begin custom'
p10176
sS'group_name'
p10177
Nsa(dp10178
S'description'
p10179
S'The function to use as the value\n'
p10180
sS'cpp_type'
p10181
S'FunctionName'
p10182
sS'default'
p10183
g3
sS'name'
p10184
S'function'
p10185
sS'required'
p10186
I01
sS'group_name'
p10187
Nsa(dp10188
S'description'
p10189
S'The seed for the master random number generator\n'
p10190
sS'cpp_type'
p10191
S'unsigned int'
p10192
sS'default'
p10193
S'0'
p10194
sS'name'
p10195
S'seed'
p10196
sS'required'
p10197
I00
sS'group_name'
p10198
S'Advanced'
p10199
sa(dp10200
S'description'
p10201
g3
sS'cpp_type'
p10202
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10203
sS'default'
p10204
S'FunctionAux'
p10205
sS'name'
p10206
S'type'
p10207
sS'required'
p10208
I00
sS'group_name'
p10209
Nsa(dp10210
S'description'
p10211
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10212
sS'cpp_type'
p10213
S'bool'
p10214
sS'default'
p10215
S'0'
p10216
sS'name'
p10217
S'use_displaced_mesh'
p10218
sS'required'
p10219
I00
sS'group_name'
p10220
S'Advanced'
p10221
sa(dp10222
S'description'
p10223
S'The name of the variable that this object applies to\n'
p10224
sS'cpp_type'
p10225
S'AuxVariableName'
p10226
sS'default'
p10227
g3
sS'name'
p10228
S'variable'
p10229
sS'required'
p10230
I01
sS'group_name'
p10231
NsasS'name'
p10232
S'/Bounds/FunctionAux'
p10233
sa(dp10234
S'description'
p10235
g3
sS'subblocks'
p10236
NsS'parameters'
p10237
(lp10238
(dp10239
S'description'
p10240
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10241
sS'cpp_type'
p10242
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10243
sS'default'
p10244
g3
sS'name'
p10245
S'block'
p10246
sS'required'
p10247
I00
sS'group_name'
p10248
Nsa(dp10249
S'description'
p10250
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10251
sS'cpp_type'
p10252
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10253
sS'default'
p10254
g3
sS'name'
p10255
S'boundary'
p10256
sS'required'
p10257
I00
sS'group_name'
p10258
Nsa(dp10259
S'description'
p10260
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10261
sS'cpp_type'
p10262
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p10263
sS'default'
p10264
g3
sS'name'
p10265
S'control_tags'
p10266
sS'required'
p10267
I00
sS'group_name'
p10268
S'Advanced'
p10269
sa(dp10270
S'description'
p10271
S'Set the enabled status of the MooseObject.\n'
p10272
sS'cpp_type'
p10273
S'bool'
p10274
sS'default'
p10275
S'1'
p10276
sS'name'
p10277
S'enable'
p10278
sS'required'
p10279
I00
sS'group_name'
p10280
S'Advanced'
p10281
sa(dp10282
S'name'
p10283
S'execute_on'
p10284
sS'cpp_type'
p10285
S'MultiMooseEnum'
p10286
sS'default'
p10287
S'LINEAR'
p10288
sS'description'
p10289
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10290
sS'required'
p10291
I00
sS'options'
p10292
S'none initial linear nonlinear timestep_end timestep_begin custom'
p10293
sS'group_name'
p10294
Nsa(dp10295
S'description'
p10296
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p10297
sS'cpp_type'
p10298
S'double'
p10299
sS'default'
p10300
g3
sS'name'
p10301
S'normal_smoothing_distance'
p10302
sS'required'
p10303
I00
sS'group_name'
p10304
Nsa(dp10305
S'description'
p10306
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p10307
sS'cpp_type'
p10308
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10309
sS'default'
p10310
g3
sS'name'
p10311
S'normal_smoothing_method'
p10312
sS'required'
p10313
I00
sS'group_name'
p10314
Nsa(dp10315
S'name'
p10316
S'order'
p10317
sS'cpp_type'
p10318
S'MooseEnum'
p10319
sS'default'
p10320
S'FIRST'
p10321
sS'description'
p10322
S'The finite element order\n'
p10323
sS'required'
p10324
I00
sS'options'
p10325
S'FIRST SECOND THIRD FOURTH'
p10326
sS'group_name'
p10327
Nsa(dp10328
S'description'
p10329
S'The boundary on the other side of a gap.\n'
p10330
sS'cpp_type'
p10331
S'BoundaryName'
p10332
sS'default'
p10333
g3
sS'name'
p10334
S'paired_boundary'
p10335
sS'required'
p10336
I01
sS'group_name'
p10337
Nsa(dp10338
S'description'
p10339
S'The variable to get the value of.\n'
p10340
sS'cpp_type'
p10341
S'VariableName'
p10342
sS'default'
p10343
g3
sS'name'
p10344
S'paired_variable'
p10345
sS'required'
p10346
I01
sS'group_name'
p10347
Nsa(dp10348
S'description'
p10349
S'The seed for the master random number generator\n'
p10350
sS'cpp_type'
p10351
S'unsigned int'
p10352
sS'default'
p10353
S'0'
p10354
sS'name'
p10355
S'seed'
p10356
sS'required'
p10357
I00
sS'group_name'
p10358
S'Advanced'
p10359
sa(dp10360
S'description'
p10361
S'Tangential distance to extend edges of contact surfaces\n'
p10362
sS'cpp_type'
p10363
S'double'
p10364
sS'default'
p10365
g3
sS'name'
p10366
S'tangential_tolerance'
p10367
sS'required'
p10368
I00
sS'group_name'
p10369
Nsa(dp10370
S'description'
p10371
g3
sS'cpp_type'
p10372
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10373
sS'default'
p10374
S'GapValueAux'
p10375
sS'name'
p10376
S'type'
p10377
sS'required'
p10378
I00
sS'group_name'
p10379
Nsa(dp10380
S'description'
p10381
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10382
sS'cpp_type'
p10383
S'bool'
p10384
sS'default'
p10385
S'1'
p10386
sS'name'
p10387
S'use_displaced_mesh'
p10388
sS'required'
p10389
I00
sS'group_name'
p10390
S'Advanced'
p10391
sa(dp10392
S'description'
p10393
S'The name of the variable that this object applies to\n'
p10394
sS'cpp_type'
p10395
S'AuxVariableName'
p10396
sS'default'
p10397
g3
sS'name'
p10398
S'variable'
p10399
sS'required'
p10400
I01
sS'group_name'
p10401
Nsa(dp10402
S'description'
p10403
S'Whether to output warning messages concerning nodes not being found\n'
p10404
sS'cpp_type'
p10405
S'bool'
p10406
sS'default'
p10407
S'0'
p10408
sS'name'
p10409
S'warnings'
p10410
sS'required'
p10411
I00
sS'group_name'
p10412
NsasS'name'
p10413
S'/Bounds/GapValueAux'
p10414
sa(dp10415
S'description'
p10416
g3
sS'subblocks'
p10417
NsS'parameters'
p10418
(lp10419
(dp10420
S'description'
p10421
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10422
sS'cpp_type'
p10423
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10424
sS'default'
p10425
g3
sS'name'
p10426
S'block'
p10427
sS'required'
p10428
I00
sS'group_name'
p10429
Nsa(dp10430
S'description'
p10431
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10432
sS'cpp_type'
p10433
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10434
sS'default'
p10435
g3
sS'name'
p10436
S'boundary'
p10437
sS'required'
p10438
I00
sS'group_name'
p10439
Nsa(dp10440
S'description'
p10441
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10442
sS'cpp_type'
p10443
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p10444
sS'default'
p10445
g3
sS'name'
p10446
S'control_tags'
p10447
sS'required'
p10448
I00
sS'group_name'
p10449
S'Advanced'
p10450
sa(dp10451
S'description'
p10452
S'Set the enabled status of the MooseObject.\n'
p10453
sS'cpp_type'
p10454
S'bool'
p10455
sS'default'
p10456
S'1'
p10457
sS'name'
p10458
S'enable'
p10459
sS'required'
p10460
I00
sS'group_name'
p10461
S'Advanced'
p10462
sa(dp10463
S'name'
p10464
S'execute_on'
p10465
sS'cpp_type'
p10466
S'MultiMooseEnum'
p10467
sS'default'
p10468
S'LINEAR'
p10469
sS'description'
p10470
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10471
sS'required'
p10472
I00
sS'options'
p10473
S'none initial linear nonlinear timestep_end timestep_begin custom'
p10474
sS'group_name'
p10475
Nsa(dp10476
S'description'
p10477
S'The factor by which to multiply your material property for visualization\n'
p10478
sS'cpp_type'
p10479
S'double'
p10480
sS'default'
p10481
S'1'
p10482
sS'name'
p10483
S'factor'
p10484
sS'required'
p10485
I00
sS'group_name'
p10486
Nsa(dp10487
S'description'
p10488
S'The offset to add to your material property for visualization\n'
p10489
sS'cpp_type'
p10490
S'double'
p10491
sS'default'
p10492
S'0'
p10493
sS'name'
p10494
S'offset'
p10495
sS'required'
p10496
I00
sS'group_name'
p10497
Nsa(dp10498
S'description'
p10499
S'The scalar material property name\n'
p10500
sS'cpp_type'
p10501
S'MaterialPropertyName'
p10502
sS'default'
p10503
g3
sS'name'
p10504
S'property'
p10505
sS'required'
p10506
I01
sS'group_name'
p10507
Nsa(dp10508
S'description'
p10509
S'The seed for the master random number generator\n'
p10510
sS'cpp_type'
p10511
S'unsigned int'
p10512
sS'default'
p10513
S'0'
p10514
sS'name'
p10515
S'seed'
p10516
sS'required'
p10517
I00
sS'group_name'
p10518
S'Advanced'
p10519
sa(dp10520
S'description'
p10521
g3
sS'cpp_type'
p10522
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10523
sS'default'
p10524
S'MaterialRealAux'
p10525
sS'name'
p10526
S'type'
p10527
sS'required'
p10528
I00
sS'group_name'
p10529
Nsa(dp10530
S'description'
p10531
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10532
sS'cpp_type'
p10533
S'bool'
p10534
sS'default'
p10535
S'0'
p10536
sS'name'
p10537
S'use_displaced_mesh'
p10538
sS'required'
p10539
I00
sS'group_name'
p10540
S'Advanced'
p10541
sa(dp10542
S'description'
p10543
S'The name of the variable that this object applies to\n'
p10544
sS'cpp_type'
p10545
S'AuxVariableName'
p10546
sS'default'
p10547
g3
sS'name'
p10548
S'variable'
p10549
sS'required'
p10550
I01
sS'group_name'
p10551
NsasS'name'
p10552
S'/Bounds/MaterialRealAux'
p10553
sa(dp10554
S'description'
p10555
g3
sS'subblocks'
p10556
NsS'parameters'
p10557
(lp10558
(dp10559
S'description'
p10560
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10561
sS'cpp_type'
p10562
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10563
sS'default'
p10564
g3
sS'name'
p10565
S'block'
p10566
sS'required'
p10567
I00
sS'group_name'
p10568
Nsa(dp10569
S'description'
p10570
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10571
sS'cpp_type'
p10572
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10573
sS'default'
p10574
g3
sS'name'
p10575
S'boundary'
p10576
sS'required'
p10577
I00
sS'group_name'
p10578
Nsa(dp10579
S'description'
p10580
S'The column component to consider for this kernel\n'
p10581
sS'cpp_type'
p10582
S'unsigned int'
p10583
sS'default'
p10584
S'0'
p10585
sS'name'
p10586
S'column'
p10587
sS'required'
p10588
I00
sS'group_name'
p10589
Nsa(dp10590
S'description'
p10591
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10592
sS'cpp_type'
p10593
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p10594
sS'default'
p10595
g3
sS'name'
p10596
S'control_tags'
p10597
sS'required'
p10598
I00
sS'group_name'
p10599
S'Advanced'
p10600
sa(dp10601
S'description'
p10602
S'Set the enabled status of the MooseObject.\n'
p10603
sS'cpp_type'
p10604
S'bool'
p10605
sS'default'
p10606
S'1'
p10607
sS'name'
p10608
S'enable'
p10609
sS'required'
p10610
I00
sS'group_name'
p10611
S'Advanced'
p10612
sa(dp10613
S'name'
p10614
S'execute_on'
p10615
sS'cpp_type'
p10616
S'MultiMooseEnum'
p10617
sS'default'
p10618
S'LINEAR'
p10619
sS'description'
p10620
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10621
sS'required'
p10622
I00
sS'options'
p10623
S'none initial linear nonlinear timestep_end timestep_begin custom'
p10624
sS'group_name'
p10625
Nsa(dp10626
S'description'
p10627
S'The factor by which to multiply your material property for visualization\n'
p10628
sS'cpp_type'
p10629
S'double'
p10630
sS'default'
p10631
S'1'
p10632
sS'name'
p10633
S'factor'
p10634
sS'required'
p10635
I00
sS'group_name'
p10636
Nsa(dp10637
S'description'
p10638
S'The offset to add to your material property for visualization\n'
p10639
sS'cpp_type'
p10640
S'double'
p10641
sS'default'
p10642
S'0'
p10643
sS'name'
p10644
S'offset'
p10645
sS'required'
p10646
I00
sS'group_name'
p10647
Nsa(dp10648
S'description'
p10649
S'The scalar material property name\n'
p10650
sS'cpp_type'
p10651
S'MaterialPropertyName'
p10652
sS'default'
p10653
g3
sS'name'
p10654
S'property'
p10655
sS'required'
p10656
I01
sS'group_name'
p10657
Nsa(dp10658
S'description'
p10659
S'The row component to consider for this kernel\n'
p10660
sS'cpp_type'
p10661
S'unsigned int'
p10662
sS'default'
p10663
S'0'
p10664
sS'name'
p10665
S'row'
p10666
sS'required'
p10667
I00
sS'group_name'
p10668
Nsa(dp10669
S'description'
p10670
S'The seed for the master random number generator\n'
p10671
sS'cpp_type'
p10672
S'unsigned int'
p10673
sS'default'
p10674
S'0'
p10675
sS'name'
p10676
S'seed'
p10677
sS'required'
p10678
I00
sS'group_name'
p10679
S'Advanced'
p10680
sa(dp10681
S'description'
p10682
g3
sS'cpp_type'
p10683
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10684
sS'default'
p10685
S'MaterialRealDenseMatrixAux'
p10686
sS'name'
p10687
S'type'
p10688
sS'required'
p10689
I00
sS'group_name'
p10690
Nsa(dp10691
S'description'
p10692
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10693
sS'cpp_type'
p10694
S'bool'
p10695
sS'default'
p10696
S'0'
p10697
sS'name'
p10698
S'use_displaced_mesh'
p10699
sS'required'
p10700
I00
sS'group_name'
p10701
S'Advanced'
p10702
sa(dp10703
S'description'
p10704
S'The name of the variable that this object applies to\n'
p10705
sS'cpp_type'
p10706
S'AuxVariableName'
p10707
sS'default'
p10708
g3
sS'name'
p10709
S'variable'
p10710
sS'required'
p10711
I01
sS'group_name'
p10712
NsasS'name'
p10713
S'/Bounds/MaterialRealDenseMatrixAux'
p10714
sa(dp10715
S'description'
p10716
g3
sS'subblocks'
p10717
NsS'parameters'
p10718
(lp10719
(dp10720
S'description'
p10721
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10722
sS'cpp_type'
p10723
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10724
sS'default'
p10725
g3
sS'name'
p10726
S'block'
p10727
sS'required'
p10728
I00
sS'group_name'
p10729
Nsa(dp10730
S'description'
p10731
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10732
sS'cpp_type'
p10733
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10734
sS'default'
p10735
g3
sS'name'
p10736
S'boundary'
p10737
sS'required'
p10738
I00
sS'group_name'
p10739
Nsa(dp10740
S'description'
p10741
S'The column component to consider for this kernel\n'
p10742
sS'cpp_type'
p10743
S'unsigned int'
p10744
sS'default'
p10745
S'0'
p10746
sS'name'
p10747
S'column'
p10748
sS'required'
p10749
I00
sS'group_name'
p10750
Nsa(dp10751
S'description'
p10752
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10753
sS'cpp_type'
p10754
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p10755
sS'default'
p10756
g3
sS'name'
p10757
S'control_tags'
p10758
sS'required'
p10759
I00
sS'group_name'
p10760
S'Advanced'
p10761
sa(dp10762
S'description'
p10763
S'Set the enabled status of the MooseObject.\n'
p10764
sS'cpp_type'
p10765
S'bool'
p10766
sS'default'
p10767
S'1'
p10768
sS'name'
p10769
S'enable'
p10770
sS'required'
p10771
I00
sS'group_name'
p10772
S'Advanced'
p10773
sa(dp10774
S'name'
p10775
S'execute_on'
p10776
sS'cpp_type'
p10777
S'MultiMooseEnum'
p10778
sS'default'
p10779
S'LINEAR'
p10780
sS'description'
p10781
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10782
sS'required'
p10783
I00
sS'options'
p10784
S'none initial linear nonlinear timestep_end timestep_begin custom'
p10785
sS'group_name'
p10786
Nsa(dp10787
S'description'
p10788
S'The factor by which to multiply your material property for visualization\n'
p10789
sS'cpp_type'
p10790
S'double'
p10791
sS'default'
p10792
S'1'
p10793
sS'name'
p10794
S'factor'
p10795
sS'required'
p10796
I00
sS'group_name'
p10797
Nsa(dp10798
S'description'
p10799
S'The offset to add to your material property for visualization\n'
p10800
sS'cpp_type'
p10801
S'double'
p10802
sS'default'
p10803
S'0'
p10804
sS'name'
p10805
S'offset'
p10806
sS'required'
p10807
I00
sS'group_name'
p10808
Nsa(dp10809
S'description'
p10810
S'The scalar material property name\n'
p10811
sS'cpp_type'
p10812
S'MaterialPropertyName'
p10813
sS'default'
p10814
g3
sS'name'
p10815
S'property'
p10816
sS'required'
p10817
I01
sS'group_name'
p10818
Nsa(dp10819
S'description'
p10820
S'The row component to consider for this kernel\n'
p10821
sS'cpp_type'
p10822
S'unsigned int'
p10823
sS'default'
p10824
S'0'
p10825
sS'name'
p10826
S'row'
p10827
sS'required'
p10828
I00
sS'group_name'
p10829
Nsa(dp10830
S'description'
p10831
S'The seed for the master random number generator\n'
p10832
sS'cpp_type'
p10833
S'unsigned int'
p10834
sS'default'
p10835
S'0'
p10836
sS'name'
p10837
S'seed'
p10838
sS'required'
p10839
I00
sS'group_name'
p10840
S'Advanced'
p10841
sa(dp10842
S'description'
p10843
g3
sS'cpp_type'
p10844
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10845
sS'default'
p10846
S'MaterialRealTensorValueAux'
p10847
sS'name'
p10848
S'type'
p10849
sS'required'
p10850
I00
sS'group_name'
p10851
Nsa(dp10852
S'description'
p10853
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10854
sS'cpp_type'
p10855
S'bool'
p10856
sS'default'
p10857
S'0'
p10858
sS'name'
p10859
S'use_displaced_mesh'
p10860
sS'required'
p10861
I00
sS'group_name'
p10862
S'Advanced'
p10863
sa(dp10864
S'description'
p10865
S'The name of the variable that this object applies to\n'
p10866
sS'cpp_type'
p10867
S'AuxVariableName'
p10868
sS'default'
p10869
g3
sS'name'
p10870
S'variable'
p10871
sS'required'
p10872
I01
sS'group_name'
p10873
NsasS'name'
p10874
S'/Bounds/MaterialRealTensorValueAux'
p10875
sa(dp10876
S'description'
p10877
g3
sS'subblocks'
p10878
NsS'parameters'
p10879
(lp10880
(dp10881
S'description'
p10882
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10883
sS'cpp_type'
p10884
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10885
sS'default'
p10886
g3
sS'name'
p10887
S'block'
p10888
sS'required'
p10889
I00
sS'group_name'
p10890
Nsa(dp10891
S'description'
p10892
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10893
sS'cpp_type'
p10894
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10895
sS'default'
p10896
g3
sS'name'
p10897
S'boundary'
p10898
sS'required'
p10899
I00
sS'group_name'
p10900
Nsa(dp10901
S'description'
p10902
S'The vector component to consider for this kernel\n'
p10903
sS'cpp_type'
p10904
S'unsigned int'
p10905
sS'default'
p10906
S'0'
p10907
sS'name'
p10908
S'component'
p10909
sS'required'
p10910
I00
sS'group_name'
p10911
Nsa(dp10912
S'description'
p10913
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p10914
sS'cpp_type'
p10915
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p10916
sS'default'
p10917
g3
sS'name'
p10918
S'control_tags'
p10919
sS'required'
p10920
I00
sS'group_name'
p10921
S'Advanced'
p10922
sa(dp10923
S'description'
p10924
S'Set the enabled status of the MooseObject.\n'
p10925
sS'cpp_type'
p10926
S'bool'
p10927
sS'default'
p10928
S'1'
p10929
sS'name'
p10930
S'enable'
p10931
sS'required'
p10932
I00
sS'group_name'
p10933
S'Advanced'
p10934
sa(dp10935
S'name'
p10936
S'execute_on'
p10937
sS'cpp_type'
p10938
S'MultiMooseEnum'
p10939
sS'default'
p10940
S'LINEAR'
p10941
sS'description'
p10942
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10943
sS'required'
p10944
I00
sS'options'
p10945
S'none initial linear nonlinear timestep_end timestep_begin custom'
p10946
sS'group_name'
p10947
Nsa(dp10948
S'description'
p10949
S'The factor by which to multiply your material property for visualization\n'
p10950
sS'cpp_type'
p10951
S'double'
p10952
sS'default'
p10953
S'1'
p10954
sS'name'
p10955
S'factor'
p10956
sS'required'
p10957
I00
sS'group_name'
p10958
Nsa(dp10959
S'description'
p10960
S'The offset to add to your material property for visualization\n'
p10961
sS'cpp_type'
p10962
S'double'
p10963
sS'default'
p10964
S'0'
p10965
sS'name'
p10966
S'offset'
p10967
sS'required'
p10968
I00
sS'group_name'
p10969
Nsa(dp10970
S'description'
p10971
S'The scalar material property name\n'
p10972
sS'cpp_type'
p10973
S'MaterialPropertyName'
p10974
sS'default'
p10975
g3
sS'name'
p10976
S'property'
p10977
sS'required'
p10978
I01
sS'group_name'
p10979
Nsa(dp10980
S'description'
p10981
S'The seed for the master random number generator\n'
p10982
sS'cpp_type'
p10983
S'unsigned int'
p10984
sS'default'
p10985
S'0'
p10986
sS'name'
p10987
S'seed'
p10988
sS'required'
p10989
I00
sS'group_name'
p10990
S'Advanced'
p10991
sa(dp10992
S'description'
p10993
g3
sS'cpp_type'
p10994
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10995
sS'default'
p10996
S'MaterialRealVectorValueAux'
p10997
sS'name'
p10998
S'type'
p10999
sS'required'
p11000
I00
sS'group_name'
p11001
Nsa(dp11002
S'description'
p11003
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11004
sS'cpp_type'
p11005
S'bool'
p11006
sS'default'
p11007
S'0'
p11008
sS'name'
p11009
S'use_displaced_mesh'
p11010
sS'required'
p11011
I00
sS'group_name'
p11012
S'Advanced'
p11013
sa(dp11014
S'description'
p11015
S'The name of the variable that this object applies to\n'
p11016
sS'cpp_type'
p11017
S'AuxVariableName'
p11018
sS'default'
p11019
g3
sS'name'
p11020
S'variable'
p11021
sS'required'
p11022
I01
sS'group_name'
p11023
NsasS'name'
p11024
S'/Bounds/MaterialRealVectorValueAux'
p11025
sa(dp11026
S'description'
p11027
S'Extracts a component of a material type std::vector<Real> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n'
p11028
sS'subblocks'
p11029
NsS'parameters'
p11030
(lp11031
(dp11032
S'description'
p11033
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11034
sS'cpp_type'
p11035
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11036
sS'default'
p11037
g3
sS'name'
p11038
S'block'
p11039
sS'required'
p11040
I00
sS'group_name'
p11041
Nsa(dp11042
S'description'
p11043
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11044
sS'cpp_type'
p11045
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11046
sS'default'
p11047
g3
sS'name'
p11048
S'boundary'
p11049
sS'required'
p11050
I00
sS'group_name'
p11051
Nsa(dp11052
S'description'
p11053
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11054
sS'cpp_type'
p11055
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11056
sS'default'
p11057
g3
sS'name'
p11058
S'control_tags'
p11059
sS'required'
p11060
I00
sS'group_name'
p11061
S'Advanced'
p11062
sa(dp11063
S'description'
p11064
S'Set the enabled status of the MooseObject.\n'
p11065
sS'cpp_type'
p11066
S'bool'
p11067
sS'default'
p11068
S'1'
p11069
sS'name'
p11070
S'enable'
p11071
sS'required'
p11072
I00
sS'group_name'
p11073
S'Advanced'
p11074
sa(dp11075
S'name'
p11076
S'execute_on'
p11077
sS'cpp_type'
p11078
S'MultiMooseEnum'
p11079
sS'default'
p11080
S'LINEAR'
p11081
sS'description'
p11082
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11083
sS'required'
p11084
I00
sS'options'
p11085
S'none initial linear nonlinear timestep_end timestep_begin custom'
p11086
sS'group_name'
p11087
Nsa(dp11088
S'description'
p11089
S'The factor by which to multiply your material property for visualization\n'
p11090
sS'cpp_type'
p11091
S'double'
p11092
sS'default'
p11093
S'1'
p11094
sS'name'
p11095
S'factor'
p11096
sS'required'
p11097
I00
sS'group_name'
p11098
Nsa(dp11099
S'description'
p11100
S'The index to consider for this kernel\n'
p11101
sS'cpp_type'
p11102
S'unsigned int'
p11103
sS'default'
p11104
S'0'
p11105
sS'name'
p11106
S'index'
p11107
sS'required'
p11108
I00
sS'group_name'
p11109
Nsa(dp11110
S'description'
p11111
S'The offset to add to your material property for visualization\n'
p11112
sS'cpp_type'
p11113
S'double'
p11114
sS'default'
p11115
S'0'
p11116
sS'name'
p11117
S'offset'
p11118
sS'required'
p11119
I00
sS'group_name'
p11120
Nsa(dp11121
S'description'
p11122
S'The scalar material property name\n'
p11123
sS'cpp_type'
p11124
S'MaterialPropertyName'
p11125
sS'default'
p11126
g3
sS'name'
p11127
S'property'
p11128
sS'required'
p11129
I01
sS'group_name'
p11130
Nsa(dp11131
S'description'
p11132
S'The seed for the master random number generator\n'
p11133
sS'cpp_type'
p11134
S'unsigned int'
p11135
sS'default'
p11136
S'0'
p11137
sS'name'
p11138
S'seed'
p11139
sS'required'
p11140
I00
sS'group_name'
p11141
S'Advanced'
p11142
sa(dp11143
S'description'
p11144
S'Evaluate the std::vector<Real> at this quadpoint.  This only needs to be used if you are interested in a particular quadpoint in each element: otherwise do not include this parameter in your input file\n'
p11145
sS'cpp_type'
p11146
S'unsigned int'
p11147
sS'default'
p11148
g3
sS'name'
p11149
S'selected_qp'
p11150
sS'required'
p11151
I00
sS'group_name'
p11152
S'Advanced'
p11153
sa(dp11154
S'description'
p11155
g3
sS'cpp_type'
p11156
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11157
sS'default'
p11158
S'MaterialStdVectorAux'
p11159
sS'name'
p11160
S'type'
p11161
sS'required'
p11162
I00
sS'group_name'
p11163
Nsa(dp11164
S'description'
p11165
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11166
sS'cpp_type'
p11167
S'bool'
p11168
sS'default'
p11169
S'0'
p11170
sS'name'
p11171
S'use_displaced_mesh'
p11172
sS'required'
p11173
I00
sS'group_name'
p11174
S'Advanced'
p11175
sa(dp11176
S'description'
p11177
S'The name of the variable that this object applies to\n'
p11178
sS'cpp_type'
p11179
S'AuxVariableName'
p11180
sS'default'
p11181
g3
sS'name'
p11182
S'variable'
p11183
sS'required'
p11184
I01
sS'group_name'
p11185
NsasS'name'
p11186
S'/Bounds/MaterialStdVectorAux'
p11187
sa(dp11188
S'description'
p11189
S"Extracts a component of a material's std::vector<RealGradient> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n"
p11190
sS'subblocks'
p11191
NsS'parameters'
p11192
(lp11193
(dp11194
S'description'
p11195
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11196
sS'cpp_type'
p11197
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11198
sS'default'
p11199
g3
sS'name'
p11200
S'block'
p11201
sS'required'
p11202
I00
sS'group_name'
p11203
Nsa(dp11204
S'description'
p11205
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11206
sS'cpp_type'
p11207
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11208
sS'default'
p11209
g3
sS'name'
p11210
S'boundary'
p11211
sS'required'
p11212
I00
sS'group_name'
p11213
Nsa(dp11214
S'description'
p11215
S'The gradient component to be extracted for this kernel\n'
p11216
sS'cpp_type'
p11217
S'unsigned int'
p11218
sS'default'
p11219
S'0'
p11220
sS'name'
p11221
S'component'
p11222
sS'required'
p11223
I00
sS'group_name'
p11224
Nsa(dp11225
S'description'
p11226
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11227
sS'cpp_type'
p11228
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11229
sS'default'
p11230
g3
sS'name'
p11231
S'control_tags'
p11232
sS'required'
p11233
I00
sS'group_name'
p11234
S'Advanced'
p11235
sa(dp11236
S'description'
p11237
S'Set the enabled status of the MooseObject.\n'
p11238
sS'cpp_type'
p11239
S'bool'
p11240
sS'default'
p11241
S'1'
p11242
sS'name'
p11243
S'enable'
p11244
sS'required'
p11245
I00
sS'group_name'
p11246
S'Advanced'
p11247
sa(dp11248
S'name'
p11249
S'execute_on'
p11250
sS'cpp_type'
p11251
S'MultiMooseEnum'
p11252
sS'default'
p11253
S'LINEAR'
p11254
sS'description'
p11255
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11256
sS'required'
p11257
I00
sS'options'
p11258
S'none initial linear nonlinear timestep_end timestep_begin custom'
p11259
sS'group_name'
p11260
Nsa(dp11261
S'description'
p11262
S'The factor by which to multiply your material property for visualization\n'
p11263
sS'cpp_type'
p11264
S'double'
p11265
sS'default'
p11266
S'1'
p11267
sS'name'
p11268
S'factor'
p11269
sS'required'
p11270
I00
sS'group_name'
p11271
Nsa(dp11272
S'description'
p11273
S'The index to consider for this kernel\n'
p11274
sS'cpp_type'
p11275
S'unsigned int'
p11276
sS'default'
p11277
S'0'
p11278
sS'name'
p11279
S'index'
p11280
sS'required'
p11281
I00
sS'group_name'
p11282
Nsa(dp11283
S'description'
p11284
S'The offset to add to your material property for visualization\n'
p11285
sS'cpp_type'
p11286
S'double'
p11287
sS'default'
p11288
S'0'
p11289
sS'name'
p11290
S'offset'
p11291
sS'required'
p11292
I00
sS'group_name'
p11293
Nsa(dp11294
S'description'
p11295
S'The scalar material property name\n'
p11296
sS'cpp_type'
p11297
S'MaterialPropertyName'
p11298
sS'default'
p11299
g3
sS'name'
p11300
S'property'
p11301
sS'required'
p11302
I01
sS'group_name'
p11303
Nsa(dp11304
S'description'
p11305
S'The seed for the master random number generator\n'
p11306
sS'cpp_type'
p11307
S'unsigned int'
p11308
sS'default'
p11309
S'0'
p11310
sS'name'
p11311
S'seed'
p11312
sS'required'
p11313
I00
sS'group_name'
p11314
S'Advanced'
p11315
sa(dp11316
S'description'
p11317
g3
sS'cpp_type'
p11318
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11319
sS'default'
p11320
S'MaterialStdVectorRealGradientAux'
p11321
sS'name'
p11322
S'type'
p11323
sS'required'
p11324
I00
sS'group_name'
p11325
Nsa(dp11326
S'description'
p11327
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11328
sS'cpp_type'
p11329
S'bool'
p11330
sS'default'
p11331
S'0'
p11332
sS'name'
p11333
S'use_displaced_mesh'
p11334
sS'required'
p11335
I00
sS'group_name'
p11336
S'Advanced'
p11337
sa(dp11338
S'description'
p11339
S'The name of the variable that this object applies to\n'
p11340
sS'cpp_type'
p11341
S'AuxVariableName'
p11342
sS'default'
p11343
g3
sS'name'
p11344
S'variable'
p11345
sS'required'
p11346
I01
sS'group_name'
p11347
NsasS'name'
p11348
S'/Bounds/MaterialStdVectorRealGradientAux'
p11349
sa(dp11350
S'description'
p11351
g3
sS'subblocks'
p11352
NsS'parameters'
p11353
(lp11354
(dp11355
S'description'
p11356
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11357
sS'cpp_type'
p11358
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11359
sS'default'
p11360
g3
sS'name'
p11361
S'block'
p11362
sS'required'
p11363
I00
sS'group_name'
p11364
Nsa(dp11365
S'description'
p11366
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11367
sS'cpp_type'
p11368
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11369
sS'default'
p11370
g3
sS'name'
p11371
S'boundary'
p11372
sS'required'
p11373
I00
sS'group_name'
p11374
Nsa(dp11375
S'description'
p11376
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11377
sS'cpp_type'
p11378
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11379
sS'default'
p11380
g3
sS'name'
p11381
S'control_tags'
p11382
sS'required'
p11383
I00
sS'group_name'
p11384
S'Advanced'
p11385
sa(dp11386
S'description'
p11387
S'Set the enabled status of the MooseObject.\n'
p11388
sS'cpp_type'
p11389
S'bool'
p11390
sS'default'
p11391
S'1'
p11392
sS'name'
p11393
S'enable'
p11394
sS'required'
p11395
I00
sS'group_name'
p11396
S'Advanced'
p11397
sa(dp11398
S'name'
p11399
S'execute_on'
p11400
sS'cpp_type'
p11401
S'MultiMooseEnum'
p11402
sS'default'
p11403
S'LINEAR'
p11404
sS'description'
p11405
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11406
sS'required'
p11407
I00
sS'options'
p11408
S'none initial linear nonlinear timestep_end timestep_begin custom'
p11409
sS'group_name'
p11410
Nsa(dp11411
S'description'
p11412
S'The boundary to find the distance to.\n'
p11413
sS'cpp_type'
p11414
S'BoundaryName'
p11415
sS'default'
p11416
g3
sS'name'
p11417
S'paired_boundary'
p11418
sS'required'
p11419
I01
sS'group_name'
p11420
Nsa(dp11421
S'description'
p11422
S'The seed for the master random number generator\n'
p11423
sS'cpp_type'
p11424
S'unsigned int'
p11425
sS'default'
p11426
S'0'
p11427
sS'name'
p11428
S'seed'
p11429
sS'required'
p11430
I00
sS'group_name'
p11431
S'Advanced'
p11432
sa(dp11433
S'description'
p11434
g3
sS'cpp_type'
p11435
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11436
sS'default'
p11437
S'NearestNodeDistanceAux'
p11438
sS'name'
p11439
S'type'
p11440
sS'required'
p11441
I00
sS'group_name'
p11442
Nsa(dp11443
S'description'
p11444
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11445
sS'cpp_type'
p11446
S'bool'
p11447
sS'default'
p11448
S'1'
p11449
sS'name'
p11450
S'use_displaced_mesh'
p11451
sS'required'
p11452
I00
sS'group_name'
p11453
S'Advanced'
p11454
sa(dp11455
S'description'
p11456
S'The name of the variable that this object applies to\n'
p11457
sS'cpp_type'
p11458
S'AuxVariableName'
p11459
sS'default'
p11460
g3
sS'name'
p11461
S'variable'
p11462
sS'required'
p11463
I01
sS'group_name'
p11464
NsasS'name'
p11465
S'/Bounds/NearestNodeDistanceAux'
p11466
sa(dp11467
S'description'
p11468
g3
sS'subblocks'
p11469
NsS'parameters'
p11470
(lp11471
(dp11472
S'description'
p11473
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11474
sS'cpp_type'
p11475
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11476
sS'default'
p11477
g3
sS'name'
p11478
S'block'
p11479
sS'required'
p11480
I00
sS'group_name'
p11481
Nsa(dp11482
S'description'
p11483
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11484
sS'cpp_type'
p11485
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11486
sS'default'
p11487
g3
sS'name'
p11488
S'boundary'
p11489
sS'required'
p11490
I00
sS'group_name'
p11491
Nsa(dp11492
S'description'
p11493
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11494
sS'cpp_type'
p11495
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11496
sS'default'
p11497
g3
sS'name'
p11498
S'control_tags'
p11499
sS'required'
p11500
I00
sS'group_name'
p11501
S'Advanced'
p11502
sa(dp11503
S'description'
p11504
S'Set the enabled status of the MooseObject.\n'
p11505
sS'cpp_type'
p11506
S'bool'
p11507
sS'default'
p11508
S'1'
p11509
sS'name'
p11510
S'enable'
p11511
sS'required'
p11512
I00
sS'group_name'
p11513
S'Advanced'
p11514
sa(dp11515
S'name'
p11516
S'execute_on'
p11517
sS'cpp_type'
p11518
S'MultiMooseEnum'
p11519
sS'default'
p11520
S'LINEAR'
p11521
sS'description'
p11522
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11523
sS'required'
p11524
I00
sS'options'
p11525
S'none initial linear nonlinear timestep_end timestep_begin custom'
p11526
sS'group_name'
p11527
Nsa(dp11528
S'description'
p11529
S'The boundary to get the value from.\n'
p11530
sS'cpp_type'
p11531
S'BoundaryName'
p11532
sS'default'
p11533
g3
sS'name'
p11534
S'paired_boundary'
p11535
sS'required'
p11536
I01
sS'group_name'
p11537
Nsa(dp11538
S'description'
p11539
S'The variable to get the value of.\n'
p11540
sS'cpp_type'
p11541
S'std::vector<VariableName>'
p11542
sS'default'
p11543
g3
sS'name'
p11544
S'paired_variable'
p11545
sS'required'
p11546
I01
sS'group_name'
p11547
Nsa(dp11548
S'description'
p11549
S'The seed for the master random number generator\n'
p11550
sS'cpp_type'
p11551
S'unsigned int'
p11552
sS'default'
p11553
S'0'
p11554
sS'name'
p11555
S'seed'
p11556
sS'required'
p11557
I00
sS'group_name'
p11558
S'Advanced'
p11559
sa(dp11560
S'description'
p11561
g3
sS'cpp_type'
p11562
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11563
sS'default'
p11564
S'NearestNodeValueAux'
p11565
sS'name'
p11566
S'type'
p11567
sS'required'
p11568
I00
sS'group_name'
p11569
Nsa(dp11570
S'description'
p11571
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11572
sS'cpp_type'
p11573
S'bool'
p11574
sS'default'
p11575
S'1'
p11576
sS'name'
p11577
S'use_displaced_mesh'
p11578
sS'required'
p11579
I00
sS'group_name'
p11580
S'Advanced'
p11581
sa(dp11582
S'description'
p11583
S'The name of the variable that this object applies to\n'
p11584
sS'cpp_type'
p11585
S'AuxVariableName'
p11586
sS'default'
p11587
g3
sS'name'
p11588
S'variable'
p11589
sS'required'
p11590
I01
sS'group_name'
p11591
NsasS'name'
p11592
S'/Bounds/NearestNodeValueAux'
p11593
sa(dp11594
S'description'
p11595
g3
sS'subblocks'
p11596
NsS'parameters'
p11597
(lp11598
(dp11599
S'description'
p11600
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11601
sS'cpp_type'
p11602
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11603
sS'default'
p11604
g3
sS'name'
p11605
S'block'
p11606
sS'required'
p11607
I00
sS'group_name'
p11608
Nsa(dp11609
S'description'
p11610
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11611
sS'cpp_type'
p11612
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11613
sS'default'
p11614
g3
sS'name'
p11615
S'boundary'
p11616
sS'required'
p11617
I00
sS'group_name'
p11618
Nsa(dp11619
S'description'
p11620
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11621
sS'cpp_type'
p11622
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11623
sS'default'
p11624
g3
sS'name'
p11625
S'control_tags'
p11626
sS'required'
p11627
I00
sS'group_name'
p11628
S'Advanced'
p11629
sa(dp11630
S'description'
p11631
S'Set the enabled status of the MooseObject.\n'
p11632
sS'cpp_type'
p11633
S'bool'
p11634
sS'default'
p11635
S'1'
p11636
sS'name'
p11637
S'enable'
p11638
sS'required'
p11639
I00
sS'group_name'
p11640
S'Advanced'
p11641
sa(dp11642
S'name'
p11643
S'execute_on'
p11644
sS'cpp_type'
p11645
S'MultiMooseEnum'
p11646
sS'default'
p11647
S'LINEAR'
p11648
sS'description'
p11649
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11650
sS'required'
p11651
I00
sS'options'
p11652
S'none initial linear nonlinear timestep_end timestep_begin custom'
p11653
sS'group_name'
p11654
Nsa(dp11655
S'description'
p11656
S'The normalization factor\n'
p11657
sS'cpp_type'
p11658
S'double'
p11659
sS'default'
p11660
S'1'
p11661
sS'name'
p11662
S'normal_factor'
p11663
sS'required'
p11664
I00
sS'group_name'
p11665
Nsa(dp11666
S'description'
p11667
S'The postprocessor on the source\n'
p11668
sS'cpp_type'
p11669
S'PostprocessorName'
p11670
sS'default'
p11671
g3
sS'name'
p11672
S'normalization'
p11673
sS'required'
p11674
I01
sS'group_name'
p11675
Nsa(dp11676
S'description'
p11677
S'The seed for the master random number generator\n'
p11678
sS'cpp_type'
p11679
S'unsigned int'
p11680
sS'default'
p11681
S'0'
p11682
sS'name'
p11683
S'seed'
p11684
sS'required'
p11685
I00
sS'group_name'
p11686
S'Advanced'
p11687
sa(dp11688
S'description'
p11689
S'The variable to be normalized\n'
p11690
sS'cpp_type'
p11691
S'std::vector<VariableName>'
p11692
sS'default'
p11693
g3
sS'name'
p11694
S'source_variable'
p11695
sS'required'
p11696
I01
sS'group_name'
p11697
Nsa(dp11698
S'description'
p11699
g3
sS'cpp_type'
p11700
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11701
sS'default'
p11702
S'NormalizationAux'
p11703
sS'name'
p11704
S'type'
p11705
sS'required'
p11706
I00
sS'group_name'
p11707
Nsa(dp11708
S'description'
p11709
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11710
sS'cpp_type'
p11711
S'bool'
p11712
sS'default'
p11713
S'0'
p11714
sS'name'
p11715
S'use_displaced_mesh'
p11716
sS'required'
p11717
I00
sS'group_name'
p11718
S'Advanced'
p11719
sa(dp11720
S'description'
p11721
S'The name of the variable that this object applies to\n'
p11722
sS'cpp_type'
p11723
S'AuxVariableName'
p11724
sS'default'
p11725
g3
sS'name'
p11726
S'variable'
p11727
sS'required'
p11728
I01
sS'group_name'
p11729
NsasS'name'
p11730
S'/Bounds/NormalizationAux'
p11731
sa(dp11732
S'description'
p11733
S'Parsed function AuxKernel.\n'
p11734
sS'subblocks'
p11735
NsS'parameters'
p11736
(lp11737
(dp11738
S'description'
p11739
S'coupled variables\n'
p11740
sS'cpp_type'
p11741
S'std::vector<VariableName>'
p11742
sS'default'
p11743
g3
sS'name'
p11744
S'args'
p11745
sS'required'
p11746
I00
sS'group_name'
p11747
Nsa(dp11748
S'description'
p11749
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11750
sS'cpp_type'
p11751
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11752
sS'default'
p11753
g3
sS'name'
p11754
S'block'
p11755
sS'required'
p11756
I00
sS'group_name'
p11757
Nsa(dp11758
S'description'
p11759
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11760
sS'cpp_type'
p11761
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11762
sS'default'
p11763
g3
sS'name'
p11764
S'boundary'
p11765
sS'required'
p11766
I00
sS'group_name'
p11767
Nsa(dp11768
S'description'
p11769
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p11770
sS'cpp_type'
p11771
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11772
sS'default'
p11773
g3
sS'name'
p11774
S'constant_expressions'
p11775
sS'required'
p11776
I00
sS'group_name'
p11777
Nsa(dp11778
S'description'
p11779
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p11780
sS'cpp_type'
p11781
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11782
sS'default'
p11783
g3
sS'name'
p11784
S'constant_names'
p11785
sS'required'
p11786
I00
sS'group_name'
p11787
Nsa(dp11788
S'description'
p11789
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11790
sS'cpp_type'
p11791
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11792
sS'default'
p11793
g3
sS'name'
p11794
S'control_tags'
p11795
sS'required'
p11796
I00
sS'group_name'
p11797
S'Advanced'
p11798
sa(dp11799
S'description'
p11800
S'Disable the function parser algebraic optimizer\n'
p11801
sS'cpp_type'
p11802
S'bool'
p11803
sS'default'
p11804
S'0'
p11805
sS'name'
p11806
S'disable_fpoptimizer'
p11807
sS'required'
p11808
I00
sS'group_name'
p11809
S'Advanced'
p11810
sa(dp11811
S'description'
p11812
S'Set the enabled status of the MooseObject.\n'
p11813
sS'cpp_type'
p11814
S'bool'
p11815
sS'default'
p11816
S'1'
p11817
sS'name'
p11818
S'enable'
p11819
sS'required'
p11820
I00
sS'group_name'
p11821
S'Advanced'
p11822
sa(dp11823
S'description'
p11824
S'Enable cacheing of function derivatives for faster startup time\n'
p11825
sS'cpp_type'
p11826
S'bool'
p11827
sS'default'
p11828
S'1'
p11829
sS'name'
p11830
S'enable_ad_cache'
p11831
sS'required'
p11832
I00
sS'group_name'
p11833
S'Advanced'
p11834
sa(dp11835
S'description'
p11836
S'Enable automatic immediate optimization of derivatives\n'
p11837
sS'cpp_type'
p11838
S'bool'
p11839
sS'default'
p11840
S'1'
p11841
sS'name'
p11842
S'enable_auto_optimize'
p11843
sS'required'
p11844
I00
sS'group_name'
p11845
S'Advanced'
p11846
sa(dp11847
S'description'
p11848
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p11849
sS'cpp_type'
p11850
S'bool'
p11851
sS'default'
p11852
S'1'
p11853
sS'name'
p11854
S'enable_jit'
p11855
sS'required'
p11856
I00
sS'group_name'
p11857
S'Advanced'
p11858
sa(dp11859
S'name'
p11860
S'execute_on'
p11861
sS'cpp_type'
p11862
S'MultiMooseEnum'
p11863
sS'default'
p11864
S'LINEAR'
p11865
sS'description'
p11866
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11867
sS'required'
p11868
I00
sS'options'
p11869
S'none initial linear nonlinear timestep_end timestep_begin custom'
p11870
sS'group_name'
p11871
Nsa(dp11872
S'description'
p11873
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p11874
sS'cpp_type'
p11875
S'bool'
p11876
sS'default'
p11877
S'0'
p11878
sS'name'
p11879
S'fail_on_evalerror'
p11880
sS'required'
p11881
I00
sS'group_name'
p11882
S'Advanced'
p11883
sa(dp11884
S'description'
p11885
S'function expression\n'
p11886
sS'cpp_type'
p11887
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11888
sS'default'
p11889
g3
sS'name'
p11890
S'function'
p11891
sS'required'
p11892
I01
sS'group_name'
p11893
Nsa(dp11894
S'description'
p11895
S'The seed for the master random number generator\n'
p11896
sS'cpp_type'
p11897
S'unsigned int'
p11898
sS'default'
p11899
S'0'
p11900
sS'name'
p11901
S'seed'
p11902
sS'required'
p11903
I00
sS'group_name'
p11904
S'Advanced'
p11905
sa(dp11906
S'description'
p11907
g3
sS'cpp_type'
p11908
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11909
sS'default'
p11910
S'ParsedAux'
p11911
sS'name'
p11912
S'type'
p11913
sS'required'
p11914
I00
sS'group_name'
p11915
Nsa(dp11916
S'description'
p11917
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11918
sS'cpp_type'
p11919
S'bool'
p11920
sS'default'
p11921
S'0'
p11922
sS'name'
p11923
S'use_displaced_mesh'
p11924
sS'required'
p11925
I00
sS'group_name'
p11926
S'Advanced'
p11927
sa(dp11928
S'description'
p11929
S'The name of the variable that this object applies to\n'
p11930
sS'cpp_type'
p11931
S'AuxVariableName'
p11932
sS'default'
p11933
g3
sS'name'
p11934
S'variable'
p11935
sS'required'
p11936
I01
sS'group_name'
p11937
NsasS'name'
p11938
S'/Bounds/ParsedAux'
p11939
sa(dp11940
S'description'
p11941
g3
sS'subblocks'
p11942
NsS'parameters'
p11943
(lp11944
(dp11945
S'description'
p11946
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11947
sS'cpp_type'
p11948
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11949
sS'default'
p11950
g3
sS'name'
p11951
S'block'
p11952
sS'required'
p11953
I00
sS'group_name'
p11954
Nsa(dp11955
S'description'
p11956
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11957
sS'cpp_type'
p11958
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11959
sS'default'
p11960
g3
sS'name'
p11961
S'boundary'
p11962
sS'required'
p11963
I00
sS'group_name'
p11964
Nsa(dp11965
S'description'
p11966
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p11967
sS'cpp_type'
p11968
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p11969
sS'default'
p11970
g3
sS'name'
p11971
S'control_tags'
p11972
sS'required'
p11973
I00
sS'group_name'
p11974
S'Advanced'
p11975
sa(dp11976
S'description'
p11977
S'Set the enabled status of the MooseObject.\n'
p11978
sS'cpp_type'
p11979
S'bool'
p11980
sS'default'
p11981
S'1'
p11982
sS'name'
p11983
S'enable'
p11984
sS'required'
p11985
I00
sS'group_name'
p11986
S'Advanced'
p11987
sa(dp11988
S'name'
p11989
S'execute_on'
p11990
sS'cpp_type'
p11991
S'MultiMooseEnum'
p11992
sS'default'
p11993
S'LINEAR'
p11994
sS'description'
p11995
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11996
sS'required'
p11997
I00
sS'options'
p11998
S'none initial linear nonlinear timestep_end timestep_begin custom'
p11999
sS'group_name'
p12000
Nsa(dp12001
S'description'
p12002
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p12003
sS'cpp_type'
p12004
S'double'
p12005
sS'default'
p12006
g3
sS'name'
p12007
S'normal_smoothing_distance'
p12008
sS'required'
p12009
I00
sS'group_name'
p12010
Nsa(dp12011
S'description'
p12012
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p12013
sS'cpp_type'
p12014
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12015
sS'default'
p12016
g3
sS'name'
p12017
S'normal_smoothing_method'
p12018
sS'required'
p12019
I00
sS'group_name'
p12020
Nsa(dp12021
S'name'
p12022
S'order'
p12023
sS'cpp_type'
p12024
S'MooseEnum'
p12025
sS'default'
p12026
S'FIRST'
p12027
sS'description'
p12028
S'The finite element order\n'
p12029
sS'required'
p12030
I00
sS'options'
p12031
S'FIRST SECOND THIRD FOURTH'
p12032
sS'group_name'
p12033
Nsa(dp12034
S'description'
p12035
S'The boundary to be penetrated\n'
p12036
sS'cpp_type'
p12037
S'BoundaryName'
p12038
sS'default'
p12039
g3
sS'name'
p12040
S'paired_boundary'
p12041
sS'required'
p12042
I01
sS'group_name'
p12043
Nsa(dp12044
S'name'
p12045
S'quantity'
p12046
sS'cpp_type'
p12047
S'MooseEnum'
p12048
sS'default'
p12049
S'distance'
p12050
sS'description'
p12051
S'The quantity to recover from the available penetration information\n'
p12052
sS'required'
p12053
I00
sS'options'
p12054
S'distance tangential_distance normal_x normal_y normal_z closest_point_x closest_point_y closest_point_z element_id side incremental_slip_magnitude incremental_slip_x incremental_slip_y incremental_slip_z accumulated_slip force_x force_y force_z normal_force_magnitude normal_force_x normal_force_y normal_force_z tangential_force_magnitude tangential_force_x tangential_force_y tangential_force_z frictional_energy lagrange_multiplier mechanical_status'
p12055
sS'group_name'
p12056
Nsa(dp12057
S'description'
p12058
S'The seed for the master random number generator\n'
p12059
sS'cpp_type'
p12060
S'unsigned int'
p12061
sS'default'
p12062
S'0'
p12063
sS'name'
p12064
S'seed'
p12065
sS'required'
p12066
I00
sS'group_name'
p12067
S'Advanced'
p12068
sa(dp12069
S'description'
p12070
S'Tangential distance to extend edges of contact surfaces\n'
p12071
sS'cpp_type'
p12072
S'double'
p12073
sS'default'
p12074
g3
sS'name'
p12075
S'tangential_tolerance'
p12076
sS'required'
p12077
I00
sS'group_name'
p12078
Nsa(dp12079
S'description'
p12080
g3
sS'cpp_type'
p12081
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12082
sS'default'
p12083
S'PenetrationAux'
p12084
sS'name'
p12085
S'type'
p12086
sS'required'
p12087
I00
sS'group_name'
p12088
Nsa(dp12089
S'description'
p12090
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12091
sS'cpp_type'
p12092
S'bool'
p12093
sS'default'
p12094
S'1'
p12095
sS'name'
p12096
S'use_displaced_mesh'
p12097
sS'required'
p12098
I00
sS'group_name'
p12099
S'Advanced'
p12100
sa(dp12101
S'description'
p12102
S'The name of the variable that this object applies to\n'
p12103
sS'cpp_type'
p12104
S'AuxVariableName'
p12105
sS'default'
p12106
g3
sS'name'
p12107
S'variable'
p12108
sS'required'
p12109
I01
sS'group_name'
p12110
NsasS'name'
p12111
S'/Bounds/PenetrationAux'
p12112
sa(dp12113
S'description'
p12114
g3
sS'subblocks'
p12115
NsS'parameters'
p12116
(lp12117
(dp12118
S'description'
p12119
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12120
sS'cpp_type'
p12121
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p12122
sS'default'
p12123
g3
sS'name'
p12124
S'block'
p12125
sS'required'
p12126
I00
sS'group_name'
p12127
Nsa(dp12128
S'description'
p12129
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12130
sS'cpp_type'
p12131
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p12132
sS'default'
p12133
g3
sS'name'
p12134
S'boundary'
p12135
sS'required'
p12136
I00
sS'group_name'
p12137
Nsa(dp12138
S'description'
p12139
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12140
sS'cpp_type'
p12141
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12142
sS'default'
p12143
g3
sS'name'
p12144
S'control_tags'
p12145
sS'required'
p12146
I00
sS'group_name'
p12147
S'Advanced'
p12148
sa(dp12149
S'description'
p12150
S'Set the enabled status of the MooseObject.\n'
p12151
sS'cpp_type'
p12152
S'bool'
p12153
sS'default'
p12154
S'1'
p12155
sS'name'
p12156
S'enable'
p12157
sS'required'
p12158
I00
sS'group_name'
p12159
S'Advanced'
p12160
sa(dp12161
S'name'
p12162
S'execute_on'
p12163
sS'cpp_type'
p12164
S'MultiMooseEnum'
p12165
sS'default'
p12166
S'LINEAR'
p12167
sS'description'
p12168
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p12169
sS'required'
p12170
I00
sS'options'
p12171
S'none initial linear nonlinear timestep_end timestep_begin custom'
p12172
sS'group_name'
p12173
Nsa(dp12174
S'description'
p12175
S'The seed for the master random number generator\n'
p12176
sS'cpp_type'
p12177
S'unsigned int'
p12178
sS'default'
p12179
S'0'
p12180
sS'name'
p12181
S'seed'
p12182
sS'required'
p12183
I00
sS'group_name'
p12184
S'Advanced'
p12185
sa(dp12186
S'description'
p12187
g3
sS'cpp_type'
p12188
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12189
sS'default'
p12190
S'ProcessorIDAux'
p12191
sS'name'
p12192
S'type'
p12193
sS'required'
p12194
I00
sS'group_name'
p12195
Nsa(dp12196
S'description'
p12197
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12198
sS'cpp_type'
p12199
S'bool'
p12200
sS'default'
p12201
S'0'
p12202
sS'name'
p12203
S'use_displaced_mesh'
p12204
sS'required'
p12205
I00
sS'group_name'
p12206
S'Advanced'
p12207
sa(dp12208
S'description'
p12209
S'The name of the variable that this object applies to\n'
p12210
sS'cpp_type'
p12211
S'AuxVariableName'
p12212
sS'default'
p12213
g3
sS'name'
p12214
S'variable'
p12215
sS'required'
p12216
I01
sS'group_name'
p12217
NsasS'name'
p12218
S'/Bounds/ProcessorIDAux'
p12219
sa(dp12220
S'description'
p12221
g3
sS'subblocks'
p12222
NsS'parameters'
p12223
(lp12224
(dp12225
S'description'
p12226
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12227
sS'cpp_type'
p12228
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p12229
sS'default'
p12230
g3
sS'name'
p12231
S'block'
p12232
sS'required'
p12233
I00
sS'group_name'
p12234
Nsa(dp12235
S'description'
p12236
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12237
sS'cpp_type'
p12238
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p12239
sS'default'
p12240
g3
sS'name'
p12241
S'boundary'
p12242
sS'required'
p12243
I00
sS'group_name'
p12244
Nsa(dp12245
S'description'
p12246
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12247
sS'cpp_type'
p12248
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12249
sS'default'
p12250
g3
sS'name'
p12251
S'control_tags'
p12252
sS'required'
p12253
I00
sS'group_name'
p12254
S'Advanced'
p12255
sa(dp12256
S'description'
p12257
S'The downstairs of the quotient variable\n'
p12258
sS'cpp_type'
p12259
S'std::vector<VariableName>'
p12260
sS'default'
p12261
g3
sS'name'
p12262
S'denominator'
p12263
sS'required'
p12264
I00
sS'group_name'
p12265
Nsa(dp12266
S'description'
p12267
S'Set the enabled status of the MooseObject.\n'
p12268
sS'cpp_type'
p12269
S'bool'
p12270
sS'default'
p12271
S'1'
p12272
sS'name'
p12273
S'enable'
p12274
sS'required'
p12275
I00
sS'group_name'
p12276
S'Advanced'
p12277
sa(dp12278
S'name'
p12279
S'execute_on'
p12280
sS'cpp_type'
p12281
S'MultiMooseEnum'
p12282
sS'default'
p12283
S'LINEAR'
p12284
sS'description'
p12285
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p12286
sS'required'
p12287
I00
sS'options'
p12288
S'none initial linear nonlinear timestep_end timestep_begin custom'
p12289
sS'group_name'
p12290
Nsa(dp12291
S'description'
p12292
S'The upstairs of the quotient variable\n'
p12293
sS'cpp_type'
p12294
S'std::vector<VariableName>'
p12295
sS'default'
p12296
g3
sS'name'
p12297
S'numerator'
p12298
sS'required'
p12299
I00
sS'group_name'
p12300
Nsa(dp12301
S'description'
p12302
S'The seed for the master random number generator\n'
p12303
sS'cpp_type'
p12304
S'unsigned int'
p12305
sS'default'
p12306
S'0'
p12307
sS'name'
p12308
S'seed'
p12309
sS'required'
p12310
I00
sS'group_name'
p12311
S'Advanced'
p12312
sa(dp12313
S'description'
p12314
g3
sS'cpp_type'
p12315
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12316
sS'default'
p12317
S'QuotientAux'
p12318
sS'name'
p12319
S'type'
p12320
sS'required'
p12321
I00
sS'group_name'
p12322
Nsa(dp12323
S'description'
p12324
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12325
sS'cpp_type'
p12326
S'bool'
p12327
sS'default'
p12328
S'0'
p12329
sS'name'
p12330
S'use_displaced_mesh'
p12331
sS'required'
p12332
I00
sS'group_name'
p12333
S'Advanced'
p12334
sa(dp12335
S'description'
p12336
S'The name of the variable that this object applies to\n'
p12337
sS'cpp_type'
p12338
S'AuxVariableName'
p12339
sS'default'
p12340
g3
sS'name'
p12341
S'variable'
p12342
sS'required'
p12343
I01
sS'group_name'
p12344
NsasS'name'
p12345
S'/Bounds/QuotientAux'
p12346
sa(dp12347
S'description'
p12348
g3
sS'subblocks'
p12349
NsS'parameters'
p12350
(lp12351
(dp12352
S'description'
p12353
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12354
sS'cpp_type'
p12355
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p12356
sS'default'
p12357
g3
sS'name'
p12358
S'block'
p12359
sS'required'
p12360
I00
sS'group_name'
p12361
Nsa(dp12362
S'description'
p12363
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12364
sS'cpp_type'
p12365
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p12366
sS'default'
p12367
g3
sS'name'
p12368
S'boundary'
p12369
sS'required'
p12370
I00
sS'group_name'
p12371
Nsa(dp12372
S'description'
p12373
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12374
sS'cpp_type'
p12375
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12376
sS'default'
p12377
g3
sS'name'
p12378
S'control_tags'
p12379
sS'required'
p12380
I00
sS'group_name'
p12381
S'Advanced'
p12382
sa(dp12383
S'description'
p12384
S'Set the enabled status of the MooseObject.\n'
p12385
sS'cpp_type'
p12386
S'bool'
p12387
sS'default'
p12388
S'1'
p12389
sS'name'
p12390
S'enable'
p12391
sS'required'
p12392
I00
sS'group_name'
p12393
S'Advanced'
p12394
sa(dp12395
S'name'
p12396
S'execute_on'
p12397
sS'cpp_type'
p12398
S'MultiMooseEnum'
p12399
sS'default'
p12400
S'LINEAR'
p12401
sS'description'
p12402
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p12403
sS'required'
p12404
I00
sS'options'
p12405
S'none initial linear nonlinear timestep_end timestep_begin custom'
p12406
sS'group_name'
p12407
Nsa(dp12408
S'description'
p12409
S'The seed for the master random number generator\n'
p12410
sS'cpp_type'
p12411
S'unsigned int'
p12412
sS'default'
p12413
S'0'
p12414
sS'name'
p12415
S'seed'
p12416
sS'required'
p12417
I00
sS'group_name'
p12418
S'Advanced'
p12419
sa(dp12420
S'description'
p12421
g3
sS'cpp_type'
p12422
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12423
sS'default'
p12424
S'SelfAux'
p12425
sS'name'
p12426
S'type'
p12427
sS'required'
p12428
I00
sS'group_name'
p12429
Nsa(dp12430
S'description'
p12431
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12432
sS'cpp_type'
p12433
S'bool'
p12434
sS'default'
p12435
S'0'
p12436
sS'name'
p12437
S'use_displaced_mesh'
p12438
sS'required'
p12439
I00
sS'group_name'
p12440
S'Advanced'
p12441
sa(dp12442
S'description'
p12443
S'The name of the variable that this object applies to\n'
p12444
sS'cpp_type'
p12445
S'AuxVariableName'
p12446
sS'default'
p12447
g3
sS'name'
p12448
S'variable'
p12449
sS'required'
p12450
I01
sS'group_name'
p12451
NsasS'name'
p12452
S'/Bounds/SelfAux'
p12453
sa(dp12454
S'description'
p12455
g3
sS'subblocks'
p12456
NsS'parameters'
p12457
(lp12458
(dp12459
S'description'
p12460
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p12461
sS'cpp_type'
p12462
S'double'
p12463
sS'default'
p12464
S'0'
p12465
sS'name'
p12466
S'add_factor'
p12467
sS'required'
p12468
I00
sS'group_name'
p12469
Nsa(dp12470
S'description'
p12471
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12472
sS'cpp_type'
p12473
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p12474
sS'default'
p12475
g3
sS'name'
p12476
S'block'
p12477
sS'required'
p12478
I00
sS'group_name'
p12479
Nsa(dp12480
S'description'
p12481
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12482
sS'cpp_type'
p12483
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p12484
sS'default'
p12485
g3
sS'name'
p12486
S'boundary'
p12487
sS'required'
p12488
I00
sS'group_name'
p12489
Nsa(dp12490
S'description'
p12491
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12492
sS'cpp_type'
p12493
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12494
sS'default'
p12495
g3
sS'name'
p12496
S'control_tags'
p12497
sS'required'
p12498
I00
sS'group_name'
p12499
S'Advanced'
p12500
sa(dp12501
S'description'
p12502
S'If true the meshes must be the same and then the values are simply copied over.\n'
p12503
sS'cpp_type'
p12504
S'bool'
p12505
sS'default'
p12506
S'0'
p12507
sS'name'
p12508
S'direct'
p12509
sS'required'
p12510
I00
sS'group_name'
p12511
Nsa(dp12512
S'description'
p12513
S'Set the enabled status of the MooseObject.\n'
p12514
sS'cpp_type'
p12515
S'bool'
p12516
sS'default'
p12517
S'1'
p12518
sS'name'
p12519
S'enable'
p12520
sS'required'
p12521
I00
sS'group_name'
p12522
S'Advanced'
p12523
sa(dp12524
S'name'
p12525
S'execute_on'
p12526
sS'cpp_type'
p12527
S'MultiMooseEnum'
p12528
sS'default'
p12529
S'LINEAR'
p12530
sS'description'
p12531
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p12532
sS'required'
p12533
I00
sS'options'
p12534
S'none initial linear nonlinear timestep_end timestep_begin custom'
p12535
sS'group_name'
p12536
Nsa(dp12537
S'description'
p12538
S'The name of the variable to extract from the file\n'
p12539
sS'cpp_type'
p12540
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12541
sS'default'
p12542
g3
sS'name'
p12543
S'from_variable'
p12544
sS'required'
p12545
I00
sS'group_name'
p12546
Nsa(dp12547
S'description'
p12548
S"Scale factor (a)  to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p12549
sS'cpp_type'
p12550
S'double'
p12551
sS'default'
p12552
S'1'
p12553
sS'name'
p12554
S'scale_factor'
p12555
sS'required'
p12556
I00
sS'group_name'
p12557
Nsa(dp12558
S'description'
p12559
S'The seed for the master random number generator\n'
p12560
sS'cpp_type'
p12561
S'unsigned int'
p12562
sS'default'
p12563
S'0'
p12564
sS'name'
p12565
S'seed'
p12566
sS'required'
p12567
I00
sS'group_name'
p12568
S'Advanced'
p12569
sa(dp12570
S'description'
p12571
S'The name of the SolutionUserObject\n'
p12572
sS'cpp_type'
p12573
S'UserObjectName'
p12574
sS'default'
p12575
g3
sS'name'
p12576
S'solution'
p12577
sS'required'
p12578
I01
sS'group_name'
p12579
Nsa(dp12580
S'description'
p12581
g3
sS'cpp_type'
p12582
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12583
sS'default'
p12584
S'SolutionAux'
p12585
sS'name'
p12586
S'type'
p12587
sS'required'
p12588
I00
sS'group_name'
p12589
Nsa(dp12590
S'description'
p12591
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12592
sS'cpp_type'
p12593
S'bool'
p12594
sS'default'
p12595
S'0'
p12596
sS'name'
p12597
S'use_displaced_mesh'
p12598
sS'required'
p12599
I00
sS'group_name'
p12600
S'Advanced'
p12601
sa(dp12602
S'description'
p12603
S'The name of the variable that this object applies to\n'
p12604
sS'cpp_type'
p12605
S'AuxVariableName'
p12606
sS'default'
p12607
g3
sS'name'
p12608
S'variable'
p12609
sS'required'
p12610
I01
sS'group_name'
p12611
NsasS'name'
p12612
S'/Bounds/SolutionAux'
p12613
sa(dp12614
S'description'
p12615
g3
sS'subblocks'
p12616
NsS'parameters'
p12617
(lp12618
(dp12619
S'description'
p12620
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12621
sS'cpp_type'
p12622
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p12623
sS'default'
p12624
g3
sS'name'
p12625
S'block'
p12626
sS'required'
p12627
I00
sS'group_name'
p12628
Nsa(dp12629
S'description'
p12630
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12631
sS'cpp_type'
p12632
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p12633
sS'default'
p12634
g3
sS'name'
p12635
S'boundary'
p12636
sS'required'
p12637
I00
sS'group_name'
p12638
Nsa(dp12639
S'description'
p12640
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12641
sS'cpp_type'
p12642
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12643
sS'default'
p12644
g3
sS'name'
p12645
S'control_tags'
p12646
sS'required'
p12647
I00
sS'group_name'
p12648
S'Advanced'
p12649
sa(dp12650
S'description'
p12651
S'Set the enabled status of the MooseObject.\n'
p12652
sS'cpp_type'
p12653
S'bool'
p12654
sS'default'
p12655
S'1'
p12656
sS'name'
p12657
S'enable'
p12658
sS'required'
p12659
I00
sS'group_name'
p12660
S'Advanced'
p12661
sa(dp12662
S'name'
p12663
S'execute_on'
p12664
sS'cpp_type'
p12665
S'MultiMooseEnum'
p12666
sS'default'
p12667
S'LINEAR'
p12668
sS'description'
p12669
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p12670
sS'required'
p12671
I00
sS'options'
p12672
S'none initial linear nonlinear timestep_end timestep_begin custom'
p12673
sS'group_name'
p12674
Nsa(dp12675
S'description'
p12676
S'The seed for the master random number generator\n'
p12677
sS'cpp_type'
p12678
S'unsigned int'
p12679
sS'default'
p12680
S'0'
p12681
sS'name'
p12682
S'seed'
p12683
sS'required'
p12684
I00
sS'group_name'
p12685
S'Advanced'
p12686
sa(dp12687
S'description'
p12688
g3
sS'cpp_type'
p12689
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12690
sS'default'
p12691
S'SpatialUserObjectAux'
p12692
sS'name'
p12693
S'type'
p12694
sS'required'
p12695
I00
sS'group_name'
p12696
Nsa(dp12697
S'description'
p12698
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12699
sS'cpp_type'
p12700
S'bool'
p12701
sS'default'
p12702
S'0'
p12703
sS'name'
p12704
S'use_displaced_mesh'
p12705
sS'required'
p12706
I00
sS'group_name'
p12707
S'Advanced'
p12708
sa(dp12709
S'description'
p12710
S'The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n'
p12711
sS'cpp_type'
p12712
S'UserObjectName'
p12713
sS'default'
p12714
g3
sS'name'
p12715
S'user_object'
p12716
sS'required'
p12717
I01
sS'group_name'
p12718
Nsa(dp12719
S'description'
p12720
S'The name of the variable that this object applies to\n'
p12721
sS'cpp_type'
p12722
S'AuxVariableName'
p12723
sS'default'
p12724
g3
sS'name'
p12725
S'variable'
p12726
sS'required'
p12727
I01
sS'group_name'
p12728
NsasS'name'
p12729
S'/Bounds/SpatialUserObjectAux'
p12730
sa(dp12731
S'description'
p12732
g3
sS'subblocks'
p12733
NsS'parameters'
p12734
(lp12735
(dp12736
S'description'
p12737
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12738
sS'cpp_type'
p12739
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p12740
sS'default'
p12741
g3
sS'name'
p12742
S'block'
p12743
sS'required'
p12744
I00
sS'group_name'
p12745
Nsa(dp12746
S'description'
p12747
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12748
sS'cpp_type'
p12749
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p12750
sS'default'
p12751
g3
sS'name'
p12752
S'boundary'
p12753
sS'required'
p12754
I00
sS'group_name'
p12755
Nsa(dp12756
S'name'
p12757
S'component'
p12758
sS'cpp_type'
p12759
S'MooseEnum'
p12760
sS'default'
p12761
g3
sS'description'
p12762
S'The gradient component to compute\n'
p12763
sS'required'
p12764
I00
sS'options'
p12765
S'x y z'
p12766
sS'group_name'
p12767
Nsa(dp12768
S'description'
p12769
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12770
sS'cpp_type'
p12771
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12772
sS'default'
p12773
g3
sS'name'
p12774
S'control_tags'
p12775
sS'required'
p12776
I00
sS'group_name'
p12777
S'Advanced'
p12778
sa(dp12779
S'description'
p12780
S'Set the enabled status of the MooseObject.\n'
p12781
sS'cpp_type'
p12782
S'bool'
p12783
sS'default'
p12784
S'1'
p12785
sS'name'
p12786
S'enable'
p12787
sS'required'
p12788
I00
sS'group_name'
p12789
S'Advanced'
p12790
sa(dp12791
S'name'
p12792
S'execute_on'
p12793
sS'cpp_type'
p12794
S'MultiMooseEnum'
p12795
sS'default'
p12796
S'LINEAR'
p12797
sS'description'
p12798
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p12799
sS'required'
p12800
I00
sS'options'
p12801
S'none initial linear nonlinear timestep_end timestep_begin custom'
p12802
sS'group_name'
p12803
Nsa(dp12804
S'description'
p12805
S'The variable from which to compute the gradient component\n'
p12806
sS'cpp_type'
p12807
S'std::vector<VariableName>'
p12808
sS'default'
p12809
g3
sS'name'
p12810
S'gradient_variable'
p12811
sS'required'
p12812
I01
sS'group_name'
p12813
Nsa(dp12814
S'description'
p12815
S'The seed for the master random number generator\n'
p12816
sS'cpp_type'
p12817
S'unsigned int'
p12818
sS'default'
p12819
S'0'
p12820
sS'name'
p12821
S'seed'
p12822
sS'required'
p12823
I00
sS'group_name'
p12824
S'Advanced'
p12825
sa(dp12826
S'description'
p12827
g3
sS'cpp_type'
p12828
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12829
sS'default'
p12830
S'VariableGradientComponent'
p12831
sS'name'
p12832
S'type'
p12833
sS'required'
p12834
I00
sS'group_name'
p12835
Nsa(dp12836
S'description'
p12837
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12838
sS'cpp_type'
p12839
S'bool'
p12840
sS'default'
p12841
S'0'
p12842
sS'name'
p12843
S'use_displaced_mesh'
p12844
sS'required'
p12845
I00
sS'group_name'
p12846
S'Advanced'
p12847
sa(dp12848
S'description'
p12849
S'The name of the variable that this object applies to\n'
p12850
sS'cpp_type'
p12851
S'AuxVariableName'
p12852
sS'default'
p12853
g3
sS'name'
p12854
S'variable'
p12855
sS'required'
p12856
I01
sS'group_name'
p12857
NsasS'name'
p12858
S'/Bounds/VariableGradientComponent'
p12859
sa(dp12860
S'description'
p12861
g3
sS'subblocks'
p12862
NsS'parameters'
p12863
(lp12864
(dp12865
S'description'
p12866
S'The list of block ids (SubdomainID) that this object will be applied\n'
p12867
sS'cpp_type'
p12868
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p12869
sS'default'
p12870
g3
sS'name'
p12871
S'block'
p12872
sS'required'
p12873
I00
sS'group_name'
p12874
Nsa(dp12875
S'description'
p12876
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p12877
sS'cpp_type'
p12878
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p12879
sS'default'
p12880
g3
sS'name'
p12881
S'boundary'
p12882
sS'required'
p12883
I00
sS'group_name'
p12884
Nsa(dp12885
S'description'
p12886
S'A simple coefficient\n'
p12887
sS'cpp_type'
p12888
S'double'
p12889
sS'default'
p12890
S'1'
p12891
sS'name'
p12892
S'coefficient'
p12893
sS'required'
p12894
I00
sS'group_name'
p12895
Nsa(dp12896
S'description'
p12897
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p12898
sS'cpp_type'
p12899
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12900
sS'default'
p12901
g3
sS'name'
p12902
S'control_tags'
p12903
sS'required'
p12904
I00
sS'group_name'
p12905
S'Advanced'
p12906
sa(dp12907
S'description'
p12908
S'Set the enabled status of the MooseObject.\n'
p12909
sS'cpp_type'
p12910
S'bool'
p12911
sS'default'
p12912
S'1'
p12913
sS'name'
p12914
S'enable'
p12915
sS'required'
p12916
I00
sS'group_name'
p12917
S'Advanced'
p12918
sa(dp12919
S'name'
p12920
S'execute_on'
p12921
sS'cpp_type'
p12922
S'MultiMooseEnum'
p12923
sS'default'
p12924
S'LINEAR'
p12925
sS'description'
p12926
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p12927
sS'required'
p12928
I00
sS'options'
p12929
S'none initial linear nonlinear timestep_end timestep_begin custom'
p12930
sS'group_name'
p12931
Nsa(dp12932
S'description'
p12933
S'The order of global truncation error: midpoint=1, trapazoidal=2, Simpson=3\n'
p12934
sS'cpp_type'
p12935
S'unsigned int'
p12936
sS'default'
p12937
S'2'
p12938
sS'name'
p12939
S'order'
p12940
sS'required'
p12941
I00
sS'group_name'
p12942
Nsa(dp12943
S'description'
p12944
S'The seed for the master random number generator\n'
p12945
sS'cpp_type'
p12946
S'unsigned int'
p12947
sS'default'
p12948
S'0'
p12949
sS'name'
p12950
S'seed'
p12951
sS'required'
p12952
I00
sS'group_name'
p12953
S'Advanced'
p12954
sa(dp12955
S'description'
p12956
g3
sS'cpp_type'
p12957
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12958
sS'default'
p12959
S'VariableTimeIntegrationAux'
p12960
sS'name'
p12961
S'type'
p12962
sS'required'
p12963
I00
sS'group_name'
p12964
Nsa(dp12965
S'description'
p12966
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12967
sS'cpp_type'
p12968
S'bool'
p12969
sS'default'
p12970
S'0'
p12971
sS'name'
p12972
S'use_displaced_mesh'
p12973
sS'required'
p12974
I00
sS'group_name'
p12975
S'Advanced'
p12976
sa(dp12977
S'description'
p12978
S'The name of the variable that this object applies to\n'
p12979
sS'cpp_type'
p12980
S'AuxVariableName'
p12981
sS'default'
p12982
g3
sS'name'
p12983
S'variable'
p12984
sS'required'
p12985
I01
sS'group_name'
p12986
Nsa(dp12987
S'description'
p12988
S'The variable to be integrated\n'
p12989
sS'cpp_type'
p12990
S'std::vector<VariableName>'
p12991
sS'default'
p12992
g3
sS'name'
p12993
S'variable_to_integrate'
p12994
sS'required'
p12995
I01
sS'group_name'
p12996
NsasS'name'
p12997
S'/Bounds/VariableTimeIntegrationAux'
p12998
sa(dp12999
S'description'
p13000
g3
sS'subblocks'
p13001
NsS'parameters'
p13002
(lp13003
(dp13004
S'description'
p13005
S'The list of block ids (SubdomainID) that this object will be applied\n'
p13006
sS'cpp_type'
p13007
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p13008
sS'default'
p13009
g3
sS'name'
p13010
S'block'
p13011
sS'required'
p13012
I00
sS'group_name'
p13013
Nsa(dp13014
S'description'
p13015
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p13016
sS'cpp_type'
p13017
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p13018
sS'default'
p13019
g3
sS'name'
p13020
S'boundary'
p13021
sS'required'
p13022
I00
sS'group_name'
p13023
Nsa(dp13024
S'description'
p13025
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13026
sS'cpp_type'
p13027
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13028
sS'default'
p13029
g3
sS'name'
p13030
S'control_tags'
p13031
sS'required'
p13032
I00
sS'group_name'
p13033
S'Advanced'
p13034
sa(dp13035
S'description'
p13036
S'Set the enabled status of the MooseObject.\n'
p13037
sS'cpp_type'
p13038
S'bool'
p13039
sS'default'
p13040
S'1'
p13041
sS'name'
p13042
S'enable'
p13043
sS'required'
p13044
I00
sS'group_name'
p13045
S'Advanced'
p13046
sa(dp13047
S'name'
p13048
S'execute_on'
p13049
sS'cpp_type'
p13050
S'MultiMooseEnum'
p13051
sS'default'
p13052
S'LINEAR'
p13053
sS'description'
p13054
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p13055
sS'required'
p13056
I00
sS'options'
p13057
S'none initial linear nonlinear timestep_end timestep_begin custom'
p13058
sS'group_name'
p13059
Nsa(dp13060
S'description'
p13061
S'The seed for the master random number generator\n'
p13062
sS'cpp_type'
p13063
S'unsigned int'
p13064
sS'default'
p13065
S'0'
p13066
sS'name'
p13067
S'seed'
p13068
sS'required'
p13069
I00
sS'group_name'
p13070
S'Advanced'
p13071
sa(dp13072
S'description'
p13073
g3
sS'cpp_type'
p13074
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13075
sS'default'
p13076
S'VectorMagnitudeAux'
p13077
sS'name'
p13078
S'type'
p13079
sS'required'
p13080
I00
sS'group_name'
p13081
Nsa(dp13082
S'description'
p13083
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13084
sS'cpp_type'
p13085
S'bool'
p13086
sS'default'
p13087
S'0'
p13088
sS'name'
p13089
S'use_displaced_mesh'
p13090
sS'required'
p13091
I00
sS'group_name'
p13092
S'Advanced'
p13093
sa(dp13094
S'description'
p13095
S'The name of the variable that this object applies to\n'
p13096
sS'cpp_type'
p13097
S'AuxVariableName'
p13098
sS'default'
p13099
g3
sS'name'
p13100
S'variable'
p13101
sS'required'
p13102
I01
sS'group_name'
p13103
Nsa(dp13104
S'description'
p13105
S'x-component of the vector\n'
p13106
sS'cpp_type'
p13107
S'std::vector<VariableName>'
p13108
sS'default'
p13109
g3
sS'name'
p13110
S'x'
p13111
sS'required'
p13112
I01
sS'group_name'
p13113
Nsa(dp13114
S'description'
p13115
S'y-component of the vector\n'
p13116
sS'cpp_type'
p13117
S'std::vector<VariableName>'
p13118
sS'default'
p13119
g3
sS'name'
p13120
S'y'
p13121
sS'required'
p13122
I00
sS'group_name'
p13123
Nsa(dp13124
S'description'
p13125
S'z-component of the vector\n'
p13126
sS'cpp_type'
p13127
S'std::vector<VariableName>'
p13128
sS'default'
p13129
g3
sS'name'
p13130
S'z'
p13131
sS'required'
p13132
I00
sS'group_name'
p13133
NsasS'name'
p13134
S'/Bounds/VectorMagnitudeAux'
p13135
sasS'parameters'
p13136
NsS'name'
p13137
S'/Bounds'
p13138
sa(dp13139
S'description'
p13140
g3
sS'subblocks'
p13141
(lp13142
(dp13143
S'description'
p13144
g3
sS'subblocks'
p13145
NsS'parameters'
p13146
(lp13147
(dp13148
S'description'
p13149
S'A string representing the Moose Object that will be built by this Action\n'
p13150
sS'cpp_type'
p13151
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13152
sS'default'
p13153
g3
sS'name'
p13154
S'type'
p13155
sS'required'
p13156
I01
sS'group_name'
p13157
NsasS'name'
p13158
S'/Constraints/*'
p13159
sa(dp13160
S'description'
p13161
g3
sS'subblocks'
p13162
NsS'parameters'
p13163
(lp13164
(dp13165
S'description'
p13166
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13167
sS'cpp_type'
p13168
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13169
sS'default'
p13170
g3
sS'name'
p13171
S'control_tags'
p13172
sS'required'
p13173
I00
sS'group_name'
p13174
S'Advanced'
p13175
sa(dp13176
S'description'
p13177
S'Set the enabled status of the MooseObject.\n'
p13178
sS'cpp_type'
p13179
S'bool'
p13180
sS'default'
p13181
S'1'
p13182
sS'name'
p13183
S'enable'
p13184
sS'required'
p13185
I00
sS'group_name'
p13186
S'Advanced'
p13187
sa(dp13188
S'name'
p13189
S'execute_on'
p13190
sS'cpp_type'
p13191
S'MultiMooseEnum'
p13192
sS'default'
p13193
S'LINEAR'
p13194
sS'description'
p13195
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p13196
sS'required'
p13197
I00
sS'options'
p13198
S'none initial linear nonlinear timestep_end timestep_begin custom'
p13199
sS'group_name'
p13200
Nsa(dp13201
S'description'
p13202
S'The boundary ID associated with the master side\n'
p13203
sS'cpp_type'
p13204
S'BoundaryName'
p13205
sS'default'
p13206
g3
sS'name'
p13207
S'master'
p13208
sS'required'
p13209
I01
sS'group_name'
p13210
Nsa(dp13211
S'description'
p13212
S'The variable on the master side of the domain\n'
p13213
sS'cpp_type'
p13214
S'std::vector<VariableName>'
p13215
sS'default'
p13216
g3
sS'name'
p13217
S'master_variable'
p13218
sS'required'
p13219
I01
sS'group_name'
p13220
Nsa(dp13221
S'description'
p13222
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p13223
sS'cpp_type'
p13224
S'double'
p13225
sS'default'
p13226
g3
sS'name'
p13227
S'normal_smoothing_distance'
p13228
sS'required'
p13229
I00
sS'group_name'
p13230
Nsa(dp13231
S'description'
p13232
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p13233
sS'cpp_type'
p13234
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13235
sS'default'
p13236
g3
sS'name'
p13237
S'normal_smoothing_method'
p13238
sS'required'
p13239
I00
sS'group_name'
p13240
Nsa(dp13241
S'name'
p13242
S'order'
p13243
sS'cpp_type'
p13244
S'MooseEnum'
p13245
sS'default'
p13246
S'FIRST'
p13247
sS'description'
p13248
S'The finite element order used for projections\n'
p13249
sS'required'
p13250
I00
sS'options'
p13251
S'FIRST SECOND THIRD FOURTH'
p13252
sS'group_name'
p13253
Nsa(dp13254
S'description'
p13255
S'scaling factor to be applied to constraint equations\n'
p13256
sS'cpp_type'
p13257
S'double'
p13258
sS'default'
p13259
S'1'
p13260
sS'name'
p13261
S'scaling'
p13262
sS'required'
p13263
I00
sS'group_name'
p13264
Nsa(dp13265
S'description'
p13266
S'The boundary ID associated with the slave side\n'
p13267
sS'cpp_type'
p13268
S'BoundaryName'
p13269
sS'default'
p13270
g3
sS'name'
p13271
S'slave'
p13272
sS'required'
p13273
I01
sS'group_name'
p13274
Nsa(dp13275
S'description'
p13276
S'Tangential distance to extend edges of contact surfaces\n'
p13277
sS'cpp_type'
p13278
S'double'
p13279
sS'default'
p13280
g3
sS'name'
p13281
S'tangential_tolerance'
p13282
sS'required'
p13283
I00
sS'group_name'
p13284
Nsa(dp13285
S'description'
p13286
g3
sS'cpp_type'
p13287
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13288
sS'default'
p13289
S'CoupledTiedValueConstraint'
p13290
sS'name'
p13291
S'type'
p13292
sS'required'
p13293
I00
sS'group_name'
p13294
Nsa(dp13295
S'description'
p13296
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13297
sS'cpp_type'
p13298
S'bool'
p13299
sS'default'
p13300
S'1'
p13301
sS'name'
p13302
S'use_displaced_mesh'
p13303
sS'required'
p13304
I00
sS'group_name'
p13305
S'Advanced'
p13306
sa(dp13307
S'description'
p13308
S'The name of the variable that this constraint is applied to.\n'
p13309
sS'cpp_type'
p13310
S'NonlinearVariableName'
p13311
sS'default'
p13312
g3
sS'name'
p13313
S'variable'
p13314
sS'required'
p13315
I01
sS'group_name'
p13316
NsasS'name'
p13317
S'/Constraints/CoupledTiedValueConstraint'
p13318
sa(dp13319
S'description'
p13320
g3
sS'subblocks'
p13321
NsS'parameters'
p13322
(lp13323
(dp13324
S'description'
p13325
S'Gradient component to constrain\n'
p13326
sS'cpp_type'
p13327
S'unsigned int'
p13328
sS'default'
p13329
g3
sS'name'
p13330
S'component'
p13331
sS'required'
p13332
I01
sS'group_name'
p13333
Nsa(dp13334
S'description'
p13335
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13336
sS'cpp_type'
p13337
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13338
sS'default'
p13339
g3
sS'name'
p13340
S'control_tags'
p13341
sS'required'
p13342
I00
sS'group_name'
p13343
S'Advanced'
p13344
sa(dp13345
S'description'
p13346
S'Set the enabled status of the MooseObject.\n'
p13347
sS'cpp_type'
p13348
S'bool'
p13349
sS'default'
p13350
S'1'
p13351
sS'name'
p13352
S'enable'
p13353
sS'required'
p13354
I00
sS'group_name'
p13355
S'Advanced'
p13356
sa(dp13357
S'name'
p13358
S'execute_on'
p13359
sS'cpp_type'
p13360
S'MultiMooseEnum'
p13361
sS'default'
p13362
S'LINEAR'
p13363
sS'description'
p13364
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p13365
sS'required'
p13366
I00
sS'options'
p13367
S'none initial linear nonlinear timestep_end timestep_begin custom'
p13368
sS'group_name'
p13369
Nsa(dp13370
S'description'
p13371
S'The name of the interface.\n'
p13372
sS'cpp_type'
p13373
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13374
sS'default'
p13375
g3
sS'name'
p13376
S'interface'
p13377
sS'required'
p13378
I01
sS'group_name'
p13379
Nsa(dp13380
S'description'
p13381
S'Variable on master surface\n'
p13382
sS'cpp_type'
p13383
S'VariableName'
p13384
sS'default'
p13385
g3
sS'name'
p13386
S'master_variable'
p13387
sS'required'
p13388
I01
sS'group_name'
p13389
Nsa(dp13390
S'description'
p13391
S'Variable on master surface\n'
p13392
sS'cpp_type'
p13393
S'VariableName'
p13394
sS'default'
p13395
g3
sS'name'
p13396
S'slave_variable'
p13397
sS'required'
p13398
I00
sS'group_name'
p13399
Nsa(dp13400
S'description'
p13401
g3
sS'cpp_type'
p13402
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13403
sS'default'
p13404
S'EqualGradientConstraint'
p13405
sS'name'
p13406
S'type'
p13407
sS'required'
p13408
I00
sS'group_name'
p13409
Nsa(dp13410
S'description'
p13411
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13412
sS'cpp_type'
p13413
S'bool'
p13414
sS'default'
p13415
S'0'
p13416
sS'name'
p13417
S'use_displaced_mesh'
p13418
sS'required'
p13419
I00
sS'group_name'
p13420
S'Advanced'
p13421
sa(dp13422
S'description'
p13423
S'The name of the variable that this constraint is applied to.\n'
p13424
sS'cpp_type'
p13425
S'NonlinearVariableName'
p13426
sS'default'
p13427
g3
sS'name'
p13428
S'variable'
p13429
sS'required'
p13430
I01
sS'group_name'
p13431
NsasS'name'
p13432
S'/Constraints/EqualGradientConstraint'
p13433
sa(dp13434
S'description'
p13435
g3
sS'subblocks'
p13436
NsS'parameters'
p13437
(lp13438
(dp13439
S'description'
p13440
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13441
sS'cpp_type'
p13442
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13443
sS'default'
p13444
g3
sS'name'
p13445
S'control_tags'
p13446
sS'required'
p13447
I00
sS'group_name'
p13448
S'Advanced'
p13449
sa(dp13450
S'description'
p13451
S'Set the enabled status of the MooseObject.\n'
p13452
sS'cpp_type'
p13453
S'bool'
p13454
sS'default'
p13455
S'1'
p13456
sS'name'
p13457
S'enable'
p13458
sS'required'
p13459
I00
sS'group_name'
p13460
S'Advanced'
p13461
sa(dp13462
S'name'
p13463
S'execute_on'
p13464
sS'cpp_type'
p13465
S'MultiMooseEnum'
p13466
sS'default'
p13467
S'LINEAR'
p13468
sS'description'
p13469
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p13470
sS'required'
p13471
I00
sS'options'
p13472
S'none initial linear nonlinear timestep_end timestep_begin custom'
p13473
sS'group_name'
p13474
Nsa(dp13475
S'name'
p13476
S'formulation'
p13477
sS'cpp_type'
p13478
S'MooseEnum'
p13479
sS'default'
p13480
S'penalty'
p13481
sS'description'
p13482
S'Formulation used to calculate constraint - penalty or kinematic.\n'
p13483
sS'required'
p13484
I00
sS'options'
p13485
S'penalty kinematic'
p13486
sS'group_name'
p13487
Nsa(dp13488
S'description'
p13489
S'The ID of the master node. If no ID is provided, first node of slave set is chosen.\n'
p13490
sS'cpp_type'
p13491
S'unsigned int'
p13492
sS'default'
p13493
S'4294967295'
p13494
sS'name'
p13495
S'master'
p13496
sS'required'
p13497
I00
sS'group_name'
p13498
Nsa(dp13499
S'description'
p13500
S'The penalty used for the boundary term\n'
p13501
sS'cpp_type'
p13502
S'double'
p13503
sS'default'
p13504
g3
sS'name'
p13505
S'penalty'
p13506
sS'required'
p13507
I01
sS'group_name'
p13508
Nsa(dp13509
S'description'
p13510
S'The boundary ID associated with the slave side\n'
p13511
sS'cpp_type'
p13512
S'BoundaryName'
p13513
sS'default'
p13514
S'NaN'
p13515
sS'name'
p13516
S'slave'
p13517
sS'required'
p13518
I00
sS'group_name'
p13519
Nsa(dp13520
S'description'
p13521
S'The IDs of the slave node\n'
p13522
sS'cpp_type'
p13523
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p13524
sS'default'
p13525
g3
sS'name'
p13526
S'slave_node_ids'
p13527
sS'required'
p13528
I00
sS'group_name'
p13529
Nsa(dp13530
S'description'
p13531
g3
sS'cpp_type'
p13532
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13533
sS'default'
p13534
S'EqualValueBoundaryConstraint'
p13535
sS'name'
p13536
S'type'
p13537
sS'required'
p13538
I00
sS'group_name'
p13539
Nsa(dp13540
S'description'
p13541
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13542
sS'cpp_type'
p13543
S'bool'
p13544
sS'default'
p13545
S'0'
p13546
sS'name'
p13547
S'use_displaced_mesh'
p13548
sS'required'
p13549
I00
sS'group_name'
p13550
S'Advanced'
p13551
sa(dp13552
S'description'
p13553
S'The name of the variable that this constraint is applied to.\n'
p13554
sS'cpp_type'
p13555
S'NonlinearVariableName'
p13556
sS'default'
p13557
g3
sS'name'
p13558
S'variable'
p13559
sS'required'
p13560
I01
sS'group_name'
p13561
NsasS'name'
p13562
S'/Constraints/EqualValueBoundaryConstraint'
p13563
sa(dp13564
S'description'
p13565
g3
sS'subblocks'
p13566
NsS'parameters'
p13567
(lp13568
(dp13569
S'description'
p13570
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13571
sS'cpp_type'
p13572
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13573
sS'default'
p13574
g3
sS'name'
p13575
S'control_tags'
p13576
sS'required'
p13577
I00
sS'group_name'
p13578
S'Advanced'
p13579
sa(dp13580
S'description'
p13581
S'Set the enabled status of the MooseObject.\n'
p13582
sS'cpp_type'
p13583
S'bool'
p13584
sS'default'
p13585
S'1'
p13586
sS'name'
p13587
S'enable'
p13588
sS'required'
p13589
I00
sS'group_name'
p13590
S'Advanced'
p13591
sa(dp13592
S'name'
p13593
S'execute_on'
p13594
sS'cpp_type'
p13595
S'MultiMooseEnum'
p13596
sS'default'
p13597
S'LINEAR'
p13598
sS'description'
p13599
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p13600
sS'required'
p13601
I00
sS'options'
p13602
S'none initial linear nonlinear timestep_end timestep_begin custom'
p13603
sS'group_name'
p13604
Nsa(dp13605
S'description'
p13606
S'The name of the interface.\n'
p13607
sS'cpp_type'
p13608
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13609
sS'default'
p13610
g3
sS'name'
p13611
S'interface'
p13612
sS'required'
p13613
I01
sS'group_name'
p13614
Nsa(dp13615
S'description'
p13616
S'Variable on master surface\n'
p13617
sS'cpp_type'
p13618
S'VariableName'
p13619
sS'default'
p13620
g3
sS'name'
p13621
S'master_variable'
p13622
sS'required'
p13623
I01
sS'group_name'
p13624
Nsa(dp13625
S'description'
p13626
S'Variable on master surface\n'
p13627
sS'cpp_type'
p13628
S'VariableName'
p13629
sS'default'
p13630
g3
sS'name'
p13631
S'slave_variable'
p13632
sS'required'
p13633
I00
sS'group_name'
p13634
Nsa(dp13635
S'description'
p13636
g3
sS'cpp_type'
p13637
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13638
sS'default'
p13639
S'EqualValueConstraint'
p13640
sS'name'
p13641
S'type'
p13642
sS'required'
p13643
I00
sS'group_name'
p13644
Nsa(dp13645
S'description'
p13646
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13647
sS'cpp_type'
p13648
S'bool'
p13649
sS'default'
p13650
S'0'
p13651
sS'name'
p13652
S'use_displaced_mesh'
p13653
sS'required'
p13654
I00
sS'group_name'
p13655
S'Advanced'
p13656
sa(dp13657
S'description'
p13658
S'The name of the variable that this constraint is applied to.\n'
p13659
sS'cpp_type'
p13660
S'NonlinearVariableName'
p13661
sS'default'
p13662
g3
sS'name'
p13663
S'variable'
p13664
sS'required'
p13665
I01
sS'group_name'
p13666
NsasS'name'
p13667
S'/Constraints/EqualValueConstraint'
p13668
sa(dp13669
S'description'
p13670
g3
sS'subblocks'
p13671
NsS'parameters'
p13672
(lp13673
(dp13674
S'description'
p13675
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13676
sS'cpp_type'
p13677
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13678
sS'default'
p13679
g3
sS'name'
p13680
S'control_tags'
p13681
sS'required'
p13682
I00
sS'group_name'
p13683
S'Advanced'
p13684
sa(dp13685
S'description'
p13686
S'Set the enabled status of the MooseObject.\n'
p13687
sS'cpp_type'
p13688
S'bool'
p13689
sS'default'
p13690
S'1'
p13691
sS'name'
p13692
S'enable'
p13693
sS'required'
p13694
I00
sS'group_name'
p13695
S'Advanced'
p13696
sa(dp13697
S'name'
p13698
S'execute_on'
p13699
sS'cpp_type'
p13700
S'MultiMooseEnum'
p13701
sS'default'
p13702
S'LINEAR'
p13703
sS'description'
p13704
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p13705
sS'required'
p13706
I00
sS'options'
p13707
S'none initial linear nonlinear timestep_end timestep_begin custom'
p13708
sS'group_name'
p13709
Nsa(dp13710
S'name'
p13711
S'formulation'
p13712
sS'cpp_type'
p13713
S'MooseEnum'
p13714
sS'default'
p13715
S'penalty'
p13716
sS'description'
p13717
S'Formulation used to calculate constraint - penalty or kinematic.\n'
p13718
sS'required'
p13719
I00
sS'options'
p13720
S'penalty kinematic'
p13721
sS'group_name'
p13722
Nsa(dp13723
S'description'
p13724
S'The master node IDs.\n'
p13725
sS'cpp_type'
p13726
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p13727
sS'default'
p13728
g3
sS'name'
p13729
S'master'
p13730
sS'required'
p13731
I01
sS'group_name'
p13732
Nsa(dp13733
S'description'
p13734
S'The penalty used for the boundary term\n'
p13735
sS'cpp_type'
p13736
S'double'
p13737
sS'default'
p13738
g3
sS'name'
p13739
S'penalty'
p13740
sS'required'
p13741
I01
sS'group_name'
p13742
Nsa(dp13743
S'description'
p13744
S'The list of slave node ids\n'
p13745
sS'cpp_type'
p13746
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p13747
sS'default'
p13748
g3
sS'name'
p13749
S'slave_node_ids'
p13750
sS'required'
p13751
I00
sS'group_name'
p13752
Nsa(dp13753
S'description'
p13754
S'The boundary ID associated with the slave side\n'
p13755
sS'cpp_type'
p13756
S'BoundaryName'
p13757
sS'default'
p13758
S'NaN'
p13759
sS'name'
p13760
S'slave_node_set'
p13761
sS'required'
p13762
I00
sS'group_name'
p13763
Nsa(dp13764
S'description'
p13765
g3
sS'cpp_type'
p13766
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13767
sS'default'
p13768
S'LinearNodalConstraint'
p13769
sS'name'
p13770
S'type'
p13771
sS'required'
p13772
I00
sS'group_name'
p13773
Nsa(dp13774
S'description'
p13775
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13776
sS'cpp_type'
p13777
S'bool'
p13778
sS'default'
p13779
S'0'
p13780
sS'name'
p13781
S'use_displaced_mesh'
p13782
sS'required'
p13783
I00
sS'group_name'
p13784
S'Advanced'
p13785
sa(dp13786
S'description'
p13787
S'The name of the variable that this constraint is applied to.\n'
p13788
sS'cpp_type'
p13789
S'NonlinearVariableName'
p13790
sS'default'
p13791
g3
sS'name'
p13792
S'variable'
p13793
sS'required'
p13794
I01
sS'group_name'
p13795
Nsa(dp13796
S'description'
p13797
S'The weights associated with the master node ids. Must be of the same size as master nodes\n'
p13798
sS'cpp_type'
p13799
S'std::__1::vector<double, std::__1::allocator<double> >'
p13800
sS'default'
p13801
g3
sS'name'
p13802
S'weights'
p13803
sS'required'
p13804
I01
sS'group_name'
p13805
NsasS'name'
p13806
S'/Constraints/LinearNodalConstraint'
p13807
sa(dp13808
S'description'
p13809
g3
sS'subblocks'
p13810
NsS'parameters'
p13811
(lp13812
(dp13813
S'description'
p13814
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13815
sS'cpp_type'
p13816
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13817
sS'default'
p13818
g3
sS'name'
p13819
S'control_tags'
p13820
sS'required'
p13821
I00
sS'group_name'
p13822
S'Advanced'
p13823
sa(dp13824
S'description'
p13825
S'Set the enabled status of the MooseObject.\n'
p13826
sS'cpp_type'
p13827
S'bool'
p13828
sS'default'
p13829
S'1'
p13830
sS'name'
p13831
S'enable'
p13832
sS'required'
p13833
I00
sS'group_name'
p13834
S'Advanced'
p13835
sa(dp13836
S'name'
p13837
S'execute_on'
p13838
sS'cpp_type'
p13839
S'MultiMooseEnum'
p13840
sS'default'
p13841
S'LINEAR'
p13842
sS'description'
p13843
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p13844
sS'required'
p13845
I00
sS'options'
p13846
S'none initial linear nonlinear timestep_end timestep_begin custom'
p13847
sS'group_name'
p13848
Nsa(dp13849
S'description'
p13850
S'The boundary ID associated with the master side\n'
p13851
sS'cpp_type'
p13852
S'BoundaryName'
p13853
sS'default'
p13854
g3
sS'name'
p13855
S'master'
p13856
sS'required'
p13857
I01
sS'group_name'
p13858
Nsa(dp13859
S'description'
p13860
S'The variable on the master side of the domain\n'
p13861
sS'cpp_type'
p13862
S'std::vector<VariableName>'
p13863
sS'default'
p13864
g3
sS'name'
p13865
S'master_variable'
p13866
sS'required'
p13867
I01
sS'group_name'
p13868
Nsa(dp13869
S'description'
p13870
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p13871
sS'cpp_type'
p13872
S'double'
p13873
sS'default'
p13874
g3
sS'name'
p13875
S'normal_smoothing_distance'
p13876
sS'required'
p13877
I00
sS'group_name'
p13878
Nsa(dp13879
S'description'
p13880
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p13881
sS'cpp_type'
p13882
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13883
sS'default'
p13884
g3
sS'name'
p13885
S'normal_smoothing_method'
p13886
sS'required'
p13887
I00
sS'group_name'
p13888
Nsa(dp13889
S'name'
p13890
S'order'
p13891
sS'cpp_type'
p13892
S'MooseEnum'
p13893
sS'default'
p13894
S'FIRST'
p13895
sS'description'
p13896
S'The finite element order used for projections\n'
p13897
sS'required'
p13898
I00
sS'options'
p13899
S'FIRST SECOND THIRD FOURTH'
p13900
sS'group_name'
p13901
Nsa(dp13902
S'description'
p13903
S'scaling factor to be applied to constraint equations\n'
p13904
sS'cpp_type'
p13905
S'double'
p13906
sS'default'
p13907
S'1'
p13908
sS'name'
p13909
S'scaling'
p13910
sS'required'
p13911
I00
sS'group_name'
p13912
Nsa(dp13913
S'description'
p13914
S'The boundary ID associated with the slave side\n'
p13915
sS'cpp_type'
p13916
S'BoundaryName'
p13917
sS'default'
p13918
g3
sS'name'
p13919
S'slave'
p13920
sS'required'
p13921
I01
sS'group_name'
p13922
Nsa(dp13923
S'description'
p13924
S'Tangential distance to extend edges of contact surfaces\n'
p13925
sS'cpp_type'
p13926
S'double'
p13927
sS'default'
p13928
g3
sS'name'
p13929
S'tangential_tolerance'
p13930
sS'required'
p13931
I00
sS'group_name'
p13932
Nsa(dp13933
S'description'
p13934
g3
sS'cpp_type'
p13935
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13936
sS'default'
p13937
S'TiedValueConstraint'
p13938
sS'name'
p13939
S'type'
p13940
sS'required'
p13941
I00
sS'group_name'
p13942
Nsa(dp13943
S'description'
p13944
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p13945
sS'cpp_type'
p13946
S'bool'
p13947
sS'default'
p13948
S'1'
p13949
sS'name'
p13950
S'use_displaced_mesh'
p13951
sS'required'
p13952
I00
sS'group_name'
p13953
S'Advanced'
p13954
sa(dp13955
S'description'
p13956
S'The name of the variable that this constraint is applied to.\n'
p13957
sS'cpp_type'
p13958
S'NonlinearVariableName'
p13959
sS'default'
p13960
g3
sS'name'
p13961
S'variable'
p13962
sS'required'
p13963
I01
sS'group_name'
p13964
NsasS'name'
p13965
S'/Constraints/TiedValueConstraint'
p13966
sasS'parameters'
p13967
NsS'name'
p13968
S'/Constraints'
p13969
sa(dp13970
S'description'
p13971
g3
sS'subblocks'
p13972
(lp13973
(dp13974
S'description'
p13975
g3
sS'subblocks'
p13976
NsS'parameters'
p13977
(lp13978
(dp13979
S'description'
p13980
S'A string representing the Moose Object that will be built by this Action\n'
p13981
sS'cpp_type'
p13982
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13983
sS'default'
p13984
g3
sS'name'
p13985
S'type'
p13986
sS'required'
p13987
I01
sS'group_name'
p13988
NsasS'name'
p13989
S'/Controls/*'
p13990
sa(dp13991
S'description'
p13992
g3
sS'subblocks'
p13993
NsS'parameters'
p13994
(lp13995
(dp13996
S'description'
p13997
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p13998
sS'cpp_type'
p13999
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14000
sS'default'
p14001
g3
sS'name'
p14002
S'control_tags'
p14003
sS'required'
p14004
I00
sS'group_name'
p14005
S'Advanced'
p14006
sa(dp14007
S'description'
p14008
S'Set the enabled status of the MooseObject.\n'
p14009
sS'cpp_type'
p14010
S'bool'
p14011
sS'default'
p14012
S'1'
p14013
sS'name'
p14014
S'enable'
p14015
sS'required'
p14016
I00
sS'group_name'
p14017
S'Advanced'
p14018
sa(dp14019
S'name'
p14020
S'execute_on'
p14021
sS'cpp_type'
p14022
S'MultiMooseEnum'
p14023
sS'default'
p14024
S'INITIAL TIMESTEP_END'
p14025
sS'description'
p14026
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p14027
sS'required'
p14028
I00
sS'options'
p14029
S'none initial linear nonlinear timestep_end timestep_begin custom subdomain'
p14030
sS'group_name'
p14031
Nsa(dp14032
S'description'
p14033
S'The function to use for controlling the specified parameter.\n'
p14034
sS'cpp_type'
p14035
S'FunctionName'
p14036
sS'default'
p14037
g3
sS'name'
p14038
S'function'
p14039
sS'required'
p14040
I01
sS'group_name'
p14041
Nsa(dp14042
S'description'
p14043
S'Determines whether this object is calculated using an implicit or explicit form\n'
p14044
sS'cpp_type'
p14045
S'bool'
p14046
sS'default'
p14047
S'1'
p14048
sS'name'
p14049
S'implicit'
p14050
sS'required'
p14051
I00
sS'group_name'
p14052
S'Advanced'
p14053
sa(dp14054
S'description'
p14055
S'The input parameter(s) to control. Specify a single parameter name and all parameters in all objects matching the name will be updated\n'
p14056
sS'cpp_type'
p14057
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14058
sS'default'
p14059
g3
sS'name'
p14060
S'parameter'
p14061
sS'required'
p14062
I01
sS'group_name'
p14063
Nsa(dp14064
S'description'
p14065
g3
sS'cpp_type'
p14066
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14067
sS'default'
p14068
S'RealFunctionControl'
p14069
sS'name'
p14070
S'type'
p14071
sS'required'
p14072
I00
sS'group_name'
p14073
NsasS'name'
p14074
S'/Controls/RealFunctionControl'
p14075
sa(dp14076
S'description'
p14077
g3
sS'subblocks'
p14078
NsS'parameters'
p14079
(lp14080
(dp14081
S'description'
p14082
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14083
sS'cpp_type'
p14084
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14085
sS'default'
p14086
g3
sS'name'
p14087
S'control_tags'
p14088
sS'required'
p14089
I00
sS'group_name'
p14090
S'Advanced'
p14091
sa(dp14092
S'description'
p14093
S'A list of object tags to disable.\n'
p14094
sS'cpp_type'
p14095
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14096
sS'default'
p14097
g3
sS'name'
p14098
S'disable_objects'
p14099
sS'required'
p14100
I00
sS'group_name'
p14101
Nsa(dp14102
S'description'
p14103
S'Set the enabled status of the MooseObject.\n'
p14104
sS'cpp_type'
p14105
S'bool'
p14106
sS'default'
p14107
S'1'
p14108
sS'name'
p14109
S'enable'
p14110
sS'required'
p14111
I00
sS'group_name'
p14112
S'Advanced'
p14113
sa(dp14114
S'description'
p14115
S'A list of object tags to enable.\n'
p14116
sS'cpp_type'
p14117
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14118
sS'default'
p14119
g3
sS'name'
p14120
S'enable_objects'
p14121
sS'required'
p14122
I00
sS'group_name'
p14123
Nsa(dp14124
S'description'
p14125
S'The time at which the objects are to be enable/disabled.\n'
p14126
sS'cpp_type'
p14127
S'std::__1::vector<double, std::__1::allocator<double> >'
p14128
sS'default'
p14129
g3
sS'name'
p14130
S'end_time'
p14131
sS'required'
p14132
I00
sS'group_name'
p14133
Nsa(dp14134
S'name'
p14135
S'execute_on'
p14136
sS'cpp_type'
p14137
S'MultiMooseEnum'
p14138
sS'default'
p14139
S'INITIAL TIMESTEP_END'
p14140
sS'description'
p14141
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p14142
sS'required'
p14143
I00
sS'options'
p14144
S'none initial linear nonlinear timestep_end timestep_begin custom subdomain'
p14145
sS'group_name'
p14146
Nsa(dp14147
S'description'
p14148
S'Determines whether this object is calculated using an implicit or explicit form\n'
p14149
sS'cpp_type'
p14150
S'bool'
p14151
sS'default'
p14152
S'1'
p14153
sS'name'
p14154
S'implicit'
p14155
sS'required'
p14156
I00
sS'group_name'
p14157
S'Advanced'
p14158
sa(dp14159
S'description'
p14160
S'When true the disable/enable lists are set to opposite values when outside of the given time range.\n'
p14161
sS'cpp_type'
p14162
S'bool'
p14163
sS'default'
p14164
S'1'
p14165
sS'name'
p14166
S'set_outside_of_range'
p14167
sS'required'
p14168
I00
sS'group_name'
p14169
Nsa(dp14170
S'description'
p14171
S'Set the start and end time as execute sync times.\n'
p14172
sS'cpp_type'
p14173
S'bool'
p14174
sS'default'
p14175
S'0'
p14176
sS'name'
p14177
S'set_sync_times'
p14178
sS'required'
p14179
I00
sS'group_name'
p14180
Nsa(dp14181
S'description'
p14182
S'The time at which the objects are to be enabled/disabled.\n'
p14183
sS'cpp_type'
p14184
S'std::__1::vector<double, std::__1::allocator<double> >'
p14185
sS'default'
p14186
g3
sS'name'
p14187
S'start_time'
p14188
sS'required'
p14189
I00
sS'group_name'
p14190
Nsa(dp14191
S'description'
p14192
g3
sS'cpp_type'
p14193
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14194
sS'default'
p14195
S'TimePeriod'
p14196
sS'name'
p14197
S'type'
p14198
sS'required'
p14199
I00
sS'group_name'
p14200
NsasS'name'
p14201
S'/Controls/TimePeriod'
p14202
sasS'parameters'
p14203
NsS'name'
p14204
S'/Controls'
p14205
sa(dp14206
S'description'
p14207
g3
sS'subblocks'
p14208
(lp14209
(dp14210
S'description'
p14211
g3
sS'subblocks'
p14212
NsS'parameters'
p14213
(lp14214
(dp14215
S'description'
p14216
S'A string representing the Moose Object that will be built by this Action\n'
p14217
sS'cpp_type'
p14218
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14219
sS'default'
p14220
g3
sS'name'
p14221
S'type'
p14222
sS'required'
p14223
I01
sS'group_name'
p14224
NsasS'name'
p14225
S'/DGKernels/*'
p14226
sa(dp14227
S'description'
p14228
S'DG upwinding for the convection\n'
p14229
sS'subblocks'
p14230
NsS'parameters'
p14231
(lp14232
(dp14233
S'description'
p14234
S'The list of block ids (SubdomainID) that this object will be applied\n'
p14235
sS'cpp_type'
p14236
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p14237
sS'default'
p14238
g3
sS'name'
p14239
S'block'
p14240
sS'required'
p14241
I00
sS'group_name'
p14242
Nsa(dp14243
S'description'
p14244
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14245
sS'cpp_type'
p14246
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p14247
sS'default'
p14248
g3
sS'name'
p14249
S'boundary'
p14250
sS'required'
p14251
I00
sS'group_name'
p14252
Nsa(dp14253
S'description'
p14254
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14255
sS'cpp_type'
p14256
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14257
sS'default'
p14258
g3
sS'name'
p14259
S'control_tags'
p14260
sS'required'
p14261
I00
sS'group_name'
p14262
S'Advanced'
p14263
sa(dp14264
S'description'
p14265
S'Set the enabled status of the MooseObject.\n'
p14266
sS'cpp_type'
p14267
S'bool'
p14268
sS'default'
p14269
S'1'
p14270
sS'name'
p14271
S'enable'
p14272
sS'required'
p14273
I00
sS'group_name'
p14274
S'Advanced'
p14275
sa(dp14276
S'description'
p14277
S'Determines whether this object is calculated using an implicit or explicit form\n'
p14278
sS'cpp_type'
p14279
S'bool'
p14280
sS'default'
p14281
S'1'
p14282
sS'name'
p14283
S'implicit'
p14284
sS'required'
p14285
I00
sS'group_name'
p14286
S'Advanced'
p14287
sa(dp14288
S'description'
p14289
g3
sS'cpp_type'
p14290
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14291
sS'default'
p14292
S'DGConvection'
p14293
sS'name'
p14294
S'type'
p14295
sS'required'
p14296
I00
sS'group_name'
p14297
Nsa(dp14298
S'description'
p14299
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p14300
sS'cpp_type'
p14301
S'bool'
p14302
sS'default'
p14303
S'0'
p14304
sS'name'
p14305
S'use_displaced_mesh'
p14306
sS'required'
p14307
I00
sS'group_name'
p14308
S'Advanced'
p14309
sa(dp14310
S'description'
p14311
S'The name of the variable that this boundary condition applies to\n'
p14312
sS'cpp_type'
p14313
S'NonlinearVariableName'
p14314
sS'default'
p14315
g3
sS'name'
p14316
S'variable'
p14317
sS'required'
p14318
I01
sS'group_name'
p14319
Nsa(dp14320
S'description'
p14321
S'Velocity vector\n'
p14322
sS'cpp_type'
p14323
S'libMesh::VectorValue<double>'
p14324
sS'default'
p14325
g3
sS'name'
p14326
S'velocity'
p14327
sS'required'
p14328
I01
sS'group_name'
p14329
NsasS'name'
p14330
S'/DGKernels/DGConvection'
p14331
sa(dp14332
S'description'
p14333
g3
sS'subblocks'
p14334
NsS'parameters'
p14335
(lp14336
(dp14337
S'description'
p14338
S'The list of block ids (SubdomainID) that this object will be applied\n'
p14339
sS'cpp_type'
p14340
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p14341
sS'default'
p14342
g3
sS'name'
p14343
S'block'
p14344
sS'required'
p14345
I00
sS'group_name'
p14346
Nsa(dp14347
S'description'
p14348
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p14349
sS'cpp_type'
p14350
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p14351
sS'default'
p14352
g3
sS'name'
p14353
S'boundary'
p14354
sS'required'
p14355
I00
sS'group_name'
p14356
Nsa(dp14357
S'description'
p14358
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14359
sS'cpp_type'
p14360
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14361
sS'default'
p14362
g3
sS'name'
p14363
S'control_tags'
p14364
sS'required'
p14365
I00
sS'group_name'
p14366
S'Advanced'
p14367
sa(dp14368
S'description'
p14369
S'The diffusion (or thermal conductivity or viscosity) coefficient.\n'
p14370
sS'cpp_type'
p14371
S'MaterialPropertyName'
p14372
sS'default'
p14373
S'1'
p14374
sS'name'
p14375
S'diff'
p14376
sS'required'
p14377
I00
sS'group_name'
p14378
Nsa(dp14379
S'description'
p14380
S'Set the enabled status of the MooseObject.\n'
p14381
sS'cpp_type'
p14382
S'bool'
p14383
sS'default'
p14384
S'1'
p14385
sS'name'
p14386
S'enable'
p14387
sS'required'
p14388
I00
sS'group_name'
p14389
S'Advanced'
p14390
sa(dp14391
S'description'
p14392
S'epsilon\n'
p14393
sS'cpp_type'
p14394
S'double'
p14395
sS'default'
p14396
g3
sS'name'
p14397
S'epsilon'
p14398
sS'required'
p14399
I01
sS'group_name'
p14400
Nsa(dp14401
S'description'
p14402
S'Determines whether this object is calculated using an implicit or explicit form\n'
p14403
sS'cpp_type'
p14404
S'bool'
p14405
sS'default'
p14406
S'1'
p14407
sS'name'
p14408
S'implicit'
p14409
sS'required'
p14410
I00
sS'group_name'
p14411
S'Advanced'
p14412
sa(dp14413
S'description'
p14414
S'sigma\n'
p14415
sS'cpp_type'
p14416
S'double'
p14417
sS'default'
p14418
g3
sS'name'
p14419
S'sigma'
p14420
sS'required'
p14421
I01
sS'group_name'
p14422
Nsa(dp14423
S'description'
p14424
g3
sS'cpp_type'
p14425
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14426
sS'default'
p14427
S'DGDiffusion'
p14428
sS'name'
p14429
S'type'
p14430
sS'required'
p14431
I00
sS'group_name'
p14432
Nsa(dp14433
S'description'
p14434
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p14435
sS'cpp_type'
p14436
S'bool'
p14437
sS'default'
p14438
S'0'
p14439
sS'name'
p14440
S'use_displaced_mesh'
p14441
sS'required'
p14442
I00
sS'group_name'
p14443
S'Advanced'
p14444
sa(dp14445
S'description'
p14446
S'The name of the variable that this boundary condition applies to\n'
p14447
sS'cpp_type'
p14448
S'NonlinearVariableName'
p14449
sS'default'
p14450
g3
sS'name'
p14451
S'variable'
p14452
sS'required'
p14453
I01
sS'group_name'
p14454
NsasS'name'
p14455
S'/DGKernels/DGDiffusion'
p14456
sasS'parameters'
p14457
NsS'name'
p14458
S'/DGKernels'
p14459
sa(dp14460
S'description'
p14461
g3
sS'subblocks'
p14462
(lp14463
(dp14464
S'description'
p14465
g3
sS'subblocks'
p14466
NsS'parameters'
p14467
(lp14468
(dp14469
S'description'
p14470
S'A string representing the Moose Object that will be built by this Action\n'
p14471
sS'cpp_type'
p14472
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14473
sS'default'
p14474
g3
sS'name'
p14475
S'type'
p14476
sS'required'
p14477
I01
sS'group_name'
p14478
NsasS'name'
p14479
S'/Dampers/*'
p14480
sa(dp14481
S'description'
p14482
g3
sS'subblocks'
p14483
NsS'parameters'
p14484
(lp14485
(dp14486
S'description'
p14487
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14488
sS'cpp_type'
p14489
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14490
sS'default'
p14491
g3
sS'name'
p14492
S'control_tags'
p14493
sS'required'
p14494
I00
sS'group_name'
p14495
S'Advanced'
p14496
sa(dp14497
S'description'
p14498
S'Set the enabled status of the MooseObject.\n'
p14499
sS'cpp_type'
p14500
S'bool'
p14501
sS'default'
p14502
S'1'
p14503
sS'name'
p14504
S'enable'
p14505
sS'required'
p14506
I00
sS'group_name'
p14507
S'Advanced'
p14508
sa(dp14509
S'description'
p14510
S'The maximum permissible iterative value for the variable.\n'
p14511
sS'cpp_type'
p14512
S'double'
p14513
sS'default'
p14514
S'1.79769e+308'
p14515
sS'name'
p14516
S'max_value'
p14517
sS'required'
p14518
I00
sS'group_name'
p14519
Nsa(dp14520
S'description'
p14521
S'The minimum permissible iterative value for the variable.\n'
p14522
sS'cpp_type'
p14523
S'double'
p14524
sS'default'
p14525
S'-1.79769e+308'
p14526
sS'name'
p14527
S'min_value'
p14528
sS'required'
p14529
I00
sS'group_name'
p14530
Nsa(dp14531
S'description'
p14532
g3
sS'cpp_type'
p14533
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14534
sS'default'
p14535
S'BoundingValueElementDamper'
p14536
sS'name'
p14537
S'type'
p14538
sS'required'
p14539
I00
sS'group_name'
p14540
Nsa(dp14541
S'description'
p14542
S'The name of the variable that this damper operates on\n'
p14543
sS'cpp_type'
p14544
S'NonlinearVariableName'
p14545
sS'default'
p14546
g3
sS'name'
p14547
S'variable'
p14548
sS'required'
p14549
I01
sS'group_name'
p14550
NsasS'name'
p14551
S'/Dampers/BoundingValueElementDamper'
p14552
sa(dp14553
S'description'
p14554
g3
sS'subblocks'
p14555
NsS'parameters'
p14556
(lp14557
(dp14558
S'description'
p14559
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14560
sS'cpp_type'
p14561
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14562
sS'default'
p14563
g3
sS'name'
p14564
S'control_tags'
p14565
sS'required'
p14566
I00
sS'group_name'
p14567
S'Advanced'
p14568
sa(dp14569
S'description'
p14570
S'Set the enabled status of the MooseObject.\n'
p14571
sS'cpp_type'
p14572
S'bool'
p14573
sS'default'
p14574
S'1'
p14575
sS'name'
p14576
S'enable'
p14577
sS'required'
p14578
I00
sS'group_name'
p14579
S'Advanced'
p14580
sa(dp14581
S'description'
p14582
S'The maximum permissible iterative value for the variable.\n'
p14583
sS'cpp_type'
p14584
S'double'
p14585
sS'default'
p14586
S'1.79769e+308'
p14587
sS'name'
p14588
S'max_value'
p14589
sS'required'
p14590
I00
sS'group_name'
p14591
Nsa(dp14592
S'description'
p14593
S'The minimum permissible iterative value for the variable.\n'
p14594
sS'cpp_type'
p14595
S'double'
p14596
sS'default'
p14597
S'-1.79769e+308'
p14598
sS'name'
p14599
S'min_value'
p14600
sS'required'
p14601
I00
sS'group_name'
p14602
Nsa(dp14603
S'description'
p14604
g3
sS'cpp_type'
p14605
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14606
sS'default'
p14607
S'BoundingValueNodalDamper'
p14608
sS'name'
p14609
S'type'
p14610
sS'required'
p14611
I00
sS'group_name'
p14612
Nsa(dp14613
S'description'
p14614
S'The name of the variable that this damper operates on\n'
p14615
sS'cpp_type'
p14616
S'NonlinearVariableName'
p14617
sS'default'
p14618
g3
sS'name'
p14619
S'variable'
p14620
sS'required'
p14621
I01
sS'group_name'
p14622
NsasS'name'
p14623
S'/Dampers/BoundingValueNodalDamper'
p14624
sa(dp14625
S'description'
p14626
g3
sS'subblocks'
p14627
NsS'parameters'
p14628
(lp14629
(dp14630
S'description'
p14631
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14632
sS'cpp_type'
p14633
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14634
sS'default'
p14635
g3
sS'name'
p14636
S'control_tags'
p14637
sS'required'
p14638
I00
sS'group_name'
p14639
S'Advanced'
p14640
sa(dp14641
S'description'
p14642
S'The percentage (between 0 and 1) of the newton update to take.\n'
p14643
sS'cpp_type'
p14644
S'double'
p14645
sS'default'
p14646
g3
sS'name'
p14647
S'damping'
p14648
sS'required'
p14649
I01
sS'group_name'
p14650
Nsa(dp14651
S'description'
p14652
S'Set the enabled status of the MooseObject.\n'
p14653
sS'cpp_type'
p14654
S'bool'
p14655
sS'default'
p14656
S'1'
p14657
sS'name'
p14658
S'enable'
p14659
sS'required'
p14660
I00
sS'group_name'
p14661
S'Advanced'
p14662
sa(dp14663
S'description'
p14664
g3
sS'cpp_type'
p14665
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14666
sS'default'
p14667
S'ConstantDamper'
p14668
sS'name'
p14669
S'type'
p14670
sS'required'
p14671
I00
sS'group_name'
p14672
NsasS'name'
p14673
S'/Dampers/ConstantDamper'
p14674
sa(dp14675
S'description'
p14676
g3
sS'subblocks'
p14677
NsS'parameters'
p14678
(lp14679
(dp14680
S'description'
p14681
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14682
sS'cpp_type'
p14683
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14684
sS'default'
p14685
g3
sS'name'
p14686
S'control_tags'
p14687
sS'required'
p14688
I00
sS'group_name'
p14689
S'Advanced'
p14690
sa(dp14691
S'description'
p14692
S'Set the enabled status of the MooseObject.\n'
p14693
sS'cpp_type'
p14694
S'bool'
p14695
sS'default'
p14696
S'1'
p14697
sS'name'
p14698
S'enable'
p14699
sS'required'
p14700
I00
sS'group_name'
p14701
S'Advanced'
p14702
sa(dp14703
S'description'
p14704
S'The maximum newton increment for the variable.\n'
p14705
sS'cpp_type'
p14706
S'double'
p14707
sS'default'
p14708
g3
sS'name'
p14709
S'max_increment'
p14710
sS'required'
p14711
I01
sS'group_name'
p14712
Nsa(dp14713
S'description'
p14714
g3
sS'cpp_type'
p14715
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14716
sS'default'
p14717
S'MaxIncrement'
p14718
sS'name'
p14719
S'type'
p14720
sS'required'
p14721
I00
sS'group_name'
p14722
Nsa(dp14723
S'description'
p14724
S'The name of the variable that this damper operates on\n'
p14725
sS'cpp_type'
p14726
S'NonlinearVariableName'
p14727
sS'default'
p14728
g3
sS'name'
p14729
S'variable'
p14730
sS'required'
p14731
I01
sS'group_name'
p14732
NsasS'name'
p14733
S'/Dampers/MaxIncrement'
p14734
sasS'parameters'
p14735
NsS'name'
p14736
S'/Dampers'
p14737
sa(dp14738
S'description'
p14739
g3
sS'subblocks'
p14740
NsS'parameters'
p14741
(lp14742
(dp14743
S'description'
p14744
S'Print out the actions being executed\n'
p14745
sS'cpp_type'
p14746
S'bool'
p14747
sS'default'
p14748
S'0'
p14749
sS'name'
p14750
S'show_actions'
p14751
sS'required'
p14752
I00
sS'group_name'
p14753
Nsa(dp14754
S'description'
p14755
S'Print out the material properties supplied for each block, face, neighbor, and/or sideset\n'
p14756
sS'cpp_type'
p14757
S'bool'
p14758
sS'default'
p14759
S'0'
p14760
sS'name'
p14761
S'show_material_props'
p14762
sS'required'
p14763
I00
sS'group_name'
p14764
Nsa(dp14765
S'description'
p14766
S'Shows parser block extraction and debugging information\n'
p14767
sS'cpp_type'
p14768
S'bool'
p14769
sS'default'
p14770
S'0'
p14771
sS'name'
p14772
S'show_parser'
p14773
sS'required'
p14774
I00
sS'group_name'
p14775
Nsa(dp14776
S'description'
p14777
S'The number of top residuals to print out (0 = no output)\n'
p14778
sS'cpp_type'
p14779
S'unsigned int'
p14780
sS'default'
p14781
S'0'
p14782
sS'name'
p14783
S'show_top_residuals'
p14784
sS'required'
p14785
I00
sS'group_name'
p14786
Nsa(dp14787
S'description'
p14788
S'Print the residual norms of the individual solution variables at each nonlinear iteration\n'
p14789
sS'cpp_type'
p14790
S'bool'
p14791
sS'default'
p14792
S'0'
p14793
sS'name'
p14794
S'show_var_residual_norms'
p14795
sS'required'
p14796
I00
sS'group_name'
p14797
Nsa(dp14798
S'description'
p14799
S'Variables for which residuals will be sent to the output file\n'
p14800
sS'cpp_type'
p14801
S'std::__1::vector<NonlinearVariableName, std::__1::allocator<NonlinearVariableName> >'
p14802
sS'default'
p14803
g3
sS'name'
p14804
S'show_var_residual'
p14805
sS'required'
p14806
I00
sS'group_name'
p14807
NsasS'name'
p14808
S'/Debug'
p14809
sa(dp14810
S'description'
p14811
g3
sS'subblocks'
p14812
NsS'parameters'
p14813
(lp14814
(dp14815
S'description'
p14816
S'*** WARNING: This block is deprecated - DO NOT USE ***\n'
p14817
sS'cpp_type'
p14818
S'bool'
p14819
sS'default'
p14820
g3
sS'name'
p14821
S'DEPRECATED'
p14822
sS'required'
p14823
I00
sS'group_name'
p14824
NsasS'name'
p14825
S'/DeprecatedBlock'
p14826
sa(dp14827
S'description'
p14828
g3
sS'subblocks'
p14829
(lp14830
(dp14831
S'description'
p14832
g3
sS'subblocks'
p14833
NsS'parameters'
p14834
(lp14835
(dp14836
S'description'
p14837
S'A string representing the Moose Object that will be built by this Action\n'
p14838
sS'cpp_type'
p14839
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14840
sS'default'
p14841
g3
sS'name'
p14842
S'type'
p14843
sS'required'
p14844
I01
sS'group_name'
p14845
NsasS'name'
p14846
S'/DiracKernels/*'
p14847
sa(dp14848
S'description'
p14849
g3
sS'subblocks'
p14850
NsS'parameters'
p14851
(lp14852
(dp14853
S'description'
p14854
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p14855
sS'cpp_type'
p14856
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14857
sS'default'
p14858
g3
sS'name'
p14859
S'control_tags'
p14860
sS'required'
p14861
I00
sS'group_name'
p14862
S'Advanced'
p14863
sa(dp14864
S'description'
p14865
S'By default points added to a DiracKernel are dropped if a point at the same locationhas been added before. If this option is set to false duplicate points are retainedand contribute to residual and Jacobian.\n'
p14866
sS'cpp_type'
p14867
S'bool'
p14868
sS'default'
p14869
S'1'
p14870
sS'name'
p14871
S'drop_duplicate_points'
p14872
sS'required'
p14873
I00
sS'group_name'
p14874
S'Advanced'
p14875
sa(dp14876
S'description'
p14877
S'Set the enabled status of the MooseObject.\n'
p14878
sS'cpp_type'
p14879
S'bool'
p14880
sS'default'
p14881
S'1'
p14882
sS'name'
p14883
S'enable'
p14884
sS'required'
p14885
I00
sS'group_name'
p14886
S'Advanced'
p14887
sa(dp14888
S'description'
p14889
S'The x,y,z coordinates of the point\n'
p14890
sS'cpp_type'
p14891
S'std::__1::vector<double, std::__1::allocator<double> >'
p14892
sS'default'
p14893
g3
sS'name'
p14894
S'point'
p14895
sS'required'
p14896
I01
sS'group_name'
p14897
Nsa(dp14898
S'description'
p14899
g3
sS'cpp_type'
p14900
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14901
sS'default'
p14902
S'ConstantPointSource'
p14903
sS'name'
p14904
S'type'
p14905
sS'required'
p14906
I00
sS'group_name'
p14907
Nsa(dp14908
S'description'
p14909
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p14910
sS'cpp_type'
p14911
S'bool'
p14912
sS'default'
p14913
S'0'
p14914
sS'name'
p14915
S'use_displaced_mesh'
p14916
sS'required'
p14917
I00
sS'group_name'
p14918
S'Advanced'
p14919
sa(dp14920
S'description'
p14921
S'The value of the point source\n'
p14922
sS'cpp_type'
p14923
S'double'
p14924
sS'default'
p14925
g3
sS'name'
p14926
S'value'
p14927
sS'required'
p14928
I01
sS'group_name'
p14929
Nsa(dp14930
S'description'
p14931
S'The name of the variable that this kernel operates on\n'
p14932
sS'cpp_type'
p14933
S'NonlinearVariableName'
p14934
sS'default'
p14935
g3
sS'name'
p14936
S'variable'
p14937
sS'required'
p14938
I01
sS'group_name'
p14939
NsasS'name'
p14940
S'/DiracKernels/ConstantPointSource'
p14941
sasS'parameters'
p14942
NsS'name'
p14943
S'/DiracKernels'
p14944
sa(dp14945
S'description'
p14946
g3
sS'subblocks'
p14947
(lp14948
(dp14949
S'description'
p14950
g3
sS'subblocks'
p14951
(lp14952
(dp14953
S'description'
p14954
g3
sS'subblocks'
p14955
NsS'parameters'
p14956
(lp14957
(dp14958
S'description'
p14959
S'If Chebyshev acceleration is turned on\n'
p14960
sS'cpp_type'
p14961
S'bool'
p14962
sS'default'
p14963
S'1'
p14964
sS'name'
p14965
S'Chebyshev_acceleration_on'
p14966
sS'required'
p14967
I00
sS'group_name'
p14968
Nsa(dp14969
S'description'
p14970
S'True to ask the solver to set initial\n'
p14971
sS'cpp_type'
p14972
S'bool'
p14973
sS'default'
p14974
S'1'
p14975
sS'name'
p14976
S'auto_initialization'
p14977
sS'required'
p14978
I00
sS'group_name'
p14979
S'Advanced'
p14980
sa(dp14981
S'description'
p14982
S'To evaluate |Bx| for the eigenvalue\n'
p14983
sS'cpp_type'
p14984
S'PostprocessorName'
p14985
sS'default'
p14986
g3
sS'name'
p14987
S'bx_norm'
p14988
sS'required'
p14989
I01
sS'group_name'
p14990
Nsa(dp14991
S'description'
p14992
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p14993
sS'cpp_type'
p14994
S'bool'
p14995
sS'default'
p14996
S'0'
p14997
sS'name'
p14998
S'compute_initial_residual_before_preset_bcs'
p14999
sS'required'
p15000
I00
sS'group_name'
p15001
S'Solver'
p15002
sa(dp15003
S'description'
p15004
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15005
sS'cpp_type'
p15006
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15007
sS'default'
p15008
g3
sS'name'
p15009
S'control_tags'
p15010
sS'required'
p15011
I00
sS'group_name'
p15012
S'Advanced'
p15013
sa(dp15014
S'description'
p15015
S'Eigenvalue convergence tolerance\n'
p15016
sS'cpp_type'
p15017
S'double'
p15018
sS'default'
p15019
S'1e-06'
p15020
sS'name'
p15021
S'eig_check_tol'
p15022
sS'required'
p15023
I00
sS'group_name'
p15024
Nsa(dp15025
S'description'
p15026
S'Set the enabled status of the MooseObject.\n'
p15027
sS'cpp_type'
p15028
S'bool'
p15029
sS'default'
p15030
S'1'
p15031
sS'name'
p15032
S'enable'
p15033
sS'required'
p15034
I00
sS'group_name'
p15035
S'Advanced'
p15036
sa(dp15037
S'description'
p15038
S'Initial guess of the eigenvalue\n'
p15039
sS'cpp_type'
p15040
S'double'
p15041
sS'default'
p15042
S'1'
p15043
sS'name'
p15044
S'k0'
p15045
sS'required'
p15046
I00
sS'group_name'
p15047
Nsa(dp15048
S'description'
p15049
S'Linear Absolute Step Tolerance\n'
p15050
sS'cpp_type'
p15051
S'double'
p15052
sS'default'
p15053
S'-1'
p15054
sS'name'
p15055
S'l_abs_step_tol'
p15056
sS'required'
p15057
I00
sS'group_name'
p15058
S'Solver'
p15059
sa(dp15060
S'description'
p15061
S'Max Linear Iterations\n'
p15062
sS'cpp_type'
p15063
S'unsigned int'
p15064
sS'default'
p15065
S'10000'
p15066
sS'name'
p15067
S'l_max_its'
p15068
sS'required'
p15069
I00
sS'group_name'
p15070
S'Solver'
p15071
sa(dp15072
S'description'
p15073
S'Linear Tolerance\n'
p15074
sS'cpp_type'
p15075
S'double'
p15076
sS'default'
p15077
S'1e-05'
p15078
sS'name'
p15079
S'l_tol'
p15080
sS'required'
p15081
I00
sS'group_name'
p15082
S'Solver'
p15083
sa(dp15084
S'name'
p15085
S'line_search'
p15086
sS'cpp_type'
p15087
S'MooseEnum'
p15088
sS'default'
p15089
S'default'
p15090
sS'description'
p15091
S'Specifies the line search type (Note: none = basic)\n'
p15092
sS'required'
p15093
I00
sS'options'
p15094
S'default shell none basic l2 bt cp'
p15095
sS'group_name'
p15096
Nsa(dp15097
S'description'
p15098
S'The maximum number of power iterations\n'
p15099
sS'cpp_type'
p15100
S'unsigned int'
p15101
sS'default'
p15102
S'300'
p15103
sS'name'
p15104
S'max_power_iterations'
p15105
sS'required'
p15106
I00
sS'group_name'
p15107
Nsa(dp15108
S'description'
p15109
S'Minimum number of power iterations\n'
p15110
sS'cpp_type'
p15111
S'unsigned int'
p15112
sS'default'
p15113
S'1'
p15114
sS'name'
p15115
S'min_power_iterations'
p15116
sS'required'
p15117
I00
sS'group_name'
p15118
Nsa(dp15119
S'description'
p15120
S'Nonlinear Absolute step Tolerance\n'
p15121
sS'cpp_type'
p15122
S'double'
p15123
sS'default'
p15124
S'1e-50'
p15125
sS'name'
p15126
S'nl_abs_step_tol'
p15127
sS'required'
p15128
I00
sS'group_name'
p15129
S'Solver'
p15130
sa(dp15131
S'description'
p15132
S'Nonlinear Absolute Tolerance\n'
p15133
sS'cpp_type'
p15134
S'double'
p15135
sS'default'
p15136
S'1e-50'
p15137
sS'name'
p15138
S'nl_abs_tol'
p15139
sS'required'
p15140
I00
sS'group_name'
p15141
S'Solver'
p15142
sa(dp15143
S'description'
p15144
S'Max Nonlinear solver function evaluations\n'
p15145
sS'cpp_type'
p15146
S'unsigned int'
p15147
sS'default'
p15148
S'10000'
p15149
sS'name'
p15150
S'nl_max_funcs'
p15151
sS'required'
p15152
I00
sS'group_name'
p15153
S'Solver'
p15154
sa(dp15155
S'description'
p15156
S'Max Nonlinear Iterations\n'
p15157
sS'cpp_type'
p15158
S'unsigned int'
p15159
sS'default'
p15160
S'50'
p15161
sS'name'
p15162
S'nl_max_its'
p15163
sS'required'
p15164
I00
sS'group_name'
p15165
S'Solver'
p15166
sa(dp15167
S'description'
p15168
S'Nonlinear Relative step Tolerance\n'
p15169
sS'cpp_type'
p15170
S'double'
p15171
sS'default'
p15172
S'1e-50'
p15173
sS'name'
p15174
S'nl_rel_step_tol'
p15175
sS'required'
p15176
I00
sS'group_name'
p15177
S'Solver'
p15178
sa(dp15179
S'description'
p15180
S'Nonlinear Relative Tolerance\n'
p15181
sS'cpp_type'
p15182
S'double'
p15183
sS'default'
p15184
S'1e-08'
p15185
sS'name'
p15186
S'nl_rel_tol'
p15187
sS'required'
p15188
I00
sS'group_name'
p15189
S'Solver'
p15190
sa(dp15191
S'description'
p15192
S'Specifies whether or not to reinitialize FEs\n'
p15193
sS'cpp_type'
p15194
S'bool'
p15195
sS'default'
p15196
S'0'
p15197
sS'name'
p15198
S'no_fe_reinit'
p15199
sS'required'
p15200
I00
sS'group_name'
p15201
S'Advanced'
p15202
sa(dp15203
S'description'
p15204
S'Normalize x to make |x| equal to this factor\n'
p15205
sS'cpp_type'
p15206
S'double'
p15207
sS'default'
p15208
g3
sS'name'
p15209
S'normal_factor'
p15210
sS'required'
p15211
I00
sS'group_name'
p15212
S'Normalization'
p15213
sa(dp15214
S'description'
p15215
S'To evaluate |x| for normalization\n'
p15216
sS'cpp_type'
p15217
S'PostprocessorName'
p15218
sS'default'
p15219
g3
sS'name'
p15220
S'normalization'
p15221
sS'required'
p15222
I00
sS'group_name'
p15223
S'Normalization'
p15224
sa(dp15225
S'description'
p15226
S'True to output a step before normalization\n'
p15227
sS'cpp_type'
p15228
S'bool'
p15229
sS'default'
p15230
S'1'
p15231
sS'name'
p15232
S'output_before_normalization'
p15233
sS'required'
p15234
I00
sS'group_name'
p15235
S'Normalization'
p15236
sa(dp15237
S'name'
p15238
S'petsc_options'
p15239
sS'cpp_type'
p15240
S'MultiMooseEnum'
p15241
sS'default'
p15242
g3
sS'description'
p15243
S'Singleton PETSc options\n'
p15244
sS'required'
p15245
I00
sS'options'
p15246
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p15247
sS'group_name'
p15248
Nsa(dp15249
S'name'
p15250
S'petsc_options_iname'
p15251
sS'cpp_type'
p15252
S'MultiMooseEnum'
p15253
sS'default'
p15254
g3
sS'description'
p15255
S'Names of PETSc name/value pairs\n'
p15256
sS'required'
p15257
I00
sS'options'
p15258
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p15259
sS'group_name'
p15260
Nsa(dp15261
S'description'
p15262
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p15263
sS'cpp_type'
p15264
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15265
sS'default'
p15266
g3
sS'name'
p15267
S'petsc_options_value'
p15268
sS'required'
p15269
I00
sS'group_name'
p15270
Nsa(dp15271
S'description'
p15272
S'Reduce residual norm per power iteration by this factor\n'
p15273
sS'cpp_type'
p15274
S'double'
p15275
sS'default'
p15276
S'0.01'
p15277
sS'name'
p15278
S'pfactor'
p15279
sS'required'
p15280
I00
sS'group_name'
p15281
Nsa(dp15282
S'description'
p15283
S'File base name used for restart\n'
p15284
sS'cpp_type'
p15285
S'FileNameNoExtension'
p15286
sS'default'
p15287
g3
sS'name'
p15288
S'restart_file_base'
p15289
sS'required'
p15290
I00
sS'group_name'
p15291
S'Restart'
p15292
sa(dp15293
S'description'
p15294
S'Convergence tolerance on |x-x_previous| when provided\n'
p15295
sS'cpp_type'
p15296
S'double'
p15297
sS'default'
p15298
S'1.79769e+308'
p15299
sS'name'
p15300
S'sol_check_tol'
p15301
sS'required'
p15302
I00
sS'group_name'
p15303
Nsa(dp15304
S'name'
p15305
S'solve_type'
p15306
sS'cpp_type'
p15307
S'MooseEnum'
p15308
sS'default'
p15309
g3
sS'description'
p15310
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p15311
sS'required'
p15312
I00
sS'options'
p15313
S'PJFNK JFNK NEWTON FD LINEAR'
p15314
sS'group_name'
p15315
Nsa(dp15316
S'description'
p15317
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p15318
sS'cpp_type'
p15319
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15320
sS'default'
p15321
g3
sS'name'
p15322
S'splitting'
p15323
sS'required'
p15324
I00
sS'group_name'
p15325
Nsa(dp15326
S'description'
p15327
S'System time\n'
p15328
sS'cpp_type'
p15329
S'double'
p15330
sS'default'
p15331
S'0'
p15332
sS'name'
p15333
S'time'
p15334
sS'required'
p15335
I00
sS'group_name'
p15336
S'Advanced'
p15337
sa(dp15338
S'description'
p15339
g3
sS'cpp_type'
p15340
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15341
sS'default'
p15342
S'InversePowerMethod'
p15343
sS'name'
p15344
S'type'
p15345
sS'required'
p15346
I00
sS'group_name'
p15347
Nsa(dp15348
S'description'
p15349
S'To evaluate |x-x_previous| for power iterations\n'
p15350
sS'cpp_type'
p15351
S'PostprocessorName'
p15352
sS'default'
p15353
g3
sS'name'
p15354
S'xdiff'
p15355
sS'required'
p15356
I00
sS'group_name'
p15357
NsasS'name'
p15358
S'/Executioner/<type>/InversePowerMethod'
p15359
sa(dp15360
S'description'
p15361
g3
sS'subblocks'
p15362
NsS'parameters'
p15363
(lp15364
(dp15365
S'description'
p15366
S'True to ask the solver to set initial\n'
p15367
sS'cpp_type'
p15368
S'bool'
p15369
sS'default'
p15370
S'1'
p15371
sS'name'
p15372
S'auto_initialization'
p15373
sS'required'
p15374
I00
sS'group_name'
p15375
S'Advanced'
p15376
sa(dp15377
S'description'
p15378
S'To evaluate |Bx| for the eigenvalue\n'
p15379
sS'cpp_type'
p15380
S'PostprocessorName'
p15381
sS'default'
p15382
g3
sS'name'
p15383
S'bx_norm'
p15384
sS'required'
p15385
I01
sS'group_name'
p15386
Nsa(dp15387
S'description'
p15388
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p15389
sS'cpp_type'
p15390
S'bool'
p15391
sS'default'
p15392
S'0'
p15393
sS'name'
p15394
S'compute_initial_residual_before_preset_bcs'
p15395
sS'required'
p15396
I00
sS'group_name'
p15397
S'Solver'
p15398
sa(dp15399
S'description'
p15400
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15401
sS'cpp_type'
p15402
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15403
sS'default'
p15404
g3
sS'name'
p15405
S'control_tags'
p15406
sS'required'
p15407
I00
sS'group_name'
p15408
S'Advanced'
p15409
sa(dp15410
S'description'
p15411
S'Set the enabled status of the MooseObject.\n'
p15412
sS'cpp_type'
p15413
S'bool'
p15414
sS'default'
p15415
S'1'
p15416
sS'name'
p15417
S'enable'
p15418
sS'required'
p15419
I00
sS'group_name'
p15420
S'Advanced'
p15421
sa(dp15422
S'description'
p15423
S'The number of free power iterations\n'
p15424
sS'cpp_type'
p15425
S'unsigned int'
p15426
sS'default'
p15427
S'4'
p15428
sS'name'
p15429
S'free_power_iterations'
p15430
sS'required'
p15431
I00
sS'group_name'
p15432
Nsa(dp15433
S'description'
p15434
S'Initial guess of the eigenvalue\n'
p15435
sS'cpp_type'
p15436
S'double'
p15437
sS'default'
p15438
S'1'
p15439
sS'name'
p15440
S'k0'
p15441
sS'required'
p15442
I00
sS'group_name'
p15443
Nsa(dp15444
S'description'
p15445
S'Linear Absolute Step Tolerance\n'
p15446
sS'cpp_type'
p15447
S'double'
p15448
sS'default'
p15449
S'-1'
p15450
sS'name'
p15451
S'l_abs_step_tol'
p15452
sS'required'
p15453
I00
sS'group_name'
p15454
S'Solver'
p15455
sa(dp15456
S'description'
p15457
S'Max Linear Iterations\n'
p15458
sS'cpp_type'
p15459
S'unsigned int'
p15460
sS'default'
p15461
S'10000'
p15462
sS'name'
p15463
S'l_max_its'
p15464
sS'required'
p15465
I00
sS'group_name'
p15466
S'Solver'
p15467
sa(dp15468
S'description'
p15469
S'Linear Tolerance\n'
p15470
sS'cpp_type'
p15471
S'double'
p15472
sS'default'
p15473
S'1e-05'
p15474
sS'name'
p15475
S'l_tol'
p15476
sS'required'
p15477
I00
sS'group_name'
p15478
S'Solver'
p15479
sa(dp15480
S'name'
p15481
S'line_search'
p15482
sS'cpp_type'
p15483
S'MooseEnum'
p15484
sS'default'
p15485
S'default'
p15486
sS'description'
p15487
S'Specifies the line search type (Note: none = basic)\n'
p15488
sS'required'
p15489
I00
sS'options'
p15490
S'default shell none basic l2 bt cp'
p15491
sS'group_name'
p15492
Nsa(dp15493
S'description'
p15494
S'Nonlinear Absolute step Tolerance\n'
p15495
sS'cpp_type'
p15496
S'double'
p15497
sS'default'
p15498
S'1e-50'
p15499
sS'name'
p15500
S'nl_abs_step_tol'
p15501
sS'required'
p15502
I00
sS'group_name'
p15503
S'Solver'
p15504
sa(dp15505
S'description'
p15506
S'Nonlinear Absolute Tolerance\n'
p15507
sS'cpp_type'
p15508
S'double'
p15509
sS'default'
p15510
S'1e-50'
p15511
sS'name'
p15512
S'nl_abs_tol'
p15513
sS'required'
p15514
I00
sS'group_name'
p15515
S'Solver'
p15516
sa(dp15517
S'description'
p15518
S'Max Nonlinear solver function evaluations\n'
p15519
sS'cpp_type'
p15520
S'unsigned int'
p15521
sS'default'
p15522
S'10000'
p15523
sS'name'
p15524
S'nl_max_funcs'
p15525
sS'required'
p15526
I00
sS'group_name'
p15527
S'Solver'
p15528
sa(dp15529
S'description'
p15530
S'Max Nonlinear Iterations\n'
p15531
sS'cpp_type'
p15532
S'unsigned int'
p15533
sS'default'
p15534
S'50'
p15535
sS'name'
p15536
S'nl_max_its'
p15537
sS'required'
p15538
I00
sS'group_name'
p15539
S'Solver'
p15540
sa(dp15541
S'description'
p15542
S'Nonlinear Relative step Tolerance\n'
p15543
sS'cpp_type'
p15544
S'double'
p15545
sS'default'
p15546
S'1e-50'
p15547
sS'name'
p15548
S'nl_rel_step_tol'
p15549
sS'required'
p15550
I00
sS'group_name'
p15551
S'Solver'
p15552
sa(dp15553
S'description'
p15554
S'Nonlinear Relative Tolerance\n'
p15555
sS'cpp_type'
p15556
S'double'
p15557
sS'default'
p15558
S'1e-08'
p15559
sS'name'
p15560
S'nl_rel_tol'
p15561
sS'required'
p15562
I00
sS'group_name'
p15563
S'Solver'
p15564
sa(dp15565
S'description'
p15566
S'Specifies whether or not to reinitialize FEs\n'
p15567
sS'cpp_type'
p15568
S'bool'
p15569
sS'default'
p15570
S'0'
p15571
sS'name'
p15572
S'no_fe_reinit'
p15573
sS'required'
p15574
I00
sS'group_name'
p15575
S'Advanced'
p15576
sa(dp15577
S'description'
p15578
S'Normalize x to make |x| equal to this factor\n'
p15579
sS'cpp_type'
p15580
S'double'
p15581
sS'default'
p15582
g3
sS'name'
p15583
S'normal_factor'
p15584
sS'required'
p15585
I00
sS'group_name'
p15586
S'Normalization'
p15587
sa(dp15588
S'description'
p15589
S'To evaluate |x| for normalization\n'
p15590
sS'cpp_type'
p15591
S'PostprocessorName'
p15592
sS'default'
p15593
g3
sS'name'
p15594
S'normalization'
p15595
sS'required'
p15596
I00
sS'group_name'
p15597
S'Normalization'
p15598
sa(dp15599
S'description'
p15600
S'True to output solution after free power iterations\n'
p15601
sS'cpp_type'
p15602
S'bool'
p15603
sS'default'
p15604
S'1'
p15605
sS'name'
p15606
S'output_after_power_iterations'
p15607
sS'required'
p15608
I00
sS'group_name'
p15609
Nsa(dp15610
S'description'
p15611
S'True to output a step before normalization\n'
p15612
sS'cpp_type'
p15613
S'bool'
p15614
sS'default'
p15615
S'1'
p15616
sS'name'
p15617
S'output_before_normalization'
p15618
sS'required'
p15619
I00
sS'group_name'
p15620
S'Normalization'
p15621
sa(dp15622
S'name'
p15623
S'petsc_options'
p15624
sS'cpp_type'
p15625
S'MultiMooseEnum'
p15626
sS'default'
p15627
g3
sS'description'
p15628
S'Singleton PETSc options\n'
p15629
sS'required'
p15630
I00
sS'options'
p15631
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p15632
sS'group_name'
p15633
Nsa(dp15634
S'name'
p15635
S'petsc_options_iname'
p15636
sS'cpp_type'
p15637
S'MultiMooseEnum'
p15638
sS'default'
p15639
g3
sS'description'
p15640
S'Names of PETSc name/value pairs\n'
p15641
sS'required'
p15642
I00
sS'options'
p15643
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p15644
sS'group_name'
p15645
Nsa(dp15646
S'description'
p15647
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p15648
sS'cpp_type'
p15649
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15650
sS'default'
p15651
g3
sS'name'
p15652
S'petsc_options_value'
p15653
sS'required'
p15654
I00
sS'group_name'
p15655
Nsa(dp15656
S'description'
p15657
S'The factor of residual to be reduced per free power iteration or per nonlinear step\n'
p15658
sS'cpp_type'
p15659
S'double'
p15660
sS'default'
p15661
S'0.01'
p15662
sS'name'
p15663
S'pfactor'
p15664
sS'required'
p15665
I00
sS'group_name'
p15666
Nsa(dp15667
S'description'
p15668
S'File base name used for restart\n'
p15669
sS'cpp_type'
p15670
S'FileNameNoExtension'
p15671
sS'default'
p15672
g3
sS'name'
p15673
S'restart_file_base'
p15674
sS'required'
p15675
I00
sS'group_name'
p15676
S'Restart'
p15677
sa(dp15678
S'name'
p15679
S'solve_type'
p15680
sS'cpp_type'
p15681
S'MooseEnum'
p15682
sS'default'
p15683
g3
sS'description'
p15684
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p15685
sS'required'
p15686
I00
sS'options'
p15687
S'PJFNK JFNK NEWTON FD LINEAR'
p15688
sS'group_name'
p15689
Nsa(dp15690
S'description'
p15691
S'Absolute tolernance on residual norm\n'
p15692
sS'cpp_type'
p15693
S'double'
p15694
sS'default'
p15695
S'1e-06'
p15696
sS'name'
p15697
S'source_abs_tol'
p15698
sS'required'
p15699
I00
sS'group_name'
p15700
Nsa(dp15701
S'description'
p15702
S'Relative tolernance on residual norm after free power iterations\n'
p15703
sS'cpp_type'
p15704
S'double'
p15705
sS'default'
p15706
S'1e-50'
p15707
sS'name'
p15708
S'source_rel_tol'
p15709
sS'required'
p15710
I00
sS'group_name'
p15711
Nsa(dp15712
S'description'
p15713
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p15714
sS'cpp_type'
p15715
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15716
sS'default'
p15717
g3
sS'name'
p15718
S'splitting'
p15719
sS'required'
p15720
I00
sS'group_name'
p15721
Nsa(dp15722
S'description'
p15723
S'System time\n'
p15724
sS'cpp_type'
p15725
S'double'
p15726
sS'default'
p15727
S'0'
p15728
sS'name'
p15729
S'time'
p15730
sS'required'
p15731
I00
sS'group_name'
p15732
S'Advanced'
p15733
sa(dp15734
S'description'
p15735
g3
sS'cpp_type'
p15736
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15737
sS'default'
p15738
S'NonlinearEigen'
p15739
sS'name'
p15740
S'type'
p15741
sS'required'
p15742
I00
sS'group_name'
p15743
NsasS'name'
p15744
S'/Executioner/<type>/NonlinearEigen'
p15745
sa(dp15746
S'description'
p15747
g3
sS'subblocks'
p15748
NsS'parameters'
p15749
(lp15750
(dp15751
S'description'
p15752
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p15753
sS'cpp_type'
p15754
S'bool'
p15755
sS'default'
p15756
S'0'
p15757
sS'name'
p15758
S'compute_initial_residual_before_preset_bcs'
p15759
sS'required'
p15760
I00
sS'group_name'
p15761
S'Solver'
p15762
sa(dp15763
S'description'
p15764
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p15765
sS'cpp_type'
p15766
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15767
sS'default'
p15768
g3
sS'name'
p15769
S'control_tags'
p15770
sS'required'
p15771
I00
sS'group_name'
p15772
S'Advanced'
p15773
sa(dp15774
S'description'
p15775
S'Set the enabled status of the MooseObject.\n'
p15776
sS'cpp_type'
p15777
S'bool'
p15778
sS'default'
p15779
S'1'
p15780
sS'name'
p15781
S'enable'
p15782
sS'required'
p15783
I00
sS'group_name'
p15784
S'Advanced'
p15785
sa(dp15786
S'description'
p15787
S'Linear Absolute Step Tolerance\n'
p15788
sS'cpp_type'
p15789
S'double'
p15790
sS'default'
p15791
S'-1'
p15792
sS'name'
p15793
S'l_abs_step_tol'
p15794
sS'required'
p15795
I00
sS'group_name'
p15796
S'Solver'
p15797
sa(dp15798
S'description'
p15799
S'Max Linear Iterations\n'
p15800
sS'cpp_type'
p15801
S'unsigned int'
p15802
sS'default'
p15803
S'10000'
p15804
sS'name'
p15805
S'l_max_its'
p15806
sS'required'
p15807
I00
sS'group_name'
p15808
S'Solver'
p15809
sa(dp15810
S'description'
p15811
S'Linear Tolerance\n'
p15812
sS'cpp_type'
p15813
S'double'
p15814
sS'default'
p15815
S'1e-05'
p15816
sS'name'
p15817
S'l_tol'
p15818
sS'required'
p15819
I00
sS'group_name'
p15820
S'Solver'
p15821
sa(dp15822
S'name'
p15823
S'line_search'
p15824
sS'cpp_type'
p15825
S'MooseEnum'
p15826
sS'default'
p15827
S'default'
p15828
sS'description'
p15829
S'Specifies the line search type (Note: none = basic)\n'
p15830
sS'required'
p15831
I00
sS'options'
p15832
S'default shell none basic l2 bt cp'
p15833
sS'group_name'
p15834
Nsa(dp15835
S'description'
p15836
S'Nonlinear Absolute step Tolerance\n'
p15837
sS'cpp_type'
p15838
S'double'
p15839
sS'default'
p15840
S'1e-50'
p15841
sS'name'
p15842
S'nl_abs_step_tol'
p15843
sS'required'
p15844
I00
sS'group_name'
p15845
S'Solver'
p15846
sa(dp15847
S'description'
p15848
S'Nonlinear Absolute Tolerance\n'
p15849
sS'cpp_type'
p15850
S'double'
p15851
sS'default'
p15852
S'1e-50'
p15853
sS'name'
p15854
S'nl_abs_tol'
p15855
sS'required'
p15856
I00
sS'group_name'
p15857
S'Solver'
p15858
sa(dp15859
S'description'
p15860
S'Max Nonlinear solver function evaluations\n'
p15861
sS'cpp_type'
p15862
S'unsigned int'
p15863
sS'default'
p15864
S'10000'
p15865
sS'name'
p15866
S'nl_max_funcs'
p15867
sS'required'
p15868
I00
sS'group_name'
p15869
S'Solver'
p15870
sa(dp15871
S'description'
p15872
S'Max Nonlinear Iterations\n'
p15873
sS'cpp_type'
p15874
S'unsigned int'
p15875
sS'default'
p15876
S'50'
p15877
sS'name'
p15878
S'nl_max_its'
p15879
sS'required'
p15880
I00
sS'group_name'
p15881
S'Solver'
p15882
sa(dp15883
S'description'
p15884
S'Nonlinear Relative step Tolerance\n'
p15885
sS'cpp_type'
p15886
S'double'
p15887
sS'default'
p15888
S'1e-50'
p15889
sS'name'
p15890
S'nl_rel_step_tol'
p15891
sS'required'
p15892
I00
sS'group_name'
p15893
S'Solver'
p15894
sa(dp15895
S'description'
p15896
S'Nonlinear Relative Tolerance\n'
p15897
sS'cpp_type'
p15898
S'double'
p15899
sS'default'
p15900
S'1e-08'
p15901
sS'name'
p15902
S'nl_rel_tol'
p15903
sS'required'
p15904
I00
sS'group_name'
p15905
S'Solver'
p15906
sa(dp15907
S'description'
p15908
S'Specifies whether or not to reinitialize FEs\n'
p15909
sS'cpp_type'
p15910
S'bool'
p15911
sS'default'
p15912
S'0'
p15913
sS'name'
p15914
S'no_fe_reinit'
p15915
sS'required'
p15916
I00
sS'group_name'
p15917
S'Advanced'
p15918
sa(dp15919
S'name'
p15920
S'petsc_options'
p15921
sS'cpp_type'
p15922
S'MultiMooseEnum'
p15923
sS'default'
p15924
g3
sS'description'
p15925
S'Singleton PETSc options\n'
p15926
sS'required'
p15927
I00
sS'options'
p15928
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p15929
sS'group_name'
p15930
Nsa(dp15931
S'name'
p15932
S'petsc_options_iname'
p15933
sS'cpp_type'
p15934
S'MultiMooseEnum'
p15935
sS'default'
p15936
g3
sS'description'
p15937
S'Names of PETSc name/value pairs\n'
p15938
sS'required'
p15939
I00
sS'options'
p15940
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p15941
sS'group_name'
p15942
Nsa(dp15943
S'description'
p15944
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p15945
sS'cpp_type'
p15946
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15947
sS'default'
p15948
g3
sS'name'
p15949
S'petsc_options_value'
p15950
sS'required'
p15951
I00
sS'group_name'
p15952
Nsa(dp15953
S'description'
p15954
S'File base name used for restart\n'
p15955
sS'cpp_type'
p15956
S'FileNameNoExtension'
p15957
sS'default'
p15958
g3
sS'name'
p15959
S'restart_file_base'
p15960
sS'required'
p15961
I00
sS'group_name'
p15962
S'Restart'
p15963
sa(dp15964
S'name'
p15965
S'solve_type'
p15966
sS'cpp_type'
p15967
S'MooseEnum'
p15968
sS'default'
p15969
g3
sS'description'
p15970
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p15971
sS'required'
p15972
I00
sS'options'
p15973
S'PJFNK JFNK NEWTON FD LINEAR'
p15974
sS'group_name'
p15975
Nsa(dp15976
S'description'
p15977
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p15978
sS'cpp_type'
p15979
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p15980
sS'default'
p15981
g3
sS'name'
p15982
S'splitting'
p15983
sS'required'
p15984
I00
sS'group_name'
p15985
Nsa(dp15986
S'description'
p15987
g3
sS'cpp_type'
p15988
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15989
sS'default'
p15990
S'Steady'
p15991
sS'name'
p15992
S'type'
p15993
sS'required'
p15994
I00
sS'group_name'
p15995
NsasS'name'
p15996
S'/Executioner/<type>/Steady'
p15997
sa(dp15998
S'description'
p15999
g3
sS'subblocks'
p16000
NsS'parameters'
p16001
(lp16002
(dp16003
S'description'
p16004
S'abort if solve not converged rather than cut timestep\n'
p16005
sS'cpp_type'
p16006
S'bool'
p16007
sS'default'
p16008
S'0'
p16009
sS'name'
p16010
S'abort_on_solve_fail'
p16011
sS'required'
p16012
I00
sS'group_name'
p16013
S'Advanced'
p16014
sa(dp16015
S'description'
p16016
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p16017
sS'cpp_type'
p16018
S'bool'
p16019
sS'default'
p16020
S'0'
p16021
sS'name'
p16022
S'compute_initial_residual_before_preset_bcs'
p16023
sS'required'
p16024
I00
sS'group_name'
p16025
S'Solver'
p16026
sa(dp16027
S'description'
p16028
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16029
sS'cpp_type'
p16030
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16031
sS'default'
p16032
g3
sS'name'
p16033
S'control_tags'
p16034
sS'required'
p16035
I00
sS'group_name'
p16036
S'Advanced'
p16037
sa(dp16038
S'description'
p16039
S'The timestep size between solves\n'
p16040
sS'cpp_type'
p16041
S'double'
p16042
sS'default'
p16043
S'1'
p16044
sS'name'
p16045
S'dt'
p16046
sS'required'
p16047
I00
sS'group_name'
p16048
Nsa(dp16049
S'description'
p16050
S'The maximum timestep size in an adaptive run\n'
p16051
sS'cpp_type'
p16052
S'double'
p16053
sS'default'
p16054
S'1e+30'
p16055
sS'name'
p16056
S'dtmax'
p16057
sS'required'
p16058
I00
sS'group_name'
p16059
S'Advanced'
p16060
sa(dp16061
S'description'
p16062
S'The minimum timestep size in an adaptive run\n'
p16063
sS'cpp_type'
p16064
S'double'
p16065
sS'default'
p16066
S'2e-14'
p16067
sS'name'
p16068
S'dtmin'
p16069
sS'required'
p16070
I00
sS'group_name'
p16071
S'Advanced'
p16072
sa(dp16073
S'description'
p16074
S'Set the enabled status of the MooseObject.\n'
p16075
sS'cpp_type'
p16076
S'bool'
p16077
sS'default'
p16078
S'1'
p16079
sS'name'
p16080
S'enable'
p16081
sS'required'
p16082
I00
sS'group_name'
p16083
S'Advanced'
p16084
sa(dp16085
S'description'
p16086
S'The end time of the simulation\n'
p16087
sS'cpp_type'
p16088
S'double'
p16089
sS'default'
p16090
S'1e+30'
p16091
sS'name'
p16092
S'end_time'
p16093
sS'required'
p16094
I00
sS'group_name'
p16095
Nsa(dp16096
S'description'
p16097
S'Linear Absolute Step Tolerance\n'
p16098
sS'cpp_type'
p16099
S'double'
p16100
sS'default'
p16101
S'-1'
p16102
sS'name'
p16103
S'l_abs_step_tol'
p16104
sS'required'
p16105
I00
sS'group_name'
p16106
S'Solver'
p16107
sa(dp16108
S'description'
p16109
S'Max Linear Iterations\n'
p16110
sS'cpp_type'
p16111
S'unsigned int'
p16112
sS'default'
p16113
S'10000'
p16114
sS'name'
p16115
S'l_max_its'
p16116
sS'required'
p16117
I00
sS'group_name'
p16118
S'Solver'
p16119
sa(dp16120
S'description'
p16121
S'Linear Tolerance\n'
p16122
sS'cpp_type'
p16123
S'double'
p16124
sS'default'
p16125
S'1e-05'
p16126
sS'name'
p16127
S'l_tol'
p16128
sS'required'
p16129
I00
sS'group_name'
p16130
S'Solver'
p16131
sa(dp16132
S'name'
p16133
S'line_search'
p16134
sS'cpp_type'
p16135
S'MooseEnum'
p16136
sS'default'
p16137
S'default'
p16138
sS'description'
p16139
S'Specifies the line search type (Note: none = basic)\n'
p16140
sS'required'
p16141
I00
sS'options'
p16142
S'default shell none basic l2 bt cp'
p16143
sS'group_name'
p16144
Nsa(dp16145
S'description'
p16146
S'Maximum number of times to update XFEM crack topology in a step due to evolving cracks\n'
p16147
sS'cpp_type'
p16148
S'unsigned int'
p16149
sS'default'
p16150
S'4294967295'
p16151
sS'name'
p16152
S'max_xfem_update'
p16153
sS'required'
p16154
I00
sS'group_name'
p16155
Nsa(dp16156
S'description'
p16157
S'The number of timesteps during startup\n'
p16158
sS'cpp_type'
p16159
S'int'
p16160
sS'default'
p16161
S'0'
p16162
sS'name'
p16163
S'n_startup_steps'
p16164
sS'required'
p16165
I00
sS'group_name'
p16166
S'Advanced'
p16167
sa(dp16168
S'description'
p16169
S'Nonlinear Absolute step Tolerance\n'
p16170
sS'cpp_type'
p16171
S'double'
p16172
sS'default'
p16173
S'1e-50'
p16174
sS'name'
p16175
S'nl_abs_step_tol'
p16176
sS'required'
p16177
I00
sS'group_name'
p16178
S'Solver'
p16179
sa(dp16180
S'description'
p16181
S'Nonlinear Absolute Tolerance\n'
p16182
sS'cpp_type'
p16183
S'double'
p16184
sS'default'
p16185
S'1e-50'
p16186
sS'name'
p16187
S'nl_abs_tol'
p16188
sS'required'
p16189
I00
sS'group_name'
p16190
S'Solver'
p16191
sa(dp16192
S'description'
p16193
S'Max Nonlinear solver function evaluations\n'
p16194
sS'cpp_type'
p16195
S'unsigned int'
p16196
sS'default'
p16197
S'10000'
p16198
sS'name'
p16199
S'nl_max_funcs'
p16200
sS'required'
p16201
I00
sS'group_name'
p16202
S'Solver'
p16203
sa(dp16204
S'description'
p16205
S'Max Nonlinear Iterations\n'
p16206
sS'cpp_type'
p16207
S'unsigned int'
p16208
sS'default'
p16209
S'50'
p16210
sS'name'
p16211
S'nl_max_its'
p16212
sS'required'
p16213
I00
sS'group_name'
p16214
S'Solver'
p16215
sa(dp16216
S'description'
p16217
S'Nonlinear Relative step Tolerance\n'
p16218
sS'cpp_type'
p16219
S'double'
p16220
sS'default'
p16221
S'1e-50'
p16222
sS'name'
p16223
S'nl_rel_step_tol'
p16224
sS'required'
p16225
I00
sS'group_name'
p16226
S'Solver'
p16227
sa(dp16228
S'description'
p16229
S'Nonlinear Relative Tolerance\n'
p16230
sS'cpp_type'
p16231
S'double'
p16232
sS'default'
p16233
S'1e-08'
p16234
sS'name'
p16235
S'nl_rel_tol'
p16236
sS'required'
p16237
I00
sS'group_name'
p16238
S'Solver'
p16239
sa(dp16240
S'description'
p16241
S'Specifies whether or not to reinitialize FEs\n'
p16242
sS'cpp_type'
p16243
S'bool'
p16244
sS'default'
p16245
S'0'
p16246
sS'name'
p16247
S'no_fe_reinit'
p16248
sS'required'
p16249
I00
sS'group_name'
p16250
S'Advanced'
p16251
sa(dp16252
S'description'
p16253
S'The number of timesteps in a transient run\n'
p16254
sS'cpp_type'
p16255
S'unsigned int'
p16256
sS'default'
p16257
S'4294967295'
p16258
sS'name'
p16259
S'num_steps'
p16260
sS'required'
p16261
I00
sS'group_name'
p16262
Nsa(dp16263
S'name'
p16264
S'petsc_options'
p16265
sS'cpp_type'
p16266
S'MultiMooseEnum'
p16267
sS'default'
p16268
g3
sS'description'
p16269
S'Singleton PETSc options\n'
p16270
sS'required'
p16271
I00
sS'options'
p16272
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p16273
sS'group_name'
p16274
Nsa(dp16275
S'name'
p16276
S'petsc_options_iname'
p16277
sS'cpp_type'
p16278
S'MultiMooseEnum'
p16279
sS'default'
p16280
g3
sS'description'
p16281
S'Names of PETSc name/value pairs\n'
p16282
sS'required'
p16283
I00
sS'options'
p16284
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p16285
sS'group_name'
p16286
Nsa(dp16287
S'description'
p16288
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p16289
sS'cpp_type'
p16290
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16291
sS'default'
p16292
g3
sS'name'
p16293
S'petsc_options_value'
p16294
sS'required'
p16295
I00
sS'group_name'
p16296
Nsa(dp16297
S'description'
p16298
S"The absolute nonlinear residual to shoot for during Picard iterations.  This check is performed based on the Master app's nonlinear residual.\n"
p16299
sS'cpp_type'
p16300
S'double'
p16301
sS'default'
p16302
S'1e-50'
p16303
sS'name'
p16304
S'picard_abs_tol'
p16305
sS'required'
p16306
I00
sS'group_name'
p16307
S'Picard'
p16308
sa(dp16309
S'description'
p16310
S'Number of times each timestep will be solved.  Mainly used when wanting to do Picard iterations with MultiApps that are set to execute_on timestep_end or timestep_begin\n'
p16311
sS'cpp_type'
p16312
S'unsigned int'
p16313
sS'default'
p16314
S'1'
p16315
sS'name'
p16316
S'picard_max_its'
p16317
sS'required'
p16318
I00
sS'group_name'
p16319
S'Picard'
p16320
sa(dp16321
S'description'
p16322
S"The relative nonlinear residual drop to shoot for during Picard iterations.  This check is performed based on the Master app's nonlinear residual.\n"
p16323
sS'cpp_type'
p16324
S'double'
p16325
sS'default'
p16326
S'1e-08'
p16327
sS'name'
p16328
S'picard_rel_tol'
p16329
sS'required'
p16330
I00
sS'group_name'
p16331
S'Picard'
p16332
sa(dp16333
S'description'
p16334
S'Use when restarting a calculation to force a change in dt.\n'
p16335
sS'cpp_type'
p16336
S'bool'
p16337
sS'default'
p16338
S'0'
p16339
sS'name'
p16340
S'reset_dt'
p16341
sS'required'
p16342
I00
sS'group_name'
p16343
Nsa(dp16344
S'description'
p16345
S'File base name used for restart\n'
p16346
sS'cpp_type'
p16347
S'FileNameNoExtension'
p16348
sS'default'
p16349
g3
sS'name'
p16350
S'restart_file_base'
p16351
sS'required'
p16352
I00
sS'group_name'
p16353
S'Restart'
p16354
sa(dp16355
S'name'
p16356
S'scheme'
p16357
sS'cpp_type'
p16358
S'MooseEnum'
p16359
sS'default'
p16360
g3
sS'description'
p16361
S'Time integration scheme used.\n'
p16362
sS'required'
p16363
I00
sS'options'
p16364
S'implicit-euler explicit-euler crank-nicolson bdf2 rk-2 dirk explicit-tvd-rk-2'
p16365
sS'group_name'
p16366
Nsa(dp16367
S'name'
p16368
S'solve_type'
p16369
sS'cpp_type'
p16370
S'MooseEnum'
p16371
sS'default'
p16372
g3
sS'description'
p16373
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p16374
sS'required'
p16375
I00
sS'options'
p16376
S'PJFNK JFNK NEWTON FD LINEAR'
p16377
sS'group_name'
p16378
Nsa(dp16379
S'description'
p16380
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p16381
sS'cpp_type'
p16382
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16383
sS'default'
p16384
g3
sS'name'
p16385
S'splitting'
p16386
sS'required'
p16387
I00
sS'group_name'
p16388
Nsa(dp16389
S'description'
p16390
S'Whenever the relative residual changes by less than this the solution will be considered to be at steady state.\n'
p16391
sS'cpp_type'
p16392
S'double'
p16393
sS'default'
p16394
S'1e-08'
p16395
sS'name'
p16396
S'ss_check_tol'
p16397
sS'required'
p16398
I00
sS'group_name'
p16399
S'Advanced'
p16400
sa(dp16401
S'description'
p16402
S'Minimum number of timesteps to take before checking for steady state conditions.\n'
p16403
sS'cpp_type'
p16404
S'double'
p16405
sS'default'
p16406
S'0'
p16407
sS'name'
p16408
S'ss_tmin'
p16409
sS'required'
p16410
I00
sS'group_name'
p16411
S'Advanced'
p16412
sa(dp16413
S'description'
p16414
S'The start time of the simulation\n'
p16415
sS'cpp_type'
p16416
S'double'
p16417
sS'default'
p16418
S'0'
p16419
sS'name'
p16420
S'start_time'
p16421
sS'required'
p16422
I00
sS'group_name'
p16423
S'Advanced'
p16424
sa(dp16425
S'description'
p16426
S'The end times of time periods\n'
p16427
sS'cpp_type'
p16428
S'std::__1::vector<double, std::__1::allocator<double> >'
p16429
sS'default'
p16430
g3
sS'name'
p16431
S'time_period_ends'
p16432
sS'required'
p16433
I00
sS'group_name'
p16434
S'Time Periods'
p16435
sa(dp16436
S'description'
p16437
S'The start times of time periods\n'
p16438
sS'cpp_type'
p16439
S'std::__1::vector<double, std::__1::allocator<double> >'
p16440
sS'default'
p16441
g3
sS'name'
p16442
S'time_period_starts'
p16443
sS'required'
p16444
I00
sS'group_name'
p16445
S'Time Periods'
p16446
sa(dp16447
S'description'
p16448
S'The names of periods\n'
p16449
sS'cpp_type'
p16450
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16451
sS'default'
p16452
g3
sS'name'
p16453
S'time_periods'
p16454
sS'required'
p16455
I00
sS'group_name'
p16456
S'Time Periods'
p16457
sa(dp16458
S'description'
p16459
S'the tolerance setting for final timestep size and sync times\n'
p16460
sS'cpp_type'
p16461
S'double'
p16462
sS'default'
p16463
S'2e-14'
p16464
sS'name'
p16465
S'timestep_tolerance'
p16466
sS'required'
p16467
I00
sS'group_name'
p16468
S'Advanced'
p16469
sa(dp16470
S'description'
p16471
S'Whether or not to check for steady state conditions\n'
p16472
sS'cpp_type'
p16473
S'bool'
p16474
sS'default'
p16475
S'0'
p16476
sS'name'
p16477
S'trans_ss_check'
p16478
sS'required'
p16479
I00
sS'group_name'
p16480
S'Advanced'
p16481
sa(dp16482
S'description'
p16483
g3
sS'cpp_type'
p16484
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16485
sS'default'
p16486
S'Transient'
p16487
sS'name'
p16488
S'type'
p16489
sS'required'
p16490
I00
sS'group_name'
p16491
Nsa(dp16492
S'description'
p16493
S'If true then the dt for the simulation will be chosen by the MultiApps.  If false (the default) then the minimum over the master dt and the MultiApps is used\n'
p16494
sS'cpp_type'
p16495
S'bool'
p16496
sS'default'
p16497
S'0'
p16498
sS'name'
p16499
S'use_multiapp_dt'
p16500
sS'required'
p16501
I00
sS'group_name'
p16502
S'Advanced'
p16503
sa(dp16504
S'description'
p16505
S'Print detailed diagnostics on timestep calculation\n'
p16506
sS'cpp_type'
p16507
S'bool'
p16508
sS'default'
p16509
S'0'
p16510
sS'name'
p16511
S'verbose'
p16512
sS'required'
p16513
I00
sS'group_name'
p16514
NsasS'name'
p16515
S'/Executioner/<type>/Transient'
p16516
sasS'parameters'
p16517
NsS'name'
p16518
S'/Executioner/<type>'
p16519
sa(dp16520
S'description'
p16521
g3
sS'subblocks'
p16522
NsS'parameters'
p16523
(lp16524
(dp16525
S'description'
p16526
S'The fraction of elements or error to coarsen. Should be between 0 and 1.\n'
p16527
sS'cpp_type'
p16528
S'double'
p16529
sS'default'
p16530
S'0'
p16531
sS'name'
p16532
S'coarsen_fraction'
p16533
sS'required'
p16534
I00
sS'group_name'
p16535
Nsa(dp16536
S'description'
p16537
S'The number of adaptivity cycles per step\n'
p16538
sS'cpp_type'
p16539
S'unsigned int'
p16540
sS'default'
p16541
S'1'
p16542
sS'name'
p16543
S'cycles_per_step'
p16544
sS'required'
p16545
I00
sS'group_name'
p16546
Nsa(dp16547
S'name'
p16548
S'error_estimator'
p16549
sS'cpp_type'
p16550
S'MooseEnum'
p16551
sS'default'
p16552
S'KellyErrorEstimator'
p16553
sS'description'
p16554
S'The class name of the error estimator you want to use.\n'
p16555
sS'required'
p16556
I00
sS'options'
p16557
S'KellyErrorEstimator LaplacianErrorEstimator PatchRecoveryErrorEstimator'
p16558
sS'group_name'
p16559
Nsa(dp16560
S'description'
p16561
S'The number of adaptivity steps to perform using the initial conditions\n'
p16562
sS'cpp_type'
p16563
S'unsigned int'
p16564
sS'default'
p16565
S'0'
p16566
sS'name'
p16567
S'initial_adaptivity'
p16568
sS'required'
p16569
I00
sS'group_name'
p16570
Nsa(dp16571
S'description'
p16572
S'The number of time steps betweeen each adaptivity phase\n'
p16573
sS'cpp_type'
p16574
S'unsigned int'
p16575
sS'default'
p16576
S'1'
p16577
sS'name'
p16578
S'interval'
p16579
sS'required'
p16580
I00
sS'group_name'
p16581
Nsa(dp16582
S'description'
p16583
S'Maximum number of times a single element can be refined. If 0 then infinite.\n'
p16584
sS'cpp_type'
p16585
S'unsigned int'
p16586
sS'default'
p16587
S'0'
p16588
sS'name'
p16589
S'max_h_level'
p16590
sS'required'
p16591
I00
sS'group_name'
p16592
Nsa(dp16593
S'description'
p16594
S'Determines whether information about the mesh is printed when adaptivity occurs\n'
p16595
sS'cpp_type'
p16596
S'bool'
p16597
sS'default'
p16598
S'0'
p16599
sS'name'
p16600
S'print_changed_info'
p16601
sS'required'
p16602
I00
sS'group_name'
p16603
Nsa(dp16604
S'description'
p16605
S'Recompute markers during adaptivity cycles\n'
p16606
sS'cpp_type'
p16607
S'bool'
p16608
sS'default'
p16609
S'0'
p16610
sS'name'
p16611
S'recompute_markers_during_cycles'
p16612
sS'required'
p16613
I00
sS'group_name'
p16614
Nsa(dp16615
S'description'
p16616
S'The fraction of elements or error to refine. Should be between 0 and 1.\n'
p16617
sS'cpp_type'
p16618
S'double'
p16619
sS'default'
p16620
S'0'
p16621
sS'name'
p16622
S'refine_fraction'
p16623
sS'required'
p16624
I00
sS'group_name'
p16625
Nsa(dp16626
S'description'
p16627
S'Show the progress of the initial adaptivity\n'
p16628
sS'cpp_type'
p16629
S'bool'
p16630
sS'default'
p16631
S'1'
p16632
sS'name'
p16633
S'show_initial_progress'
p16634
sS'required'
p16635
I00
sS'group_name'
p16636
Nsa(dp16637
S'description'
p16638
S'The time that adaptivity will be active after.\n'
p16639
sS'cpp_type'
p16640
S'double'
p16641
sS'default'
p16642
S'-1.79769e+308'
p16643
sS'name'
p16644
S'start_time'
p16645
sS'required'
p16646
I00
sS'group_name'
p16647
Nsa(dp16648
S'description'
p16649
S'The number of adaptivity steps to perform at any one time for steady state\n'
p16650
sS'cpp_type'
p16651
S'unsigned int'
p16652
sS'default'
p16653
S'0'
p16654
sS'name'
p16655
S'steps'
p16656
sS'required'
p16657
I00
sS'group_name'
p16658
Nsa(dp16659
S'description'
p16660
S'The time after which adaptivity will no longer be active.\n'
p16661
sS'cpp_type'
p16662
S'double'
p16663
sS'default'
p16664
S'1.79769e+308'
p16665
sS'name'
p16666
S'stop_time'
p16667
sS'required'
p16668
I00
sS'group_name'
p16669
Nsa(dp16670
S'description'
p16671
S'List of names of variables that will be associated with weight_values\n'
p16672
sS'cpp_type'
p16673
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16674
sS'default'
p16675
g3
sS'name'
p16676
S'weight_names'
p16677
sS'required'
p16678
I00
sS'group_name'
p16679
Nsa(dp16680
S'description'
p16681
S'List of values between 0 and 1 to weight the associated weight_names error by\n'
p16682
sS'cpp_type'
p16683
S'std::__1::vector<double, std::__1::allocator<double> >'
p16684
sS'default'
p16685
g3
sS'name'
p16686
S'weight_values'
p16687
sS'required'
p16688
I00
sS'group_name'
p16689
NsasS'name'
p16690
S'/Executioner/Adaptivity'
p16691
sa(dp16692
S'description'
p16693
g3
sS'subblocks'
p16694
(lp16695
(dp16696
S'description'
p16697
g3
sS'subblocks'
p16698
(lp16699
(dp16700
S'description'
p16701
g3
sS'subblocks'
p16702
NsS'parameters'
p16703
(lp16704
(dp16705
S'description'
p16706
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16707
sS'cpp_type'
p16708
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16709
sS'default'
p16710
g3
sS'name'
p16711
S'control_tags'
p16712
sS'required'
p16713
I00
sS'group_name'
p16714
S'Advanced'
p16715
sa(dp16716
S'description'
p16717
S'Set the enabled status of the MooseObject.\n'
p16718
sS'cpp_type'
p16719
S'bool'
p16720
sS'default'
p16721
S'1'
p16722
sS'name'
p16723
S'enable'
p16724
sS'required'
p16725
I00
sS'group_name'
p16726
S'Advanced'
p16727
sa(dp16728
S'description'
p16729
S'The maximum reachable order of the Adams-Bashforth Predictor\n'
p16730
sS'cpp_type'
p16731
S'int'
p16732
sS'default'
p16733
S'2'
p16734
sS'name'
p16735
S'order'
p16736
sS'required'
p16737
I00
sS'group_name'
p16738
Nsa(dp16739
S'description'
p16740
S'The scale factor for the predictor (can range from 0 to 1)\n'
p16741
sS'cpp_type'
p16742
S'double'
p16743
sS'default'
p16744
g3
sS'name'
p16745
S'scale'
p16746
sS'required'
p16747
I01
sS'group_name'
p16748
Nsa(dp16749
S'description'
p16750
S'Skip the predictor if the current solution time is in this list of times\n'
p16751
sS'cpp_type'
p16752
S'std::__1::vector<double, std::__1::allocator<double> >'
p16753
sS'default'
p16754
g3
sS'name'
p16755
S'skip_times'
p16756
sS'required'
p16757
I00
sS'group_name'
p16758
Nsa(dp16759
S'description'
p16760
S'Skip the predictor if the previous solution time is in this list of times\n'
p16761
sS'cpp_type'
p16762
S'std::__1::vector<double, std::__1::allocator<double> >'
p16763
sS'default'
p16764
g3
sS'name'
p16765
S'skip_times_old'
p16766
sS'required'
p16767
I00
sS'group_name'
p16768
Nsa(dp16769
S'description'
p16770
g3
sS'cpp_type'
p16771
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16772
sS'default'
p16773
S'AdamsPredictor'
p16774
sS'name'
p16775
S'type'
p16776
sS'required'
p16777
I00
sS'group_name'
p16778
NsasS'name'
p16779
S'/Executioner/Predictor/<type>/AdamsPredictor'
p16780
sa(dp16781
S'description'
p16782
g3
sS'subblocks'
p16783
NsS'parameters'
p16784
(lp16785
(dp16786
S'description'
p16787
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16788
sS'cpp_type'
p16789
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16790
sS'default'
p16791
g3
sS'name'
p16792
S'control_tags'
p16793
sS'required'
p16794
I00
sS'group_name'
p16795
S'Advanced'
p16796
sa(dp16797
S'description'
p16798
S'Set the enabled status of the MooseObject.\n'
p16799
sS'cpp_type'
p16800
S'bool'
p16801
sS'default'
p16802
S'1'
p16803
sS'name'
p16804
S'enable'
p16805
sS'required'
p16806
I00
sS'group_name'
p16807
S'Advanced'
p16808
sa(dp16809
S'description'
p16810
S'The scale factor for the predictor (can range from 0 to 1)\n'
p16811
sS'cpp_type'
p16812
S'double'
p16813
sS'default'
p16814
g3
sS'name'
p16815
S'scale'
p16816
sS'required'
p16817
I01
sS'group_name'
p16818
Nsa(dp16819
S'description'
p16820
S'Skip the predictor if the current solution time is in this list of times\n'
p16821
sS'cpp_type'
p16822
S'std::__1::vector<double, std::__1::allocator<double> >'
p16823
sS'default'
p16824
g3
sS'name'
p16825
S'skip_times'
p16826
sS'required'
p16827
I00
sS'group_name'
p16828
Nsa(dp16829
S'description'
p16830
S'Skip the predictor if the previous solution time is in this list of times\n'
p16831
sS'cpp_type'
p16832
S'std::__1::vector<double, std::__1::allocator<double> >'
p16833
sS'default'
p16834
g3
sS'name'
p16835
S'skip_times_old'
p16836
sS'required'
p16837
I00
sS'group_name'
p16838
Nsa(dp16839
S'description'
p16840
g3
sS'cpp_type'
p16841
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16842
sS'default'
p16843
S'SimplePredictor'
p16844
sS'name'
p16845
S'type'
p16846
sS'required'
p16847
I00
sS'group_name'
p16848
NsasS'name'
p16849
S'/Executioner/Predictor/<type>/SimplePredictor'
p16850
sasS'parameters'
p16851
NsS'name'
p16852
S'/Executioner/Predictor/<type>'
p16853
sasS'parameters'
p16854
(lp16855
(dp16856
S'description'
p16857
S'A string representing the Moose Object that will be built by this Action\n'
p16858
sS'cpp_type'
p16859
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16860
sS'default'
p16861
g3
sS'name'
p16862
S'type'
p16863
sS'required'
p16864
I01
sS'group_name'
p16865
NsasS'name'
p16866
S'/Executioner/Predictor'
p16867
sa(dp16868
S'description'
p16869
g3
sS'subblocks'
p16870
NsS'parameters'
p16871
(lp16872
(dp16873
S'name'
p16874
S'element_order'
p16875
sS'cpp_type'
p16876
S'MooseEnum'
p16877
sS'default'
p16878
S'AUTO'
p16879
sS'description'
p16880
S'Order of the quadrature for elements\n'
p16881
sS'required'
p16882
I00
sS'options'
p16883
S'AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH'
p16884
sS'group_name'
p16885
Nsa(dp16886
S'name'
p16887
S'order'
p16888
sS'cpp_type'
p16889
S'MooseEnum'
p16890
sS'default'
p16891
S'AUTO'
p16892
sS'description'
p16893
S'Order of the quadrature\n'
p16894
sS'required'
p16895
I00
sS'options'
p16896
S'AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH'
p16897
sS'group_name'
p16898
Nsa(dp16899
S'name'
p16900
S'side_order'
p16901
sS'cpp_type'
p16902
S'MooseEnum'
p16903
sS'default'
p16904
S'AUTO'
p16905
sS'description'
p16906
S'Order of the quadrature for sides\n'
p16907
sS'required'
p16908
I00
sS'options'
p16909
S'AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH'
p16910
sS'group_name'
p16911
Nsa(dp16912
S'name'
p16913
S'type'
p16914
sS'cpp_type'
p16915
S'MooseEnum'
p16916
sS'default'
p16917
S'GAUSS'
p16918
sS'description'
p16919
S'Type of the quadrature rule\n'
p16920
sS'required'
p16921
I00
sS'options'
p16922
S'CLOUGH CONICAL GAUSS GRID MONOMIAL SIMPSON TRAP GAUSS_LOBATTO'
p16923
sS'group_name'
p16924
NsasS'name'
p16925
S'/Executioner/Quadrature'
p16926
sa(dp16927
S'description'
p16928
g3
sS'subblocks'
p16929
(lp16930
(dp16931
S'description'
p16932
g3
sS'subblocks'
p16933
(lp16934
(dp16935
S'description'
p16936
g3
sS'subblocks'
p16937
NsS'parameters'
p16938
(lp16939
(dp16940
S'description'
p16941
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16942
sS'cpp_type'
p16943
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16944
sS'default'
p16945
g3
sS'name'
p16946
S'control_tags'
p16947
sS'required'
p16948
I00
sS'group_name'
p16949
S'Advanced'
p16950
sa(dp16951
S'description'
p16952
S'Set the enabled status of the MooseObject.\n'
p16953
sS'cpp_type'
p16954
S'bool'
p16955
sS'default'
p16956
S'1'
p16957
sS'name'
p16958
S'enable'
p16959
sS'required'
p16960
I00
sS'group_name'
p16961
S'Advanced'
p16962
sa(dp16963
S'description'
p16964
S'If true, use LStableDirk4 to bootstrap this method.\n'
p16965
sS'cpp_type'
p16966
S'bool'
p16967
sS'default'
p16968
S'1'
p16969
sS'name'
p16970
S'safe_start'
p16971
sS'required'
p16972
I00
sS'group_name'
p16973
Nsa(dp16974
S'description'
p16975
g3
sS'cpp_type'
p16976
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16977
sS'default'
p16978
S'AStableDirk4'
p16979
sS'name'
p16980
S'type'
p16981
sS'required'
p16982
I00
sS'group_name'
p16983
NsasS'name'
p16984
S'/Executioner/TimeIntegrator/<type>/AStableDirk4'
p16985
sa(dp16986
S'description'
p16987
g3
sS'subblocks'
p16988
NsS'parameters'
p16989
(lp16990
(dp16991
S'description'
p16992
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p16993
sS'cpp_type'
p16994
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p16995
sS'default'
p16996
g3
sS'name'
p16997
S'control_tags'
p16998
sS'required'
p16999
I00
sS'group_name'
p17000
S'Advanced'
p17001
sa(dp17002
S'description'
p17003
S'Set the enabled status of the MooseObject.\n'
p17004
sS'cpp_type'
p17005
S'bool'
p17006
sS'default'
p17007
S'1'
p17008
sS'name'
p17009
S'enable'
p17010
sS'required'
p17011
I00
sS'group_name'
p17012
S'Advanced'
p17013
sa(dp17014
S'description'
p17015
g3
sS'cpp_type'
p17016
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17017
sS'default'
p17018
S'BDF2'
p17019
sS'name'
p17020
S'type'
p17021
sS'required'
p17022
I00
sS'group_name'
p17023
NsasS'name'
p17024
S'/Executioner/TimeIntegrator/<type>/BDF2'
p17025
sa(dp17026
S'description'
p17027
g3
sS'subblocks'
p17028
NsS'parameters'
p17029
(lp17030
(dp17031
S'description'
p17032
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17033
sS'cpp_type'
p17034
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17035
sS'default'
p17036
g3
sS'name'
p17037
S'control_tags'
p17038
sS'required'
p17039
I00
sS'group_name'
p17040
S'Advanced'
p17041
sa(dp17042
S'description'
p17043
S'Set the enabled status of the MooseObject.\n'
p17044
sS'cpp_type'
p17045
S'bool'
p17046
sS'default'
p17047
S'1'
p17048
sS'name'
p17049
S'enable'
p17050
sS'required'
p17051
I00
sS'group_name'
p17052
S'Advanced'
p17053
sa(dp17054
S'description'
p17055
g3
sS'cpp_type'
p17056
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17057
sS'default'
p17058
S'CrankNicolson'
p17059
sS'name'
p17060
S'type'
p17061
sS'required'
p17062
I00
sS'group_name'
p17063
NsasS'name'
p17064
S'/Executioner/TimeIntegrator/<type>/CrankNicolson'
p17065
sa(dp17066
S'description'
p17067
g3
sS'subblocks'
p17068
NsS'parameters'
p17069
(lp17070
(dp17071
S'description'
p17072
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17073
sS'cpp_type'
p17074
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17075
sS'default'
p17076
g3
sS'name'
p17077
S'control_tags'
p17078
sS'required'
p17079
I00
sS'group_name'
p17080
S'Advanced'
p17081
sa(dp17082
S'description'
p17083
S'Set the enabled status of the MooseObject.\n'
p17084
sS'cpp_type'
p17085
S'bool'
p17086
sS'default'
p17087
S'1'
p17088
sS'name'
p17089
S'enable'
p17090
sS'required'
p17091
I00
sS'group_name'
p17092
S'Advanced'
p17093
sa(dp17094
S'description'
p17095
g3
sS'cpp_type'
p17096
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17097
sS'default'
p17098
S'ExplicitEuler'
p17099
sS'name'
p17100
S'type'
p17101
sS'required'
p17102
I00
sS'group_name'
p17103
NsasS'name'
p17104
S'/Executioner/TimeIntegrator/<type>/ExplicitEuler'
p17105
sa(dp17106
S'description'
p17107
g3
sS'subblocks'
p17108
NsS'parameters'
p17109
(lp17110
(dp17111
S'description'
p17112
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17113
sS'cpp_type'
p17114
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17115
sS'default'
p17116
g3
sS'name'
p17117
S'control_tags'
p17118
sS'required'
p17119
I00
sS'group_name'
p17120
S'Advanced'
p17121
sa(dp17122
S'description'
p17123
S'Set the enabled status of the MooseObject.\n'
p17124
sS'cpp_type'
p17125
S'bool'
p17126
sS'default'
p17127
S'1'
p17128
sS'name'
p17129
S'enable'
p17130
sS'required'
p17131
I00
sS'group_name'
p17132
S'Advanced'
p17133
sa(dp17134
S'description'
p17135
g3
sS'cpp_type'
p17136
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17137
sS'default'
p17138
S'ExplicitMidpoint'
p17139
sS'name'
p17140
S'type'
p17141
sS'required'
p17142
I00
sS'group_name'
p17143
NsasS'name'
p17144
S'/Executioner/TimeIntegrator/<type>/ExplicitMidpoint'
p17145
sa(dp17146
S'description'
p17147
g3
sS'subblocks'
p17148
NsS'parameters'
p17149
(lp17150
(dp17151
S'description'
p17152
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17153
sS'cpp_type'
p17154
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17155
sS'default'
p17156
g3
sS'name'
p17157
S'control_tags'
p17158
sS'required'
p17159
I00
sS'group_name'
p17160
S'Advanced'
p17161
sa(dp17162
S'description'
p17163
S'Set the enabled status of the MooseObject.\n'
p17164
sS'cpp_type'
p17165
S'bool'
p17166
sS'default'
p17167
S'1'
p17168
sS'name'
p17169
S'enable'
p17170
sS'required'
p17171
I00
sS'group_name'
p17172
S'Advanced'
p17173
sa(dp17174
S'description'
p17175
g3
sS'cpp_type'
p17176
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17177
sS'default'
p17178
S'ExplicitTVDRK2'
p17179
sS'name'
p17180
S'type'
p17181
sS'required'
p17182
I00
sS'group_name'
p17183
NsasS'name'
p17184
S'/Executioner/TimeIntegrator/<type>/ExplicitTVDRK2'
p17185
sa(dp17186
S'description'
p17187
g3
sS'subblocks'
p17188
NsS'parameters'
p17189
(lp17190
(dp17191
S'description'
p17192
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17193
sS'cpp_type'
p17194
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17195
sS'default'
p17196
g3
sS'name'
p17197
S'control_tags'
p17198
sS'required'
p17199
I00
sS'group_name'
p17200
S'Advanced'
p17201
sa(dp17202
S'description'
p17203
S'Set the enabled status of the MooseObject.\n'
p17204
sS'cpp_type'
p17205
S'bool'
p17206
sS'default'
p17207
S'1'
p17208
sS'name'
p17209
S'enable'
p17210
sS'required'
p17211
I00
sS'group_name'
p17212
S'Advanced'
p17213
sa(dp17214
S'description'
p17215
g3
sS'cpp_type'
p17216
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17217
sS'default'
p17218
S'Heun'
p17219
sS'name'
p17220
S'type'
p17221
sS'required'
p17222
I00
sS'group_name'
p17223
NsasS'name'
p17224
S'/Executioner/TimeIntegrator/<type>/Heun'
p17225
sa(dp17226
S'description'
p17227
g3
sS'subblocks'
p17228
NsS'parameters'
p17229
(lp17230
(dp17231
S'description'
p17232
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17233
sS'cpp_type'
p17234
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17235
sS'default'
p17236
g3
sS'name'
p17237
S'control_tags'
p17238
sS'required'
p17239
I00
sS'group_name'
p17240
S'Advanced'
p17241
sa(dp17242
S'description'
p17243
S'Set the enabled status of the MooseObject.\n'
p17244
sS'cpp_type'
p17245
S'bool'
p17246
sS'default'
p17247
S'1'
p17248
sS'name'
p17249
S'enable'
p17250
sS'required'
p17251
I00
sS'group_name'
p17252
S'Advanced'
p17253
sa(dp17254
S'description'
p17255
g3
sS'cpp_type'
p17256
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17257
sS'default'
p17258
S'ImplicitEuler'
p17259
sS'name'
p17260
S'type'
p17261
sS'required'
p17262
I00
sS'group_name'
p17263
NsasS'name'
p17264
S'/Executioner/TimeIntegrator/<type>/ImplicitEuler'
p17265
sa(dp17266
S'description'
p17267
g3
sS'subblocks'
p17268
NsS'parameters'
p17269
(lp17270
(dp17271
S'description'
p17272
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17273
sS'cpp_type'
p17274
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17275
sS'default'
p17276
g3
sS'name'
p17277
S'control_tags'
p17278
sS'required'
p17279
I00
sS'group_name'
p17280
S'Advanced'
p17281
sa(dp17282
S'description'
p17283
S'Set the enabled status of the MooseObject.\n'
p17284
sS'cpp_type'
p17285
S'bool'
p17286
sS'default'
p17287
S'1'
p17288
sS'name'
p17289
S'enable'
p17290
sS'required'
p17291
I00
sS'group_name'
p17292
S'Advanced'
p17293
sa(dp17294
S'description'
p17295
g3
sS'cpp_type'
p17296
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17297
sS'default'
p17298
S'ImplicitMidpoint'
p17299
sS'name'
p17300
S'type'
p17301
sS'required'
p17302
I00
sS'group_name'
p17303
NsasS'name'
p17304
S'/Executioner/TimeIntegrator/<type>/ImplicitMidpoint'
p17305
sa(dp17306
S'description'
p17307
g3
sS'subblocks'
p17308
NsS'parameters'
p17309
(lp17310
(dp17311
S'description'
p17312
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17313
sS'cpp_type'
p17314
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17315
sS'default'
p17316
g3
sS'name'
p17317
S'control_tags'
p17318
sS'required'
p17319
I00
sS'group_name'
p17320
S'Advanced'
p17321
sa(dp17322
S'description'
p17323
S'Set the enabled status of the MooseObject.\n'
p17324
sS'cpp_type'
p17325
S'bool'
p17326
sS'default'
p17327
S'1'
p17328
sS'name'
p17329
S'enable'
p17330
sS'required'
p17331
I00
sS'group_name'
p17332
S'Advanced'
p17333
sa(dp17334
S'description'
p17335
g3
sS'cpp_type'
p17336
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17337
sS'default'
p17338
S'LStableDirk2'
p17339
sS'name'
p17340
S'type'
p17341
sS'required'
p17342
I00
sS'group_name'
p17343
NsasS'name'
p17344
S'/Executioner/TimeIntegrator/<type>/LStableDirk2'
p17345
sa(dp17346
S'description'
p17347
g3
sS'subblocks'
p17348
NsS'parameters'
p17349
(lp17350
(dp17351
S'description'
p17352
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17353
sS'cpp_type'
p17354
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17355
sS'default'
p17356
g3
sS'name'
p17357
S'control_tags'
p17358
sS'required'
p17359
I00
sS'group_name'
p17360
S'Advanced'
p17361
sa(dp17362
S'description'
p17363
S'Set the enabled status of the MooseObject.\n'
p17364
sS'cpp_type'
p17365
S'bool'
p17366
sS'default'
p17367
S'1'
p17368
sS'name'
p17369
S'enable'
p17370
sS'required'
p17371
I00
sS'group_name'
p17372
S'Advanced'
p17373
sa(dp17374
S'description'
p17375
g3
sS'cpp_type'
p17376
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17377
sS'default'
p17378
S'LStableDirk3'
p17379
sS'name'
p17380
S'type'
p17381
sS'required'
p17382
I00
sS'group_name'
p17383
NsasS'name'
p17384
S'/Executioner/TimeIntegrator/<type>/LStableDirk3'
p17385
sa(dp17386
S'description'
p17387
g3
sS'subblocks'
p17388
NsS'parameters'
p17389
(lp17390
(dp17391
S'description'
p17392
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17393
sS'cpp_type'
p17394
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17395
sS'default'
p17396
g3
sS'name'
p17397
S'control_tags'
p17398
sS'required'
p17399
I00
sS'group_name'
p17400
S'Advanced'
p17401
sa(dp17402
S'description'
p17403
S'Set the enabled status of the MooseObject.\n'
p17404
sS'cpp_type'
p17405
S'bool'
p17406
sS'default'
p17407
S'1'
p17408
sS'name'
p17409
S'enable'
p17410
sS'required'
p17411
I00
sS'group_name'
p17412
S'Advanced'
p17413
sa(dp17414
S'description'
p17415
g3
sS'cpp_type'
p17416
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17417
sS'default'
p17418
S'LStableDirk4'
p17419
sS'name'
p17420
S'type'
p17421
sS'required'
p17422
I00
sS'group_name'
p17423
NsasS'name'
p17424
S'/Executioner/TimeIntegrator/<type>/LStableDirk4'
p17425
sa(dp17426
S'description'
p17427
g3
sS'subblocks'
p17428
NsS'parameters'
p17429
(lp17430
(dp17431
S'description'
p17432
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17433
sS'cpp_type'
p17434
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17435
sS'default'
p17436
g3
sS'name'
p17437
S'control_tags'
p17438
sS'required'
p17439
I00
sS'group_name'
p17440
S'Advanced'
p17441
sa(dp17442
S'description'
p17443
S'Set the enabled status of the MooseObject.\n'
p17444
sS'cpp_type'
p17445
S'bool'
p17446
sS'default'
p17447
S'1'
p17448
sS'name'
p17449
S'enable'
p17450
sS'required'
p17451
I00
sS'group_name'
p17452
S'Advanced'
p17453
sa(dp17454
S'description'
p17455
g3
sS'cpp_type'
p17456
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17457
sS'default'
p17458
S'Ralston'
p17459
sS'name'
p17460
S'type'
p17461
sS'required'
p17462
I00
sS'group_name'
p17463
NsasS'name'
p17464
S'/Executioner/TimeIntegrator/<type>/Ralston'
p17465
sa(dp17466
S'description'
p17467
g3
sS'subblocks'
p17468
NsS'parameters'
p17469
(lp17470
(dp17471
S'description'
p17472
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17473
sS'cpp_type'
p17474
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17475
sS'default'
p17476
g3
sS'name'
p17477
S'control_tags'
p17478
sS'required'
p17479
I00
sS'group_name'
p17480
S'Advanced'
p17481
sa(dp17482
S'description'
p17483
S'Set the enabled status of the MooseObject.\n'
p17484
sS'cpp_type'
p17485
S'bool'
p17486
sS'default'
p17487
S'1'
p17488
sS'name'
p17489
S'enable'
p17490
sS'required'
p17491
I00
sS'group_name'
p17492
S'Advanced'
p17493
sa(dp17494
S'description'
p17495
g3
sS'cpp_type'
p17496
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17497
sS'default'
p17498
S'SteadyState'
p17499
sS'name'
p17500
S'type'
p17501
sS'required'
p17502
I00
sS'group_name'
p17503
NsasS'name'
p17504
S'/Executioner/TimeIntegrator/<type>/SteadyState'
p17505
sasS'parameters'
p17506
NsS'name'
p17507
S'/Executioner/TimeIntegrator/<type>'
p17508
sasS'parameters'
p17509
(lp17510
(dp17511
S'description'
p17512
S'A string representing the Moose Object that will be built by this Action\n'
p17513
sS'cpp_type'
p17514
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17515
sS'default'
p17516
g3
sS'name'
p17517
S'type'
p17518
sS'required'
p17519
I01
sS'group_name'
p17520
NsasS'name'
p17521
S'/Executioner/TimeIntegrator'
p17522
sa(dp17523
S'description'
p17524
g3
sS'subblocks'
p17525
(lp17526
(dp17527
S'description'
p17528
g3
sS'subblocks'
p17529
(lp17530
(dp17531
S'description'
p17532
g3
sS'subblocks'
p17533
NsS'parameters'
p17534
(lp17535
(dp17536
S'description'
p17537
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17538
sS'cpp_type'
p17539
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17540
sS'default'
p17541
g3
sS'name'
p17542
S'control_tags'
p17543
sS'required'
p17544
I00
sS'group_name'
p17545
S'Advanced'
p17546
sa(dp17547
S'description'
p17548
S'Initial time step size\n'
p17549
sS'cpp_type'
p17550
S'double'
p17551
sS'default'
p17552
g3
sS'name'
p17553
S'dt'
p17554
sS'required'
p17555
I01
sS'group_name'
p17556
Nsa(dp17557
S'description'
p17558
S'Maximum acceptable error.\n'
p17559
sS'cpp_type'
p17560
S'double'
p17561
sS'default'
p17562
g3
sS'name'
p17563
S'e_max'
p17564
sS'required'
p17565
I01
sS'group_name'
p17566
Nsa(dp17567
S'description'
p17568
S'Target error tolerance.\n'
p17569
sS'cpp_type'
p17570
S'double'
p17571
sS'default'
p17572
g3
sS'name'
p17573
S'e_tol'
p17574
sS'required'
p17575
I01
sS'group_name'
p17576
Nsa(dp17577
S'description'
p17578
S'Set the enabled status of the MooseObject.\n'
p17579
sS'cpp_type'
p17580
S'bool'
p17581
sS'default'
p17582
S'1'
p17583
sS'name'
p17584
S'enable'
p17585
sS'required'
p17586
I00
sS'group_name'
p17587
S'Advanced'
p17588
sa(dp17589
S'description'
p17590
S'Maximum ratio that the time step can increase.\n'
p17591
sS'cpp_type'
p17592
S'double'
p17593
sS'default'
p17594
S'1e+09'
p17595
sS'name'
p17596
S'max_increase'
p17597
sS'required'
p17598
I00
sS'group_name'
p17599
Nsa(dp17600
S'description'
p17601
S'Use when restarting a calculation to force a change in dt.\n'
p17602
sS'cpp_type'
p17603
S'bool'
p17604
sS'default'
p17605
S'0'
p17606
sS'name'
p17607
S'reset_dt'
p17608
sS'required'
p17609
I00
sS'group_name'
p17610
Nsa(dp17611
S'description'
p17612
S'scaling parameter for dt selection\n'
p17613
sS'cpp_type'
p17614
S'double'
p17615
sS'default'
p17616
S'0.8'
p17617
sS'name'
p17618
S'scaling_parameter'
p17619
sS'required'
p17620
I00
sS'group_name'
p17621
Nsa(dp17622
S'description'
p17623
S'when to start taking adaptive time steps\n'
p17624
sS'cpp_type'
p17625
S'int'
p17626
sS'default'
p17627
S'2'
p17628
sS'name'
p17629
S'start_adapting'
p17630
sS'required'
p17631
I00
sS'group_name'
p17632
Nsa(dp17633
S'description'
p17634
S'the number of time steps before recalculating dt\n'
p17635
sS'cpp_type'
p17636
S'int'
p17637
sS'default'
p17638
S'1'
p17639
sS'name'
p17640
S'steps_between_increase'
p17641
sS'required'
p17642
I00
sS'group_name'
p17643
Nsa(dp17644
S'description'
p17645
g3
sS'cpp_type'
p17646
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17647
sS'default'
p17648
S'AB2PredictorCorrector'
p17649
sS'name'
p17650
S'type'
p17651
sS'required'
p17652
I00
sS'group_name'
p17653
NsasS'name'
p17654
S'/Executioner/TimeStepper/<type>/AB2PredictorCorrector'
p17655
sa(dp17656
S'description'
p17657
g3
sS'subblocks'
p17658
NsS'parameters'
p17659
(lp17660
(dp17661
S'description'
p17662
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17663
sS'cpp_type'
p17664
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17665
sS'default'
p17666
g3
sS'name'
p17667
S'control_tags'
p17668
sS'required'
p17669
I00
sS'group_name'
p17670
S'Advanced'
p17671
sa(dp17672
S'description'
p17673
S'Size of the time step\n'
p17674
sS'cpp_type'
p17675
S'double'
p17676
sS'default'
p17677
g3
sS'name'
p17678
S'dt'
p17679
sS'required'
p17680
I01
sS'group_name'
p17681
Nsa(dp17682
S'description'
p17683
S'Set the enabled status of the MooseObject.\n'
p17684
sS'cpp_type'
p17685
S'bool'
p17686
sS'default'
p17687
S'1'
p17688
sS'name'
p17689
S'enable'
p17690
sS'required'
p17691
I00
sS'group_name'
p17692
S'Advanced'
p17693
sa(dp17694
S'description'
p17695
S'Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.\n'
p17696
sS'cpp_type'
p17697
S'double'
p17698
sS'default'
p17699
S'2'
p17700
sS'name'
p17701
S'growth_factor'
p17702
sS'required'
p17703
I00
sS'group_name'
p17704
Nsa(dp17705
S'description'
p17706
S'Use when restarting a calculation to force a change in dt.\n'
p17707
sS'cpp_type'
p17708
S'bool'
p17709
sS'default'
p17710
S'0'
p17711
sS'name'
p17712
S'reset_dt'
p17713
sS'required'
p17714
I00
sS'group_name'
p17715
Nsa(dp17716
S'description'
p17717
g3
sS'cpp_type'
p17718
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17719
sS'default'
p17720
S'ConstantDT'
p17721
sS'name'
p17722
S'type'
p17723
sS'required'
p17724
I00
sS'group_name'
p17725
NsasS'name'
p17726
S'/Executioner/TimeStepper/<type>/ConstantDT'
p17727
sa(dp17728
S'description'
p17729
g3
sS'subblocks'
p17730
NsS'parameters'
p17731
(lp17732
(dp17733
S'description'
p17734
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17735
sS'cpp_type'
p17736
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17737
sS'default'
p17738
g3
sS'name'
p17739
S'control_tags'
p17740
sS'required'
p17741
I00
sS'group_name'
p17742
S'Advanced'
p17743
sa(dp17744
S'description'
p17745
S'The initial time step size.\n'
p17746
sS'cpp_type'
p17747
S'double'
p17748
sS'default'
p17749
S'1'
p17750
sS'name'
p17751
S'dt'
p17752
sS'required'
p17753
I00
sS'group_name'
p17754
Nsa(dp17755
S'description'
p17756
S'Maximum acceptable error.\n'
p17757
sS'cpp_type'
p17758
S'double'
p17759
sS'default'
p17760
g3
sS'name'
p17761
S'e_max'
p17762
sS'required'
p17763
I01
sS'group_name'
p17764
Nsa(dp17765
S'description'
p17766
S'Target error tolerance.\n'
p17767
sS'cpp_type'
p17768
S'double'
p17769
sS'default'
p17770
g3
sS'name'
p17771
S'e_tol'
p17772
sS'required'
p17773
I01
sS'group_name'
p17774
Nsa(dp17775
S'description'
p17776
S'Set the enabled status of the MooseObject.\n'
p17777
sS'cpp_type'
p17778
S'bool'
p17779
sS'default'
p17780
S'1'
p17781
sS'name'
p17782
S'enable'
p17783
sS'required'
p17784
I00
sS'group_name'
p17785
S'Advanced'
p17786
sa(dp17787
S'description'
p17788
S'Maximum ratio that the time step can increase.\n'
p17789
sS'cpp_type'
p17790
S'double'
p17791
sS'default'
p17792
S'1e+09'
p17793
sS'name'
p17794
S'max_increase'
p17795
sS'required'
p17796
I00
sS'group_name'
p17797
Nsa(dp17798
S'description'
p17799
S'Use when restarting a calculation to force a change in dt.\n'
p17800
sS'cpp_type'
p17801
S'bool'
p17802
sS'default'
p17803
S'0'
p17804
sS'name'
p17805
S'reset_dt'
p17806
sS'required'
p17807
I00
sS'group_name'
p17808
Nsa(dp17809
S'description'
p17810
g3
sS'cpp_type'
p17811
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17812
sS'default'
p17813
S'DT2'
p17814
sS'name'
p17815
S'type'
p17816
sS'required'
p17817
I00
sS'group_name'
p17818
NsasS'name'
p17819
S'/Executioner/TimeStepper/<type>/DT2'
p17820
sa(dp17821
S'description'
p17822
S'Solves the Transient problem at a sequence of time points taken from a specified exodus file.\n'
p17823
sS'subblocks'
p17824
NsS'parameters'
p17825
(lp17826
(dp17827
S'description'
p17828
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17829
sS'cpp_type'
p17830
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17831
sS'default'
p17832
g3
sS'name'
p17833
S'control_tags'
p17834
sS'required'
p17835
I00
sS'group_name'
p17836
S'Advanced'
p17837
sa(dp17838
S'description'
p17839
S'Set the enabled status of the MooseObject.\n'
p17840
sS'cpp_type'
p17841
S'bool'
p17842
sS'default'
p17843
S'1'
p17844
sS'name'
p17845
S'enable'
p17846
sS'required'
p17847
I00
sS'group_name'
p17848
S'Advanced'
p17849
sa(dp17850
S'description'
p17851
S'The name of the mesh file to extract the time sequence from (must be an exodusII file).\n'
p17852
sS'cpp_type'
p17853
S'MeshFileName'
p17854
sS'default'
p17855
g3
sS'name'
p17856
S'mesh'
p17857
sS'required'
p17858
I01
sS'group_name'
p17859
Nsa(dp17860
S'description'
p17861
S'Use when restarting a calculation to force a change in dt.\n'
p17862
sS'cpp_type'
p17863
S'bool'
p17864
sS'default'
p17865
S'0'
p17866
sS'name'
p17867
S'reset_dt'
p17868
sS'required'
p17869
I00
sS'group_name'
p17870
Nsa(dp17871
S'description'
p17872
g3
sS'cpp_type'
p17873
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17874
sS'default'
p17875
S'ExodusTimeSequenceStepper'
p17876
sS'name'
p17877
S'type'
p17878
sS'required'
p17879
I00
sS'group_name'
p17880
NsasS'name'
p17881
S'/Executioner/TimeStepper/<type>/ExodusTimeSequenceStepper'
p17882
sa(dp17883
S'description'
p17884
g3
sS'subblocks'
p17885
NsS'parameters'
p17886
(lp17887
(dp17888
S'description'
p17889
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17890
sS'cpp_type'
p17891
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17892
sS'default'
p17893
g3
sS'name'
p17894
S'control_tags'
p17895
sS'required'
p17896
I00
sS'group_name'
p17897
S'Advanced'
p17898
sa(dp17899
S'description'
p17900
S'Set the enabled status of the MooseObject.\n'
p17901
sS'cpp_type'
p17902
S'bool'
p17903
sS'default'
p17904
S'1'
p17905
sS'name'
p17906
S'enable'
p17907
sS'required'
p17908
I00
sS'group_name'
p17909
S'Advanced'
p17910
sa(dp17911
S'description'
p17912
S'Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.\n'
p17913
sS'cpp_type'
p17914
S'double'
p17915
sS'default'
p17916
S'1.79769e+308'
p17917
sS'name'
p17918
S'growth_factor'
p17919
sS'required'
p17920
I00
sS'group_name'
p17921
Nsa(dp17922
S'description'
p17923
S'Whether or not to interpolate DT between times.  This is true by default for historical reasons.\n'
p17924
sS'cpp_type'
p17925
S'bool'
p17926
sS'default'
p17927
S'1'
p17928
sS'name'
p17929
S'interpolate'
p17930
sS'required'
p17931
I00
sS'group_name'
p17932
Nsa(dp17933
S'description'
p17934
S'The minimal dt to take.\n'
p17935
sS'cpp_type'
p17936
S'double'
p17937
sS'default'
p17938
S'0'
p17939
sS'name'
p17940
S'min_dt'
p17941
sS'required'
p17942
I00
sS'group_name'
p17943
Nsa(dp17944
S'description'
p17945
S'Use when restarting a calculation to force a change in dt.\n'
p17946
sS'cpp_type'
p17947
S'bool'
p17948
sS'default'
p17949
S'0'
p17950
sS'name'
p17951
S'reset_dt'
p17952
sS'required'
p17953
I00
sS'group_name'
p17954
Nsa(dp17955
S'description'
p17956
S'The values of dt\n'
p17957
sS'cpp_type'
p17958
S'std::__1::vector<double, std::__1::allocator<double> >'
p17959
sS'default'
p17960
g3
sS'name'
p17961
S'time_dt'
p17962
sS'required'
p17963
I01
sS'group_name'
p17964
Nsa(dp17965
S'description'
p17966
S'The values of t\n'
p17967
sS'cpp_type'
p17968
S'std::__1::vector<double, std::__1::allocator<double> >'
p17969
sS'default'
p17970
g3
sS'name'
p17971
S'time_t'
p17972
sS'required'
p17973
I01
sS'group_name'
p17974
Nsa(dp17975
S'description'
p17976
g3
sS'cpp_type'
p17977
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17978
sS'default'
p17979
S'FunctionDT'
p17980
sS'name'
p17981
S'type'
p17982
sS'required'
p17983
I00
sS'group_name'
p17984
NsasS'name'
p17985
S'/Executioner/TimeStepper/<type>/FunctionDT'
p17986
sa(dp17987
S'description'
p17988
S'Adjust the timestep based on the number of iterations\n'
p17989
sS'subblocks'
p17990
NsS'parameters'
p17991
(lp17992
(dp17993
S'description'
p17994
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p17995
sS'cpp_type'
p17996
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p17997
sS'default'
p17998
g3
sS'name'
p17999
S'control_tags'
p18000
sS'required'
p18001
I00
sS'group_name'
p18002
S'Advanced'
p18003
sa(dp18004
S'description'
p18005
S"Factor to apply to timestep if difficult convergence (if 'optimal_iterations' is specified) or if solution failed\n"
p18006
sS'cpp_type'
p18007
S'double'
p18008
sS'default'
p18009
S'0.5'
p18010
sS'name'
p18011
S'cutback_factor'
p18012
sS'required'
p18013
I00
sS'group_name'
p18014
Nsa(dp18015
S'description'
p18016
S'The default timestep size between solves\n'
p18017
sS'cpp_type'
p18018
S'double'
p18019
sS'default'
p18020
g3
sS'name'
p18021
S'dt'
p18022
sS'required'
p18023
I01
sS'group_name'
p18024
Nsa(dp18025
S'description'
p18026
S'Set the enabled status of the MooseObject.\n'
p18027
sS'cpp_type'
p18028
S'bool'
p18029
sS'default'
p18030
S'1'
p18031
sS'name'
p18032
S'enable'
p18033
sS'required'
p18034
I00
sS'group_name'
p18035
S'Advanced'
p18036
sa(dp18037
S'description'
p18038
S'Forces the timestepper to take a step that is consistent with points defined in the function\n'
p18039
sS'cpp_type'
p18040
S'bool'
p18041
sS'default'
p18042
S'0'
p18043
sS'name'
p18044
S'force_step_every_function_point'
p18045
sS'required'
p18046
I00
sS'group_name'
p18047
Nsa(dp18048
S'description'
p18049
S"Factor to apply to timestep if easy convergence (if 'optimal_iterations' is specified) or if recovering from failed solve\n"
p18050
sS'cpp_type'
p18051
S'double'
p18052
sS'default'
p18053
S'2'
p18054
sS'name'
p18055
S'growth_factor'
p18056
sS'required'
p18057
I00
sS'group_name'
p18058
Nsa(dp18059
S'description'
p18060
S"Attempt to grow/shrink timestep if the iteration count is below/above 'optimal_iterations plus/minus iteration_window' (default = optimal_iterations/5).\n"
p18061
sS'cpp_type'
p18062
S'int'
p18063
sS'default'
p18064
g3
sS'name'
p18065
S'iteration_window'
p18066
sS'required'
p18067
I00
sS'group_name'
p18068
Nsa(dp18069
S'description'
p18070
S'The ratio of linear to nonlinear iterations to determine target linear iterations and window for adaptive timestepping (default = 25)\n'
p18071
sS'cpp_type'
p18072
S'unsigned int'
p18073
sS'default'
p18074
g3
sS'name'
p18075
S'linear_iteration_ratio'
p18076
sS'required'
p18077
I00
sS'group_name'
p18078
Nsa(dp18079
S'description'
p18080
S'The absolute value of the maximum change in timestep_limiting_function over a timestep\n'
p18081
sS'cpp_type'
p18082
S'double'
p18083
sS'default'
p18084
g3
sS'name'
p18085
S'max_function_change'
p18086
sS'required'
p18087
I00
sS'group_name'
p18088
Nsa(dp18089
S'description'
p18090
S'The target number of nonlinear iterations for adaptive timestepping\n'
p18091
sS'cpp_type'
p18092
S'int'
p18093
sS'default'
p18094
g3
sS'name'
p18095
S'optimal_iterations'
p18096
sS'required'
p18097
I00
sS'group_name'
p18098
Nsa(dp18099
S'description'
p18100
S'If specified, the postprocessor value is used as an upper limit for the current time step length\n'
p18101
sS'cpp_type'
p18102
S'PostprocessorName'
p18103
sS'default'
p18104
g3
sS'name'
p18105
S'postprocessor_dtlim'
p18106
sS'required'
p18107
I00
sS'group_name'
p18108
Nsa(dp18109
S'description'
p18110
S'Use when restarting a calculation to force a change in dt.\n'
p18111
sS'cpp_type'
p18112
S'bool'
p18113
sS'default'
p18114
S'0'
p18115
sS'name'
p18116
S'reset_dt'
p18117
sS'required'
p18118
I00
sS'group_name'
p18119
Nsa(dp18120
S'description'
p18121
S'The values of dt\n'
p18122
sS'cpp_type'
p18123
S'std::__1::vector<double, std::__1::allocator<double> >'
p18124
sS'default'
p18125
g3
sS'name'
p18126
S'time_dt'
p18127
sS'required'
p18128
I00
sS'group_name'
p18129
Nsa(dp18130
S'description'
p18131
S'The values of t\n'
p18132
sS'cpp_type'
p18133
S'std::__1::vector<double, std::__1::allocator<double> >'
p18134
sS'default'
p18135
g3
sS'name'
p18136
S'time_t'
p18137
sS'required'
p18138
I00
sS'group_name'
p18139
Nsa(dp18140
S'description'
p18141
S"A 'Piecewise' type function used to control the timestep by limiting the change in the function over a timestep\n"
p18142
sS'cpp_type'
p18143
S'FunctionName'
p18144
sS'default'
p18145
g3
sS'name'
p18146
S'timestep_limiting_function'
p18147
sS'required'
p18148
I00
sS'group_name'
p18149
Nsa(dp18150
S'description'
p18151
g3
sS'cpp_type'
p18152
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18153
sS'default'
p18154
S'IterationAdaptiveDT'
p18155
sS'name'
p18156
S'type'
p18157
sS'required'
p18158
I00
sS'group_name'
p18159
NsasS'name'
p18160
S'/Executioner/TimeStepper/<type>/IterationAdaptiveDT'
p18161
sa(dp18162
S'description'
p18163
g3
sS'subblocks'
p18164
NsS'parameters'
p18165
(lp18166
(dp18167
S'description'
p18168
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18169
sS'cpp_type'
p18170
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18171
sS'default'
p18172
g3
sS'name'
p18173
S'control_tags'
p18174
sS'required'
p18175
I00
sS'group_name'
p18176
S'Advanced'
p18177
sa(dp18178
S'description'
p18179
S'Initial value of dt\n'
p18180
sS'cpp_type'
p18181
S'double'
p18182
sS'default'
p18183
g3
sS'name'
p18184
S'dt'
p18185
sS'required'
p18186
I00
sS'group_name'
p18187
Nsa(dp18188
S'description'
p18189
S'Set the enabled status of the MooseObject.\n'
p18190
sS'cpp_type'
p18191
S'bool'
p18192
sS'default'
p18193
S'1'
p18194
sS'name'
p18195
S'enable'
p18196
sS'required'
p18197
I00
sS'group_name'
p18198
S'Advanced'
p18199
sa(dp18200
S'description'
p18201
S'The name of the postprocessor that computes the dt\n'
p18202
sS'cpp_type'
p18203
S'PostprocessorName'
p18204
sS'default'
p18205
g3
sS'name'
p18206
S'postprocessor'
p18207
sS'required'
p18208
I01
sS'group_name'
p18209
Nsa(dp18210
S'description'
p18211
S'Use when restarting a calculation to force a change in dt.\n'
p18212
sS'cpp_type'
p18213
S'bool'
p18214
sS'default'
p18215
S'0'
p18216
sS'name'
p18217
S'reset_dt'
p18218
sS'required'
p18219
I00
sS'group_name'
p18220
Nsa(dp18221
S'description'
p18222
g3
sS'cpp_type'
p18223
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18224
sS'default'
p18225
S'PostprocessorDT'
p18226
sS'name'
p18227
S'type'
p18228
sS'required'
p18229
I00
sS'group_name'
p18230
NsasS'name'
p18231
S'/Executioner/TimeStepper/<type>/PostprocessorDT'
p18232
sa(dp18233
S'description'
p18234
g3
sS'subblocks'
p18235
NsS'parameters'
p18236
(lp18237
(dp18238
S'description'
p18239
S'Output adaptive time step log\n'
p18240
sS'cpp_type'
p18241
S'bool'
p18242
sS'default'
p18243
S'0'
p18244
sS'name'
p18245
S'adapt_log'
p18246
sS'required'
p18247
I00
sS'group_name'
p18248
Nsa(dp18249
S'description'
p18250
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18251
sS'cpp_type'
p18252
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18253
sS'default'
p18254
g3
sS'name'
p18255
S'control_tags'
p18256
sS'required'
p18257
I00
sS'group_name'
p18258
S'Advanced'
p18259
sa(dp18260
S'description'
p18261
S'The timestep size between solves\n'
p18262
sS'cpp_type'
p18263
S'double'
p18264
sS'default'
p18265
g3
sS'name'
p18266
S'dt'
p18267
sS'required'
p18268
I01
sS'group_name'
p18269
Nsa(dp18270
S'description'
p18271
S'Set the enabled status of the MooseObject.\n'
p18272
sS'cpp_type'
p18273
S'bool'
p18274
sS'default'
p18275
S'1'
p18276
sS'name'
p18277
S'enable'
p18278
sS'required'
p18279
I00
sS'group_name'
p18280
S'Advanced'
p18281
sa(dp18282
S'description'
p18283
S'Direction for the first step.  1 for up... -1 for down. \n'
p18284
sS'cpp_type'
p18285
S'int'
p18286
sS'default'
p18287
S'1'
p18288
sS'name'
p18289
S'initial_direction'
p18290
sS'required'
p18291
I00
sS'group_name'
p18292
Nsa(dp18293
S'description'
p18294
S'Percentage to change the timestep by.  Should be between 0 and 1\n'
p18295
sS'cpp_type'
p18296
S'double'
p18297
sS'default'
p18298
S'0.1'
p18299
sS'name'
p18300
S'percent_change'
p18301
sS'required'
p18302
I00
sS'group_name'
p18303
Nsa(dp18304
S'description'
p18305
S'Use when restarting a calculation to force a change in dt.\n'
p18306
sS'cpp_type'
p18307
S'bool'
p18308
sS'default'
p18309
S'0'
p18310
sS'name'
p18311
S'reset_dt'
p18312
sS'required'
p18313
I00
sS'group_name'
p18314
Nsa(dp18315
S'description'
p18316
g3
sS'cpp_type'
p18317
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18318
sS'default'
p18319
S'SolutionTimeAdaptiveDT'
p18320
sS'name'
p18321
S'type'
p18322
sS'required'
p18323
I00
sS'group_name'
p18324
NsasS'name'
p18325
S'/Executioner/TimeStepper/<type>/SolutionTimeAdaptiveDT'
p18326
sa(dp18327
S'description'
p18328
S'Solves the Transient problem at a sequence of given time points.\n'
p18329
sS'subblocks'
p18330
NsS'parameters'
p18331
(lp18332
(dp18333
S'description'
p18334
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18335
sS'cpp_type'
p18336
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18337
sS'default'
p18338
g3
sS'name'
p18339
S'control_tags'
p18340
sS'required'
p18341
I00
sS'group_name'
p18342
S'Advanced'
p18343
sa(dp18344
S'description'
p18345
S'Set the enabled status of the MooseObject.\n'
p18346
sS'cpp_type'
p18347
S'bool'
p18348
sS'default'
p18349
S'1'
p18350
sS'name'
p18351
S'enable'
p18352
sS'required'
p18353
I00
sS'group_name'
p18354
S'Advanced'
p18355
sa(dp18356
S'description'
p18357
S'Use when restarting a calculation to force a change in dt.\n'
p18358
sS'cpp_type'
p18359
S'bool'
p18360
sS'default'
p18361
S'0'
p18362
sS'name'
p18363
S'reset_dt'
p18364
sS'required'
p18365
I00
sS'group_name'
p18366
Nsa(dp18367
S'description'
p18368
S'The values of t\n'
p18369
sS'cpp_type'
p18370
S'std::__1::vector<double, std::__1::allocator<double> >'
p18371
sS'default'
p18372
g3
sS'name'
p18373
S'time_sequence'
p18374
sS'required'
p18375
I01
sS'group_name'
p18376
Nsa(dp18377
S'description'
p18378
g3
sS'cpp_type'
p18379
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18380
sS'default'
p18381
S'TimeSequenceStepper'
p18382
sS'name'
p18383
S'type'
p18384
sS'required'
p18385
I00
sS'group_name'
p18386
NsasS'name'
p18387
S'/Executioner/TimeStepper/<type>/TimeSequenceStepper'
p18388
sasS'parameters'
p18389
NsS'name'
p18390
S'/Executioner/TimeStepper/<type>'
p18391
sasS'parameters'
p18392
(lp18393
(dp18394
S'description'
p18395
S'A string representing the Moose Object that will be built by this Action\n'
p18396
sS'cpp_type'
p18397
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18398
sS'default'
p18399
g3
sS'name'
p18400
S'type'
p18401
sS'required'
p18402
I01
sS'group_name'
p18403
NsasS'name'
p18404
S'/Executioner/TimeStepper'
p18405
sasS'parameters'
p18406
(lp18407
(dp18408
S'description'
p18409
S'A string representing the Moose Object that will be built by this Action\n'
p18410
sS'cpp_type'
p18411
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18412
sS'default'
p18413
g3
sS'name'
p18414
S'type'
p18415
sS'required'
p18416
I01
sS'group_name'
p18417
NsasS'name'
p18418
S'/Executioner'
p18419
sa(dp18420
S'description'
p18421
g3
sS'subblocks'
p18422
(lp18423
(dp18424
S'description'
p18425
g3
sS'subblocks'
p18426
NsS'parameters'
p18427
(lp18428
(dp18429
S'description'
p18430
S'A string representing the Moose Object that will be built by this Action\n'
p18431
sS'cpp_type'
p18432
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18433
sS'default'
p18434
g3
sS'name'
p18435
S'type'
p18436
sS'required'
p18437
I01
sS'group_name'
p18438
NsasS'name'
p18439
S'/Functions/*'
p18440
sa(dp18441
S'description'
p18442
S'Function for reading a 2D axisymmetric solution from file and mapping it to a 3D Cartesian model\n'
p18443
sS'subblocks'
p18444
NsS'parameters'
p18445
(lp18446
(dp18447
S'description'
p18448
S'Start point for axis of symmetry for the 2d model\n'
p18449
sS'cpp_type'
p18450
S'libMesh::VectorValue<double>'
p18451
sS'default'
p18452
S'0 0 0'
p18453
sS'name'
p18454
S'2d_axis_point1'
p18455
sS'required'
p18456
I00
sS'group_name'
p18457
Nsa(dp18458
S'description'
p18459
S'End point for axis of symmetry for the 2d model\n'
p18460
sS'cpp_type'
p18461
S'libMesh::VectorValue<double>'
p18462
sS'default'
p18463
S'0 1 0'
p18464
sS'name'
p18465
S'2d_axis_point2'
p18466
sS'required'
p18467
I00
sS'group_name'
p18468
Nsa(dp18469
S'description'
p18470
S'Start point for axis of symmetry for the 3d model\n'
p18471
sS'cpp_type'
p18472
S'libMesh::VectorValue<double>'
p18473
sS'default'
p18474
S'0 0 0'
p18475
sS'name'
p18476
S'3d_axis_point1'
p18477
sS'required'
p18478
I00
sS'group_name'
p18479
Nsa(dp18480
S'description'
p18481
S'End point for axis of symmetry for the 3d model\n'
p18482
sS'cpp_type'
p18483
S'libMesh::VectorValue<double>'
p18484
sS'default'
p18485
S'0 1 0'
p18486
sS'name'
p18487
S'3d_axis_point2'
p18488
sS'required'
p18489
I00
sS'group_name'
p18490
Nsa(dp18491
S'description'
p18492
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p18493
sS'cpp_type'
p18494
S'double'
p18495
sS'default'
p18496
S'0'
p18497
sS'name'
p18498
S'add_factor'
p18499
sS'required'
p18500
I00
sS'group_name'
p18501
Nsa(dp18502
S'description'
p18503
S'Ratio of the axial dimension in the 3d model to that in the 2d model. Optinally permits the 3d model to be larger than the 2d model in that dimension, and scales vector solutions in that direction by this factor.\n'
p18504
sS'cpp_type'
p18505
S'double'
p18506
sS'default'
p18507
S'1'
p18508
sS'name'
p18509
S'axial_dimension_ratio'
p18510
sS'required'
p18511
I00
sS'group_name'
p18512
Nsa(dp18513
S'description'
p18514
S'Component of the variable to be computed if it is a vector\n'
p18515
sS'cpp_type'
p18516
S'unsigned int'
p18517
sS'default'
p18518
g3
sS'name'
p18519
S'component'
p18520
sS'required'
p18521
I00
sS'group_name'
p18522
Nsa(dp18523
S'description'
p18524
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18525
sS'cpp_type'
p18526
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18527
sS'default'
p18528
g3
sS'name'
p18529
S'control_tags'
p18530
sS'required'
p18531
I00
sS'group_name'
p18532
S'Advanced'
p18533
sa(dp18534
S'description'
p18535
S'Set the enabled status of the MooseObject.\n'
p18536
sS'cpp_type'
p18537
S'bool'
p18538
sS'default'
p18539
S'1'
p18540
sS'name'
p18541
S'enable'
p18542
sS'required'
p18543
I00
sS'group_name'
p18544
S'Advanced'
p18545
sa(dp18546
S'description'
p18547
S'The names of the variables in the file that are to be extracted, in x, y order if they are vector components\n'
p18548
sS'cpp_type'
p18549
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18550
sS'default'
p18551
g3
sS'name'
p18552
S'from_variables'
p18553
sS'required'
p18554
I00
sS'group_name'
p18555
Nsa(dp18556
S'description'
p18557
S"Scale factor (a) to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p18558
sS'cpp_type'
p18559
S'double'
p18560
sS'default'
p18561
S'1'
p18562
sS'name'
p18563
S'scale_factor'
p18564
sS'required'
p18565
I00
sS'group_name'
p18566
Nsa(dp18567
S'description'
p18568
S'The SolutionUserObject to extract data from.\n'
p18569
sS'cpp_type'
p18570
S'UserObjectName'
p18571
sS'default'
p18572
g3
sS'name'
p18573
S'solution'
p18574
sS'required'
p18575
I01
sS'group_name'
p18576
Nsa(dp18577
S'description'
p18578
g3
sS'cpp_type'
p18579
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18580
sS'default'
p18581
S'Axisymmetric2D3DSolutionFunction'
p18582
sS'name'
p18583
S'type'
p18584
sS'required'
p18585
I00
sS'group_name'
p18586
NsasS'name'
p18587
S'/Functions/Axisymmetric2D3DSolutionFunction'
p18588
sa(dp18589
S'description'
p18590
g3
sS'subblocks'
p18591
NsS'parameters'
p18592
(lp18593
(dp18594
S'description'
p18595
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18596
sS'cpp_type'
p18597
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18598
sS'default'
p18599
g3
sS'name'
p18600
S'control_tags'
p18601
sS'required'
p18602
I00
sS'group_name'
p18603
S'Advanced'
p18604
sa(dp18605
S'description'
p18606
S'Set the enabled status of the MooseObject.\n'
p18607
sS'cpp_type'
p18608
S'bool'
p18609
sS'default'
p18610
S'1'
p18611
sS'name'
p18612
S'enable'
p18613
sS'required'
p18614
I00
sS'group_name'
p18615
S'Advanced'
p18616
sa(dp18617
S'description'
p18618
g3
sS'cpp_type'
p18619
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18620
sS'default'
p18621
S'BicubicSplineFunction'
p18622
sS'name'
p18623
S'type'
p18624
sS'required'
p18625
I00
sS'group_name'
p18626
Nsa(dp18627
S'description'
p18628
S'The first independent coordinate.\n'
p18629
sS'cpp_type'
p18630
S'std::__1::vector<double, std::__1::allocator<double> >'
p18631
sS'default'
p18632
g3
sS'name'
p18633
S'x1'
p18634
sS'required'
p18635
I01
sS'group_name'
p18636
Nsa(dp18637
S'description'
p18638
S'The second independent coordinate.\n'
p18639
sS'cpp_type'
p18640
S'std::__1::vector<double, std::__1::allocator<double> >'
p18641
sS'default'
p18642
g3
sS'name'
p18643
S'x2'
p18644
sS'required'
p18645
I01
sS'group_name'
p18646
Nsa(dp18647
S'description'
p18648
S'The dependent values\n'
p18649
sS'cpp_type'
p18650
S'std::__1::vector<double, std::__1::allocator<double> >'
p18651
sS'default'
p18652
g3
sS'name'
p18653
S'y'
p18654
sS'required'
p18655
I01
sS'group_name'
p18656
Nsa(dp18657
S'description'
p18658
S'The functional form of the derivative with respect to x1.\n'
p18659
sS'cpp_type'
p18660
S'FunctionName'
p18661
sS'default'
p18662
S'1e30'
p18663
sS'name'
p18664
S'yx1'
p18665
sS'required'
p18666
I00
sS'group_name'
p18667
Nsa(dp18668
S'description'
p18669
S'The values of the derivative wrt x1 on the lower interpolation grid points.\n'
p18670
sS'cpp_type'
p18671
S'std::__1::vector<double, std::__1::allocator<double> >'
p18672
sS'default'
p18673
g3
sS'name'
p18674
S'yx11'
p18675
sS'required'
p18676
I00
sS'group_name'
p18677
Nsa(dp18678
S'description'
p18679
S'The values of the derivative wrt x1 on the upper interpolation grid points.\n'
p18680
sS'cpp_type'
p18681
S'std::__1::vector<double, std::__1::allocator<double> >'
p18682
sS'default'
p18683
g3
sS'name'
p18684
S'yx1n'
p18685
sS'required'
p18686
I00
sS'group_name'
p18687
Nsa(dp18688
S'description'
p18689
S'The functional form of the derivative with respect to x2.\n'
p18690
sS'cpp_type'
p18691
S'FunctionName'
p18692
sS'default'
p18693
S'1e30'
p18694
sS'name'
p18695
S'yx2'
p18696
sS'required'
p18697
I00
sS'group_name'
p18698
Nsa(dp18699
S'description'
p18700
S'The values of the derivative wrt x2 on the lower interpolation grid points.\n'
p18701
sS'cpp_type'
p18702
S'std::__1::vector<double, std::__1::allocator<double> >'
p18703
sS'default'
p18704
g3
sS'name'
p18705
S'yx21'
p18706
sS'required'
p18707
I00
sS'group_name'
p18708
Nsa(dp18709
S'description'
p18710
S'The values of the derivative wrt x2 on the upper interpolation grid points.\n'
p18711
sS'cpp_type'
p18712
S'std::__1::vector<double, std::__1::allocator<double> >'
p18713
sS'default'
p18714
g3
sS'name'
p18715
S'yx2n'
p18716
sS'required'
p18717
I00
sS'group_name'
p18718
NsasS'name'
p18719
S'/Functions/BicubicSplineFunction'
p18720
sa(dp18721
S'description'
p18722
g3
sS'subblocks'
p18723
NsS'parameters'
p18724
(lp18725
(dp18726
S'description'
p18727
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18728
sS'cpp_type'
p18729
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18730
sS'default'
p18731
g3
sS'name'
p18732
S'control_tags'
p18733
sS'required'
p18734
I00
sS'group_name'
p18735
S'Advanced'
p18736
sa(dp18737
S'description'
p18738
S'Set the enabled status of the MooseObject.\n'
p18739
sS'cpp_type'
p18740
S'bool'
p18741
sS'default'
p18742
S'1'
p18743
sS'name'
p18744
S'enable'
p18745
sS'required'
p18746
I00
sS'group_name'
p18747
S'Advanced'
p18748
sa(dp18749
S'description'
p18750
S'The functions to be multiplied together.\n'
p18751
sS'cpp_type'
p18752
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p18753
sS'default'
p18754
g3
sS'name'
p18755
S'functions'
p18756
sS'required'
p18757
I00
sS'group_name'
p18758
Nsa(dp18759
S'description'
p18760
S'Scale factor to be applied to the ordinate values\n'
p18761
sS'cpp_type'
p18762
S'double'
p18763
sS'default'
p18764
S'1'
p18765
sS'name'
p18766
S'scale_factor'
p18767
sS'required'
p18768
I00
sS'group_name'
p18769
Nsa(dp18770
S'description'
p18771
g3
sS'cpp_type'
p18772
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18773
sS'default'
p18774
S'CompositeFunction'
p18775
sS'name'
p18776
S'type'
p18777
sS'required'
p18778
I00
sS'group_name'
p18779
NsasS'name'
p18780
S'/Functions/CompositeFunction'
p18781
sa(dp18782
S'description'
p18783
g3
sS'subblocks'
p18784
NsS'parameters'
p18785
(lp18786
(dp18787
S'description'
p18788
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18789
sS'cpp_type'
p18790
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18791
sS'default'
p18792
g3
sS'name'
p18793
S'control_tags'
p18794
sS'required'
p18795
I00
sS'group_name'
p18796
S'Advanced'
p18797
sa(dp18798
S'description'
p18799
S'Set the enabled status of the MooseObject.\n'
p18800
sS'cpp_type'
p18801
S'bool'
p18802
sS'default'
p18803
S'1'
p18804
sS'name'
p18805
S'enable'
p18806
sS'required'
p18807
I00
sS'group_name'
p18808
S'Advanced'
p18809
sa(dp18810
S'description'
p18811
g3
sS'cpp_type'
p18812
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18813
sS'default'
p18814
S'ConstantFunction'
p18815
sS'name'
p18816
S'type'
p18817
sS'required'
p18818
I00
sS'group_name'
p18819
Nsa(dp18820
S'description'
p18821
S'The constant value\n'
p18822
sS'cpp_type'
p18823
S'double'
p18824
sS'default'
p18825
S'0'
p18826
sS'name'
p18827
S'value'
p18828
sS'required'
p18829
I00
sS'group_name'
p18830
NsasS'name'
p18831
S'/Functions/ConstantFunction'
p18832
sa(dp18833
S'description'
p18834
S'Function with values sampled from a given image stack\n'
p18835
sS'subblocks'
p18836
NsS'parameters'
p18837
(lp18838
(dp18839
S'description'
p18840
S'The image RGB-component to return, leaving this blank will result in a greyscale value for the image to be created. The component number is zero based, i.e. 0 returns the first (RED) component of the image.\n'
p18841
sS'cpp_type'
p18842
S'unsigned int'
p18843
sS'default'
p18844
g3
sS'name'
p18845
S'component'
p18846
sS'required'
p18847
I00
sS'group_name'
p18848
Nsa(dp18849
S'description'
p18850
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p18851
sS'cpp_type'
p18852
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p18853
sS'default'
p18854
g3
sS'name'
p18855
S'control_tags'
p18856
sS'required'
p18857
I00
sS'group_name'
p18858
S'Advanced'
p18859
sa(dp18860
S'description'
p18861
S'x,y,z dimensions of the image (defaults to mesh dimensions)\n'
p18862
sS'cpp_type'
p18863
S'libMesh::Point'
p18864
sS'default'
p18865
g3
sS'name'
p18866
S'dimensions'
p18867
sS'required'
p18868
I00
sS'group_name'
p18869
Nsa(dp18870
S'description'
p18871
S'Set the enabled status of the MooseObject.\n'
p18872
sS'cpp_type'
p18873
S'bool'
p18874
sS'default'
p18875
S'1'
p18876
sS'name'
p18877
S'enable'
p18878
sS'required'
p18879
I00
sS'group_name'
p18880
S'Advanced'
p18881
sa(dp18882
S'description'
p18883
S'Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n'
p18884
sS'cpp_type'
p18885
S'FileName'
p18886
sS'default'
p18887
g3
sS'name'
p18888
S'file'
p18889
sS'required'
p18890
I00
sS'group_name'
p18891
Nsa(dp18892
S'description'
p18893
S"Image file base to open, use this option when a stack of images must be read (ignored if 'file' is given)\n"
p18894
sS'cpp_type'
p18895
S'FileNameNoExtension'
p18896
sS'default'
p18897
g3
sS'name'
p18898
S'file_base'
p18899
sS'required'
p18900
I00
sS'group_name'
p18901
Nsa(dp18902
S'description'
p18903
S"Range of images to analyze, used with 'file_base' (ignored if 'file' is given)\n"
p18904
sS'cpp_type'
p18905
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p18906
sS'default'
p18907
g3
sS'name'
p18908
S'file_range'
p18909
sS'required'
p18910
I00
sS'group_name'
p18911
Nsa(dp18912
S'description'
p18913
S"Suffix of the file to open, e.g. 'png'\n"
p18914
sS'cpp_type'
p18915
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18916
sS'default'
p18917
g3
sS'name'
p18918
S'file_suffix'
p18919
sS'required'
p18920
I00
sS'group_name'
p18921
Nsa(dp18922
S'description'
p18923
S'Flip the image along the x-axis\n'
p18924
sS'cpp_type'
p18925
S'bool'
p18926
sS'default'
p18927
S'0'
p18928
sS'name'
p18929
S'flip_x'
p18930
sS'required'
p18931
I00
sS'group_name'
p18932
S'Flip'
p18933
sa(dp18934
S'description'
p18935
S'Flip the image along the y-axis\n'
p18936
sS'cpp_type'
p18937
S'bool'
p18938
sS'default'
p18939
S'0'
p18940
sS'name'
p18941
S'flip_y'
p18942
sS'required'
p18943
I00
sS'group_name'
p18944
S'Flip'
p18945
sa(dp18946
S'description'
p18947
S'Flip the image along the z-axis\n'
p18948
sS'cpp_type'
p18949
S'bool'
p18950
sS'default'
p18951
S'0'
p18952
sS'name'
p18953
S'flip_z'
p18954
sS'required'
p18955
I00
sS'group_name'
p18956
S'Flip'
p18957
sa(dp18958
S'description'
p18959
S'The value to set for data less than the threshold value\n'
p18960
sS'cpp_type'
p18961
S'double'
p18962
sS'default'
p18963
S'0'
p18964
sS'name'
p18965
S'lower_value'
p18966
sS'required'
p18967
I00
sS'group_name'
p18968
S'Threshold'
p18969
sa(dp18970
S'description'
p18971
S'Origin of the image (defaults to mesh origin)\n'
p18972
sS'cpp_type'
p18973
S'libMesh::Point'
p18974
sS'default'
p18975
g3
sS'name'
p18976
S'origin'
p18977
sS'required'
p18978
I00
sS'group_name'
p18979
Nsa(dp18980
S'description'
p18981
S'Multiplier to apply to all pixel values; occurs after shifting\n'
p18982
sS'cpp_type'
p18983
S'double'
p18984
sS'default'
p18985
S'1'
p18986
sS'name'
p18987
S'scale'
p18988
sS'required'
p18989
I00
sS'group_name'
p18990
S'Rescale'
p18991
sa(dp18992
S'description'
p18993
S'Value to add to all pixels; occurs prior to scaling\n'
p18994
sS'cpp_type'
p18995
S'double'
p18996
sS'default'
p18997
S'0'
p18998
sS'name'
p18999
S'shift'
p19000
sS'required'
p19001
I00
sS'group_name'
p19002
S'Rescale'
p19003
sa(dp19004
S'description'
p19005
S'The threshold value\n'
p19006
sS'cpp_type'
p19007
S'double'
p19008
sS'default'
p19009
g3
sS'name'
p19010
S'threshold'
p19011
sS'required'
p19012
I00
sS'group_name'
p19013
S'Threshold'
p19014
sa(dp19015
S'description'
p19016
g3
sS'cpp_type'
p19017
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19018
sS'default'
p19019
S'ImageFunction'
p19020
sS'name'
p19021
S'type'
p19022
sS'required'
p19023
I00
sS'group_name'
p19024
Nsa(dp19025
S'description'
p19026
S'The value to set for data greater than the threshold value\n'
p19027
sS'cpp_type'
p19028
S'double'
p19029
sS'default'
p19030
S'1'
p19031
sS'name'
p19032
S'upper_value'
p19033
sS'required'
p19034
I00
sS'group_name'
p19035
S'Threshold'
p19036
sasS'name'
p19037
S'/Functions/ImageFunction'
p19038
sa(dp19039
S'description'
p19040
S'Returns the linear combination of the functions\n'
p19041
sS'subblocks'
p19042
NsS'parameters'
p19043
(lp19044
(dp19045
S'description'
p19046
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19047
sS'cpp_type'
p19048
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19049
sS'default'
p19050
g3
sS'name'
p19051
S'control_tags'
p19052
sS'required'
p19053
I00
sS'group_name'
p19054
S'Advanced'
p19055
sa(dp19056
S'description'
p19057
S'Set the enabled status of the MooseObject.\n'
p19058
sS'cpp_type'
p19059
S'bool'
p19060
sS'default'
p19061
S'1'
p19062
sS'name'
p19063
S'enable'
p19064
sS'required'
p19065
I00
sS'group_name'
p19066
S'Advanced'
p19067
sa(dp19068
S'description'
p19069
S'This function will return Sum_over_i(w_i * functions_i)\n'
p19070
sS'cpp_type'
p19071
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p19072
sS'default'
p19073
g3
sS'name'
p19074
S'functions'
p19075
sS'required'
p19076
I01
sS'group_name'
p19077
Nsa(dp19078
S'description'
p19079
g3
sS'cpp_type'
p19080
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19081
sS'default'
p19082
S'LinearCombinationFunction'
p19083
sS'name'
p19084
S'type'
p19085
sS'required'
p19086
I00
sS'group_name'
p19087
Nsa(dp19088
S'description'
p19089
S'This function will return Sum_over_i(w_i * functions_i)\n'
p19090
sS'cpp_type'
p19091
S'std::__1::vector<double, std::__1::allocator<double> >'
p19092
sS'default'
p19093
g3
sS'name'
p19094
S'w'
p19095
sS'required'
p19096
I01
sS'group_name'
p19097
NsasS'name'
p19098
S'/Functions/LinearCombinationFunction'
p19099
sa(dp19100
S'description'
p19101
g3
sS'subblocks'
p19102
NsS'parameters'
p19103
(lp19104
(dp19105
S'description'
p19106
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19107
sS'cpp_type'
p19108
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19109
sS'default'
p19110
g3
sS'name'
p19111
S'control_tags'
p19112
sS'required'
p19113
I00
sS'group_name'
p19114
S'Advanced'
p19115
sa(dp19116
S'description'
p19117
S'Set the enabled status of the MooseObject.\n'
p19118
sS'cpp_type'
p19119
S'bool'
p19120
sS'default'
p19121
S'1'
p19122
sS'name'
p19123
S'enable'
p19124
sS'required'
p19125
I00
sS'group_name'
p19126
S'Advanced'
p19127
sa(dp19128
S'description'
p19129
g3
sS'cpp_type'
p19130
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19131
sS'default'
p19132
S'ParsedFunction'
p19133
sS'name'
p19134
S'type'
p19135
sS'required'
p19136
I00
sS'group_name'
p19137
Nsa(dp19138
S'description'
p19139
S'Constant numeric values or postprocessor names for vars.\n'
p19140
sS'cpp_type'
p19141
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19142
sS'default'
p19143
g3
sS'name'
p19144
S'vals'
p19145
sS'required'
p19146
I00
sS'group_name'
p19147
Nsa(dp19148
S'description'
p19149
S'The user defined function.\n'
p19150
sS'cpp_type'
p19151
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19152
sS'default'
p19153
g3
sS'name'
p19154
S'value'
p19155
sS'required'
p19156
I01
sS'group_name'
p19157
Nsa(dp19158
S'description'
p19159
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p19160
sS'cpp_type'
p19161
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19162
sS'default'
p19163
g3
sS'name'
p19164
S'vars'
p19165
sS'required'
p19166
I00
sS'group_name'
p19167
NsasS'name'
p19168
S'/Functions/ParsedFunction'
p19169
sa(dp19170
S'description'
p19171
g3
sS'subblocks'
p19172
NsS'parameters'
p19173
(lp19174
(dp19175
S'description'
p19176
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19177
sS'cpp_type'
p19178
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19179
sS'default'
p19180
g3
sS'name'
p19181
S'control_tags'
p19182
sS'required'
p19183
I00
sS'group_name'
p19184
S'Advanced'
p19185
sa(dp19186
S'description'
p19187
S'Set the enabled status of the MooseObject.\n'
p19188
sS'cpp_type'
p19189
S'bool'
p19190
sS'default'
p19191
S'1'
p19192
sS'name'
p19193
S'enable'
p19194
sS'required'
p19195
I00
sS'group_name'
p19196
S'Advanced'
p19197
sa(dp19198
S'description'
p19199
S'Partial with respect to x.\n'
p19200
sS'cpp_type'
p19201
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19202
sS'default'
p19203
S'0'
p19204
sS'name'
p19205
S'grad_x'
p19206
sS'required'
p19207
I00
sS'group_name'
p19208
Nsa(dp19209
S'description'
p19210
S'Partial with respect to y.\n'
p19211
sS'cpp_type'
p19212
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19213
sS'default'
p19214
S'0'
p19215
sS'name'
p19216
S'grad_y'
p19217
sS'required'
p19218
I00
sS'group_name'
p19219
Nsa(dp19220
S'description'
p19221
S'Partial with respect to z.\n'
p19222
sS'cpp_type'
p19223
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19224
sS'default'
p19225
S'0'
p19226
sS'name'
p19227
S'grad_z'
p19228
sS'required'
p19229
I00
sS'group_name'
p19230
Nsa(dp19231
S'description'
p19232
g3
sS'cpp_type'
p19233
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19234
sS'default'
p19235
S'ParsedGradFunction'
p19236
sS'name'
p19237
S'type'
p19238
sS'required'
p19239
I00
sS'group_name'
p19240
Nsa(dp19241
S'description'
p19242
S'Constant numeric values or postprocessor names for vars.\n'
p19243
sS'cpp_type'
p19244
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19245
sS'default'
p19246
g3
sS'name'
p19247
S'vals'
p19248
sS'required'
p19249
I00
sS'group_name'
p19250
Nsa(dp19251
S'description'
p19252
S'User defined function.\n'
p19253
sS'cpp_type'
p19254
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19255
sS'default'
p19256
S'0'
p19257
sS'name'
p19258
S'value'
p19259
sS'required'
p19260
I00
sS'group_name'
p19261
Nsa(dp19262
S'description'
p19263
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p19264
sS'cpp_type'
p19265
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19266
sS'default'
p19267
g3
sS'name'
p19268
S'vars'
p19269
sS'required'
p19270
I00
sS'group_name'
p19271
NsasS'name'
p19272
S'/Functions/ParsedGradFunction'
p19273
sa(dp19274
S'description'
p19275
g3
sS'subblocks'
p19276
NsS'parameters'
p19277
(lp19278
(dp19279
S'description'
p19280
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19281
sS'cpp_type'
p19282
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19283
sS'default'
p19284
g3
sS'name'
p19285
S'control_tags'
p19286
sS'required'
p19287
I00
sS'group_name'
p19288
S'Advanced'
p19289
sa(dp19290
S'description'
p19291
S'Set the enabled status of the MooseObject.\n'
p19292
sS'cpp_type'
p19293
S'bool'
p19294
sS'default'
p19295
S'1'
p19296
sS'name'
p19297
S'enable'
p19298
sS'required'
p19299
I00
sS'group_name'
p19300
S'Advanced'
p19301
sa(dp19302
S'description'
p19303
g3
sS'cpp_type'
p19304
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19305
sS'default'
p19306
S'ParsedVectorFunction'
p19307
sS'name'
p19308
S'type'
p19309
sS'required'
p19310
I00
sS'group_name'
p19311
Nsa(dp19312
S'description'
p19313
S'Constant numeric values or postprocessor names for vars.\n'
p19314
sS'cpp_type'
p19315
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19316
sS'default'
p19317
g3
sS'name'
p19318
S'vals'
p19319
sS'required'
p19320
I00
sS'group_name'
p19321
Nsa(dp19322
S'description'
p19323
S'x-component of function.\n'
p19324
sS'cpp_type'
p19325
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19326
sS'default'
p19327
S'0'
p19328
sS'name'
p19329
S'value_x'
p19330
sS'required'
p19331
I00
sS'group_name'
p19332
Nsa(dp19333
S'description'
p19334
S'y-component of function.\n'
p19335
sS'cpp_type'
p19336
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19337
sS'default'
p19338
S'0'
p19339
sS'name'
p19340
S'value_y'
p19341
sS'required'
p19342
I00
sS'group_name'
p19343
Nsa(dp19344
S'description'
p19345
S'z-component of function.\n'
p19346
sS'cpp_type'
p19347
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19348
sS'default'
p19349
S'0'
p19350
sS'name'
p19351
S'value_z'
p19352
sS'required'
p19353
I00
sS'group_name'
p19354
Nsa(dp19355
S'description'
p19356
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p19357
sS'cpp_type'
p19358
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19359
sS'default'
p19360
g3
sS'name'
p19361
S'vars'
p19362
sS'required'
p19363
I00
sS'group_name'
p19364
NsasS'name'
p19365
S'/Functions/ParsedVectorFunction'
p19366
sa(dp19367
S'description'
p19368
g3
sS'subblocks'
p19369
NsS'parameters'
p19370
(lp19371
(dp19372
S'description'
p19373
S'The axis used (0, 1, or 2 for x, y, or z).\n'
p19374
sS'cpp_type'
p19375
S'int'
p19376
sS'default'
p19377
S'-1'
p19378
sS'name'
p19379
S'axis'
p19380
sS'required'
p19381
I00
sS'group_name'
p19382
Nsa(dp19383
S'description'
p19384
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19385
sS'cpp_type'
p19386
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19387
sS'default'
p19388
g3
sS'name'
p19389
S'control_tags'
p19390
sS'required'
p19391
I00
sS'group_name'
p19392
S'Advanced'
p19393
sa(dp19394
S'description'
p19395
S'File holding csv data for use with PiecewiseBilinear\n'
p19396
sS'cpp_type'
p19397
S'FileName'
p19398
sS'default'
p19399
g3
sS'name'
p19400
S'data_file'
p19401
sS'required'
p19402
I00
sS'group_name'
p19403
Nsa(dp19404
S'description'
p19405
S'Set the enabled status of the MooseObject.\n'
p19406
sS'cpp_type'
p19407
S'bool'
p19408
sS'default'
p19409
S'1'
p19410
sS'name'
p19411
S'enable'
p19412
sS'required'
p19413
I00
sS'group_name'
p19414
S'Advanced'
p19415
sa(dp19416
S'description'
p19417
S'Set to true if you want to interpolate along a radius rather that along a specific axis, and note that you have to define xaxis and yaxis in the input file\n'
p19418
sS'cpp_type'
p19419
S'bool'
p19420
sS'default'
p19421
S'0'
p19422
sS'name'
p19423
S'radial'
p19424
sS'required'
p19425
I00
sS'group_name'
p19426
Nsa(dp19427
S'description'
p19428
S'Scale factor to be applied to the axis, yaxis, or xaxis values\n'
p19429
sS'cpp_type'
p19430
S'double'
p19431
sS'default'
p19432
S'1'
p19433
sS'name'
p19434
S'scale_factor'
p19435
sS'required'
p19436
I00
sS'group_name'
p19437
Nsa(dp19438
S'description'
p19439
g3
sS'cpp_type'
p19440
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19441
sS'default'
p19442
S'PiecewiseBilinear'
p19443
sS'name'
p19444
S'type'
p19445
sS'required'
p19446
I00
sS'group_name'
p19447
Nsa(dp19448
S'description'
p19449
S'The x abscissa values\n'
p19450
sS'cpp_type'
p19451
S'std::__1::vector<double, std::__1::allocator<double> >'
p19452
sS'default'
p19453
g3
sS'name'
p19454
S'x'
p19455
sS'required'
p19456
I00
sS'group_name'
p19457
Nsa(dp19458
S'description'
p19459
S'The coordinate used for x-axis data (0, 1, or 2 for x, y, or z).\n'
p19460
sS'cpp_type'
p19461
S'int'
p19462
sS'default'
p19463
S'-1'
p19464
sS'name'
p19465
S'xaxis'
p19466
sS'required'
p19467
I00
sS'group_name'
p19468
Nsa(dp19469
S'description'
p19470
S'The y abscissa values\n'
p19471
sS'cpp_type'
p19472
S'std::__1::vector<double, std::__1::allocator<double> >'
p19473
sS'default'
p19474
g3
sS'name'
p19475
S'y'
p19476
sS'required'
p19477
I00
sS'group_name'
p19478
Nsa(dp19479
S'description'
p19480
S'The coordinate used for y-axis data (0, 1, or 2 for x, y, or z).\n'
p19481
sS'cpp_type'
p19482
S'int'
p19483
sS'default'
p19484
S'-1'
p19485
sS'name'
p19486
S'yaxis'
p19487
sS'required'
p19488
I00
sS'group_name'
p19489
Nsa(dp19490
S'description'
p19491
S'The ordinate values\n'
p19492
sS'cpp_type'
p19493
S'std::__1::vector<double, std::__1::allocator<double> >'
p19494
sS'default'
p19495
g3
sS'name'
p19496
S'z'
p19497
sS'required'
p19498
I00
sS'group_name'
p19499
NsasS'name'
p19500
S'/Functions/PiecewiseBilinear'
p19501
sa(dp19502
S'description'
p19503
g3
sS'subblocks'
p19504
NsS'parameters'
p19505
(lp19506
(dp19507
S'description'
p19508
S'The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n'
p19509
sS'cpp_type'
p19510
S'int'
p19511
sS'default'
p19512
g3
sS'name'
p19513
S'axis'
p19514
sS'required'
p19515
I00
sS'group_name'
p19516
Nsa(dp19517
S'description'
p19518
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19519
sS'cpp_type'
p19520
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19521
sS'default'
p19522
g3
sS'name'
p19523
S'control_tags'
p19524
sS'required'
p19525
I00
sS'group_name'
p19526
S'Advanced'
p19527
sa(dp19528
S'description'
p19529
S'File holding csv data for use with Piecewise\n'
p19530
sS'cpp_type'
p19531
S'FileName'
p19532
sS'default'
p19533
g3
sS'name'
p19534
S'data_file'
p19535
sS'required'
p19536
I00
sS'group_name'
p19537
Nsa(dp19538
S'name'
p19539
S'direction'
p19540
sS'cpp_type'
p19541
S'MooseEnum'
p19542
sS'default'
p19543
S'left'
p19544
sS'description'
p19545
S'Direction to look to find value: left right\n'
p19546
sS'required'
p19547
I00
sS'options'
p19548
S'left right'
p19549
sS'group_name'
p19550
Nsa(dp19551
S'description'
p19552
S'Set the enabled status of the MooseObject.\n'
p19553
sS'cpp_type'
p19554
S'bool'
p19555
sS'default'
p19556
S'1'
p19557
sS'name'
p19558
S'enable'
p19559
sS'required'
p19560
I00
sS'group_name'
p19561
S'Advanced'
p19562
sa(dp19563
S'description'
p19564
S'Format of csv data file that is in either in columns or rows\n'
p19565
sS'cpp_type'
p19566
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19567
sS'default'
p19568
S'rows'
p19569
sS'name'
p19570
S'format'
p19571
sS'required'
p19572
I00
sS'group_name'
p19573
Nsa(dp19574
S'description'
p19575
S'Scale factor to be applied to the ordinate values\n'
p19576
sS'cpp_type'
p19577
S'double'
p19578
sS'default'
p19579
S'1'
p19580
sS'name'
p19581
S'scale_factor'
p19582
sS'required'
p19583
I00
sS'group_name'
p19584
Nsa(dp19585
S'description'
p19586
g3
sS'cpp_type'
p19587
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19588
sS'default'
p19589
S'PiecewiseConstant'
p19590
sS'name'
p19591
S'type'
p19592
sS'required'
p19593
I00
sS'group_name'
p19594
Nsa(dp19595
S'description'
p19596
S'The abscissa values\n'
p19597
sS'cpp_type'
p19598
S'std::__1::vector<double, std::__1::allocator<double> >'
p19599
sS'default'
p19600
g3
sS'name'
p19601
S'x'
p19602
sS'required'
p19603
I00
sS'group_name'
p19604
Nsa(dp19605
S'description'
p19606
S'The abscissa index in the data file\n'
p19607
sS'cpp_type'
p19608
S'unsigned int'
p19609
sS'default'
p19610
S'0'
p19611
sS'name'
p19612
S'x_index_in_file'
p19613
sS'required'
p19614
I00
sS'group_name'
p19615
Nsa(dp19616
S'description'
p19617
S'All function data, supplied in abscissa, ordinate pairs\n'
p19618
sS'cpp_type'
p19619
S'std::__1::vector<double, std::__1::allocator<double> >'
p19620
sS'default'
p19621
g3
sS'name'
p19622
S'xy_data'
p19623
sS'required'
p19624
I00
sS'group_name'
p19625
Nsa(dp19626
S'description'
p19627
S'If the data file only contains abscissa and ordinate data\n'
p19628
sS'cpp_type'
p19629
S'bool'
p19630
sS'default'
p19631
S'1'
p19632
sS'name'
p19633
S'xy_in_file_only'
p19634
sS'required'
p19635
I00
sS'group_name'
p19636
Nsa(dp19637
S'description'
p19638
S'The ordinate values\n'
p19639
sS'cpp_type'
p19640
S'std::__1::vector<double, std::__1::allocator<double> >'
p19641
sS'default'
p19642
g3
sS'name'
p19643
S'y'
p19644
sS'required'
p19645
I00
sS'group_name'
p19646
Nsa(dp19647
S'description'
p19648
S'The ordinate index in the data file\n'
p19649
sS'cpp_type'
p19650
S'unsigned int'
p19651
sS'default'
p19652
S'1'
p19653
sS'name'
p19654
S'y_index_in_file'
p19655
sS'required'
p19656
I00
sS'group_name'
p19657
NsasS'name'
p19658
S'/Functions/PiecewiseConstant'
p19659
sa(dp19660
S'description'
p19661
g3
sS'subblocks'
p19662
NsS'parameters'
p19663
(lp19664
(dp19665
S'description'
p19666
S'The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n'
p19667
sS'cpp_type'
p19668
S'int'
p19669
sS'default'
p19670
g3
sS'name'
p19671
S'axis'
p19672
sS'required'
p19673
I00
sS'group_name'
p19674
Nsa(dp19675
S'description'
p19676
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19677
sS'cpp_type'
p19678
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19679
sS'default'
p19680
g3
sS'name'
p19681
S'control_tags'
p19682
sS'required'
p19683
I00
sS'group_name'
p19684
S'Advanced'
p19685
sa(dp19686
S'description'
p19687
S'File holding csv data for use with Piecewise\n'
p19688
sS'cpp_type'
p19689
S'FileName'
p19690
sS'default'
p19691
g3
sS'name'
p19692
S'data_file'
p19693
sS'required'
p19694
I00
sS'group_name'
p19695
Nsa(dp19696
S'description'
p19697
S'Set the enabled status of the MooseObject.\n'
p19698
sS'cpp_type'
p19699
S'bool'
p19700
sS'default'
p19701
S'1'
p19702
sS'name'
p19703
S'enable'
p19704
sS'required'
p19705
I00
sS'group_name'
p19706
S'Advanced'
p19707
sa(dp19708
S'description'
p19709
S'Format of csv data file that is in either in columns or rows\n'
p19710
sS'cpp_type'
p19711
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19712
sS'default'
p19713
S'rows'
p19714
sS'name'
p19715
S'format'
p19716
sS'required'
p19717
I00
sS'group_name'
p19718
Nsa(dp19719
S'description'
p19720
S'Scale factor to be applied to the ordinate values\n'
p19721
sS'cpp_type'
p19722
S'double'
p19723
sS'default'
p19724
S'1'
p19725
sS'name'
p19726
S'scale_factor'
p19727
sS'required'
p19728
I00
sS'group_name'
p19729
Nsa(dp19730
S'description'
p19731
g3
sS'cpp_type'
p19732
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19733
sS'default'
p19734
S'PiecewiseLinear'
p19735
sS'name'
p19736
S'type'
p19737
sS'required'
p19738
I00
sS'group_name'
p19739
Nsa(dp19740
S'description'
p19741
S'The abscissa values\n'
p19742
sS'cpp_type'
p19743
S'std::__1::vector<double, std::__1::allocator<double> >'
p19744
sS'default'
p19745
g3
sS'name'
p19746
S'x'
p19747
sS'required'
p19748
I00
sS'group_name'
p19749
Nsa(dp19750
S'description'
p19751
S'The abscissa index in the data file\n'
p19752
sS'cpp_type'
p19753
S'unsigned int'
p19754
sS'default'
p19755
S'0'
p19756
sS'name'
p19757
S'x_index_in_file'
p19758
sS'required'
p19759
I00
sS'group_name'
p19760
Nsa(dp19761
S'description'
p19762
S'All function data, supplied in abscissa, ordinate pairs\n'
p19763
sS'cpp_type'
p19764
S'std::__1::vector<double, std::__1::allocator<double> >'
p19765
sS'default'
p19766
g3
sS'name'
p19767
S'xy_data'
p19768
sS'required'
p19769
I00
sS'group_name'
p19770
Nsa(dp19771
S'description'
p19772
S'If the data file only contains abscissa and ordinate data\n'
p19773
sS'cpp_type'
p19774
S'bool'
p19775
sS'default'
p19776
S'1'
p19777
sS'name'
p19778
S'xy_in_file_only'
p19779
sS'required'
p19780
I00
sS'group_name'
p19781
Nsa(dp19782
S'description'
p19783
S'The ordinate values\n'
p19784
sS'cpp_type'
p19785
S'std::__1::vector<double, std::__1::allocator<double> >'
p19786
sS'default'
p19787
g3
sS'name'
p19788
S'y'
p19789
sS'required'
p19790
I00
sS'group_name'
p19791
Nsa(dp19792
S'description'
p19793
S'The ordinate index in the data file\n'
p19794
sS'cpp_type'
p19795
S'unsigned int'
p19796
sS'default'
p19797
S'1'
p19798
sS'name'
p19799
S'y_index_in_file'
p19800
sS'required'
p19801
I00
sS'group_name'
p19802
NsasS'name'
p19803
S'/Functions/PiecewiseLinear'
p19804
sa(dp19805
S'description'
p19806
S'PiecewiseMultilinear performs interpolation on 1D, 2D, 3D or 4D data.  The data_file specifies the axes directions and the function values.  If a point lies outside the data range, the appropriate end value is used.\n'
p19807
sS'subblocks'
p19808
NsS'parameters'
p19809
(lp19810
(dp19811
S'description'
p19812
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19813
sS'cpp_type'
p19814
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19815
sS'default'
p19816
g3
sS'name'
p19817
S'control_tags'
p19818
sS'required'
p19819
I00
sS'group_name'
p19820
S'Advanced'
p19821
sa(dp19822
S'description'
p19823
S'File holding data for use with PiecewiseMultilinear.  Format: any empty line and any line beginning with # are ignored, all other lines are assumed to contain relevant information.  The file must begin with specification of the grid.  This is done through lines containing the keywords: AXIS X; AXIS Y; AXIS Z; or AXIS T.  Immediately following the keyword line must be a space-separated line of real numbers which define the grid along the specified axis.  These data must be monotonically increasing.  After all the axes and their grids have been specified, there must be a line that is DATA.  Following that line, function values are given in the correct order (they may be on indivicual lines, or be space-separated on a number of lines).  When the function is evaluated, f[i,j,k,l] corresponds to the i + j*Ni + k*Ni*Nj + l*Ni*Nj*Nk data value.  Here i>=0 corresponding to the index along the first AXIS, j>=0 corresponding to the index along the second AXIS, etc, and Ni = number of grid points along the first AXIS, etc.\n'
p19824
sS'cpp_type'
p19825
S'FileName'
p19826
sS'default'
p19827
g3
sS'name'
p19828
S'data_file'
p19829
sS'required'
p19830
I00
sS'group_name'
p19831
Nsa(dp19832
S'description'
p19833
S'Set the enabled status of the MooseObject.\n'
p19834
sS'cpp_type'
p19835
S'bool'
p19836
sS'default'
p19837
S'1'
p19838
sS'name'
p19839
S'enable'
p19840
sS'required'
p19841
I00
sS'group_name'
p19842
S'Advanced'
p19843
sa(dp19844
S'description'
p19845
g3
sS'cpp_type'
p19846
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19847
sS'default'
p19848
S'PiecewiseMultilinear'
p19849
sS'name'
p19850
S'type'
p19851
sS'required'
p19852
I00
sS'group_name'
p19853
NsasS'name'
p19854
S'/Functions/PiecewiseMultilinear'
p19855
sa(dp19856
S'description'
p19857
g3
sS'subblocks'
p19858
NsS'parameters'
p19859
(lp19860
(dp19861
S'description'
p19862
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p19863
sS'cpp_type'
p19864
S'double'
p19865
sS'default'
p19866
S'0'
p19867
sS'name'
p19868
S'add_factor'
p19869
sS'required'
p19870
I00
sS'group_name'
p19871
Nsa(dp19872
S'description'
p19873
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19874
sS'cpp_type'
p19875
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19876
sS'default'
p19877
g3
sS'name'
p19878
S'control_tags'
p19879
sS'required'
p19880
I00
sS'group_name'
p19881
S'Advanced'
p19882
sa(dp19883
S'description'
p19884
S'Set the enabled status of the MooseObject.\n'
p19885
sS'cpp_type'
p19886
S'bool'
p19887
sS'default'
p19888
S'1'
p19889
sS'name'
p19890
S'enable'
p19891
sS'required'
p19892
I00
sS'group_name'
p19893
S'Advanced'
p19894
sa(dp19895
S'description'
p19896
S'The name of the variable in the file that is to be extracted\n'
p19897
sS'cpp_type'
p19898
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19899
sS'default'
p19900
g3
sS'name'
p19901
S'from_variable'
p19902
sS'required'
p19903
I00
sS'group_name'
p19904
Nsa(dp19905
S'description'
p19906
S"Scale factor (a) to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p19907
sS'cpp_type'
p19908
S'double'
p19909
sS'default'
p19910
S'1'
p19911
sS'name'
p19912
S'scale_factor'
p19913
sS'required'
p19914
I00
sS'group_name'
p19915
Nsa(dp19916
S'description'
p19917
S'The SolutionUserObject to extract data from.\n'
p19918
sS'cpp_type'
p19919
S'UserObjectName'
p19920
sS'default'
p19921
g3
sS'name'
p19922
S'solution'
p19923
sS'required'
p19924
I01
sS'group_name'
p19925
Nsa(dp19926
S'description'
p19927
g3
sS'cpp_type'
p19928
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19929
sS'default'
p19930
S'SolutionFunction'
p19931
sS'name'
p19932
S'type'
p19933
sS'required'
p19934
I00
sS'group_name'
p19935
NsasS'name'
p19936
S'/Functions/SolutionFunction'
p19937
sa(dp19938
S'description'
p19939
g3
sS'subblocks'
p19940
NsS'parameters'
p19941
(lp19942
(dp19943
S'description'
p19944
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p19945
sS'cpp_type'
p19946
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p19947
sS'default'
p19948
g3
sS'name'
p19949
S'control_tags'
p19950
sS'required'
p19951
I00
sS'group_name'
p19952
S'Advanced'
p19953
sa(dp19954
S'description'
p19955
S'Set the enabled status of the MooseObject.\n'
p19956
sS'cpp_type'
p19957
S'bool'
p19958
sS'default'
p19959
S'1'
p19960
sS'name'
p19961
S'enable'
p19962
sS'required'
p19963
I00
sS'group_name'
p19964
S'Advanced'
p19965
sa(dp19966
S'description'
p19967
g3
sS'cpp_type'
p19968
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19969
sS'default'
p19970
S'SplineFunction'
p19971
sS'name'
p19972
S'type'
p19973
sS'required'
p19974
I00
sS'group_name'
p19975
Nsa(dp19976
S'description'
p19977
S'The abscissa values\n'
p19978
sS'cpp_type'
p19979
S'std::__1::vector<double, std::__1::allocator<double> >'
p19980
sS'default'
p19981
g3
sS'name'
p19982
S'x'
p19983
sS'required'
p19984
I01
sS'group_name'
p19985
Nsa(dp19986
S'description'
p19987
S'The ordinate values\n'
p19988
sS'cpp_type'
p19989
S'std::__1::vector<double, std::__1::allocator<double> >'
p19990
sS'default'
p19991
g3
sS'name'
p19992
S'y'
p19993
sS'required'
p19994
I01
sS'group_name'
p19995
Nsa(dp19996
S'description'
p19997
S'The value of the first derivative of the interpolating function at point 1\n'
p19998
sS'cpp_type'
p19999
S'double'
p20000
sS'default'
p20001
S'1e+30'
p20002
sS'name'
p20003
S'yp1'
p20004
sS'required'
p20005
I00
sS'group_name'
p20006
Nsa(dp20007
S'description'
p20008
S'The value of the first derivative of the interpolating function at point n\n'
p20009
sS'cpp_type'
p20010
S'double'
p20011
sS'default'
p20012
S'1e+30'
p20013
sS'name'
p20014
S'ypn'
p20015
sS'required'
p20016
I00
sS'group_name'
p20017
NsasS'name'
p20018
S'/Functions/SplineFunction'
p20019
sasS'parameters'
p20020
NsS'name'
p20021
S'/Functions'
p20022
sa(dp20023
S'description'
p20024
g3
sS'subblocks'
p20025
NsS'parameters'
p20026
NsS'name'
p20027
S'/GlobalParams'
p20028
sa(dp20029
S'description'
p20030
g3
sS'subblocks'
p20031
(lp20032
(dp20033
S'description'
p20034
g3
sS'subblocks'
p20035
NsS'parameters'
p20036
(lp20037
(dp20038
S'description'
p20039
S'A string representing the Moose Object that will be built by this Action\n'
p20040
sS'cpp_type'
p20041
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20042
sS'default'
p20043
g3
sS'name'
p20044
S'type'
p20045
sS'required'
p20046
I01
sS'group_name'
p20047
NsasS'name'
p20048
S'/ICs/*'
p20049
sa(dp20050
S'description'
p20051
g3
sS'subblocks'
p20052
NsS'parameters'
p20053
(lp20054
(dp20055
S'description'
p20056
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20057
sS'cpp_type'
p20058
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p20059
sS'default'
p20060
g3
sS'name'
p20061
S'block'
p20062
sS'required'
p20063
I00
sS'group_name'
p20064
Nsa(dp20065
S'description'
p20066
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20067
sS'cpp_type'
p20068
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p20069
sS'default'
p20070
g3
sS'name'
p20071
S'boundary'
p20072
sS'required'
p20073
I00
sS'group_name'
p20074
Nsa(dp20075
S'description'
p20076
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20077
sS'cpp_type'
p20078
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20079
sS'default'
p20080
g3
sS'name'
p20081
S'control_tags'
p20082
sS'required'
p20083
I00
sS'group_name'
p20084
S'Advanced'
p20085
sa(dp20086
S'description'
p20087
S'Set the enabled status of the MooseObject.\n'
p20088
sS'cpp_type'
p20089
S'bool'
p20090
sS'default'
p20091
S'1'
p20092
sS'name'
p20093
S'enable'
p20094
sS'required'
p20095
I00
sS'group_name'
p20096
S'Advanced'
p20097
sa(dp20098
S'description'
p20099
S'The value of the variable inside the box\n'
p20100
sS'cpp_type'
p20101
S'double'
p20102
sS'default'
p20103
S'0'
p20104
sS'name'
p20105
S'inside'
p20106
sS'required'
p20107
I00
sS'group_name'
p20108
Nsa(dp20109
S'description'
p20110
S'The value of the variable outside the box\n'
p20111
sS'cpp_type'
p20112
S'double'
p20113
sS'default'
p20114
S'0'
p20115
sS'name'
p20116
S'outside'
p20117
sS'required'
p20118
I00
sS'group_name'
p20119
Nsa(dp20120
S'description'
p20121
g3
sS'cpp_type'
p20122
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20123
sS'default'
p20124
S'BoundingBoxIC'
p20125
sS'name'
p20126
S'type'
p20127
sS'required'
p20128
I00
sS'group_name'
p20129
Nsa(dp20130
S'description'
p20131
S'The variable this initial condition is supposed to provide values for.\n'
p20132
sS'cpp_type'
p20133
S'VariableName'
p20134
sS'default'
p20135
g3
sS'name'
p20136
S'variable'
p20137
sS'required'
p20138
I01
sS'group_name'
p20139
Nsa(dp20140
S'description'
p20141
S'The x coordinate of the lower left-hand corner of the box\n'
p20142
sS'cpp_type'
p20143
S'double'
p20144
sS'default'
p20145
g3
sS'name'
p20146
S'x1'
p20147
sS'required'
p20148
I01
sS'group_name'
p20149
Nsa(dp20150
S'description'
p20151
S'The x coordinate of the upper right-hand corner of the box\n'
p20152
sS'cpp_type'
p20153
S'double'
p20154
sS'default'
p20155
g3
sS'name'
p20156
S'x2'
p20157
sS'required'
p20158
I01
sS'group_name'
p20159
Nsa(dp20160
S'description'
p20161
S'The y coordinate of the lower left-hand corner of the box\n'
p20162
sS'cpp_type'
p20163
S'double'
p20164
sS'default'
p20165
g3
sS'name'
p20166
S'y1'
p20167
sS'required'
p20168
I01
sS'group_name'
p20169
Nsa(dp20170
S'description'
p20171
S'The y coordinate of the upper right-hand corner of the box\n'
p20172
sS'cpp_type'
p20173
S'double'
p20174
sS'default'
p20175
g3
sS'name'
p20176
S'y2'
p20177
sS'required'
p20178
I01
sS'group_name'
p20179
Nsa(dp20180
S'description'
p20181
S'The z coordinate of the lower left-hand corner of the box\n'
p20182
sS'cpp_type'
p20183
S'double'
p20184
sS'default'
p20185
S'0'
p20186
sS'name'
p20187
S'z1'
p20188
sS'required'
p20189
I00
sS'group_name'
p20190
Nsa(dp20191
S'description'
p20192
S'The z coordinate of the upper right-hand corner of the box\n'
p20193
sS'cpp_type'
p20194
S'double'
p20195
sS'default'
p20196
S'0'
p20197
sS'name'
p20198
S'z2'
p20199
sS'required'
p20200
I00
sS'group_name'
p20201
NsasS'name'
p20202
S'/ICs/BoundingBoxIC'
p20203
sa(dp20204
S'description'
p20205
g3
sS'subblocks'
p20206
NsS'parameters'
p20207
(lp20208
(dp20209
S'description'
p20210
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20211
sS'cpp_type'
p20212
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p20213
sS'default'
p20214
g3
sS'name'
p20215
S'block'
p20216
sS'required'
p20217
I00
sS'group_name'
p20218
Nsa(dp20219
S'description'
p20220
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20221
sS'cpp_type'
p20222
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p20223
sS'default'
p20224
g3
sS'name'
p20225
S'boundary'
p20226
sS'required'
p20227
I00
sS'group_name'
p20228
Nsa(dp20229
S'description'
p20230
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20231
sS'cpp_type'
p20232
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20233
sS'default'
p20234
g3
sS'name'
p20235
S'control_tags'
p20236
sS'required'
p20237
I00
sS'group_name'
p20238
S'Advanced'
p20239
sa(dp20240
S'description'
p20241
S'Set the enabled status of the MooseObject.\n'
p20242
sS'cpp_type'
p20243
S'bool'
p20244
sS'default'
p20245
S'1'
p20246
sS'name'
p20247
S'enable'
p20248
sS'required'
p20249
I00
sS'group_name'
p20250
S'Advanced'
p20251
sa(dp20252
S'description'
p20253
g3
sS'cpp_type'
p20254
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20255
sS'default'
p20256
S'ConstantIC'
p20257
sS'name'
p20258
S'type'
p20259
sS'required'
p20260
I00
sS'group_name'
p20261
Nsa(dp20262
S'description'
p20263
S'The value to be set in IC\n'
p20264
sS'cpp_type'
p20265
S'double'
p20266
sS'default'
p20267
g3
sS'name'
p20268
S'value'
p20269
sS'required'
p20270
I01
sS'group_name'
p20271
Nsa(dp20272
S'description'
p20273
S'The variable this initial condition is supposed to provide values for.\n'
p20274
sS'cpp_type'
p20275
S'VariableName'
p20276
sS'default'
p20277
g3
sS'name'
p20278
S'variable'
p20279
sS'required'
p20280
I01
sS'group_name'
p20281
NsasS'name'
p20282
S'/ICs/ConstantIC'
p20283
sa(dp20284
S'description'
p20285
g3
sS'subblocks'
p20286
NsS'parameters'
p20287
(lp20288
(dp20289
S'description'
p20290
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20291
sS'cpp_type'
p20292
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p20293
sS'default'
p20294
g3
sS'name'
p20295
S'block'
p20296
sS'required'
p20297
I00
sS'group_name'
p20298
Nsa(dp20299
S'description'
p20300
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20301
sS'cpp_type'
p20302
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p20303
sS'default'
p20304
g3
sS'name'
p20305
S'boundary'
p20306
sS'required'
p20307
I00
sS'group_name'
p20308
Nsa(dp20309
S'description'
p20310
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20311
sS'cpp_type'
p20312
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20313
sS'default'
p20314
g3
sS'name'
p20315
S'control_tags'
p20316
sS'required'
p20317
I00
sS'group_name'
p20318
S'Advanced'
p20319
sa(dp20320
S'description'
p20321
S'Set the enabled status of the MooseObject.\n'
p20322
sS'cpp_type'
p20323
S'bool'
p20324
sS'default'
p20325
S'1'
p20326
sS'name'
p20327
S'enable'
p20328
sS'required'
p20329
I00
sS'group_name'
p20330
S'Advanced'
p20331
sa(dp20332
S'description'
p20333
S'The initial condition function.\n'
p20334
sS'cpp_type'
p20335
S'FunctionName'
p20336
sS'default'
p20337
g3
sS'name'
p20338
S'function'
p20339
sS'required'
p20340
I01
sS'group_name'
p20341
Nsa(dp20342
S'description'
p20343
g3
sS'cpp_type'
p20344
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20345
sS'default'
p20346
S'FunctionIC'
p20347
sS'name'
p20348
S'type'
p20349
sS'required'
p20350
I00
sS'group_name'
p20351
Nsa(dp20352
S'description'
p20353
S'The variable this initial condition is supposed to provide values for.\n'
p20354
sS'cpp_type'
p20355
S'VariableName'
p20356
sS'default'
p20357
g3
sS'name'
p20358
S'variable'
p20359
sS'required'
p20360
I01
sS'group_name'
p20361
NsasS'name'
p20362
S'/ICs/FunctionIC'
p20363
sa(dp20364
S'description'
p20365
g3
sS'subblocks'
p20366
NsS'parameters'
p20367
(lp20368
(dp20369
S'description'
p20370
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20371
sS'cpp_type'
p20372
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20373
sS'default'
p20374
g3
sS'name'
p20375
S'control_tags'
p20376
sS'required'
p20377
I00
sS'group_name'
p20378
S'Advanced'
p20379
sa(dp20380
S'description'
p20381
S'Set the enabled status of the MooseObject.\n'
p20382
sS'cpp_type'
p20383
S'bool'
p20384
sS'default'
p20385
S'1'
p20386
sS'name'
p20387
S'enable'
p20388
sS'required'
p20389
I00
sS'group_name'
p20390
S'Advanced'
p20391
sa(dp20392
S'description'
p20393
S'The initial condition function.\n'
p20394
sS'cpp_type'
p20395
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p20396
sS'default'
p20397
g3
sS'name'
p20398
S'function'
p20399
sS'required'
p20400
I01
sS'group_name'
p20401
Nsa(dp20402
S'description'
p20403
g3
sS'cpp_type'
p20404
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20405
sS'default'
p20406
S'FunctionScalarIC'
p20407
sS'name'
p20408
S'type'
p20409
sS'required'
p20410
I00
sS'group_name'
p20411
Nsa(dp20412
S'description'
p20413
S'The variable this initial condition is supposed to provide values for.\n'
p20414
sS'cpp_type'
p20415
S'VariableName'
p20416
sS'default'
p20417
g3
sS'name'
p20418
S'variable'
p20419
sS'required'
p20420
I00
sS'group_name'
p20421
NsasS'name'
p20422
S'/ICs/FunctionScalarIC'
p20423
sa(dp20424
S'description'
p20425
g3
sS'subblocks'
p20426
NsS'parameters'
p20427
(lp20428
(dp20429
S'description'
p20430
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20431
sS'cpp_type'
p20432
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p20433
sS'default'
p20434
g3
sS'name'
p20435
S'block'
p20436
sS'required'
p20437
I00
sS'group_name'
p20438
Nsa(dp20439
S'description'
p20440
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20441
sS'cpp_type'
p20442
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p20443
sS'default'
p20444
g3
sS'name'
p20445
S'boundary'
p20446
sS'required'
p20447
I00
sS'group_name'
p20448
Nsa(dp20449
S'description'
p20450
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20451
sS'cpp_type'
p20452
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20453
sS'default'
p20454
g3
sS'name'
p20455
S'control_tags'
p20456
sS'required'
p20457
I00
sS'group_name'
p20458
S'Advanced'
p20459
sa(dp20460
S'description'
p20461
S'Set the enabled status of the MooseObject.\n'
p20462
sS'cpp_type'
p20463
S'bool'
p20464
sS'default'
p20465
S'1'
p20466
sS'name'
p20467
S'enable'
p20468
sS'required'
p20469
I00
sS'group_name'
p20470
S'Advanced'
p20471
sa(dp20472
S'description'
p20473
S'Upper bound of the randomly generated values\n'
p20474
sS'cpp_type'
p20475
S'double'
p20476
sS'default'
p20477
S'1'
p20478
sS'name'
p20479
S'max'
p20480
sS'required'
p20481
I00
sS'group_name'
p20482
Nsa(dp20483
S'description'
p20484
S'Lower bound of the randomly generated values\n'
p20485
sS'cpp_type'
p20486
S'double'
p20487
sS'default'
p20488
S'0'
p20489
sS'name'
p20490
S'min'
p20491
sS'required'
p20492
I00
sS'group_name'
p20493
Nsa(dp20494
S'description'
p20495
S'Seed value for the random number generator\n'
p20496
sS'cpp_type'
p20497
S'unsigned int'
p20498
sS'default'
p20499
S'0'
p20500
sS'name'
p20501
S'seed'
p20502
sS'required'
p20503
I00
sS'group_name'
p20504
Nsa(dp20505
S'description'
p20506
g3
sS'cpp_type'
p20507
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20508
sS'default'
p20509
S'RandomIC'
p20510
sS'name'
p20511
S'type'
p20512
sS'required'
p20513
I00
sS'group_name'
p20514
Nsa(dp20515
S'description'
p20516
S'The variable this initial condition is supposed to provide values for.\n'
p20517
sS'cpp_type'
p20518
S'VariableName'
p20519
sS'default'
p20520
g3
sS'name'
p20521
S'variable'
p20522
sS'required'
p20523
I01
sS'group_name'
p20524
NsasS'name'
p20525
S'/ICs/RandomIC'
p20526
sa(dp20527
S'description'
p20528
g3
sS'subblocks'
p20529
NsS'parameters'
p20530
(lp20531
(dp20532
S'description'
p20533
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20534
sS'cpp_type'
p20535
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20536
sS'default'
p20537
g3
sS'name'
p20538
S'control_tags'
p20539
sS'required'
p20540
I00
sS'group_name'
p20541
S'Advanced'
p20542
sa(dp20543
S'description'
p20544
S'Set the enabled status of the MooseObject.\n'
p20545
sS'cpp_type'
p20546
S'bool'
p20547
sS'default'
p20548
S'1'
p20549
sS'name'
p20550
S'enable'
p20551
sS'required'
p20552
I00
sS'group_name'
p20553
S'Advanced'
p20554
sa(dp20555
S'description'
p20556
g3
sS'cpp_type'
p20557
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20558
sS'default'
p20559
S'ScalarComponentIC'
p20560
sS'name'
p20561
S'type'
p20562
sS'required'
p20563
I00
sS'group_name'
p20564
Nsa(dp20565
S'description'
p20566
S'Initial values to initialize the scalar variable.\n'
p20567
sS'cpp_type'
p20568
S'std::__1::vector<double, std::__1::allocator<double> >'
p20569
sS'default'
p20570
g3
sS'name'
p20571
S'values'
p20572
sS'required'
p20573
I01
sS'group_name'
p20574
Nsa(dp20575
S'description'
p20576
S'The variable this initial condition is supposed to provide values for.\n'
p20577
sS'cpp_type'
p20578
S'VariableName'
p20579
sS'default'
p20580
g3
sS'name'
p20581
S'variable'
p20582
sS'required'
p20583
I00
sS'group_name'
p20584
NsasS'name'
p20585
S'/ICs/ScalarComponentIC'
p20586
sa(dp20587
S'description'
p20588
g3
sS'subblocks'
p20589
NsS'parameters'
p20590
(lp20591
(dp20592
S'description'
p20593
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20594
sS'cpp_type'
p20595
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20596
sS'default'
p20597
g3
sS'name'
p20598
S'control_tags'
p20599
sS'required'
p20600
I00
sS'group_name'
p20601
S'Advanced'
p20602
sa(dp20603
S'description'
p20604
S'Set the enabled status of the MooseObject.\n'
p20605
sS'cpp_type'
p20606
S'bool'
p20607
sS'default'
p20608
S'1'
p20609
sS'name'
p20610
S'enable'
p20611
sS'required'
p20612
I00
sS'group_name'
p20613
S'Advanced'
p20614
sa(dp20615
S'description'
p20616
g3
sS'cpp_type'
p20617
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20618
sS'default'
p20619
S'ScalarConstantIC'
p20620
sS'name'
p20621
S'type'
p20622
sS'required'
p20623
I00
sS'group_name'
p20624
Nsa(dp20625
S'description'
p20626
g3
sS'cpp_type'
p20627
S'double'
p20628
sS'default'
p20629
S'0'
p20630
sS'name'
p20631
S'value'
p20632
sS'required'
p20633
I00
sS'group_name'
p20634
Nsa(dp20635
S'description'
p20636
S'The variable this initial condition is supposed to provide values for.\n'
p20637
sS'cpp_type'
p20638
S'VariableName'
p20639
sS'default'
p20640
g3
sS'name'
p20641
S'variable'
p20642
sS'required'
p20643
I00
sS'group_name'
p20644
NsasS'name'
p20645
S'/ICs/ScalarConstantIC'
p20646
sasS'parameters'
p20647
NsS'name'
p20648
S'/ICs'
p20649
sa(dp20650
S'description'
p20651
g3
sS'subblocks'
p20652
(lp20653
(dp20654
S'description'
p20655
g3
sS'subblocks'
p20656
NsS'parameters'
p20657
(lp20658
(dp20659
S'description'
p20660
S'A string representing the Moose Object that will be built by this Action\n'
p20661
sS'cpp_type'
p20662
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20663
sS'default'
p20664
g3
sS'name'
p20665
S'type'
p20666
sS'required'
p20667
I01
sS'group_name'
p20668
NsasS'name'
p20669
S'/InterfaceKernels/*'
p20670
sasS'parameters'
p20671
NsS'name'
p20672
S'/InterfaceKernels'
p20673
sa(dp20674
S'description'
p20675
g3
sS'subblocks'
p20676
(lp20677
(dp20678
S'description'
p20679
g3
sS'subblocks'
p20680
NsS'parameters'
p20681
(lp20682
(dp20683
S'description'
p20684
S'A string representing the Moose Object that will be built by this Action\n'
p20685
sS'cpp_type'
p20686
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20687
sS'default'
p20688
g3
sS'name'
p20689
S'type'
p20690
sS'required'
p20691
I01
sS'group_name'
p20692
NsasS'name'
p20693
S'/Kernels/*'
p20694
sa(dp20695
S'description'
p20696
g3
sS'subblocks'
p20697
NsS'parameters'
p20698
(lp20699
(dp20700
S'description'
p20701
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20702
sS'cpp_type'
p20703
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p20704
sS'default'
p20705
g3
sS'name'
p20706
S'block'
p20707
sS'required'
p20708
I00
sS'group_name'
p20709
Nsa(dp20710
S'description'
p20711
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20712
sS'cpp_type'
p20713
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20714
sS'default'
p20715
g3
sS'name'
p20716
S'control_tags'
p20717
sS'required'
p20718
I00
sS'group_name'
p20719
S'Advanced'
p20720
sa(dp20721
S'description'
p20722
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p20723
sS'cpp_type'
p20724
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p20725
sS'default'
p20726
g3
sS'name'
p20727
S'diag_save_in'
p20728
sS'required'
p20729
I00
sS'group_name'
p20730
S'Advanced'
p20731
sa(dp20732
S'description'
p20733
S'Whether or not this kernel will be used as an eigen kernel\n'
p20734
sS'cpp_type'
p20735
S'bool'
p20736
sS'default'
p20737
S'0'
p20738
sS'name'
p20739
S'eigen_kernel'
p20740
sS'required'
p20741
I00
sS'group_name'
p20742
Nsa(dp20743
S'description'
p20744
S'Set the enabled status of the MooseObject.\n'
p20745
sS'cpp_type'
p20746
S'bool'
p20747
sS'default'
p20748
S'1'
p20749
sS'name'
p20750
S'enable'
p20751
sS'required'
p20752
I00
sS'group_name'
p20753
S'Advanced'
p20754
sa(dp20755
S'description'
p20756
S'Determines whether this object is calculated using an implicit or explicit form\n'
p20757
sS'cpp_type'
p20758
S'bool'
p20759
sS'default'
p20760
S'1'
p20761
sS'name'
p20762
S'implicit'
p20763
sS'required'
p20764
I00
sS'group_name'
p20765
S'Advanced'
p20766
sa(dp20767
S'description'
p20768
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p20769
sS'cpp_type'
p20770
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p20771
sS'default'
p20772
g3
sS'name'
p20773
S'save_in'
p20774
sS'required'
p20775
I00
sS'group_name'
p20776
S'Advanced'
p20777
sa(dp20778
S'description'
p20779
S'The seed for the master random number generator\n'
p20780
sS'cpp_type'
p20781
S'unsigned int'
p20782
sS'default'
p20783
S'0'
p20784
sS'name'
p20785
S'seed'
p20786
sS'required'
p20787
I00
sS'group_name'
p20788
S'Advanced'
p20789
sa(dp20790
S'description'
p20791
S'The Tensor to multiply the Diffusion operator by\n'
p20792
sS'cpp_type'
p20793
S'libMesh::TensorValue<double>'
p20794
sS'default'
p20795
g3
sS'name'
p20796
S'tensor_coeff'
p20797
sS'required'
p20798
I01
sS'group_name'
p20799
Nsa(dp20800
S'description'
p20801
g3
sS'cpp_type'
p20802
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20803
sS'default'
p20804
S'AnisotropicDiffusion'
p20805
sS'name'
p20806
S'type'
p20807
sS'required'
p20808
I00
sS'group_name'
p20809
Nsa(dp20810
S'description'
p20811
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20812
sS'cpp_type'
p20813
S'bool'
p20814
sS'default'
p20815
S'0'
p20816
sS'name'
p20817
S'use_displaced_mesh'
p20818
sS'required'
p20819
I00
sS'group_name'
p20820
S'Advanced'
p20821
sa(dp20822
S'description'
p20823
S'The name of the variable that this Kernel operates on\n'
p20824
sS'cpp_type'
p20825
S'NonlinearVariableName'
p20826
sS'default'
p20827
g3
sS'name'
p20828
S'variable'
p20829
sS'required'
p20830
I01
sS'group_name'
p20831
NsasS'name'
p20832
S'/Kernels/AnisotropicDiffusion'
p20833
sa(dp20834
S'description'
p20835
g3
sS'subblocks'
p20836
NsS'parameters'
p20837
(lp20838
(dp20839
S'description'
p20840
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20841
sS'cpp_type'
p20842
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p20843
sS'default'
p20844
g3
sS'name'
p20845
S'block'
p20846
sS'required'
p20847
I00
sS'group_name'
p20848
Nsa(dp20849
S'description'
p20850
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p20851
sS'cpp_type'
p20852
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20853
sS'default'
p20854
g3
sS'name'
p20855
S'control_tags'
p20856
sS'required'
p20857
I00
sS'group_name'
p20858
S'Advanced'
p20859
sa(dp20860
S'description'
p20861
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p20862
sS'cpp_type'
p20863
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p20864
sS'default'
p20865
g3
sS'name'
p20866
S'diag_save_in'
p20867
sS'required'
p20868
I00
sS'group_name'
p20869
S'Advanced'
p20870
sa(dp20871
S'description'
p20872
S'Whether or not this kernel will be used as an eigen kernel\n'
p20873
sS'cpp_type'
p20874
S'bool'
p20875
sS'default'
p20876
S'0'
p20877
sS'name'
p20878
S'eigen_kernel'
p20879
sS'required'
p20880
I00
sS'group_name'
p20881
Nsa(dp20882
S'description'
p20883
S'Set the enabled status of the MooseObject.\n'
p20884
sS'cpp_type'
p20885
S'bool'
p20886
sS'default'
p20887
S'1'
p20888
sS'name'
p20889
S'enable'
p20890
sS'required'
p20891
I00
sS'group_name'
p20892
S'Advanced'
p20893
sa(dp20894
S'description'
p20895
S'A function that describes the body force\n'
p20896
sS'cpp_type'
p20897
S'FunctionName'
p20898
sS'default'
p20899
S'1'
p20900
sS'name'
p20901
S'function'
p20902
sS'required'
p20903
I00
sS'group_name'
p20904
Nsa(dp20905
S'description'
p20906
S'Determines whether this object is calculated using an implicit or explicit form\n'
p20907
sS'cpp_type'
p20908
S'bool'
p20909
sS'default'
p20910
S'1'
p20911
sS'name'
p20912
S'implicit'
p20913
sS'required'
p20914
I00
sS'group_name'
p20915
S'Advanced'
p20916
sa(dp20917
S'description'
p20918
S'A postprocessor whose value is multiplied by the body force\n'
p20919
sS'cpp_type'
p20920
S'PostprocessorName'
p20921
sS'default'
p20922
g3
sS'name'
p20923
S'postprocessor'
p20924
sS'required'
p20925
I00
sS'group_name'
p20926
Nsa(dp20927
S'description'
p20928
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p20929
sS'cpp_type'
p20930
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p20931
sS'default'
p20932
g3
sS'name'
p20933
S'save_in'
p20934
sS'required'
p20935
I00
sS'group_name'
p20936
S'Advanced'
p20937
sa(dp20938
S'description'
p20939
S'The seed for the master random number generator\n'
p20940
sS'cpp_type'
p20941
S'unsigned int'
p20942
sS'default'
p20943
S'0'
p20944
sS'name'
p20945
S'seed'
p20946
sS'required'
p20947
I00
sS'group_name'
p20948
S'Advanced'
p20949
sa(dp20950
S'description'
p20951
g3
sS'cpp_type'
p20952
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20953
sS'default'
p20954
S'BodyForce'
p20955
sS'name'
p20956
S'type'
p20957
sS'required'
p20958
I00
sS'group_name'
p20959
Nsa(dp20960
S'description'
p20961
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20962
sS'cpp_type'
p20963
S'bool'
p20964
sS'default'
p20965
S'0'
p20966
sS'name'
p20967
S'use_displaced_mesh'
p20968
sS'required'
p20969
I00
sS'group_name'
p20970
S'Advanced'
p20971
sa(dp20972
S'description'
p20973
S'Coefficent to multiply by the body force term\n'
p20974
sS'cpp_type'
p20975
S'double'
p20976
sS'default'
p20977
S'1'
p20978
sS'name'
p20979
S'value'
p20980
sS'required'
p20981
I00
sS'group_name'
p20982
Nsa(dp20983
S'description'
p20984
S'The name of the variable that this Kernel operates on\n'
p20985
sS'cpp_type'
p20986
S'NonlinearVariableName'
p20987
sS'default'
p20988
g3
sS'name'
p20989
S'variable'
p20990
sS'required'
p20991
I01
sS'group_name'
p20992
NsasS'name'
p20993
S'/Kernels/BodyForce'
p20994
sa(dp20995
S'description'
p20996
g3
sS'subblocks'
p20997
NsS'parameters'
p20998
(lp20999
(dp21000
S'description'
p21001
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21002
sS'cpp_type'
p21003
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21004
sS'default'
p21005
g3
sS'name'
p21006
S'block'
p21007
sS'required'
p21008
I00
sS'group_name'
p21009
Nsa(dp21010
S'description'
p21011
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21012
sS'cpp_type'
p21013
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21014
sS'default'
p21015
g3
sS'name'
p21016
S'control_tags'
p21017
sS'required'
p21018
I00
sS'group_name'
p21019
S'Advanced'
p21020
sa(dp21021
S'description'
p21022
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21023
sS'cpp_type'
p21024
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21025
sS'default'
p21026
g3
sS'name'
p21027
S'diag_save_in'
p21028
sS'required'
p21029
I00
sS'group_name'
p21030
S'Advanced'
p21031
sa(dp21032
S'description'
p21033
S'Whether or not this kernel will be used as an eigen kernel\n'
p21034
sS'cpp_type'
p21035
S'bool'
p21036
sS'default'
p21037
S'0'
p21038
sS'name'
p21039
S'eigen_kernel'
p21040
sS'required'
p21041
I00
sS'group_name'
p21042
Nsa(dp21043
S'description'
p21044
S'Set the enabled status of the MooseObject.\n'
p21045
sS'cpp_type'
p21046
S'bool'
p21047
sS'default'
p21048
S'1'
p21049
sS'name'
p21050
S'enable'
p21051
sS'required'
p21052
I00
sS'group_name'
p21053
S'Advanced'
p21054
sa(dp21055
S'description'
p21056
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21057
sS'cpp_type'
p21058
S'bool'
p21059
sS'default'
p21060
S'1'
p21061
sS'name'
p21062
S'implicit'
p21063
sS'required'
p21064
I00
sS'group_name'
p21065
S'Advanced'
p21066
sa(dp21067
S'description'
p21068
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21069
sS'cpp_type'
p21070
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21071
sS'default'
p21072
g3
sS'name'
p21073
S'save_in'
p21074
sS'required'
p21075
I00
sS'group_name'
p21076
S'Advanced'
p21077
sa(dp21078
S'description'
p21079
S'The seed for the master random number generator\n'
p21080
sS'cpp_type'
p21081
S'unsigned int'
p21082
sS'default'
p21083
S'0'
p21084
sS'name'
p21085
S'seed'
p21086
sS'required'
p21087
I00
sS'group_name'
p21088
S'Advanced'
p21089
sa(dp21090
S'description'
p21091
g3
sS'cpp_type'
p21092
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21093
sS'default'
p21094
S'ConservativeAdvection'
p21095
sS'name'
p21096
S'type'
p21097
sS'required'
p21098
I00
sS'group_name'
p21099
Nsa(dp21100
S'description'
p21101
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21102
sS'cpp_type'
p21103
S'bool'
p21104
sS'default'
p21105
S'0'
p21106
sS'name'
p21107
S'use_displaced_mesh'
p21108
sS'required'
p21109
I00
sS'group_name'
p21110
S'Advanced'
p21111
sa(dp21112
S'description'
p21113
S'The name of the variable that this Kernel operates on\n'
p21114
sS'cpp_type'
p21115
S'NonlinearVariableName'
p21116
sS'default'
p21117
g3
sS'name'
p21118
S'variable'
p21119
sS'required'
p21120
I01
sS'group_name'
p21121
Nsa(dp21122
S'description'
p21123
S'Velocity vector\n'
p21124
sS'cpp_type'
p21125
S'libMesh::VectorValue<double>'
p21126
sS'default'
p21127
g3
sS'name'
p21128
S'velocity'
p21129
sS'required'
p21130
I01
sS'group_name'
p21131
NsasS'name'
p21132
S'/Kernels/ConservativeAdvection'
p21133
sa(dp21134
S'description'
p21135
g3
sS'subblocks'
p21136
NsS'parameters'
p21137
(lp21138
(dp21139
S'description'
p21140
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21141
sS'cpp_type'
p21142
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21143
sS'default'
p21144
g3
sS'name'
p21145
S'block'
p21146
sS'required'
p21147
I00
sS'group_name'
p21148
Nsa(dp21149
S'description'
p21150
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21151
sS'cpp_type'
p21152
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21153
sS'default'
p21154
g3
sS'name'
p21155
S'control_tags'
p21156
sS'required'
p21157
I00
sS'group_name'
p21158
S'Advanced'
p21159
sa(dp21160
S'description'
p21161
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21162
sS'cpp_type'
p21163
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21164
sS'default'
p21165
g3
sS'name'
p21166
S'diag_save_in'
p21167
sS'required'
p21168
I00
sS'group_name'
p21169
S'Advanced'
p21170
sa(dp21171
S'description'
p21172
S'Whether or not this kernel will be used as an eigen kernel\n'
p21173
sS'cpp_type'
p21174
S'bool'
p21175
sS'default'
p21176
S'0'
p21177
sS'name'
p21178
S'eigen_kernel'
p21179
sS'required'
p21180
I00
sS'group_name'
p21181
Nsa(dp21182
S'description'
p21183
S'Set the enabled status of the MooseObject.\n'
p21184
sS'cpp_type'
p21185
S'bool'
p21186
sS'default'
p21187
S'1'
p21188
sS'name'
p21189
S'enable'
p21190
sS'required'
p21191
I00
sS'group_name'
p21192
S'Advanced'
p21193
sa(dp21194
S'description'
p21195
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21196
sS'cpp_type'
p21197
S'bool'
p21198
sS'default'
p21199
S'1'
p21200
sS'name'
p21201
S'implicit'
p21202
sS'required'
p21203
I00
sS'group_name'
p21204
S'Advanced'
p21205
sa(dp21206
S'description'
p21207
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21208
sS'cpp_type'
p21209
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21210
sS'default'
p21211
g3
sS'name'
p21212
S'save_in'
p21213
sS'required'
p21214
I00
sS'group_name'
p21215
S'Advanced'
p21216
sa(dp21217
S'description'
p21218
S'The seed for the master random number generator\n'
p21219
sS'cpp_type'
p21220
S'unsigned int'
p21221
sS'default'
p21222
S'0'
p21223
sS'name'
p21224
S'seed'
p21225
sS'required'
p21226
I00
sS'group_name'
p21227
S'Advanced'
p21228
sa(dp21229
S'description'
p21230
g3
sS'cpp_type'
p21231
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21232
sS'default'
p21233
S'CoupledForce'
p21234
sS'name'
p21235
S'type'
p21236
sS'required'
p21237
I00
sS'group_name'
p21238
Nsa(dp21239
S'description'
p21240
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21241
sS'cpp_type'
p21242
S'bool'
p21243
sS'default'
p21244
S'0'
p21245
sS'name'
p21246
S'use_displaced_mesh'
p21247
sS'required'
p21248
I00
sS'group_name'
p21249
S'Advanced'
p21250
sa(dp21251
S'description'
p21252
S'The coupled variable which provides the force\n'
p21253
sS'cpp_type'
p21254
S'std::vector<VariableName>'
p21255
sS'default'
p21256
g3
sS'name'
p21257
S'v'
p21258
sS'required'
p21259
I01
sS'group_name'
p21260
Nsa(dp21261
S'description'
p21262
S'The name of the variable that this Kernel operates on\n'
p21263
sS'cpp_type'
p21264
S'NonlinearVariableName'
p21265
sS'default'
p21266
g3
sS'name'
p21267
S'variable'
p21268
sS'required'
p21269
I01
sS'group_name'
p21270
NsasS'name'
p21271
S'/Kernels/CoupledForce'
p21272
sa(dp21273
S'description'
p21274
S'Time derivative Kernel that acts on a coupled variable\n'
p21275
sS'subblocks'
p21276
NsS'parameters'
p21277
(lp21278
(dp21279
S'description'
p21280
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21281
sS'cpp_type'
p21282
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21283
sS'default'
p21284
g3
sS'name'
p21285
S'block'
p21286
sS'required'
p21287
I00
sS'group_name'
p21288
Nsa(dp21289
S'description'
p21290
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21291
sS'cpp_type'
p21292
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21293
sS'default'
p21294
g3
sS'name'
p21295
S'control_tags'
p21296
sS'required'
p21297
I00
sS'group_name'
p21298
S'Advanced'
p21299
sa(dp21300
S'description'
p21301
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21302
sS'cpp_type'
p21303
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21304
sS'default'
p21305
g3
sS'name'
p21306
S'diag_save_in'
p21307
sS'required'
p21308
I00
sS'group_name'
p21309
S'Advanced'
p21310
sa(dp21311
S'description'
p21312
S'Whether or not this kernel will be used as an eigen kernel\n'
p21313
sS'cpp_type'
p21314
S'bool'
p21315
sS'default'
p21316
S'0'
p21317
sS'name'
p21318
S'eigen_kernel'
p21319
sS'required'
p21320
I00
sS'group_name'
p21321
Nsa(dp21322
S'description'
p21323
S'Set the enabled status of the MooseObject.\n'
p21324
sS'cpp_type'
p21325
S'bool'
p21326
sS'default'
p21327
S'1'
p21328
sS'name'
p21329
S'enable'
p21330
sS'required'
p21331
I00
sS'group_name'
p21332
S'Advanced'
p21333
sa(dp21334
S'description'
p21335
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21336
sS'cpp_type'
p21337
S'bool'
p21338
sS'default'
p21339
S'1'
p21340
sS'name'
p21341
S'implicit'
p21342
sS'required'
p21343
I00
sS'group_name'
p21344
S'Advanced'
p21345
sa(dp21346
S'description'
p21347
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21348
sS'cpp_type'
p21349
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21350
sS'default'
p21351
g3
sS'name'
p21352
S'save_in'
p21353
sS'required'
p21354
I00
sS'group_name'
p21355
S'Advanced'
p21356
sa(dp21357
S'description'
p21358
S'The seed for the master random number generator\n'
p21359
sS'cpp_type'
p21360
S'unsigned int'
p21361
sS'default'
p21362
S'0'
p21363
sS'name'
p21364
S'seed'
p21365
sS'required'
p21366
I00
sS'group_name'
p21367
S'Advanced'
p21368
sa(dp21369
S'description'
p21370
g3
sS'cpp_type'
p21371
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21372
sS'default'
p21373
S'CoupledTimeDerivative'
p21374
sS'name'
p21375
S'type'
p21376
sS'required'
p21377
I00
sS'group_name'
p21378
Nsa(dp21379
S'description'
p21380
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21381
sS'cpp_type'
p21382
S'bool'
p21383
sS'default'
p21384
S'0'
p21385
sS'name'
p21386
S'use_displaced_mesh'
p21387
sS'required'
p21388
I00
sS'group_name'
p21389
S'Advanced'
p21390
sa(dp21391
S'description'
p21392
S'Coupled variable\n'
p21393
sS'cpp_type'
p21394
S'std::vector<VariableName>'
p21395
sS'default'
p21396
g3
sS'name'
p21397
S'v'
p21398
sS'required'
p21399
I01
sS'group_name'
p21400
Nsa(dp21401
S'description'
p21402
S'The name of the variable that this Kernel operates on\n'
p21403
sS'cpp_type'
p21404
S'NonlinearVariableName'
p21405
sS'default'
p21406
g3
sS'name'
p21407
S'variable'
p21408
sS'required'
p21409
I01
sS'group_name'
p21410
NsasS'name'
p21411
S'/Kernels/CoupledTimeDerivative'
p21412
sa(dp21413
S'description'
p21414
S'The Laplacian operator ($-\\nabla \\cdot \\nabla u$), with the weak form of $(\\nabla \\phi_i, \\nabla u_h)$.\n'
p21415
sS'subblocks'
p21416
NsS'parameters'
p21417
(lp21418
(dp21419
S'description'
p21420
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21421
sS'cpp_type'
p21422
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21423
sS'default'
p21424
g3
sS'name'
p21425
S'block'
p21426
sS'required'
p21427
I00
sS'group_name'
p21428
Nsa(dp21429
S'description'
p21430
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21431
sS'cpp_type'
p21432
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21433
sS'default'
p21434
g3
sS'name'
p21435
S'control_tags'
p21436
sS'required'
p21437
I00
sS'group_name'
p21438
S'Advanced'
p21439
sa(dp21440
S'description'
p21441
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21442
sS'cpp_type'
p21443
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21444
sS'default'
p21445
g3
sS'name'
p21446
S'diag_save_in'
p21447
sS'required'
p21448
I00
sS'group_name'
p21449
S'Advanced'
p21450
sa(dp21451
S'description'
p21452
S'Whether or not this kernel will be used as an eigen kernel\n'
p21453
sS'cpp_type'
p21454
S'bool'
p21455
sS'default'
p21456
S'0'
p21457
sS'name'
p21458
S'eigen_kernel'
p21459
sS'required'
p21460
I00
sS'group_name'
p21461
Nsa(dp21462
S'description'
p21463
S'Set the enabled status of the MooseObject.\n'
p21464
sS'cpp_type'
p21465
S'bool'
p21466
sS'default'
p21467
S'1'
p21468
sS'name'
p21469
S'enable'
p21470
sS'required'
p21471
I00
sS'group_name'
p21472
S'Advanced'
p21473
sa(dp21474
S'description'
p21475
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21476
sS'cpp_type'
p21477
S'bool'
p21478
sS'default'
p21479
S'1'
p21480
sS'name'
p21481
S'implicit'
p21482
sS'required'
p21483
I00
sS'group_name'
p21484
S'Advanced'
p21485
sa(dp21486
S'description'
p21487
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21488
sS'cpp_type'
p21489
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21490
sS'default'
p21491
g3
sS'name'
p21492
S'save_in'
p21493
sS'required'
p21494
I00
sS'group_name'
p21495
S'Advanced'
p21496
sa(dp21497
S'description'
p21498
S'The seed for the master random number generator\n'
p21499
sS'cpp_type'
p21500
S'unsigned int'
p21501
sS'default'
p21502
S'0'
p21503
sS'name'
p21504
S'seed'
p21505
sS'required'
p21506
I00
sS'group_name'
p21507
S'Advanced'
p21508
sa(dp21509
S'description'
p21510
g3
sS'cpp_type'
p21511
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21512
sS'default'
p21513
S'Diffusion'
p21514
sS'name'
p21515
S'type'
p21516
sS'required'
p21517
I00
sS'group_name'
p21518
Nsa(dp21519
S'description'
p21520
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21521
sS'cpp_type'
p21522
S'bool'
p21523
sS'default'
p21524
S'0'
p21525
sS'name'
p21526
S'use_displaced_mesh'
p21527
sS'required'
p21528
I00
sS'group_name'
p21529
S'Advanced'
p21530
sa(dp21531
S'description'
p21532
S'The name of the variable that this Kernel operates on\n'
p21533
sS'cpp_type'
p21534
S'NonlinearVariableName'
p21535
sS'default'
p21536
g3
sS'name'
p21537
S'variable'
p21538
sS'required'
p21539
I01
sS'group_name'
p21540
NsasS'name'
p21541
S'/Kernels/Diffusion'
p21542
sa(dp21543
S'description'
p21544
g3
sS'subblocks'
p21545
NsS'parameters'
p21546
(lp21547
(dp21548
S'description'
p21549
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21550
sS'cpp_type'
p21551
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21552
sS'default'
p21553
g3
sS'name'
p21554
S'block'
p21555
sS'required'
p21556
I00
sS'group_name'
p21557
Nsa(dp21558
S'description'
p21559
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21560
sS'cpp_type'
p21561
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21562
sS'default'
p21563
g3
sS'name'
p21564
S'control_tags'
p21565
sS'required'
p21566
I00
sS'group_name'
p21567
S'Advanced'
p21568
sa(dp21569
S'description'
p21570
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21571
sS'cpp_type'
p21572
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21573
sS'default'
p21574
g3
sS'name'
p21575
S'diag_save_in'
p21576
sS'required'
p21577
I00
sS'group_name'
p21578
S'Advanced'
p21579
sa(dp21580
S'description'
p21581
S'Use for eigenvalue problem (true) or source problem (false)\n'
p21582
sS'cpp_type'
p21583
S'bool'
p21584
sS'default'
p21585
S'1'
p21586
sS'name'
p21587
S'eigen'
p21588
sS'required'
p21589
I00
sS'group_name'
p21590
Nsa(dp21591
S'description'
p21592
S'Whether or not this kernel will be used as an eigen kernel\n'
p21593
sS'cpp_type'
p21594
S'bool'
p21595
sS'default'
p21596
S'0'
p21597
sS'name'
p21598
S'eigen_kernel'
p21599
sS'required'
p21600
I00
sS'group_name'
p21601
Nsa(dp21602
S'description'
p21603
S'The name of the postprocessor that provides the eigenvalue.\n'
p21604
sS'cpp_type'
p21605
S'PostprocessorName'
p21606
sS'default'
p21607
S'1'
p21608
sS'name'
p21609
S'eigen_postprocessor'
p21610
sS'required'
p21611
I00
sS'group_name'
p21612
Nsa(dp21613
S'description'
p21614
S'Set the enabled status of the MooseObject.\n'
p21615
sS'cpp_type'
p21616
S'bool'
p21617
sS'default'
p21618
S'1'
p21619
sS'name'
p21620
S'enable'
p21621
sS'required'
p21622
I00
sS'group_name'
p21623
S'Advanced'
p21624
sa(dp21625
S'description'
p21626
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21627
sS'cpp_type'
p21628
S'bool'
p21629
sS'default'
p21630
S'1'
p21631
sS'name'
p21632
S'implicit'
p21633
sS'required'
p21634
I00
sS'group_name'
p21635
S'Advanced'
p21636
sa(dp21637
S'description'
p21638
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21639
sS'cpp_type'
p21640
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21641
sS'default'
p21642
g3
sS'name'
p21643
S'save_in'
p21644
sS'required'
p21645
I00
sS'group_name'
p21646
S'Advanced'
p21647
sa(dp21648
S'description'
p21649
S'The seed for the master random number generator\n'
p21650
sS'cpp_type'
p21651
S'unsigned int'
p21652
sS'default'
p21653
S'0'
p21654
sS'name'
p21655
S'seed'
p21656
sS'required'
p21657
I00
sS'group_name'
p21658
S'Advanced'
p21659
sa(dp21660
S'description'
p21661
g3
sS'cpp_type'
p21662
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21663
sS'default'
p21664
S'MassEigenKernel'
p21665
sS'name'
p21666
S'type'
p21667
sS'required'
p21668
I00
sS'group_name'
p21669
Nsa(dp21670
S'description'
p21671
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21672
sS'cpp_type'
p21673
S'bool'
p21674
sS'default'
p21675
S'0'
p21676
sS'name'
p21677
S'use_displaced_mesh'
p21678
sS'required'
p21679
I00
sS'group_name'
p21680
S'Advanced'
p21681
sa(dp21682
S'description'
p21683
S'The name of the variable that this Kernel operates on\n'
p21684
sS'cpp_type'
p21685
S'NonlinearVariableName'
p21686
sS'default'
p21687
g3
sS'name'
p21688
S'variable'
p21689
sS'required'
p21690
I01
sS'group_name'
p21691
NsasS'name'
p21692
S'/Kernels/MassEigenKernel'
p21693
sa(dp21694
S'description'
p21695
g3
sS'subblocks'
p21696
NsS'parameters'
p21697
(lp21698
(dp21699
S'description'
p21700
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21701
sS'cpp_type'
p21702
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21703
sS'default'
p21704
g3
sS'name'
p21705
S'block'
p21706
sS'required'
p21707
I00
sS'group_name'
p21708
Nsa(dp21709
S'description'
p21710
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21711
sS'cpp_type'
p21712
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21713
sS'default'
p21714
g3
sS'name'
p21715
S'control_tags'
p21716
sS'required'
p21717
I00
sS'group_name'
p21718
S'Advanced'
p21719
sa(dp21720
S'description'
p21721
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21722
sS'cpp_type'
p21723
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21724
sS'default'
p21725
g3
sS'name'
p21726
S'diag_save_in'
p21727
sS'required'
p21728
I00
sS'group_name'
p21729
S'Advanced'
p21730
sa(dp21731
S'description'
p21732
S'Whether or not this kernel will be used as an eigen kernel\n'
p21733
sS'cpp_type'
p21734
S'bool'
p21735
sS'default'
p21736
S'0'
p21737
sS'name'
p21738
S'eigen_kernel'
p21739
sS'required'
p21740
I00
sS'group_name'
p21741
Nsa(dp21742
S'description'
p21743
S'Set the enabled status of the MooseObject.\n'
p21744
sS'cpp_type'
p21745
S'bool'
p21746
sS'default'
p21747
S'1'
p21748
sS'name'
p21749
S'enable'
p21750
sS'required'
p21751
I00
sS'group_name'
p21752
S'Advanced'
p21753
sa(dp21754
S'description'
p21755
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21756
sS'cpp_type'
p21757
S'bool'
p21758
sS'default'
p21759
S'1'
p21760
sS'name'
p21761
S'implicit'
p21762
sS'required'
p21763
I00
sS'group_name'
p21764
S'Advanced'
p21765
sa(dp21766
S'description'
p21767
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21768
sS'cpp_type'
p21769
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21770
sS'default'
p21771
g3
sS'name'
p21772
S'save_in'
p21773
sS'required'
p21774
I00
sS'group_name'
p21775
S'Advanced'
p21776
sa(dp21777
S'description'
p21778
S'The seed for the master random number generator\n'
p21779
sS'cpp_type'
p21780
S'unsigned int'
p21781
sS'default'
p21782
S'0'
p21783
sS'name'
p21784
S'seed'
p21785
sS'required'
p21786
I00
sS'group_name'
p21787
S'Advanced'
p21788
sa(dp21789
S'description'
p21790
g3
sS'cpp_type'
p21791
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21792
sS'default'
p21793
S'MassLumpedTimeDerivative'
p21794
sS'name'
p21795
S'type'
p21796
sS'required'
p21797
I00
sS'group_name'
p21798
Nsa(dp21799
S'description'
p21800
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21801
sS'cpp_type'
p21802
S'bool'
p21803
sS'default'
p21804
S'0'
p21805
sS'name'
p21806
S'use_displaced_mesh'
p21807
sS'required'
p21808
I00
sS'group_name'
p21809
S'Advanced'
p21810
sa(dp21811
S'description'
p21812
S'The name of the variable that this Kernel operates on\n'
p21813
sS'cpp_type'
p21814
S'NonlinearVariableName'
p21815
sS'default'
p21816
g3
sS'name'
p21817
S'variable'
p21818
sS'required'
p21819
I01
sS'group_name'
p21820
NsasS'name'
p21821
S'/Kernels/MassLumpedTimeDerivative'
p21822
sa(dp21823
S'description'
p21824
S'Class used for testing derivatives of a material property.\n'
p21825
sS'subblocks'
p21826
NsS'parameters'
p21827
(lp21828
(dp21829
S'description'
p21830
S'List of variables the material property depends on\n'
p21831
sS'cpp_type'
p21832
S'std::vector<VariableName>'
p21833
sS'default'
p21834
g3
sS'name'
p21835
S'args'
p21836
sS'required'
p21837
I01
sS'group_name'
p21838
Nsa(dp21839
S'description'
p21840
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21841
sS'cpp_type'
p21842
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21843
sS'default'
p21844
g3
sS'name'
p21845
S'block'
p21846
sS'required'
p21847
I00
sS'group_name'
p21848
Nsa(dp21849
S'description'
p21850
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21851
sS'cpp_type'
p21852
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21853
sS'default'
p21854
g3
sS'name'
p21855
S'control_tags'
p21856
sS'required'
p21857
I00
sS'group_name'
p21858
S'Advanced'
p21859
sa(dp21860
S'description'
p21861
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21862
sS'cpp_type'
p21863
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21864
sS'default'
p21865
g3
sS'name'
p21866
S'diag_save_in'
p21867
sS'required'
p21868
I00
sS'group_name'
p21869
S'Advanced'
p21870
sa(dp21871
S'description'
p21872
S'Whether or not this kernel will be used as an eigen kernel\n'
p21873
sS'cpp_type'
p21874
S'bool'
p21875
sS'default'
p21876
S'0'
p21877
sS'name'
p21878
S'eigen_kernel'
p21879
sS'required'
p21880
I00
sS'group_name'
p21881
Nsa(dp21882
S'description'
p21883
S'Set the enabled status of the MooseObject.\n'
p21884
sS'cpp_type'
p21885
S'bool'
p21886
sS'default'
p21887
S'1'
p21888
sS'name'
p21889
S'enable'
p21890
sS'required'
p21891
I00
sS'group_name'
p21892
S'Advanced'
p21893
sa(dp21894
S'description'
p21895
S'Determines whether this object is calculated using an implicit or explicit form\n'
p21896
sS'cpp_type'
p21897
S'bool'
p21898
sS'default'
p21899
S'1'
p21900
sS'name'
p21901
S'implicit'
p21902
sS'required'
p21903
I00
sS'group_name'
p21904
S'Advanced'
p21905
sa(dp21906
S'description'
p21907
S'Name of material property for which derivatives are to be tested.\n'
p21908
sS'cpp_type'
p21909
S'MaterialPropertyName'
p21910
sS'default'
p21911
g3
sS'name'
p21912
S'material_property'
p21913
sS'required'
p21914
I01
sS'group_name'
p21915
Nsa(dp21916
S'description'
p21917
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p21918
sS'cpp_type'
p21919
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p21920
sS'default'
p21921
g3
sS'name'
p21922
S'save_in'
p21923
sS'required'
p21924
I00
sS'group_name'
p21925
S'Advanced'
p21926
sa(dp21927
S'description'
p21928
S'The seed for the master random number generator\n'
p21929
sS'cpp_type'
p21930
S'unsigned int'
p21931
sS'default'
p21932
S'0'
p21933
sS'name'
p21934
S'seed'
p21935
sS'required'
p21936
I00
sS'group_name'
p21937
S'Advanced'
p21938
sa(dp21939
S'description'
p21940
g3
sS'cpp_type'
p21941
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21942
sS'default'
p21943
S'MaterialDerivativeTestKernel'
p21944
sS'name'
p21945
S'type'
p21946
sS'required'
p21947
I00
sS'group_name'
p21948
Nsa(dp21949
S'description'
p21950
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p21951
sS'cpp_type'
p21952
S'bool'
p21953
sS'default'
p21954
S'0'
p21955
sS'name'
p21956
S'use_displaced_mesh'
p21957
sS'required'
p21958
I00
sS'group_name'
p21959
S'Advanced'
p21960
sa(dp21961
S'description'
p21962
S'The name of the variable that this Kernel operates on\n'
p21963
sS'cpp_type'
p21964
S'NonlinearVariableName'
p21965
sS'default'
p21966
g3
sS'name'
p21967
S'variable'
p21968
sS'required'
p21969
I01
sS'group_name'
p21970
NsasS'name'
p21971
S'/Kernels/MaterialDerivativeTestKernel'
p21972
sa(dp21973
S'description'
p21974
S'Kernel that sets a zero residual.\n'
p21975
sS'subblocks'
p21976
NsS'parameters'
p21977
(lp21978
(dp21979
S'description'
p21980
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21981
sS'cpp_type'
p21982
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21983
sS'default'
p21984
g3
sS'name'
p21985
S'block'
p21986
sS'required'
p21987
I00
sS'group_name'
p21988
Nsa(dp21989
S'description'
p21990
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p21991
sS'cpp_type'
p21992
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21993
sS'default'
p21994
g3
sS'name'
p21995
S'control_tags'
p21996
sS'required'
p21997
I00
sS'group_name'
p21998
S'Advanced'
p21999
sa(dp22000
S'description'
p22001
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22002
sS'cpp_type'
p22003
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22004
sS'default'
p22005
g3
sS'name'
p22006
S'diag_save_in'
p22007
sS'required'
p22008
I00
sS'group_name'
p22009
S'Advanced'
p22010
sa(dp22011
S'description'
p22012
S'Whether or not this kernel will be used as an eigen kernel\n'
p22013
sS'cpp_type'
p22014
S'bool'
p22015
sS'default'
p22016
S'0'
p22017
sS'name'
p22018
S'eigen_kernel'
p22019
sS'required'
p22020
I00
sS'group_name'
p22021
Nsa(dp22022
S'description'
p22023
S'Set the enabled status of the MooseObject.\n'
p22024
sS'cpp_type'
p22025
S'bool'
p22026
sS'default'
p22027
S'1'
p22028
sS'name'
p22029
S'enable'
p22030
sS'required'
p22031
I00
sS'group_name'
p22032
S'Advanced'
p22033
sa(dp22034
S'description'
p22035
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22036
sS'cpp_type'
p22037
S'bool'
p22038
sS'default'
p22039
S'1'
p22040
sS'name'
p22041
S'implicit'
p22042
sS'required'
p22043
I00
sS'group_name'
p22044
S'Advanced'
p22045
sa(dp22046
S'description'
p22047
S'On diagonal Jacobian fill term to retain an invertable matrix for the preconditioner\n'
p22048
sS'cpp_type'
p22049
S'double'
p22050
sS'default'
p22051
S'1e-09'
p22052
sS'name'
p22053
S'jacobian_fill'
p22054
sS'required'
p22055
I00
sS'group_name'
p22056
Nsa(dp22057
S'description'
p22058
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22059
sS'cpp_type'
p22060
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22061
sS'default'
p22062
g3
sS'name'
p22063
S'save_in'
p22064
sS'required'
p22065
I00
sS'group_name'
p22066
S'Advanced'
p22067
sa(dp22068
S'description'
p22069
S'The seed for the master random number generator\n'
p22070
sS'cpp_type'
p22071
S'unsigned int'
p22072
sS'default'
p22073
S'0'
p22074
sS'name'
p22075
S'seed'
p22076
sS'required'
p22077
I00
sS'group_name'
p22078
S'Advanced'
p22079
sa(dp22080
S'description'
p22081
g3
sS'cpp_type'
p22082
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22083
sS'default'
p22084
S'NullKernel'
p22085
sS'name'
p22086
S'type'
p22087
sS'required'
p22088
I00
sS'group_name'
p22089
Nsa(dp22090
S'description'
p22091
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22092
sS'cpp_type'
p22093
S'bool'
p22094
sS'default'
p22095
S'0'
p22096
sS'name'
p22097
S'use_displaced_mesh'
p22098
sS'required'
p22099
I00
sS'group_name'
p22100
S'Advanced'
p22101
sa(dp22102
S'description'
p22103
S'The name of the variable that this Kernel operates on\n'
p22104
sS'cpp_type'
p22105
S'NonlinearVariableName'
p22106
sS'default'
p22107
g3
sS'name'
p22108
S'variable'
p22109
sS'required'
p22110
I01
sS'group_name'
p22111
NsasS'name'
p22112
S'/Kernels/NullKernel'
p22113
sa(dp22114
S'description'
p22115
g3
sS'subblocks'
p22116
NsS'parameters'
p22117
(lp22118
(dp22119
S'description'
p22120
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22121
sS'cpp_type'
p22122
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p22123
sS'default'
p22124
g3
sS'name'
p22125
S'block'
p22126
sS'required'
p22127
I00
sS'group_name'
p22128
Nsa(dp22129
S'description'
p22130
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22131
sS'cpp_type'
p22132
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22133
sS'default'
p22134
g3
sS'name'
p22135
S'control_tags'
p22136
sS'required'
p22137
I00
sS'group_name'
p22138
S'Advanced'
p22139
sa(dp22140
S'description'
p22141
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22142
sS'cpp_type'
p22143
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22144
sS'default'
p22145
g3
sS'name'
p22146
S'diag_save_in'
p22147
sS'required'
p22148
I00
sS'group_name'
p22149
S'Advanced'
p22150
sa(dp22151
S'description'
p22152
S'Whether or not this kernel will be used as an eigen kernel\n'
p22153
sS'cpp_type'
p22154
S'bool'
p22155
sS'default'
p22156
S'0'
p22157
sS'name'
p22158
S'eigen_kernel'
p22159
sS'required'
p22160
I00
sS'group_name'
p22161
Nsa(dp22162
S'description'
p22163
S'Set the enabled status of the MooseObject.\n'
p22164
sS'cpp_type'
p22165
S'bool'
p22166
sS'default'
p22167
S'1'
p22168
sS'name'
p22169
S'enable'
p22170
sS'required'
p22171
I00
sS'group_name'
p22172
S'Advanced'
p22173
sa(dp22174
S'description'
p22175
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22176
sS'cpp_type'
p22177
S'bool'
p22178
sS'default'
p22179
S'1'
p22180
sS'name'
p22181
S'implicit'
p22182
sS'required'
p22183
I00
sS'group_name'
p22184
S'Advanced'
p22185
sa(dp22186
S'description'
p22187
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22188
sS'cpp_type'
p22189
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22190
sS'default'
p22191
g3
sS'name'
p22192
S'save_in'
p22193
sS'required'
p22194
I00
sS'group_name'
p22195
S'Advanced'
p22196
sa(dp22197
S'description'
p22198
S'The seed for the master random number generator\n'
p22199
sS'cpp_type'
p22200
S'unsigned int'
p22201
sS'default'
p22202
S'0'
p22203
sS'name'
p22204
S'seed'
p22205
sS'required'
p22206
I00
sS'group_name'
p22207
S'Advanced'
p22208
sa(dp22209
S'description'
p22210
g3
sS'cpp_type'
p22211
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22212
sS'default'
p22213
S'Reaction'
p22214
sS'name'
p22215
S'type'
p22216
sS'required'
p22217
I00
sS'group_name'
p22218
Nsa(dp22219
S'description'
p22220
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22221
sS'cpp_type'
p22222
S'bool'
p22223
sS'default'
p22224
S'0'
p22225
sS'name'
p22226
S'use_displaced_mesh'
p22227
sS'required'
p22228
I00
sS'group_name'
p22229
S'Advanced'
p22230
sa(dp22231
S'description'
p22232
S'The name of the variable that this Kernel operates on\n'
p22233
sS'cpp_type'
p22234
S'NonlinearVariableName'
p22235
sS'default'
p22236
g3
sS'name'
p22237
S'variable'
p22238
sS'required'
p22239
I01
sS'group_name'
p22240
NsasS'name'
p22241
S'/Kernels/Reaction'
p22242
sa(dp22243
S'description'
p22244
g3
sS'subblocks'
p22245
NsS'parameters'
p22246
(lp22247
(dp22248
S'description'
p22249
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22250
sS'cpp_type'
p22251
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p22252
sS'default'
p22253
g3
sS'name'
p22254
S'block'
p22255
sS'required'
p22256
I00
sS'group_name'
p22257
Nsa(dp22258
S'description'
p22259
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22260
sS'cpp_type'
p22261
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22262
sS'default'
p22263
g3
sS'name'
p22264
S'control_tags'
p22265
sS'required'
p22266
I00
sS'group_name'
p22267
S'Advanced'
p22268
sa(dp22269
S'description'
p22270
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22271
sS'cpp_type'
p22272
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22273
sS'default'
p22274
g3
sS'name'
p22275
S'diag_save_in'
p22276
sS'required'
p22277
I00
sS'group_name'
p22278
S'Advanced'
p22279
sa(dp22280
S'description'
p22281
S'Whether or not this kernel will be used as an eigen kernel\n'
p22282
sS'cpp_type'
p22283
S'bool'
p22284
sS'default'
p22285
S'0'
p22286
sS'name'
p22287
S'eigen_kernel'
p22288
sS'required'
p22289
I00
sS'group_name'
p22290
Nsa(dp22291
S'description'
p22292
S'Set the enabled status of the MooseObject.\n'
p22293
sS'cpp_type'
p22294
S'bool'
p22295
sS'default'
p22296
S'1'
p22297
sS'name'
p22298
S'enable'
p22299
sS'required'
p22300
I00
sS'group_name'
p22301
S'Advanced'
p22302
sa(dp22303
S'description'
p22304
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22305
sS'cpp_type'
p22306
S'bool'
p22307
sS'default'
p22308
S'1'
p22309
sS'name'
p22310
S'implicit'
p22311
sS'required'
p22312
I00
sS'group_name'
p22313
S'Advanced'
p22314
sa(dp22315
S'description'
p22316
S'True for mass matrix lumping, false otherwise\n'
p22317
sS'cpp_type'
p22318
S'bool'
p22319
sS'default'
p22320
S'0'
p22321
sS'name'
p22322
S'lumping'
p22323
sS'required'
p22324
I00
sS'group_name'
p22325
Nsa(dp22326
S'description'
p22327
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22328
sS'cpp_type'
p22329
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22330
sS'default'
p22331
g3
sS'name'
p22332
S'save_in'
p22333
sS'required'
p22334
I00
sS'group_name'
p22335
S'Advanced'
p22336
sa(dp22337
S'description'
p22338
S'The seed for the master random number generator\n'
p22339
sS'cpp_type'
p22340
S'unsigned int'
p22341
sS'default'
p22342
S'0'
p22343
sS'name'
p22344
S'seed'
p22345
sS'required'
p22346
I00
sS'group_name'
p22347
S'Advanced'
p22348
sa(dp22349
S'description'
p22350
g3
sS'cpp_type'
p22351
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22352
sS'default'
p22353
S'TimeDerivative'
p22354
sS'name'
p22355
S'type'
p22356
sS'required'
p22357
I00
sS'group_name'
p22358
Nsa(dp22359
S'description'
p22360
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22361
sS'cpp_type'
p22362
S'bool'
p22363
sS'default'
p22364
S'0'
p22365
sS'name'
p22366
S'use_displaced_mesh'
p22367
sS'required'
p22368
I00
sS'group_name'
p22369
S'Advanced'
p22370
sa(dp22371
S'description'
p22372
S'The name of the variable that this Kernel operates on\n'
p22373
sS'cpp_type'
p22374
S'NonlinearVariableName'
p22375
sS'default'
p22376
g3
sS'name'
p22377
S'variable'
p22378
sS'required'
p22379
I01
sS'group_name'
p22380
NsasS'name'
p22381
S'/Kernels/TimeDerivative'
p22382
sa(dp22383
S'description'
p22384
g3
sS'subblocks'
p22385
NsS'parameters'
p22386
(lp22387
(dp22388
S'description'
p22389
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22390
sS'cpp_type'
p22391
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p22392
sS'default'
p22393
g3
sS'name'
p22394
S'block'
p22395
sS'required'
p22396
I00
sS'group_name'
p22397
Nsa(dp22398
S'description'
p22399
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22400
sS'cpp_type'
p22401
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22402
sS'default'
p22403
g3
sS'name'
p22404
S'control_tags'
p22405
sS'required'
p22406
I00
sS'group_name'
p22407
S'Advanced'
p22408
sa(dp22409
S'description'
p22410
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22411
sS'cpp_type'
p22412
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22413
sS'default'
p22414
g3
sS'name'
p22415
S'diag_save_in'
p22416
sS'required'
p22417
I00
sS'group_name'
p22418
S'Advanced'
p22419
sa(dp22420
S'description'
p22421
S'Whether or not this kernel will be used as an eigen kernel\n'
p22422
sS'cpp_type'
p22423
S'bool'
p22424
sS'default'
p22425
S'0'
p22426
sS'name'
p22427
S'eigen_kernel'
p22428
sS'required'
p22429
I00
sS'group_name'
p22430
Nsa(dp22431
S'description'
p22432
S'Set the enabled status of the MooseObject.\n'
p22433
sS'cpp_type'
p22434
S'bool'
p22435
sS'default'
p22436
S'1'
p22437
sS'name'
p22438
S'enable'
p22439
sS'required'
p22440
I00
sS'group_name'
p22441
S'Advanced'
p22442
sa(dp22443
S'description'
p22444
S'The forcing function\n'
p22445
sS'cpp_type'
p22446
S'FunctionName'
p22447
sS'default'
p22448
g3
sS'name'
p22449
S'function'
p22450
sS'required'
p22451
I01
sS'group_name'
p22452
Nsa(dp22453
S'description'
p22454
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22455
sS'cpp_type'
p22456
S'bool'
p22457
sS'default'
p22458
S'1'
p22459
sS'name'
p22460
S'implicit'
p22461
sS'required'
p22462
I00
sS'group_name'
p22463
S'Advanced'
p22464
sa(dp22465
S'description'
p22466
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p22467
sS'cpp_type'
p22468
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p22469
sS'default'
p22470
g3
sS'name'
p22471
S'save_in'
p22472
sS'required'
p22473
I00
sS'group_name'
p22474
S'Advanced'
p22475
sa(dp22476
S'description'
p22477
S'The seed for the master random number generator\n'
p22478
sS'cpp_type'
p22479
S'unsigned int'
p22480
sS'default'
p22481
S'0'
p22482
sS'name'
p22483
S'seed'
p22484
sS'required'
p22485
I00
sS'group_name'
p22486
S'Advanced'
p22487
sa(dp22488
S'description'
p22489
g3
sS'cpp_type'
p22490
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22491
sS'default'
p22492
S'UserForcingFunction'
p22493
sS'name'
p22494
S'type'
p22495
sS'required'
p22496
I00
sS'group_name'
p22497
Nsa(dp22498
S'description'
p22499
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22500
sS'cpp_type'
p22501
S'bool'
p22502
sS'default'
p22503
S'0'
p22504
sS'name'
p22505
S'use_displaced_mesh'
p22506
sS'required'
p22507
I00
sS'group_name'
p22508
S'Advanced'
p22509
sa(dp22510
S'description'
p22511
S'The name of the variable that this Kernel operates on\n'
p22512
sS'cpp_type'
p22513
S'NonlinearVariableName'
p22514
sS'default'
p22515
g3
sS'name'
p22516
S'variable'
p22517
sS'required'
p22518
I01
sS'group_name'
p22519
NsasS'name'
p22520
S'/Kernels/UserForcingFunction'
p22521
sasS'parameters'
p22522
NsS'name'
p22523
S'/Kernels'
p22524
sa(dp22525
S'description'
p22526
g3
sS'subblocks'
p22527
(lp22528
(dp22529
S'description'
p22530
g3
sS'subblocks'
p22531
NsS'parameters'
p22532
(lp22533
(dp22534
S'description'
p22535
S'A string representing the Moose Object that will be built by this Action\n'
p22536
sS'cpp_type'
p22537
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22538
sS'default'
p22539
g3
sS'name'
p22540
S'type'
p22541
sS'required'
p22542
I01
sS'group_name'
p22543
NsasS'name'
p22544
S'/Materials/*'
p22545
sa(dp22546
S'description'
p22547
g3
sS'subblocks'
p22548
NsS'parameters'
p22549
(lp22550
(dp22551
S'description'
p22552
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22553
sS'cpp_type'
p22554
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p22555
sS'default'
p22556
g3
sS'name'
p22557
S'block'
p22558
sS'required'
p22559
I00
sS'group_name'
p22560
Nsa(dp22561
S'description'
p22562
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22563
sS'cpp_type'
p22564
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p22565
sS'default'
p22566
g3
sS'name'
p22567
S'boundary'
p22568
sS'required'
p22569
I00
sS'group_name'
p22570
Nsa(dp22571
S'description'
p22572
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p22573
sS'cpp_type'
p22574
S'bool'
p22575
sS'default'
p22576
S'1'
p22577
sS'name'
p22578
S'compute'
p22579
sS'required'
p22580
I00
sS'group_name'
p22581
Nsa(dp22582
S'description'
p22583
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p22584
sS'cpp_type'
p22585
S'bool'
p22586
sS'default'
p22587
S'0'
p22588
sS'name'
p22589
S'constant_on_elem'
p22590
sS'required'
p22591
I00
sS'group_name'
p22592
S'Advanced'
p22593
sa(dp22594
S'description'
p22595
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22596
sS'cpp_type'
p22597
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22598
sS'default'
p22599
g3
sS'name'
p22600
S'control_tags'
p22601
sS'required'
p22602
I00
sS'group_name'
p22603
S'Advanced'
p22604
sa(dp22605
S'description'
p22606
S'Set the enabled status of the MooseObject.\n'
p22607
sS'cpp_type'
p22608
S'bool'
p22609
sS'default'
p22610
S'1'
p22611
sS'name'
p22612
S'enable'
p22613
sS'required'
p22614
I00
sS'group_name'
p22615
S'Advanced'
p22616
sa(dp22617
S'description'
p22618
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22619
sS'cpp_type'
p22620
S'bool'
p22621
sS'default'
p22622
S'1'
p22623
sS'name'
p22624
S'implicit'
p22625
sS'required'
p22626
I00
sS'group_name'
p22627
S'Advanced'
p22628
sa(dp22629
S'description'
p22630
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p22631
sS'cpp_type'
p22632
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22633
sS'default'
p22634
g3
sS'name'
p22635
S'output_properties'
p22636
sS'required'
p22637
I00
sS'group_name'
p22638
S'Outputs'
p22639
sa(dp22640
S'description'
p22641
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p22642
sS'cpp_type'
p22643
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p22644
sS'default'
p22645
S'none'
p22646
sS'name'
p22647
S'outputs'
p22648
sS'required'
p22649
I00
sS'group_name'
p22650
S'Outputs'
p22651
sa(dp22652
S'description'
p22653
S'The names of the properties this material will have\n'
p22654
sS'cpp_type'
p22655
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22656
sS'default'
p22657
g3
sS'name'
p22658
S'prop_names'
p22659
sS'required'
p22660
I00
sS'group_name'
p22661
Nsa(dp22662
S'description'
p22663
S'The values associated with the named properties\n'
p22664
sS'cpp_type'
p22665
S'std::__1::vector<double, std::__1::allocator<double> >'
p22666
sS'default'
p22667
g3
sS'name'
p22668
S'prop_values'
p22669
sS'required'
p22670
I00
sS'group_name'
p22671
Nsa(dp22672
S'description'
p22673
S'The seed for the master random number generator\n'
p22674
sS'cpp_type'
p22675
S'unsigned int'
p22676
sS'default'
p22677
S'0'
p22678
sS'name'
p22679
S'seed'
p22680
sS'required'
p22681
I00
sS'group_name'
p22682
S'Advanced'
p22683
sa(dp22684
S'description'
p22685
g3
sS'cpp_type'
p22686
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22687
sS'default'
p22688
S'GenericConstantMaterial'
p22689
sS'name'
p22690
S'type'
p22691
sS'required'
p22692
I00
sS'group_name'
p22693
Nsa(dp22694
S'description'
p22695
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22696
sS'cpp_type'
p22697
S'bool'
p22698
sS'default'
p22699
S'0'
p22700
sS'name'
p22701
S'use_displaced_mesh'
p22702
sS'required'
p22703
I00
sS'group_name'
p22704
S'Advanced'
p22705
sasS'name'
p22706
S'/Materials/GenericConstantMaterial'
p22707
sa(dp22708
S'description'
p22709
g3
sS'subblocks'
p22710
NsS'parameters'
p22711
(lp22712
(dp22713
S'description'
p22714
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22715
sS'cpp_type'
p22716
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p22717
sS'default'
p22718
g3
sS'name'
p22719
S'block'
p22720
sS'required'
p22721
I00
sS'group_name'
p22722
Nsa(dp22723
S'description'
p22724
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22725
sS'cpp_type'
p22726
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p22727
sS'default'
p22728
g3
sS'name'
p22729
S'boundary'
p22730
sS'required'
p22731
I00
sS'group_name'
p22732
Nsa(dp22733
S'description'
p22734
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p22735
sS'cpp_type'
p22736
S'bool'
p22737
sS'default'
p22738
S'1'
p22739
sS'name'
p22740
S'compute'
p22741
sS'required'
p22742
I00
sS'group_name'
p22743
Nsa(dp22744
S'description'
p22745
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p22746
sS'cpp_type'
p22747
S'bool'
p22748
sS'default'
p22749
S'0'
p22750
sS'name'
p22751
S'constant_on_elem'
p22752
sS'required'
p22753
I00
sS'group_name'
p22754
S'Advanced'
p22755
sa(dp22756
S'description'
p22757
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22758
sS'cpp_type'
p22759
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22760
sS'default'
p22761
g3
sS'name'
p22762
S'control_tags'
p22763
sS'required'
p22764
I00
sS'group_name'
p22765
S'Advanced'
p22766
sa(dp22767
S'description'
p22768
S'Set the enabled status of the MooseObject.\n'
p22769
sS'cpp_type'
p22770
S'bool'
p22771
sS'default'
p22772
S'1'
p22773
sS'name'
p22774
S'enable'
p22775
sS'required'
p22776
I00
sS'group_name'
p22777
S'Advanced'
p22778
sa(dp22779
S'description'
p22780
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22781
sS'cpp_type'
p22782
S'bool'
p22783
sS'default'
p22784
S'1'
p22785
sS'name'
p22786
S'implicit'
p22787
sS'required'
p22788
I00
sS'group_name'
p22789
S'Advanced'
p22790
sa(dp22791
S'description'
p22792
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p22793
sS'cpp_type'
p22794
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22795
sS'default'
p22796
g3
sS'name'
p22797
S'output_properties'
p22798
sS'required'
p22799
I00
sS'group_name'
p22800
S'Outputs'
p22801
sa(dp22802
S'description'
p22803
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p22804
sS'cpp_type'
p22805
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p22806
sS'default'
p22807
S'none'
p22808
sS'name'
p22809
S'outputs'
p22810
sS'required'
p22811
I00
sS'group_name'
p22812
S'Outputs'
p22813
sa(dp22814
S'description'
p22815
S'The seed for the master random number generator\n'
p22816
sS'cpp_type'
p22817
S'unsigned int'
p22818
sS'default'
p22819
S'0'
p22820
sS'name'
p22821
S'seed'
p22822
sS'required'
p22823
I00
sS'group_name'
p22824
S'Advanced'
p22825
sa(dp22826
S'description'
p22827
S'Name of the tensor material property to be created\n'
p22828
sS'cpp_type'
p22829
S'MaterialPropertyName'
p22830
sS'default'
p22831
g3
sS'name'
p22832
S'tensor_name'
p22833
sS'required'
p22834
I01
sS'group_name'
p22835
Nsa(dp22836
S'description'
p22837
S'Vector of values defining the constant rank two tensor\n'
p22838
sS'cpp_type'
p22839
S'std::__1::vector<double, std::__1::allocator<double> >'
p22840
sS'default'
p22841
g3
sS'name'
p22842
S'tensor_values'
p22843
sS'required'
p22844
I01
sS'group_name'
p22845
Nsa(dp22846
S'description'
p22847
g3
sS'cpp_type'
p22848
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22849
sS'default'
p22850
S'GenericConstantRankTwoTensor'
p22851
sS'name'
p22852
S'type'
p22853
sS'required'
p22854
I00
sS'group_name'
p22855
Nsa(dp22856
S'description'
p22857
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22858
sS'cpp_type'
p22859
S'bool'
p22860
sS'default'
p22861
S'0'
p22862
sS'name'
p22863
S'use_displaced_mesh'
p22864
sS'required'
p22865
I00
sS'group_name'
p22866
S'Advanced'
p22867
sasS'name'
p22868
S'/Materials/GenericConstantRankTwoTensor'
p22869
sa(dp22870
S'description'
p22871
g3
sS'subblocks'
p22872
NsS'parameters'
p22873
(lp22874
(dp22875
S'description'
p22876
S'The list of block ids (SubdomainID) that this object will be applied\n'
p22877
sS'cpp_type'
p22878
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p22879
sS'default'
p22880
g3
sS'name'
p22881
S'block'
p22882
sS'required'
p22883
I00
sS'group_name'
p22884
Nsa(dp22885
S'description'
p22886
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22887
sS'cpp_type'
p22888
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p22889
sS'default'
p22890
g3
sS'name'
p22891
S'boundary'
p22892
sS'required'
p22893
I00
sS'group_name'
p22894
Nsa(dp22895
S'description'
p22896
S'When false, MOOSE will not call compute methods on this material. The user must call computeProperties() after retrieving the Material via MaterialPropertyInterface::getMaterial(). Non-computed Materials are not sorted for dependencies.\n'
p22897
sS'cpp_type'
p22898
S'bool'
p22899
sS'default'
p22900
S'1'
p22901
sS'name'
p22902
S'compute'
p22903
sS'required'
p22904
I00
sS'group_name'
p22905
Nsa(dp22906
S'description'
p22907
S'When true, MOOSE will only call computeQpProperties() for the 0th quadrature point, and then copy that value to the other qps.\n'
p22908
sS'cpp_type'
p22909
S'bool'
p22910
sS'default'
p22911
S'0'
p22912
sS'name'
p22913
S'constant_on_elem'
p22914
sS'required'
p22915
I00
sS'group_name'
p22916
S'Advanced'
p22917
sa(dp22918
S'description'
p22919
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p22920
sS'cpp_type'
p22921
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22922
sS'default'
p22923
g3
sS'name'
p22924
S'control_tags'
p22925
sS'required'
p22926
I00
sS'group_name'
p22927
S'Advanced'
p22928
sa(dp22929
S'description'
p22930
S'Set the enabled status of the MooseObject.\n'
p22931
sS'cpp_type'
p22932
S'bool'
p22933
sS'default'
p22934
S'1'
p22935
sS'name'
p22936
S'enable'
p22937
sS'required'
p22938
I00
sS'group_name'
p22939
S'Advanced'
p22940
sa(dp22941
S'description'
p22942
S'Enable the declaration of old and older values\n'
p22943
sS'cpp_type'
p22944
S'bool'
p22945
sS'default'
p22946
S'0'
p22947
sS'name'
p22948
S'enable_stateful'
p22949
sS'required'
p22950
I00
sS'group_name'
p22951
Nsa(dp22952
S'description'
p22953
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22954
sS'cpp_type'
p22955
S'bool'
p22956
sS'default'
p22957
S'1'
p22958
sS'name'
p22959
S'implicit'
p22960
sS'required'
p22961
I00
sS'group_name'
p22962
S'Advanced'
p22963
sa(dp22964
S'description'
p22965
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p22966
sS'cpp_type'
p22967
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22968
sS'default'
p22969
g3
sS'name'
p22970
S'output_properties'
p22971
sS'required'
p22972
I00
sS'group_name'
p22973
S'Outputs'
p22974
sa(dp22975
S'description'
p22976
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p22977
sS'cpp_type'
p22978
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p22979
sS'default'
p22980
S'none'
p22981
sS'name'
p22982
S'outputs'
p22983
sS'required'
p22984
I00
sS'group_name'
p22985
S'Outputs'
p22986
sa(dp22987
S'description'
p22988
S'The names of the properties this material will have\n'
p22989
sS'cpp_type'
p22990
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22991
sS'default'
p22992
g3
sS'name'
p22993
S'prop_names'
p22994
sS'required'
p22995
I00
sS'group_name'
p22996
Nsa(dp22997
S'description'
p22998
S'The corresponding names of the functions that are going to provide the values for the variables\n'
p22999
sS'cpp_type'
p23000
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p23001
sS'default'
p23002
g3
sS'name'
p23003
S'prop_values'
p23004
sS'required'
p23005
I00
sS'group_name'
p23006
Nsa(dp23007
S'description'
p23008
S'The seed for the master random number generator\n'
p23009
sS'cpp_type'
p23010
S'unsigned int'
p23011
sS'default'
p23012
S'0'
p23013
sS'name'
p23014
S'seed'
p23015
sS'required'
p23016
I00
sS'group_name'
p23017
S'Advanced'
p23018
sa(dp23019
S'description'
p23020
g3
sS'cpp_type'
p23021
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p23022
sS'default'
p23023
S'GenericFunctionMaterial'
p23024
sS'name'
p23025
S'type'
p23026
sS'required'
p23027
I00
sS'group_name'
p23028
Nsa(dp23029
S'description'
p23030
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p23031
sS'cpp_type'
p23032
S'bool'
p23033
sS'default'
p23034
S'0'
p23035
sS'name'
p23036
S'use_displaced_mesh'
p23037
sS'required'
p23038
I00
sS'group_name'
p23039
S'Advanced'
p23040
sasS'name'
p23041
S'/Materials/GenericFunctionMaterial'
p23042
sasS'parameters'
p23043
NsS'name'
p23044
S'/Materials'
p23045
sa(dp23046
S'description'
p23047
g3
sS'subblocks'
p23048
(lp23049
(dp23050
S'description'
p23051
g3
sS'subblocks'
p23052
(lp23053
(dp23054
S'description'
p23055
S'Read a mesh from a file.\n'
p23056
sS'subblocks'
p23057
NsS'parameters'
p23058
(lp23059
(dp23060
S'name'
p23061
S'centroid_partitioner_direction'
p23062
sS'cpp_type'
p23063
S'MooseEnum'
p23064
sS'default'
p23065
g3
sS'description'
p23066
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p23067
sS'required'
p23068
I00
sS'options'
p23069
S'x y z radial'
p23070
sS'group_name'
p23071
S'Partitioning'
p23072
sa(dp23073
S'description'
p23074
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p23075
sS'cpp_type'
p23076
S'bool'
p23077
sS'default'
p23078
S'1'
p23079
sS'name'
p23080
S'construct_node_list_from_side_list'
p23081
sS'required'
p23082
I00
sS'group_name'
p23083
S'Advanced'
p23084
sa(dp23085
S'description'
p23086
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23087
sS'cpp_type'
p23088
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p23089
sS'default'
p23090
g3
sS'name'
p23091
S'control_tags'
p23092
sS'required'
p23093
I00
sS'group_name'
p23094
S'Advanced'
p23095
sa(dp23096
S'name'
p23097
S'dim'
p23098
sS'cpp_type'
p23099
S'MooseEnum'
p23100
sS'default'
p23101
S'1'
p23102
sS'description'
p23103
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n'
p23104
sS'required'
p23105
I00
sS'options'
p23106
S'1 2 3'
p23107
sS'group_name'
p23108
S'Advanced'
p23109
sa(dp23110
S'name'
p23111
S'distribution'
p23112
sS'cpp_type'
p23113
S'MooseEnum'
p23114
sS'default'
p23115
S'DEFAULT'
p23116
sS'description'
p23117
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p23118
sS'required'
p23119
I00
sS'options'
p23120
S'PARALLEL SERIAL DEFAULT'
p23121
sS'group_name'
p23122
Nsa(dp23123
S'description'
p23124
S'Set the enabled status of the MooseObject.\n'
p23125
sS'cpp_type'
p23126
S'bool'
p23127
sS'default'
p23128
S'1'
p23129
sS'name'
p23130
S'enable'
p23131
sS'required'
p23132
I00
sS'group_name'
p23133
S'Advanced'
p23134
sa(dp23135
S'description'
p23136
S'The name of the mesh file to read\n'
p23137
sS'cpp_type'
p23138
S'MeshFileName'
p23139
sS'default'
p23140
g3
sS'name'
p23141
S'file'
p23142
sS'required'
p23143
I01
sS'group_name'
p23144
Nsa(dp23145
S'description'
p23146
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p23147
sS'cpp_type'
p23148
S'bool'
p23149
sS'default'
p23150
S'0'
p23151
sS'name'
p23152
S'ghost_point_neighbors'
p23153
sS'required'
p23154
I00
sS'group_name'
p23155
S'Advanced'
p23156
sa(dp23157
S'description'
p23158
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p23159
sS'cpp_type'
p23160
S'bool'
p23161
sS'default'
p23162
S'0'
p23163
sS'name'
p23164
S'nemesis'
p23165
sS'required'
p23166
I00
sS'group_name'
p23167
S'Advanced'
p23168
sa(dp23169
S'description'
p23170
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p23171
sS'cpp_type'
p23172
S'unsigned short'
p23173
sS'default'
p23174
S'1'
p23175
sS'name'
p23176
S'num_ghosted_layers'
p23177
sS'required'
p23178
I00
sS'group_name'
p23179
S'Advanced'
p23180
sa(dp23181
S'name'
p23182
S'parallel_type'
p23183
sS'cpp_type'
p23184
S'MooseEnum'
p23185
sS'default'
p23186
S'DEFAULT'
p23187
sS'description'
p23188
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p23189
sS'required'
p23190
I00
sS'options'
p23191
S'DISTRIBUTED REPLICATED DEFAULT'
p23192
sS'group_name'
p23193
Nsa(dp23194
S'name'
p23195
S'partitioner'
p23196
sS'cpp_type'
p23197
S'MooseEnum'
p23198
sS'default'
p23199
S'default'
p23200
sS'description'
p23201
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p23202
sS'required'
p23203
I00
sS'options'
p23204
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p23205
sS'group_name'
p23206
S'Partitioning'
p23207
sa(dp23208
S'name'
p23209
S'patch_update_strategy'
p23210
sS'cpp_type'
p23211
S'MooseEnum'
p23212
sS'default'
p23213
S'never'
p23214
sS'description'
p23215
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p23216
sS'required'
p23217
I00
sS'options'
p23218
S'never always auto'
p23219
sS'group_name'
p23220
S'Advanced'
p23221
sa(dp23222
S'description'
p23223
g3
sS'cpp_type'
p23224
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p23225
sS'default'
p23226
S'FileMesh'
p23227
sS'name'
p23228
S'type'
p23229
sS'required'
p23230
I00
sS'group_name'
p23231
NsasS'name'
p23232
S'/Mesh/<type>/FileMesh'
p23233
sa(dp23234
S'description'
p23235
S'Create a line, square, or cube mesh with uniformly spaced or biased elements.\n'
p23236
sS'subblocks'
p23237
NsS'parameters'
p23238
(lp23239
(dp23240
S'description'
p23241
S'The amount by which to grow (or shrink) the cells in the x-direction.\n'
p23242
sS'cpp_type'
p23243
S'double'
p23244
sS'default'
p23245
S'1'
p23246
sS'name'
p23247
S'bias_x'
p23248
sS'required'
p23249
I00
sS'group_name'
p23250
Nsa(dp23251
S'description'
p23252
S'The amount by which to grow (or shrink) the cells in the y-direction.\n'
p23253
sS'cpp_type'
p23254
S'double'
p23255
sS'default'
p23256
S'1'
p23257
sS'name'
p23258
S'bias_y'
p23259
sS'required'
p23260
I00
sS'group_name'
p23261
Nsa(dp23262
S'description'
p23263
S'The amount by which to grow (or shrink) the cells in the z-direction.\n'
p23264
sS'cpp_type'
p23265
S'double'
p23266
sS'default'
p23267
S'1'
p23268
sS'name'
p23269
S'bias_z'
p23270
sS'required'
p23271
I00
sS'group_name'
p23272
Nsa(dp23273
S'name'
p23274
S'centroid_partitioner_direction'
p23275
sS'cpp_type'
p23276
S'MooseEnum'
p23277
sS'default'
p23278
g3
sS'description'
p23279
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p23280
sS'required'
p23281
I00
sS'options'
p23282
S'x y z radial'
p23283
sS'group_name'
p23284
S'Partitioning'
p23285
sa(dp23286
S'description'
p23287
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p23288
sS'cpp_type'
p23289
S'bool'
p23290
sS'default'
p23291
S'1'
p23292
sS'name'
p23293
S'construct_node_list_from_side_list'
p23294
sS'required'
p23295
I00
sS'group_name'
p23296
S'Advanced'
p23297
sa(dp23298
S'description'
p23299
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23300
sS'cpp_type'
p23301
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p23302
sS'default'
p23303
g3
sS'name'
p23304
S'control_tags'
p23305
sS'required'
p23306
I00
sS'group_name'
p23307
S'Advanced'
p23308
sa(dp23309
S'name'
p23310
S'dim'
p23311
sS'cpp_type'
p23312
S'MooseEnum'
p23313
sS'default'
p23314
g3
sS'description'
p23315
S'The dimension of the mesh to be generated\n'
p23316
sS'required'
p23317
I01
sS'options'
p23318
S'1 2 3'
p23319
sS'group_name'
p23320
S'Main'
p23321
sa(dp23322
S'name'
p23323
S'distribution'
p23324
sS'cpp_type'
p23325
S'MooseEnum'
p23326
sS'default'
p23327
S'DEFAULT'
p23328
sS'description'
p23329
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p23330
sS'required'
p23331
I00
sS'options'
p23332
S'PARALLEL SERIAL DEFAULT'
p23333
sS'group_name'
p23334
Nsa(dp23335
S'name'
p23336
S'elem_type'
p23337
sS'cpp_type'
p23338
S'MooseEnum'
p23339
sS'default'
p23340
g3
sS'description'
p23341
S'The type of element from libMesh to generate (default: linear element for requested dimension)\n'
p23342
sS'required'
p23343
I00
sS'options'
p23344
S'EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14'
p23345
sS'group_name'
p23346
Nsa(dp23347
S'description'
p23348
S'Set the enabled status of the MooseObject.\n'
p23349
sS'cpp_type'
p23350
S'bool'
p23351
sS'default'
p23352
S'1'
p23353
sS'name'
p23354
S'enable'
p23355
sS'required'
p23356
I00
sS'group_name'
p23357
S'Advanced'
p23358
sa(dp23359
S'description'
p23360
S'Grade mesh into boundaries according to Gauss-Lobatto quadrature spacing.\n'
p23361
sS'cpp_type'
p23362
S'bool'
p23363
sS'default'
p23364
S'0'
p23365
sS'name'
p23366
S'gauss_lobatto_grid'
p23367
sS'required'
p23368
I00
sS'group_name'
p23369
Nsa(dp23370
S'description'
p23371
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p23372
sS'cpp_type'
p23373
S'bool'
p23374
sS'default'
p23375
S'0'
p23376
sS'name'
p23377
S'ghost_point_neighbors'
p23378
sS'required'
p23379
I00
sS'group_name'
p23380
S'Advanced'
p23381
sa(dp23382
S'description'
p23383
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p23384
sS'cpp_type'
p23385
S'bool'
p23386
sS'default'
p23387
S'0'
p23388
sS'name'
p23389
S'nemesis'
p23390
sS'required'
p23391
I00
sS'group_name'
p23392
S'Advanced'
p23393
sa(dp23394
S'description'
p23395
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p23396
sS'cpp_type'
p23397
S'unsigned short'
p23398
sS'default'
p23399
S'1'
p23400
sS'name'
p23401
S'num_ghosted_layers'
p23402
sS'required'
p23403
I00
sS'group_name'
p23404
S'Advanced'
p23405
sa(dp23406
S'description'
p23407
S'Number of elements in the X direction\n'
p23408
sS'cpp_type'
p23409
S'unsigned int'
p23410
sS'default'
p23411
S'1'
p23412
sS'name'
p23413
S'nx'
p23414
sS'required'
p23415
I00
sS'group_name'
p23416
Nsa(dp23417
S'description'
p23418
S'Number of elements in the Y direction\n'
p23419
sS'cpp_type'
p23420
S'unsigned int'
p23421
sS'default'
p23422
S'1'
p23423
sS'name'
p23424
S'ny'
p23425
sS'required'
p23426
I00
sS'group_name'
p23427
Nsa(dp23428
S'description'
p23429
S'Number of elements in the Z direction\n'
p23430
sS'cpp_type'
p23431
S'unsigned int'
p23432
sS'default'
p23433
S'1'
p23434
sS'name'
p23435
S'nz'
p23436
sS'required'
p23437
I00
sS'group_name'
p23438
Nsa(dp23439
S'name'
p23440
S'parallel_type'
p23441
sS'cpp_type'
p23442
S'MooseEnum'
p23443
sS'default'
p23444
S'DEFAULT'
p23445
sS'description'
p23446
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p23447
sS'required'
p23448
I00
sS'options'
p23449
S'DISTRIBUTED REPLICATED DEFAULT'
p23450
sS'group_name'
p23451
Nsa(dp23452
S'name'
p23453
S'partitioner'
p23454
sS'cpp_type'
p23455
S'MooseEnum'
p23456
sS'default'
p23457
S'default'
p23458
sS'description'
p23459
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p23460
sS'required'
p23461
I00
sS'options'
p23462
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p23463
sS'group_name'
p23464
S'Partitioning'
p23465
sa(dp23466
S'name'
p23467
S'patch_update_strategy'
p23468
sS'cpp_type'
p23469
S'MooseEnum'
p23470
sS'default'
p23471
S'never'
p23472
sS'description'
p23473
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p23474
sS'required'
p23475
I00
sS'options'
p23476
S'never always auto'
p23477
sS'group_name'
p23478
S'Advanced'
p23479
sa(dp23480
S'description'
p23481
g3
sS'cpp_type'
p23482
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p23483
sS'default'
p23484
S'GeneratedMesh'
p23485
sS'name'
p23486
S'type'
p23487
sS'required'
p23488
I00
sS'group_name'
p23489
Nsa(dp23490
S'description'
p23491
S'Upper X Coordinate of the generated mesh\n'
p23492
sS'cpp_type'
p23493
S'double'
p23494
sS'default'
p23495
S'1'
p23496
sS'name'
p23497
S'xmax'
p23498
sS'required'
p23499
I00
sS'group_name'
p23500
Nsa(dp23501
S'description'
p23502
S'Lower X Coordinate of the generated mesh\n'
p23503
sS'cpp_type'
p23504
S'double'
p23505
sS'default'
p23506
S'0'
p23507
sS'name'
p23508
S'xmin'
p23509
sS'required'
p23510
I00
sS'group_name'
p23511
Nsa(dp23512
S'description'
p23513
S'Upper Y Coordinate of the generated mesh\n'
p23514
sS'cpp_type'
p23515
S'double'
p23516
sS'default'
p23517
S'1'
p23518
sS'name'
p23519
S'ymax'
p23520
sS'required'
p23521
I00
sS'group_name'
p23522
Nsa(dp23523
S'description'
p23524
S'Lower Y Coordinate of the generated mesh\n'
p23525
sS'cpp_type'
p23526
S'double'
p23527
sS'default'
p23528
S'0'
p23529
sS'name'
p23530
S'ymin'
p23531
sS'required'
p23532
I00
sS'group_name'
p23533
Nsa(dp23534
S'description'
p23535
S'Upper Z Coordinate of the generated mesh\n'
p23536
sS'cpp_type'
p23537
S'double'
p23538
sS'default'
p23539
S'1'
p23540
sS'name'
p23541
S'zmax'
p23542
sS'required'
p23543
I00
sS'group_name'
p23544
Nsa(dp23545
S'description'
p23546
S'Lower Z Coordinate of the generated mesh\n'
p23547
sS'cpp_type'
p23548
S'double'
p23549
sS'default'
p23550
S'0'
p23551
sS'name'
p23552
S'zmin'
p23553
sS'required'
p23554
I00
sS'group_name'
p23555
NsasS'name'
p23556
S'/Mesh/<type>/GeneratedMesh'
p23557
sa(dp23558
S'description'
p23559
S'Generated mesh with the aspect ratio of a given image stack.\n'
p23560
sS'subblocks'
p23561
NsS'parameters'
p23562
(lp23563
(dp23564
S'description'
p23565
S'The amount by which to grow (or shrink) the cells in the x-direction.\n'
p23566
sS'cpp_type'
p23567
S'double'
p23568
sS'default'
p23569
S'1'
p23570
sS'name'
p23571
S'bias_x'
p23572
sS'required'
p23573
I00
sS'group_name'
p23574
Nsa(dp23575
S'description'
p23576
S'The amount by which to grow (or shrink) the cells in the y-direction.\n'
p23577
sS'cpp_type'
p23578
S'double'
p23579
sS'default'
p23580
S'1'
p23581
sS'name'
p23582
S'bias_y'
p23583
sS'required'
p23584
I00
sS'group_name'
p23585
Nsa(dp23586
S'description'
p23587
S'The amount by which to grow (or shrink) the cells in the z-direction.\n'
p23588
sS'cpp_type'
p23589
S'double'
p23590
sS'default'
p23591
S'1'
p23592
sS'name'
p23593
S'bias_z'
p23594
sS'required'
p23595
I00
sS'group_name'
p23596
Nsa(dp23597
S'description'
p23598
S'The number of mesh cells per pixel, must be <=1 \n'
p23599
sS'cpp_type'
p23600
S'double'
p23601
sS'default'
p23602
S'1'
p23603
sS'name'
p23604
S'cells_per_pixel'
p23605
sS'required'
p23606
I00
sS'group_name'
p23607
Nsa(dp23608
S'name'
p23609
S'centroid_partitioner_direction'
p23610
sS'cpp_type'
p23611
S'MooseEnum'
p23612
sS'default'
p23613
g3
sS'description'
p23614
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p23615
sS'required'
p23616
I00
sS'options'
p23617
S'x y z radial'
p23618
sS'group_name'
p23619
S'Partitioning'
p23620
sa(dp23621
S'description'
p23622
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p23623
sS'cpp_type'
p23624
S'bool'
p23625
sS'default'
p23626
S'1'
p23627
sS'name'
p23628
S'construct_node_list_from_side_list'
p23629
sS'required'
p23630
I00
sS'group_name'
p23631
S'Advanced'
p23632
sa(dp23633
S'description'
p23634
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23635
sS'cpp_type'
p23636
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p23637
sS'default'
p23638
g3
sS'name'
p23639
S'control_tags'
p23640
sS'required'
p23641
I00
sS'group_name'
p23642
S'Advanced'
p23643
sa(dp23644
S'name'
p23645
S'dim'
p23646
sS'cpp_type'
p23647
S'MooseEnum'
p23648
sS'default'
p23649
g3
sS'description'
p23650
S'The dimension of the mesh to be generated\n'
p23651
sS'required'
p23652
I01
sS'options'
p23653
S'1 2 3'
p23654
sS'group_name'
p23655
S'Main'
p23656
sa(dp23657
S'name'
p23658
S'distribution'
p23659
sS'cpp_type'
p23660
S'MooseEnum'
p23661
sS'default'
p23662
S'DEFAULT'
p23663
sS'description'
p23664
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p23665
sS'required'
p23666
I00
sS'options'
p23667
S'PARALLEL SERIAL DEFAULT'
p23668
sS'group_name'
p23669
Nsa(dp23670
S'name'
p23671
S'elem_type'
p23672
sS'cpp_type'
p23673
S'MooseEnum'
p23674
sS'default'
p23675
g3
sS'description'
p23676
S'The type of element from libMesh to generate (default: linear element for requested dimension)\n'
p23677
sS'required'
p23678
I00
sS'options'
p23679
S'EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14'
p23680
sS'group_name'
p23681
Nsa(dp23682
S'description'
p23683
S'Set the enabled status of the MooseObject.\n'
p23684
sS'cpp_type'
p23685
S'bool'
p23686
sS'default'
p23687
S'1'
p23688
sS'name'
p23689
S'enable'
p23690
sS'required'
p23691
I00
sS'group_name'
p23692
S'Advanced'
p23693
sa(dp23694
S'description'
p23695
S'Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n'
p23696
sS'cpp_type'
p23697
S'FileName'
p23698
sS'default'
p23699
g3
sS'name'
p23700
S'file'
p23701
sS'required'
p23702
I00
sS'group_name'
p23703
Nsa(dp23704
S'description'
p23705
S"Image file base to open, use this option when a stack of images must be read (ignored if 'file' is given)\n"
p23706
sS'cpp_type'
p23707
S'FileNameNoExtension'
p23708
sS'default'
p23709
g3
sS'name'
p23710
S'file_base'
p23711
sS'required'
p23712
I00
sS'group_name'
p23713
Nsa(dp23714
S'description'
p23715
S"Range of images to analyze, used with 'file_base' (ignored if 'file' is given)\n"
p23716
sS'cpp_type'
p23717
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p23718
sS'default'
p23719
g3
sS'name'
p23720
S'file_range'
p23721
sS'required'
p23722
I00
sS'group_name'
p23723
Nsa(dp23724
S'description'
p23725
S"Suffix of the file to open, e.g. 'png'\n"
p23726
sS'cpp_type'
p23727
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p23728
sS'default'
p23729
g3
sS'name'
p23730
S'file_suffix'
p23731
sS'required'
p23732
I00
sS'group_name'
p23733
Nsa(dp23734
S'description'
p23735
S'Grade mesh into boundaries according to Gauss-Lobatto quadrature spacing.\n'
p23736
sS'cpp_type'
p23737
S'bool'
p23738
sS'default'
p23739
S'0'
p23740
sS'name'
p23741
S'gauss_lobatto_grid'
p23742
sS'required'
p23743
I00
sS'group_name'
p23744
Nsa(dp23745
S'description'
p23746
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p23747
sS'cpp_type'
p23748
S'bool'
p23749
sS'default'
p23750
S'0'
p23751
sS'name'
p23752
S'ghost_point_neighbors'
p23753
sS'required'
p23754
I00
sS'group_name'
p23755
S'Advanced'
p23756
sa(dp23757
S'description'
p23758
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p23759
sS'cpp_type'
p23760
S'bool'
p23761
sS'default'
p23762
S'0'
p23763
sS'name'
p23764
S'nemesis'
p23765
sS'required'
p23766
I00
sS'group_name'
p23767
S'Advanced'
p23768
sa(dp23769
S'description'
p23770
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p23771
sS'cpp_type'
p23772
S'unsigned short'
p23773
sS'default'
p23774
S'1'
p23775
sS'name'
p23776
S'num_ghosted_layers'
p23777
sS'required'
p23778
I00
sS'group_name'
p23779
S'Advanced'
p23780
sa(dp23781
S'description'
p23782
S'Number of elements in the X direction\n'
p23783
sS'cpp_type'
p23784
S'unsigned int'
p23785
sS'default'
p23786
S'1'
p23787
sS'name'
p23788
S'nx'
p23789
sS'required'
p23790
I00
sS'group_name'
p23791
Nsa(dp23792
S'description'
p23793
S'Number of elements in the Y direction\n'
p23794
sS'cpp_type'
p23795
S'unsigned int'
p23796
sS'default'
p23797
S'1'
p23798
sS'name'
p23799
S'ny'
p23800
sS'required'
p23801
I00
sS'group_name'
p23802
Nsa(dp23803
S'description'
p23804
S'Number of elements in the Z direction\n'
p23805
sS'cpp_type'
p23806
S'unsigned int'
p23807
sS'default'
p23808
S'1'
p23809
sS'name'
p23810
S'nz'
p23811
sS'required'
p23812
I00
sS'group_name'
p23813
Nsa(dp23814
S'name'
p23815
S'parallel_type'
p23816
sS'cpp_type'
p23817
S'MooseEnum'
p23818
sS'default'
p23819
S'DEFAULT'
p23820
sS'description'
p23821
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p23822
sS'required'
p23823
I00
sS'options'
p23824
S'DISTRIBUTED REPLICATED DEFAULT'
p23825
sS'group_name'
p23826
Nsa(dp23827
S'name'
p23828
S'partitioner'
p23829
sS'cpp_type'
p23830
S'MooseEnum'
p23831
sS'default'
p23832
S'default'
p23833
sS'description'
p23834
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p23835
sS'required'
p23836
I00
sS'options'
p23837
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p23838
sS'group_name'
p23839
S'Partitioning'
p23840
sa(dp23841
S'name'
p23842
S'patch_update_strategy'
p23843
sS'cpp_type'
p23844
S'MooseEnum'
p23845
sS'default'
p23846
S'never'
p23847
sS'description'
p23848
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p23849
sS'required'
p23850
I00
sS'options'
p23851
S'never always auto'
p23852
sS'group_name'
p23853
S'Advanced'
p23854
sa(dp23855
S'description'
p23856
S'Whether or not to scale the image so its max dimension is 1\n'
p23857
sS'cpp_type'
p23858
S'bool'
p23859
sS'default'
p23860
S'1'
p23861
sS'name'
p23862
S'scale_to_one'
p23863
sS'required'
p23864
I00
sS'group_name'
p23865
Nsa(dp23866
S'description'
p23867
g3
sS'cpp_type'
p23868
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p23869
sS'default'
p23870
S'ImageMesh'
p23871
sS'name'
p23872
S'type'
p23873
sS'required'
p23874
I00
sS'group_name'
p23875
Nsa(dp23876
S'description'
p23877
S'Upper X Coordinate of the generated mesh\n'
p23878
sS'cpp_type'
p23879
S'double'
p23880
sS'default'
p23881
S'1'
p23882
sS'name'
p23883
S'xmax'
p23884
sS'required'
p23885
I00
sS'group_name'
p23886
Nsa(dp23887
S'description'
p23888
S'Lower X Coordinate of the generated mesh\n'
p23889
sS'cpp_type'
p23890
S'double'
p23891
sS'default'
p23892
S'0'
p23893
sS'name'
p23894
S'xmin'
p23895
sS'required'
p23896
I00
sS'group_name'
p23897
Nsa(dp23898
S'description'
p23899
S'Upper Y Coordinate of the generated mesh\n'
p23900
sS'cpp_type'
p23901
S'double'
p23902
sS'default'
p23903
S'1'
p23904
sS'name'
p23905
S'ymax'
p23906
sS'required'
p23907
I00
sS'group_name'
p23908
Nsa(dp23909
S'description'
p23910
S'Lower Y Coordinate of the generated mesh\n'
p23911
sS'cpp_type'
p23912
S'double'
p23913
sS'default'
p23914
S'0'
p23915
sS'name'
p23916
S'ymin'
p23917
sS'required'
p23918
I00
sS'group_name'
p23919
Nsa(dp23920
S'description'
p23921
S'Upper Z Coordinate of the generated mesh\n'
p23922
sS'cpp_type'
p23923
S'double'
p23924
sS'default'
p23925
S'1'
p23926
sS'name'
p23927
S'zmax'
p23928
sS'required'
p23929
I00
sS'group_name'
p23930
Nsa(dp23931
S'description'
p23932
S'Lower Z Coordinate of the generated mesh\n'
p23933
sS'cpp_type'
p23934
S'double'
p23935
sS'default'
p23936
S'0'
p23937
sS'name'
p23938
S'zmin'
p23939
sS'required'
p23940
I00
sS'group_name'
p23941
NsasS'name'
p23942
S'/Mesh/<type>/ImageMesh'
p23943
sa(dp23944
S'description'
p23945
S"Creates a 2D mesh from a specified set of unique 'tiles' meshes and a two-dimensional pattern.\n"
p23946
sS'subblocks'
p23947
NsS'parameters'
p23948
(lp23949
(dp23950
S'description'
p23951
S'name of the bottom (y) boundary\n'
p23952
sS'cpp_type'
p23953
S'BoundaryName'
p23954
sS'default'
p23955
S'bottom_boundary'
p23956
sS'name'
p23957
S'bottom_boundary'
p23958
sS'required'
p23959
I00
sS'group_name'
p23960
Nsa(dp23961
S'name'
p23962
S'centroid_partitioner_direction'
p23963
sS'cpp_type'
p23964
S'MooseEnum'
p23965
sS'default'
p23966
g3
sS'description'
p23967
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p23968
sS'required'
p23969
I00
sS'options'
p23970
S'x y z radial'
p23971
sS'group_name'
p23972
S'Partitioning'
p23973
sa(dp23974
S'description'
p23975
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p23976
sS'cpp_type'
p23977
S'bool'
p23978
sS'default'
p23979
S'1'
p23980
sS'name'
p23981
S'construct_node_list_from_side_list'
p23982
sS'required'
p23983
I00
sS'group_name'
p23984
S'Advanced'
p23985
sa(dp23986
S'description'
p23987
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p23988
sS'cpp_type'
p23989
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p23990
sS'default'
p23991
g3
sS'name'
p23992
S'control_tags'
p23993
sS'required'
p23994
I00
sS'group_name'
p23995
S'Advanced'
p23996
sa(dp23997
S'name'
p23998
S'dim'
p23999
sS'cpp_type'
p24000
S'MooseEnum'
p24001
sS'default'
p24002
S'1'
p24003
sS'description'
p24004
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n'
p24005
sS'required'
p24006
I00
sS'options'
p24007
S'1 2 3'
p24008
sS'group_name'
p24009
S'Advanced'
p24010
sa(dp24011
S'name'
p24012
S'distribution'
p24013
sS'cpp_type'
p24014
S'MooseEnum'
p24015
sS'default'
p24016
S'DEFAULT'
p24017
sS'description'
p24018
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p24019
sS'required'
p24020
I00
sS'options'
p24021
S'PARALLEL SERIAL DEFAULT'
p24022
sS'group_name'
p24023
Nsa(dp24024
S'description'
p24025
S'Set the enabled status of the MooseObject.\n'
p24026
sS'cpp_type'
p24027
S'bool'
p24028
sS'default'
p24029
S'1'
p24030
sS'name'
p24031
S'enable'
p24032
sS'required'
p24033
I00
sS'group_name'
p24034
S'Advanced'
p24035
sa(dp24036
S'description'
p24037
S'The name of the mesh files to read.  They are automatically assigned ids starting with zero.\n'
p24038
sS'cpp_type'
p24039
S'std::__1::vector<MeshFileName, std::__1::allocator<MeshFileName> >'
p24040
sS'default'
p24041
g3
sS'name'
p24042
S'files'
p24043
sS'required'
p24044
I01
sS'group_name'
p24045
Nsa(dp24046
S'description'
p24047
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p24048
sS'cpp_type'
p24049
S'bool'
p24050
sS'default'
p24051
S'0'
p24052
sS'name'
p24053
S'ghost_point_neighbors'
p24054
sS'required'
p24055
I00
sS'group_name'
p24056
S'Advanced'
p24057
sa(dp24058
S'description'
p24059
S'name of the left (x) boundary\n'
p24060
sS'cpp_type'
p24061
S'BoundaryName'
p24062
sS'default'
p24063
S'left_boundary'
p24064
sS'name'
p24065
S'left_boundary'
p24066
sS'required'
p24067
I00
sS'group_name'
p24068
Nsa(dp24069
S'description'
p24070
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p24071
sS'cpp_type'
p24072
S'bool'
p24073
sS'default'
p24074
S'0'
p24075
sS'name'
p24076
S'nemesis'
p24077
sS'required'
p24078
I00
sS'group_name'
p24079
S'Advanced'
p24080
sa(dp24081
S'description'
p24082
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p24083
sS'cpp_type'
p24084
S'unsigned short'
p24085
sS'default'
p24086
S'1'
p24087
sS'name'
p24088
S'num_ghosted_layers'
p24089
sS'required'
p24090
I00
sS'group_name'
p24091
S'Advanced'
p24092
sa(dp24093
S'name'
p24094
S'parallel_type'
p24095
sS'cpp_type'
p24096
S'MooseEnum'
p24097
sS'default'
p24098
S'DEFAULT'
p24099
sS'description'
p24100
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p24101
sS'required'
p24102
I00
sS'options'
p24103
S'DISTRIBUTED REPLICATED DEFAULT'
p24104
sS'group_name'
p24105
Nsa(dp24106
S'name'
p24107
S'partitioner'
p24108
sS'cpp_type'
p24109
S'MooseEnum'
p24110
sS'default'
p24111
S'default'
p24112
sS'description'
p24113
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p24114
sS'required'
p24115
I00
sS'options'
p24116
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p24117
sS'group_name'
p24118
S'Partitioning'
p24119
sa(dp24120
S'name'
p24121
S'patch_update_strategy'
p24122
sS'cpp_type'
p24123
S'MooseEnum'
p24124
sS'default'
p24125
S'never'
p24126
sS'description'
p24127
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p24128
sS'required'
p24129
I00
sS'options'
p24130
S'never always auto'
p24131
sS'group_name'
p24132
S'Advanced'
p24133
sa(dp24134
S'description'
p24135
S'A double-indexed array starting with the upper-left corner\n'
p24136
sS'cpp_type'
p24137
S'std::__1::vector<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >'
p24138
sS'default'
p24139
g3
sS'name'
p24140
S'pattern'
p24141
sS'required'
p24142
I01
sS'group_name'
p24143
Nsa(dp24144
S'description'
p24145
S'name of the right (x) boundary\n'
p24146
sS'cpp_type'
p24147
S'BoundaryName'
p24148
sS'default'
p24149
S'right_boundary'
p24150
sS'name'
p24151
S'right_boundary'
p24152
sS'required'
p24153
I00
sS'group_name'
p24154
Nsa(dp24155
S'description'
p24156
S'name of the top (y) boundary\n'
p24157
sS'cpp_type'
p24158
S'BoundaryName'
p24159
sS'default'
p24160
S'top_boundary'
p24161
sS'name'
p24162
S'top_boundary'
p24163
sS'required'
p24164
I00
sS'group_name'
p24165
Nsa(dp24166
S'description'
p24167
g3
sS'cpp_type'
p24168
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p24169
sS'default'
p24170
S'PatternedMesh'
p24171
sS'name'
p24172
S'type'
p24173
sS'required'
p24174
I00
sS'group_name'
p24175
Nsa(dp24176
S'description'
p24177
S'The tile width in the x direction\n'
p24178
sS'cpp_type'
p24179
S'double'
p24180
sS'default'
p24181
S'0'
p24182
sS'name'
p24183
S'x_width'
p24184
sS'required'
p24185
I00
sS'group_name'
p24186
Nsa(dp24187
S'description'
p24188
S'The tile width in the y direction\n'
p24189
sS'cpp_type'
p24190
S'double'
p24191
sS'default'
p24192
S'0'
p24193
sS'name'
p24194
S'y_width'
p24195
sS'required'
p24196
I00
sS'group_name'
p24197
Nsa(dp24198
S'description'
p24199
S'The tile width in the z direction\n'
p24200
sS'cpp_type'
p24201
S'double'
p24202
sS'default'
p24203
S'0'
p24204
sS'name'
p24205
S'z_width'
p24206
sS'required'
p24207
I00
sS'group_name'
p24208
NsasS'name'
p24209
S'/Mesh/<type>/PatternedMesh'
p24210
sa(dp24211
S'description'
p24212
S'Reads in all of the given meshes and stitches them all together into one mesh.\n'
p24213
sS'subblocks'
p24214
NsS'parameters'
p24215
(lp24216
(dp24217
S'name'
p24218
S'centroid_partitioner_direction'
p24219
sS'cpp_type'
p24220
S'MooseEnum'
p24221
sS'default'
p24222
g3
sS'description'
p24223
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p24224
sS'required'
p24225
I00
sS'options'
p24226
S'x y z radial'
p24227
sS'group_name'
p24228
S'Partitioning'
p24229
sa(dp24230
S'description'
p24231
S"Whether or not to erase the boundary IDs after they've been used for stitching.\n"
p24232
sS'cpp_type'
p24233
S'bool'
p24234
sS'default'
p24235
S'1'
p24236
sS'name'
p24237
S'clear_stitched_boundary_ids'
p24238
sS'required'
p24239
I00
sS'group_name'
p24240
Nsa(dp24241
S'description'
p24242
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p24243
sS'cpp_type'
p24244
S'bool'
p24245
sS'default'
p24246
S'1'
p24247
sS'name'
p24248
S'construct_node_list_from_side_list'
p24249
sS'required'
p24250
I00
sS'group_name'
p24251
S'Advanced'
p24252
sa(dp24253
S'description'
p24254
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24255
sS'cpp_type'
p24256
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p24257
sS'default'
p24258
g3
sS'name'
p24259
S'control_tags'
p24260
sS'required'
p24261
I00
sS'group_name'
p24262
S'Advanced'
p24263
sa(dp24264
S'name'
p24265
S'dim'
p24266
sS'cpp_type'
p24267
S'MooseEnum'
p24268
sS'default'
p24269
S'1'
p24270
sS'description'
p24271
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n'
p24272
sS'required'
p24273
I00
sS'options'
p24274
S'1 2 3'
p24275
sS'group_name'
p24276
S'Advanced'
p24277
sa(dp24278
S'name'
p24279
S'distribution'
p24280
sS'cpp_type'
p24281
S'MooseEnum'
p24282
sS'default'
p24283
S'DEFAULT'
p24284
sS'description'
p24285
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p24286
sS'required'
p24287
I00
sS'options'
p24288
S'PARALLEL SERIAL DEFAULT'
p24289
sS'group_name'
p24290
Nsa(dp24291
S'description'
p24292
S'Set the enabled status of the MooseObject.\n'
p24293
sS'cpp_type'
p24294
S'bool'
p24295
sS'default'
p24296
S'1'
p24297
sS'name'
p24298
S'enable'
p24299
sS'required'
p24300
I00
sS'group_name'
p24301
S'Advanced'
p24302
sa(dp24303
S'description'
p24304
S"The name of the mesh files to read.  These mesh files will be 'stitched' into the current mesh in this order.\n"
p24305
sS'cpp_type'
p24306
S'std::__1::vector<MeshFileName, std::__1::allocator<MeshFileName> >'
p24307
sS'default'
p24308
g3
sS'name'
p24309
S'files'
p24310
sS'required'
p24311
I01
sS'group_name'
p24312
Nsa(dp24313
S'description'
p24314
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p24315
sS'cpp_type'
p24316
S'bool'
p24317
sS'default'
p24318
S'0'
p24319
sS'name'
p24320
S'ghost_point_neighbors'
p24321
sS'required'
p24322
I00
sS'group_name'
p24323
S'Advanced'
p24324
sa(dp24325
S'description'
p24326
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p24327
sS'cpp_type'
p24328
S'bool'
p24329
sS'default'
p24330
S'0'
p24331
sS'name'
p24332
S'nemesis'
p24333
sS'required'
p24334
I00
sS'group_name'
p24335
S'Advanced'
p24336
sa(dp24337
S'description'
p24338
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p24339
sS'cpp_type'
p24340
S'unsigned short'
p24341
sS'default'
p24342
S'1'
p24343
sS'name'
p24344
S'num_ghosted_layers'
p24345
sS'required'
p24346
I00
sS'group_name'
p24347
S'Advanced'
p24348
sa(dp24349
S'name'
p24350
S'parallel_type'
p24351
sS'cpp_type'
p24352
S'MooseEnum'
p24353
sS'default'
p24354
S'DEFAULT'
p24355
sS'description'
p24356
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p24357
sS'required'
p24358
I00
sS'options'
p24359
S'DISTRIBUTED REPLICATED DEFAULT'
p24360
sS'group_name'
p24361
Nsa(dp24362
S'name'
p24363
S'partitioner'
p24364
sS'cpp_type'
p24365
S'MooseEnum'
p24366
sS'default'
p24367
S'default'
p24368
sS'description'
p24369
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p24370
sS'required'
p24371
I00
sS'options'
p24372
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p24373
sS'group_name'
p24374
S'Partitioning'
p24375
sa(dp24376
S'name'
p24377
S'patch_update_strategy'
p24378
sS'cpp_type'
p24379
S'MooseEnum'
p24380
sS'default'
p24381
S'never'
p24382
sS'description'
p24383
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p24384
sS'required'
p24385
I00
sS'options'
p24386
S'never always auto'
p24387
sS'group_name'
p24388
S'Advanced'
p24389
sa(dp24390
S'description'
p24391
S'Pairs of boundary names (one after the other) to stitch together for each step.\n'
p24392
sS'cpp_type'
p24393
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p24394
sS'default'
p24395
g3
sS'name'
p24396
S'stitch_boundaries'
p24397
sS'required'
p24398
I01
sS'group_name'
p24399
Nsa(dp24400
S'description'
p24401
g3
sS'cpp_type'
p24402
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p24403
sS'default'
p24404
S'StitchedMesh'
p24405
sS'name'
p24406
S'type'
p24407
sS'required'
p24408
I00
sS'group_name'
p24409
NsasS'name'
p24410
S'/Mesh/<type>/StitchedMesh'
p24411
sa(dp24412
S'description'
p24413
S'Use the supplied mesh and create a tiled grid by repeating this mesh in the x,y, and z directions.\n'
p24414
sS'subblocks'
p24415
NsS'parameters'
p24416
(lp24417
(dp24418
S'description'
p24419
S'name of the back (z) boundary\n'
p24420
sS'cpp_type'
p24421
S'BoundaryName'
p24422
sS'default'
p24423
S'back_boundary'
p24424
sS'name'
p24425
S'back_boundary'
p24426
sS'required'
p24427
I00
sS'group_name'
p24428
Nsa(dp24429
S'description'
p24430
S'name of the bottom (y) boundary\n'
p24431
sS'cpp_type'
p24432
S'BoundaryName'
p24433
sS'default'
p24434
S'bottom_boundary'
p24435
sS'name'
p24436
S'bottom_boundary'
p24437
sS'required'
p24438
I00
sS'group_name'
p24439
Nsa(dp24440
S'name'
p24441
S'centroid_partitioner_direction'
p24442
sS'cpp_type'
p24443
S'MooseEnum'
p24444
sS'default'
p24445
g3
sS'description'
p24446
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p24447
sS'required'
p24448
I00
sS'options'
p24449
S'x y z radial'
p24450
sS'group_name'
p24451
S'Partitioning'
p24452
sa(dp24453
S'description'
p24454
S'Whether or not to generate nodesets from the sidesets (usually a good idea).\n'
p24455
sS'cpp_type'
p24456
S'bool'
p24457
sS'default'
p24458
S'1'
p24459
sS'name'
p24460
S'construct_node_list_from_side_list'
p24461
sS'required'
p24462
I00
sS'group_name'
p24463
S'Advanced'
p24464
sa(dp24465
S'description'
p24466
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24467
sS'cpp_type'
p24468
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p24469
sS'default'
p24470
g3
sS'name'
p24471
S'control_tags'
p24472
sS'required'
p24473
I00
sS'group_name'
p24474
S'Advanced'
p24475
sa(dp24476
S'name'
p24477
S'dim'
p24478
sS'cpp_type'
p24479
S'MooseEnum'
p24480
sS'default'
p24481
S'1'
p24482
sS'description'
p24483
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected. In particular you must supply this for GMSH meshes. Note: This is completely ignored for ExodusII meshes!\n'
p24484
sS'required'
p24485
I00
sS'options'
p24486
S'1 2 3'
p24487
sS'group_name'
p24488
S'Advanced'
p24489
sa(dp24490
S'name'
p24491
S'distribution'
p24492
sS'cpp_type'
p24493
S'MooseEnum'
p24494
sS'default'
p24495
S'DEFAULT'
p24496
sS'description'
p24497
S'PARALLEL: Always use libMesh::DistributedMesh SERIAL: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line The distribution flag is deprecated, use parallel_type={DISTRIBUTED,REPLICATED} instead.\n'
p24498
sS'required'
p24499
I00
sS'options'
p24500
S'PARALLEL SERIAL DEFAULT'
p24501
sS'group_name'
p24502
Nsa(dp24503
S'description'
p24504
S'Set the enabled status of the MooseObject.\n'
p24505
sS'cpp_type'
p24506
S'bool'
p24507
sS'default'
p24508
S'1'
p24509
sS'name'
p24510
S'enable'
p24511
sS'required'
p24512
I00
sS'group_name'
p24513
S'Advanced'
p24514
sa(dp24515
S'description'
p24516
S'The name of the mesh file to read\n'
p24517
sS'cpp_type'
p24518
S'MeshFileName'
p24519
sS'default'
p24520
g3
sS'name'
p24521
S'file'
p24522
sS'required'
p24523
I01
sS'group_name'
p24524
Nsa(dp24525
S'description'
p24526
S'name of the front (z) boundary\n'
p24527
sS'cpp_type'
p24528
S'BoundaryName'
p24529
sS'default'
p24530
S'front_boundary'
p24531
sS'name'
p24532
S'front_boundary'
p24533
sS'required'
p24534
I00
sS'group_name'
p24535
Nsa(dp24536
S'description'
p24537
S'Boolean to specify whether or not all point neighbors are ghosted when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p24538
sS'cpp_type'
p24539
S'bool'
p24540
sS'default'
p24541
S'0'
p24542
sS'name'
p24543
S'ghost_point_neighbors'
p24544
sS'required'
p24545
I00
sS'group_name'
p24546
S'Advanced'
p24547
sa(dp24548
S'description'
p24549
S'name of the left (x) boundary\n'
p24550
sS'cpp_type'
p24551
S'BoundaryName'
p24552
sS'default'
p24553
S'left_boundary'
p24554
sS'name'
p24555
S'left_boundary'
p24556
sS'required'
p24557
I00
sS'group_name'
p24558
Nsa(dp24559
S'description'
p24560
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p24561
sS'cpp_type'
p24562
S'bool'
p24563
sS'default'
p24564
S'0'
p24565
sS'name'
p24566
S'nemesis'
p24567
sS'required'
p24568
I00
sS'group_name'
p24569
S'Advanced'
p24570
sa(dp24571
S'description'
p24572
S'Parameter to specify the number of geometric element layers that will be available when DistributedMesh is used. Value is ignored in ReplicatedMesh mode\n'
p24573
sS'cpp_type'
p24574
S'unsigned short'
p24575
sS'default'
p24576
S'1'
p24577
sS'name'
p24578
S'num_ghosted_layers'
p24579
sS'required'
p24580
I00
sS'group_name'
p24581
S'Advanced'
p24582
sa(dp24583
S'name'
p24584
S'parallel_type'
p24585
sS'cpp_type'
p24586
S'MooseEnum'
p24587
sS'default'
p24588
S'DEFAULT'
p24589
sS'description'
p24590
S'DISTRIBUTED: Always use libMesh::DistributedMesh REPLICATED: Always use libMesh::ReplicatedMesh DEFAULT: Use libMesh::ReplicatedMesh unless --distributed-mesh is specified on the command line\n'
p24591
sS'required'
p24592
I00
sS'options'
p24593
S'DISTRIBUTED REPLICATED DEFAULT'
p24594
sS'group_name'
p24595
Nsa(dp24596
S'name'
p24597
S'partitioner'
p24598
sS'cpp_type'
p24599
S'MooseEnum'
p24600
sS'default'
p24601
S'default'
p24602
sS'description'
p24603
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p24604
sS'required'
p24605
I00
sS'options'
p24606
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p24607
sS'group_name'
p24608
S'Partitioning'
p24609
sa(dp24610
S'name'
p24611
S'patch_update_strategy'
p24612
sS'cpp_type'
p24613
S'MooseEnum'
p24614
sS'default'
p24615
S'never'
p24616
sS'description'
p24617
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p24618
sS'required'
p24619
I00
sS'options'
p24620
S'never always auto'
p24621
sS'group_name'
p24622
S'Advanced'
p24623
sa(dp24624
S'description'
p24625
S'name of the right (x) boundary\n'
p24626
sS'cpp_type'
p24627
S'BoundaryName'
p24628
sS'default'
p24629
S'right_boundary'
p24630
sS'name'
p24631
S'right_boundary'
p24632
sS'required'
p24633
I00
sS'group_name'
p24634
Nsa(dp24635
S'description'
p24636
S'name of the top (y) boundary\n'
p24637
sS'cpp_type'
p24638
S'BoundaryName'
p24639
sS'default'
p24640
S'top_boundary'
p24641
sS'name'
p24642
S'top_boundary'
p24643
sS'required'
p24644
I00
sS'group_name'
p24645
Nsa(dp24646
S'description'
p24647
g3
sS'cpp_type'
p24648
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p24649
sS'default'
p24650
S'TiledMesh'
p24651
sS'name'
p24652
S'type'
p24653
sS'required'
p24654
I00
sS'group_name'
p24655
Nsa(dp24656
S'description'
p24657
S'Number of tiles to stitch together (left to right) in the x-direction\n'
p24658
sS'cpp_type'
p24659
S'unsigned int'
p24660
sS'default'
p24661
S'1'
p24662
sS'name'
p24663
S'x_tiles'
p24664
sS'required'
p24665
I00
sS'group_name'
p24666
Nsa(dp24667
S'description'
p24668
S'The tile width in the x direction\n'
p24669
sS'cpp_type'
p24670
S'double'
p24671
sS'default'
p24672
S'0'
p24673
sS'name'
p24674
S'x_width'
p24675
sS'required'
p24676
I00
sS'group_name'
p24677
Nsa(dp24678
S'description'
p24679
S'Number of tiles to stitch together (top to bottom) in the y-direction\n'
p24680
sS'cpp_type'
p24681
S'unsigned int'
p24682
sS'default'
p24683
S'1'
p24684
sS'name'
p24685
S'y_tiles'
p24686
sS'required'
p24687
I00
sS'group_name'
p24688
Nsa(dp24689
S'description'
p24690
S'The tile width in the y direction\n'
p24691
sS'cpp_type'
p24692
S'double'
p24693
sS'default'
p24694
S'0'
p24695
sS'name'
p24696
S'y_width'
p24697
sS'required'
p24698
I00
sS'group_name'
p24699
Nsa(dp24700
S'description'
p24701
S'Number of tiles to stitch together (front to back) in the z-direction\n'
p24702
sS'cpp_type'
p24703
S'unsigned int'
p24704
sS'default'
p24705
S'1'
p24706
sS'name'
p24707
S'z_tiles'
p24708
sS'required'
p24709
I00
sS'group_name'
p24710
Nsa(dp24711
S'description'
p24712
S'The tile width in the z direction\n'
p24713
sS'cpp_type'
p24714
S'double'
p24715
sS'default'
p24716
S'0'
p24717
sS'name'
p24718
S'z_width'
p24719
sS'required'
p24720
I00
sS'group_name'
p24721
NsasS'name'
p24722
S'/Mesh/<type>/TiledMesh'
p24723
sasS'parameters'
p24724
NsS'name'
p24725
S'/Mesh/<type>'
p24726
sa(dp24727
S'description'
p24728
g3
sS'subblocks'
p24729
(lp24730
(dp24731
S'description'
p24732
g3
sS'subblocks'
p24733
NsS'parameters'
p24734
(lp24735
(dp24736
S'description'
p24737
S'Master side ID\n'
p24738
sS'cpp_type'
p24739
S'BoundaryName'
p24740
sS'default'
p24741
g3
sS'name'
p24742
S'master'
p24743
sS'required'
p24744
I01
sS'group_name'
p24745
Nsa(dp24746
S'description'
p24747
S'Slave side ID\n'
p24748
sS'cpp_type'
p24749
S'BoundaryName'
p24750
sS'default'
p24751
g3
sS'name'
p24752
S'slave'
p24753
sS'required'
p24754
I01
sS'group_name'
p24755
Nsa(dp24756
S'description'
p24757
S'Subdomain name that is the mortar interface\n'
p24758
sS'cpp_type'
p24759
S'SubdomainName'
p24760
sS'default'
p24761
g3
sS'name'
p24762
S'subdomain'
p24763
sS'required'
p24764
I01
sS'group_name'
p24765
NsasS'name'
p24766
S'/Mesh/MortarInterfaces/*'
p24767
sasS'parameters'
p24768
NsS'name'
p24769
S'/Mesh/MortarInterfaces'
p24770
sa(dp24771
S'description'
p24772
g3
sS'subblocks'
p24773
(lp24774
(dp24775
S'description'
p24776
g3
sS'subblocks'
p24777
(lp24778
(dp24779
S'description'
p24780
g3
sS'subblocks'
p24781
NsS'parameters'
p24782
(lp24783
(dp24784
S'name'
p24785
S'centroid_partitioner_direction'
p24786
sS'cpp_type'
p24787
S'MooseEnum'
p24788
sS'default'
p24789
g3
sS'description'
p24790
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p24791
sS'required'
p24792
I00
sS'options'
p24793
S'x y z radial'
p24794
sS'group_name'
p24795
Nsa(dp24796
S'description'
p24797
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p24798
sS'cpp_type'
p24799
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p24800
sS'default'
p24801
g3
sS'name'
p24802
S'control_tags'
p24803
sS'required'
p24804
I00
sS'group_name'
p24805
S'Advanced'
p24806
sa(dp24807
S'description'
p24808
S'Set the enabled status of the MooseObject.\n'
p24809
sS'cpp_type'
p24810
S'bool'
p24811
sS'default'
p24812
S'1'
p24813
sS'name'
p24814
S'enable'
p24815
sS'required'
p24816
I00
sS'group_name'
p24817
S'Advanced'
p24818
sa(dp24819
S'name'
p24820
S'partitioner'
p24821
sS'cpp_type'
p24822
S'MooseEnum'
p24823
sS'default'
p24824
g3
sS'description'
p24825
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p24826
sS'required'
p24827
I01
sS'options'
p24828
S'metis parmetis linear centroid hilbert_sfc morton_sfc'
p24829
sS'group_name'
p24830
Nsa(dp24831
S'description'
p24832
g3
sS'cpp_type'
p24833
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p24834
sS'default'
p24835
S'LibmeshPartitioner'
p24836
sS'name'
p24837
S'type'
p24838
sS'required'
p24839
I00
sS'group_name'
p24840
NsasS'name'
p24841
S'/Mesh/Partitioner/<type>/LibmeshPartitioner'
p24842
sasS'parameters'
p24843
NsS'name'
p24844
S'/Mesh/Partitioner/<type>'
p24845
sasS'parameters'
p24846
(lp24847
(dp24848
S'description'
p24849
S'A string representing the Moose Object that will be built by this Action\n'
p24850
sS'cpp_type'
p24851
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p24852
sS'default'
p24853
g3
sS'name'
p24854
S'type'
p24855
sS'required'
p24856
I01
sS'group_name'
p24857
NsasS'name'
p24858
S'/Mesh/Partitioner'
p24859
sasS'parameters'
p24860
(lp24861
(dp24862
S'description'
p24863
S'The variables corresponding to the x y z displacements of the mesh.  If this is provided then the displacements will be taken into account during the computation.\n'
p24864
sS'cpp_type'
p24865
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p24866
sS'default'
p24867
g3
sS'name'
p24868
S'displacements'
p24869
sS'required'
p24870
I00
sS'group_name'
p24871
Nsa(dp24872
S'description'
p24873
S'IDs of the block id/name pairs\n'
p24874
sS'cpp_type'
p24875
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p24876
sS'default'
p24877
g3
sS'name'
p24878
S'block_id'
p24879
sS'required'
p24880
I00
sS'group_name'
p24881
S'Add Names'
p24882
sa(dp24883
S'description'
p24884
S'Names of the block id/name pairs (must correspond with "block_id"\n'
p24885
sS'cpp_type'
p24886
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p24887
sS'default'
p24888
g3
sS'name'
p24889
S'block_name'
p24890
sS'required'
p24891
I00
sS'group_name'
p24892
S'Add Names'
p24893
sa(dp24894
S'description'
p24895
S'IDs of the boundary id/name pairs\n'
p24896
sS'cpp_type'
p24897
S'std::__1::vector<short, std::__1::allocator<short> >'
p24898
sS'default'
p24899
g3
sS'name'
p24900
S'boundary_id'
p24901
sS'required'
p24902
I00
sS'group_name'
p24903
S'Add Names'
p24904
sa(dp24905
S'description'
p24906
S'Names of the boundary id/name pairs (must correspond with "boundary_id"\n'
p24907
sS'cpp_type'
p24908
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p24909
sS'default'
p24910
g3
sS'name'
p24911
S'boundary_name'
p24912
sS'required'
p24913
I00
sS'group_name'
p24914
S'Add Names'
p24915
sa(dp24916
S'description'
p24917
S'If true, construct side lists from the nodesets in the mesh (i.e. if every node on a give side is in a nodeset then add that side to a sideset\n'
p24918
sS'cpp_type'
p24919
S'bool'
p24920
sS'default'
p24921
S'0'
p24922
sS'name'
p24923
S'construct_side_list_from_node_list'
p24924
sS'required'
p24925
I00
sS'group_name'
p24926
S'Advanced'
p24927
sa(dp24928
S'description'
p24929
S'Boundaries to be ghosted if using Nemesis\n'
p24930
sS'cpp_type'
p24931
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p24932
sS'default'
p24933
g3
sS'name'
p24934
S'ghosted_boundaries'
p24935
sS'required'
p24936
I00
sS'group_name'
p24937
S'Advanced'
p24938
sa(dp24939
S'description'
p24940
S"If you are using ghosted boundaries you will want to set this value to a vector of amounts to inflate the bounding boxes by.  ie if you are running a 3D problem you might set it to '0.2 0.1 0.4'\n"
p24941
sS'cpp_type'
p24942
S'std::__1::vector<double, std::__1::allocator<double> >'
p24943
sS'default'
p24944
g3
sS'name'
p24945
S'ghosted_boundaries_inflation'
p24946
sS'required'
p24947
I00
sS'group_name'
p24948
S'Advanced'
p24949
sa(dp24950
S'description'
p24951
S'The number of nodes to consider in the NearestNode neighborhood.\n'
p24952
sS'cpp_type'
p24953
S'unsigned int'
p24954
sS'default'
p24955
S'40'
p24956
sS'name'
p24957
S'patch_size'
p24958
sS'required'
p24959
I00
sS'group_name'
p24960
S'Advanced'
p24961
sa(dp24962
S'description'
p24963
S'Converts a first order mesh to a second order mesh.  Note: This is NOT needed if you are reading an actual first order mesh.\n'
p24964
sS'cpp_type'
p24965
S'bool'
p24966
sS'default'
p24967
S'0'
p24968
sS'name'
p24969
S'second_order'
p24970
sS'required'
p24971
I00
sS'group_name'
p24972
S'Advanced'
p24973
sa(dp24974
S'description'
p24975
S"If true the mesh won't be partitioned. This may cause large load imbalanced but is currently required if you have a simulation containing uniform refinement, adaptivity and stateful material properties\n"
p24976
sS'cpp_type'
p24977
S'bool'
p24978
sS'default'
p24979
S'0'
p24980
sS'name'
p24981
S'skip_partitioning'
p24982
sS'required'
p24983
I00
sS'group_name'
p24984
S'Advanced'
p24985
sa(dp24986
S'description'
p24987
S'A string representing the Moose Object that will be built by this Action\n'
p24988
sS'cpp_type'
p24989
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p24990
sS'default'
p24991
S'FileMesh'
p24992
sS'name'
p24993
S'type'
p24994
sS'required'
p24995
I01
sS'group_name'
p24996
Nsa(dp24997
S'description'
p24998
S'Specify the level of uniform refinement applied to the initial mesh\n'
p24999
sS'cpp_type'
p25000
S'unsigned int'
p25001
sS'default'
p25002
S'0'
p25003
sS'name'
p25004
S'uniform_refine'
p25005
sS'required'
p25006
I00
sS'group_name'
p25007
NsasS'name'
p25008
S'/Mesh'
p25009
sa(dp25010
S'description'
p25011
g3
sS'subblocks'
p25012
(lp25013
(dp25014
S'description'
p25015
g3
sS'subblocks'
p25016
NsS'parameters'
p25017
(lp25018
(dp25019
S'description'
p25020
S'A string representing the Moose Object that will be built by this Action\n'
p25021
sS'cpp_type'
p25022
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25023
sS'default'
p25024
g3
sS'name'
p25025
S'type'
p25026
sS'required'
p25027
I01
sS'group_name'
p25028
NsasS'name'
p25029
S'/MeshModifiers/*'
p25030
sa(dp25031
S'description'
p25032
g3
sS'subblocks'
p25033
NsS'parameters'
p25034
(lp25035
(dp25036
S'description'
p25037
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25038
sS'cpp_type'
p25039
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25040
sS'default'
p25041
g3
sS'name'
p25042
S'control_tags'
p25043
sS'required'
p25044
I00
sS'group_name'
p25045
S'Advanced'
p25046
sa(dp25047
S'description'
p25048
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25049
sS'cpp_type'
p25050
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25051
sS'default'
p25052
g3
sS'name'
p25053
S'depends_on'
p25054
sS'required'
p25055
I00
sS'group_name'
p25056
Nsa(dp25057
S'description'
p25058
S'Set the enabled status of the MooseObject.\n'
p25059
sS'cpp_type'
p25060
S'bool'
p25061
sS'default'
p25062
S'1'
p25063
sS'name'
p25064
S'enable'
p25065
sS'required'
p25066
I00
sS'group_name'
p25067
S'Advanced'
p25068
sa(dp25069
S'description'
p25070
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p25071
sS'cpp_type'
p25072
S'bool'
p25073
sS'default'
p25074
S'0'
p25075
sS'name'
p25076
S'fixed_normal'
p25077
sS'required'
p25078
I00
sS'group_name'
p25079
Nsa(dp25080
S'description'
p25081
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25082
sS'cpp_type'
p25083
S'bool'
p25084
sS'default'
p25085
S'0'
p25086
sS'name'
p25087
S'force_prepare'
p25088
sS'required'
p25089
I00
sS'group_name'
p25090
Nsa(dp25091
S'description'
p25092
g3
sS'cpp_type'
p25093
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25094
sS'default'
p25095
S'AddAllSideSetsByNormals'
p25096
sS'name'
p25097
S'type'
p25098
sS'required'
p25099
I00
sS'group_name'
p25100
Nsa(dp25101
S'description'
p25102
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p25103
sS'cpp_type'
p25104
S'double'
p25105
sS'default'
p25106
S'0.1'
p25107
sS'name'
p25108
S'variance'
p25109
sS'required'
p25110
I00
sS'group_name'
p25111
NsasS'name'
p25112
S'/MeshModifiers/AddAllSideSetsByNormals'
p25113
sa(dp25114
S'description'
p25115
g3
sS'subblocks'
p25116
NsS'parameters'
p25117
(lp25118
(dp25119
S'description'
p25120
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25121
sS'cpp_type'
p25122
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25123
sS'default'
p25124
g3
sS'name'
p25125
S'control_tags'
p25126
sS'required'
p25127
I00
sS'group_name'
p25128
S'Advanced'
p25129
sa(dp25130
S'description'
p25131
S'The nodes with coordinates you want to be in the nodeset (Either this parameter or "nodes" must be supplied).\n'
p25132
sS'cpp_type'
p25133
S'std::__1::vector<double, std::__1::allocator<double> >'
p25134
sS'default'
p25135
g3
sS'name'
p25136
S'coord'
p25137
sS'required'
p25138
I00
sS'group_name'
p25139
Nsa(dp25140
S'description'
p25141
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25142
sS'cpp_type'
p25143
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25144
sS'default'
p25145
g3
sS'name'
p25146
S'depends_on'
p25147
sS'required'
p25148
I00
sS'group_name'
p25149
Nsa(dp25150
S'description'
p25151
S'Set the enabled status of the MooseObject.\n'
p25152
sS'cpp_type'
p25153
S'bool'
p25154
sS'default'
p25155
S'1'
p25156
sS'name'
p25157
S'enable'
p25158
sS'required'
p25159
I00
sS'group_name'
p25160
S'Advanced'
p25161
sa(dp25162
S'description'
p25163
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25164
sS'cpp_type'
p25165
S'bool'
p25166
sS'default'
p25167
S'0'
p25168
sS'name'
p25169
S'force_prepare'
p25170
sS'required'
p25171
I00
sS'group_name'
p25172
Nsa(dp25173
S'description'
p25174
S'The name of the boundary to create\n'
p25175
sS'cpp_type'
p25176
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p25177
sS'default'
p25178
g3
sS'name'
p25179
S'new_boundary'
p25180
sS'required'
p25181
I01
sS'group_name'
p25182
Nsa(dp25183
S'description'
p25184
S'The nodes you want to be in the nodeset (Either this parameter or "coord" must be supplied).\n'
p25185
sS'cpp_type'
p25186
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p25187
sS'default'
p25188
g3
sS'name'
p25189
S'nodes'
p25190
sS'required'
p25191
I00
sS'group_name'
p25192
Nsa(dp25193
S'description'
p25194
S'The tolerance in which two nodes are considered identical\n'
p25195
sS'cpp_type'
p25196
S'double'
p25197
sS'default'
p25198
S'1e-06'
p25199
sS'name'
p25200
S'tolerance'
p25201
sS'required'
p25202
I00
sS'group_name'
p25203
Nsa(dp25204
S'description'
p25205
g3
sS'cpp_type'
p25206
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25207
sS'default'
p25208
S'AddExtraNodeset'
p25209
sS'name'
p25210
S'type'
p25211
sS'required'
p25212
I00
sS'group_name'
p25213
NsasS'name'
p25214
S'/MeshModifiers/AddExtraNodeset'
p25215
sa(dp25216
S'description'
p25217
g3
sS'subblocks'
p25218
NsS'parameters'
p25219
(lp25220
(dp25221
S'description'
p25222
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25223
sS'cpp_type'
p25224
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25225
sS'default'
p25226
g3
sS'name'
p25227
S'control_tags'
p25228
sS'required'
p25229
I00
sS'group_name'
p25230
S'Advanced'
p25231
sa(dp25232
S'description'
p25233
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25234
sS'cpp_type'
p25235
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25236
sS'default'
p25237
g3
sS'name'
p25238
S'depends_on'
p25239
sS'required'
p25240
I00
sS'group_name'
p25241
Nsa(dp25242
S'description'
p25243
S'New subdomain IDs of all elements\n'
p25244
sS'cpp_type'
p25245
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p25246
sS'default'
p25247
g3
sS'name'
p25248
S'element_ids'
p25249
sS'required'
p25250
I00
sS'group_name'
p25251
Nsa(dp25252
S'description'
p25253
S'Set the enabled status of the MooseObject.\n'
p25254
sS'cpp_type'
p25255
S'bool'
p25256
sS'default'
p25257
S'1'
p25258
sS'name'
p25259
S'enable'
p25260
sS'required'
p25261
I00
sS'group_name'
p25262
S'Advanced'
p25263
sa(dp25264
S'description'
p25265
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25266
sS'cpp_type'
p25267
S'bool'
p25268
sS'default'
p25269
S'0'
p25270
sS'name'
p25271
S'force_prepare'
p25272
sS'required'
p25273
I00
sS'group_name'
p25274
Nsa(dp25275
S'description'
p25276
S'New subdomain IDs of all elements\n'
p25277
sS'cpp_type'
p25278
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p25279
sS'default'
p25280
g3
sS'name'
p25281
S'subdomain_ids'
p25282
sS'required'
p25283
I01
sS'group_name'
p25284
Nsa(dp25285
S'description'
p25286
g3
sS'cpp_type'
p25287
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25288
sS'default'
p25289
S'AssignElementSubdomainID'
p25290
sS'name'
p25291
S'type'
p25292
sS'required'
p25293
I00
sS'group_name'
p25294
NsasS'name'
p25295
S'/MeshModifiers/AssignElementSubdomainID'
p25296
sa(dp25297
S'description'
p25298
g3
sS'subblocks'
p25299
NsS'parameters'
p25300
(lp25301
(dp25302
S'description'
p25303
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25304
sS'cpp_type'
p25305
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25306
sS'default'
p25307
g3
sS'name'
p25308
S'control_tags'
p25309
sS'required'
p25310
I00
sS'group_name'
p25311
S'Advanced'
p25312
sa(dp25313
S'description'
p25314
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25315
sS'cpp_type'
p25316
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25317
sS'default'
p25318
g3
sS'name'
p25319
S'depends_on'
p25320
sS'required'
p25321
I00
sS'group_name'
p25322
Nsa(dp25323
S'description'
p25324
S'Set the enabled status of the MooseObject.\n'
p25325
sS'cpp_type'
p25326
S'bool'
p25327
sS'default'
p25328
S'1'
p25329
sS'name'
p25330
S'enable'
p25331
sS'required'
p25332
I00
sS'group_name'
p25333
S'Advanced'
p25334
sa(dp25335
S'description'
p25336
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25337
sS'cpp_type'
p25338
S'bool'
p25339
sS'default'
p25340
S'0'
p25341
sS'name'
p25342
S'force_prepare'
p25343
sS'required'
p25344
I00
sS'group_name'
p25345
Nsa(dp25346
S'description'
p25347
S'New subdomain IDs of all elements\n'
p25348
sS'cpp_type'
p25349
S'unsigned short'
p25350
sS'default'
p25351
g3
sS'name'
p25352
S'subdomain_id'
p25353
sS'required'
p25354
I01
sS'group_name'
p25355
Nsa(dp25356
S'description'
p25357
g3
sS'cpp_type'
p25358
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25359
sS'default'
p25360
S'AssignSubdomainID'
p25361
sS'name'
p25362
S'type'
p25363
sS'required'
p25364
I00
sS'group_name'
p25365
NsasS'name'
p25366
S'/MeshModifiers/AssignSubdomainID'
p25367
sa(dp25368
S'description'
p25369
g3
sS'subblocks'
p25370
NsS'parameters'
p25371
(lp25372
(dp25373
S'description'
p25374
S'The block to be deleted\n'
p25375
sS'cpp_type'
p25376
S'unsigned short'
p25377
sS'default'
p25378
g3
sS'name'
p25379
S'block_id'
p25380
sS'required'
p25381
I01
sS'group_name'
p25382
Nsa(dp25383
S'description'
p25384
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25385
sS'cpp_type'
p25386
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25387
sS'default'
p25388
g3
sS'name'
p25389
S'control_tags'
p25390
sS'required'
p25391
I00
sS'group_name'
p25392
S'Advanced'
p25393
sa(dp25394
S'description'
p25395
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25396
sS'cpp_type'
p25397
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25398
sS'default'
p25399
g3
sS'name'
p25400
S'depends_on'
p25401
sS'required'
p25402
I00
sS'group_name'
p25403
Nsa(dp25404
S'description'
p25405
S'Set the enabled status of the MooseObject.\n'
p25406
sS'cpp_type'
p25407
S'bool'
p25408
sS'default'
p25409
S'1'
p25410
sS'name'
p25411
S'enable'
p25412
sS'required'
p25413
I00
sS'group_name'
p25414
S'Advanced'
p25415
sa(dp25416
S'description'
p25417
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25418
sS'cpp_type'
p25419
S'bool'
p25420
sS'default'
p25421
S'0'
p25422
sS'name'
p25423
S'force_prepare'
p25424
sS'required'
p25425
I00
sS'group_name'
p25426
Nsa(dp25427
S'description'
p25428
g3
sS'cpp_type'
p25429
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25430
sS'default'
p25431
S'BlockDeleter'
p25432
sS'name'
p25433
S'type'
p25434
sS'required'
p25435
I00
sS'group_name'
p25436
NsasS'name'
p25437
S'/MeshModifiers/BlockDeleter'
p25438
sa(dp25439
S'description'
p25440
g3
sS'subblocks'
p25441
NsS'parameters'
p25442
(lp25443
(dp25444
S'description'
p25445
S'The bottom left point (in x,y,z with spaces in-between) of the box to select the nodes.\n'
p25446
sS'cpp_type'
p25447
S'libMesh::VectorValue<double>'
p25448
sS'default'
p25449
g3
sS'name'
p25450
S'bottom_left'
p25451
sS'required'
p25452
I01
sS'group_name'
p25453
Nsa(dp25454
S'description'
p25455
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25456
sS'cpp_type'
p25457
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25458
sS'default'
p25459
g3
sS'name'
p25460
S'control_tags'
p25461
sS'required'
p25462
I00
sS'group_name'
p25463
S'Advanced'
p25464
sa(dp25465
S'description'
p25466
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25467
sS'cpp_type'
p25468
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25469
sS'default'
p25470
g3
sS'name'
p25471
S'depends_on'
p25472
sS'required'
p25473
I00
sS'group_name'
p25474
Nsa(dp25475
S'description'
p25476
S'Set the enabled status of the MooseObject.\n'
p25477
sS'cpp_type'
p25478
S'bool'
p25479
sS'default'
p25480
S'1'
p25481
sS'name'
p25482
S'enable'
p25483
sS'required'
p25484
I00
sS'group_name'
p25485
S'Advanced'
p25486
sa(dp25487
S'description'
p25488
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25489
sS'cpp_type'
p25490
S'bool'
p25491
sS'default'
p25492
S'0'
p25493
sS'name'
p25494
S'force_prepare'
p25495
sS'required'
p25496
I00
sS'group_name'
p25497
Nsa(dp25498
S'name'
p25499
S'location'
p25500
sS'cpp_type'
p25501
S'MooseEnum'
p25502
sS'default'
p25503
S'INSIDE'
p25504
sS'description'
p25505
S'Control of where the nodeset is to be set\n'
p25506
sS'required'
p25507
I00
sS'options'
p25508
S'INSIDE OUTSIDE'
p25509
sS'group_name'
p25510
Nsa(dp25511
S'description'
p25512
S'The name of the nodeset to create\n'
p25513
sS'cpp_type'
p25514
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p25515
sS'default'
p25516
g3
sS'name'
p25517
S'new_boundary'
p25518
sS'required'
p25519
I01
sS'group_name'
p25520
Nsa(dp25521
S'description'
p25522
S'The bottom left point (in x,y,z with spaces in-between) of the box to select the nodes.\n'
p25523
sS'cpp_type'
p25524
S'libMesh::VectorValue<double>'
p25525
sS'default'
p25526
g3
sS'name'
p25527
S'top_right'
p25528
sS'required'
p25529
I01
sS'group_name'
p25530
Nsa(dp25531
S'description'
p25532
g3
sS'cpp_type'
p25533
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25534
sS'default'
p25535
S'BoundingBoxNodeSet'
p25536
sS'name'
p25537
S'type'
p25538
sS'required'
p25539
I00
sS'group_name'
p25540
NsasS'name'
p25541
S'/MeshModifiers/BoundingBoxNodeSet'
p25542
sa(dp25543
S'description'
p25544
S'Break boundaries based on the subdomains to which their sides are attached. Naming convention for the new boundaries will be the old boundary name plus "_to_" plus the subdomain name\n'
p25545
sS'subblocks'
p25546
NsS'parameters'
p25547
(lp25548
(dp25549
S'description'
p25550
S'Boundaries to be broken. Default means to break all boundaries\n'
p25551
sS'cpp_type'
p25552
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p25553
sS'default'
p25554
g3
sS'name'
p25555
S'boundaries'
p25556
sS'required'
p25557
I00
sS'group_name'
p25558
Nsa(dp25559
S'description'
p25560
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25561
sS'cpp_type'
p25562
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25563
sS'default'
p25564
g3
sS'name'
p25565
S'control_tags'
p25566
sS'required'
p25567
I00
sS'group_name'
p25568
S'Advanced'
p25569
sa(dp25570
S'description'
p25571
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25572
sS'cpp_type'
p25573
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25574
sS'default'
p25575
g3
sS'name'
p25576
S'depends_on'
p25577
sS'required'
p25578
I00
sS'group_name'
p25579
Nsa(dp25580
S'description'
p25581
S'Set the enabled status of the MooseObject.\n'
p25582
sS'cpp_type'
p25583
S'bool'
p25584
sS'default'
p25585
S'1'
p25586
sS'name'
p25587
S'enable'
p25588
sS'required'
p25589
I00
sS'group_name'
p25590
S'Advanced'
p25591
sa(dp25592
S'description'
p25593
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25594
sS'cpp_type'
p25595
S'bool'
p25596
sS'default'
p25597
S'0'
p25598
sS'name'
p25599
S'force_prepare'
p25600
sS'required'
p25601
I00
sS'group_name'
p25602
Nsa(dp25603
S'description'
p25604
g3
sS'cpp_type'
p25605
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25606
sS'default'
p25607
S'BreakBoundaryOnSubdomain'
p25608
sS'name'
p25609
S'type'
p25610
sS'required'
p25611
I00
sS'group_name'
p25612
NsasS'name'
p25613
S'/MeshModifiers/BreakBoundaryOnSubdomain'
p25614
sa(dp25615
S'description'
p25616
g3
sS'subblocks'
p25617
NsS'parameters'
p25618
(lp25619
(dp25620
S'description'
p25621
S'The image RGB-component to return, leaving this blank will result in a greyscale value for the image to be created. The component number is zero based, i.e. 0 returns the first (RED) component of the image.\n'
p25622
sS'cpp_type'
p25623
S'unsigned int'
p25624
sS'default'
p25625
g3
sS'name'
p25626
S'component'
p25627
sS'required'
p25628
I00
sS'group_name'
p25629
Nsa(dp25630
S'description'
p25631
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25632
sS'cpp_type'
p25633
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25634
sS'default'
p25635
g3
sS'name'
p25636
S'control_tags'
p25637
sS'required'
p25638
I00
sS'group_name'
p25639
S'Advanced'
p25640
sa(dp25641
S'description'
p25642
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25643
sS'cpp_type'
p25644
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25645
sS'default'
p25646
g3
sS'name'
p25647
S'depends_on'
p25648
sS'required'
p25649
I00
sS'group_name'
p25650
Nsa(dp25651
S'description'
p25652
S'x,y,z dimensions of the image (defaults to mesh dimensions)\n'
p25653
sS'cpp_type'
p25654
S'libMesh::Point'
p25655
sS'default'
p25656
g3
sS'name'
p25657
S'dimensions'
p25658
sS'required'
p25659
I00
sS'group_name'
p25660
Nsa(dp25661
S'description'
p25662
S'Set the enabled status of the MooseObject.\n'
p25663
sS'cpp_type'
p25664
S'bool'
p25665
sS'default'
p25666
S'1'
p25667
sS'name'
p25668
S'enable'
p25669
sS'required'
p25670
I00
sS'group_name'
p25671
S'Advanced'
p25672
sa(dp25673
S'description'
p25674
S'Name of single image file to extract mesh parameters from.  If provided, a 2D mesh is created.\n'
p25675
sS'cpp_type'
p25676
S'FileName'
p25677
sS'default'
p25678
g3
sS'name'
p25679
S'file'
p25680
sS'required'
p25681
I00
sS'group_name'
p25682
Nsa(dp25683
S'description'
p25684
S"Image file base to open, use this option when a stack of images must be read (ignored if 'file' is given)\n"
p25685
sS'cpp_type'
p25686
S'FileNameNoExtension'
p25687
sS'default'
p25688
g3
sS'name'
p25689
S'file_base'
p25690
sS'required'
p25691
I00
sS'group_name'
p25692
Nsa(dp25693
S'description'
p25694
S"Range of images to analyze, used with 'file_base' (ignored if 'file' is given)\n"
p25695
sS'cpp_type'
p25696
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p25697
sS'default'
p25698
g3
sS'name'
p25699
S'file_range'
p25700
sS'required'
p25701
I00
sS'group_name'
p25702
Nsa(dp25703
S'description'
p25704
S"Suffix of the file to open, e.g. 'png'\n"
p25705
sS'cpp_type'
p25706
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25707
sS'default'
p25708
g3
sS'name'
p25709
S'file_suffix'
p25710
sS'required'
p25711
I00
sS'group_name'
p25712
Nsa(dp25713
S'description'
p25714
S'Flip the image along the x-axis\n'
p25715
sS'cpp_type'
p25716
S'bool'
p25717
sS'default'
p25718
S'0'
p25719
sS'name'
p25720
S'flip_x'
p25721
sS'required'
p25722
I00
sS'group_name'
p25723
S'Flip'
p25724
sa(dp25725
S'description'
p25726
S'Flip the image along the y-axis\n'
p25727
sS'cpp_type'
p25728
S'bool'
p25729
sS'default'
p25730
S'0'
p25731
sS'name'
p25732
S'flip_y'
p25733
sS'required'
p25734
I00
sS'group_name'
p25735
S'Flip'
p25736
sa(dp25737
S'description'
p25738
S'Flip the image along the z-axis\n'
p25739
sS'cpp_type'
p25740
S'bool'
p25741
sS'default'
p25742
S'0'
p25743
sS'name'
p25744
S'flip_z'
p25745
sS'required'
p25746
I00
sS'group_name'
p25747
S'Flip'
p25748
sa(dp25749
S'description'
p25750
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25751
sS'cpp_type'
p25752
S'bool'
p25753
sS'default'
p25754
S'0'
p25755
sS'name'
p25756
S'force_prepare'
p25757
sS'required'
p25758
I00
sS'group_name'
p25759
Nsa(dp25760
S'description'
p25761
S'The value to set for data less than the threshold value\n'
p25762
sS'cpp_type'
p25763
S'double'
p25764
sS'default'
p25765
S'0'
p25766
sS'name'
p25767
S'lower_value'
p25768
sS'required'
p25769
I00
sS'group_name'
p25770
S'Threshold'
p25771
sa(dp25772
S'description'
p25773
S'Origin of the image (defaults to mesh origin)\n'
p25774
sS'cpp_type'
p25775
S'libMesh::Point'
p25776
sS'default'
p25777
g3
sS'name'
p25778
S'origin'
p25779
sS'required'
p25780
I00
sS'group_name'
p25781
Nsa(dp25782
S'description'
p25783
S'Multiplier to apply to all pixel values; occurs after shifting\n'
p25784
sS'cpp_type'
p25785
S'double'
p25786
sS'default'
p25787
S'1'
p25788
sS'name'
p25789
S'scale'
p25790
sS'required'
p25791
I00
sS'group_name'
p25792
S'Rescale'
p25793
sa(dp25794
S'description'
p25795
S'Value to add to all pixels; occurs prior to scaling\n'
p25796
sS'cpp_type'
p25797
S'double'
p25798
sS'default'
p25799
S'0'
p25800
sS'name'
p25801
S'shift'
p25802
sS'required'
p25803
I00
sS'group_name'
p25804
S'Rescale'
p25805
sa(dp25806
S'description'
p25807
S'The threshold value\n'
p25808
sS'cpp_type'
p25809
S'double'
p25810
sS'default'
p25811
g3
sS'name'
p25812
S'threshold'
p25813
sS'required'
p25814
I00
sS'group_name'
p25815
S'Threshold'
p25816
sa(dp25817
S'description'
p25818
g3
sS'cpp_type'
p25819
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25820
sS'default'
p25821
S'ImageSubdomain'
p25822
sS'name'
p25823
S'type'
p25824
sS'required'
p25825
I00
sS'group_name'
p25826
Nsa(dp25827
S'description'
p25828
S'The value to set for data greater than the threshold value\n'
p25829
sS'cpp_type'
p25830
S'double'
p25831
sS'default'
p25832
S'1'
p25833
sS'name'
p25834
S'upper_value'
p25835
sS'required'
p25836
I00
sS'group_name'
p25837
S'Threshold'
p25838
sasS'name'
p25839
S'/MeshModifiers/ImageSubdomain'
p25840
sa(dp25841
S'description'
p25842
g3
sS'subblocks'
p25843
NsS'parameters'
p25844
(lp25845
(dp25846
S'description'
p25847
S'The boundary that will be applied to the bottom of the extruded mesh\n'
p25848
sS'cpp_type'
p25849
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p25850
sS'default'
p25851
g3
sS'name'
p25852
S'bottom_sideset'
p25853
sS'required'
p25854
I00
sS'group_name'
p25855
Nsa(dp25856
S'description'
p25857
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p25858
sS'cpp_type'
p25859
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25860
sS'default'
p25861
g3
sS'name'
p25862
S'control_tags'
p25863
sS'required'
p25864
I00
sS'group_name'
p25865
S'Advanced'
p25866
sa(dp25867
S'description'
p25868
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p25869
sS'cpp_type'
p25870
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25871
sS'default'
p25872
g3
sS'name'
p25873
S'depends_on'
p25874
sS'required'
p25875
I00
sS'group_name'
p25876
Nsa(dp25877
S'description'
p25878
S'Set the enabled status of the MooseObject.\n'
p25879
sS'cpp_type'
p25880
S'bool'
p25881
sS'default'
p25882
S'1'
p25883
sS'name'
p25884
S'enable'
p25885
sS'required'
p25886
I00
sS'group_name'
p25887
S'Advanced'
p25888
sa(dp25889
S'description'
p25890
S'The subdomains that will be remapped for specific layers\n'
p25891
sS'cpp_type'
p25892
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p25893
sS'default'
p25894
g3
sS'name'
p25895
S'existing_subdomains'
p25896
sS'required'
p25897
I00
sS'group_name'
p25898
Nsa(dp25899
S'description'
p25900
S'The direction and length of the extrusion\n'
p25901
sS'cpp_type'
p25902
S'libMesh::VectorValue<double>'
p25903
sS'default'
p25904
g3
sS'name'
p25905
S'extrusion_vector'
p25906
sS'required'
p25907
I01
sS'group_name'
p25908
Nsa(dp25909
S'description'
p25910
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p25911
sS'cpp_type'
p25912
S'bool'
p25913
sS'default'
p25914
S'0'
p25915
sS'name'
p25916
S'force_prepare'
p25917
sS'required'
p25918
I00
sS'group_name'
p25919
Nsa(dp25920
S'description'
p25921
S'The layers where the "existing_subdomain" will be remapped to new ids\n'
p25922
sS'cpp_type'
p25923
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p25924
sS'default'
p25925
g3
sS'name'
p25926
S'layers'
p25927
sS'required'
p25928
I00
sS'group_name'
p25929
Nsa(dp25930
S'description'
p25931
S'The list of new ids, This list should be either length "existing_subdomains" or "existing_subdomains" * layers\n'
p25932
sS'cpp_type'
p25933
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p25934
sS'default'
p25935
g3
sS'name'
p25936
S'new_ids'
p25937
sS'required'
p25938
I00
sS'group_name'
p25939
Nsa(dp25940
S'description'
p25941
S'The number of layers in the extruded mesh\n'
p25942
sS'cpp_type'
p25943
S'unsigned int'
p25944
sS'default'
p25945
S'1'
p25946
sS'name'
p25947
S'num_layers'
p25948
sS'required'
p25949
I00
sS'group_name'
p25950
Nsa(dp25951
S'description'
p25952
S'The boundary that will be to the top of the extruded mesh\n'
p25953
sS'cpp_type'
p25954
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p25955
sS'default'
p25956
g3
sS'name'
p25957
S'top_sideset'
p25958
sS'required'
p25959
I00
sS'group_name'
p25960
Nsa(dp25961
S'description'
p25962
g3
sS'cpp_type'
p25963
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25964
sS'default'
p25965
S'MeshExtruder'
p25966
sS'name'
p25967
S'type'
p25968
sS'required'
p25969
I00
sS'group_name'
p25970
NsasS'name'
p25971
S'/MeshModifiers/MeshExtruder'
p25972
sa(dp25973
S'description'
p25974
g3
sS'subblocks'
p25975
NsS'parameters'
p25976
(lp25977
(dp25978
S'description'
p25979
S'Subdomain id to set for inside/outside the bounding box\n'
p25980
sS'cpp_type'
p25981
S'unsigned short'
p25982
sS'default'
p25983
g3
sS'name'
p25984
S'block_id'
p25985
sS'required'
p25986
I01
sS'group_name'
p25987
Nsa(dp25988
S'description'
p25989
S"The center (many people spell this 'center') of the box.\n"
p25990
sS'cpp_type'
p25991
S'libMesh::Point'
p25992
sS'default'
p25993
g3
sS'name'
p25994
S'center'
p25995
sS'required'
p25996
I01
sS'group_name'
p25997
Nsa(dp25998
S'description'
p25999
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26000
sS'cpp_type'
p26001
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26002
sS'default'
p26003
g3
sS'name'
p26004
S'control_tags'
p26005
sS'required'
p26006
I00
sS'group_name'
p26007
S'Advanced'
p26008
sa(dp26009
S'description'
p26010
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p26011
sS'cpp_type'
p26012
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26013
sS'default'
p26014
g3
sS'name'
p26015
S'depends_on'
p26016
sS'required'
p26017
I00
sS'group_name'
p26018
Nsa(dp26019
S'description'
p26020
S'Set the enabled status of the MooseObject.\n'
p26021
sS'cpp_type'
p26022
S'bool'
p26023
sS'default'
p26024
S'1'
p26025
sS'name'
p26026
S'enable'
p26027
sS'required'
p26028
I00
sS'group_name'
p26029
S'Advanced'
p26030
sa(dp26031
S'description'
p26032
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p26033
sS'cpp_type'
p26034
S'bool'
p26035
sS'default'
p26036
S'0'
p26037
sS'name'
p26038
S'force_prepare'
p26039
sS'required'
p26040
I00
sS'group_name'
p26041
Nsa(dp26042
S'description'
p26043
S'The height of the box\n'
p26044
sS'cpp_type'
p26045
S'double'
p26046
sS'default'
p26047
g3
sS'name'
p26048
S'height'
p26049
sS'required'
p26050
I01
sS'group_name'
p26051
Nsa(dp26052
S'description'
p26053
S'The length of the box\n'
p26054
sS'cpp_type'
p26055
S'double'
p26056
sS'default'
p26057
g3
sS'name'
p26058
S'length'
p26059
sS'required'
p26060
I01
sS'group_name'
p26061
Nsa(dp26062
S'description'
p26063
S'The direction along which the length is oriented (must be perpendicular to width_direction).\n'
p26064
sS'cpp_type'
p26065
S'libMesh::VectorValue<double>'
p26066
sS'default'
p26067
g3
sS'name'
p26068
S'length_direction'
p26069
sS'required'
p26070
I01
sS'group_name'
p26071
Nsa(dp26072
S'name'
p26073
S'location'
p26074
sS'cpp_type'
p26075
S'MooseEnum'
p26076
sS'default'
p26077
S'INSIDE'
p26078
sS'description'
p26079
S'Control of where the subdomain id is to be set\n'
p26080
sS'required'
p26081
I00
sS'options'
p26082
S'INSIDE OUTSIDE'
p26083
sS'group_name'
p26084
Nsa(dp26085
S'description'
p26086
g3
sS'cpp_type'
p26087
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26088
sS'default'
p26089
S'OrientedSubdomainBoundingBox'
p26090
sS'name'
p26091
S'type'
p26092
sS'required'
p26093
I00
sS'group_name'
p26094
Nsa(dp26095
S'description'
p26096
S'The width of the box\n'
p26097
sS'cpp_type'
p26098
S'double'
p26099
sS'default'
p26100
g3
sS'name'
p26101
S'width'
p26102
sS'required'
p26103
I01
sS'group_name'
p26104
Nsa(dp26105
S'description'
p26106
S'The direction along which the width is oriented.\n'
p26107
sS'cpp_type'
p26108
S'libMesh::VectorValue<double>'
p26109
sS'default'
p26110
g3
sS'name'
p26111
S'width_direction'
p26112
sS'required'
p26113
I01
sS'group_name'
p26114
NsasS'name'
p26115
S'/MeshModifiers/OrientedSubdomainBoundingBox'
p26116
sa(dp26117
S'description'
p26118
S"A MeshModifier that adds element's sides to a sideset if the centroid satisfies the combinatorial_geometry expression, (and optionally) if one of the side's elements is in included_subdomain_ids and if it features the correct normal.\n"
p26119
sS'subblocks'
p26120
NsS'parameters'
p26121
(lp26122
(dp26123
S'description'
p26124
S'Function expression encoding a combinatorial geometry\n'
p26125
sS'cpp_type'
p26126
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26127
sS'default'
p26128
g3
sS'name'
p26129
S'combinatorial_geometry'
p26130
sS'required'
p26131
I01
sS'group_name'
p26132
Nsa(dp26133
S'description'
p26134
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p26135
sS'cpp_type'
p26136
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26137
sS'default'
p26138
g3
sS'name'
p26139
S'constant_expressions'
p26140
sS'required'
p26141
I00
sS'group_name'
p26142
Nsa(dp26143
S'description'
p26144
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p26145
sS'cpp_type'
p26146
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26147
sS'default'
p26148
g3
sS'name'
p26149
S'constant_names'
p26150
sS'required'
p26151
I00
sS'group_name'
p26152
Nsa(dp26153
S'description'
p26154
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26155
sS'cpp_type'
p26156
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26157
sS'default'
p26158
g3
sS'name'
p26159
S'control_tags'
p26160
sS'required'
p26161
I00
sS'group_name'
p26162
S'Advanced'
p26163
sa(dp26164
S'description'
p26165
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p26166
sS'cpp_type'
p26167
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26168
sS'default'
p26169
g3
sS'name'
p26170
S'depends_on'
p26171
sS'required'
p26172
I00
sS'group_name'
p26173
Nsa(dp26174
S'description'
p26175
S'Disable the function parser algebraic optimizer\n'
p26176
sS'cpp_type'
p26177
S'bool'
p26178
sS'default'
p26179
S'0'
p26180
sS'name'
p26181
S'disable_fpoptimizer'
p26182
sS'required'
p26183
I00
sS'group_name'
p26184
S'Advanced'
p26185
sa(dp26186
S'description'
p26187
S'Set the enabled status of the MooseObject.\n'
p26188
sS'cpp_type'
p26189
S'bool'
p26190
sS'default'
p26191
S'1'
p26192
sS'name'
p26193
S'enable'
p26194
sS'required'
p26195
I00
sS'group_name'
p26196
S'Advanced'
p26197
sa(dp26198
S'description'
p26199
S'Enable cacheing of function derivatives for faster startup time\n'
p26200
sS'cpp_type'
p26201
S'bool'
p26202
sS'default'
p26203
S'1'
p26204
sS'name'
p26205
S'enable_ad_cache'
p26206
sS'required'
p26207
I00
sS'group_name'
p26208
S'Advanced'
p26209
sa(dp26210
S'description'
p26211
S'Enable automatic immediate optimization of derivatives\n'
p26212
sS'cpp_type'
p26213
S'bool'
p26214
sS'default'
p26215
S'1'
p26216
sS'name'
p26217
S'enable_auto_optimize'
p26218
sS'required'
p26219
I00
sS'group_name'
p26220
S'Advanced'
p26221
sa(dp26222
S'description'
p26223
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p26224
sS'cpp_type'
p26225
S'bool'
p26226
sS'default'
p26227
S'1'
p26228
sS'name'
p26229
S'enable_jit'
p26230
sS'required'
p26231
I00
sS'group_name'
p26232
S'Advanced'
p26233
sa(dp26234
S'description'
p26235
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p26236
sS'cpp_type'
p26237
S'bool'
p26238
sS'default'
p26239
S'0'
p26240
sS'name'
p26241
S'fail_on_evalerror'
p26242
sS'required'
p26243
I00
sS'group_name'
p26244
S'Advanced'
p26245
sa(dp26246
S'description'
p26247
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p26248
sS'cpp_type'
p26249
S'bool'
p26250
sS'default'
p26251
S'0'
p26252
sS'name'
p26253
S'fixed_normal'
p26254
sS'required'
p26255
I00
sS'group_name'
p26256
Nsa(dp26257
S'description'
p26258
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p26259
sS'cpp_type'
p26260
S'bool'
p26261
sS'default'
p26262
S'0'
p26263
sS'name'
p26264
S'force_prepare'
p26265
sS'required'
p26266
I00
sS'group_name'
p26267
Nsa(dp26268
S'description'
p26269
S'A set of subdomain ids whose sides will be included in the new sidesets\n'
p26270
sS'cpp_type'
p26271
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p26272
sS'default'
p26273
g3
sS'name'
p26274
S'included_subdomain_ids'
p26275
sS'required'
p26276
I00
sS'group_name'
p26277
Nsa(dp26278
S'description'
p26279
S'The name of the new sideset\n'
p26280
sS'cpp_type'
p26281
S'BoundaryName'
p26282
sS'default'
p26283
g3
sS'name'
p26284
S'new_sideset_name'
p26285
sS'required'
p26286
I01
sS'group_name'
p26287
Nsa(dp26288
S'description'
p26289
S'If provided specifies the normal vector on sides that are added to the new \n'
p26290
sS'cpp_type'
p26291
S'libMesh::Point'
p26292
sS'default'
p26293
S'0 0 0'
p26294
sS'name'
p26295
S'normal'
p26296
sS'required'
p26297
I00
sS'group_name'
p26298
Nsa(dp26299
S'description'
p26300
g3
sS'cpp_type'
p26301
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26302
sS'default'
p26303
S'ParsedAddSideset'
p26304
sS'name'
p26305
S'type'
p26306
sS'required'
p26307
I00
sS'group_name'
p26308
Nsa(dp26309
S'description'
p26310
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p26311
sS'cpp_type'
p26312
S'double'
p26313
sS'default'
p26314
S'0.1'
p26315
sS'name'
p26316
S'variance'
p26317
sS'required'
p26318
I00
sS'group_name'
p26319
NsasS'name'
p26320
S'/MeshModifiers/ParsedAddSideset'
p26321
sa(dp26322
S'description'
p26323
S'MeshModifier that uses a parsed expression (combinatorial_geometry) to determine if an element (aka its centroid) is inside the combinatorial geometry and assigns a new block id.\n'
p26324
sS'subblocks'
p26325
NsS'parameters'
p26326
(lp26327
(dp26328
S'description'
p26329
S'Subdomain id to set for inside of the combinatorial\n'
p26330
sS'cpp_type'
p26331
S'unsigned short'
p26332
sS'default'
p26333
g3
sS'name'
p26334
S'block_id'
p26335
sS'required'
p26336
I01
sS'group_name'
p26337
Nsa(dp26338
S'description'
p26339
S'Subdomain name to set for inside of the combinatorial\n'
p26340
sS'cpp_type'
p26341
S'SubdomainName'
p26342
sS'default'
p26343
g3
sS'name'
p26344
S'block_name'
p26345
sS'required'
p26346
I00
sS'group_name'
p26347
Nsa(dp26348
S'description'
p26349
S'Function expression encoding a combinatorial geometry\n'
p26350
sS'cpp_type'
p26351
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26352
sS'default'
p26353
g3
sS'name'
p26354
S'combinatorial_geometry'
p26355
sS'required'
p26356
I01
sS'group_name'
p26357
Nsa(dp26358
S'description'
p26359
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p26360
sS'cpp_type'
p26361
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26362
sS'default'
p26363
g3
sS'name'
p26364
S'constant_expressions'
p26365
sS'required'
p26366
I00
sS'group_name'
p26367
Nsa(dp26368
S'description'
p26369
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p26370
sS'cpp_type'
p26371
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26372
sS'default'
p26373
g3
sS'name'
p26374
S'constant_names'
p26375
sS'required'
p26376
I00
sS'group_name'
p26377
Nsa(dp26378
S'description'
p26379
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26380
sS'cpp_type'
p26381
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26382
sS'default'
p26383
g3
sS'name'
p26384
S'control_tags'
p26385
sS'required'
p26386
I00
sS'group_name'
p26387
S'Advanced'
p26388
sa(dp26389
S'description'
p26390
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p26391
sS'cpp_type'
p26392
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26393
sS'default'
p26394
g3
sS'name'
p26395
S'depends_on'
p26396
sS'required'
p26397
I00
sS'group_name'
p26398
Nsa(dp26399
S'description'
p26400
S'Disable the function parser algebraic optimizer\n'
p26401
sS'cpp_type'
p26402
S'bool'
p26403
sS'default'
p26404
S'0'
p26405
sS'name'
p26406
S'disable_fpoptimizer'
p26407
sS'required'
p26408
I00
sS'group_name'
p26409
S'Advanced'
p26410
sa(dp26411
S'description'
p26412
S'Set the enabled status of the MooseObject.\n'
p26413
sS'cpp_type'
p26414
S'bool'
p26415
sS'default'
p26416
S'1'
p26417
sS'name'
p26418
S'enable'
p26419
sS'required'
p26420
I00
sS'group_name'
p26421
S'Advanced'
p26422
sa(dp26423
S'description'
p26424
S'Enable cacheing of function derivatives for faster startup time\n'
p26425
sS'cpp_type'
p26426
S'bool'
p26427
sS'default'
p26428
S'1'
p26429
sS'name'
p26430
S'enable_ad_cache'
p26431
sS'required'
p26432
I00
sS'group_name'
p26433
S'Advanced'
p26434
sa(dp26435
S'description'
p26436
S'Enable automatic immediate optimization of derivatives\n'
p26437
sS'cpp_type'
p26438
S'bool'
p26439
sS'default'
p26440
S'1'
p26441
sS'name'
p26442
S'enable_auto_optimize'
p26443
sS'required'
p26444
I00
sS'group_name'
p26445
S'Advanced'
p26446
sa(dp26447
S'description'
p26448
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p26449
sS'cpp_type'
p26450
S'bool'
p26451
sS'default'
p26452
S'1'
p26453
sS'name'
p26454
S'enable_jit'
p26455
sS'required'
p26456
I00
sS'group_name'
p26457
S'Advanced'
p26458
sa(dp26459
S'description'
p26460
S'A set of subdomain ids that will not changed even if they are inside/outside the combinatorial geometry\n'
p26461
sS'cpp_type'
p26462
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p26463
sS'default'
p26464
g3
sS'name'
p26465
S'excluded_subdomain_ids'
p26466
sS'required'
p26467
I00
sS'group_name'
p26468
Nsa(dp26469
S'description'
p26470
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p26471
sS'cpp_type'
p26472
S'bool'
p26473
sS'default'
p26474
S'0'
p26475
sS'name'
p26476
S'fail_on_evalerror'
p26477
sS'required'
p26478
I00
sS'group_name'
p26479
S'Advanced'
p26480
sa(dp26481
S'description'
p26482
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p26483
sS'cpp_type'
p26484
S'bool'
p26485
sS'default'
p26486
S'0'
p26487
sS'name'
p26488
S'force_prepare'
p26489
sS'required'
p26490
I00
sS'group_name'
p26491
Nsa(dp26492
S'description'
p26493
g3
sS'cpp_type'
p26494
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26495
sS'default'
p26496
S'ParsedSubdomainMeshModifier'
p26497
sS'name'
p26498
S'type'
p26499
sS'required'
p26500
I00
sS'group_name'
p26501
NsasS'name'
p26502
S'/MeshModifiers/ParsedSubdomainMeshModifier'
p26503
sa(dp26504
S'description'
p26505
S'RenameBlock re-numbers or re-names an old_block_id or old_block_name with a new_block_id or new_block_name\n'
p26506
sS'subblocks'
p26507
NsS'parameters'
p26508
(lp26509
(dp26510
S'description'
p26511
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26512
sS'cpp_type'
p26513
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26514
sS'default'
p26515
g3
sS'name'
p26516
S'control_tags'
p26517
sS'required'
p26518
I00
sS'group_name'
p26519
S'Advanced'
p26520
sa(dp26521
S'description'
p26522
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p26523
sS'cpp_type'
p26524
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26525
sS'default'
p26526
g3
sS'name'
p26527
S'depends_on'
p26528
sS'required'
p26529
I00
sS'group_name'
p26530
Nsa(dp26531
S'description'
p26532
S'Set the enabled status of the MooseObject.\n'
p26533
sS'cpp_type'
p26534
S'bool'
p26535
sS'default'
p26536
S'1'
p26537
sS'name'
p26538
S'enable'
p26539
sS'required'
p26540
I00
sS'group_name'
p26541
S'Advanced'
p26542
sa(dp26543
S'description'
p26544
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p26545
sS'cpp_type'
p26546
S'bool'
p26547
sS'default'
p26548
S'0'
p26549
sS'name'
p26550
S'force_prepare'
p26551
sS'required'
p26552
I00
sS'group_name'
p26553
Nsa(dp26554
S'description'
p26555
S'Elements with the old block number (or name) will be given this block number.  You must supply either new_block_id or new_block_name.  You may supply a vector of new_block_id, in which case the old_block information must also be a vector.\n'
p26556
sS'cpp_type'
p26557
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p26558
sS'default'
p26559
g3
sS'name'
p26560
S'new_block_id'
p26561
sS'required'
p26562
I00
sS'group_name'
p26563
Nsa(dp26564
S'description'
p26565
S'Elements with the old block number (or name) will be given this block name.  You must supply either new_block_id or new_block_name.  You may supply a vector of new_block_id, in which case the old_block information must also be a vector.\n'
p26566
sS'cpp_type'
p26567
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p26568
sS'default'
p26569
g3
sS'name'
p26570
S'new_block_name'
p26571
sS'required'
p26572
I00
sS'group_name'
p26573
Nsa(dp26574
S'description'
p26575
S'Elements with this block number will be given the new_block_number or new_block_name.  You must supply either old_block_id or old_block_name.  You may supply a vector of old_block_id, in which case the new_block information must also be a vector.\n'
p26576
sS'cpp_type'
p26577
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p26578
sS'default'
p26579
g3
sS'name'
p26580
S'old_block_id'
p26581
sS'required'
p26582
I00
sS'group_name'
p26583
Nsa(dp26584
S'description'
p26585
S'Elements with this block name will be given the new_block_number or new_block_name.  You must supply either old_block_id or old_block_name.  You may supply a vector of old_block_name, in which case the new_block information must also be a vector.\n'
p26586
sS'cpp_type'
p26587
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p26588
sS'default'
p26589
g3
sS'name'
p26590
S'old_block_name'
p26591
sS'required'
p26592
I00
sS'group_name'
p26593
Nsa(dp26594
S'description'
p26595
g3
sS'cpp_type'
p26596
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26597
sS'default'
p26598
S'RenameBlock'
p26599
sS'name'
p26600
S'type'
p26601
sS'required'
p26602
I00
sS'group_name'
p26603
NsasS'name'
p26604
S'/MeshModifiers/RenameBlock'
p26605
sa(dp26606
S'description'
p26607
S'Adds element faces that are on the exterior of the given block to the sidesets specified\n'
p26608
sS'subblocks'
p26609
NsS'parameters'
p26610
(lp26611
(dp26612
S'description'
p26613
S'The list of block ids (SubdomainID) that this object will be applied\n'
p26614
sS'cpp_type'
p26615
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p26616
sS'default'
p26617
g3
sS'name'
p26618
S'block'
p26619
sS'required'
p26620
I00
sS'group_name'
p26621
Nsa(dp26622
S'description'
p26623
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26624
sS'cpp_type'
p26625
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26626
sS'default'
p26627
g3
sS'name'
p26628
S'control_tags'
p26629
sS'required'
p26630
I00
sS'group_name'
p26631
S'Advanced'
p26632
sa(dp26633
S'description'
p26634
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p26635
sS'cpp_type'
p26636
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26637
sS'default'
p26638
g3
sS'name'
p26639
S'depends_on'
p26640
sS'required'
p26641
I00
sS'group_name'
p26642
Nsa(dp26643
S'description'
p26644
S'Set the enabled status of the MooseObject.\n'
p26645
sS'cpp_type'
p26646
S'bool'
p26647
sS'default'
p26648
S'1'
p26649
sS'name'
p26650
S'enable'
p26651
sS'required'
p26652
I00
sS'group_name'
p26653
S'Advanced'
p26654
sa(dp26655
S'description'
p26656
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p26657
sS'cpp_type'
p26658
S'bool'
p26659
sS'default'
p26660
S'0'
p26661
sS'name'
p26662
S'fixed_normal'
p26663
sS'required'
p26664
I00
sS'group_name'
p26665
Nsa(dp26666
S'description'
p26667
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p26668
sS'cpp_type'
p26669
S'bool'
p26670
sS'default'
p26671
S'0'
p26672
sS'name'
p26673
S'force_prepare'
p26674
sS'required'
p26675
I00
sS'group_name'
p26676
Nsa(dp26677
S'description'
p26678
S'The list of boundary IDs to create on the supplied subdomain\n'
p26679
sS'cpp_type'
p26680
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p26681
sS'default'
p26682
g3
sS'name'
p26683
S'new_boundary'
p26684
sS'required'
p26685
I01
sS'group_name'
p26686
Nsa(dp26687
S'description'
p26688
S'If supplied, only faces with normal equal to this, up to normal_tol, will be added to the sidesets specified\n'
p26689
sS'cpp_type'
p26690
S'libMesh::Point'
p26691
sS'default'
p26692
g3
sS'name'
p26693
S'normal'
p26694
sS'required'
p26695
I00
sS'group_name'
p26696
Nsa(dp26697
S'description'
p26698
S'If normal is supplied then faces are only added if face_normal.normal_hat >= 1 - normal_tol, where normal_hat = normal/|normal|\n'
p26699
sS'cpp_type'
p26700
S'double'
p26701
sS'default'
p26702
S'0.1'
p26703
sS'name'
p26704
S'normal_tol'
p26705
sS'required'
p26706
I00
sS'group_name'
p26707
Nsa(dp26708
S'description'
p26709
g3
sS'cpp_type'
p26710
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26711
sS'default'
p26712
S'SideSetsAroundSubdomain'
p26713
sS'name'
p26714
S'type'
p26715
sS'required'
p26716
I00
sS'group_name'
p26717
Nsa(dp26718
S'description'
p26719
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p26720
sS'cpp_type'
p26721
S'double'
p26722
sS'default'
p26723
S'0.1'
p26724
sS'name'
p26725
S'variance'
p26726
sS'required'
p26727
I00
sS'group_name'
p26728
NsasS'name'
p26729
S'/MeshModifiers/SideSetsAroundSubdomain'
p26730
sa(dp26731
S'description'
p26732
g3
sS'subblocks'
p26733
NsS'parameters'
p26734
(lp26735
(dp26736
S'description'
p26737
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26738
sS'cpp_type'
p26739
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26740
sS'default'
p26741
g3
sS'name'
p26742
S'control_tags'
p26743
sS'required'
p26744
I00
sS'group_name'
p26745
S'Advanced'
p26746
sa(dp26747
S'description'
p26748
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p26749
sS'cpp_type'
p26750
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26751
sS'default'
p26752
g3
sS'name'
p26753
S'depends_on'
p26754
sS'required'
p26755
I00
sS'group_name'
p26756
Nsa(dp26757
S'description'
p26758
S'Set the enabled status of the MooseObject.\n'
p26759
sS'cpp_type'
p26760
S'bool'
p26761
sS'default'
p26762
S'1'
p26763
sS'name'
p26764
S'enable'
p26765
sS'required'
p26766
I00
sS'group_name'
p26767
S'Advanced'
p26768
sa(dp26769
S'description'
p26770
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p26771
sS'cpp_type'
p26772
S'bool'
p26773
sS'default'
p26774
S'0'
p26775
sS'name'
p26776
S'force_prepare'
p26777
sS'required'
p26778
I00
sS'group_name'
p26779
Nsa(dp26780
S'description'
p26781
S'The master set of blocks for which to draw a sideset between\n'
p26782
sS'cpp_type'
p26783
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p26784
sS'default'
p26785
g3
sS'name'
p26786
S'master_block'
p26787
sS'required'
p26788
I01
sS'group_name'
p26789
Nsa(dp26790
S'description'
p26791
S'The name of the boundary to create\n'
p26792
sS'cpp_type'
p26793
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p26794
sS'default'
p26795
g3
sS'name'
p26796
S'new_boundary'
p26797
sS'required'
p26798
I01
sS'group_name'
p26799
Nsa(dp26800
S'description'
p26801
S'The paired set of blocks for which to draw a sideset between\n'
p26802
sS'cpp_type'
p26803
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p26804
sS'default'
p26805
g3
sS'name'
p26806
S'paired_block'
p26807
sS'required'
p26808
I01
sS'group_name'
p26809
Nsa(dp26810
S'description'
p26811
g3
sS'cpp_type'
p26812
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26813
sS'default'
p26814
S'SideSetsBetweenSubdomains'
p26815
sS'name'
p26816
S'type'
p26817
sS'required'
p26818
I00
sS'group_name'
p26819
NsasS'name'
p26820
S'/MeshModifiers/SideSetsBetweenSubdomains'
p26821
sa(dp26822
S'description'
p26823
g3
sS'subblocks'
p26824
NsS'parameters'
p26825
(lp26826
(dp26827
S'description'
p26828
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26829
sS'cpp_type'
p26830
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26831
sS'default'
p26832
g3
sS'name'
p26833
S'control_tags'
p26834
sS'required'
p26835
I00
sS'group_name'
p26836
S'Advanced'
p26837
sa(dp26838
S'description'
p26839
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p26840
sS'cpp_type'
p26841
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26842
sS'default'
p26843
g3
sS'name'
p26844
S'depends_on'
p26845
sS'required'
p26846
I00
sS'group_name'
p26847
Nsa(dp26848
S'description'
p26849
S'Set the enabled status of the MooseObject.\n'
p26850
sS'cpp_type'
p26851
S'bool'
p26852
sS'default'
p26853
S'1'
p26854
sS'name'
p26855
S'enable'
p26856
sS'required'
p26857
I00
sS'group_name'
p26858
S'Advanced'
p26859
sa(dp26860
S'description'
p26861
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p26862
sS'cpp_type'
p26863
S'bool'
p26864
sS'default'
p26865
S'0'
p26866
sS'name'
p26867
S'fixed_normal'
p26868
sS'required'
p26869
I00
sS'group_name'
p26870
Nsa(dp26871
S'description'
p26872
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p26873
sS'cpp_type'
p26874
S'bool'
p26875
sS'default'
p26876
S'0'
p26877
sS'name'
p26878
S'force_prepare'
p26879
sS'required'
p26880
I00
sS'group_name'
p26881
Nsa(dp26882
S'description'
p26883
S'The name of the boundary to create\n'
p26884
sS'cpp_type'
p26885
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p26886
sS'default'
p26887
g3
sS'name'
p26888
S'new_boundary'
p26889
sS'required'
p26890
I01
sS'group_name'
p26891
Nsa(dp26892
S'description'
p26893
S'A list of normals for which to start painting sidesets\n'
p26894
sS'cpp_type'
p26895
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p26896
sS'default'
p26897
g3
sS'name'
p26898
S'normals'
p26899
sS'required'
p26900
I01
sS'group_name'
p26901
Nsa(dp26902
S'description'
p26903
g3
sS'cpp_type'
p26904
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26905
sS'default'
p26906
S'SideSetsFromNormals'
p26907
sS'name'
p26908
S'type'
p26909
sS'required'
p26910
I00
sS'group_name'
p26911
Nsa(dp26912
S'description'
p26913
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p26914
sS'cpp_type'
p26915
S'double'
p26916
sS'default'
p26917
S'0.1'
p26918
sS'name'
p26919
S'variance'
p26920
sS'required'
p26921
I00
sS'group_name'
p26922
NsasS'name'
p26923
S'/MeshModifiers/SideSetsFromNormals'
p26924
sa(dp26925
S'description'
p26926
g3
sS'subblocks'
p26927
NsS'parameters'
p26928
(lp26929
(dp26930
S'description'
p26931
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p26932
sS'cpp_type'
p26933
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26934
sS'default'
p26935
g3
sS'name'
p26936
S'control_tags'
p26937
sS'required'
p26938
I00
sS'group_name'
p26939
S'Advanced'
p26940
sa(dp26941
S'description'
p26942
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p26943
sS'cpp_type'
p26944
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26945
sS'default'
p26946
g3
sS'name'
p26947
S'depends_on'
p26948
sS'required'
p26949
I00
sS'group_name'
p26950
Nsa(dp26951
S'description'
p26952
S'Set the enabled status of the MooseObject.\n'
p26953
sS'cpp_type'
p26954
S'bool'
p26955
sS'default'
p26956
S'1'
p26957
sS'name'
p26958
S'enable'
p26959
sS'required'
p26960
I00
sS'group_name'
p26961
S'Advanced'
p26962
sa(dp26963
S'description'
p26964
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p26965
sS'cpp_type'
p26966
S'bool'
p26967
sS'default'
p26968
S'0'
p26969
sS'name'
p26970
S'fixed_normal'
p26971
sS'required'
p26972
I00
sS'group_name'
p26973
Nsa(dp26974
S'description'
p26975
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p26976
sS'cpp_type'
p26977
S'bool'
p26978
sS'default'
p26979
S'0'
p26980
sS'name'
p26981
S'force_prepare'
p26982
sS'required'
p26983
I00
sS'group_name'
p26984
Nsa(dp26985
S'description'
p26986
S'The name of the boundary to create\n'
p26987
sS'cpp_type'
p26988
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p26989
sS'default'
p26990
g3
sS'name'
p26991
S'new_boundary'
p26992
sS'required'
p26993
I01
sS'group_name'
p26994
Nsa(dp26995
S'description'
p26996
S'A list of points from which to start painting sidesets\n'
p26997
sS'cpp_type'
p26998
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p26999
sS'default'
p27000
g3
sS'name'
p27001
S'points'
p27002
sS'required'
p27003
I01
sS'group_name'
p27004
Nsa(dp27005
S'description'
p27006
g3
sS'cpp_type'
p27007
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27008
sS'default'
p27009
S'SideSetsFromPoints'
p27010
sS'name'
p27011
S'type'
p27012
sS'required'
p27013
I00
sS'group_name'
p27014
Nsa(dp27015
S'description'
p27016
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p27017
sS'cpp_type'
p27018
S'double'
p27019
sS'default'
p27020
S'0.1'
p27021
sS'name'
p27022
S'variance'
p27023
sS'required'
p27024
I00
sS'group_name'
p27025
NsasS'name'
p27026
S'/MeshModifiers/SideSetsFromPoints'
p27027
sa(dp27028
S'description'
p27029
g3
sS'subblocks'
p27030
NsS'parameters'
p27031
(lp27032
(dp27033
S'description'
p27034
S'Subdomain id to set for inside/outside the bounding box\n'
p27035
sS'cpp_type'
p27036
S'unsigned short'
p27037
sS'default'
p27038
g3
sS'name'
p27039
S'block_id'
p27040
sS'required'
p27041
I01
sS'group_name'
p27042
Nsa(dp27043
S'description'
p27044
S'Subdomain name to set for inside/outside the bounding box (optional)\n'
p27045
sS'cpp_type'
p27046
S'SubdomainName'
p27047
sS'default'
p27048
g3
sS'name'
p27049
S'block_name'
p27050
sS'required'
p27051
I00
sS'group_name'
p27052
Nsa(dp27053
S'description'
p27054
S'The bottom left point (in x,y,z with spaces in-between).\n'
p27055
sS'cpp_type'
p27056
S'libMesh::VectorValue<double>'
p27057
sS'default'
p27058
g3
sS'name'
p27059
S'bottom_left'
p27060
sS'required'
p27061
I01
sS'group_name'
p27062
Nsa(dp27063
S'description'
p27064
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27065
sS'cpp_type'
p27066
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27067
sS'default'
p27068
g3
sS'name'
p27069
S'control_tags'
p27070
sS'required'
p27071
I00
sS'group_name'
p27072
S'Advanced'
p27073
sa(dp27074
S'description'
p27075
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p27076
sS'cpp_type'
p27077
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27078
sS'default'
p27079
g3
sS'name'
p27080
S'depends_on'
p27081
sS'required'
p27082
I00
sS'group_name'
p27083
Nsa(dp27084
S'description'
p27085
S'Set the enabled status of the MooseObject.\n'
p27086
sS'cpp_type'
p27087
S'bool'
p27088
sS'default'
p27089
S'1'
p27090
sS'name'
p27091
S'enable'
p27092
sS'required'
p27093
I00
sS'group_name'
p27094
S'Advanced'
p27095
sa(dp27096
S'description'
p27097
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p27098
sS'cpp_type'
p27099
S'bool'
p27100
sS'default'
p27101
S'0'
p27102
sS'name'
p27103
S'force_prepare'
p27104
sS'required'
p27105
I00
sS'group_name'
p27106
Nsa(dp27107
S'name'
p27108
S'location'
p27109
sS'cpp_type'
p27110
S'MooseEnum'
p27111
sS'default'
p27112
S'INSIDE'
p27113
sS'description'
p27114
S'Control of where the subdomain id is to be set\n'
p27115
sS'required'
p27116
I00
sS'options'
p27117
S'INSIDE OUTSIDE'
p27118
sS'group_name'
p27119
Nsa(dp27120
S'description'
p27121
S'The bottom left point (in x,y,z with spaces in-between).\n'
p27122
sS'cpp_type'
p27123
S'libMesh::VectorValue<double>'
p27124
sS'default'
p27125
g3
sS'name'
p27126
S'top_right'
p27127
sS'required'
p27128
I01
sS'group_name'
p27129
Nsa(dp27130
S'description'
p27131
g3
sS'cpp_type'
p27132
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27133
sS'default'
p27134
S'SubdomainBoundingBox'
p27135
sS'name'
p27136
S'type'
p27137
sS'required'
p27138
I00
sS'group_name'
p27139
NsasS'name'
p27140
S'/MeshModifiers/SubdomainBoundingBox'
p27141
sa(dp27142
S'description'
p27143
g3
sS'subblocks'
p27144
NsS'parameters'
p27145
(lp27146
(dp27147
S'description'
p27148
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27149
sS'cpp_type'
p27150
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27151
sS'default'
p27152
g3
sS'name'
p27153
S'control_tags'
p27154
sS'required'
p27155
I00
sS'group_name'
p27156
S'Advanced'
p27157
sa(dp27158
S'description'
p27159
S'The MeshModifiers that this modifier relies upon (i.e. must execute before this one)\n'
p27160
sS'cpp_type'
p27161
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27162
sS'default'
p27163
g3
sS'name'
p27164
S'depends_on'
p27165
sS'required'
p27166
I00
sS'group_name'
p27167
Nsa(dp27168
S'description'
p27169
S'Set the enabled status of the MooseObject.\n'
p27170
sS'cpp_type'
p27171
S'bool'
p27172
sS'default'
p27173
S'1'
p27174
sS'name'
p27175
S'enable'
p27176
sS'required'
p27177
I00
sS'group_name'
p27178
S'Advanced'
p27179
sa(dp27180
S'description'
p27181
S'Normally all MeshModifiers run before the mesh is prepared for use. This flag can be set on an individual modifier to force preperation between modifiers where they might be needed.\n'
p27182
sS'cpp_type'
p27183
S'bool'
p27184
sS'default'
p27185
S'0'
p27186
sS'name'
p27187
S'force_prepare'
p27188
sS'required'
p27189
I00
sS'group_name'
p27190
Nsa(dp27191
S'name'
p27192
S'transform'
p27193
sS'cpp_type'
p27194
S'MooseEnum'
p27195
sS'default'
p27196
g3
sS'description'
p27197
S'The type of transformation to perform (TRANSLATE, ROTATE, SCALE)\n'
p27198
sS'required'
p27199
I01
sS'options'
p27200
S'TRANSLATE ROTATE SCALE'
p27201
sS'group_name'
p27202
Nsa(dp27203
S'description'
p27204
g3
sS'cpp_type'
p27205
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27206
sS'default'
p27207
S'Transform'
p27208
sS'name'
p27209
S'type'
p27210
sS'required'
p27211
I00
sS'group_name'
p27212
Nsa(dp27213
S'description'
p27214
S'The value to use for the transformation. When using TRANSLATE or SCALE, the xyz coordinates are applied in each direction respectively. When using ROTATE, the values are interpreted as the Euler angles phi, theta and psi given in degrees.\n'
p27215
sS'cpp_type'
p27216
S'libMesh::VectorValue<double>'
p27217
sS'default'
p27218
g3
sS'name'
p27219
S'vector_value'
p27220
sS'required'
p27221
I01
sS'group_name'
p27222
NsasS'name'
p27223
S'/MeshModifiers/Transform'
p27224
sasS'parameters'
p27225
NsS'name'
p27226
S'/MeshModifiers'
p27227
sa(dp27228
S'description'
p27229
g3
sS'subblocks'
p27230
(lp27231
(dp27232
S'description'
p27233
g3
sS'subblocks'
p27234
NsS'parameters'
p27235
(lp27236
(dp27237
S'description'
p27238
S'A string representing the Moose Object that will be built by this Action\n'
p27239
sS'cpp_type'
p27240
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27241
sS'default'
p27242
g3
sS'name'
p27243
S'type'
p27244
sS'required'
p27245
I01
sS'group_name'
p27246
NsasS'name'
p27247
S'/MultiApps/*'
p27248
sa(dp27249
S'description'
p27250
g3
sS'subblocks'
p27251
NsS'parameters'
p27252
(lp27253
(dp27254
S'name'
p27255
S'app_type'
p27256
sS'cpp_type'
p27257
S'MooseEnum'
p27258
sS'default'
p27259
g3
sS'description'
p27260
S'The type of application to build (applications not registered can be loaded with dynamic libraries. Master application type will be used if not provided.\n'
p27261
sS'required'
p27262
I00
sS'options'
p27263
S'ExampleApp'
p27264
sS'group_name'
p27265
Nsa(dp27266
S'description'
p27267
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p27268
sS'cpp_type'
p27269
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p27270
sS'default'
p27271
g3
sS'name'
p27272
S'boundary'
p27273
sS'required'
p27274
I00
sS'group_name'
p27275
Nsa(dp27276
S'description'
p27277
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p27278
sS'cpp_type'
p27279
S'double'
p27280
sS'default'
p27281
S'0.01'
p27282
sS'name'
p27283
S'bounding_box_inflation'
p27284
sS'required'
p27285
I00
sS'group_name'
p27286
Nsa(dp27287
S'description'
p27288
S"If true this will allow failed solves to attempt to 'catch up' using smaller timesteps.\n"
p27289
sS'cpp_type'
p27290
S'bool'
p27291
sS'default'
p27292
S'0'
p27293
sS'name'
p27294
S'catch_up'
p27295
sS'required'
p27296
I00
sS'group_name'
p27297
Nsa(dp27298
S'description'
p27299
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27300
sS'cpp_type'
p27301
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27302
sS'default'
p27303
g3
sS'name'
p27304
S'control_tags'
p27305
sS'required'
p27306
I00
sS'group_name'
p27307
S'Advanced'
p27308
sa(dp27309
S'description'
p27310
S'If true then while sub_cycling a steady state check will be done.  In this mode output will only be done once the MultiApp reaches the target time or steady state is reached\n'
p27311
sS'cpp_type'
p27312
S'bool'
p27313
sS'default'
p27314
S'0'
p27315
sS'name'
p27316
S'detect_steady_state'
p27317
sS'required'
p27318
I00
sS'group_name'
p27319
Nsa(dp27320
S'description'
p27321
S'Set the enabled status of the MooseObject.\n'
p27322
sS'cpp_type'
p27323
S'bool'
p27324
sS'default'
p27325
S'1'
p27326
sS'name'
p27327
S'enable'
p27328
sS'required'
p27329
I00
sS'group_name'
p27330
S'Advanced'
p27331
sa(dp27332
S'name'
p27333
S'execute_on'
p27334
sS'cpp_type'
p27335
S'MultiMooseEnum'
p27336
sS'default'
p27337
S'TIMESTEP_BEGIN'
p27338
sS'description'
p27339
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27340
sS'required'
p27341
I00
sS'options'
p27342
S'none initial linear nonlinear timestep_end timestep_begin custom'
p27343
sS'group_name'
p27344
Nsa(dp27345
S'description'
p27346
S'Determines whether this object is calculated using an implicit or explicit form\n'
p27347
sS'cpp_type'
p27348
S'bool'
p27349
sS'default'
p27350
S'1'
p27351
sS'name'
p27352
S'implicit'
p27353
sS'required'
p27354
I00
sS'group_name'
p27355
S'Advanced'
p27356
sa(dp27357
S'description'
p27358
S"The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using 'positions_from_file' it is also admissable to provide one input_file per file.\n"
p27359
sS'cpp_type'
p27360
S'std::__1::vector<FileName, std::__1::allocator<FileName> >'
p27361
sS'default'
p27362
g3
sS'name'
p27363
S'input_files'
p27364
sS'required'
p27365
I01
sS'group_name'
p27366
Nsa(dp27367
S'description'
p27368
S'Only valid when sub_cycling.  This allows transferred values to be interpolated over the time frame the MultiApp is executing over when sub_cycling\n'
p27369
sS'cpp_type'
p27370
S'bool'
p27371
sS'default'
p27372
S'0'
p27373
sS'name'
p27374
S'interpolate_transfers'
p27375
sS'required'
p27376
I00
sS'group_name'
p27377
Nsa(dp27378
S'description'
p27379
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p27380
sS'cpp_type'
p27381
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27382
sS'default'
p27383
g3
sS'name'
p27384
S'library_path'
p27385
sS'required'
p27386
I00
sS'group_name'
p27387
Nsa(dp27388
S'description'
p27389
S'Maximum number of steps to allow an app to take when trying to catch back up after a failed solve.\n'
p27390
sS'cpp_type'
p27391
S'double'
p27392
sS'default'
p27393
S'2'
p27394
sS'name'
p27395
S'max_catch_up_steps'
p27396
sS'required'
p27397
I00
sS'group_name'
p27398
Nsa(dp27399
S'description'
p27400
S'Maximum number of solve failures tolerated while sub_cycling.\n'
p27401
sS'cpp_type'
p27402
S'unsigned int'
p27403
sS'default'
p27404
S'0'
p27405
sS'name'
p27406
S'max_failures'
p27407
sS'required'
p27408
I00
sS'group_name'
p27409
Nsa(dp27410
S'description'
p27411
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p27412
sS'cpp_type'
p27413
S'unsigned int'
p27414
sS'default'
p27415
S'4294967295'
p27416
sS'name'
p27417
S'max_procs_per_app'
p27418
sS'required'
p27419
I00
sS'group_name'
p27420
Nsa(dp27421
S'description'
p27422
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p27423
sS'cpp_type'
p27424
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p27425
sS'default'
p27426
g3
sS'name'
p27427
S'move_apps'
p27428
sS'required'
p27429
I00
sS'group_name'
p27430
Nsa(dp27431
S'description'
p27432
S'The positions corresponding to each move_app.\n'
p27433
sS'cpp_type'
p27434
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p27435
sS'default'
p27436
g3
sS'name'
p27437
S'move_positions'
p27438
sS'required'
p27439
I00
sS'group_name'
p27440
Nsa(dp27441
S'description'
p27442
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p27443
sS'cpp_type'
p27444
S'double'
p27445
sS'default'
p27446
S'1.79769e+308'
p27447
sS'name'
p27448
S'move_time'
p27449
sS'required'
p27450
I00
sS'group_name'
p27451
Nsa(dp27452
S'description'
p27453
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p27454
sS'cpp_type'
p27455
S'bool'
p27456
sS'default'
p27457
S'0'
p27458
sS'name'
p27459
S'output_in_position'
p27460
sS'required'
p27461
I00
sS'group_name'
p27462
Nsa(dp27463
S'description'
p27464
S'If true then every sub-cycle will be output.\n'
p27465
sS'cpp_type'
p27466
S'bool'
p27467
sS'default'
p27468
S'0'
p27469
sS'name'
p27470
S'output_sub_cycles'
p27471
sS'required'
p27472
I00
sS'group_name'
p27473
Nsa(dp27474
S'description'
p27475
S'Toggle the display of sub-cycles on the screen.\n'
p27476
sS'cpp_type'
p27477
S'bool'
p27478
sS'default'
p27479
S'1'
p27480
sS'name'
p27481
S'print_sub_cycles'
p27482
sS'required'
p27483
I00
sS'group_name'
p27484
Nsa(dp27485
S'description'
p27486
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p27487
sS'cpp_type'
p27488
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p27489
sS'default'
p27490
g3
sS'name'
p27491
S'reset_apps'
p27492
sS'required'
p27493
I00
sS'group_name'
p27494
Nsa(dp27495
S'description'
p27496
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p27497
sS'cpp_type'
p27498
S'double'
p27499
sS'default'
p27500
S'1.79769e+308'
p27501
sS'name'
p27502
S'reset_time'
p27503
sS'required'
p27504
I00
sS'group_name'
p27505
Nsa(dp27506
S'description'
p27507
S'The relative difference between the new solution and the old solution that will be considered to be at steady state\n'
p27508
sS'cpp_type'
p27509
S'double'
p27510
sS'default'
p27511
S'1e-08'
p27512
sS'name'
p27513
S'steady_state_tol'
p27514
sS'required'
p27515
I00
sS'group_name'
p27516
Nsa(dp27517
S'description'
p27518
S"Set to true to allow this MultiApp to take smaller timesteps than the rest of the simulation.  More than one timestep will be performed for each 'master' timestep\n"
p27519
sS'cpp_type'
p27520
S'bool'
p27521
sS'default'
p27522
S'0'
p27523
sS'name'
p27524
S'sub_cycling'
p27525
sS'required'
p27526
I00
sS'group_name'
p27527
Nsa(dp27528
S'description'
p27529
S"If true this MultiApp won't participate in dt decisions and will always be fast-forwarded to the current time.\n"
p27530
sS'cpp_type'
p27531
S'bool'
p27532
sS'default'
p27533
S'0'
p27534
sS'name'
p27535
S'tolerate_failure'
p27536
sS'required'
p27537
I00
sS'group_name'
p27538
Nsa(dp27539
S'description'
p27540
g3
sS'cpp_type'
p27541
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27542
sS'default'
p27543
S'AutoPositionsMultiApp'
p27544
sS'name'
p27545
S'type'
p27546
sS'required'
p27547
I00
sS'group_name'
p27548
Nsa(dp27549
S'description'
p27550
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27551
sS'cpp_type'
p27552
S'bool'
p27553
sS'default'
p27554
S'0'
p27555
sS'name'
p27556
S'use_displaced_mesh'
p27557
sS'required'
p27558
I00
sS'group_name'
p27559
S'Advanced'
p27560
sasS'name'
p27561
S'/MultiApps/AutoPositionsMultiApp'
p27562
sa(dp27563
S'description'
p27564
g3
sS'subblocks'
p27565
NsS'parameters'
p27566
(lp27567
(dp27568
S'name'
p27569
S'app_type'
p27570
sS'cpp_type'
p27571
S'MooseEnum'
p27572
sS'default'
p27573
g3
sS'description'
p27574
S'The type of application to build (applications not registered can be loaded with dynamic libraries. Master application type will be used if not provided.\n'
p27575
sS'required'
p27576
I00
sS'options'
p27577
S'ExampleApp'
p27578
sS'group_name'
p27579
Nsa(dp27580
S'description'
p27581
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p27582
sS'cpp_type'
p27583
S'double'
p27584
sS'default'
p27585
S'0.01'
p27586
sS'name'
p27587
S'bounding_box_inflation'
p27588
sS'required'
p27589
I00
sS'group_name'
p27590
Nsa(dp27591
S'description'
p27592
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27593
sS'cpp_type'
p27594
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27595
sS'default'
p27596
g3
sS'name'
p27597
S'control_tags'
p27598
sS'required'
p27599
I00
sS'group_name'
p27600
S'Advanced'
p27601
sa(dp27602
S'description'
p27603
S'Set the enabled status of the MooseObject.\n'
p27604
sS'cpp_type'
p27605
S'bool'
p27606
sS'default'
p27607
S'1'
p27608
sS'name'
p27609
S'enable'
p27610
sS'required'
p27611
I00
sS'group_name'
p27612
S'Advanced'
p27613
sa(dp27614
S'name'
p27615
S'execute_on'
p27616
sS'cpp_type'
p27617
S'MultiMooseEnum'
p27618
sS'default'
p27619
S'TIMESTEP_BEGIN'
p27620
sS'description'
p27621
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27622
sS'required'
p27623
I00
sS'options'
p27624
S'none initial linear nonlinear timestep_end timestep_begin custom'
p27625
sS'group_name'
p27626
Nsa(dp27627
S'description'
p27628
S"The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using 'positions_from_file' it is also admissable to provide one input_file per file.\n"
p27629
sS'cpp_type'
p27630
S'std::__1::vector<FileName, std::__1::allocator<FileName> >'
p27631
sS'default'
p27632
g3
sS'name'
p27633
S'input_files'
p27634
sS'required'
p27635
I01
sS'group_name'
p27636
Nsa(dp27637
S'description'
p27638
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p27639
sS'cpp_type'
p27640
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27641
sS'default'
p27642
g3
sS'name'
p27643
S'library_path'
p27644
sS'required'
p27645
I00
sS'group_name'
p27646
Nsa(dp27647
S'description'
p27648
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p27649
sS'cpp_type'
p27650
S'unsigned int'
p27651
sS'default'
p27652
S'4294967295'
p27653
sS'name'
p27654
S'max_procs_per_app'
p27655
sS'required'
p27656
I00
sS'group_name'
p27657
Nsa(dp27658
S'description'
p27659
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p27660
sS'cpp_type'
p27661
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p27662
sS'default'
p27663
g3
sS'name'
p27664
S'move_apps'
p27665
sS'required'
p27666
I00
sS'group_name'
p27667
Nsa(dp27668
S'description'
p27669
S'The positions corresponding to each move_app.\n'
p27670
sS'cpp_type'
p27671
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p27672
sS'default'
p27673
g3
sS'name'
p27674
S'move_positions'
p27675
sS'required'
p27676
I00
sS'group_name'
p27677
Nsa(dp27678
S'description'
p27679
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p27680
sS'cpp_type'
p27681
S'double'
p27682
sS'default'
p27683
S'1.79769e+308'
p27684
sS'name'
p27685
S'move_time'
p27686
sS'required'
p27687
I00
sS'group_name'
p27688
Nsa(dp27689
S'description'
p27690
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p27691
sS'cpp_type'
p27692
S'bool'
p27693
sS'default'
p27694
S'0'
p27695
sS'name'
p27696
S'output_in_position'
p27697
sS'required'
p27698
I00
sS'group_name'
p27699
Nsa(dp27700
S'description'
p27701
S"The positions of the App locations.  Each set of 3 values will represent a Point.  This and 'positions_file' cannot be both supplied. If this and 'positions_file' are not supplied, a single position (0,0,0) will be used\n"
p27702
sS'cpp_type'
p27703
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p27704
sS'default'
p27705
g3
sS'name'
p27706
S'positions'
p27707
sS'required'
p27708
I00
sS'group_name'
p27709
Nsa(dp27710
S'description'
p27711
S"A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  This and 'positions' cannot be both supplied\n"
p27712
sS'cpp_type'
p27713
S'std::__1::vector<FileName, std::__1::allocator<FileName> >'
p27714
sS'default'
p27715
g3
sS'name'
p27716
S'positions_file'
p27717
sS'required'
p27718
I00
sS'group_name'
p27719
Nsa(dp27720
S'description'
p27721
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p27722
sS'cpp_type'
p27723
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p27724
sS'default'
p27725
g3
sS'name'
p27726
S'reset_apps'
p27727
sS'required'
p27728
I00
sS'group_name'
p27729
Nsa(dp27730
S'description'
p27731
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p27732
sS'cpp_type'
p27733
S'double'
p27734
sS'default'
p27735
S'1.79769e+308'
p27736
sS'name'
p27737
S'reset_time'
p27738
sS'required'
p27739
I00
sS'group_name'
p27740
Nsa(dp27741
S'description'
p27742
g3
sS'cpp_type'
p27743
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27744
sS'default'
p27745
S'FullSolveMultiApp'
p27746
sS'name'
p27747
S'type'
p27748
sS'required'
p27749
I00
sS'group_name'
p27750
Nsa(dp27751
S'description'
p27752
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p27753
sS'cpp_type'
p27754
S'bool'
p27755
sS'default'
p27756
S'0'
p27757
sS'name'
p27758
S'use_displaced_mesh'
p27759
sS'required'
p27760
I00
sS'group_name'
p27761
S'Advanced'
p27762
sasS'name'
p27763
S'/MultiApps/FullSolveMultiApp'
p27764
sa(dp27765
S'description'
p27766
g3
sS'subblocks'
p27767
NsS'parameters'
p27768
(lp27769
(dp27770
S'name'
p27771
S'app_type'
p27772
sS'cpp_type'
p27773
S'MooseEnum'
p27774
sS'default'
p27775
g3
sS'description'
p27776
S'The type of application to build (applications not registered can be loaded with dynamic libraries. Master application type will be used if not provided.\n'
p27777
sS'required'
p27778
I00
sS'options'
p27779
S'ExampleApp'
p27780
sS'group_name'
p27781
Nsa(dp27782
S'description'
p27783
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p27784
sS'cpp_type'
p27785
S'double'
p27786
sS'default'
p27787
S'0.01'
p27788
sS'name'
p27789
S'bounding_box_inflation'
p27790
sS'required'
p27791
I00
sS'group_name'
p27792
Nsa(dp27793
S'description'
p27794
S"If true this will allow failed solves to attempt to 'catch up' using smaller timesteps.\n"
p27795
sS'cpp_type'
p27796
S'bool'
p27797
sS'default'
p27798
S'0'
p27799
sS'name'
p27800
S'catch_up'
p27801
sS'required'
p27802
I00
sS'group_name'
p27803
Nsa(dp27804
S'description'
p27805
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p27806
sS'cpp_type'
p27807
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27808
sS'default'
p27809
g3
sS'name'
p27810
S'control_tags'
p27811
sS'required'
p27812
I00
sS'group_name'
p27813
S'Advanced'
p27814
sa(dp27815
S'description'
p27816
S'If true then while sub_cycling a steady state check will be done.  In this mode output will only be done once the MultiApp reaches the target time or steady state is reached\n'
p27817
sS'cpp_type'
p27818
S'bool'
p27819
sS'default'
p27820
S'0'
p27821
sS'name'
p27822
S'detect_steady_state'
p27823
sS'required'
p27824
I00
sS'group_name'
p27825
Nsa(dp27826
S'description'
p27827
S'Set the enabled status of the MooseObject.\n'
p27828
sS'cpp_type'
p27829
S'bool'
p27830
sS'default'
p27831
S'1'
p27832
sS'name'
p27833
S'enable'
p27834
sS'required'
p27835
I00
sS'group_name'
p27836
S'Advanced'
p27837
sa(dp27838
S'name'
p27839
S'execute_on'
p27840
sS'cpp_type'
p27841
S'MultiMooseEnum'
p27842
sS'default'
p27843
S'TIMESTEP_BEGIN'
p27844
sS'description'
p27845
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p27846
sS'required'
p27847
I00
sS'options'
p27848
S'none initial linear nonlinear timestep_end timestep_begin custom'
p27849
sS'group_name'
p27850
Nsa(dp27851
S'description'
p27852
S'Determines whether this object is calculated using an implicit or explicit form\n'
p27853
sS'cpp_type'
p27854
S'bool'
p27855
sS'default'
p27856
S'1'
p27857
sS'name'
p27858
S'implicit'
p27859
sS'required'
p27860
I00
sS'group_name'
p27861
S'Advanced'
p27862
sa(dp27863
S'description'
p27864
S"The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.  When using 'positions_from_file' it is also admissable to provide one input_file per file.\n"
p27865
sS'cpp_type'
p27866
S'std::__1::vector<FileName, std::__1::allocator<FileName> >'
p27867
sS'default'
p27868
g3
sS'name'
p27869
S'input_files'
p27870
sS'required'
p27871
I01
sS'group_name'
p27872
Nsa(dp27873
S'description'
p27874
S'Only valid when sub_cycling.  This allows transferred values to be interpolated over the time frame the MultiApp is executing over when sub_cycling\n'
p27875
sS'cpp_type'
p27876
S'bool'
p27877
sS'default'
p27878
S'0'
p27879
sS'name'
p27880
S'interpolate_transfers'
p27881
sS'required'
p27882
I00
sS'group_name'
p27883
Nsa(dp27884
S'description'
p27885
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p27886
sS'cpp_type'
p27887
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27888
sS'default'
p27889
g3
sS'name'
p27890
S'library_path'
p27891
sS'required'
p27892
I00
sS'group_name'
p27893
Nsa(dp27894
S'description'
p27895
S'Maximum number of steps to allow an app to take when trying to catch back up after a failed solve.\n'
p27896
sS'cpp_type'
p27897
S'double'
p27898
sS'default'
p27899
S'2'
p27900
sS'name'
p27901
S'max_catch_up_steps'
p27902
sS'required'
p27903
I00
sS'group_name'
p27904
Nsa(dp27905
S'description'
p27906
S'Maximum number of solve failures tolerated while sub_cycling.\n'
p27907
sS'cpp_type'
p27908
S'unsigned int'
p27909
sS'default'
p27910
S'0'
p27911
sS'name'
p27912
S'max_failures'
p27913
sS'required'
p27914
I00
sS'group_name'
p27915
Nsa(dp27916
S'description'
p27917
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p27918
sS'cpp_type'
p27919
S'unsigned int'
p27920
sS'default'
p27921
S'4294967295'
p27922
sS'name'
p27923
S'max_procs_per_app'
p27924
sS'required'
p27925
I00
sS'group_name'
p27926
Nsa(dp27927
S'description'
p27928
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p27929
sS'cpp_type'
p27930
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p27931
sS'default'
p27932
g3
sS'name'
p27933
S'move_apps'
p27934
sS'required'
p27935
I00
sS'group_name'
p27936
Nsa(dp27937
S'description'
p27938
S'The positions corresponding to each move_app.\n'
p27939
sS'cpp_type'
p27940
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p27941
sS'default'
p27942
g3
sS'name'
p27943
S'move_positions'
p27944
sS'required'
p27945
I00
sS'group_name'
p27946
Nsa(dp27947
S'description'
p27948
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p27949
sS'cpp_type'
p27950
S'double'
p27951
sS'default'
p27952
S'1.79769e+308'
p27953
sS'name'
p27954
S'move_time'
p27955
sS'required'
p27956
I00
sS'group_name'
p27957
Nsa(dp27958
S'description'
p27959
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p27960
sS'cpp_type'
p27961
S'bool'
p27962
sS'default'
p27963
S'0'
p27964
sS'name'
p27965
S'output_in_position'
p27966
sS'required'
p27967
I00
sS'group_name'
p27968
Nsa(dp27969
S'description'
p27970
S'If true then every sub-cycle will be output.\n'
p27971
sS'cpp_type'
p27972
S'bool'
p27973
sS'default'
p27974
S'0'
p27975
sS'name'
p27976
S'output_sub_cycles'
p27977
sS'required'
p27978
I00
sS'group_name'
p27979
Nsa(dp27980
S'description'
p27981
S"The positions of the App locations.  Each set of 3 values will represent a Point.  This and 'positions_file' cannot be both supplied. If this and 'positions_file' are not supplied, a single position (0,0,0) will be used\n"
p27982
sS'cpp_type'
p27983
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p27984
sS'default'
p27985
g3
sS'name'
p27986
S'positions'
p27987
sS'required'
p27988
I00
sS'group_name'
p27989
Nsa(dp27990
S'description'
p27991
S"A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  This and 'positions' cannot be both supplied\n"
p27992
sS'cpp_type'
p27993
S'std::__1::vector<FileName, std::__1::allocator<FileName> >'
p27994
sS'default'
p27995
g3
sS'name'
p27996
S'positions_file'
p27997
sS'required'
p27998
I00
sS'group_name'
p27999
Nsa(dp28000
S'description'
p28001
S'Toggle the display of sub-cycles on the screen.\n'
p28002
sS'cpp_type'
p28003
S'bool'
p28004
sS'default'
p28005
S'1'
p28006
sS'name'
p28007
S'print_sub_cycles'
p28008
sS'required'
p28009
I00
sS'group_name'
p28010
Nsa(dp28011
S'description'
p28012
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p28013
sS'cpp_type'
p28014
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p28015
sS'default'
p28016
g3
sS'name'
p28017
S'reset_apps'
p28018
sS'required'
p28019
I00
sS'group_name'
p28020
Nsa(dp28021
S'description'
p28022
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p28023
sS'cpp_type'
p28024
S'double'
p28025
sS'default'
p28026
S'1.79769e+308'
p28027
sS'name'
p28028
S'reset_time'
p28029
sS'required'
p28030
I00
sS'group_name'
p28031
Nsa(dp28032
S'description'
p28033
S'The relative difference between the new solution and the old solution that will be considered to be at steady state\n'
p28034
sS'cpp_type'
p28035
S'double'
p28036
sS'default'
p28037
S'1e-08'
p28038
sS'name'
p28039
S'steady_state_tol'
p28040
sS'required'
p28041
I00
sS'group_name'
p28042
Nsa(dp28043
S'description'
p28044
S"Set to true to allow this MultiApp to take smaller timesteps than the rest of the simulation.  More than one timestep will be performed for each 'master' timestep\n"
p28045
sS'cpp_type'
p28046
S'bool'
p28047
sS'default'
p28048
S'0'
p28049
sS'name'
p28050
S'sub_cycling'
p28051
sS'required'
p28052
I00
sS'group_name'
p28053
Nsa(dp28054
S'description'
p28055
S"If true this MultiApp won't participate in dt decisions and will always be fast-forwarded to the current time.\n"
p28056
sS'cpp_type'
p28057
S'bool'
p28058
sS'default'
p28059
S'0'
p28060
sS'name'
p28061
S'tolerate_failure'
p28062
sS'required'
p28063
I00
sS'group_name'
p28064
Nsa(dp28065
S'description'
p28066
g3
sS'cpp_type'
p28067
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28068
sS'default'
p28069
S'TransientMultiApp'
p28070
sS'name'
p28071
S'type'
p28072
sS'required'
p28073
I00
sS'group_name'
p28074
Nsa(dp28075
S'description'
p28076
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28077
sS'cpp_type'
p28078
S'bool'
p28079
sS'default'
p28080
S'0'
p28081
sS'name'
p28082
S'use_displaced_mesh'
p28083
sS'required'
p28084
I00
sS'group_name'
p28085
S'Advanced'
p28086
sasS'name'
p28087
S'/MultiApps/TransientMultiApp'
p28088
sasS'parameters'
p28089
NsS'name'
p28090
S'/MultiApps'
p28091
sa(dp28092
S'description'
p28093
g3
sS'subblocks'
p28094
(lp28095
(dp28096
S'description'
p28097
g3
sS'subblocks'
p28098
NsS'parameters'
p28099
(lp28100
(dp28101
S'description'
p28102
S'A string representing the Moose Object that will be built by this Action\n'
p28103
sS'cpp_type'
p28104
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28105
sS'default'
p28106
g3
sS'name'
p28107
S'type'
p28108
sS'required'
p28109
I01
sS'group_name'
p28110
NsasS'name'
p28111
S'/NodalKernels/*'
p28112
sa(dp28113
S'description'
p28114
g3
sS'subblocks'
p28115
NsS'parameters'
p28116
(lp28117
(dp28118
S'description'
p28119
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28120
sS'cpp_type'
p28121
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p28122
sS'default'
p28123
g3
sS'name'
p28124
S'block'
p28125
sS'required'
p28126
I00
sS'group_name'
p28127
Nsa(dp28128
S'description'
p28129
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28130
sS'cpp_type'
p28131
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p28132
sS'default'
p28133
g3
sS'name'
p28134
S'boundary'
p28135
sS'required'
p28136
I00
sS'group_name'
p28137
Nsa(dp28138
S'description'
p28139
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28140
sS'cpp_type'
p28141
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p28142
sS'default'
p28143
g3
sS'name'
p28144
S'control_tags'
p28145
sS'required'
p28146
I00
sS'group_name'
p28147
S'Advanced'
p28148
sa(dp28149
S'description'
p28150
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p28151
sS'cpp_type'
p28152
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p28153
sS'default'
p28154
g3
sS'name'
p28155
S'diag_save_in'
p28156
sS'required'
p28157
I00
sS'group_name'
p28158
Nsa(dp28159
S'description'
p28160
S'Set the enabled status of the MooseObject.\n'
p28161
sS'cpp_type'
p28162
S'bool'
p28163
sS'default'
p28164
S'1'
p28165
sS'name'
p28166
S'enable'
p28167
sS'required'
p28168
I00
sS'group_name'
p28169
S'Advanced'
p28170
sa(dp28171
S'description'
p28172
S'Determines whether this object is calculated using an implicit or explicit form\n'
p28173
sS'cpp_type'
p28174
S'bool'
p28175
sS'default'
p28176
S'1'
p28177
sS'name'
p28178
S'implicit'
p28179
sS'required'
p28180
I00
sS'group_name'
p28181
S'Advanced'
p28182
sa(dp28183
S'description'
p28184
S"The constant rate in 'du/dt = rate'\n"
p28185
sS'cpp_type'
p28186
S'double'
p28187
sS'default'
p28188
g3
sS'name'
p28189
S'rate'
p28190
sS'required'
p28191
I01
sS'group_name'
p28192
Nsa(dp28193
S'description'
p28194
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p28195
sS'cpp_type'
p28196
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p28197
sS'default'
p28198
g3
sS'name'
p28199
S'save_in'
p28200
sS'required'
p28201
I00
sS'group_name'
p28202
Nsa(dp28203
S'description'
p28204
S'The seed for the master random number generator\n'
p28205
sS'cpp_type'
p28206
S'unsigned int'
p28207
sS'default'
p28208
S'0'
p28209
sS'name'
p28210
S'seed'
p28211
sS'required'
p28212
I00
sS'group_name'
p28213
S'Advanced'
p28214
sa(dp28215
S'description'
p28216
g3
sS'cpp_type'
p28217
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28218
sS'default'
p28219
S'ConstantRate'
p28220
sS'name'
p28221
S'type'
p28222
sS'required'
p28223
I00
sS'group_name'
p28224
Nsa(dp28225
S'description'
p28226
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28227
sS'cpp_type'
p28228
S'bool'
p28229
sS'default'
p28230
S'0'
p28231
sS'name'
p28232
S'use_displaced_mesh'
p28233
sS'required'
p28234
I00
sS'group_name'
p28235
S'Advanced'
p28236
sa(dp28237
S'description'
p28238
S'The name of the variable that this boundary condition applies to\n'
p28239
sS'cpp_type'
p28240
S'NonlinearVariableName'
p28241
sS'default'
p28242
g3
sS'name'
p28243
S'variable'
p28244
sS'required'
p28245
I01
sS'group_name'
p28246
NsasS'name'
p28247
S'/NodalKernels/ConstantRate'
p28248
sa(dp28249
S'description'
p28250
g3
sS'subblocks'
p28251
NsS'parameters'
p28252
(lp28253
(dp28254
S'description'
p28255
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28256
sS'cpp_type'
p28257
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p28258
sS'default'
p28259
g3
sS'name'
p28260
S'block'
p28261
sS'required'
p28262
I00
sS'group_name'
p28263
Nsa(dp28264
S'description'
p28265
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28266
sS'cpp_type'
p28267
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p28268
sS'default'
p28269
g3
sS'name'
p28270
S'boundary'
p28271
sS'required'
p28272
I00
sS'group_name'
p28273
Nsa(dp28274
S'description'
p28275
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28276
sS'cpp_type'
p28277
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p28278
sS'default'
p28279
g3
sS'name'
p28280
S'control_tags'
p28281
sS'required'
p28282
I00
sS'group_name'
p28283
S'Advanced'
p28284
sa(dp28285
S'description'
p28286
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p28287
sS'cpp_type'
p28288
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p28289
sS'default'
p28290
g3
sS'name'
p28291
S'diag_save_in'
p28292
sS'required'
p28293
I00
sS'group_name'
p28294
Nsa(dp28295
S'description'
p28296
S'Set the enabled status of the MooseObject.\n'
p28297
sS'cpp_type'
p28298
S'bool'
p28299
sS'default'
p28300
S'1'
p28301
sS'name'
p28302
S'enable'
p28303
sS'required'
p28304
I00
sS'group_name'
p28305
S'Advanced'
p28306
sa(dp28307
S'description'
p28308
S'Determines whether this object is calculated using an implicit or explicit form\n'
p28309
sS'cpp_type'
p28310
S'bool'
p28311
sS'default'
p28312
S'1'
p28313
sS'name'
p28314
S'implicit'
p28315
sS'required'
p28316
I00
sS'group_name'
p28317
S'Advanced'
p28318
sa(dp28319
S'description'
p28320
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p28321
sS'cpp_type'
p28322
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p28323
sS'default'
p28324
g3
sS'name'
p28325
S'save_in'
p28326
sS'required'
p28327
I00
sS'group_name'
p28328
Nsa(dp28329
S'description'
p28330
S'The seed for the master random number generator\n'
p28331
sS'cpp_type'
p28332
S'unsigned int'
p28333
sS'default'
p28334
S'0'
p28335
sS'name'
p28336
S'seed'
p28337
sS'required'
p28338
I00
sS'group_name'
p28339
S'Advanced'
p28340
sa(dp28341
S'description'
p28342
g3
sS'cpp_type'
p28343
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28344
sS'default'
p28345
S'TimeDerivativeNodalKernel'
p28346
sS'name'
p28347
S'type'
p28348
sS'required'
p28349
I00
sS'group_name'
p28350
Nsa(dp28351
S'description'
p28352
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28353
sS'cpp_type'
p28354
S'bool'
p28355
sS'default'
p28356
S'0'
p28357
sS'name'
p28358
S'use_displaced_mesh'
p28359
sS'required'
p28360
I00
sS'group_name'
p28361
S'Advanced'
p28362
sa(dp28363
S'description'
p28364
S'The name of the variable that this boundary condition applies to\n'
p28365
sS'cpp_type'
p28366
S'NonlinearVariableName'
p28367
sS'default'
p28368
g3
sS'name'
p28369
S'variable'
p28370
sS'required'
p28371
I01
sS'group_name'
p28372
NsasS'name'
p28373
S'/NodalKernels/TimeDerivativeNodalKernel'
p28374
sa(dp28375
S'description'
p28376
g3
sS'subblocks'
p28377
NsS'parameters'
p28378
(lp28379
(dp28380
S'description'
p28381
S'The list of block ids (SubdomainID) that this object will be applied\n'
p28382
sS'cpp_type'
p28383
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p28384
sS'default'
p28385
g3
sS'name'
p28386
S'block'
p28387
sS'required'
p28388
I00
sS'group_name'
p28389
Nsa(dp28390
S'description'
p28391
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p28392
sS'cpp_type'
p28393
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p28394
sS'default'
p28395
g3
sS'name'
p28396
S'boundary'
p28397
sS'required'
p28398
I00
sS'group_name'
p28399
Nsa(dp28400
S'description'
p28401
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28402
sS'cpp_type'
p28403
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p28404
sS'default'
p28405
g3
sS'name'
p28406
S'control_tags'
p28407
sS'required'
p28408
I00
sS'group_name'
p28409
S'Advanced'
p28410
sa(dp28411
S'description'
p28412
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p28413
sS'cpp_type'
p28414
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p28415
sS'default'
p28416
g3
sS'name'
p28417
S'diag_save_in'
p28418
sS'required'
p28419
I00
sS'group_name'
p28420
Nsa(dp28421
S'description'
p28422
S'Set the enabled status of the MooseObject.\n'
p28423
sS'cpp_type'
p28424
S'bool'
p28425
sS'default'
p28426
S'1'
p28427
sS'name'
p28428
S'enable'
p28429
sS'required'
p28430
I00
sS'group_name'
p28431
S'Advanced'
p28432
sa(dp28433
S'description'
p28434
S'The forcing function\n'
p28435
sS'cpp_type'
p28436
S'FunctionName'
p28437
sS'default'
p28438
g3
sS'name'
p28439
S'function'
p28440
sS'required'
p28441
I01
sS'group_name'
p28442
Nsa(dp28443
S'description'
p28444
S'Determines whether this object is calculated using an implicit or explicit form\n'
p28445
sS'cpp_type'
p28446
S'bool'
p28447
sS'default'
p28448
S'1'
p28449
sS'name'
p28450
S'implicit'
p28451
sS'required'
p28452
I00
sS'group_name'
p28453
S'Advanced'
p28454
sa(dp28455
S'description'
p28456
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p28457
sS'cpp_type'
p28458
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p28459
sS'default'
p28460
g3
sS'name'
p28461
S'save_in'
p28462
sS'required'
p28463
I00
sS'group_name'
p28464
Nsa(dp28465
S'description'
p28466
S'The seed for the master random number generator\n'
p28467
sS'cpp_type'
p28468
S'unsigned int'
p28469
sS'default'
p28470
S'0'
p28471
sS'name'
p28472
S'seed'
p28473
sS'required'
p28474
I00
sS'group_name'
p28475
S'Advanced'
p28476
sa(dp28477
S'description'
p28478
g3
sS'cpp_type'
p28479
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28480
sS'default'
p28481
S'UserForcingFunctionNodalKernel'
p28482
sS'name'
p28483
S'type'
p28484
sS'required'
p28485
I00
sS'group_name'
p28486
Nsa(dp28487
S'description'
p28488
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p28489
sS'cpp_type'
p28490
S'bool'
p28491
sS'default'
p28492
S'0'
p28493
sS'name'
p28494
S'use_displaced_mesh'
p28495
sS'required'
p28496
I00
sS'group_name'
p28497
S'Advanced'
p28498
sa(dp28499
S'description'
p28500
S'The name of the variable that this boundary condition applies to\n'
p28501
sS'cpp_type'
p28502
S'NonlinearVariableName'
p28503
sS'default'
p28504
g3
sS'name'
p28505
S'variable'
p28506
sS'required'
p28507
I01
sS'group_name'
p28508
NsasS'name'
p28509
S'/NodalKernels/UserForcingFunctionNodalKernel'
p28510
sasS'parameters'
p28511
NsS'name'
p28512
S'/NodalKernels'
p28513
sa(dp28514
S'description'
p28515
g3
sS'subblocks'
p28516
NsS'parameters'
p28517
(lp28518
(dp28519
S'description'
p28520
S'The boundary ID or name where the normals will be computed\n'
p28521
sS'cpp_type'
p28522
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p28523
sS'default'
p28524
S'ANY_BOUNDARY_ID'
p28525
sS'name'
p28526
S'boundary'
p28527
sS'required'
p28528
I00
sS'group_name'
p28529
Nsa(dp28530
S'description'
p28531
S"boundary ID or name with nodes at 'corners'\n"
p28532
sS'cpp_type'
p28533
S'BoundaryName'
p28534
sS'default'
p28535
g3
sS'name'
p28536
S'corner_boundary'
p28537
sS'required'
p28538
I00
sS'group_name'
p28539
Nsa(dp28540
S'name'
p28541
S'order'
p28542
sS'cpp_type'
p28543
S'MooseEnum'
p28544
sS'default'
p28545
S'FIRST'
p28546
sS'description'
p28547
S'Specifies the order of variables that hold the nodal normals. Needs to match the order of the mesh\n'
p28548
sS'required'
p28549
I00
sS'options'
p28550
S'FIRST SECOND'
p28551
sS'group_name'
p28552
NsasS'name'
p28553
S'/NodalNormals'
p28554
sa(dp28555
S'description'
p28556
g3
sS'subblocks'
p28557
(lp28558
(dp28559
S'description'
p28560
g3
sS'subblocks'
p28561
NsS'parameters'
p28562
(lp28563
(dp28564
S'description'
p28565
S'A string representing the Moose Object that will be built by this Action\n'
p28566
sS'cpp_type'
p28567
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28568
sS'default'
p28569
g3
sS'name'
p28570
S'type'
p28571
sS'required'
p28572
I01
sS'group_name'
p28573
NsasS'name'
p28574
S'/Outputs/*'
p28575
sa(dp28576
S'description'
p28577
g3
sS'subblocks'
p28578
NsS'parameters'
p28579
(lp28580
(dp28581
S'name'
p28582
S'additional_execute_on'
p28583
sS'cpp_type'
p28584
S'MultiMooseEnum'
p28585
sS'default'
p28586
g3
sS'description'
p28587
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p28588
sS'required'
p28589
I00
sS'options'
p28590
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p28591
sS'group_name'
p28592
Nsa(dp28593
S'description'
p28594
S'Align the outputted csv data by padding the numbers with trailing whitespace\n'
p28595
sS'cpp_type'
p28596
S'bool'
p28597
sS'default'
p28598
S'0'
p28599
sS'name'
p28600
S'align'
p28601
sS'required'
p28602
I00
sS'group_name'
p28603
Nsa(dp28604
S'description'
p28605
S'When true the date and time are appended to the output filename.\n'
p28606
sS'cpp_type'
p28607
S'bool'
p28608
sS'default'
p28609
S'0'
p28610
sS'name'
p28611
S'append_date'
p28612
sS'required'
p28613
I00
sS'group_name'
p28614
Nsa(dp28615
S'description'
p28616
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p28617
sS'cpp_type'
p28618
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28619
sS'default'
p28620
g3
sS'name'
p28621
S'append_date_format'
p28622
sS'required'
p28623
I00
sS'group_name'
p28624
Nsa(dp28625
S'description'
p28626
S'Append existing file on restart\n'
p28627
sS'cpp_type'
p28628
S'bool'
p28629
sS'default'
p28630
S'0'
p28631
sS'name'
p28632
S'append_restart'
p28633
sS'required'
p28634
I00
sS'group_name'
p28635
Nsa(dp28636
S'description'
p28637
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p28638
sS'cpp_type'
p28639
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p28640
sS'default'
p28641
g3
sS'name'
p28642
S'control_tags'
p28643
sS'required'
p28644
I00
sS'group_name'
p28645
S'Advanced'
p28646
sa(dp28647
S'description'
p28648
S"Assign the delimiter (default is ','\n"
p28649
sS'cpp_type'
p28650
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28651
sS'default'
p28652
g3
sS'name'
p28653
S'delimiter'
p28654
sS'required'
p28655
I00
sS'group_name'
p28656
Nsa(dp28657
S'description'
p28658
S'Set the enabled status of the MooseObject.\n'
p28659
sS'cpp_type'
p28660
S'bool'
p28661
sS'default'
p28662
S'1'
p28663
sS'name'
p28664
S'enable'
p28665
sS'required'
p28666
I00
sS'group_name'
p28667
S'Advanced'
p28668
sa(dp28669
S'description'
p28670
S'Time at which this output object stop operating\n'
p28671
sS'cpp_type'
p28672
S'double'
p28673
sS'default'
p28674
g3
sS'name'
p28675
S'end_time'
p28676
sS'required'
p28677
I00
sS'group_name'
p28678
S'Timing'
p28679
sa(dp28680
S'description'
p28681
S'Enable/disable the output of elemental variables\n'
p28682
sS'cpp_type'
p28683
S'bool'
p28684
sS'default'
p28685
S'1'
p28686
sS'name'
p28687
S'execute_elemental_variables'
p28688
sS'required'
p28689
I00
sS'group_name'
p28690
Nsa(dp28691
S'description'
p28692
S'Enable/disable the output of input file information\n'
p28693
sS'cpp_type'
p28694
S'bool'
p28695
sS'default'
p28696
S'1'
p28697
sS'name'
p28698
S'execute_input'
p28699
sS'required'
p28700
I00
sS'group_name'
p28701
Nsa(dp28702
S'description'
p28703
S'Enable/disable the output of nodal variables\n'
p28704
sS'cpp_type'
p28705
S'bool'
p28706
sS'default'
p28707
S'1'
p28708
sS'name'
p28709
S'execute_nodal_variables'
p28710
sS'required'
p28711
I00
sS'group_name'
p28712
Nsa(dp28713
S'name'
p28714
S'execute_on'
p28715
sS'cpp_type'
p28716
S'MultiMooseEnum'
p28717
sS'default'
p28718
S'INITIAL TIMESTEP_END'
p28719
sS'description'
p28720
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p28721
sS'required'
p28722
I00
sS'options'
p28723
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p28724
sS'group_name'
p28725
Nsa(dp28726
S'name'
p28727
S'execute_postprocessors_on'
p28728
sS'cpp_type'
p28729
S'MultiMooseEnum'
p28730
sS'default'
p28731
g3
sS'description'
p28732
S'Control of when postprocessors are output\n'
p28733
sS'required'
p28734
I00
sS'options'
p28735
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p28736
sS'group_name'
p28737
S'Variables'
p28738
sa(dp28739
S'description'
p28740
S'Enable/disable the output of aux scalar variables\n'
p28741
sS'cpp_type'
p28742
S'bool'
p28743
sS'default'
p28744
S'1'
p28745
sS'name'
p28746
S'execute_scalar_variables'
p28747
sS'required'
p28748
I00
sS'group_name'
p28749
Nsa(dp28750
S'name'
p28751
S'execute_scalars_on'
p28752
sS'cpp_type'
p28753
S'MultiMooseEnum'
p28754
sS'default'
p28755
g3
sS'description'
p28756
S'Control the output of scalar variables\n'
p28757
sS'required'
p28758
I00
sS'options'
p28759
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p28760
sS'group_name'
p28761
S'Variables'
p28762
sa(dp28763
S'description'
p28764
S'Enable/disable the output of the simulation information\n'
p28765
sS'cpp_type'
p28766
S'bool'
p28767
sS'default'
p28768
S'1'
p28769
sS'name'
p28770
S'execute_system_information'
p28771
sS'required'
p28772
I00
sS'group_name'
p28773
Nsa(dp28774
S'description'
p28775
S'Enable/disable the output of vector postprocessors\n'
p28776
sS'cpp_type'
p28777
S'bool'
p28778
sS'default'
p28779
S'1'
p28780
sS'name'
p28781
S'execute_vector_postprocessors'
p28782
sS'required'
p28783
I00
sS'group_name'
p28784
Nsa(dp28785
S'name'
p28786
S'execute_vector_postprocessors_on'
p28787
sS'cpp_type'
p28788
S'MultiMooseEnum'
p28789
sS'default'
p28790
g3
sS'description'
p28791
S'Enable/disable the output of VectorPostprocessors\n'
p28792
sS'required'
p28793
I00
sS'options'
p28794
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p28795
sS'group_name'
p28796
S'Variables'
p28797
sa(dp28798
S'description'
p28799
S'The desired solution output name without an extension\n'
p28800
sS'cpp_type'
p28801
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28802
sS'default'
p28803
g3
sS'name'
p28804
S'file_base'
p28805
sS'required'
p28806
I00
sS'group_name'
p28807
Nsa(dp28808
S'description'
p28809
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p28810
sS'cpp_type'
p28811
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p28812
sS'default'
p28813
g3
sS'name'
p28814
S'hide'
p28815
sS'required'
p28816
I00
sS'group_name'
p28817
S'Variables'
p28818
sa(dp28819
S'description'
p28820
S'The interval at which time steps are output to the solution file\n'
p28821
sS'cpp_type'
p28822
S'unsigned int'
p28823
sS'default'
p28824
S'1'
p28825
sS'name'
p28826
S'interval'
p28827
sS'required'
p28828
I00
sS'group_name'
p28829
S'Timing'
p28830
sa(dp28831
S'description'
p28832
S'Number of divisions applied to time step when outputting linear residuals\n'
p28833
sS'cpp_type'
p28834
S'double'
p28835
sS'default'
p28836
S'1000'
p28837
sS'name'
p28838
S'linear_residual_dt_divisor'
p28839
sS'required'
p28840
I00
sS'group_name'
p28841
S'PETSc'
p28842
sa(dp28843
S'description'
p28844
S'Specifies an end time to begin output on each linear residual evaluation\n'
p28845
sS'cpp_type'
p28846
S'double'
p28847
sS'default'
p28848
g3
sS'name'
p28849
S'linear_residual_end_time'
p28850
sS'required'
p28851
I00
sS'group_name'
p28852
S'PETSc'
p28853
sa(dp28854
S'description'
p28855
S'Specifies a start time to begin output on each linear residual evaluation\n'
p28856
sS'cpp_type'
p28857
S'double'
p28858
sS'default'
p28859
g3
sS'name'
p28860
S'linear_residual_start_time'
p28861
sS'required'
p28862
I00
sS'group_name'
p28863
S'PETSc'
p28864
sa(dp28865
S'description'
p28866
S'Specifies whether output occurs on each linear residual evaluation\n'
p28867
sS'cpp_type'
p28868
S'bool'
p28869
sS'default'
p28870
S'0'
p28871
sS'name'
p28872
S'linear_residuals'
p28873
sS'required'
p28874
I00
sS'group_name'
p28875
S'PETSc'
p28876
sa(dp28877
S'description'
p28878
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p28879
sS'cpp_type'
p28880
S'double'
p28881
sS'default'
p28882
S'1000'
p28883
sS'name'
p28884
S'nonlinear_residual_dt_divisor'
p28885
sS'required'
p28886
I00
sS'group_name'
p28887
S'PETSc'
p28888
sa(dp28889
S'description'
p28890
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p28891
sS'cpp_type'
p28892
S'double'
p28893
sS'default'
p28894
g3
sS'name'
p28895
S'nonlinear_residual_end_time'
p28896
sS'required'
p28897
I00
sS'group_name'
p28898
S'PETSc'
p28899
sa(dp28900
S'description'
p28901
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p28902
sS'cpp_type'
p28903
S'double'
p28904
sS'default'
p28905
g3
sS'name'
p28906
S'nonlinear_residual_start_time'
p28907
sS'required'
p28908
I00
sS'group_name'
p28909
S'PETSc'
p28910
sa(dp28911
S'description'
p28912
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p28913
sS'cpp_type'
p28914
S'bool'
p28915
sS'default'
p28916
S'0'
p28917
sS'name'
p28918
S'nonlinear_residuals'
p28919
sS'required'
p28920
I00
sS'group_name'
p28921
S'PETSc'
p28922
sa(dp28923
S'description'
p28924
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p28925
sS'cpp_type'
p28926
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p28927
sS'default'
p28928
g3
sS'name'
p28929
S'output_if_base_contains'
p28930
sS'required'
p28931
I00
sS'group_name'
p28932
S'Advanced'
p28933
sa(dp28934
S'description'
p28935
S'Specifies whether output occurs on each linear residual evaluation\n'
p28936
sS'cpp_type'
p28937
S'bool'
p28938
sS'default'
p28939
S'0'
p28940
sS'name'
p28941
S'output_linear'
p28942
sS'required'
p28943
I00
sS'group_name'
p28944
Nsa(dp28945
S'description'
p28946
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p28947
sS'cpp_type'
p28948
S'bool'
p28949
sS'default'
p28950
S'0'
p28951
sS'name'
p28952
S'output_nonlinear'
p28953
sS'required'
p28954
I00
sS'group_name'
p28955
Nsa(dp28956
S'description'
p28957
S'Enable/disable the output of postprocessors\n'
p28958
sS'cpp_type'
p28959
S'bool'
p28960
sS'default'
p28961
S'1'
p28962
sS'name'
p28963
S'output_postprocessors'
p28964
sS'required'
p28965
I00
sS'group_name'
p28966
Nsa(dp28967
S'description'
p28968
S'Set the output precision\n'
p28969
sS'cpp_type'
p28970
S'unsigned int'
p28971
sS'default'
p28972
S'14'
p28973
sS'name'
p28974
S'precision'
p28975
sS'required'
p28976
I00
sS'group_name'
p28977
Nsa(dp28978
S'description'
p28979
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p28980
sS'cpp_type'
p28981
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p28982
sS'default'
p28983
g3
sS'name'
p28984
S'show'
p28985
sS'required'
p28986
I00
sS'group_name'
p28987
S'Variables'
p28988
sa(dp28989
S'description'
p28990
S'Time at which this output object begins to operate\n'
p28991
sS'cpp_type'
p28992
S'double'
p28993
sS'default'
p28994
g3
sS'name'
p28995
S'start_time'
p28996
sS'required'
p28997
I00
sS'group_name'
p28998
S'Timing'
p28999
sa(dp29000
S'description'
p29001
S'Only export results at sync times\n'
p29002
sS'cpp_type'
p29003
S'bool'
p29004
sS'default'
p29005
S'0'
p29006
sS'name'
p29007
S'sync_only'
p29008
sS'required'
p29009
I00
sS'group_name'
p29010
S'Timing'
p29011
sa(dp29012
S'description'
p29013
S'Times at which the output and solution is forced to occur\n'
p29014
sS'cpp_type'
p29015
S'std::__1::vector<double, std::__1::allocator<double> >'
p29016
sS'default'
p29017
g3
sS'name'
p29018
S'sync_times'
p29019
sS'required'
p29020
I00
sS'group_name'
p29021
S'Timing'
p29022
sa(dp29023
S'description'
p29024
S"Whether or not the 'time' column should be written for Postprocessor CSV files\n"
p29025
sS'cpp_type'
p29026
S'bool'
p29027
sS'default'
p29028
S'1'
p29029
sS'name'
p29030
S'time_column'
p29031
sS'required'
p29032
I00
sS'group_name'
p29033
Nsa(dp29034
S'description'
p29035
S'When true and VecptorPostprocessor data exists, write a csv file containing the timestep and time information.\n'
p29036
sS'cpp_type'
p29037
S'bool'
p29038
sS'default'
p29039
S'0'
p29040
sS'name'
p29041
S'time_data'
p29042
sS'required'
p29043
I00
sS'group_name'
p29044
Nsa(dp29045
S'description'
p29046
S'Time tolerance utilized checking start and end times\n'
p29047
sS'cpp_type'
p29048
S'double'
p29049
sS'default'
p29050
S'1e-14'
p29051
sS'name'
p29052
S'time_tolerance'
p29053
sS'required'
p29054
I00
sS'group_name'
p29055
S'Timing'
p29056
sa(dp29057
S'description'
p29058
g3
sS'cpp_type'
p29059
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29060
sS'default'
p29061
S'CSV'
p29062
sS'name'
p29063
S'type'
p29064
sS'required'
p29065
I00
sS'group_name'
p29066
Nsa(dp29067
S'description'
p29068
S'Enable/disable the use of the displaced mesh for outputting\n'
p29069
sS'cpp_type'
p29070
S'bool'
p29071
sS'default'
p29072
S'0'
p29073
sS'name'
p29074
S'use_displaced'
p29075
sS'required'
p29076
I00
sS'group_name'
p29077
NsasS'name'
p29078
S'/Outputs/CSV'
p29079
sa(dp29080
S'description'
p29081
g3
sS'subblocks'
p29082
NsS'parameters'
p29083
(lp29084
(dp29085
S'name'
p29086
S'additional_execute_on'
p29087
sS'cpp_type'
p29088
S'MultiMooseEnum'
p29089
sS'default'
p29090
g3
sS'description'
p29091
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p29092
sS'required'
p29093
I00
sS'options'
p29094
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29095
sS'group_name'
p29096
Nsa(dp29097
S'description'
p29098
S'When true the date and time are appended to the output filename.\n'
p29099
sS'cpp_type'
p29100
S'bool'
p29101
sS'default'
p29102
S'0'
p29103
sS'name'
p29104
S'append_date'
p29105
sS'required'
p29106
I00
sS'group_name'
p29107
Nsa(dp29108
S'description'
p29109
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p29110
sS'cpp_type'
p29111
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29112
sS'default'
p29113
g3
sS'name'
p29114
S'append_date_format'
p29115
sS'required'
p29116
I00
sS'group_name'
p29117
Nsa(dp29118
S'description'
p29119
S'Toggle the output of binary files\n'
p29120
sS'cpp_type'
p29121
S'bool'
p29122
sS'default'
p29123
S'1'
p29124
sS'name'
p29125
S'binary'
p29126
sS'required'
p29127
I00
sS'group_name'
p29128
S'Advanced'
p29129
sa(dp29130
S'description'
p29131
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p29132
sS'cpp_type'
p29133
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p29134
sS'default'
p29135
g3
sS'name'
p29136
S'control_tags'
p29137
sS'required'
p29138
I00
sS'group_name'
p29139
S'Advanced'
p29140
sa(dp29141
S'description'
p29142
S'Set the enabled status of the MooseObject.\n'
p29143
sS'cpp_type'
p29144
S'bool'
p29145
sS'default'
p29146
S'1'
p29147
sS'name'
p29148
S'enable'
p29149
sS'required'
p29150
I00
sS'group_name'
p29151
S'Advanced'
p29152
sa(dp29153
S'description'
p29154
S'Time at which this output object stop operating\n'
p29155
sS'cpp_type'
p29156
S'double'
p29157
sS'default'
p29158
g3
sS'name'
p29159
S'end_time'
p29160
sS'required'
p29161
I00
sS'group_name'
p29162
S'Timing'
p29163
sa(dp29164
S'name'
p29165
S'execute_on'
p29166
sS'cpp_type'
p29167
S'MultiMooseEnum'
p29168
sS'default'
p29169
S'INITIAL TIMESTEP_END'
p29170
sS'description'
p29171
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p29172
sS'required'
p29173
I00
sS'options'
p29174
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29175
sS'group_name'
p29176
Nsa(dp29177
S'description'
p29178
S'The desired solution output name without an extension\n'
p29179
sS'cpp_type'
p29180
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29181
sS'default'
p29182
g3
sS'name'
p29183
S'file_base'
p29184
sS'required'
p29185
I00
sS'group_name'
p29186
Nsa(dp29187
S'description'
p29188
S'The interval at which time steps are output to the solution file\n'
p29189
sS'cpp_type'
p29190
S'unsigned int'
p29191
sS'default'
p29192
S'1'
p29193
sS'name'
p29194
S'interval'
p29195
sS'required'
p29196
I00
sS'group_name'
p29197
S'Timing'
p29198
sa(dp29199
S'description'
p29200
S'Number of divisions applied to time step when outputting linear residuals\n'
p29201
sS'cpp_type'
p29202
S'double'
p29203
sS'default'
p29204
S'1000'
p29205
sS'name'
p29206
S'linear_residual_dt_divisor'
p29207
sS'required'
p29208
I00
sS'group_name'
p29209
S'PETSc'
p29210
sa(dp29211
S'description'
p29212
S'Specifies an end time to begin output on each linear residual evaluation\n'
p29213
sS'cpp_type'
p29214
S'double'
p29215
sS'default'
p29216
g3
sS'name'
p29217
S'linear_residual_end_time'
p29218
sS'required'
p29219
I00
sS'group_name'
p29220
S'PETSc'
p29221
sa(dp29222
S'description'
p29223
S'Specifies a start time to begin output on each linear residual evaluation\n'
p29224
sS'cpp_type'
p29225
S'double'
p29226
sS'default'
p29227
g3
sS'name'
p29228
S'linear_residual_start_time'
p29229
sS'required'
p29230
I00
sS'group_name'
p29231
S'PETSc'
p29232
sa(dp29233
S'description'
p29234
S'Specifies whether output occurs on each linear residual evaluation\n'
p29235
sS'cpp_type'
p29236
S'bool'
p29237
sS'default'
p29238
S'0'
p29239
sS'name'
p29240
S'linear_residuals'
p29241
sS'required'
p29242
I00
sS'group_name'
p29243
S'PETSc'
p29244
sa(dp29245
S'description'
p29246
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p29247
sS'cpp_type'
p29248
S'double'
p29249
sS'default'
p29250
S'1000'
p29251
sS'name'
p29252
S'nonlinear_residual_dt_divisor'
p29253
sS'required'
p29254
I00
sS'group_name'
p29255
S'PETSc'
p29256
sa(dp29257
S'description'
p29258
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p29259
sS'cpp_type'
p29260
S'double'
p29261
sS'default'
p29262
g3
sS'name'
p29263
S'nonlinear_residual_end_time'
p29264
sS'required'
p29265
I00
sS'group_name'
p29266
S'PETSc'
p29267
sa(dp29268
S'description'
p29269
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p29270
sS'cpp_type'
p29271
S'double'
p29272
sS'default'
p29273
g3
sS'name'
p29274
S'nonlinear_residual_start_time'
p29275
sS'required'
p29276
I00
sS'group_name'
p29277
S'PETSc'
p29278
sa(dp29279
S'description'
p29280
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p29281
sS'cpp_type'
p29282
S'bool'
p29283
sS'default'
p29284
S'0'
p29285
sS'name'
p29286
S'nonlinear_residuals'
p29287
sS'required'
p29288
I00
sS'group_name'
p29289
S'PETSc'
p29290
sa(dp29291
S'description'
p29292
S'Number of the restart files to save\n'
p29293
sS'cpp_type'
p29294
S'unsigned int'
p29295
sS'default'
p29296
S'2'
p29297
sS'name'
p29298
S'num_files'
p29299
sS'required'
p29300
I00
sS'group_name'
p29301
Nsa(dp29302
S'description'
p29303
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p29304
sS'cpp_type'
p29305
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p29306
sS'default'
p29307
g3
sS'name'
p29308
S'output_if_base_contains'
p29309
sS'required'
p29310
I00
sS'group_name'
p29311
S'Advanced'
p29312
sa(dp29313
S'description'
p29314
S'Specifies whether output occurs on each linear residual evaluation\n'
p29315
sS'cpp_type'
p29316
S'bool'
p29317
sS'default'
p29318
S'0'
p29319
sS'name'
p29320
S'output_linear'
p29321
sS'required'
p29322
I00
sS'group_name'
p29323
Nsa(dp29324
S'description'
p29325
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p29326
sS'cpp_type'
p29327
S'bool'
p29328
sS'default'
p29329
S'0'
p29330
sS'name'
p29331
S'output_nonlinear'
p29332
sS'required'
p29333
I00
sS'group_name'
p29334
Nsa(dp29335
S'description'
p29336
S'The number of for extension suffix (e.g., out.e-s002)\n'
p29337
sS'cpp_type'
p29338
S'unsigned int'
p29339
sS'default'
p29340
S'4'
p29341
sS'name'
p29342
S'padding'
p29343
sS'required'
p29344
I00
sS'group_name'
p29345
S'Advanced'
p29346
sa(dp29347
S'description'
p29348
S'Time at which this output object begins to operate\n'
p29349
sS'cpp_type'
p29350
S'double'
p29351
sS'default'
p29352
g3
sS'name'
p29353
S'start_time'
p29354
sS'required'
p29355
I00
sS'group_name'
p29356
S'Timing'
p29357
sa(dp29358
S'description'
p29359
S'This will be appended to the file_base to create the directory name for checkpoint files.\n'
p29360
sS'cpp_type'
p29361
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29362
sS'default'
p29363
S'cp'
p29364
sS'name'
p29365
S'suffix'
p29366
sS'required'
p29367
I00
sS'group_name'
p29368
Nsa(dp29369
S'description'
p29370
S'Only export results at sync times\n'
p29371
sS'cpp_type'
p29372
S'bool'
p29373
sS'default'
p29374
S'0'
p29375
sS'name'
p29376
S'sync_only'
p29377
sS'required'
p29378
I00
sS'group_name'
p29379
S'Timing'
p29380
sa(dp29381
S'description'
p29382
S'Times at which the output and solution is forced to occur\n'
p29383
sS'cpp_type'
p29384
S'std::__1::vector<double, std::__1::allocator<double> >'
p29385
sS'default'
p29386
g3
sS'name'
p29387
S'sync_times'
p29388
sS'required'
p29389
I00
sS'group_name'
p29390
S'Timing'
p29391
sa(dp29392
S'description'
p29393
S'Time tolerance utilized checking start and end times\n'
p29394
sS'cpp_type'
p29395
S'double'
p29396
sS'default'
p29397
S'1e-14'
p29398
sS'name'
p29399
S'time_tolerance'
p29400
sS'required'
p29401
I00
sS'group_name'
p29402
S'Timing'
p29403
sa(dp29404
S'description'
p29405
g3
sS'cpp_type'
p29406
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29407
sS'default'
p29408
S'Checkpoint'
p29409
sS'name'
p29410
S'type'
p29411
sS'required'
p29412
I00
sS'group_name'
p29413
Nsa(dp29414
S'description'
p29415
S'Enable/disable the use of the displaced mesh for outputting\n'
p29416
sS'cpp_type'
p29417
S'bool'
p29418
sS'default'
p29419
S'0'
p29420
sS'name'
p29421
S'use_displaced'
p29422
sS'required'
p29423
I00
sS'group_name'
p29424
NsasS'name'
p29425
S'/Outputs/Checkpoint'
p29426
sa(dp29427
S'description'
p29428
g3
sS'subblocks'
p29429
NsS'parameters'
p29430
(lp29431
(dp29432
S'name'
p29433
S'additional_execute_on'
p29434
sS'cpp_type'
p29435
S'MultiMooseEnum'
p29436
sS'default'
p29437
g3
sS'description'
p29438
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p29439
sS'required'
p29440
I00
sS'options'
p29441
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29442
sS'group_name'
p29443
Nsa(dp29444
S'description'
p29445
S'If true, all variable norms will be printed after each solve\n'
p29446
sS'cpp_type'
p29447
S'bool'
p29448
sS'default'
p29449
S'0'
p29450
sS'name'
p29451
S'all_variable_norms'
p29452
sS'required'
p29453
I00
sS'group_name'
p29454
S'Norms'
p29455
sa(dp29456
S'description'
p29457
S'When true the date and time are appended to the output filename.\n'
p29458
sS'cpp_type'
p29459
S'bool'
p29460
sS'default'
p29461
S'0'
p29462
sS'name'
p29463
S'append_date'
p29464
sS'required'
p29465
I00
sS'group_name'
p29466
Nsa(dp29467
S'description'
p29468
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p29469
sS'cpp_type'
p29470
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29471
sS'default'
p29472
g3
sS'name'
p29473
S'append_date_format'
p29474
sS'required'
p29475
I00
sS'group_name'
p29476
Nsa(dp29477
S'description'
p29478
S'Append existing file on restart\n'
p29479
sS'cpp_type'
p29480
S'bool'
p29481
sS'default'
p29482
S'0'
p29483
sS'name'
p29484
S'append_restart'
p29485
sS'required'
p29486
I00
sS'group_name'
p29487
Nsa(dp29488
S'description'
p29489
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p29490
sS'cpp_type'
p29491
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p29492
sS'default'
p29493
g3
sS'name'
p29494
S'control_tags'
p29495
sS'required'
p29496
I00
sS'group_name'
p29497
S'Advanced'
p29498
sa(dp29499
S'description'
p29500
S'Set the enabled status of the MooseObject.\n'
p29501
sS'cpp_type'
p29502
S'bool'
p29503
sS'default'
p29504
S'1'
p29505
sS'name'
p29506
S'enable'
p29507
sS'required'
p29508
I00
sS'group_name'
p29509
S'Advanced'
p29510
sa(dp29511
S'description'
p29512
S'Time at which this output object stop operating\n'
p29513
sS'cpp_type'
p29514
S'double'
p29515
sS'default'
p29516
g3
sS'name'
p29517
S'end_time'
p29518
sS'required'
p29519
I00
sS'group_name'
p29520
S'Timing'
p29521
sa(dp29522
S'description'
p29523
S'Enable/disable the output of elemental variables\n'
p29524
sS'cpp_type'
p29525
S'bool'
p29526
sS'default'
p29527
S'1'
p29528
sS'name'
p29529
S'execute_elemental_variables'
p29530
sS'required'
p29531
I00
sS'group_name'
p29532
Nsa(dp29533
S'description'
p29534
S'Enable/disable the output of input file information\n'
p29535
sS'cpp_type'
p29536
S'bool'
p29537
sS'default'
p29538
S'1'
p29539
sS'name'
p29540
S'execute_input'
p29541
sS'required'
p29542
I00
sS'group_name'
p29543
Nsa(dp29544
S'name'
p29545
S'execute_input_on'
p29546
sS'cpp_type'
p29547
S'MultiMooseEnum'
p29548
sS'default'
p29549
g3
sS'description'
p29550
S'Enable/disable the output of the input file\n'
p29551
sS'required'
p29552
I00
sS'options'
p29553
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29554
sS'group_name'
p29555
S'Variables'
p29556
sa(dp29557
S'description'
p29558
S'Enable/disable the output of nodal variables\n'
p29559
sS'cpp_type'
p29560
S'bool'
p29561
sS'default'
p29562
S'1'
p29563
sS'name'
p29564
S'execute_nodal_variables'
p29565
sS'required'
p29566
I00
sS'group_name'
p29567
Nsa(dp29568
S'name'
p29569
S'execute_on'
p29570
sS'cpp_type'
p29571
S'MultiMooseEnum'
p29572
sS'default'
p29573
S'FAILED INITIAL LINEAR NONLINEAR TIMESTEP_BEGIN TIMESTEP_END'
p29574
sS'description'
p29575
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p29576
sS'required'
p29577
I00
sS'options'
p29578
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29579
sS'group_name'
p29580
Nsa(dp29581
S'name'
p29582
S'execute_postprocessors_on'
p29583
sS'cpp_type'
p29584
S'MultiMooseEnum'
p29585
sS'default'
p29586
S'INITIAL TIMESTEP_END'
p29587
sS'description'
p29588
S'Control of when postprocessors are output\n'
p29589
sS'required'
p29590
I00
sS'options'
p29591
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29592
sS'group_name'
p29593
S'Variables'
p29594
sa(dp29595
S'description'
p29596
S'Enable/disable the output of aux scalar variables\n'
p29597
sS'cpp_type'
p29598
S'bool'
p29599
sS'default'
p29600
S'1'
p29601
sS'name'
p29602
S'execute_scalar_variables'
p29603
sS'required'
p29604
I00
sS'group_name'
p29605
Nsa(dp29606
S'name'
p29607
S'execute_scalars_on'
p29608
sS'cpp_type'
p29609
S'MultiMooseEnum'
p29610
sS'default'
p29611
S'INITIAL TIMESTEP_END'
p29612
sS'description'
p29613
S'Control the output of scalar variables\n'
p29614
sS'required'
p29615
I00
sS'options'
p29616
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29617
sS'group_name'
p29618
S'Variables'
p29619
sa(dp29620
S'description'
p29621
S'Enable/disable the output of the simulation information\n'
p29622
sS'cpp_type'
p29623
S'bool'
p29624
sS'default'
p29625
S'1'
p29626
sS'name'
p29627
S'execute_system_information'
p29628
sS'required'
p29629
I00
sS'group_name'
p29630
Nsa(dp29631
S'name'
p29632
S'execute_system_information_on'
p29633
sS'cpp_type'
p29634
S'MultiMooseEnum'
p29635
sS'default'
p29636
S'INITIAL'
p29637
sS'description'
p29638
S'Control when the output of the simulation information occurs\n'
p29639
sS'required'
p29640
I00
sS'options'
p29641
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29642
sS'group_name'
p29643
S'Variables'
p29644
sa(dp29645
S'description'
p29646
S'Enable/disable the output of vector postprocessors\n'
p29647
sS'cpp_type'
p29648
S'bool'
p29649
sS'default'
p29650
S'1'
p29651
sS'name'
p29652
S'execute_vector_postprocessors'
p29653
sS'required'
p29654
I00
sS'group_name'
p29655
Nsa(dp29656
S'name'
p29657
S'execute_vector_postprocessors_on'
p29658
sS'cpp_type'
p29659
S'MultiMooseEnum'
p29660
sS'default'
p29661
S'INITIAL TIMESTEP_END'
p29662
sS'description'
p29663
S'Enable/disable the output of VectorPostprocessors\n'
p29664
sS'required'
p29665
I00
sS'options'
p29666
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29667
sS'group_name'
p29668
S'Variables'
p29669
sa(dp29670
S'description'
p29671
S'The desired solution output name without an extension\n'
p29672
sS'cpp_type'
p29673
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29674
sS'default'
p29675
g3
sS'name'
p29676
S'file_base'
p29677
sS'required'
p29678
I00
sS'group_name'
p29679
Nsa(dp29680
S'name'
p29681
S'fit_mode'
p29682
sS'cpp_type'
p29683
S'MooseEnum'
p29684
sS'default'
p29685
S'ENVIRONMENT'
p29686
sS'description'
p29687
S'Specifies the wrapping mode for post-processor tables that are printed to the screen (ENVIRONMENT: Read "MOOSE_PPS_WIDTH" for desired width, AUTO: Attempt to determine width automatically (serial only), <n>: Desired width\n'
p29688
sS'required'
p29689
I00
sS'options'
p29690
S'ENVIRONMENT AUTO 80 120 160'
p29691
sS'group_name'
p29692
Nsa(dp29693
S'description'
p29694
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p29695
sS'cpp_type'
p29696
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p29697
sS'default'
p29698
g3
sS'name'
p29699
S'hide'
p29700
sS'required'
p29701
I00
sS'group_name'
p29702
S'Variables'
p29703
sa(dp29704
S'description'
p29705
S'The interval at which time steps are output to the solution file\n'
p29706
sS'cpp_type'
p29707
S'unsigned int'
p29708
sS'default'
p29709
S'1'
p29710
sS'name'
p29711
S'interval'
p29712
sS'required'
p29713
I00
sS'group_name'
p29714
S'Timing'
p29715
sa(dp29716
S'description'
p29717
S'Print the libMesh performance log, requires libMesh to be configured with --enable-perflog\n'
p29718
sS'cpp_type'
p29719
S'bool'
p29720
sS'default'
p29721
S'1'
p29722
sS'name'
p29723
S'libmesh_log'
p29724
sS'required'
p29725
I00
sS'group_name'
p29726
S'Performance Log'
p29727
sa(dp29728
S'description'
p29729
S'Number of divisions applied to time step when outputting linear residuals\n'
p29730
sS'cpp_type'
p29731
S'double'
p29732
sS'default'
p29733
S'1000'
p29734
sS'name'
p29735
S'linear_residual_dt_divisor'
p29736
sS'required'
p29737
I00
sS'group_name'
p29738
S'PETSc'
p29739
sa(dp29740
S'description'
p29741
S'Specifies an end time to begin output on each linear residual evaluation\n'
p29742
sS'cpp_type'
p29743
S'double'
p29744
sS'default'
p29745
g3
sS'name'
p29746
S'linear_residual_end_time'
p29747
sS'required'
p29748
I00
sS'group_name'
p29749
S'PETSc'
p29750
sa(dp29751
S'description'
p29752
S'Specifies a start time to begin output on each linear residual evaluation\n'
p29753
sS'cpp_type'
p29754
S'double'
p29755
sS'default'
p29756
g3
sS'name'
p29757
S'linear_residual_start_time'
p29758
sS'required'
p29759
I00
sS'group_name'
p29760
S'PETSc'
p29761
sa(dp29762
S'description'
p29763
S'Specifies whether output occurs on each linear residual evaluation\n'
p29764
sS'cpp_type'
p29765
S'bool'
p29766
sS'default'
p29767
S'0'
p29768
sS'name'
p29769
S'linear_residuals'
p29770
sS'required'
p29771
I00
sS'group_name'
p29772
S'PETSc'
p29773
sa(dp29774
S'description'
p29775
S'The maximum number of postprocessor/scalar values displayed on screen during a timestep (set to 0 for unlimited)\n'
p29776
sS'cpp_type'
p29777
S'unsigned int'
p29778
sS'default'
p29779
S'15'
p29780
sS'name'
p29781
S'max_rows'
p29782
sS'required'
p29783
I00
sS'group_name'
p29784
S'Advanced'
p29785
sa(dp29786
S'description'
p29787
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p29788
sS'cpp_type'
p29789
S'double'
p29790
sS'default'
p29791
S'1000'
p29792
sS'name'
p29793
S'nonlinear_residual_dt_divisor'
p29794
sS'required'
p29795
I00
sS'group_name'
p29796
S'PETSc'
p29797
sa(dp29798
S'description'
p29799
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p29800
sS'cpp_type'
p29801
S'double'
p29802
sS'default'
p29803
g3
sS'name'
p29804
S'nonlinear_residual_end_time'
p29805
sS'required'
p29806
I00
sS'group_name'
p29807
S'PETSc'
p29808
sa(dp29809
S'description'
p29810
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p29811
sS'cpp_type'
p29812
S'double'
p29813
sS'default'
p29814
g3
sS'name'
p29815
S'nonlinear_residual_start_time'
p29816
sS'required'
p29817
I00
sS'group_name'
p29818
S'PETSc'
p29819
sa(dp29820
S'description'
p29821
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p29822
sS'cpp_type'
p29823
S'bool'
p29824
sS'default'
p29825
S'0'
p29826
sS'name'
p29827
S'nonlinear_residuals'
p29828
sS'required'
p29829
I00
sS'group_name'
p29830
S'PETSc'
p29831
sa(dp29832
S'description'
p29833
S'Multiplier utilized to determine if a residual norm is an outlier. If the variable residual is less than multiplier[0] times the total residual it is colored red. If the variable residual is less than multiplier[1] times the average residual it is colored yellow.\n'
p29834
sS'cpp_type'
p29835
S'std::__1::vector<double, std::__1::allocator<double> >'
p29836
sS'default'
p29837
S'0.8 2'
p29838
sS'name'
p29839
S'outlier_multiplier'
p29840
sS'required'
p29841
I00
sS'group_name'
p29842
S'Norms'
p29843
sa(dp29844
S'description'
p29845
S'If true, outlier variable norms will be printed after each solve\n'
p29846
sS'cpp_type'
p29847
S'bool'
p29848
sS'default'
p29849
S'1'
p29850
sS'name'
p29851
S'outlier_variable_norms'
p29852
sS'required'
p29853
I00
sS'group_name'
p29854
S'Norms'
p29855
sa(dp29856
S'description'
p29857
S'Output to the file\n'
p29858
sS'cpp_type'
p29859
S'bool'
p29860
sS'default'
p29861
S'0'
p29862
sS'name'
p29863
S'output_file'
p29864
sS'required'
p29865
I00
sS'group_name'
p29866
Nsa(dp29867
S'description'
p29868
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p29869
sS'cpp_type'
p29870
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p29871
sS'default'
p29872
g3
sS'name'
p29873
S'output_if_base_contains'
p29874
sS'required'
p29875
I00
sS'group_name'
p29876
S'Advanced'
p29877
sa(dp29878
S'description'
p29879
S'Specifies whether output occurs on each linear residual evaluation\n'
p29880
sS'cpp_type'
p29881
S'bool'
p29882
sS'default'
p29883
S'0'
p29884
sS'name'
p29885
S'output_linear'
p29886
sS'required'
p29887
I00
sS'group_name'
p29888
Nsa(dp29889
S'description'
p29890
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p29891
sS'cpp_type'
p29892
S'bool'
p29893
sS'default'
p29894
S'0'
p29895
sS'name'
p29896
S'output_nonlinear'
p29897
sS'required'
p29898
I00
sS'group_name'
p29899
Nsa(dp29900
S'description'
p29901
S'Enable/disable the output of postprocessors\n'
p29902
sS'cpp_type'
p29903
S'bool'
p29904
sS'default'
p29905
S'1'
p29906
sS'name'
p29907
S'output_postprocessors'
p29908
sS'required'
p29909
I00
sS'group_name'
p29910
Nsa(dp29911
S'description'
p29912
S'Output to the screen\n'
p29913
sS'cpp_type'
p29914
S'bool'
p29915
sS'default'
p29916
S'1'
p29917
sS'name'
p29918
S'output_screen'
p29919
sS'required'
p29920
I00
sS'group_name'
p29921
Nsa(dp29922
S'description'
p29923
S'The number of for extension suffix (e.g., out.e-s002)\n'
p29924
sS'cpp_type'
p29925
S'unsigned int'
p29926
sS'default'
p29927
S'4'
p29928
sS'name'
p29929
S'padding'
p29930
sS'required'
p29931
I00
sS'group_name'
p29932
S'Advanced'
p29933
sa(dp29934
S'description'
p29935
S"Print the libMesh performance log header (requires that 'perf_log = true')\n"
p29936
sS'cpp_type'
p29937
S'bool'
p29938
sS'default'
p29939
g3
sS'name'
p29940
S'perf_header'
p29941
sS'required'
p29942
I00
sS'group_name'
p29943
S'Perf Log'
p29944
sa(dp29945
S'description'
p29946
S'If true, all performance logs will be printed. The individual log settings will override this option.\n'
p29947
sS'cpp_type'
p29948
S'bool'
p29949
sS'default'
p29950
S'0'
p29951
sS'name'
p29952
S'perf_log'
p29953
sS'required'
p29954
I00
sS'group_name'
p29955
S'Perf Log'
p29956
sa(dp29957
S'description'
p29958
S'If set, the performance log will be printed every n time steps\n'
p29959
sS'cpp_type'
p29960
S'unsigned int'
p29961
sS'default'
p29962
S'0'
p29963
sS'name'
p29964
S'perf_log_interval'
p29965
sS'required'
p29966
I00
sS'group_name'
p29967
Nsa(dp29968
S'description'
p29969
S'When true, each time the mesh is changed the mesh information is printed\n'
p29970
sS'cpp_type'
p29971
S'bool'
p29972
sS'default'
p29973
S'0'
p29974
sS'name'
p29975
S'print_mesh_changed_info'
p29976
sS'required'
p29977
I00
sS'group_name'
p29978
Nsa(dp29979
S'description'
p29980
S'Control the printing of time and dt in scientific notation\n'
p29981
sS'cpp_type'
p29982
S'bool'
p29983
sS'default'
p29984
S'0'
p29985
sS'name'
p29986
S'scientific_time'
p29987
sS'required'
p29988
I00
sS'group_name'
p29989
Nsa(dp29990
S'description'
p29991
S"Toggles the printing of the 'Setup Performance' log\n"
p29992
sS'cpp_type'
p29993
S'bool'
p29994
sS'default'
p29995
g3
sS'name'
p29996
S'setup_log'
p29997
sS'required'
p29998
I00
sS'group_name'
p29999
S'Perf Log'
p30000
sa(dp30001
S'description'
p30002
S'Specifies whether or not the Setup Performance log should be printed before the first time step.  It will still be printed at the end if perf_log is also enabled and likewise disabled if perf_log is false\n'
p30003
sS'cpp_type'
p30004
S'bool'
p30005
sS'default'
p30006
S'0'
p30007
sS'name'
p30008
S'setup_log_early'
p30009
sS'required'
p30010
I00
sS'group_name'
p30011
S'Perf Log'
p30012
sa(dp30013
S'description'
p30014
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p30015
sS'cpp_type'
p30016
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p30017
sS'default'
p30018
g3
sS'name'
p30019
S'show'
p30020
sS'required'
p30021
I00
sS'group_name'
p30022
S'Variables'
p30023
sa(dp30024
S'description'
p30025
S'Indent multiapp output using the multiapp name\n'
p30026
sS'cpp_type'
p30027
S'bool'
p30028
sS'default'
p30029
S'0'
p30030
sS'name'
p30031
S'show_multiapp_name'
p30032
sS'required'
p30033
I00
sS'group_name'
p30034
S'Advanced'
p30035
sa(dp30036
S'description'
p30037
S"Toggles the printing of the 'Moose Test Performance' log\n"
p30038
sS'cpp_type'
p30039
S'bool'
p30040
sS'default'
p30041
g3
sS'name'
p30042
S'solve_log'
p30043
sS'required'
p30044
I00
sS'group_name'
p30045
S'Perf Log'
p30046
sa(dp30047
S'description'
p30048
S'Time at which this output object begins to operate\n'
p30049
sS'cpp_type'
p30050
S'double'
p30051
sS'default'
p30052
g3
sS'name'
p30053
S'start_time'
p30054
sS'required'
p30055
I00
sS'group_name'
p30056
S'Timing'
p30057
sa(dp30058
S'description'
p30059
S'Only export results at sync times\n'
p30060
sS'cpp_type'
p30061
S'bool'
p30062
sS'default'
p30063
S'0'
p30064
sS'name'
p30065
S'sync_only'
p30066
sS'required'
p30067
I00
sS'group_name'
p30068
S'Timing'
p30069
sa(dp30070
S'description'
p30071
S'Times at which the output and solution is forced to occur\n'
p30072
sS'cpp_type'
p30073
S'std::__1::vector<double, std::__1::allocator<double> >'
p30074
sS'default'
p30075
g3
sS'name'
p30076
S'sync_times'
p30077
sS'required'
p30078
I00
sS'group_name'
p30079
S'Timing'
p30080
sa(dp30081
S'name'
p30082
S'system_info'
p30083
sS'cpp_type'
p30084
S'MultiMooseEnum'
p30085
sS'default'
p30086
S'AUX EXECUTION FRAMEWORK MESH NONLINEAR'
p30087
sS'description'
p30088
S"List of information types to display ('framework', 'mesh', 'aux', 'nonlinear', 'execution', 'output')\n"
p30089
sS'required'
p30090
I00
sS'options'
p30091
S'framework mesh aux nonlinear execution output'
p30092
sS'group_name'
p30093
S'Advanced'
p30094
sa(dp30095
S'description'
p30096
S"Whether or not the 'time' column should be written for Postprocessor CSV files\n"
p30097
sS'cpp_type'
p30098
S'bool'
p30099
sS'default'
p30100
S'1'
p30101
sS'name'
p30102
S'time_column'
p30103
sS'required'
p30104
I00
sS'group_name'
p30105
Nsa(dp30106
S'description'
p30107
S'When true and VecptorPostprocessor data exists, write a csv file containing the timestep and time information.\n'
p30108
sS'cpp_type'
p30109
S'bool'
p30110
sS'default'
p30111
S'0'
p30112
sS'name'
p30113
S'time_data'
p30114
sS'required'
p30115
I00
sS'group_name'
p30116
Nsa(dp30117
S'description'
p30118
S'The number of significant digits that are printed on time related outputs\n'
p30119
sS'cpp_type'
p30120
S'unsigned int'
p30121
sS'default'
p30122
g3
sS'name'
p30123
S'time_precision'
p30124
sS'required'
p30125
I00
sS'group_name'
p30126
Nsa(dp30127
S'description'
p30128
S'Time tolerance utilized checking start and end times\n'
p30129
sS'cpp_type'
p30130
S'double'
p30131
sS'default'
p30132
S'1e-14'
p30133
sS'name'
p30134
S'time_tolerance'
p30135
sS'required'
p30136
I00
sS'group_name'
p30137
S'Timing'
p30138
sa(dp30139
S'description'
p30140
g3
sS'cpp_type'
p30141
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30142
sS'default'
p30143
S'Console'
p30144
sS'name'
p30145
S'type'
p30146
sS'required'
p30147
I00
sS'group_name'
p30148
Nsa(dp30149
S'description'
p30150
S'Enable/disable the use of the displaced mesh for outputting\n'
p30151
sS'cpp_type'
p30152
S'bool'
p30153
sS'default'
p30154
S'0'
p30155
sS'name'
p30156
S'use_displaced'
p30157
sS'required'
p30158
I00
sS'group_name'
p30159
Nsa(dp30160
S'description'
p30161
S'Print detailed diagnostics on timestep calculation\n'
p30162
sS'cpp_type'
p30163
S'bool'
p30164
sS'default'
p30165
S'0'
p30166
sS'name'
p30167
S'verbose'
p30168
sS'required'
p30169
I00
sS'group_name'
p30170
S'Advanced'
p30171
sasS'name'
p30172
S'/Outputs/Console'
p30173
sa(dp30174
S'description'
p30175
g3
sS'subblocks'
p30176
NsS'parameters'
p30177
(lp30178
(dp30179
S'name'
p30180
S'additional_execute_on'
p30181
sS'cpp_type'
p30182
S'MultiMooseEnum'
p30183
sS'default'
p30184
g3
sS'description'
p30185
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p30186
sS'required'
p30187
I00
sS'options'
p30188
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30189
sS'group_name'
p30190
Nsa(dp30191
S'description'
p30192
S'Clear the active control display after each output.\n'
p30193
sS'cpp_type'
p30194
S'bool'
p30195
sS'default'
p30196
S'1'
p30197
sS'name'
p30198
S'clear_after_output'
p30199
sS'required'
p30200
I00
sS'group_name'
p30201
Nsa(dp30202
S'description'
p30203
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p30204
sS'cpp_type'
p30205
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p30206
sS'default'
p30207
g3
sS'name'
p30208
S'control_tags'
p30209
sS'required'
p30210
I00
sS'group_name'
p30211
S'Advanced'
p30212
sa(dp30213
S'description'
p30214
S'Set the enabled status of the MooseObject.\n'
p30215
sS'cpp_type'
p30216
S'bool'
p30217
sS'default'
p30218
S'1'
p30219
sS'name'
p30220
S'enable'
p30221
sS'required'
p30222
I00
sS'group_name'
p30223
S'Advanced'
p30224
sa(dp30225
S'description'
p30226
S'Time at which this output object stop operating\n'
p30227
sS'cpp_type'
p30228
S'double'
p30229
sS'default'
p30230
g3
sS'name'
p30231
S'end_time'
p30232
sS'required'
p30233
I00
sS'group_name'
p30234
S'Timing'
p30235
sa(dp30236
S'name'
p30237
S'execute_on'
p30238
sS'cpp_type'
p30239
S'MultiMooseEnum'
p30240
sS'default'
p30241
S'INITIAL TIMESTEP_BEGIN'
p30242
sS'description'
p30243
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p30244
sS'required'
p30245
I00
sS'options'
p30246
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30247
sS'group_name'
p30248
Nsa(dp30249
S'description'
p30250
S'The interval at which time steps are output to the solution file\n'
p30251
sS'cpp_type'
p30252
S'unsigned int'
p30253
sS'default'
p30254
S'1'
p30255
sS'name'
p30256
S'interval'
p30257
sS'required'
p30258
I00
sS'group_name'
p30259
S'Timing'
p30260
sa(dp30261
S'description'
p30262
S'List active MooseObjects.\n'
p30263
sS'cpp_type'
p30264
S'bool'
p30265
sS'default'
p30266
S'1'
p30267
sS'name'
p30268
S'show_active_objects'
p30269
sS'required'
p30270
I00
sS'group_name'
p30271
Nsa(dp30272
S'description'
p30273
S'Time at which this output object begins to operate\n'
p30274
sS'cpp_type'
p30275
S'double'
p30276
sS'default'
p30277
g3
sS'name'
p30278
S'start_time'
p30279
sS'required'
p30280
I00
sS'group_name'
p30281
S'Timing'
p30282
sa(dp30283
S'description'
p30284
S'Only export results at sync times\n'
p30285
sS'cpp_type'
p30286
S'bool'
p30287
sS'default'
p30288
S'0'
p30289
sS'name'
p30290
S'sync_only'
p30291
sS'required'
p30292
I00
sS'group_name'
p30293
S'Timing'
p30294
sa(dp30295
S'description'
p30296
S'Times at which the output and solution is forced to occur\n'
p30297
sS'cpp_type'
p30298
S'std::__1::vector<double, std::__1::allocator<double> >'
p30299
sS'default'
p30300
g3
sS'name'
p30301
S'sync_times'
p30302
sS'required'
p30303
I00
sS'group_name'
p30304
S'Timing'
p30305
sa(dp30306
S'description'
p30307
S'Time tolerance utilized checking start and end times\n'
p30308
sS'cpp_type'
p30309
S'double'
p30310
sS'default'
p30311
S'1e-14'
p30312
sS'name'
p30313
S'time_tolerance'
p30314
sS'required'
p30315
I00
sS'group_name'
p30316
S'Timing'
p30317
sa(dp30318
S'description'
p30319
g3
sS'cpp_type'
p30320
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30321
sS'default'
p30322
S'ControlOutput'
p30323
sS'name'
p30324
S'type'
p30325
sS'required'
p30326
I00
sS'group_name'
p30327
Nsa(dp30328
S'description'
p30329
S'Enable/disable the use of the displaced mesh for outputting\n'
p30330
sS'cpp_type'
p30331
S'bool'
p30332
sS'default'
p30333
S'0'
p30334
sS'name'
p30335
S'use_displaced'
p30336
sS'required'
p30337
I00
sS'group_name'
p30338
NsasS'name'
p30339
S'/Outputs/ControlOutput'
p30340
sa(dp30341
S'description'
p30342
g3
sS'subblocks'
p30343
NsS'parameters'
p30344
(lp30345
(dp30346
S'name'
p30347
S'additional_execute_on'
p30348
sS'cpp_type'
p30349
S'MultiMooseEnum'
p30350
sS'default'
p30351
g3
sS'description'
p30352
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p30353
sS'required'
p30354
I00
sS'options'
p30355
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30356
sS'group_name'
p30357
Nsa(dp30358
S'description'
p30359
S'When true the date and time are appended to the output filename.\n'
p30360
sS'cpp_type'
p30361
S'bool'
p30362
sS'default'
p30363
S'0'
p30364
sS'name'
p30365
S'append_date'
p30366
sS'required'
p30367
I00
sS'group_name'
p30368
Nsa(dp30369
S'description'
p30370
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p30371
sS'cpp_type'
p30372
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30373
sS'default'
p30374
g3
sS'name'
p30375
S'append_date_format'
p30376
sS'required'
p30377
I00
sS'group_name'
p30378
Nsa(dp30379
S'description'
p30380
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p30381
sS'cpp_type'
p30382
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p30383
sS'default'
p30384
g3
sS'name'
p30385
S'control_tags'
p30386
sS'required'
p30387
I00
sS'group_name'
p30388
S'Advanced'
p30389
sa(dp30390
S'description'
p30391
S'Set the enabled status of the MooseObject.\n'
p30392
sS'cpp_type'
p30393
S'bool'
p30394
sS'default'
p30395
S'1'
p30396
sS'name'
p30397
S'enable'
p30398
sS'required'
p30399
I00
sS'group_name'
p30400
S'Advanced'
p30401
sa(dp30402
S'description'
p30403
S'Time at which this output object stop operating\n'
p30404
sS'cpp_type'
p30405
S'double'
p30406
sS'default'
p30407
g3
sS'name'
p30408
S'end_time'
p30409
sS'required'
p30410
I00
sS'group_name'
p30411
S'Timing'
p30412
sa(dp30413
S'name'
p30414
S'execute_on'
p30415
sS'cpp_type'
p30416
S'MultiMooseEnum'
p30417
sS'default'
p30418
S'INITIAL'
p30419
sS'description'
p30420
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p30421
sS'required'
p30422
I00
sS'options'
p30423
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30424
sS'group_name'
p30425
Nsa(dp30426
S'description'
p30427
S'The desired solution output name without an extension\n'
p30428
sS'cpp_type'
p30429
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30430
sS'default'
p30431
g3
sS'name'
p30432
S'file_base'
p30433
sS'required'
p30434
I00
sS'group_name'
p30435
Nsa(dp30436
S'description'
p30437
S'The interval at which time steps are output to the solution file\n'
p30438
sS'cpp_type'
p30439
S'unsigned int'
p30440
sS'default'
p30441
S'1'
p30442
sS'name'
p30443
S'interval'
p30444
sS'required'
p30445
I00
sS'group_name'
p30446
S'Timing'
p30447
sa(dp30448
S'description'
p30449
S'Number of divisions applied to time step when outputting linear residuals\n'
p30450
sS'cpp_type'
p30451
S'double'
p30452
sS'default'
p30453
S'1000'
p30454
sS'name'
p30455
S'linear_residual_dt_divisor'
p30456
sS'required'
p30457
I00
sS'group_name'
p30458
S'PETSc'
p30459
sa(dp30460
S'description'
p30461
S'Specifies an end time to begin output on each linear residual evaluation\n'
p30462
sS'cpp_type'
p30463
S'double'
p30464
sS'default'
p30465
g3
sS'name'
p30466
S'linear_residual_end_time'
p30467
sS'required'
p30468
I00
sS'group_name'
p30469
S'PETSc'
p30470
sa(dp30471
S'description'
p30472
S'Specifies a start time to begin output on each linear residual evaluation\n'
p30473
sS'cpp_type'
p30474
S'double'
p30475
sS'default'
p30476
g3
sS'name'
p30477
S'linear_residual_start_time'
p30478
sS'required'
p30479
I00
sS'group_name'
p30480
S'PETSc'
p30481
sa(dp30482
S'description'
p30483
S'Specifies whether output occurs on each linear residual evaluation\n'
p30484
sS'cpp_type'
p30485
S'bool'
p30486
sS'default'
p30487
S'0'
p30488
sS'name'
p30489
S'linear_residuals'
p30490
sS'required'
p30491
I00
sS'group_name'
p30492
S'PETSc'
p30493
sa(dp30494
S'description'
p30495
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p30496
sS'cpp_type'
p30497
S'double'
p30498
sS'default'
p30499
S'1000'
p30500
sS'name'
p30501
S'nonlinear_residual_dt_divisor'
p30502
sS'required'
p30503
I00
sS'group_name'
p30504
S'PETSc'
p30505
sa(dp30506
S'description'
p30507
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p30508
sS'cpp_type'
p30509
S'double'
p30510
sS'default'
p30511
g3
sS'name'
p30512
S'nonlinear_residual_end_time'
p30513
sS'required'
p30514
I00
sS'group_name'
p30515
S'PETSc'
p30516
sa(dp30517
S'description'
p30518
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p30519
sS'cpp_type'
p30520
S'double'
p30521
sS'default'
p30522
g3
sS'name'
p30523
S'nonlinear_residual_start_time'
p30524
sS'required'
p30525
I00
sS'group_name'
p30526
S'PETSc'
p30527
sa(dp30528
S'description'
p30529
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p30530
sS'cpp_type'
p30531
S'bool'
p30532
sS'default'
p30533
S'0'
p30534
sS'name'
p30535
S'nonlinear_residuals'
p30536
sS'required'
p30537
I00
sS'group_name'
p30538
S'PETSc'
p30539
sa(dp30540
S'description'
p30541
S'Output to the file\n'
p30542
sS'cpp_type'
p30543
S'bool'
p30544
sS'default'
p30545
S'1'
p30546
sS'name'
p30547
S'output_file'
p30548
sS'required'
p30549
I00
sS'group_name'
p30550
Nsa(dp30551
S'description'
p30552
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p30553
sS'cpp_type'
p30554
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p30555
sS'default'
p30556
g3
sS'name'
p30557
S'output_if_base_contains'
p30558
sS'required'
p30559
I00
sS'group_name'
p30560
S'Advanced'
p30561
sa(dp30562
S'description'
p30563
S'Specifies whether output occurs on each linear residual evaluation\n'
p30564
sS'cpp_type'
p30565
S'bool'
p30566
sS'default'
p30567
S'0'
p30568
sS'name'
p30569
S'output_linear'
p30570
sS'required'
p30571
I00
sS'group_name'
p30572
Nsa(dp30573
S'description'
p30574
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p30575
sS'cpp_type'
p30576
S'bool'
p30577
sS'default'
p30578
S'0'
p30579
sS'name'
p30580
S'output_nonlinear'
p30581
sS'required'
p30582
I00
sS'group_name'
p30583
Nsa(dp30584
S'description'
p30585
S'Output to the screen\n'
p30586
sS'cpp_type'
p30587
S'bool'
p30588
sS'default'
p30589
S'0'
p30590
sS'name'
p30591
S'output_screen'
p30592
sS'required'
p30593
I00
sS'group_name'
p30594
Nsa(dp30595
S'description'
p30596
S'The number of for extension suffix (e.g., out.e-s002)\n'
p30597
sS'cpp_type'
p30598
S'unsigned int'
p30599
sS'default'
p30600
S'4'
p30601
sS'name'
p30602
S'padding'
p30603
sS'required'
p30604
I00
sS'group_name'
p30605
S'Advanced'
p30606
sa(dp30607
S'description'
p30608
S'Time at which this output object begins to operate\n'
p30609
sS'cpp_type'
p30610
S'double'
p30611
sS'default'
p30612
g3
sS'name'
p30613
S'start_time'
p30614
sS'required'
p30615
I00
sS'group_name'
p30616
S'Timing'
p30617
sa(dp30618
S'description'
p30619
S'Only export results at sync times\n'
p30620
sS'cpp_type'
p30621
S'bool'
p30622
sS'default'
p30623
S'0'
p30624
sS'name'
p30625
S'sync_only'
p30626
sS'required'
p30627
I00
sS'group_name'
p30628
S'Timing'
p30629
sa(dp30630
S'description'
p30631
S'Times at which the output and solution is forced to occur\n'
p30632
sS'cpp_type'
p30633
S'std::__1::vector<double, std::__1::allocator<double> >'
p30634
sS'default'
p30635
g3
sS'name'
p30636
S'sync_times'
p30637
sS'required'
p30638
I00
sS'group_name'
p30639
S'Timing'
p30640
sa(dp30641
S'description'
p30642
S'System to output\n'
p30643
sS'cpp_type'
p30644
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30645
sS'default'
p30646
S'nl0'
p30647
sS'name'
p30648
S'system_name'
p30649
sS'required'
p30650
I00
sS'group_name'
p30651
Nsa(dp30652
S'description'
p30653
S'Time tolerance utilized checking start and end times\n'
p30654
sS'cpp_type'
p30655
S'double'
p30656
sS'default'
p30657
S'1e-14'
p30658
sS'name'
p30659
S'time_tolerance'
p30660
sS'required'
p30661
I00
sS'group_name'
p30662
S'Timing'
p30663
sa(dp30664
S'description'
p30665
g3
sS'cpp_type'
p30666
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30667
sS'default'
p30668
S'DOFMap'
p30669
sS'name'
p30670
S'type'
p30671
sS'required'
p30672
I00
sS'group_name'
p30673
Nsa(dp30674
S'description'
p30675
S'Enable/disable the use of the displaced mesh for outputting\n'
p30676
sS'cpp_type'
p30677
S'bool'
p30678
sS'default'
p30679
S'0'
p30680
sS'name'
p30681
S'use_displaced'
p30682
sS'required'
p30683
I00
sS'group_name'
p30684
NsasS'name'
p30685
S'/Outputs/DOFMap'
p30686
sa(dp30687
S'description'
p30688
S'Object for output data in the Exodus II format\n'
p30689
sS'subblocks'
p30690
NsS'parameters'
p30691
(lp30692
(dp30693
S'name'
p30694
S'additional_execute_on'
p30695
sS'cpp_type'
p30696
S'MultiMooseEnum'
p30697
sS'default'
p30698
g3
sS'description'
p30699
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p30700
sS'required'
p30701
I00
sS'options'
p30702
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30703
sS'group_name'
p30704
Nsa(dp30705
S'description'
p30706
S'When true the date and time are appended to the output filename.\n'
p30707
sS'cpp_type'
p30708
S'bool'
p30709
sS'default'
p30710
S'0'
p30711
sS'name'
p30712
S'append_date'
p30713
sS'required'
p30714
I00
sS'group_name'
p30715
Nsa(dp30716
S'description'
p30717
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p30718
sS'cpp_type'
p30719
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30720
sS'default'
p30721
g3
sS'name'
p30722
S'append_date_format'
p30723
sS'required'
p30724
I00
sS'group_name'
p30725
Nsa(dp30726
S'description'
p30727
S"Append '_oversample' to the output file base\n"
p30728
sS'cpp_type'
p30729
S'bool'
p30730
sS'default'
p30731
S'0'
p30732
sS'name'
p30733
S'append_oversample'
p30734
sS'required'
p30735
I00
sS'group_name'
p30736
Nsa(dp30737
S'description'
p30738
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p30739
sS'cpp_type'
p30740
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p30741
sS'default'
p30742
g3
sS'name'
p30743
S'control_tags'
p30744
sS'required'
p30745
I00
sS'group_name'
p30746
S'Advanced'
p30747
sa(dp30748
S'description'
p30749
S'Output elemental nonlinear variables as nodal\n'
p30750
sS'cpp_type'
p30751
S'bool'
p30752
sS'default'
p30753
S'0'
p30754
sS'name'
p30755
S'elemental_as_nodal'
p30756
sS'required'
p30757
I00
sS'group_name'
p30758
S'Variables'
p30759
sa(dp30760
S'description'
p30761
S'Set the enabled status of the MooseObject.\n'
p30762
sS'cpp_type'
p30763
S'bool'
p30764
sS'default'
p30765
S'1'
p30766
sS'name'
p30767
S'enable'
p30768
sS'required'
p30769
I00
sS'group_name'
p30770
S'Advanced'
p30771
sa(dp30772
S'description'
p30773
S'Time at which this output object stop operating\n'
p30774
sS'cpp_type'
p30775
S'double'
p30776
sS'default'
p30777
g3
sS'name'
p30778
S'end_time'
p30779
sS'required'
p30780
I00
sS'group_name'
p30781
S'Timing'
p30782
sa(dp30783
S'name'
p30784
S'execute_elemental_on'
p30785
sS'cpp_type'
p30786
S'MultiMooseEnum'
p30787
sS'default'
p30788
g3
sS'description'
p30789
S'Control the output of elemental variables\n'
p30790
sS'required'
p30791
I00
sS'options'
p30792
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30793
sS'group_name'
p30794
S'Variables'
p30795
sa(dp30796
S'description'
p30797
S'Enable/disable the output of elemental variables\n'
p30798
sS'cpp_type'
p30799
S'bool'
p30800
sS'default'
p30801
S'1'
p30802
sS'name'
p30803
S'execute_elemental_variables'
p30804
sS'required'
p30805
I00
sS'group_name'
p30806
Nsa(dp30807
S'description'
p30808
S'Enable/disable the output of input file information\n'
p30809
sS'cpp_type'
p30810
S'bool'
p30811
sS'default'
p30812
S'1'
p30813
sS'name'
p30814
S'execute_input'
p30815
sS'required'
p30816
I00
sS'group_name'
p30817
Nsa(dp30818
S'name'
p30819
S'execute_input_on'
p30820
sS'cpp_type'
p30821
S'MultiMooseEnum'
p30822
sS'default'
p30823
S'INITIAL'
p30824
sS'description'
p30825
S'Enable/disable the output of the input file\n'
p30826
sS'required'
p30827
I00
sS'options'
p30828
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30829
sS'group_name'
p30830
S'Variables'
p30831
sa(dp30832
S'name'
p30833
S'execute_nodal_on'
p30834
sS'cpp_type'
p30835
S'MultiMooseEnum'
p30836
sS'default'
p30837
g3
sS'description'
p30838
S'Control the output of nodal variables\n'
p30839
sS'required'
p30840
I00
sS'options'
p30841
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30842
sS'group_name'
p30843
S'Variables'
p30844
sa(dp30845
S'description'
p30846
S'Enable/disable the output of nodal variables\n'
p30847
sS'cpp_type'
p30848
S'bool'
p30849
sS'default'
p30850
S'1'
p30851
sS'name'
p30852
S'execute_nodal_variables'
p30853
sS'required'
p30854
I00
sS'group_name'
p30855
Nsa(dp30856
S'name'
p30857
S'execute_on'
p30858
sS'cpp_type'
p30859
S'MultiMooseEnum'
p30860
sS'default'
p30861
S'INITIAL TIMESTEP_END'
p30862
sS'description'
p30863
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p30864
sS'required'
p30865
I00
sS'options'
p30866
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30867
sS'group_name'
p30868
Nsa(dp30869
S'name'
p30870
S'execute_postprocessors_on'
p30871
sS'cpp_type'
p30872
S'MultiMooseEnum'
p30873
sS'default'
p30874
g3
sS'description'
p30875
S'Control of when postprocessors are output\n'
p30876
sS'required'
p30877
I00
sS'options'
p30878
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30879
sS'group_name'
p30880
S'Variables'
p30881
sa(dp30882
S'description'
p30883
S'Enable/disable the output of aux scalar variables\n'
p30884
sS'cpp_type'
p30885
S'bool'
p30886
sS'default'
p30887
S'1'
p30888
sS'name'
p30889
S'execute_scalar_variables'
p30890
sS'required'
p30891
I00
sS'group_name'
p30892
Nsa(dp30893
S'name'
p30894
S'execute_scalars_on'
p30895
sS'cpp_type'
p30896
S'MultiMooseEnum'
p30897
sS'default'
p30898
g3
sS'description'
p30899
S'Control the output of scalar variables\n'
p30900
sS'required'
p30901
I00
sS'options'
p30902
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p30903
sS'group_name'
p30904
S'Variables'
p30905
sa(dp30906
S'description'
p30907
S'Enable/disable the output of the simulation information\n'
p30908
sS'cpp_type'
p30909
S'bool'
p30910
sS'default'
p30911
S'1'
p30912
sS'name'
p30913
S'execute_system_information'
p30914
sS'required'
p30915
I00
sS'group_name'
p30916
Nsa(dp30917
S'description'
p30918
S'Enable/disable the output of vector postprocessors\n'
p30919
sS'cpp_type'
p30920
S'bool'
p30921
sS'default'
p30922
S'1'
p30923
sS'name'
p30924
S'execute_vector_postprocessors'
p30925
sS'required'
p30926
I00
sS'group_name'
p30927
Nsa(dp30928
S'description'
p30929
S'The name of the mesh file to read, for oversampling\n'
p30930
sS'cpp_type'
p30931
S'MeshFileName'
p30932
sS'default'
p30933
g3
sS'name'
p30934
S'file'
p30935
sS'required'
p30936
I00
sS'group_name'
p30937
S'Oversampling'
p30938
sa(dp30939
S'description'
p30940
S'The desired solution output name without an extension\n'
p30941
sS'cpp_type'
p30942
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30943
sS'default'
p30944
g3
sS'name'
p30945
S'file_base'
p30946
sS'required'
p30947
I00
sS'group_name'
p30948
Nsa(dp30949
S'description'
p30950
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p30951
sS'cpp_type'
p30952
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p30953
sS'default'
p30954
g3
sS'name'
p30955
S'hide'
p30956
sS'required'
p30957
I00
sS'group_name'
p30958
S'Variables'
p30959
sa(dp30960
S'description'
p30961
S'The interval at which time steps are output to the solution file\n'
p30962
sS'cpp_type'
p30963
S'unsigned int'
p30964
sS'default'
p30965
S'1'
p30966
sS'name'
p30967
S'interval'
p30968
sS'required'
p30969
I00
sS'group_name'
p30970
S'Timing'
p30971
sa(dp30972
S'description'
p30973
S'Number of divisions applied to time step when outputting linear residuals\n'
p30974
sS'cpp_type'
p30975
S'double'
p30976
sS'default'
p30977
S'1000'
p30978
sS'name'
p30979
S'linear_residual_dt_divisor'
p30980
sS'required'
p30981
I00
sS'group_name'
p30982
S'PETSc'
p30983
sa(dp30984
S'description'
p30985
S'Specifies an end time to begin output on each linear residual evaluation\n'
p30986
sS'cpp_type'
p30987
S'double'
p30988
sS'default'
p30989
g3
sS'name'
p30990
S'linear_residual_end_time'
p30991
sS'required'
p30992
I00
sS'group_name'
p30993
S'PETSc'
p30994
sa(dp30995
S'description'
p30996
S'Specifies a start time to begin output on each linear residual evaluation\n'
p30997
sS'cpp_type'
p30998
S'double'
p30999
sS'default'
p31000
g3
sS'name'
p31001
S'linear_residual_start_time'
p31002
sS'required'
p31003
I00
sS'group_name'
p31004
S'PETSc'
p31005
sa(dp31006
S'description'
p31007
S'Specifies whether output occurs on each linear residual evaluation\n'
p31008
sS'cpp_type'
p31009
S'bool'
p31010
sS'default'
p31011
S'0'
p31012
sS'name'
p31013
S'linear_residuals'
p31014
sS'required'
p31015
I00
sS'group_name'
p31016
S'PETSc'
p31017
sa(dp31018
S'description'
p31019
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p31020
sS'cpp_type'
p31021
S'double'
p31022
sS'default'
p31023
S'1000'
p31024
sS'name'
p31025
S'nonlinear_residual_dt_divisor'
p31026
sS'required'
p31027
I00
sS'group_name'
p31028
S'PETSc'
p31029
sa(dp31030
S'description'
p31031
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p31032
sS'cpp_type'
p31033
S'double'
p31034
sS'default'
p31035
g3
sS'name'
p31036
S'nonlinear_residual_end_time'
p31037
sS'required'
p31038
I00
sS'group_name'
p31039
S'PETSc'
p31040
sa(dp31041
S'description'
p31042
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p31043
sS'cpp_type'
p31044
S'double'
p31045
sS'default'
p31046
g3
sS'name'
p31047
S'nonlinear_residual_start_time'
p31048
sS'required'
p31049
I00
sS'group_name'
p31050
S'PETSc'
p31051
sa(dp31052
S'description'
p31053
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p31054
sS'cpp_type'
p31055
S'bool'
p31056
sS'default'
p31057
S'0'
p31058
sS'name'
p31059
S'nonlinear_residuals'
p31060
sS'required'
p31061
I00
sS'group_name'
p31062
S'PETSc'
p31063
sa(dp31064
S'description'
p31065
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p31066
sS'cpp_type'
p31067
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p31068
sS'default'
p31069
g3
sS'name'
p31070
S'output_if_base_contains'
p31071
sS'required'
p31072
I00
sS'group_name'
p31073
S'Advanced'
p31074
sa(dp31075
S'description'
p31076
S'Specifies whether output occurs on each linear residual evaluation\n'
p31077
sS'cpp_type'
p31078
S'bool'
p31079
sS'default'
p31080
S'0'
p31081
sS'name'
p31082
S'output_linear'
p31083
sS'required'
p31084
I00
sS'group_name'
p31085
Nsa(dp31086
S'description'
p31087
S'Flag indicating if material properties should be output\n'
p31088
sS'cpp_type'
p31089
S'bool'
p31090
sS'default'
p31091
S'0'
p31092
sS'name'
p31093
S'output_material_properties'
p31094
sS'required'
p31095
I00
sS'group_name'
p31096
S'Materials'
p31097
sa(dp31098
S'description'
p31099
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p31100
sS'cpp_type'
p31101
S'bool'
p31102
sS'default'
p31103
S'0'
p31104
sS'name'
p31105
S'output_nonlinear'
p31106
sS'required'
p31107
I00
sS'group_name'
p31108
Nsa(dp31109
S'description'
p31110
S'Enable/disable the output of postprocessors\n'
p31111
sS'cpp_type'
p31112
S'bool'
p31113
sS'default'
p31114
S'1'
p31115
sS'name'
p31116
S'output_postprocessors'
p31117
sS'required'
p31118
I00
sS'group_name'
p31119
Nsa(dp31120
S'description'
p31121
S'Set to true to enable oversampling\n'
p31122
sS'cpp_type'
p31123
S'bool'
p31124
sS'default'
p31125
S'0'
p31126
sS'name'
p31127
S'oversample'
p31128
sS'required'
p31129
I00
sS'group_name'
p31130
Nsa(dp31131
S'description'
p31132
S'When true the latest timestep will overwrite the existing file, so only a single timestep exists.\n'
p31133
sS'cpp_type'
p31134
S'bool'
p31135
sS'default'
p31136
S'0'
p31137
sS'name'
p31138
S'overwrite'
p31139
sS'required'
p31140
I00
sS'group_name'
p31141
Nsa(dp31142
S'description'
p31143
S'The number of for extension suffix (e.g., out.e-s002)\n'
p31144
sS'cpp_type'
p31145
S'unsigned int'
p31146
sS'default'
p31147
S'3'
p31148
sS'name'
p31149
S'padding'
p31150
sS'required'
p31151
I00
sS'group_name'
p31152
S'Advanced'
p31153
sa(dp31154
S'description'
p31155
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p31156
sS'cpp_type'
p31157
S'libMesh::Point'
p31158
sS'default'
p31159
g3
sS'name'
p31160
S'position'
p31161
sS'required'
p31162
I00
sS'group_name'
p31163
S'Oversampling'
p31164
sa(dp31165
S'description'
p31166
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p31167
sS'cpp_type'
p31168
S'unsigned int'
p31169
sS'default'
p31170
S'0'
p31171
sS'name'
p31172
S'refinements'
p31173
sS'required'
p31174
I00
sS'group_name'
p31175
S'Oversampling'
p31176
sa(dp31177
S'description'
p31178
S'Output scalar variables as nodal\n'
p31179
sS'cpp_type'
p31180
S'bool'
p31181
sS'default'
p31182
S'0'
p31183
sS'name'
p31184
S'scalar_as_nodal'
p31185
sS'required'
p31186
I00
sS'group_name'
p31187
S'Variables'
p31188
sa(dp31189
S'description'
p31190
S"Enable/disable sequential file output (enabled by default when 'use_displace = true', otherwise defaults to false\n"
p31191
sS'cpp_type'
p31192
S'bool'
p31193
sS'default'
p31194
g3
sS'name'
p31195
S'sequence'
p31196
sS'required'
p31197
I00
sS'group_name'
p31198
Nsa(dp31199
S'description'
p31200
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p31201
sS'cpp_type'
p31202
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p31203
sS'default'
p31204
g3
sS'name'
p31205
S'show'
p31206
sS'required'
p31207
I00
sS'group_name'
p31208
S'Variables'
p31209
sa(dp31210
S'description'
p31211
S'List of materialproperties that should be written to the output\n'
p31212
sS'cpp_type'
p31213
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p31214
sS'default'
p31215
g3
sS'name'
p31216
S'show_material_properties'
p31217
sS'required'
p31218
I00
sS'group_name'
p31219
S'Materials'
p31220
sa(dp31221
S'description'
p31222
S'Time at which this output object begins to operate\n'
p31223
sS'cpp_type'
p31224
S'double'
p31225
sS'default'
p31226
g3
sS'name'
p31227
S'start_time'
p31228
sS'required'
p31229
I00
sS'group_name'
p31230
S'Timing'
p31231
sa(dp31232
S'description'
p31233
S'Only export results at sync times\n'
p31234
sS'cpp_type'
p31235
S'bool'
p31236
sS'default'
p31237
S'0'
p31238
sS'name'
p31239
S'sync_only'
p31240
sS'required'
p31241
I00
sS'group_name'
p31242
S'Timing'
p31243
sa(dp31244
S'description'
p31245
S'Times at which the output and solution is forced to occur\n'
p31246
sS'cpp_type'
p31247
S'std::__1::vector<double, std::__1::allocator<double> >'
p31248
sS'default'
p31249
g3
sS'name'
p31250
S'sync_times'
p31251
sS'required'
p31252
I00
sS'group_name'
p31253
S'Timing'
p31254
sa(dp31255
S'description'
p31256
S'Time tolerance utilized checking start and end times\n'
p31257
sS'cpp_type'
p31258
S'double'
p31259
sS'default'
p31260
S'1e-14'
p31261
sS'name'
p31262
S'time_tolerance'
p31263
sS'required'
p31264
I00
sS'group_name'
p31265
S'Timing'
p31266
sa(dp31267
S'description'
p31268
g3
sS'cpp_type'
p31269
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31270
sS'default'
p31271
S'Exodus'
p31272
sS'name'
p31273
S'type'
p31274
sS'required'
p31275
I00
sS'group_name'
p31276
Nsa(dp31277
S'description'
p31278
S'Enable/disable the use of the displaced mesh for outputting\n'
p31279
sS'cpp_type'
p31280
S'bool'
p31281
sS'default'
p31282
S'0'
p31283
sS'name'
p31284
S'use_displaced'
p31285
sS'required'
p31286
I00
sS'group_name'
p31287
Nsa(dp31288
S'description'
p31289
S'Use the problem dimension to the mesh output. Set to false when outputting lower dimensional meshes embedded in a higher dimensional space.\n'
p31290
sS'cpp_type'
p31291
S'bool'
p31292
sS'default'
p31293
g3
sS'name'
p31294
S'use_problem_dimension'
p31295
sS'required'
p31296
I00
sS'group_name'
p31297
NsasS'name'
p31298
S'/Outputs/Exodus'
p31299
sa(dp31300
S'description'
p31301
S'Object for outputting data in the GMV format\n'
p31302
sS'subblocks'
p31303
NsS'parameters'
p31304
(lp31305
(dp31306
S'name'
p31307
S'additional_execute_on'
p31308
sS'cpp_type'
p31309
S'MultiMooseEnum'
p31310
sS'default'
p31311
g3
sS'description'
p31312
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p31313
sS'required'
p31314
I00
sS'options'
p31315
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31316
sS'group_name'
p31317
Nsa(dp31318
S'description'
p31319
S'When true the date and time are appended to the output filename.\n'
p31320
sS'cpp_type'
p31321
S'bool'
p31322
sS'default'
p31323
S'0'
p31324
sS'name'
p31325
S'append_date'
p31326
sS'required'
p31327
I00
sS'group_name'
p31328
Nsa(dp31329
S'description'
p31330
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p31331
sS'cpp_type'
p31332
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31333
sS'default'
p31334
g3
sS'name'
p31335
S'append_date_format'
p31336
sS'required'
p31337
I00
sS'group_name'
p31338
Nsa(dp31339
S'description'
p31340
S"Append '_oversample' to the output file base\n"
p31341
sS'cpp_type'
p31342
S'bool'
p31343
sS'default'
p31344
S'0'
p31345
sS'name'
p31346
S'append_oversample'
p31347
sS'required'
p31348
I00
sS'group_name'
p31349
Nsa(dp31350
S'description'
p31351
S'Output the file in binary format\n'
p31352
sS'cpp_type'
p31353
S'bool'
p31354
sS'default'
p31355
S'1'
p31356
sS'name'
p31357
S'binary'
p31358
sS'required'
p31359
I00
sS'group_name'
p31360
S'Advanced'
p31361
sa(dp31362
S'description'
p31363
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31364
sS'cpp_type'
p31365
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p31366
sS'default'
p31367
g3
sS'name'
p31368
S'control_tags'
p31369
sS'required'
p31370
I00
sS'group_name'
p31371
S'Advanced'
p31372
sa(dp31373
S'description'
p31374
S'Set the enabled status of the MooseObject.\n'
p31375
sS'cpp_type'
p31376
S'bool'
p31377
sS'default'
p31378
S'1'
p31379
sS'name'
p31380
S'enable'
p31381
sS'required'
p31382
I00
sS'group_name'
p31383
S'Advanced'
p31384
sa(dp31385
S'description'
p31386
S'Time at which this output object stop operating\n'
p31387
sS'cpp_type'
p31388
S'double'
p31389
sS'default'
p31390
g3
sS'name'
p31391
S'end_time'
p31392
sS'required'
p31393
I00
sS'group_name'
p31394
S'Timing'
p31395
sa(dp31396
S'name'
p31397
S'execute_on'
p31398
sS'cpp_type'
p31399
S'MultiMooseEnum'
p31400
sS'default'
p31401
S'INITIAL TIMESTEP_END'
p31402
sS'description'
p31403
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p31404
sS'required'
p31405
I00
sS'options'
p31406
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31407
sS'group_name'
p31408
Nsa(dp31409
S'description'
p31410
S'The name of the mesh file to read, for oversampling\n'
p31411
sS'cpp_type'
p31412
S'MeshFileName'
p31413
sS'default'
p31414
g3
sS'name'
p31415
S'file'
p31416
sS'required'
p31417
I00
sS'group_name'
p31418
S'Oversampling'
p31419
sa(dp31420
S'description'
p31421
S'The desired solution output name without an extension\n'
p31422
sS'cpp_type'
p31423
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31424
sS'default'
p31425
g3
sS'name'
p31426
S'file_base'
p31427
sS'required'
p31428
I00
sS'group_name'
p31429
Nsa(dp31430
S'description'
p31431
S'The interval at which time steps are output to the solution file\n'
p31432
sS'cpp_type'
p31433
S'unsigned int'
p31434
sS'default'
p31435
S'1'
p31436
sS'name'
p31437
S'interval'
p31438
sS'required'
p31439
I00
sS'group_name'
p31440
S'Timing'
p31441
sa(dp31442
S'description'
p31443
S'Number of divisions applied to time step when outputting linear residuals\n'
p31444
sS'cpp_type'
p31445
S'double'
p31446
sS'default'
p31447
S'1000'
p31448
sS'name'
p31449
S'linear_residual_dt_divisor'
p31450
sS'required'
p31451
I00
sS'group_name'
p31452
S'PETSc'
p31453
sa(dp31454
S'description'
p31455
S'Specifies an end time to begin output on each linear residual evaluation\n'
p31456
sS'cpp_type'
p31457
S'double'
p31458
sS'default'
p31459
g3
sS'name'
p31460
S'linear_residual_end_time'
p31461
sS'required'
p31462
I00
sS'group_name'
p31463
S'PETSc'
p31464
sa(dp31465
S'description'
p31466
S'Specifies a start time to begin output on each linear residual evaluation\n'
p31467
sS'cpp_type'
p31468
S'double'
p31469
sS'default'
p31470
g3
sS'name'
p31471
S'linear_residual_start_time'
p31472
sS'required'
p31473
I00
sS'group_name'
p31474
S'PETSc'
p31475
sa(dp31476
S'description'
p31477
S'Specifies whether output occurs on each linear residual evaluation\n'
p31478
sS'cpp_type'
p31479
S'bool'
p31480
sS'default'
p31481
S'0'
p31482
sS'name'
p31483
S'linear_residuals'
p31484
sS'required'
p31485
I00
sS'group_name'
p31486
S'PETSc'
p31487
sa(dp31488
S'description'
p31489
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p31490
sS'cpp_type'
p31491
S'double'
p31492
sS'default'
p31493
S'1000'
p31494
sS'name'
p31495
S'nonlinear_residual_dt_divisor'
p31496
sS'required'
p31497
I00
sS'group_name'
p31498
S'PETSc'
p31499
sa(dp31500
S'description'
p31501
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p31502
sS'cpp_type'
p31503
S'double'
p31504
sS'default'
p31505
g3
sS'name'
p31506
S'nonlinear_residual_end_time'
p31507
sS'required'
p31508
I00
sS'group_name'
p31509
S'PETSc'
p31510
sa(dp31511
S'description'
p31512
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p31513
sS'cpp_type'
p31514
S'double'
p31515
sS'default'
p31516
g3
sS'name'
p31517
S'nonlinear_residual_start_time'
p31518
sS'required'
p31519
I00
sS'group_name'
p31520
S'PETSc'
p31521
sa(dp31522
S'description'
p31523
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p31524
sS'cpp_type'
p31525
S'bool'
p31526
sS'default'
p31527
S'0'
p31528
sS'name'
p31529
S'nonlinear_residuals'
p31530
sS'required'
p31531
I00
sS'group_name'
p31532
S'PETSc'
p31533
sa(dp31534
S'description'
p31535
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p31536
sS'cpp_type'
p31537
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p31538
sS'default'
p31539
g3
sS'name'
p31540
S'output_if_base_contains'
p31541
sS'required'
p31542
I00
sS'group_name'
p31543
S'Advanced'
p31544
sa(dp31545
S'description'
p31546
S'Specifies whether output occurs on each linear residual evaluation\n'
p31547
sS'cpp_type'
p31548
S'bool'
p31549
sS'default'
p31550
S'0'
p31551
sS'name'
p31552
S'output_linear'
p31553
sS'required'
p31554
I00
sS'group_name'
p31555
Nsa(dp31556
S'description'
p31557
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p31558
sS'cpp_type'
p31559
S'bool'
p31560
sS'default'
p31561
S'0'
p31562
sS'name'
p31563
S'output_nonlinear'
p31564
sS'required'
p31565
I00
sS'group_name'
p31566
Nsa(dp31567
S'description'
p31568
S'Set to true to enable oversampling\n'
p31569
sS'cpp_type'
p31570
S'bool'
p31571
sS'default'
p31572
S'0'
p31573
sS'name'
p31574
S'oversample'
p31575
sS'required'
p31576
I00
sS'group_name'
p31577
Nsa(dp31578
S'description'
p31579
S'The number of for extension suffix (e.g., out.e-s002)\n'
p31580
sS'cpp_type'
p31581
S'unsigned int'
p31582
sS'default'
p31583
S'4'
p31584
sS'name'
p31585
S'padding'
p31586
sS'required'
p31587
I00
sS'group_name'
p31588
S'Advanced'
p31589
sa(dp31590
S'description'
p31591
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p31592
sS'cpp_type'
p31593
S'libMesh::Point'
p31594
sS'default'
p31595
g3
sS'name'
p31596
S'position'
p31597
sS'required'
p31598
I00
sS'group_name'
p31599
S'Oversampling'
p31600
sa(dp31601
S'description'
p31602
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p31603
sS'cpp_type'
p31604
S'unsigned int'
p31605
sS'default'
p31606
S'0'
p31607
sS'name'
p31608
S'refinements'
p31609
sS'required'
p31610
I00
sS'group_name'
p31611
S'Oversampling'
p31612
sa(dp31613
S'description'
p31614
S'Time at which this output object begins to operate\n'
p31615
sS'cpp_type'
p31616
S'double'
p31617
sS'default'
p31618
g3
sS'name'
p31619
S'start_time'
p31620
sS'required'
p31621
I00
sS'group_name'
p31622
S'Timing'
p31623
sa(dp31624
S'description'
p31625
S'Only export results at sync times\n'
p31626
sS'cpp_type'
p31627
S'bool'
p31628
sS'default'
p31629
S'0'
p31630
sS'name'
p31631
S'sync_only'
p31632
sS'required'
p31633
I00
sS'group_name'
p31634
S'Timing'
p31635
sa(dp31636
S'description'
p31637
S'Times at which the output and solution is forced to occur\n'
p31638
sS'cpp_type'
p31639
S'std::__1::vector<double, std::__1::allocator<double> >'
p31640
sS'default'
p31641
g3
sS'name'
p31642
S'sync_times'
p31643
sS'required'
p31644
I00
sS'group_name'
p31645
S'Timing'
p31646
sa(dp31647
S'description'
p31648
S'Time tolerance utilized checking start and end times\n'
p31649
sS'cpp_type'
p31650
S'double'
p31651
sS'default'
p31652
S'1e-14'
p31653
sS'name'
p31654
S'time_tolerance'
p31655
sS'required'
p31656
I00
sS'group_name'
p31657
S'Timing'
p31658
sa(dp31659
S'description'
p31660
g3
sS'cpp_type'
p31661
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31662
sS'default'
p31663
S'GMV'
p31664
sS'name'
p31665
S'type'
p31666
sS'required'
p31667
I00
sS'group_name'
p31668
Nsa(dp31669
S'description'
p31670
S'Enable/disable the use of the displaced mesh for outputting\n'
p31671
sS'cpp_type'
p31672
S'bool'
p31673
sS'default'
p31674
S'0'
p31675
sS'name'
p31676
S'use_displaced'
p31677
sS'required'
p31678
I00
sS'group_name'
p31679
NsasS'name'
p31680
S'/Outputs/GMV'
p31681
sa(dp31682
S'description'
p31683
g3
sS'subblocks'
p31684
NsS'parameters'
p31685
(lp31686
(dp31687
S'name'
p31688
S'additional_execute_on'
p31689
sS'cpp_type'
p31690
S'MultiMooseEnum'
p31691
sS'default'
p31692
g3
sS'description'
p31693
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p31694
sS'required'
p31695
I00
sS'options'
p31696
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31697
sS'group_name'
p31698
Nsa(dp31699
S'description'
p31700
S'When true the date and time are appended to the output filename.\n'
p31701
sS'cpp_type'
p31702
S'bool'
p31703
sS'default'
p31704
S'0'
p31705
sS'name'
p31706
S'append_date'
p31707
sS'required'
p31708
I00
sS'group_name'
p31709
Nsa(dp31710
S'description'
p31711
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p31712
sS'cpp_type'
p31713
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31714
sS'default'
p31715
g3
sS'name'
p31716
S'append_date_format'
p31717
sS'required'
p31718
I00
sS'group_name'
p31719
Nsa(dp31720
S'description'
p31721
S'Append existing file on restart\n'
p31722
sS'cpp_type'
p31723
S'bool'
p31724
sS'default'
p31725
S'0'
p31726
sS'name'
p31727
S'append_restart'
p31728
sS'required'
p31729
I00
sS'group_name'
p31730
Nsa(dp31731
S'description'
p31732
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p31733
sS'cpp_type'
p31734
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p31735
sS'default'
p31736
g3
sS'name'
p31737
S'control_tags'
p31738
sS'required'
p31739
I00
sS'group_name'
p31740
S'Advanced'
p31741
sa(dp31742
S'description'
p31743
S'Set the enabled status of the MooseObject.\n'
p31744
sS'cpp_type'
p31745
S'bool'
p31746
sS'default'
p31747
S'1'
p31748
sS'name'
p31749
S'enable'
p31750
sS'required'
p31751
I00
sS'group_name'
p31752
S'Advanced'
p31753
sa(dp31754
S'description'
p31755
S'Time at which this output object stop operating\n'
p31756
sS'cpp_type'
p31757
S'double'
p31758
sS'default'
p31759
g3
sS'name'
p31760
S'end_time'
p31761
sS'required'
p31762
I00
sS'group_name'
p31763
S'Timing'
p31764
sa(dp31765
S'description'
p31766
S'Enable/disable the output of elemental variables\n'
p31767
sS'cpp_type'
p31768
S'bool'
p31769
sS'default'
p31770
S'1'
p31771
sS'name'
p31772
S'execute_elemental_variables'
p31773
sS'required'
p31774
I00
sS'group_name'
p31775
Nsa(dp31776
S'description'
p31777
S'Enable/disable the output of input file information\n'
p31778
sS'cpp_type'
p31779
S'bool'
p31780
sS'default'
p31781
S'1'
p31782
sS'name'
p31783
S'execute_input'
p31784
sS'required'
p31785
I00
sS'group_name'
p31786
Nsa(dp31787
S'description'
p31788
S'Enable/disable the output of nodal variables\n'
p31789
sS'cpp_type'
p31790
S'bool'
p31791
sS'default'
p31792
S'1'
p31793
sS'name'
p31794
S'execute_nodal_variables'
p31795
sS'required'
p31796
I00
sS'group_name'
p31797
Nsa(dp31798
S'name'
p31799
S'execute_on'
p31800
sS'cpp_type'
p31801
S'MultiMooseEnum'
p31802
sS'default'
p31803
S'INITIAL TIMESTEP_END'
p31804
sS'description'
p31805
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p31806
sS'required'
p31807
I00
sS'options'
p31808
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31809
sS'group_name'
p31810
Nsa(dp31811
S'name'
p31812
S'execute_postprocessors_on'
p31813
sS'cpp_type'
p31814
S'MultiMooseEnum'
p31815
sS'default'
p31816
g3
sS'description'
p31817
S'Control of when postprocessors are output\n'
p31818
sS'required'
p31819
I00
sS'options'
p31820
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31821
sS'group_name'
p31822
S'Variables'
p31823
sa(dp31824
S'description'
p31825
S'Enable/disable the output of aux scalar variables\n'
p31826
sS'cpp_type'
p31827
S'bool'
p31828
sS'default'
p31829
S'1'
p31830
sS'name'
p31831
S'execute_scalar_variables'
p31832
sS'required'
p31833
I00
sS'group_name'
p31834
Nsa(dp31835
S'name'
p31836
S'execute_scalars_on'
p31837
sS'cpp_type'
p31838
S'MultiMooseEnum'
p31839
sS'default'
p31840
g3
sS'description'
p31841
S'Control the output of scalar variables\n'
p31842
sS'required'
p31843
I00
sS'options'
p31844
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31845
sS'group_name'
p31846
S'Variables'
p31847
sa(dp31848
S'description'
p31849
S'Enable/disable the output of the simulation information\n'
p31850
sS'cpp_type'
p31851
S'bool'
p31852
sS'default'
p31853
S'1'
p31854
sS'name'
p31855
S'execute_system_information'
p31856
sS'required'
p31857
I00
sS'group_name'
p31858
Nsa(dp31859
S'description'
p31860
S'Enable/disable the output of vector postprocessors\n'
p31861
sS'cpp_type'
p31862
S'bool'
p31863
sS'default'
p31864
S'1'
p31865
sS'name'
p31866
S'execute_vector_postprocessors'
p31867
sS'required'
p31868
I00
sS'group_name'
p31869
Nsa(dp31870
S'name'
p31871
S'execute_vector_postprocessors_on'
p31872
sS'cpp_type'
p31873
S'MultiMooseEnum'
p31874
sS'default'
p31875
g3
sS'description'
p31876
S'Enable/disable the output of VectorPostprocessors\n'
p31877
sS'required'
p31878
I00
sS'options'
p31879
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p31880
sS'group_name'
p31881
S'Variables'
p31882
sa(dp31883
S'name'
p31884
S'extension'
p31885
sS'cpp_type'
p31886
S'MooseEnum'
p31887
sS'default'
p31888
S'png'
p31889
sS'description'
p31890
S'GNU plot file extension\n'
p31891
sS'required'
p31892
I00
sS'options'
p31893
S'png ps gif'
p31894
sS'group_name'
p31895
Nsa(dp31896
S'description'
p31897
S'The desired solution output name without an extension\n'
p31898
sS'cpp_type'
p31899
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31900
sS'default'
p31901
g3
sS'name'
p31902
S'file_base'
p31903
sS'required'
p31904
I00
sS'group_name'
p31905
Nsa(dp31906
S'description'
p31907
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p31908
sS'cpp_type'
p31909
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p31910
sS'default'
p31911
g3
sS'name'
p31912
S'hide'
p31913
sS'required'
p31914
I00
sS'group_name'
p31915
S'Variables'
p31916
sa(dp31917
S'description'
p31918
S'The interval at which time steps are output to the solution file\n'
p31919
sS'cpp_type'
p31920
S'unsigned int'
p31921
sS'default'
p31922
S'1'
p31923
sS'name'
p31924
S'interval'
p31925
sS'required'
p31926
I00
sS'group_name'
p31927
S'Timing'
p31928
sa(dp31929
S'description'
p31930
S'Number of divisions applied to time step when outputting linear residuals\n'
p31931
sS'cpp_type'
p31932
S'double'
p31933
sS'default'
p31934
S'1000'
p31935
sS'name'
p31936
S'linear_residual_dt_divisor'
p31937
sS'required'
p31938
I00
sS'group_name'
p31939
S'PETSc'
p31940
sa(dp31941
S'description'
p31942
S'Specifies an end time to begin output on each linear residual evaluation\n'
p31943
sS'cpp_type'
p31944
S'double'
p31945
sS'default'
p31946
g3
sS'name'
p31947
S'linear_residual_end_time'
p31948
sS'required'
p31949
I00
sS'group_name'
p31950
S'PETSc'
p31951
sa(dp31952
S'description'
p31953
S'Specifies a start time to begin output on each linear residual evaluation\n'
p31954
sS'cpp_type'
p31955
S'double'
p31956
sS'default'
p31957
g3
sS'name'
p31958
S'linear_residual_start_time'
p31959
sS'required'
p31960
I00
sS'group_name'
p31961
S'PETSc'
p31962
sa(dp31963
S'description'
p31964
S'Specifies whether output occurs on each linear residual evaluation\n'
p31965
sS'cpp_type'
p31966
S'bool'
p31967
sS'default'
p31968
S'0'
p31969
sS'name'
p31970
S'linear_residuals'
p31971
sS'required'
p31972
I00
sS'group_name'
p31973
S'PETSc'
p31974
sa(dp31975
S'description'
p31976
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p31977
sS'cpp_type'
p31978
S'double'
p31979
sS'default'
p31980
S'1000'
p31981
sS'name'
p31982
S'nonlinear_residual_dt_divisor'
p31983
sS'required'
p31984
I00
sS'group_name'
p31985
S'PETSc'
p31986
sa(dp31987
S'description'
p31988
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p31989
sS'cpp_type'
p31990
S'double'
p31991
sS'default'
p31992
g3
sS'name'
p31993
S'nonlinear_residual_end_time'
p31994
sS'required'
p31995
I00
sS'group_name'
p31996
S'PETSc'
p31997
sa(dp31998
S'description'
p31999
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p32000
sS'cpp_type'
p32001
S'double'
p32002
sS'default'
p32003
g3
sS'name'
p32004
S'nonlinear_residual_start_time'
p32005
sS'required'
p32006
I00
sS'group_name'
p32007
S'PETSc'
p32008
sa(dp32009
S'description'
p32010
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p32011
sS'cpp_type'
p32012
S'bool'
p32013
sS'default'
p32014
S'0'
p32015
sS'name'
p32016
S'nonlinear_residuals'
p32017
sS'required'
p32018
I00
sS'group_name'
p32019
S'PETSc'
p32020
sa(dp32021
S'description'
p32022
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p32023
sS'cpp_type'
p32024
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p32025
sS'default'
p32026
g3
sS'name'
p32027
S'output_if_base_contains'
p32028
sS'required'
p32029
I00
sS'group_name'
p32030
S'Advanced'
p32031
sa(dp32032
S'description'
p32033
S'Specifies whether output occurs on each linear residual evaluation\n'
p32034
sS'cpp_type'
p32035
S'bool'
p32036
sS'default'
p32037
S'0'
p32038
sS'name'
p32039
S'output_linear'
p32040
sS'required'
p32041
I00
sS'group_name'
p32042
Nsa(dp32043
S'description'
p32044
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p32045
sS'cpp_type'
p32046
S'bool'
p32047
sS'default'
p32048
S'0'
p32049
sS'name'
p32050
S'output_nonlinear'
p32051
sS'required'
p32052
I00
sS'group_name'
p32053
Nsa(dp32054
S'description'
p32055
S'Enable/disable the output of postprocessors\n'
p32056
sS'cpp_type'
p32057
S'bool'
p32058
sS'default'
p32059
S'1'
p32060
sS'name'
p32061
S'output_postprocessors'
p32062
sS'required'
p32063
I00
sS'group_name'
p32064
Nsa(dp32065
S'description'
p32066
S'The number of for extension suffix (e.g., out.e-s002)\n'
p32067
sS'cpp_type'
p32068
S'unsigned int'
p32069
sS'default'
p32070
S'4'
p32071
sS'name'
p32072
S'padding'
p32073
sS'required'
p32074
I00
sS'group_name'
p32075
S'Advanced'
p32076
sa(dp32077
S'description'
p32078
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p32079
sS'cpp_type'
p32080
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p32081
sS'default'
p32082
g3
sS'name'
p32083
S'show'
p32084
sS'required'
p32085
I00
sS'group_name'
p32086
S'Variables'
p32087
sa(dp32088
S'description'
p32089
S'Time at which this output object begins to operate\n'
p32090
sS'cpp_type'
p32091
S'double'
p32092
sS'default'
p32093
g3
sS'name'
p32094
S'start_time'
p32095
sS'required'
p32096
I00
sS'group_name'
p32097
S'Timing'
p32098
sa(dp32099
S'description'
p32100
S'Only export results at sync times\n'
p32101
sS'cpp_type'
p32102
S'bool'
p32103
sS'default'
p32104
S'0'
p32105
sS'name'
p32106
S'sync_only'
p32107
sS'required'
p32108
I00
sS'group_name'
p32109
S'Timing'
p32110
sa(dp32111
S'description'
p32112
S'Times at which the output and solution is forced to occur\n'
p32113
sS'cpp_type'
p32114
S'std::__1::vector<double, std::__1::allocator<double> >'
p32115
sS'default'
p32116
g3
sS'name'
p32117
S'sync_times'
p32118
sS'required'
p32119
I00
sS'group_name'
p32120
S'Timing'
p32121
sa(dp32122
S'description'
p32123
S"Whether or not the 'time' column should be written for Postprocessor CSV files\n"
p32124
sS'cpp_type'
p32125
S'bool'
p32126
sS'default'
p32127
S'1'
p32128
sS'name'
p32129
S'time_column'
p32130
sS'required'
p32131
I00
sS'group_name'
p32132
Nsa(dp32133
S'description'
p32134
S'When true and VecptorPostprocessor data exists, write a csv file containing the timestep and time information.\n'
p32135
sS'cpp_type'
p32136
S'bool'
p32137
sS'default'
p32138
S'0'
p32139
sS'name'
p32140
S'time_data'
p32141
sS'required'
p32142
I00
sS'group_name'
p32143
Nsa(dp32144
S'description'
p32145
S'Time tolerance utilized checking start and end times\n'
p32146
sS'cpp_type'
p32147
S'double'
p32148
sS'default'
p32149
S'1e-14'
p32150
sS'name'
p32151
S'time_tolerance'
p32152
sS'required'
p32153
I00
sS'group_name'
p32154
S'Timing'
p32155
sa(dp32156
S'description'
p32157
g3
sS'cpp_type'
p32158
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32159
sS'default'
p32160
S'Gnuplot'
p32161
sS'name'
p32162
S'type'
p32163
sS'required'
p32164
I00
sS'group_name'
p32165
Nsa(dp32166
S'description'
p32167
S'Enable/disable the use of the displaced mesh for outputting\n'
p32168
sS'cpp_type'
p32169
S'bool'
p32170
sS'default'
p32171
S'0'
p32172
sS'name'
p32173
S'use_displaced'
p32174
sS'required'
p32175
I00
sS'group_name'
p32176
NsasS'name'
p32177
S'/Outputs/Gnuplot'
p32178
sa(dp32179
S'description'
p32180
g3
sS'subblocks'
p32181
NsS'parameters'
p32182
(lp32183
(dp32184
S'name'
p32185
S'additional_execute_on'
p32186
sS'cpp_type'
p32187
S'MultiMooseEnum'
p32188
sS'default'
p32189
g3
sS'description'
p32190
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p32191
sS'required'
p32192
I00
sS'options'
p32193
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32194
sS'group_name'
p32195
Nsa(dp32196
S'description'
p32197
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32198
sS'cpp_type'
p32199
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p32200
sS'default'
p32201
g3
sS'name'
p32202
S'control_tags'
p32203
sS'required'
p32204
I00
sS'group_name'
p32205
S'Advanced'
p32206
sa(dp32207
S'description'
p32208
S'Set the enabled status of the MooseObject.\n'
p32209
sS'cpp_type'
p32210
S'bool'
p32211
sS'default'
p32212
S'1'
p32213
sS'name'
p32214
S'enable'
p32215
sS'required'
p32216
I00
sS'group_name'
p32217
S'Advanced'
p32218
sa(dp32219
S'description'
p32220
S'Time at which this output object stop operating\n'
p32221
sS'cpp_type'
p32222
S'double'
p32223
sS'default'
p32224
g3
sS'name'
p32225
S'end_time'
p32226
sS'required'
p32227
I00
sS'group_name'
p32228
S'Timing'
p32229
sa(dp32230
S'description'
p32231
S'The interval at which time steps are output to the solution file\n'
p32232
sS'cpp_type'
p32233
S'unsigned int'
p32234
sS'default'
p32235
S'1'
p32236
sS'name'
p32237
S'interval'
p32238
sS'required'
p32239
I00
sS'group_name'
p32240
S'Timing'
p32241
sa(dp32242
S'description'
p32243
S'Time at which this output object begins to operate\n'
p32244
sS'cpp_type'
p32245
S'double'
p32246
sS'default'
p32247
g3
sS'name'
p32248
S'start_time'
p32249
sS'required'
p32250
I00
sS'group_name'
p32251
S'Timing'
p32252
sa(dp32253
S'description'
p32254
S'Only export results at sync times\n'
p32255
sS'cpp_type'
p32256
S'bool'
p32257
sS'default'
p32258
S'0'
p32259
sS'name'
p32260
S'sync_only'
p32261
sS'required'
p32262
I00
sS'group_name'
p32263
S'Timing'
p32264
sa(dp32265
S'description'
p32266
S'Times at which the output and solution is forced to occur\n'
p32267
sS'cpp_type'
p32268
S'std::__1::vector<double, std::__1::allocator<double> >'
p32269
sS'default'
p32270
g3
sS'name'
p32271
S'sync_times'
p32272
sS'required'
p32273
I00
sS'group_name'
p32274
S'Timing'
p32275
sa(dp32276
S'description'
p32277
S'Time tolerance utilized checking start and end times\n'
p32278
sS'cpp_type'
p32279
S'double'
p32280
sS'default'
p32281
S'1e-14'
p32282
sS'name'
p32283
S'time_tolerance'
p32284
sS'required'
p32285
I00
sS'group_name'
p32286
S'Timing'
p32287
sa(dp32288
S'description'
p32289
g3
sS'cpp_type'
p32290
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32291
sS'default'
p32292
S'MaterialPropertyDebugOutput'
p32293
sS'name'
p32294
S'type'
p32295
sS'required'
p32296
I00
sS'group_name'
p32297
Nsa(dp32298
S'description'
p32299
S'Enable/disable the use of the displaced mesh for outputting\n'
p32300
sS'cpp_type'
p32301
S'bool'
p32302
sS'default'
p32303
S'0'
p32304
sS'name'
p32305
S'use_displaced'
p32306
sS'required'
p32307
I00
sS'group_name'
p32308
NsasS'name'
p32309
S'/Outputs/MaterialPropertyDebugOutput'
p32310
sa(dp32311
S'description'
p32312
S'Object for output data in the Nemesis format\n'
p32313
sS'subblocks'
p32314
NsS'parameters'
p32315
(lp32316
(dp32317
S'name'
p32318
S'additional_execute_on'
p32319
sS'cpp_type'
p32320
S'MultiMooseEnum'
p32321
sS'default'
p32322
g3
sS'description'
p32323
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p32324
sS'required'
p32325
I00
sS'options'
p32326
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32327
sS'group_name'
p32328
Nsa(dp32329
S'description'
p32330
S'When true the date and time are appended to the output filename.\n'
p32331
sS'cpp_type'
p32332
S'bool'
p32333
sS'default'
p32334
S'0'
p32335
sS'name'
p32336
S'append_date'
p32337
sS'required'
p32338
I00
sS'group_name'
p32339
Nsa(dp32340
S'description'
p32341
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p32342
sS'cpp_type'
p32343
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32344
sS'default'
p32345
g3
sS'name'
p32346
S'append_date_format'
p32347
sS'required'
p32348
I00
sS'group_name'
p32349
Nsa(dp32350
S'description'
p32351
S"Append '_oversample' to the output file base\n"
p32352
sS'cpp_type'
p32353
S'bool'
p32354
sS'default'
p32355
S'0'
p32356
sS'name'
p32357
S'append_oversample'
p32358
sS'required'
p32359
I00
sS'group_name'
p32360
Nsa(dp32361
S'description'
p32362
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32363
sS'cpp_type'
p32364
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p32365
sS'default'
p32366
g3
sS'name'
p32367
S'control_tags'
p32368
sS'required'
p32369
I00
sS'group_name'
p32370
S'Advanced'
p32371
sa(dp32372
S'description'
p32373
S'Set the enabled status of the MooseObject.\n'
p32374
sS'cpp_type'
p32375
S'bool'
p32376
sS'default'
p32377
S'1'
p32378
sS'name'
p32379
S'enable'
p32380
sS'required'
p32381
I00
sS'group_name'
p32382
S'Advanced'
p32383
sa(dp32384
S'description'
p32385
S'Time at which this output object stop operating\n'
p32386
sS'cpp_type'
p32387
S'double'
p32388
sS'default'
p32389
g3
sS'name'
p32390
S'end_time'
p32391
sS'required'
p32392
I00
sS'group_name'
p32393
S'Timing'
p32394
sa(dp32395
S'description'
p32396
S'Enable/disable the output of elemental variables\n'
p32397
sS'cpp_type'
p32398
S'bool'
p32399
sS'default'
p32400
S'1'
p32401
sS'name'
p32402
S'execute_elemental_variables'
p32403
sS'required'
p32404
I00
sS'group_name'
p32405
Nsa(dp32406
S'description'
p32407
S'Enable/disable the output of input file information\n'
p32408
sS'cpp_type'
p32409
S'bool'
p32410
sS'default'
p32411
S'1'
p32412
sS'name'
p32413
S'execute_input'
p32414
sS'required'
p32415
I00
sS'group_name'
p32416
Nsa(dp32417
S'name'
p32418
S'execute_input_on'
p32419
sS'cpp_type'
p32420
S'MultiMooseEnum'
p32421
sS'default'
p32422
g3
sS'description'
p32423
S'Enable/disable the output of the input file\n'
p32424
sS'required'
p32425
I00
sS'options'
p32426
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32427
sS'group_name'
p32428
S'Variables'
p32429
sa(dp32430
S'description'
p32431
S'Enable/disable the output of nodal variables\n'
p32432
sS'cpp_type'
p32433
S'bool'
p32434
sS'default'
p32435
S'1'
p32436
sS'name'
p32437
S'execute_nodal_variables'
p32438
sS'required'
p32439
I00
sS'group_name'
p32440
Nsa(dp32441
S'name'
p32442
S'execute_on'
p32443
sS'cpp_type'
p32444
S'MultiMooseEnum'
p32445
sS'default'
p32446
S'INITIAL TIMESTEP_END'
p32447
sS'description'
p32448
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p32449
sS'required'
p32450
I00
sS'options'
p32451
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32452
sS'group_name'
p32453
Nsa(dp32454
S'name'
p32455
S'execute_postprocessors_on'
p32456
sS'cpp_type'
p32457
S'MultiMooseEnum'
p32458
sS'default'
p32459
g3
sS'description'
p32460
S'Control of when postprocessors are output\n'
p32461
sS'required'
p32462
I00
sS'options'
p32463
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32464
sS'group_name'
p32465
S'Variables'
p32466
sa(dp32467
S'description'
p32468
S'Enable/disable the output of aux scalar variables\n'
p32469
sS'cpp_type'
p32470
S'bool'
p32471
sS'default'
p32472
S'1'
p32473
sS'name'
p32474
S'execute_scalar_variables'
p32475
sS'required'
p32476
I00
sS'group_name'
p32477
Nsa(dp32478
S'name'
p32479
S'execute_scalars_on'
p32480
sS'cpp_type'
p32481
S'MultiMooseEnum'
p32482
sS'default'
p32483
g3
sS'description'
p32484
S'Control the output of scalar variables\n'
p32485
sS'required'
p32486
I00
sS'options'
p32487
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32488
sS'group_name'
p32489
S'Variables'
p32490
sa(dp32491
S'description'
p32492
S'Enable/disable the output of the simulation information\n'
p32493
sS'cpp_type'
p32494
S'bool'
p32495
sS'default'
p32496
S'1'
p32497
sS'name'
p32498
S'execute_system_information'
p32499
sS'required'
p32500
I00
sS'group_name'
p32501
Nsa(dp32502
S'description'
p32503
S'Enable/disable the output of vector postprocessors\n'
p32504
sS'cpp_type'
p32505
S'bool'
p32506
sS'default'
p32507
S'1'
p32508
sS'name'
p32509
S'execute_vector_postprocessors'
p32510
sS'required'
p32511
I00
sS'group_name'
p32512
Nsa(dp32513
S'description'
p32514
S'The name of the mesh file to read, for oversampling\n'
p32515
sS'cpp_type'
p32516
S'MeshFileName'
p32517
sS'default'
p32518
g3
sS'name'
p32519
S'file'
p32520
sS'required'
p32521
I00
sS'group_name'
p32522
S'Oversampling'
p32523
sa(dp32524
S'description'
p32525
S'The desired solution output name without an extension\n'
p32526
sS'cpp_type'
p32527
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32528
sS'default'
p32529
g3
sS'name'
p32530
S'file_base'
p32531
sS'required'
p32532
I00
sS'group_name'
p32533
Nsa(dp32534
S'description'
p32535
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p32536
sS'cpp_type'
p32537
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p32538
sS'default'
p32539
g3
sS'name'
p32540
S'hide'
p32541
sS'required'
p32542
I00
sS'group_name'
p32543
S'Variables'
p32544
sa(dp32545
S'description'
p32546
S'The interval at which time steps are output to the solution file\n'
p32547
sS'cpp_type'
p32548
S'unsigned int'
p32549
sS'default'
p32550
S'1'
p32551
sS'name'
p32552
S'interval'
p32553
sS'required'
p32554
I00
sS'group_name'
p32555
S'Timing'
p32556
sa(dp32557
S'description'
p32558
S'Number of divisions applied to time step when outputting linear residuals\n'
p32559
sS'cpp_type'
p32560
S'double'
p32561
sS'default'
p32562
S'1000'
p32563
sS'name'
p32564
S'linear_residual_dt_divisor'
p32565
sS'required'
p32566
I00
sS'group_name'
p32567
S'PETSc'
p32568
sa(dp32569
S'description'
p32570
S'Specifies an end time to begin output on each linear residual evaluation\n'
p32571
sS'cpp_type'
p32572
S'double'
p32573
sS'default'
p32574
g3
sS'name'
p32575
S'linear_residual_end_time'
p32576
sS'required'
p32577
I00
sS'group_name'
p32578
S'PETSc'
p32579
sa(dp32580
S'description'
p32581
S'Specifies a start time to begin output on each linear residual evaluation\n'
p32582
sS'cpp_type'
p32583
S'double'
p32584
sS'default'
p32585
g3
sS'name'
p32586
S'linear_residual_start_time'
p32587
sS'required'
p32588
I00
sS'group_name'
p32589
S'PETSc'
p32590
sa(dp32591
S'description'
p32592
S'Specifies whether output occurs on each linear residual evaluation\n'
p32593
sS'cpp_type'
p32594
S'bool'
p32595
sS'default'
p32596
S'0'
p32597
sS'name'
p32598
S'linear_residuals'
p32599
sS'required'
p32600
I00
sS'group_name'
p32601
S'PETSc'
p32602
sa(dp32603
S'description'
p32604
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p32605
sS'cpp_type'
p32606
S'double'
p32607
sS'default'
p32608
S'1000'
p32609
sS'name'
p32610
S'nonlinear_residual_dt_divisor'
p32611
sS'required'
p32612
I00
sS'group_name'
p32613
S'PETSc'
p32614
sa(dp32615
S'description'
p32616
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p32617
sS'cpp_type'
p32618
S'double'
p32619
sS'default'
p32620
g3
sS'name'
p32621
S'nonlinear_residual_end_time'
p32622
sS'required'
p32623
I00
sS'group_name'
p32624
S'PETSc'
p32625
sa(dp32626
S'description'
p32627
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p32628
sS'cpp_type'
p32629
S'double'
p32630
sS'default'
p32631
g3
sS'name'
p32632
S'nonlinear_residual_start_time'
p32633
sS'required'
p32634
I00
sS'group_name'
p32635
S'PETSc'
p32636
sa(dp32637
S'description'
p32638
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p32639
sS'cpp_type'
p32640
S'bool'
p32641
sS'default'
p32642
S'0'
p32643
sS'name'
p32644
S'nonlinear_residuals'
p32645
sS'required'
p32646
I00
sS'group_name'
p32647
S'PETSc'
p32648
sa(dp32649
S'description'
p32650
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p32651
sS'cpp_type'
p32652
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p32653
sS'default'
p32654
g3
sS'name'
p32655
S'output_if_base_contains'
p32656
sS'required'
p32657
I00
sS'group_name'
p32658
S'Advanced'
p32659
sa(dp32660
S'description'
p32661
S'Specifies whether output occurs on each linear residual evaluation\n'
p32662
sS'cpp_type'
p32663
S'bool'
p32664
sS'default'
p32665
S'0'
p32666
sS'name'
p32667
S'output_linear'
p32668
sS'required'
p32669
I00
sS'group_name'
p32670
Nsa(dp32671
S'description'
p32672
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p32673
sS'cpp_type'
p32674
S'bool'
p32675
sS'default'
p32676
S'0'
p32677
sS'name'
p32678
S'output_nonlinear'
p32679
sS'required'
p32680
I00
sS'group_name'
p32681
Nsa(dp32682
S'description'
p32683
S'Enable/disable the output of postprocessors\n'
p32684
sS'cpp_type'
p32685
S'bool'
p32686
sS'default'
p32687
S'1'
p32688
sS'name'
p32689
S'output_postprocessors'
p32690
sS'required'
p32691
I00
sS'group_name'
p32692
Nsa(dp32693
S'description'
p32694
S'Set to true to enable oversampling\n'
p32695
sS'cpp_type'
p32696
S'bool'
p32697
sS'default'
p32698
S'0'
p32699
sS'name'
p32700
S'oversample'
p32701
sS'required'
p32702
I00
sS'group_name'
p32703
Nsa(dp32704
S'description'
p32705
S'The number of for extension suffix (e.g., out.e-s002)\n'
p32706
sS'cpp_type'
p32707
S'unsigned int'
p32708
sS'default'
p32709
S'4'
p32710
sS'name'
p32711
S'padding'
p32712
sS'required'
p32713
I00
sS'group_name'
p32714
S'Advanced'
p32715
sa(dp32716
S'description'
p32717
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p32718
sS'cpp_type'
p32719
S'libMesh::Point'
p32720
sS'default'
p32721
g3
sS'name'
p32722
S'position'
p32723
sS'required'
p32724
I00
sS'group_name'
p32725
S'Oversampling'
p32726
sa(dp32727
S'description'
p32728
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p32729
sS'cpp_type'
p32730
S'unsigned int'
p32731
sS'default'
p32732
S'0'
p32733
sS'name'
p32734
S'refinements'
p32735
sS'required'
p32736
I00
sS'group_name'
p32737
S'Oversampling'
p32738
sa(dp32739
S'description'
p32740
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p32741
sS'cpp_type'
p32742
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p32743
sS'default'
p32744
g3
sS'name'
p32745
S'show'
p32746
sS'required'
p32747
I00
sS'group_name'
p32748
S'Variables'
p32749
sa(dp32750
S'description'
p32751
S'Time at which this output object begins to operate\n'
p32752
sS'cpp_type'
p32753
S'double'
p32754
sS'default'
p32755
g3
sS'name'
p32756
S'start_time'
p32757
sS'required'
p32758
I00
sS'group_name'
p32759
S'Timing'
p32760
sa(dp32761
S'description'
p32762
S'Only export results at sync times\n'
p32763
sS'cpp_type'
p32764
S'bool'
p32765
sS'default'
p32766
S'0'
p32767
sS'name'
p32768
S'sync_only'
p32769
sS'required'
p32770
I00
sS'group_name'
p32771
S'Timing'
p32772
sa(dp32773
S'description'
p32774
S'Times at which the output and solution is forced to occur\n'
p32775
sS'cpp_type'
p32776
S'std::__1::vector<double, std::__1::allocator<double> >'
p32777
sS'default'
p32778
g3
sS'name'
p32779
S'sync_times'
p32780
sS'required'
p32781
I00
sS'group_name'
p32782
S'Timing'
p32783
sa(dp32784
S'description'
p32785
S'Time tolerance utilized checking start and end times\n'
p32786
sS'cpp_type'
p32787
S'double'
p32788
sS'default'
p32789
S'1e-14'
p32790
sS'name'
p32791
S'time_tolerance'
p32792
sS'required'
p32793
I00
sS'group_name'
p32794
S'Timing'
p32795
sa(dp32796
S'description'
p32797
g3
sS'cpp_type'
p32798
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32799
sS'default'
p32800
S'Nemesis'
p32801
sS'name'
p32802
S'type'
p32803
sS'required'
p32804
I00
sS'group_name'
p32805
Nsa(dp32806
S'description'
p32807
S'Enable/disable the use of the displaced mesh for outputting\n'
p32808
sS'cpp_type'
p32809
S'bool'
p32810
sS'default'
p32811
S'0'
p32812
sS'name'
p32813
S'use_displaced'
p32814
sS'required'
p32815
I00
sS'group_name'
p32816
NsasS'name'
p32817
S'/Outputs/Nemesis'
p32818
sa(dp32819
S'description'
p32820
g3
sS'subblocks'
p32821
NsS'parameters'
p32822
(lp32823
(dp32824
S'name'
p32825
S'additional_execute_on'
p32826
sS'cpp_type'
p32827
S'MultiMooseEnum'
p32828
sS'default'
p32829
g3
sS'description'
p32830
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p32831
sS'required'
p32832
I00
sS'options'
p32833
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32834
sS'group_name'
p32835
Nsa(dp32836
S'description'
p32837
S'When true the date and time are appended to the output filename.\n'
p32838
sS'cpp_type'
p32839
S'bool'
p32840
sS'default'
p32841
S'0'
p32842
sS'name'
p32843
S'append_date'
p32844
sS'required'
p32845
I00
sS'group_name'
p32846
Nsa(dp32847
S'description'
p32848
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p32849
sS'cpp_type'
p32850
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32851
sS'default'
p32852
g3
sS'name'
p32853
S'append_date_format'
p32854
sS'required'
p32855
I00
sS'group_name'
p32856
Nsa(dp32857
S'description'
p32858
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p32859
sS'cpp_type'
p32860
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p32861
sS'default'
p32862
g3
sS'name'
p32863
S'control_tags'
p32864
sS'required'
p32865
I00
sS'group_name'
p32866
S'Advanced'
p32867
sa(dp32868
S'description'
p32869
S'Set the enabled status of the MooseObject.\n'
p32870
sS'cpp_type'
p32871
S'bool'
p32872
sS'default'
p32873
S'1'
p32874
sS'name'
p32875
S'enable'
p32876
sS'required'
p32877
I00
sS'group_name'
p32878
S'Advanced'
p32879
sa(dp32880
S'description'
p32881
S'Time at which this output object stop operating\n'
p32882
sS'cpp_type'
p32883
S'double'
p32884
sS'default'
p32885
g3
sS'name'
p32886
S'end_time'
p32887
sS'required'
p32888
I00
sS'group_name'
p32889
S'Timing'
p32890
sa(dp32891
S'name'
p32892
S'execute_on'
p32893
sS'cpp_type'
p32894
S'MultiMooseEnum'
p32895
sS'default'
p32896
S'INITIAL TIMESTEP_END'
p32897
sS'description'
p32898
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p32899
sS'required'
p32900
I00
sS'options'
p32901
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p32902
sS'group_name'
p32903
Nsa(dp32904
S'description'
p32905
S'The desired solution output name without an extension\n'
p32906
sS'cpp_type'
p32907
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32908
sS'default'
p32909
g3
sS'name'
p32910
S'file_base'
p32911
sS'required'
p32912
I00
sS'group_name'
p32913
Nsa(dp32914
S'description'
p32915
S'The interval at which time steps are output to the solution file\n'
p32916
sS'cpp_type'
p32917
S'unsigned int'
p32918
sS'default'
p32919
S'1'
p32920
sS'name'
p32921
S'interval'
p32922
sS'required'
p32923
I00
sS'group_name'
p32924
S'Timing'
p32925
sa(dp32926
S'description'
p32927
S'Number of divisions applied to time step when outputting linear residuals\n'
p32928
sS'cpp_type'
p32929
S'double'
p32930
sS'default'
p32931
S'1000'
p32932
sS'name'
p32933
S'linear_residual_dt_divisor'
p32934
sS'required'
p32935
I00
sS'group_name'
p32936
S'PETSc'
p32937
sa(dp32938
S'description'
p32939
S'Specifies an end time to begin output on each linear residual evaluation\n'
p32940
sS'cpp_type'
p32941
S'double'
p32942
sS'default'
p32943
g3
sS'name'
p32944
S'linear_residual_end_time'
p32945
sS'required'
p32946
I00
sS'group_name'
p32947
S'PETSc'
p32948
sa(dp32949
S'description'
p32950
S'Specifies a start time to begin output on each linear residual evaluation\n'
p32951
sS'cpp_type'
p32952
S'double'
p32953
sS'default'
p32954
g3
sS'name'
p32955
S'linear_residual_start_time'
p32956
sS'required'
p32957
I00
sS'group_name'
p32958
S'PETSc'
p32959
sa(dp32960
S'description'
p32961
S'Specifies whether output occurs on each linear residual evaluation\n'
p32962
sS'cpp_type'
p32963
S'bool'
p32964
sS'default'
p32965
S'0'
p32966
sS'name'
p32967
S'linear_residuals'
p32968
sS'required'
p32969
I00
sS'group_name'
p32970
S'PETSc'
p32971
sa(dp32972
S'description'
p32973
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p32974
sS'cpp_type'
p32975
S'double'
p32976
sS'default'
p32977
S'1000'
p32978
sS'name'
p32979
S'nonlinear_residual_dt_divisor'
p32980
sS'required'
p32981
I00
sS'group_name'
p32982
S'PETSc'
p32983
sa(dp32984
S'description'
p32985
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p32986
sS'cpp_type'
p32987
S'double'
p32988
sS'default'
p32989
g3
sS'name'
p32990
S'nonlinear_residual_end_time'
p32991
sS'required'
p32992
I00
sS'group_name'
p32993
S'PETSc'
p32994
sa(dp32995
S'description'
p32996
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p32997
sS'cpp_type'
p32998
S'double'
p32999
sS'default'
p33000
g3
sS'name'
p33001
S'nonlinear_residual_start_time'
p33002
sS'required'
p33003
I00
sS'group_name'
p33004
S'PETSc'
p33005
sa(dp33006
S'description'
p33007
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p33008
sS'cpp_type'
p33009
S'bool'
p33010
sS'default'
p33011
S'0'
p33012
sS'name'
p33013
S'nonlinear_residuals'
p33014
sS'required'
p33015
I00
sS'group_name'
p33016
S'PETSc'
p33017
sa(dp33018
S'description'
p33019
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p33020
sS'cpp_type'
p33021
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p33022
sS'default'
p33023
g3
sS'name'
p33024
S'output_if_base_contains'
p33025
sS'required'
p33026
I00
sS'group_name'
p33027
S'Advanced'
p33028
sa(dp33029
S'description'
p33030
S'Specifies whether output occurs on each linear residual evaluation\n'
p33031
sS'cpp_type'
p33032
S'bool'
p33033
sS'default'
p33034
S'0'
p33035
sS'name'
p33036
S'output_linear'
p33037
sS'required'
p33038
I00
sS'group_name'
p33039
Nsa(dp33040
S'description'
p33041
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p33042
sS'cpp_type'
p33043
S'bool'
p33044
sS'default'
p33045
S'0'
p33046
sS'name'
p33047
S'output_nonlinear'
p33048
sS'required'
p33049
I00
sS'group_name'
p33050
Nsa(dp33051
S'description'
p33052
S'The number of for extension suffix (e.g., out.e-s002)\n'
p33053
sS'cpp_type'
p33054
S'unsigned int'
p33055
sS'default'
p33056
S'4'
p33057
sS'name'
p33058
S'padding'
p33059
sS'required'
p33060
I00
sS'group_name'
p33061
S'Advanced'
p33062
sa(dp33063
S'description'
p33064
S'Time at which this output object begins to operate\n'
p33065
sS'cpp_type'
p33066
S'double'
p33067
sS'default'
p33068
g3
sS'name'
p33069
S'start_time'
p33070
sS'required'
p33071
I00
sS'group_name'
p33072
S'Timing'
p33073
sa(dp33074
S'description'
p33075
S'Only export results at sync times\n'
p33076
sS'cpp_type'
p33077
S'bool'
p33078
sS'default'
p33079
S'0'
p33080
sS'name'
p33081
S'sync_only'
p33082
sS'required'
p33083
I00
sS'group_name'
p33084
S'Timing'
p33085
sa(dp33086
S'description'
p33087
S'Times at which the output and solution is forced to occur\n'
p33088
sS'cpp_type'
p33089
S'std::__1::vector<double, std::__1::allocator<double> >'
p33090
sS'default'
p33091
g3
sS'name'
p33092
S'sync_times'
p33093
sS'required'
p33094
I00
sS'group_name'
p33095
S'Timing'
p33096
sa(dp33097
S'description'
p33098
S'Time tolerance utilized checking start and end times\n'
p33099
sS'cpp_type'
p33100
S'double'
p33101
sS'default'
p33102
S'1e-14'
p33103
sS'name'
p33104
S'time_tolerance'
p33105
sS'required'
p33106
I00
sS'group_name'
p33107
S'Timing'
p33108
sa(dp33109
S'description'
p33110
g3
sS'cpp_type'
p33111
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33112
sS'default'
p33113
S'SolutionHistory'
p33114
sS'name'
p33115
S'type'
p33116
sS'required'
p33117
I00
sS'group_name'
p33118
Nsa(dp33119
S'description'
p33120
S'Enable/disable the use of the displaced mesh for outputting\n'
p33121
sS'cpp_type'
p33122
S'bool'
p33123
sS'default'
p33124
S'0'
p33125
sS'name'
p33126
S'use_displaced'
p33127
sS'required'
p33128
I00
sS'group_name'
p33129
NsasS'name'
p33130
S'/Outputs/SolutionHistory'
p33131
sa(dp33132
S'description'
p33133
S'Object for outputting data in the Tecplot format\n'
p33134
sS'subblocks'
p33135
NsS'parameters'
p33136
(lp33137
(dp33138
S'name'
p33139
S'additional_execute_on'
p33140
sS'cpp_type'
p33141
S'MultiMooseEnum'
p33142
sS'default'
p33143
g3
sS'description'
p33144
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p33145
sS'required'
p33146
I00
sS'options'
p33147
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p33148
sS'group_name'
p33149
Nsa(dp33150
S'description'
p33151
S'When true the date and time are appended to the output filename.\n'
p33152
sS'cpp_type'
p33153
S'bool'
p33154
sS'default'
p33155
S'0'
p33156
sS'name'
p33157
S'append_date'
p33158
sS'required'
p33159
I00
sS'group_name'
p33160
Nsa(dp33161
S'description'
p33162
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p33163
sS'cpp_type'
p33164
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33165
sS'default'
p33166
g3
sS'name'
p33167
S'append_date_format'
p33168
sS'required'
p33169
I00
sS'group_name'
p33170
Nsa(dp33171
S'description'
p33172
S"Append '_oversample' to the output file base\n"
p33173
sS'cpp_type'
p33174
S'bool'
p33175
sS'default'
p33176
S'0'
p33177
sS'name'
p33178
S'append_oversample'
p33179
sS'required'
p33180
I00
sS'group_name'
p33181
Nsa(dp33182
S'description'
p33183
S'If true, append to an existing ASCII file rather than creating a new file each time\n'
p33184
sS'cpp_type'
p33185
S'bool'
p33186
sS'default'
p33187
S'0'
p33188
sS'name'
p33189
S'ascii_append'
p33190
sS'required'
p33191
I00
sS'group_name'
p33192
Nsa(dp33193
S'description'
p33194
S'Set Tecplot files to output in binary format\n'
p33195
sS'cpp_type'
p33196
S'bool'
p33197
sS'default'
p33198
S'0'
p33199
sS'name'
p33200
S'binary'
p33201
sS'required'
p33202
I00
sS'group_name'
p33203
S'Advanced'
p33204
sa(dp33205
S'description'
p33206
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33207
sS'cpp_type'
p33208
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p33209
sS'default'
p33210
g3
sS'name'
p33211
S'control_tags'
p33212
sS'required'
p33213
I00
sS'group_name'
p33214
S'Advanced'
p33215
sa(dp33216
S'description'
p33217
S'Set the enabled status of the MooseObject.\n'
p33218
sS'cpp_type'
p33219
S'bool'
p33220
sS'default'
p33221
S'1'
p33222
sS'name'
p33223
S'enable'
p33224
sS'required'
p33225
I00
sS'group_name'
p33226
S'Advanced'
p33227
sa(dp33228
S'description'
p33229
S'Time at which this output object stop operating\n'
p33230
sS'cpp_type'
p33231
S'double'
p33232
sS'default'
p33233
g3
sS'name'
p33234
S'end_time'
p33235
sS'required'
p33236
I00
sS'group_name'
p33237
S'Timing'
p33238
sa(dp33239
S'name'
p33240
S'execute_on'
p33241
sS'cpp_type'
p33242
S'MultiMooseEnum'
p33243
sS'default'
p33244
S'INITIAL TIMESTEP_END'
p33245
sS'description'
p33246
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p33247
sS'required'
p33248
I00
sS'options'
p33249
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p33250
sS'group_name'
p33251
Nsa(dp33252
S'description'
p33253
S'The name of the mesh file to read, for oversampling\n'
p33254
sS'cpp_type'
p33255
S'MeshFileName'
p33256
sS'default'
p33257
g3
sS'name'
p33258
S'file'
p33259
sS'required'
p33260
I00
sS'group_name'
p33261
S'Oversampling'
p33262
sa(dp33263
S'description'
p33264
S'The desired solution output name without an extension\n'
p33265
sS'cpp_type'
p33266
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33267
sS'default'
p33268
g3
sS'name'
p33269
S'file_base'
p33270
sS'required'
p33271
I00
sS'group_name'
p33272
Nsa(dp33273
S'description'
p33274
S'The interval at which time steps are output to the solution file\n'
p33275
sS'cpp_type'
p33276
S'unsigned int'
p33277
sS'default'
p33278
S'1'
p33279
sS'name'
p33280
S'interval'
p33281
sS'required'
p33282
I00
sS'group_name'
p33283
S'Timing'
p33284
sa(dp33285
S'description'
p33286
S'Number of divisions applied to time step when outputting linear residuals\n'
p33287
sS'cpp_type'
p33288
S'double'
p33289
sS'default'
p33290
S'1000'
p33291
sS'name'
p33292
S'linear_residual_dt_divisor'
p33293
sS'required'
p33294
I00
sS'group_name'
p33295
S'PETSc'
p33296
sa(dp33297
S'description'
p33298
S'Specifies an end time to begin output on each linear residual evaluation\n'
p33299
sS'cpp_type'
p33300
S'double'
p33301
sS'default'
p33302
g3
sS'name'
p33303
S'linear_residual_end_time'
p33304
sS'required'
p33305
I00
sS'group_name'
p33306
S'PETSc'
p33307
sa(dp33308
S'description'
p33309
S'Specifies a start time to begin output on each linear residual evaluation\n'
p33310
sS'cpp_type'
p33311
S'double'
p33312
sS'default'
p33313
g3
sS'name'
p33314
S'linear_residual_start_time'
p33315
sS'required'
p33316
I00
sS'group_name'
p33317
S'PETSc'
p33318
sa(dp33319
S'description'
p33320
S'Specifies whether output occurs on each linear residual evaluation\n'
p33321
sS'cpp_type'
p33322
S'bool'
p33323
sS'default'
p33324
S'0'
p33325
sS'name'
p33326
S'linear_residuals'
p33327
sS'required'
p33328
I00
sS'group_name'
p33329
S'PETSc'
p33330
sa(dp33331
S'description'
p33332
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p33333
sS'cpp_type'
p33334
S'double'
p33335
sS'default'
p33336
S'1000'
p33337
sS'name'
p33338
S'nonlinear_residual_dt_divisor'
p33339
sS'required'
p33340
I00
sS'group_name'
p33341
S'PETSc'
p33342
sa(dp33343
S'description'
p33344
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p33345
sS'cpp_type'
p33346
S'double'
p33347
sS'default'
p33348
g3
sS'name'
p33349
S'nonlinear_residual_end_time'
p33350
sS'required'
p33351
I00
sS'group_name'
p33352
S'PETSc'
p33353
sa(dp33354
S'description'
p33355
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p33356
sS'cpp_type'
p33357
S'double'
p33358
sS'default'
p33359
g3
sS'name'
p33360
S'nonlinear_residual_start_time'
p33361
sS'required'
p33362
I00
sS'group_name'
p33363
S'PETSc'
p33364
sa(dp33365
S'description'
p33366
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p33367
sS'cpp_type'
p33368
S'bool'
p33369
sS'default'
p33370
S'0'
p33371
sS'name'
p33372
S'nonlinear_residuals'
p33373
sS'required'
p33374
I00
sS'group_name'
p33375
S'PETSc'
p33376
sa(dp33377
S'description'
p33378
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p33379
sS'cpp_type'
p33380
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p33381
sS'default'
p33382
g3
sS'name'
p33383
S'output_if_base_contains'
p33384
sS'required'
p33385
I00
sS'group_name'
p33386
S'Advanced'
p33387
sa(dp33388
S'description'
p33389
S'Specifies whether output occurs on each linear residual evaluation\n'
p33390
sS'cpp_type'
p33391
S'bool'
p33392
sS'default'
p33393
S'0'
p33394
sS'name'
p33395
S'output_linear'
p33396
sS'required'
p33397
I00
sS'group_name'
p33398
Nsa(dp33399
S'description'
p33400
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p33401
sS'cpp_type'
p33402
S'bool'
p33403
sS'default'
p33404
S'0'
p33405
sS'name'
p33406
S'output_nonlinear'
p33407
sS'required'
p33408
I00
sS'group_name'
p33409
Nsa(dp33410
S'description'
p33411
S'Set to true to enable oversampling\n'
p33412
sS'cpp_type'
p33413
S'bool'
p33414
sS'default'
p33415
S'0'
p33416
sS'name'
p33417
S'oversample'
p33418
sS'required'
p33419
I00
sS'group_name'
p33420
Nsa(dp33421
S'description'
p33422
S'The number of for extension suffix (e.g., out.e-s002)\n'
p33423
sS'cpp_type'
p33424
S'unsigned int'
p33425
sS'default'
p33426
S'4'
p33427
sS'name'
p33428
S'padding'
p33429
sS'required'
p33430
I00
sS'group_name'
p33431
S'Advanced'
p33432
sa(dp33433
S'description'
p33434
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p33435
sS'cpp_type'
p33436
S'libMesh::Point'
p33437
sS'default'
p33438
g3
sS'name'
p33439
S'position'
p33440
sS'required'
p33441
I00
sS'group_name'
p33442
S'Oversampling'
p33443
sa(dp33444
S'description'
p33445
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p33446
sS'cpp_type'
p33447
S'unsigned int'
p33448
sS'default'
p33449
S'0'
p33450
sS'name'
p33451
S'refinements'
p33452
sS'required'
p33453
I00
sS'group_name'
p33454
S'Oversampling'
p33455
sa(dp33456
S'description'
p33457
S'Time at which this output object begins to operate\n'
p33458
sS'cpp_type'
p33459
S'double'
p33460
sS'default'
p33461
g3
sS'name'
p33462
S'start_time'
p33463
sS'required'
p33464
I00
sS'group_name'
p33465
S'Timing'
p33466
sa(dp33467
S'description'
p33468
S'Only export results at sync times\n'
p33469
sS'cpp_type'
p33470
S'bool'
p33471
sS'default'
p33472
S'0'
p33473
sS'name'
p33474
S'sync_only'
p33475
sS'required'
p33476
I00
sS'group_name'
p33477
S'Timing'
p33478
sa(dp33479
S'description'
p33480
S'Times at which the output and solution is forced to occur\n'
p33481
sS'cpp_type'
p33482
S'std::__1::vector<double, std::__1::allocator<double> >'
p33483
sS'default'
p33484
g3
sS'name'
p33485
S'sync_times'
p33486
sS'required'
p33487
I00
sS'group_name'
p33488
S'Timing'
p33489
sa(dp33490
S'description'
p33491
S'Time tolerance utilized checking start and end times\n'
p33492
sS'cpp_type'
p33493
S'double'
p33494
sS'default'
p33495
S'1e-14'
p33496
sS'name'
p33497
S'time_tolerance'
p33498
sS'required'
p33499
I00
sS'group_name'
p33500
S'Timing'
p33501
sa(dp33502
S'description'
p33503
g3
sS'cpp_type'
p33504
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33505
sS'default'
p33506
S'Tecplot'
p33507
sS'name'
p33508
S'type'
p33509
sS'required'
p33510
I00
sS'group_name'
p33511
Nsa(dp33512
S'description'
p33513
S'Enable/disable the use of the displaced mesh for outputting\n'
p33514
sS'cpp_type'
p33515
S'bool'
p33516
sS'default'
p33517
S'0'
p33518
sS'name'
p33519
S'use_displaced'
p33520
sS'required'
p33521
I00
sS'group_name'
p33522
NsasS'name'
p33523
S'/Outputs/Tecplot'
p33524
sa(dp33525
S'description'
p33526
g3
sS'subblocks'
p33527
NsS'parameters'
p33528
(lp33529
(dp33530
S'name'
p33531
S'additional_execute_on'
p33532
sS'cpp_type'
p33533
S'MultiMooseEnum'
p33534
sS'default'
p33535
g3
sS'description'
p33536
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p33537
sS'required'
p33538
I00
sS'options'
p33539
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p33540
sS'group_name'
p33541
Nsa(dp33542
S'description'
p33543
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33544
sS'cpp_type'
p33545
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p33546
sS'default'
p33547
g3
sS'name'
p33548
S'control_tags'
p33549
sS'required'
p33550
I00
sS'group_name'
p33551
S'Advanced'
p33552
sa(dp33553
S'description'
p33554
S'Set the enabled status of the MooseObject.\n'
p33555
sS'cpp_type'
p33556
S'bool'
p33557
sS'default'
p33558
S'1'
p33559
sS'name'
p33560
S'enable'
p33561
sS'required'
p33562
I00
sS'group_name'
p33563
S'Advanced'
p33564
sa(dp33565
S'description'
p33566
S'Time at which this output object stop operating\n'
p33567
sS'cpp_type'
p33568
S'double'
p33569
sS'default'
p33570
g3
sS'name'
p33571
S'end_time'
p33572
sS'required'
p33573
I00
sS'group_name'
p33574
S'Timing'
p33575
sa(dp33576
S'name'
p33577
S'execute_on'
p33578
sS'cpp_type'
p33579
S'MultiMooseEnum'
p33580
sS'default'
p33581
S'LINEAR NONLINEAR TIMESTEP_END'
p33582
sS'description'
p33583
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p33584
sS'required'
p33585
I00
sS'options'
p33586
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p33587
sS'group_name'
p33588
Nsa(dp33589
S'description'
p33590
S'The interval at which time steps are output to the solution file\n'
p33591
sS'cpp_type'
p33592
S'unsigned int'
p33593
sS'default'
p33594
S'1'
p33595
sS'name'
p33596
S'interval'
p33597
sS'required'
p33598
I00
sS'group_name'
p33599
S'Timing'
p33600
sa(dp33601
S'description'
p33602
S'Number of divisions applied to time step when outputting linear residuals\n'
p33603
sS'cpp_type'
p33604
S'double'
p33605
sS'default'
p33606
S'1000'
p33607
sS'name'
p33608
S'linear_residual_dt_divisor'
p33609
sS'required'
p33610
I00
sS'group_name'
p33611
S'PETSc'
p33612
sa(dp33613
S'description'
p33614
S'Specifies an end time to begin output on each linear residual evaluation\n'
p33615
sS'cpp_type'
p33616
S'double'
p33617
sS'default'
p33618
g3
sS'name'
p33619
S'linear_residual_end_time'
p33620
sS'required'
p33621
I00
sS'group_name'
p33622
S'PETSc'
p33623
sa(dp33624
S'description'
p33625
S'Specifies a start time to begin output on each linear residual evaluation\n'
p33626
sS'cpp_type'
p33627
S'double'
p33628
sS'default'
p33629
g3
sS'name'
p33630
S'linear_residual_start_time'
p33631
sS'required'
p33632
I00
sS'group_name'
p33633
S'PETSc'
p33634
sa(dp33635
S'description'
p33636
S'Specifies whether output occurs on each linear residual evaluation\n'
p33637
sS'cpp_type'
p33638
S'bool'
p33639
sS'default'
p33640
S'0'
p33641
sS'name'
p33642
S'linear_residuals'
p33643
sS'required'
p33644
I00
sS'group_name'
p33645
S'PETSc'
p33646
sa(dp33647
S'description'
p33648
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p33649
sS'cpp_type'
p33650
S'double'
p33651
sS'default'
p33652
S'1000'
p33653
sS'name'
p33654
S'nonlinear_residual_dt_divisor'
p33655
sS'required'
p33656
I00
sS'group_name'
p33657
S'PETSc'
p33658
sa(dp33659
S'description'
p33660
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p33661
sS'cpp_type'
p33662
S'double'
p33663
sS'default'
p33664
g3
sS'name'
p33665
S'nonlinear_residual_end_time'
p33666
sS'required'
p33667
I00
sS'group_name'
p33668
S'PETSc'
p33669
sa(dp33670
S'description'
p33671
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p33672
sS'cpp_type'
p33673
S'double'
p33674
sS'default'
p33675
g3
sS'name'
p33676
S'nonlinear_residual_start_time'
p33677
sS'required'
p33678
I00
sS'group_name'
p33679
S'PETSc'
p33680
sa(dp33681
S'description'
p33682
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p33683
sS'cpp_type'
p33684
S'bool'
p33685
sS'default'
p33686
S'0'
p33687
sS'name'
p33688
S'nonlinear_residuals'
p33689
sS'required'
p33690
I00
sS'group_name'
p33691
S'PETSc'
p33692
sa(dp33693
S'description'
p33694
S'The number of top residuals to print out (0 = no output)\n'
p33695
sS'cpp_type'
p33696
S'unsigned int'
p33697
sS'default'
p33698
S'0'
p33699
sS'name'
p33700
S'num_residuals'
p33701
sS'required'
p33702
I00
sS'group_name'
p33703
Nsa(dp33704
S'description'
p33705
S'Specifies whether output occurs on each linear residual evaluation\n'
p33706
sS'cpp_type'
p33707
S'bool'
p33708
sS'default'
p33709
S'0'
p33710
sS'name'
p33711
S'output_linear'
p33712
sS'required'
p33713
I00
sS'group_name'
p33714
Nsa(dp33715
S'description'
p33716
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p33717
sS'cpp_type'
p33718
S'bool'
p33719
sS'default'
p33720
S'0'
p33721
sS'name'
p33722
S'output_nonlinear'
p33723
sS'required'
p33724
I00
sS'group_name'
p33725
Nsa(dp33726
S'description'
p33727
S'Time at which this output object begins to operate\n'
p33728
sS'cpp_type'
p33729
S'double'
p33730
sS'default'
p33731
g3
sS'name'
p33732
S'start_time'
p33733
sS'required'
p33734
I00
sS'group_name'
p33735
S'Timing'
p33736
sa(dp33737
S'description'
p33738
S'Only export results at sync times\n'
p33739
sS'cpp_type'
p33740
S'bool'
p33741
sS'default'
p33742
S'0'
p33743
sS'name'
p33744
S'sync_only'
p33745
sS'required'
p33746
I00
sS'group_name'
p33747
S'Timing'
p33748
sa(dp33749
S'description'
p33750
S'Times at which the output and solution is forced to occur\n'
p33751
sS'cpp_type'
p33752
S'std::__1::vector<double, std::__1::allocator<double> >'
p33753
sS'default'
p33754
g3
sS'name'
p33755
S'sync_times'
p33756
sS'required'
p33757
I00
sS'group_name'
p33758
S'Timing'
p33759
sa(dp33760
S'description'
p33761
S'Time tolerance utilized checking start and end times\n'
p33762
sS'cpp_type'
p33763
S'double'
p33764
sS'default'
p33765
S'1e-14'
p33766
sS'name'
p33767
S'time_tolerance'
p33768
sS'required'
p33769
I00
sS'group_name'
p33770
S'Timing'
p33771
sa(dp33772
S'description'
p33773
g3
sS'cpp_type'
p33774
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33775
sS'default'
p33776
S'TopResidualDebugOutput'
p33777
sS'name'
p33778
S'type'
p33779
sS'required'
p33780
I00
sS'group_name'
p33781
Nsa(dp33782
S'description'
p33783
S'Enable/disable the use of the displaced mesh for outputting\n'
p33784
sS'cpp_type'
p33785
S'bool'
p33786
sS'default'
p33787
S'0'
p33788
sS'name'
p33789
S'use_displaced'
p33790
sS'required'
p33791
I00
sS'group_name'
p33792
NsasS'name'
p33793
S'/Outputs/TopResidualDebugOutput'
p33794
sa(dp33795
S'description'
p33796
g3
sS'subblocks'
p33797
NsS'parameters'
p33798
(lp33799
(dp33800
S'name'
p33801
S'additional_execute_on'
p33802
sS'cpp_type'
p33803
S'MultiMooseEnum'
p33804
sS'default'
p33805
g3
sS'description'
p33806
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p33807
sS'required'
p33808
I00
sS'options'
p33809
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p33810
sS'group_name'
p33811
Nsa(dp33812
S'description'
p33813
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p33814
sS'cpp_type'
p33815
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p33816
sS'default'
p33817
g3
sS'name'
p33818
S'control_tags'
p33819
sS'required'
p33820
I00
sS'group_name'
p33821
S'Advanced'
p33822
sa(dp33823
S'description'
p33824
S'Set the enabled status of the MooseObject.\n'
p33825
sS'cpp_type'
p33826
S'bool'
p33827
sS'default'
p33828
S'1'
p33829
sS'name'
p33830
S'enable'
p33831
sS'required'
p33832
I00
sS'group_name'
p33833
S'Advanced'
p33834
sa(dp33835
S'description'
p33836
S'Time at which this output object stop operating\n'
p33837
sS'cpp_type'
p33838
S'double'
p33839
sS'default'
p33840
g3
sS'name'
p33841
S'end_time'
p33842
sS'required'
p33843
I00
sS'group_name'
p33844
S'Timing'
p33845
sa(dp33846
S'name'
p33847
S'execute_on'
p33848
sS'cpp_type'
p33849
S'MultiMooseEnum'
p33850
sS'default'
p33851
S'NONLINEAR'
p33852
sS'description'
p33853
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p33854
sS'required'
p33855
I00
sS'options'
p33856
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p33857
sS'group_name'
p33858
Nsa(dp33859
S'description'
p33860
S'The interval at which time steps are output to the solution file\n'
p33861
sS'cpp_type'
p33862
S'unsigned int'
p33863
sS'default'
p33864
S'1'
p33865
sS'name'
p33866
S'interval'
p33867
sS'required'
p33868
I00
sS'group_name'
p33869
S'Timing'
p33870
sa(dp33871
S'description'
p33872
S'Number of divisions applied to time step when outputting linear residuals\n'
p33873
sS'cpp_type'
p33874
S'double'
p33875
sS'default'
p33876
S'1000'
p33877
sS'name'
p33878
S'linear_residual_dt_divisor'
p33879
sS'required'
p33880
I00
sS'group_name'
p33881
S'PETSc'
p33882
sa(dp33883
S'description'
p33884
S'Specifies an end time to begin output on each linear residual evaluation\n'
p33885
sS'cpp_type'
p33886
S'double'
p33887
sS'default'
p33888
g3
sS'name'
p33889
S'linear_residual_end_time'
p33890
sS'required'
p33891
I00
sS'group_name'
p33892
S'PETSc'
p33893
sa(dp33894
S'description'
p33895
S'Specifies a start time to begin output on each linear residual evaluation\n'
p33896
sS'cpp_type'
p33897
S'double'
p33898
sS'default'
p33899
g3
sS'name'
p33900
S'linear_residual_start_time'
p33901
sS'required'
p33902
I00
sS'group_name'
p33903
S'PETSc'
p33904
sa(dp33905
S'description'
p33906
S'Specifies whether output occurs on each linear residual evaluation\n'
p33907
sS'cpp_type'
p33908
S'bool'
p33909
sS'default'
p33910
S'0'
p33911
sS'name'
p33912
S'linear_residuals'
p33913
sS'required'
p33914
I00
sS'group_name'
p33915
S'PETSc'
p33916
sa(dp33917
S'description'
p33918
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p33919
sS'cpp_type'
p33920
S'double'
p33921
sS'default'
p33922
S'1000'
p33923
sS'name'
p33924
S'nonlinear_residual_dt_divisor'
p33925
sS'required'
p33926
I00
sS'group_name'
p33927
S'PETSc'
p33928
sa(dp33929
S'description'
p33930
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p33931
sS'cpp_type'
p33932
S'double'
p33933
sS'default'
p33934
g3
sS'name'
p33935
S'nonlinear_residual_end_time'
p33936
sS'required'
p33937
I00
sS'group_name'
p33938
S'PETSc'
p33939
sa(dp33940
S'description'
p33941
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p33942
sS'cpp_type'
p33943
S'double'
p33944
sS'default'
p33945
g3
sS'name'
p33946
S'nonlinear_residual_start_time'
p33947
sS'required'
p33948
I00
sS'group_name'
p33949
S'PETSc'
p33950
sa(dp33951
S'description'
p33952
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p33953
sS'cpp_type'
p33954
S'bool'
p33955
sS'default'
p33956
S'0'
p33957
sS'name'
p33958
S'nonlinear_residuals'
p33959
sS'required'
p33960
I00
sS'group_name'
p33961
S'PETSc'
p33962
sa(dp33963
S'description'
p33964
S'Specifies whether output occurs on each linear residual evaluation\n'
p33965
sS'cpp_type'
p33966
S'bool'
p33967
sS'default'
p33968
S'0'
p33969
sS'name'
p33970
S'output_linear'
p33971
sS'required'
p33972
I00
sS'group_name'
p33973
Nsa(dp33974
S'description'
p33975
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p33976
sS'cpp_type'
p33977
S'bool'
p33978
sS'default'
p33979
S'0'
p33980
sS'name'
p33981
S'output_nonlinear'
p33982
sS'required'
p33983
I00
sS'group_name'
p33984
Nsa(dp33985
S'description'
p33986
S'Time at which this output object begins to operate\n'
p33987
sS'cpp_type'
p33988
S'double'
p33989
sS'default'
p33990
g3
sS'name'
p33991
S'start_time'
p33992
sS'required'
p33993
I00
sS'group_name'
p33994
S'Timing'
p33995
sa(dp33996
S'description'
p33997
S'Only export results at sync times\n'
p33998
sS'cpp_type'
p33999
S'bool'
p34000
sS'default'
p34001
S'0'
p34002
sS'name'
p34003
S'sync_only'
p34004
sS'required'
p34005
I00
sS'group_name'
p34006
S'Timing'
p34007
sa(dp34008
S'description'
p34009
S'Times at which the output and solution is forced to occur\n'
p34010
sS'cpp_type'
p34011
S'std::__1::vector<double, std::__1::allocator<double> >'
p34012
sS'default'
p34013
g3
sS'name'
p34014
S'sync_times'
p34015
sS'required'
p34016
I00
sS'group_name'
p34017
S'Timing'
p34018
sa(dp34019
S'description'
p34020
S'Time tolerance utilized checking start and end times\n'
p34021
sS'cpp_type'
p34022
S'double'
p34023
sS'default'
p34024
S'1e-14'
p34025
sS'name'
p34026
S'time_tolerance'
p34027
sS'required'
p34028
I00
sS'group_name'
p34029
S'Timing'
p34030
sa(dp34031
S'description'
p34032
g3
sS'cpp_type'
p34033
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34034
sS'default'
p34035
S'VariableResidualNormsDebugOutput'
p34036
sS'name'
p34037
S'type'
p34038
sS'required'
p34039
I00
sS'group_name'
p34040
Nsa(dp34041
S'description'
p34042
S'Enable/disable the use of the displaced mesh for outputting\n'
p34043
sS'cpp_type'
p34044
S'bool'
p34045
sS'default'
p34046
S'0'
p34047
sS'name'
p34048
S'use_displaced'
p34049
sS'required'
p34050
I00
sS'group_name'
p34051
NsasS'name'
p34052
S'/Outputs/VariableResidualNormsDebugOutput'
p34053
sa(dp34054
S'description'
p34055
S'Object for outputting data in the XDA/XDR format\n'
p34056
sS'subblocks'
p34057
NsS'parameters'
p34058
(lp34059
(dp34060
S'name'
p34061
S'additional_execute_on'
p34062
sS'cpp_type'
p34063
S'MultiMooseEnum'
p34064
sS'default'
p34065
g3
sS'description'
p34066
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p34067
sS'required'
p34068
I00
sS'options'
p34069
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p34070
sS'group_name'
p34071
Nsa(dp34072
S'description'
p34073
S'When true the date and time are appended to the output filename.\n'
p34074
sS'cpp_type'
p34075
S'bool'
p34076
sS'default'
p34077
S'0'
p34078
sS'name'
p34079
S'append_date'
p34080
sS'required'
p34081
I00
sS'group_name'
p34082
Nsa(dp34083
S'description'
p34084
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p34085
sS'cpp_type'
p34086
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34087
sS'default'
p34088
g3
sS'name'
p34089
S'append_date_format'
p34090
sS'required'
p34091
I00
sS'group_name'
p34092
Nsa(dp34093
S'description'
p34094
S"Append '_oversample' to the output file base\n"
p34095
sS'cpp_type'
p34096
S'bool'
p34097
sS'default'
p34098
S'0'
p34099
sS'name'
p34100
S'append_oversample'
p34101
sS'required'
p34102
I00
sS'group_name'
p34103
Nsa(dp34104
S'description'
p34105
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34106
sS'cpp_type'
p34107
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34108
sS'default'
p34109
g3
sS'name'
p34110
S'control_tags'
p34111
sS'required'
p34112
I00
sS'group_name'
p34113
S'Advanced'
p34114
sa(dp34115
S'description'
p34116
S'Set the enabled status of the MooseObject.\n'
p34117
sS'cpp_type'
p34118
S'bool'
p34119
sS'default'
p34120
S'1'
p34121
sS'name'
p34122
S'enable'
p34123
sS'required'
p34124
I00
sS'group_name'
p34125
S'Advanced'
p34126
sa(dp34127
S'description'
p34128
S'Time at which this output object stop operating\n'
p34129
sS'cpp_type'
p34130
S'double'
p34131
sS'default'
p34132
g3
sS'name'
p34133
S'end_time'
p34134
sS'required'
p34135
I00
sS'group_name'
p34136
S'Timing'
p34137
sa(dp34138
S'name'
p34139
S'execute_on'
p34140
sS'cpp_type'
p34141
S'MultiMooseEnum'
p34142
sS'default'
p34143
S'INITIAL TIMESTEP_END'
p34144
sS'description'
p34145
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p34146
sS'required'
p34147
I00
sS'options'
p34148
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p34149
sS'group_name'
p34150
Nsa(dp34151
S'description'
p34152
S'The name of the mesh file to read, for oversampling\n'
p34153
sS'cpp_type'
p34154
S'MeshFileName'
p34155
sS'default'
p34156
g3
sS'name'
p34157
S'file'
p34158
sS'required'
p34159
I00
sS'group_name'
p34160
S'Oversampling'
p34161
sa(dp34162
S'description'
p34163
S'The desired solution output name without an extension\n'
p34164
sS'cpp_type'
p34165
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34166
sS'default'
p34167
g3
sS'name'
p34168
S'file_base'
p34169
sS'required'
p34170
I00
sS'group_name'
p34171
Nsa(dp34172
S'description'
p34173
S'The interval at which time steps are output to the solution file\n'
p34174
sS'cpp_type'
p34175
S'unsigned int'
p34176
sS'default'
p34177
S'1'
p34178
sS'name'
p34179
S'interval'
p34180
sS'required'
p34181
I00
sS'group_name'
p34182
S'Timing'
p34183
sa(dp34184
S'description'
p34185
S'Number of divisions applied to time step when outputting linear residuals\n'
p34186
sS'cpp_type'
p34187
S'double'
p34188
sS'default'
p34189
S'1000'
p34190
sS'name'
p34191
S'linear_residual_dt_divisor'
p34192
sS'required'
p34193
I00
sS'group_name'
p34194
S'PETSc'
p34195
sa(dp34196
S'description'
p34197
S'Specifies an end time to begin output on each linear residual evaluation\n'
p34198
sS'cpp_type'
p34199
S'double'
p34200
sS'default'
p34201
g3
sS'name'
p34202
S'linear_residual_end_time'
p34203
sS'required'
p34204
I00
sS'group_name'
p34205
S'PETSc'
p34206
sa(dp34207
S'description'
p34208
S'Specifies a start time to begin output on each linear residual evaluation\n'
p34209
sS'cpp_type'
p34210
S'double'
p34211
sS'default'
p34212
g3
sS'name'
p34213
S'linear_residual_start_time'
p34214
sS'required'
p34215
I00
sS'group_name'
p34216
S'PETSc'
p34217
sa(dp34218
S'description'
p34219
S'Specifies whether output occurs on each linear residual evaluation\n'
p34220
sS'cpp_type'
p34221
S'bool'
p34222
sS'default'
p34223
S'0'
p34224
sS'name'
p34225
S'linear_residuals'
p34226
sS'required'
p34227
I00
sS'group_name'
p34228
S'PETSc'
p34229
sa(dp34230
S'description'
p34231
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p34232
sS'cpp_type'
p34233
S'double'
p34234
sS'default'
p34235
S'1000'
p34236
sS'name'
p34237
S'nonlinear_residual_dt_divisor'
p34238
sS'required'
p34239
I00
sS'group_name'
p34240
S'PETSc'
p34241
sa(dp34242
S'description'
p34243
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p34244
sS'cpp_type'
p34245
S'double'
p34246
sS'default'
p34247
g3
sS'name'
p34248
S'nonlinear_residual_end_time'
p34249
sS'required'
p34250
I00
sS'group_name'
p34251
S'PETSc'
p34252
sa(dp34253
S'description'
p34254
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p34255
sS'cpp_type'
p34256
S'double'
p34257
sS'default'
p34258
g3
sS'name'
p34259
S'nonlinear_residual_start_time'
p34260
sS'required'
p34261
I00
sS'group_name'
p34262
S'PETSc'
p34263
sa(dp34264
S'description'
p34265
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p34266
sS'cpp_type'
p34267
S'bool'
p34268
sS'default'
p34269
S'0'
p34270
sS'name'
p34271
S'nonlinear_residuals'
p34272
sS'required'
p34273
I00
sS'group_name'
p34274
S'PETSc'
p34275
sa(dp34276
S'description'
p34277
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p34278
sS'cpp_type'
p34279
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34280
sS'default'
p34281
g3
sS'name'
p34282
S'output_if_base_contains'
p34283
sS'required'
p34284
I00
sS'group_name'
p34285
S'Advanced'
p34286
sa(dp34287
S'description'
p34288
S'Specifies whether output occurs on each linear residual evaluation\n'
p34289
sS'cpp_type'
p34290
S'bool'
p34291
sS'default'
p34292
S'0'
p34293
sS'name'
p34294
S'output_linear'
p34295
sS'required'
p34296
I00
sS'group_name'
p34297
Nsa(dp34298
S'description'
p34299
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p34300
sS'cpp_type'
p34301
S'bool'
p34302
sS'default'
p34303
S'0'
p34304
sS'name'
p34305
S'output_nonlinear'
p34306
sS'required'
p34307
I00
sS'group_name'
p34308
Nsa(dp34309
S'description'
p34310
S'Set to true to enable oversampling\n'
p34311
sS'cpp_type'
p34312
S'bool'
p34313
sS'default'
p34314
S'0'
p34315
sS'name'
p34316
S'oversample'
p34317
sS'required'
p34318
I00
sS'group_name'
p34319
Nsa(dp34320
S'description'
p34321
S'The number of for extension suffix (e.g., out.e-s002)\n'
p34322
sS'cpp_type'
p34323
S'unsigned int'
p34324
sS'default'
p34325
S'4'
p34326
sS'name'
p34327
S'padding'
p34328
sS'required'
p34329
I00
sS'group_name'
p34330
S'Advanced'
p34331
sa(dp34332
S'description'
p34333
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p34334
sS'cpp_type'
p34335
S'libMesh::Point'
p34336
sS'default'
p34337
g3
sS'name'
p34338
S'position'
p34339
sS'required'
p34340
I00
sS'group_name'
p34341
S'Oversampling'
p34342
sa(dp34343
S'description'
p34344
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p34345
sS'cpp_type'
p34346
S'unsigned int'
p34347
sS'default'
p34348
S'0'
p34349
sS'name'
p34350
S'refinements'
p34351
sS'required'
p34352
I00
sS'group_name'
p34353
S'Oversampling'
p34354
sa(dp34355
S'description'
p34356
S'Time at which this output object begins to operate\n'
p34357
sS'cpp_type'
p34358
S'double'
p34359
sS'default'
p34360
g3
sS'name'
p34361
S'start_time'
p34362
sS'required'
p34363
I00
sS'group_name'
p34364
S'Timing'
p34365
sa(dp34366
S'description'
p34367
S'Only export results at sync times\n'
p34368
sS'cpp_type'
p34369
S'bool'
p34370
sS'default'
p34371
S'0'
p34372
sS'name'
p34373
S'sync_only'
p34374
sS'required'
p34375
I00
sS'group_name'
p34376
S'Timing'
p34377
sa(dp34378
S'description'
p34379
S'Times at which the output and solution is forced to occur\n'
p34380
sS'cpp_type'
p34381
S'std::__1::vector<double, std::__1::allocator<double> >'
p34382
sS'default'
p34383
g3
sS'name'
p34384
S'sync_times'
p34385
sS'required'
p34386
I00
sS'group_name'
p34387
S'Timing'
p34388
sa(dp34389
S'description'
p34390
S'Time tolerance utilized checking start and end times\n'
p34391
sS'cpp_type'
p34392
S'double'
p34393
sS'default'
p34394
S'1e-14'
p34395
sS'name'
p34396
S'time_tolerance'
p34397
sS'required'
p34398
I00
sS'group_name'
p34399
S'Timing'
p34400
sa(dp34401
S'description'
p34402
g3
sS'cpp_type'
p34403
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34404
sS'default'
p34405
S'XDA'
p34406
sS'name'
p34407
S'type'
p34408
sS'required'
p34409
I00
sS'group_name'
p34410
Nsa(dp34411
S'description'
p34412
S'Enable/disable the use of the displaced mesh for outputting\n'
p34413
sS'cpp_type'
p34414
S'bool'
p34415
sS'default'
p34416
S'0'
p34417
sS'name'
p34418
S'use_displaced'
p34419
sS'required'
p34420
I00
sS'group_name'
p34421
NsasS'name'
p34422
S'/Outputs/XDA'
p34423
sa(dp34424
S'description'
p34425
S'Object for outputting data in the XDA/XDR format\n'
p34426
sS'subblocks'
p34427
NsS'parameters'
p34428
(lp34429
(dp34430
S'name'
p34431
S'additional_execute_on'
p34432
sS'cpp_type'
p34433
S'MultiMooseEnum'
p34434
sS'default'
p34435
g3
sS'description'
p34436
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p34437
sS'required'
p34438
I00
sS'options'
p34439
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p34440
sS'group_name'
p34441
Nsa(dp34442
S'description'
p34443
S'When true the date and time are appended to the output filename.\n'
p34444
sS'cpp_type'
p34445
S'bool'
p34446
sS'default'
p34447
S'0'
p34448
sS'name'
p34449
S'append_date'
p34450
sS'required'
p34451
I00
sS'group_name'
p34452
Nsa(dp34453
S'description'
p34454
S'The format of the date/time to append, if not given UTC format used (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p34455
sS'cpp_type'
p34456
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34457
sS'default'
p34458
g3
sS'name'
p34459
S'append_date_format'
p34460
sS'required'
p34461
I00
sS'group_name'
p34462
Nsa(dp34463
S'description'
p34464
S"Append '_oversample' to the output file base\n"
p34465
sS'cpp_type'
p34466
S'bool'
p34467
sS'default'
p34468
S'0'
p34469
sS'name'
p34470
S'append_oversample'
p34471
sS'required'
p34472
I00
sS'group_name'
p34473
Nsa(dp34474
S'description'
p34475
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p34476
sS'cpp_type'
p34477
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34478
sS'default'
p34479
g3
sS'name'
p34480
S'control_tags'
p34481
sS'required'
p34482
I00
sS'group_name'
p34483
S'Advanced'
p34484
sa(dp34485
S'description'
p34486
S'Set the enabled status of the MooseObject.\n'
p34487
sS'cpp_type'
p34488
S'bool'
p34489
sS'default'
p34490
S'1'
p34491
sS'name'
p34492
S'enable'
p34493
sS'required'
p34494
I00
sS'group_name'
p34495
S'Advanced'
p34496
sa(dp34497
S'description'
p34498
S'Time at which this output object stop operating\n'
p34499
sS'cpp_type'
p34500
S'double'
p34501
sS'default'
p34502
g3
sS'name'
p34503
S'end_time'
p34504
sS'required'
p34505
I00
sS'group_name'
p34506
S'Timing'
p34507
sa(dp34508
S'name'
p34509
S'execute_on'
p34510
sS'cpp_type'
p34511
S'MultiMooseEnum'
p34512
sS'default'
p34513
S'INITIAL TIMESTEP_END'
p34514
sS'description'
p34515
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p34516
sS'required'
p34517
I00
sS'options'
p34518
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p34519
sS'group_name'
p34520
Nsa(dp34521
S'description'
p34522
S'The name of the mesh file to read, for oversampling\n'
p34523
sS'cpp_type'
p34524
S'MeshFileName'
p34525
sS'default'
p34526
g3
sS'name'
p34527
S'file'
p34528
sS'required'
p34529
I00
sS'group_name'
p34530
S'Oversampling'
p34531
sa(dp34532
S'description'
p34533
S'The desired solution output name without an extension\n'
p34534
sS'cpp_type'
p34535
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34536
sS'default'
p34537
g3
sS'name'
p34538
S'file_base'
p34539
sS'required'
p34540
I00
sS'group_name'
p34541
Nsa(dp34542
S'description'
p34543
S'The interval at which time steps are output to the solution file\n'
p34544
sS'cpp_type'
p34545
S'unsigned int'
p34546
sS'default'
p34547
S'1'
p34548
sS'name'
p34549
S'interval'
p34550
sS'required'
p34551
I00
sS'group_name'
p34552
S'Timing'
p34553
sa(dp34554
S'description'
p34555
S'Number of divisions applied to time step when outputting linear residuals\n'
p34556
sS'cpp_type'
p34557
S'double'
p34558
sS'default'
p34559
S'1000'
p34560
sS'name'
p34561
S'linear_residual_dt_divisor'
p34562
sS'required'
p34563
I00
sS'group_name'
p34564
S'PETSc'
p34565
sa(dp34566
S'description'
p34567
S'Specifies an end time to begin output on each linear residual evaluation\n'
p34568
sS'cpp_type'
p34569
S'double'
p34570
sS'default'
p34571
g3
sS'name'
p34572
S'linear_residual_end_time'
p34573
sS'required'
p34574
I00
sS'group_name'
p34575
S'PETSc'
p34576
sa(dp34577
S'description'
p34578
S'Specifies a start time to begin output on each linear residual evaluation\n'
p34579
sS'cpp_type'
p34580
S'double'
p34581
sS'default'
p34582
g3
sS'name'
p34583
S'linear_residual_start_time'
p34584
sS'required'
p34585
I00
sS'group_name'
p34586
S'PETSc'
p34587
sa(dp34588
S'description'
p34589
S'Specifies whether output occurs on each linear residual evaluation\n'
p34590
sS'cpp_type'
p34591
S'bool'
p34592
sS'default'
p34593
S'0'
p34594
sS'name'
p34595
S'linear_residuals'
p34596
sS'required'
p34597
I00
sS'group_name'
p34598
S'PETSc'
p34599
sa(dp34600
S'description'
p34601
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p34602
sS'cpp_type'
p34603
S'double'
p34604
sS'default'
p34605
S'1000'
p34606
sS'name'
p34607
S'nonlinear_residual_dt_divisor'
p34608
sS'required'
p34609
I00
sS'group_name'
p34610
S'PETSc'
p34611
sa(dp34612
S'description'
p34613
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p34614
sS'cpp_type'
p34615
S'double'
p34616
sS'default'
p34617
g3
sS'name'
p34618
S'nonlinear_residual_end_time'
p34619
sS'required'
p34620
I00
sS'group_name'
p34621
S'PETSc'
p34622
sa(dp34623
S'description'
p34624
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p34625
sS'cpp_type'
p34626
S'double'
p34627
sS'default'
p34628
g3
sS'name'
p34629
S'nonlinear_residual_start_time'
p34630
sS'required'
p34631
I00
sS'group_name'
p34632
S'PETSc'
p34633
sa(dp34634
S'description'
p34635
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p34636
sS'cpp_type'
p34637
S'bool'
p34638
sS'default'
p34639
S'0'
p34640
sS'name'
p34641
S'nonlinear_residuals'
p34642
sS'required'
p34643
I00
sS'group_name'
p34644
S'PETSc'
p34645
sa(dp34646
S'description'
p34647
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p34648
sS'cpp_type'
p34649
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34650
sS'default'
p34651
g3
sS'name'
p34652
S'output_if_base_contains'
p34653
sS'required'
p34654
I00
sS'group_name'
p34655
S'Advanced'
p34656
sa(dp34657
S'description'
p34658
S'Specifies whether output occurs on each linear residual evaluation\n'
p34659
sS'cpp_type'
p34660
S'bool'
p34661
sS'default'
p34662
S'0'
p34663
sS'name'
p34664
S'output_linear'
p34665
sS'required'
p34666
I00
sS'group_name'
p34667
Nsa(dp34668
S'description'
p34669
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p34670
sS'cpp_type'
p34671
S'bool'
p34672
sS'default'
p34673
S'0'
p34674
sS'name'
p34675
S'output_nonlinear'
p34676
sS'required'
p34677
I00
sS'group_name'
p34678
Nsa(dp34679
S'description'
p34680
S'Set to true to enable oversampling\n'
p34681
sS'cpp_type'
p34682
S'bool'
p34683
sS'default'
p34684
S'0'
p34685
sS'name'
p34686
S'oversample'
p34687
sS'required'
p34688
I00
sS'group_name'
p34689
Nsa(dp34690
S'description'
p34691
S'The number of for extension suffix (e.g., out.e-s002)\n'
p34692
sS'cpp_type'
p34693
S'unsigned int'
p34694
sS'default'
p34695
S'4'
p34696
sS'name'
p34697
S'padding'
p34698
sS'required'
p34699
I00
sS'group_name'
p34700
S'Advanced'
p34701
sa(dp34702
S'description'
p34703
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p34704
sS'cpp_type'
p34705
S'libMesh::Point'
p34706
sS'default'
p34707
g3
sS'name'
p34708
S'position'
p34709
sS'required'
p34710
I00
sS'group_name'
p34711
S'Oversampling'
p34712
sa(dp34713
S'description'
p34714
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p34715
sS'cpp_type'
p34716
S'unsigned int'
p34717
sS'default'
p34718
S'0'
p34719
sS'name'
p34720
S'refinements'
p34721
sS'required'
p34722
I00
sS'group_name'
p34723
S'Oversampling'
p34724
sa(dp34725
S'description'
p34726
S'Time at which this output object begins to operate\n'
p34727
sS'cpp_type'
p34728
S'double'
p34729
sS'default'
p34730
g3
sS'name'
p34731
S'start_time'
p34732
sS'required'
p34733
I00
sS'group_name'
p34734
S'Timing'
p34735
sa(dp34736
S'description'
p34737
S'Only export results at sync times\n'
p34738
sS'cpp_type'
p34739
S'bool'
p34740
sS'default'
p34741
S'0'
p34742
sS'name'
p34743
S'sync_only'
p34744
sS'required'
p34745
I00
sS'group_name'
p34746
S'Timing'
p34747
sa(dp34748
S'description'
p34749
S'Times at which the output and solution is forced to occur\n'
p34750
sS'cpp_type'
p34751
S'std::__1::vector<double, std::__1::allocator<double> >'
p34752
sS'default'
p34753
g3
sS'name'
p34754
S'sync_times'
p34755
sS'required'
p34756
I00
sS'group_name'
p34757
S'Timing'
p34758
sa(dp34759
S'description'
p34760
S'Time tolerance utilized checking start and end times\n'
p34761
sS'cpp_type'
p34762
S'double'
p34763
sS'default'
p34764
S'1e-14'
p34765
sS'name'
p34766
S'time_tolerance'
p34767
sS'required'
p34768
I00
sS'group_name'
p34769
S'Timing'
p34770
sa(dp34771
S'description'
p34772
g3
sS'cpp_type'
p34773
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34774
sS'default'
p34775
S'XDR'
p34776
sS'name'
p34777
S'type'
p34778
sS'required'
p34779
I00
sS'group_name'
p34780
Nsa(dp34781
S'description'
p34782
S'Enable/disable the use of the displaced mesh for outputting\n'
p34783
sS'cpp_type'
p34784
S'bool'
p34785
sS'default'
p34786
S'0'
p34787
sS'name'
p34788
S'use_displaced'
p34789
sS'required'
p34790
I00
sS'group_name'
p34791
NsasS'name'
p34792
S'/Outputs/XDR'
p34793
sasS'parameters'
p34794
(lp34795
(dp34796
S'description'
p34797
S'When true the date and time are appended to the output filename.\n'
p34798
sS'cpp_type'
p34799
S'bool'
p34800
sS'default'
p34801
S'0'
p34802
sS'name'
p34803
S'append_date'
p34804
sS'required'
p34805
I00
sS'group_name'
p34806
Nsa(dp34807
S'description'
p34808
S'The format of the date/time to append (see http://www.cplusplus.com/reference/ctime/strftime).\n'
p34809
sS'cpp_type'
p34810
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34811
sS'default'
p34812
g3
sS'name'
p34813
S'append_date_format'
p34814
sS'required'
p34815
I00
sS'group_name'
p34816
Nsa(dp34817
S'description'
p34818
S'Create checkpoint files using the default options.\n'
p34819
sS'cpp_type'
p34820
S'bool'
p34821
sS'default'
p34822
S'0'
p34823
sS'name'
p34824
S'checkpoint'
p34825
sS'required'
p34826
I00
sS'group_name'
p34827
Nsa(dp34828
S'description'
p34829
S'Set to false to turn off all coloring in all outputs\n'
p34830
sS'cpp_type'
p34831
S'bool'
p34832
sS'default'
p34833
S'1'
p34834
sS'name'
p34835
S'color'
p34836
sS'required'
p34837
I00
sS'group_name'
p34838
Nsa(dp34839
S'description'
p34840
S'Output the results using the default settings for Console output\n'
p34841
sS'cpp_type'
p34842
S'bool'
p34843
sS'default'
p34844
S'1'
p34845
sS'name'
p34846
S'console'
p34847
sS'required'
p34848
I00
sS'group_name'
p34849
Nsa(dp34850
S'description'
p34851
S'Enable the screen output of Control systems.\n'
p34852
sS'cpp_type'
p34853
S'bool'
p34854
sS'default'
p34855
S'0'
p34856
sS'name'
p34857
S'controls'
p34858
sS'required'
p34859
I00
sS'group_name'
p34860
Nsa(dp34861
S'description'
p34862
S'Output the scalar variable and postprocessors to a *.csv file using the default CSV output.\n'
p34863
sS'cpp_type'
p34864
S'bool'
p34865
sS'default'
p34866
S'0'
p34867
sS'name'
p34868
S'csv'
p34869
sS'required'
p34870
I00
sS'group_name'
p34871
Nsa(dp34872
S'description'
p34873
S'Create the dof map .json output file\n'
p34874
sS'cpp_type'
p34875
S'bool'
p34876
sS'default'
p34877
S'0'
p34878
sS'name'
p34879
S'dofmap'
p34880
sS'required'
p34881
I00
sS'group_name'
p34882
Nsa(dp34883
S'name'
p34884
S'execute_on'
p34885
sS'cpp_type'
p34886
S'MultiMooseEnum'
p34887
sS'default'
p34888
S'INITIAL TIMESTEP_END'
p34889
sS'description'
p34890
S"Set to (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment (default: 'initial timestep_end')\n"
p34891
sS'required'
p34892
I00
sS'options'
p34893
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p34894
sS'group_name'
p34895
Nsa(dp34896
S'description'
p34897
S'Output the results using the default settings for Exodus output\n'
p34898
sS'cpp_type'
p34899
S'bool'
p34900
sS'default'
p34901
S'0'
p34902
sS'name'
p34903
S'exodus'
p34904
sS'required'
p34905
I00
sS'group_name'
p34906
Nsa(dp34907
S'description'
p34908
S'Common file base name to be utilized with all output objects\n'
p34909
sS'cpp_type'
p34910
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34911
sS'default'
p34912
g3
sS'name'
p34913
S'file_base'
p34914
sS'required'
p34915
I00
sS'group_name'
p34916
Nsa(dp34917
S'description'
p34918
S'Output the results using the default settings for GMV output\n'
p34919
sS'cpp_type'
p34920
S'bool'
p34921
sS'default'
p34922
S'0'
p34923
sS'name'
p34924
S'gmv'
p34925
sS'required'
p34926
I00
sS'group_name'
p34927
Nsa(dp34928
S'description'
p34929
S'Output the scalar and postprocessor results using the default settings for GNUPlot output\n'
p34930
sS'cpp_type'
p34931
S'bool'
p34932
sS'default'
p34933
S'0'
p34934
sS'name'
p34935
S'gnuplot'
p34936
sS'required'
p34937
I00
sS'group_name'
p34938
Nsa(dp34939
S'description'
p34940
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p34941
sS'cpp_type'
p34942
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p34943
sS'default'
p34944
g3
sS'name'
p34945
S'hide'
p34946
sS'required'
p34947
I00
sS'group_name'
p34948
Nsa(dp34949
S'description'
p34950
S'The interval at which timesteps are output to the solution file\n'
p34951
sS'cpp_type'
p34952
S'unsigned int'
p34953
sS'default'
p34954
S'1'
p34955
sS'name'
p34956
S'interval'
p34957
sS'required'
p34958
I00
sS'group_name'
p34959
Nsa(dp34960
S'description'
p34961
S'Output the results using the default settings for Nemesis output\n'
p34962
sS'cpp_type'
p34963
S'bool'
p34964
sS'default'
p34965
S'0'
p34966
sS'name'
p34967
S'nemesis'
p34968
sS'required'
p34969
I00
sS'group_name'
p34970
Nsa(dp34971
S'description'
p34972
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p34973
sS'cpp_type'
p34974
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34975
sS'default'
p34976
g3
sS'name'
p34977
S'output_if_base_contains'
p34978
sS'required'
p34979
I00
sS'group_name'
p34980
Nsa(dp34981
S'description'
p34982
S'Enable printing of linear residuals to the screen (Console)\n'
p34983
sS'cpp_type'
p34984
S'bool'
p34985
sS'default'
p34986
S'1'
p34987
sS'name'
p34988
S'print_linear_residuals'
p34989
sS'required'
p34990
I00
sS'group_name'
p34991
Nsa(dp34992
S'description'
p34993
S'When true, each time the mesh is changed the mesh information is printed\n'
p34994
sS'cpp_type'
p34995
S'bool'
p34996
sS'default'
p34997
S'0'
p34998
sS'name'
p34999
S'print_mesh_changed_info'
p35000
sS'required'
p35001
I00
sS'group_name'
p35002
Nsa(dp35003
S'description'
p35004
S'Enable printing of the performance log to the screen (Console)\n'
p35005
sS'cpp_type'
p35006
S'bool'
p35007
sS'default'
p35008
S'0'
p35009
sS'name'
p35010
S'print_perf_log'
p35011
sS'required'
p35012
I00
sS'group_name'
p35013
Nsa(dp35014
S'description'
p35015
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p35016
sS'cpp_type'
p35017
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p35018
sS'default'
p35019
g3
sS'name'
p35020
S'show'
p35021
sS'required'
p35022
I00
sS'group_name'
p35023
Nsa(dp35024
S'description'
p35025
S'Print a solution history file (.slh) using the default settings\n'
p35026
sS'cpp_type'
p35027
S'bool'
p35028
sS'default'
p35029
S'0'
p35030
sS'name'
p35031
S'solution_history'
p35032
sS'required'
p35033
I00
sS'group_name'
p35034
Nsa(dp35035
S'description'
p35036
S'Times at which the output and solution is forced to occur\n'
p35037
sS'cpp_type'
p35038
S'std::__1::vector<double, std::__1::allocator<double> >'
p35039
sS'default'
p35040
g3
sS'name'
p35041
S'sync_times'
p35042
sS'required'
p35043
I00
sS'group_name'
p35044
Nsa(dp35045
S'description'
p35046
S'Output the results using the default settings for Tecplot output\n'
p35047
sS'cpp_type'
p35048
S'bool'
p35049
sS'default'
p35050
S'0'
p35051
sS'name'
p35052
S'tecplot'
p35053
sS'required'
p35054
I00
sS'group_name'
p35055
Nsa(dp35056
S'description'
p35057
S'Output the results using the default settings for VTKOutput output\n'
p35058
sS'cpp_type'
p35059
S'bool'
p35060
sS'default'
p35061
S'0'
p35062
sS'name'
p35063
S'vtk'
p35064
sS'required'
p35065
I00
sS'group_name'
p35066
Nsa(dp35067
S'description'
p35068
S'Output the results using the default settings for XDA/XDR output (ascii)\n'
p35069
sS'cpp_type'
p35070
S'bool'
p35071
sS'default'
p35072
S'0'
p35073
sS'name'
p35074
S'xda'
p35075
sS'required'
p35076
I00
sS'group_name'
p35077
Nsa(dp35078
S'description'
p35079
S'Output the results using the default settings for XDA/XDR output (binary)\n'
p35080
sS'cpp_type'
p35081
S'bool'
p35082
sS'default'
p35083
S'0'
p35084
sS'name'
p35085
S'xdr'
p35086
sS'required'
p35087
I00
sS'group_name'
p35088
NsasS'name'
p35089
S'/Outputs'
p35090
sa(dp35091
S'description'
p35092
g3
sS'subblocks'
p35093
(lp35094
(dp35095
S'description'
p35096
g3
sS'subblocks'
p35097
NsS'parameters'
p35098
(lp35099
(dp35100
S'description'
p35101
S'A string representing the Moose Object that will be built by this Action\n'
p35102
sS'cpp_type'
p35103
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35104
sS'default'
p35105
g3
sS'name'
p35106
S'type'
p35107
sS'required'
p35108
I01
sS'group_name'
p35109
NsasS'name'
p35110
S'/Postprocessors/*'
p35111
sa(dp35112
S'description'
p35113
g3
sS'subblocks'
p35114
NsS'parameters'
p35115
(lp35116
(dp35117
S'description'
p35118
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35119
sS'cpp_type'
p35120
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p35121
sS'default'
p35122
g3
sS'name'
p35123
S'boundary'
p35124
sS'required'
p35125
I01
sS'group_name'
p35126
Nsa(dp35127
S'description'
p35128
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35129
sS'cpp_type'
p35130
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35131
sS'default'
p35132
g3
sS'name'
p35133
S'control_tags'
p35134
sS'required'
p35135
I00
sS'group_name'
p35136
S'Advanced'
p35137
sa(dp35138
S'description'
p35139
S'Set the enabled status of the MooseObject.\n'
p35140
sS'cpp_type'
p35141
S'bool'
p35142
sS'default'
p35143
S'1'
p35144
sS'name'
p35145
S'enable'
p35146
sS'required'
p35147
I00
sS'group_name'
p35148
S'Advanced'
p35149
sa(dp35150
S'name'
p35151
S'execute_on'
p35152
sS'cpp_type'
p35153
S'MultiMooseEnum'
p35154
sS'default'
p35155
S'TIMESTEP_END'
p35156
sS'description'
p35157
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35158
sS'required'
p35159
I00
sS'options'
p35160
S'none initial linear nonlinear timestep_end timestep_begin custom'
p35161
sS'group_name'
p35162
Nsa(dp35163
S'description'
p35164
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p35165
sS'cpp_type'
p35166
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p35167
sS'default'
p35168
g3
sS'name'
p35169
S'outputs'
p35170
sS'required'
p35171
I00
sS'group_name'
p35172
S'Advanced'
p35173
sa(dp35174
S'description'
p35175
g3
sS'cpp_type'
p35176
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35177
sS'default'
p35178
S'AreaPostprocessor'
p35179
sS'name'
p35180
S'type'
p35181
sS'required'
p35182
I00
sS'group_name'
p35183
Nsa(dp35184
S'description'
p35185
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35186
sS'cpp_type'
p35187
S'bool'
p35188
sS'default'
p35189
S'0'
p35190
sS'name'
p35191
S'use_displaced_mesh'
p35192
sS'required'
p35193
I00
sS'group_name'
p35194
S'Advanced'
p35195
sasS'name'
p35196
S'/Postprocessors/AreaPostprocessor'
p35197
sa(dp35198
S'description'
p35199
g3
sS'subblocks'
p35200
NsS'parameters'
p35201
(lp35202
(dp35203
S'description'
p35204
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35205
sS'cpp_type'
p35206
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p35207
sS'default'
p35208
g3
sS'name'
p35209
S'block'
p35210
sS'required'
p35211
I00
sS'group_name'
p35212
Nsa(dp35213
S'description'
p35214
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35215
sS'cpp_type'
p35216
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35217
sS'default'
p35218
g3
sS'name'
p35219
S'control_tags'
p35220
sS'required'
p35221
I00
sS'group_name'
p35222
S'Advanced'
p35223
sa(dp35224
S'description'
p35225
S'Set the enabled status of the MooseObject.\n'
p35226
sS'cpp_type'
p35227
S'bool'
p35228
sS'default'
p35229
S'1'
p35230
sS'name'
p35231
S'enable'
p35232
sS'required'
p35233
I00
sS'group_name'
p35234
S'Advanced'
p35235
sa(dp35236
S'name'
p35237
S'execute_on'
p35238
sS'cpp_type'
p35239
S'MultiMooseEnum'
p35240
sS'default'
p35241
S'TIMESTEP_END'
p35242
sS'description'
p35243
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35244
sS'required'
p35245
I00
sS'options'
p35246
S'none initial linear nonlinear timestep_end timestep_begin custom'
p35247
sS'group_name'
p35248
Nsa(dp35249
S'description'
p35250
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p35251
sS'cpp_type'
p35252
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p35253
sS'default'
p35254
g3
sS'name'
p35255
S'outputs'
p35256
sS'required'
p35257
I00
sS'group_name'
p35258
S'Advanced'
p35259
sa(dp35260
S'description'
p35261
S'The seed for the master random number generator\n'
p35262
sS'cpp_type'
p35263
S'unsigned int'
p35264
sS'default'
p35265
S'0'
p35266
sS'name'
p35267
S'seed'
p35268
sS'required'
p35269
I00
sS'group_name'
p35270
S'Advanced'
p35271
sa(dp35272
S'description'
p35273
g3
sS'cpp_type'
p35274
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35275
sS'default'
p35276
S'AverageElementSize'
p35277
sS'name'
p35278
S'type'
p35279
sS'required'
p35280
I00
sS'group_name'
p35281
Nsa(dp35282
S'description'
p35283
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35284
sS'cpp_type'
p35285
S'bool'
p35286
sS'default'
p35287
S'0'
p35288
sS'name'
p35289
S'use_displaced_mesh'
p35290
sS'required'
p35291
I00
sS'group_name'
p35292
S'Advanced'
p35293
sa(dp35294
S'description'
p35295
S'The name of the variable that this object operates on\n'
p35296
sS'cpp_type'
p35297
S'std::vector<VariableName>'
p35298
sS'default'
p35299
g3
sS'name'
p35300
S'variable'
p35301
sS'required'
p35302
I01
sS'group_name'
p35303
NsasS'name'
p35304
S'/Postprocessors/AverageElementSize'
p35305
sa(dp35306
S'description'
p35307
g3
sS'subblocks'
p35308
NsS'parameters'
p35309
(lp35310
(dp35311
S'description'
p35312
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35313
sS'cpp_type'
p35314
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p35315
sS'default'
p35316
g3
sS'name'
p35317
S'block'
p35318
sS'required'
p35319
I00
sS'group_name'
p35320
Nsa(dp35321
S'description'
p35322
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35323
sS'cpp_type'
p35324
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p35325
sS'default'
p35326
g3
sS'name'
p35327
S'boundary'
p35328
sS'required'
p35329
I00
sS'group_name'
p35330
Nsa(dp35331
S'description'
p35332
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35333
sS'cpp_type'
p35334
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35335
sS'default'
p35336
g3
sS'name'
p35337
S'control_tags'
p35338
sS'required'
p35339
I00
sS'group_name'
p35340
S'Advanced'
p35341
sa(dp35342
S'description'
p35343
S'Set the enabled status of the MooseObject.\n'
p35344
sS'cpp_type'
p35345
S'bool'
p35346
sS'default'
p35347
S'1'
p35348
sS'name'
p35349
S'enable'
p35350
sS'required'
p35351
I00
sS'group_name'
p35352
S'Advanced'
p35353
sa(dp35354
S'name'
p35355
S'execute_on'
p35356
sS'cpp_type'
p35357
S'MultiMooseEnum'
p35358
sS'default'
p35359
S'TIMESTEP_END'
p35360
sS'description'
p35361
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35362
sS'required'
p35363
I00
sS'options'
p35364
S'none initial linear nonlinear timestep_end timestep_begin custom'
p35365
sS'group_name'
p35366
Nsa(dp35367
S'description'
p35368
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p35369
sS'cpp_type'
p35370
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p35371
sS'default'
p35372
g3
sS'name'
p35373
S'outputs'
p35374
sS'required'
p35375
I00
sS'group_name'
p35376
S'Advanced'
p35377
sa(dp35378
S'description'
p35379
S'The seed for the master random number generator\n'
p35380
sS'cpp_type'
p35381
S'unsigned int'
p35382
sS'default'
p35383
S'0'
p35384
sS'name'
p35385
S'seed'
p35386
sS'required'
p35387
I00
sS'group_name'
p35388
S'Advanced'
p35389
sa(dp35390
S'description'
p35391
g3
sS'cpp_type'
p35392
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35393
sS'default'
p35394
S'AverageNodalVariableValue'
p35395
sS'name'
p35396
S'type'
p35397
sS'required'
p35398
I00
sS'group_name'
p35399
Nsa(dp35400
S'description'
p35401
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p35402
sS'cpp_type'
p35403
S'bool'
p35404
sS'default'
p35405
S'0'
p35406
sS'name'
p35407
S'unique_node_execute'
p35408
sS'required'
p35409
I00
sS'group_name'
p35410
Nsa(dp35411
S'description'
p35412
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35413
sS'cpp_type'
p35414
S'bool'
p35415
sS'default'
p35416
S'0'
p35417
sS'name'
p35418
S'use_displaced_mesh'
p35419
sS'required'
p35420
I00
sS'group_name'
p35421
S'Advanced'
p35422
sa(dp35423
S'description'
p35424
S'The name of the variable that this postprocessor operates on\n'
p35425
sS'cpp_type'
p35426
S'std::vector<VariableName>'
p35427
sS'default'
p35428
g3
sS'name'
p35429
S'variable'
p35430
sS'required'
p35431
I01
sS'group_name'
p35432
NsasS'name'
p35433
S'/Postprocessors/AverageNodalVariableValue'
p35434
sa(dp35435
S'description'
p35436
g3
sS'subblocks'
p35437
NsS'parameters'
p35438
(lp35439
(dp35440
S'description'
p35441
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p35442
sS'cpp_type'
p35443
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p35444
sS'default'
p35445
g3
sS'name'
p35446
S'boundary'
p35447
sS'required'
p35448
I01
sS'group_name'
p35449
Nsa(dp35450
S'description'
p35451
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35452
sS'cpp_type'
p35453
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35454
sS'default'
p35455
g3
sS'name'
p35456
S'control_tags'
p35457
sS'required'
p35458
I00
sS'group_name'
p35459
S'Advanced'
p35460
sa(dp35461
S'description'
p35462
S'Set the enabled status of the MooseObject.\n'
p35463
sS'cpp_type'
p35464
S'bool'
p35465
sS'default'
p35466
S'1'
p35467
sS'name'
p35468
S'enable'
p35469
sS'required'
p35470
I00
sS'group_name'
p35471
S'Advanced'
p35472
sa(dp35473
S'name'
p35474
S'execute_on'
p35475
sS'cpp_type'
p35476
S'MultiMooseEnum'
p35477
sS'default'
p35478
S'TIMESTEP_END'
p35479
sS'description'
p35480
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35481
sS'required'
p35482
I00
sS'options'
p35483
S'none initial linear nonlinear timestep_end timestep_begin custom'
p35484
sS'group_name'
p35485
Nsa(dp35486
S'description'
p35487
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p35488
sS'cpp_type'
p35489
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p35490
sS'default'
p35491
g3
sS'name'
p35492
S'outputs'
p35493
sS'required'
p35494
I00
sS'group_name'
p35495
S'Advanced'
p35496
sa(dp35497
S'description'
p35498
g3
sS'cpp_type'
p35499
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35500
sS'default'
p35501
S'AxisymmetricCenterlineAverageValue'
p35502
sS'name'
p35503
S'type'
p35504
sS'required'
p35505
I00
sS'group_name'
p35506
Nsa(dp35507
S'description'
p35508
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35509
sS'cpp_type'
p35510
S'bool'
p35511
sS'default'
p35512
S'0'
p35513
sS'name'
p35514
S'use_displaced_mesh'
p35515
sS'required'
p35516
I00
sS'group_name'
p35517
S'Advanced'
p35518
sa(dp35519
S'description'
p35520
S'The name of the variable that this boundary condition applies to\n'
p35521
sS'cpp_type'
p35522
S'std::vector<VariableName>'
p35523
sS'default'
p35524
g3
sS'name'
p35525
S'variable'
p35526
sS'required'
p35527
I01
sS'group_name'
p35528
NsasS'name'
p35529
S'/Postprocessors/AxisymmetricCenterlineAverageValue'
p35530
sa(dp35531
S'description'
p35532
g3
sS'subblocks'
p35533
NsS'parameters'
p35534
(lp35535
(dp35536
S'description'
p35537
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35538
sS'cpp_type'
p35539
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35540
sS'default'
p35541
g3
sS'name'
p35542
S'control_tags'
p35543
sS'required'
p35544
I00
sS'group_name'
p35545
S'Advanced'
p35546
sa(dp35547
S'description'
p35548
S'Set the enabled status of the MooseObject.\n'
p35549
sS'cpp_type'
p35550
S'bool'
p35551
sS'default'
p35552
S'1'
p35553
sS'name'
p35554
S'enable'
p35555
sS'required'
p35556
I00
sS'group_name'
p35557
S'Advanced'
p35558
sa(dp35559
S'name'
p35560
S'execute_on'
p35561
sS'cpp_type'
p35562
S'MultiMooseEnum'
p35563
sS'default'
p35564
S'TIMESTEP_END'
p35565
sS'description'
p35566
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35567
sS'required'
p35568
I00
sS'options'
p35569
S'none initial linear nonlinear timestep_end timestep_begin custom'
p35570
sS'group_name'
p35571
Nsa(dp35572
S'description'
p35573
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p35574
sS'cpp_type'
p35575
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p35576
sS'default'
p35577
g3
sS'name'
p35578
S'outputs'
p35579
sS'required'
p35580
I00
sS'group_name'
p35581
S'Advanced'
p35582
sa(dp35583
S'description'
p35584
S'The name of the postprocessor\n'
p35585
sS'cpp_type'
p35586
S'PostprocessorName'
p35587
sS'default'
p35588
g3
sS'name'
p35589
S'postprocessor'
p35590
sS'required'
p35591
I01
sS'group_name'
p35592
Nsa(dp35593
S'description'
p35594
g3
sS'cpp_type'
p35595
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35596
sS'default'
p35597
S'CumulativeValuePostprocessor'
p35598
sS'name'
p35599
S'type'
p35600
sS'required'
p35601
I00
sS'group_name'
p35602
Nsa(dp35603
S'description'
p35604
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35605
sS'cpp_type'
p35606
S'bool'
p35607
sS'default'
p35608
S'0'
p35609
sS'name'
p35610
S'use_displaced_mesh'
p35611
sS'required'
p35612
I00
sS'group_name'
p35613
S'Advanced'
p35614
sasS'name'
p35615
S'/Postprocessors/CumulativeValuePostprocessor'
p35616
sa(dp35617
S'description'
p35618
g3
sS'subblocks'
p35619
NsS'parameters'
p35620
(lp35621
(dp35622
S'description'
p35623
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35624
sS'cpp_type'
p35625
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35626
sS'default'
p35627
g3
sS'name'
p35628
S'control_tags'
p35629
sS'required'
p35630
I00
sS'group_name'
p35631
S'Advanced'
p35632
sa(dp35633
S'description'
p35634
S'Set the enabled status of the MooseObject.\n'
p35635
sS'cpp_type'
p35636
S'bool'
p35637
sS'default'
p35638
S'1'
p35639
sS'name'
p35640
S'enable'
p35641
sS'required'
p35642
I00
sS'group_name'
p35643
S'Advanced'
p35644
sa(dp35645
S'name'
p35646
S'execute_on'
p35647
sS'cpp_type'
p35648
S'MultiMooseEnum'
p35649
sS'default'
p35650
S'TIMESTEP_END'
p35651
sS'description'
p35652
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35653
sS'required'
p35654
I00
sS'options'
p35655
S'none initial linear nonlinear timestep_end timestep_begin custom'
p35656
sS'group_name'
p35657
Nsa(dp35658
S'description'
p35659
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p35660
sS'cpp_type'
p35661
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p35662
sS'default'
p35663
g3
sS'name'
p35664
S'outputs'
p35665
sS'required'
p35666
I00
sS'group_name'
p35667
S'Advanced'
p35668
sa(dp35669
S'description'
p35670
g3
sS'cpp_type'
p35671
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35672
sS'default'
p35673
S'DifferencePostprocessor'
p35674
sS'name'
p35675
S'type'
p35676
sS'required'
p35677
I00
sS'group_name'
p35678
Nsa(dp35679
S'description'
p35680
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35681
sS'cpp_type'
p35682
S'bool'
p35683
sS'default'
p35684
S'0'
p35685
sS'name'
p35686
S'use_displaced_mesh'
p35687
sS'required'
p35688
I00
sS'group_name'
p35689
S'Advanced'
p35690
sa(dp35691
S'description'
p35692
S'First value\n'
p35693
sS'cpp_type'
p35694
S'PostprocessorName'
p35695
sS'default'
p35696
g3
sS'name'
p35697
S'value1'
p35698
sS'required'
p35699
I01
sS'group_name'
p35700
Nsa(dp35701
S'description'
p35702
S'Second value\n'
p35703
sS'cpp_type'
p35704
S'PostprocessorName'
p35705
sS'default'
p35706
g3
sS'name'
p35707
S'value2'
p35708
sS'required'
p35709
I01
sS'group_name'
p35710
NsasS'name'
p35711
S'/Postprocessors/DifferencePostprocessor'
p35712
sa(dp35713
S'description'
p35714
g3
sS'subblocks'
p35715
NsS'parameters'
p35716
(lp35717
(dp35718
S'description'
p35719
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35720
sS'cpp_type'
p35721
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p35722
sS'default'
p35723
g3
sS'name'
p35724
S'block'
p35725
sS'required'
p35726
I00
sS'group_name'
p35727
Nsa(dp35728
S'description'
p35729
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35730
sS'cpp_type'
p35731
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35732
sS'default'
p35733
g3
sS'name'
p35734
S'control_tags'
p35735
sS'required'
p35736
I00
sS'group_name'
p35737
S'Advanced'
p35738
sa(dp35739
S'description'
p35740
S'Set the enabled status of the MooseObject.\n'
p35741
sS'cpp_type'
p35742
S'bool'
p35743
sS'default'
p35744
S'1'
p35745
sS'name'
p35746
S'enable'
p35747
sS'required'
p35748
I00
sS'group_name'
p35749
S'Advanced'
p35750
sa(dp35751
S'name'
p35752
S'execute_on'
p35753
sS'cpp_type'
p35754
S'MultiMooseEnum'
p35755
sS'default'
p35756
S'TIMESTEP_END'
p35757
sS'description'
p35758
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35759
sS'required'
p35760
I00
sS'options'
p35761
S'none initial linear nonlinear timestep_end timestep_begin custom'
p35762
sS'group_name'
p35763
Nsa(dp35764
S'description'
p35765
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p35766
sS'cpp_type'
p35767
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p35768
sS'default'
p35769
g3
sS'name'
p35770
S'outputs'
p35771
sS'required'
p35772
I00
sS'group_name'
p35773
S'Advanced'
p35774
sa(dp35775
S'description'
p35776
S'The seed for the master random number generator\n'
p35777
sS'cpp_type'
p35778
S'unsigned int'
p35779
sS'default'
p35780
S'0'
p35781
sS'name'
p35782
S'seed'
p35783
sS'required'
p35784
I00
sS'group_name'
p35785
S'Advanced'
p35786
sa(dp35787
S'description'
p35788
g3
sS'cpp_type'
p35789
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35790
sS'default'
p35791
S'ElementAverageTimeDerivative'
p35792
sS'name'
p35793
S'type'
p35794
sS'required'
p35795
I00
sS'group_name'
p35796
Nsa(dp35797
S'description'
p35798
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35799
sS'cpp_type'
p35800
S'bool'
p35801
sS'default'
p35802
S'0'
p35803
sS'name'
p35804
S'use_displaced_mesh'
p35805
sS'required'
p35806
I00
sS'group_name'
p35807
S'Advanced'
p35808
sa(dp35809
S'description'
p35810
S'The name of the variable that this object operates on\n'
p35811
sS'cpp_type'
p35812
S'std::vector<VariableName>'
p35813
sS'default'
p35814
g3
sS'name'
p35815
S'variable'
p35816
sS'required'
p35817
I01
sS'group_name'
p35818
NsasS'name'
p35819
S'/Postprocessors/ElementAverageTimeDerivative'
p35820
sa(dp35821
S'description'
p35822
g3
sS'subblocks'
p35823
NsS'parameters'
p35824
(lp35825
(dp35826
S'description'
p35827
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35828
sS'cpp_type'
p35829
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p35830
sS'default'
p35831
g3
sS'name'
p35832
S'block'
p35833
sS'required'
p35834
I00
sS'group_name'
p35835
Nsa(dp35836
S'description'
p35837
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35838
sS'cpp_type'
p35839
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35840
sS'default'
p35841
g3
sS'name'
p35842
S'control_tags'
p35843
sS'required'
p35844
I00
sS'group_name'
p35845
S'Advanced'
p35846
sa(dp35847
S'description'
p35848
S'Set the enabled status of the MooseObject.\n'
p35849
sS'cpp_type'
p35850
S'bool'
p35851
sS'default'
p35852
S'1'
p35853
sS'name'
p35854
S'enable'
p35855
sS'required'
p35856
I00
sS'group_name'
p35857
S'Advanced'
p35858
sa(dp35859
S'name'
p35860
S'execute_on'
p35861
sS'cpp_type'
p35862
S'MultiMooseEnum'
p35863
sS'default'
p35864
S'TIMESTEP_END'
p35865
sS'description'
p35866
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35867
sS'required'
p35868
I00
sS'options'
p35869
S'none initial linear nonlinear timestep_end timestep_begin custom'
p35870
sS'group_name'
p35871
Nsa(dp35872
S'description'
p35873
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p35874
sS'cpp_type'
p35875
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p35876
sS'default'
p35877
g3
sS'name'
p35878
S'outputs'
p35879
sS'required'
p35880
I00
sS'group_name'
p35881
S'Advanced'
p35882
sa(dp35883
S'description'
p35884
S'The seed for the master random number generator\n'
p35885
sS'cpp_type'
p35886
S'unsigned int'
p35887
sS'default'
p35888
S'0'
p35889
sS'name'
p35890
S'seed'
p35891
sS'required'
p35892
I00
sS'group_name'
p35893
S'Advanced'
p35894
sa(dp35895
S'description'
p35896
g3
sS'cpp_type'
p35897
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35898
sS'default'
p35899
S'ElementAverageValue'
p35900
sS'name'
p35901
S'type'
p35902
sS'required'
p35903
I00
sS'group_name'
p35904
Nsa(dp35905
S'description'
p35906
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35907
sS'cpp_type'
p35908
S'bool'
p35909
sS'default'
p35910
S'0'
p35911
sS'name'
p35912
S'use_displaced_mesh'
p35913
sS'required'
p35914
I00
sS'group_name'
p35915
S'Advanced'
p35916
sa(dp35917
S'description'
p35918
S'The name of the variable that this object operates on\n'
p35919
sS'cpp_type'
p35920
S'std::vector<VariableName>'
p35921
sS'default'
p35922
g3
sS'name'
p35923
S'variable'
p35924
sS'required'
p35925
I01
sS'group_name'
p35926
NsasS'name'
p35927
S'/Postprocessors/ElementAverageValue'
p35928
sa(dp35929
S'description'
p35930
g3
sS'subblocks'
p35931
NsS'parameters'
p35932
(lp35933
(dp35934
S'description'
p35935
S'The list of block ids (SubdomainID) that this object will be applied\n'
p35936
sS'cpp_type'
p35937
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p35938
sS'default'
p35939
g3
sS'name'
p35940
S'block'
p35941
sS'required'
p35942
I00
sS'group_name'
p35943
Nsa(dp35944
S'description'
p35945
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p35946
sS'cpp_type'
p35947
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35948
sS'default'
p35949
g3
sS'name'
p35950
S'control_tags'
p35951
sS'required'
p35952
I00
sS'group_name'
p35953
S'Advanced'
p35954
sa(dp35955
S'description'
p35956
S'Set the enabled status of the MooseObject.\n'
p35957
sS'cpp_type'
p35958
S'bool'
p35959
sS'default'
p35960
S'1'
p35961
sS'name'
p35962
S'enable'
p35963
sS'required'
p35964
I00
sS'group_name'
p35965
S'Advanced'
p35966
sa(dp35967
S'name'
p35968
S'execute_on'
p35969
sS'cpp_type'
p35970
S'MultiMooseEnum'
p35971
sS'default'
p35972
S'TIMESTEP_END'
p35973
sS'description'
p35974
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35975
sS'required'
p35976
I00
sS'options'
p35977
S'none initial linear nonlinear timestep_end timestep_begin custom'
p35978
sS'group_name'
p35979
Nsa(dp35980
S'description'
p35981
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p35982
sS'cpp_type'
p35983
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p35984
sS'default'
p35985
g3
sS'name'
p35986
S'outputs'
p35987
sS'required'
p35988
I00
sS'group_name'
p35989
S'Advanced'
p35990
sa(dp35991
S'description'
p35992
S'The seed for the master random number generator\n'
p35993
sS'cpp_type'
p35994
S'unsigned int'
p35995
sS'default'
p35996
S'0'
p35997
sS'name'
p35998
S'seed'
p35999
sS'required'
p36000
I00
sS'group_name'
p36001
S'Advanced'
p36002
sa(dp36003
S'description'
p36004
g3
sS'cpp_type'
p36005
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36006
sS'default'
p36007
S'ElementExtremeValue'
p36008
sS'name'
p36009
S'type'
p36010
sS'required'
p36011
I00
sS'group_name'
p36012
Nsa(dp36013
S'description'
p36014
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36015
sS'cpp_type'
p36016
S'bool'
p36017
sS'default'
p36018
S'0'
p36019
sS'name'
p36020
S'use_displaced_mesh'
p36021
sS'required'
p36022
I00
sS'group_name'
p36023
S'Advanced'
p36024
sa(dp36025
S'name'
p36026
S'value_type'
p36027
sS'cpp_type'
p36028
S'MooseEnum'
p36029
sS'default'
p36030
S'max'
p36031
sS'description'
p36032
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p36033
sS'required'
p36034
I00
sS'options'
p36035
S'max min'
p36036
sS'group_name'
p36037
Nsa(dp36038
S'description'
p36039
S'The name of the variable that this postprocessor operates on\n'
p36040
sS'cpp_type'
p36041
S'std::vector<VariableName>'
p36042
sS'default'
p36043
g3
sS'name'
p36044
S'variable'
p36045
sS'required'
p36046
I01
sS'group_name'
p36047
NsasS'name'
p36048
S'/Postprocessors/ElementExtremeValue'
p36049
sa(dp36050
S'description'
p36051
g3
sS'subblocks'
p36052
NsS'parameters'
p36053
(lp36054
(dp36055
S'description'
p36056
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36057
sS'cpp_type'
p36058
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36059
sS'default'
p36060
g3
sS'name'
p36061
S'block'
p36062
sS'required'
p36063
I00
sS'group_name'
p36064
Nsa(dp36065
S'description'
p36066
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36067
sS'cpp_type'
p36068
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36069
sS'default'
p36070
g3
sS'name'
p36071
S'control_tags'
p36072
sS'required'
p36073
I00
sS'group_name'
p36074
S'Advanced'
p36075
sa(dp36076
S'description'
p36077
S'Set the enabled status of the MooseObject.\n'
p36078
sS'cpp_type'
p36079
S'bool'
p36080
sS'default'
p36081
S'1'
p36082
sS'name'
p36083
S'enable'
p36084
sS'required'
p36085
I00
sS'group_name'
p36086
S'Advanced'
p36087
sa(dp36088
S'name'
p36089
S'execute_on'
p36090
sS'cpp_type'
p36091
S'MultiMooseEnum'
p36092
sS'default'
p36093
S'TIMESTEP_END'
p36094
sS'description'
p36095
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36096
sS'required'
p36097
I00
sS'options'
p36098
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36099
sS'group_name'
p36100
Nsa(dp36101
S'description'
p36102
S'The analytic solution to compare against\n'
p36103
sS'cpp_type'
p36104
S'FunctionName'
p36105
sS'default'
p36106
g3
sS'name'
p36107
S'function'
p36108
sS'required'
p36109
I01
sS'group_name'
p36110
Nsa(dp36111
S'description'
p36112
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36113
sS'cpp_type'
p36114
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36115
sS'default'
p36116
g3
sS'name'
p36117
S'outputs'
p36118
sS'required'
p36119
I00
sS'group_name'
p36120
S'Advanced'
p36121
sa(dp36122
S'description'
p36123
S'The exponent used in the norm.\n'
p36124
sS'cpp_type'
p36125
S'double'
p36126
sS'default'
p36127
S'2'
p36128
sS'name'
p36129
S'p'
p36130
sS'required'
p36131
I00
sS'group_name'
p36132
Nsa(dp36133
S'description'
p36134
S'The seed for the master random number generator\n'
p36135
sS'cpp_type'
p36136
S'unsigned int'
p36137
sS'default'
p36138
S'0'
p36139
sS'name'
p36140
S'seed'
p36141
sS'required'
p36142
I00
sS'group_name'
p36143
S'Advanced'
p36144
sa(dp36145
S'description'
p36146
g3
sS'cpp_type'
p36147
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36148
sS'default'
p36149
S'ElementH1Error'
p36150
sS'name'
p36151
S'type'
p36152
sS'required'
p36153
I00
sS'group_name'
p36154
Nsa(dp36155
S'description'
p36156
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36157
sS'cpp_type'
p36158
S'bool'
p36159
sS'default'
p36160
S'0'
p36161
sS'name'
p36162
S'use_displaced_mesh'
p36163
sS'required'
p36164
I00
sS'group_name'
p36165
S'Advanced'
p36166
sa(dp36167
S'description'
p36168
S'The name of the variable that this object operates on\n'
p36169
sS'cpp_type'
p36170
S'std::vector<VariableName>'
p36171
sS'default'
p36172
g3
sS'name'
p36173
S'variable'
p36174
sS'required'
p36175
I01
sS'group_name'
p36176
NsasS'name'
p36177
S'/Postprocessors/ElementH1Error'
p36178
sa(dp36179
S'description'
p36180
g3
sS'subblocks'
p36181
NsS'parameters'
p36182
(lp36183
(dp36184
S'description'
p36185
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36186
sS'cpp_type'
p36187
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36188
sS'default'
p36189
g3
sS'name'
p36190
S'block'
p36191
sS'required'
p36192
I00
sS'group_name'
p36193
Nsa(dp36194
S'description'
p36195
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36196
sS'cpp_type'
p36197
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36198
sS'default'
p36199
g3
sS'name'
p36200
S'control_tags'
p36201
sS'required'
p36202
I00
sS'group_name'
p36203
S'Advanced'
p36204
sa(dp36205
S'description'
p36206
S'Set the enabled status of the MooseObject.\n'
p36207
sS'cpp_type'
p36208
S'bool'
p36209
sS'default'
p36210
S'1'
p36211
sS'name'
p36212
S'enable'
p36213
sS'required'
p36214
I00
sS'group_name'
p36215
S'Advanced'
p36216
sa(dp36217
S'name'
p36218
S'execute_on'
p36219
sS'cpp_type'
p36220
S'MultiMooseEnum'
p36221
sS'default'
p36222
S'TIMESTEP_END'
p36223
sS'description'
p36224
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36225
sS'required'
p36226
I00
sS'options'
p36227
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36228
sS'group_name'
p36229
Nsa(dp36230
S'description'
p36231
S'The analytic solution to compare against\n'
p36232
sS'cpp_type'
p36233
S'FunctionName'
p36234
sS'default'
p36235
g3
sS'name'
p36236
S'function'
p36237
sS'required'
p36238
I01
sS'group_name'
p36239
Nsa(dp36240
S'description'
p36241
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36242
sS'cpp_type'
p36243
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36244
sS'default'
p36245
g3
sS'name'
p36246
S'outputs'
p36247
sS'required'
p36248
I00
sS'group_name'
p36249
S'Advanced'
p36250
sa(dp36251
S'description'
p36252
S'The seed for the master random number generator\n'
p36253
sS'cpp_type'
p36254
S'unsigned int'
p36255
sS'default'
p36256
S'0'
p36257
sS'name'
p36258
S'seed'
p36259
sS'required'
p36260
I00
sS'group_name'
p36261
S'Advanced'
p36262
sa(dp36263
S'description'
p36264
g3
sS'cpp_type'
p36265
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36266
sS'default'
p36267
S'ElementH1SemiError'
p36268
sS'name'
p36269
S'type'
p36270
sS'required'
p36271
I00
sS'group_name'
p36272
Nsa(dp36273
S'description'
p36274
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36275
sS'cpp_type'
p36276
S'bool'
p36277
sS'default'
p36278
S'0'
p36279
sS'name'
p36280
S'use_displaced_mesh'
p36281
sS'required'
p36282
I00
sS'group_name'
p36283
S'Advanced'
p36284
sa(dp36285
S'description'
p36286
S'The name of the variable that this object operates on\n'
p36287
sS'cpp_type'
p36288
S'std::vector<VariableName>'
p36289
sS'default'
p36290
g3
sS'name'
p36291
S'variable'
p36292
sS'required'
p36293
I01
sS'group_name'
p36294
NsasS'name'
p36295
S'/Postprocessors/ElementH1SemiError'
p36296
sa(dp36297
S'description'
p36298
g3
sS'subblocks'
p36299
NsS'parameters'
p36300
(lp36301
(dp36302
S'description'
p36303
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36304
sS'cpp_type'
p36305
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36306
sS'default'
p36307
g3
sS'name'
p36308
S'block'
p36309
sS'required'
p36310
I00
sS'group_name'
p36311
Nsa(dp36312
S'description'
p36313
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36314
sS'cpp_type'
p36315
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36316
sS'default'
p36317
g3
sS'name'
p36318
S'control_tags'
p36319
sS'required'
p36320
I00
sS'group_name'
p36321
S'Advanced'
p36322
sa(dp36323
S'description'
p36324
S'Set the enabled status of the MooseObject.\n'
p36325
sS'cpp_type'
p36326
S'bool'
p36327
sS'default'
p36328
S'1'
p36329
sS'name'
p36330
S'enable'
p36331
sS'required'
p36332
I00
sS'group_name'
p36333
S'Advanced'
p36334
sa(dp36335
S'name'
p36336
S'execute_on'
p36337
sS'cpp_type'
p36338
S'MultiMooseEnum'
p36339
sS'default'
p36340
S'TIMESTEP_END'
p36341
sS'description'
p36342
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36343
sS'required'
p36344
I00
sS'options'
p36345
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36346
sS'group_name'
p36347
Nsa(dp36348
S'description'
p36349
S'The name of the material property\n'
p36350
sS'cpp_type'
p36351
S'MaterialPropertyName'
p36352
sS'default'
p36353
g3
sS'name'
p36354
S'mat_prop'
p36355
sS'required'
p36356
I01
sS'group_name'
p36357
Nsa(dp36358
S'description'
p36359
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36360
sS'cpp_type'
p36361
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36362
sS'default'
p36363
g3
sS'name'
p36364
S'outputs'
p36365
sS'required'
p36366
I00
sS'group_name'
p36367
S'Advanced'
p36368
sa(dp36369
S'description'
p36370
S'The seed for the master random number generator\n'
p36371
sS'cpp_type'
p36372
S'unsigned int'
p36373
sS'default'
p36374
S'0'
p36375
sS'name'
p36376
S'seed'
p36377
sS'required'
p36378
I00
sS'group_name'
p36379
S'Advanced'
p36380
sa(dp36381
S'description'
p36382
g3
sS'cpp_type'
p36383
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36384
sS'default'
p36385
S'ElementIntegralMaterialProperty'
p36386
sS'name'
p36387
S'type'
p36388
sS'required'
p36389
I00
sS'group_name'
p36390
Nsa(dp36391
S'description'
p36392
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36393
sS'cpp_type'
p36394
S'bool'
p36395
sS'default'
p36396
S'0'
p36397
sS'name'
p36398
S'use_displaced_mesh'
p36399
sS'required'
p36400
I00
sS'group_name'
p36401
S'Advanced'
p36402
sasS'name'
p36403
S'/Postprocessors/ElementIntegralMaterialProperty'
p36404
sa(dp36405
S'description'
p36406
g3
sS'subblocks'
p36407
NsS'parameters'
p36408
(lp36409
(dp36410
S'description'
p36411
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36412
sS'cpp_type'
p36413
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36414
sS'default'
p36415
g3
sS'name'
p36416
S'block'
p36417
sS'required'
p36418
I00
sS'group_name'
p36419
Nsa(dp36420
S'description'
p36421
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36422
sS'cpp_type'
p36423
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36424
sS'default'
p36425
g3
sS'name'
p36426
S'control_tags'
p36427
sS'required'
p36428
I00
sS'group_name'
p36429
S'Advanced'
p36430
sa(dp36431
S'description'
p36432
S'Set the enabled status of the MooseObject.\n'
p36433
sS'cpp_type'
p36434
S'bool'
p36435
sS'default'
p36436
S'1'
p36437
sS'name'
p36438
S'enable'
p36439
sS'required'
p36440
I00
sS'group_name'
p36441
S'Advanced'
p36442
sa(dp36443
S'name'
p36444
S'execute_on'
p36445
sS'cpp_type'
p36446
S'MultiMooseEnum'
p36447
sS'default'
p36448
S'TIMESTEP_END'
p36449
sS'description'
p36450
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36451
sS'required'
p36452
I00
sS'options'
p36453
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36454
sS'group_name'
p36455
Nsa(dp36456
S'description'
p36457
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36458
sS'cpp_type'
p36459
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36460
sS'default'
p36461
g3
sS'name'
p36462
S'outputs'
p36463
sS'required'
p36464
I00
sS'group_name'
p36465
S'Advanced'
p36466
sa(dp36467
S'description'
p36468
S'The seed for the master random number generator\n'
p36469
sS'cpp_type'
p36470
S'unsigned int'
p36471
sS'default'
p36472
S'0'
p36473
sS'name'
p36474
S'seed'
p36475
sS'required'
p36476
I00
sS'group_name'
p36477
S'Advanced'
p36478
sa(dp36479
S'description'
p36480
g3
sS'cpp_type'
p36481
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36482
sS'default'
p36483
S'ElementIntegralVariablePostprocessor'
p36484
sS'name'
p36485
S'type'
p36486
sS'required'
p36487
I00
sS'group_name'
p36488
Nsa(dp36489
S'description'
p36490
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36491
sS'cpp_type'
p36492
S'bool'
p36493
sS'default'
p36494
S'0'
p36495
sS'name'
p36496
S'use_displaced_mesh'
p36497
sS'required'
p36498
I00
sS'group_name'
p36499
S'Advanced'
p36500
sa(dp36501
S'description'
p36502
S'The name of the variable that this object operates on\n'
p36503
sS'cpp_type'
p36504
S'std::vector<VariableName>'
p36505
sS'default'
p36506
g3
sS'name'
p36507
S'variable'
p36508
sS'required'
p36509
I01
sS'group_name'
p36510
NsasS'name'
p36511
S'/Postprocessors/ElementIntegralVariablePostprocessor'
p36512
sa(dp36513
S'description'
p36514
g3
sS'subblocks'
p36515
NsS'parameters'
p36516
(lp36517
(dp36518
S'description'
p36519
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36520
sS'cpp_type'
p36521
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36522
sS'default'
p36523
g3
sS'name'
p36524
S'block'
p36525
sS'required'
p36526
I00
sS'group_name'
p36527
Nsa(dp36528
S'description'
p36529
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36530
sS'cpp_type'
p36531
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36532
sS'default'
p36533
g3
sS'name'
p36534
S'control_tags'
p36535
sS'required'
p36536
I00
sS'group_name'
p36537
S'Advanced'
p36538
sa(dp36539
S'description'
p36540
S'Set the enabled status of the MooseObject.\n'
p36541
sS'cpp_type'
p36542
S'bool'
p36543
sS'default'
p36544
S'1'
p36545
sS'name'
p36546
S'enable'
p36547
sS'required'
p36548
I00
sS'group_name'
p36549
S'Advanced'
p36550
sa(dp36551
S'name'
p36552
S'execute_on'
p36553
sS'cpp_type'
p36554
S'MultiMooseEnum'
p36555
sS'default'
p36556
S'TIMESTEP_END'
p36557
sS'description'
p36558
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36559
sS'required'
p36560
I00
sS'options'
p36561
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36562
sS'group_name'
p36563
Nsa(dp36564
S'description'
p36565
S'The variable to compare to\n'
p36566
sS'cpp_type'
p36567
S'std::vector<VariableName>'
p36568
sS'default'
p36569
g3
sS'name'
p36570
S'other_variable'
p36571
sS'required'
p36572
I01
sS'group_name'
p36573
Nsa(dp36574
S'description'
p36575
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36576
sS'cpp_type'
p36577
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36578
sS'default'
p36579
g3
sS'name'
p36580
S'outputs'
p36581
sS'required'
p36582
I00
sS'group_name'
p36583
S'Advanced'
p36584
sa(dp36585
S'description'
p36586
S'The seed for the master random number generator\n'
p36587
sS'cpp_type'
p36588
S'unsigned int'
p36589
sS'default'
p36590
S'0'
p36591
sS'name'
p36592
S'seed'
p36593
sS'required'
p36594
I00
sS'group_name'
p36595
S'Advanced'
p36596
sa(dp36597
S'description'
p36598
g3
sS'cpp_type'
p36599
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36600
sS'default'
p36601
S'ElementL2Difference'
p36602
sS'name'
p36603
S'type'
p36604
sS'required'
p36605
I00
sS'group_name'
p36606
Nsa(dp36607
S'description'
p36608
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36609
sS'cpp_type'
p36610
S'bool'
p36611
sS'default'
p36612
S'0'
p36613
sS'name'
p36614
S'use_displaced_mesh'
p36615
sS'required'
p36616
I00
sS'group_name'
p36617
S'Advanced'
p36618
sa(dp36619
S'description'
p36620
S'The name of the variable that this object operates on\n'
p36621
sS'cpp_type'
p36622
S'std::vector<VariableName>'
p36623
sS'default'
p36624
g3
sS'name'
p36625
S'variable'
p36626
sS'required'
p36627
I01
sS'group_name'
p36628
NsasS'name'
p36629
S'/Postprocessors/ElementL2Difference'
p36630
sa(dp36631
S'description'
p36632
g3
sS'subblocks'
p36633
NsS'parameters'
p36634
(lp36635
(dp36636
S'description'
p36637
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36638
sS'cpp_type'
p36639
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36640
sS'default'
p36641
g3
sS'name'
p36642
S'block'
p36643
sS'required'
p36644
I00
sS'group_name'
p36645
Nsa(dp36646
S'description'
p36647
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36648
sS'cpp_type'
p36649
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36650
sS'default'
p36651
g3
sS'name'
p36652
S'control_tags'
p36653
sS'required'
p36654
I00
sS'group_name'
p36655
S'Advanced'
p36656
sa(dp36657
S'description'
p36658
S'Set the enabled status of the MooseObject.\n'
p36659
sS'cpp_type'
p36660
S'bool'
p36661
sS'default'
p36662
S'1'
p36663
sS'name'
p36664
S'enable'
p36665
sS'required'
p36666
I00
sS'group_name'
p36667
S'Advanced'
p36668
sa(dp36669
S'name'
p36670
S'execute_on'
p36671
sS'cpp_type'
p36672
S'MultiMooseEnum'
p36673
sS'default'
p36674
S'TIMESTEP_END'
p36675
sS'description'
p36676
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36677
sS'required'
p36678
I00
sS'options'
p36679
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36680
sS'group_name'
p36681
Nsa(dp36682
S'description'
p36683
S'The analytic solution to compare against\n'
p36684
sS'cpp_type'
p36685
S'FunctionName'
p36686
sS'default'
p36687
g3
sS'name'
p36688
S'function'
p36689
sS'required'
p36690
I01
sS'group_name'
p36691
Nsa(dp36692
S'description'
p36693
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36694
sS'cpp_type'
p36695
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36696
sS'default'
p36697
g3
sS'name'
p36698
S'outputs'
p36699
sS'required'
p36700
I00
sS'group_name'
p36701
S'Advanced'
p36702
sa(dp36703
S'description'
p36704
S'The seed for the master random number generator\n'
p36705
sS'cpp_type'
p36706
S'unsigned int'
p36707
sS'default'
p36708
S'0'
p36709
sS'name'
p36710
S'seed'
p36711
sS'required'
p36712
I00
sS'group_name'
p36713
S'Advanced'
p36714
sa(dp36715
S'description'
p36716
g3
sS'cpp_type'
p36717
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36718
sS'default'
p36719
S'ElementL2Error'
p36720
sS'name'
p36721
S'type'
p36722
sS'required'
p36723
I00
sS'group_name'
p36724
Nsa(dp36725
S'description'
p36726
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36727
sS'cpp_type'
p36728
S'bool'
p36729
sS'default'
p36730
S'0'
p36731
sS'name'
p36732
S'use_displaced_mesh'
p36733
sS'required'
p36734
I00
sS'group_name'
p36735
S'Advanced'
p36736
sa(dp36737
S'description'
p36738
S'The name of the variable that this object operates on\n'
p36739
sS'cpp_type'
p36740
S'std::vector<VariableName>'
p36741
sS'default'
p36742
g3
sS'name'
p36743
S'variable'
p36744
sS'required'
p36745
I01
sS'group_name'
p36746
NsasS'name'
p36747
S'/Postprocessors/ElementL2Error'
p36748
sa(dp36749
S'description'
p36750
g3
sS'subblocks'
p36751
NsS'parameters'
p36752
(lp36753
(dp36754
S'description'
p36755
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36756
sS'cpp_type'
p36757
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36758
sS'default'
p36759
g3
sS'name'
p36760
S'block'
p36761
sS'required'
p36762
I00
sS'group_name'
p36763
Nsa(dp36764
S'description'
p36765
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36766
sS'cpp_type'
p36767
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36768
sS'default'
p36769
g3
sS'name'
p36770
S'control_tags'
p36771
sS'required'
p36772
I00
sS'group_name'
p36773
S'Advanced'
p36774
sa(dp36775
S'description'
p36776
S'Set the enabled status of the MooseObject.\n'
p36777
sS'cpp_type'
p36778
S'bool'
p36779
sS'default'
p36780
S'1'
p36781
sS'name'
p36782
S'enable'
p36783
sS'required'
p36784
I00
sS'group_name'
p36785
S'Advanced'
p36786
sa(dp36787
S'name'
p36788
S'execute_on'
p36789
sS'cpp_type'
p36790
S'MultiMooseEnum'
p36791
sS'default'
p36792
S'TIMESTEP_END'
p36793
sS'description'
p36794
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36795
sS'required'
p36796
I00
sS'options'
p36797
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36798
sS'group_name'
p36799
Nsa(dp36800
S'description'
p36801
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36802
sS'cpp_type'
p36803
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36804
sS'default'
p36805
g3
sS'name'
p36806
S'outputs'
p36807
sS'required'
p36808
I00
sS'group_name'
p36809
S'Advanced'
p36810
sa(dp36811
S'description'
p36812
S'The seed for the master random number generator\n'
p36813
sS'cpp_type'
p36814
S'unsigned int'
p36815
sS'default'
p36816
S'0'
p36817
sS'name'
p36818
S'seed'
p36819
sS'required'
p36820
I00
sS'group_name'
p36821
S'Advanced'
p36822
sa(dp36823
S'description'
p36824
g3
sS'cpp_type'
p36825
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36826
sS'default'
p36827
S'ElementL2Norm'
p36828
sS'name'
p36829
S'type'
p36830
sS'required'
p36831
I00
sS'group_name'
p36832
Nsa(dp36833
S'description'
p36834
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36835
sS'cpp_type'
p36836
S'bool'
p36837
sS'default'
p36838
S'0'
p36839
sS'name'
p36840
S'use_displaced_mesh'
p36841
sS'required'
p36842
I00
sS'group_name'
p36843
S'Advanced'
p36844
sa(dp36845
S'description'
p36846
S'The name of the variable that this object operates on\n'
p36847
sS'cpp_type'
p36848
S'std::vector<VariableName>'
p36849
sS'default'
p36850
g3
sS'name'
p36851
S'variable'
p36852
sS'required'
p36853
I01
sS'group_name'
p36854
NsasS'name'
p36855
S'/Postprocessors/ElementL2Norm'
p36856
sa(dp36857
S'description'
p36858
g3
sS'subblocks'
p36859
NsS'parameters'
p36860
(lp36861
(dp36862
S'description'
p36863
S'The list of block ids (SubdomainID) that this object will be applied\n'
p36864
sS'cpp_type'
p36865
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p36866
sS'default'
p36867
g3
sS'name'
p36868
S'block'
p36869
sS'required'
p36870
I00
sS'group_name'
p36871
Nsa(dp36872
S'description'
p36873
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p36874
sS'cpp_type'
p36875
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p36876
sS'default'
p36877
g3
sS'name'
p36878
S'control_tags'
p36879
sS'required'
p36880
I00
sS'group_name'
p36881
S'Advanced'
p36882
sa(dp36883
S'description'
p36884
S'Set the enabled status of the MooseObject.\n'
p36885
sS'cpp_type'
p36886
S'bool'
p36887
sS'default'
p36888
S'1'
p36889
sS'name'
p36890
S'enable'
p36891
sS'required'
p36892
I00
sS'group_name'
p36893
S'Advanced'
p36894
sa(dp36895
S'name'
p36896
S'execute_on'
p36897
sS'cpp_type'
p36898
S'MultiMooseEnum'
p36899
sS'default'
p36900
S'TIMESTEP_END'
p36901
sS'description'
p36902
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36903
sS'required'
p36904
I00
sS'options'
p36905
S'none initial linear nonlinear timestep_end timestep_begin custom'
p36906
sS'group_name'
p36907
Nsa(dp36908
S'description'
p36909
S'The analytic solution to compare against\n'
p36910
sS'cpp_type'
p36911
S'FunctionName'
p36912
sS'default'
p36913
g3
sS'name'
p36914
S'function_x'
p36915
sS'required'
p36916
I01
sS'group_name'
p36917
Nsa(dp36918
S'description'
p36919
S'The analytic solution to compare against\n'
p36920
sS'cpp_type'
p36921
S'FunctionName'
p36922
sS'default'
p36923
S'0'
p36924
sS'name'
p36925
S'function_y'
p36926
sS'required'
p36927
I00
sS'group_name'
p36928
Nsa(dp36929
S'description'
p36930
S'The analytic solution to compare against\n'
p36931
sS'cpp_type'
p36932
S'FunctionName'
p36933
sS'default'
p36934
S'0'
p36935
sS'name'
p36936
S'function_z'
p36937
sS'required'
p36938
I00
sS'group_name'
p36939
Nsa(dp36940
S'description'
p36941
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p36942
sS'cpp_type'
p36943
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p36944
sS'default'
p36945
g3
sS'name'
p36946
S'outputs'
p36947
sS'required'
p36948
I00
sS'group_name'
p36949
S'Advanced'
p36950
sa(dp36951
S'description'
p36952
S'The seed for the master random number generator\n'
p36953
sS'cpp_type'
p36954
S'unsigned int'
p36955
sS'default'
p36956
S'0'
p36957
sS'name'
p36958
S'seed'
p36959
sS'required'
p36960
I00
sS'group_name'
p36961
S'Advanced'
p36962
sa(dp36963
S'description'
p36964
g3
sS'cpp_type'
p36965
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36966
sS'default'
p36967
S'ElementVectorL2Error'
p36968
sS'name'
p36969
S'type'
p36970
sS'required'
p36971
I00
sS'group_name'
p36972
Nsa(dp36973
S'description'
p36974
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36975
sS'cpp_type'
p36976
S'bool'
p36977
sS'default'
p36978
S'0'
p36979
sS'name'
p36980
S'use_displaced_mesh'
p36981
sS'required'
p36982
I00
sS'group_name'
p36983
S'Advanced'
p36984
sa(dp36985
S'description'
p36986
S'The FE solution in x direction\n'
p36987
sS'cpp_type'
p36988
S'std::vector<VariableName>'
p36989
sS'default'
p36990
g3
sS'name'
p36991
S'var_x'
p36992
sS'required'
p36993
I01
sS'group_name'
p36994
Nsa(dp36995
S'description'
p36996
S'The FE solution in y direction\n'
p36997
sS'cpp_type'
p36998
S'std::vector<VariableName>'
p36999
sS'default'
p37000
S'0'
p37001
sS'name'
p37002
S'var_y'
p37003
sS'required'
p37004
I00
sS'group_name'
p37005
Nsa(dp37006
S'description'
p37007
S'The FE solution in z direction\n'
p37008
sS'cpp_type'
p37009
S'std::vector<VariableName>'
p37010
sS'default'
p37011
S'0'
p37012
sS'name'
p37013
S'var_z'
p37014
sS'required'
p37015
I00
sS'group_name'
p37016
NsasS'name'
p37017
S'/Postprocessors/ElementVectorL2Error'
p37018
sa(dp37019
S'description'
p37020
g3
sS'subblocks'
p37021
NsS'parameters'
p37022
(lp37023
(dp37024
S'description'
p37025
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37026
sS'cpp_type'
p37027
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p37028
sS'default'
p37029
g3
sS'name'
p37030
S'block'
p37031
sS'required'
p37032
I00
sS'group_name'
p37033
Nsa(dp37034
S'description'
p37035
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37036
sS'cpp_type'
p37037
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37038
sS'default'
p37039
g3
sS'name'
p37040
S'control_tags'
p37041
sS'required'
p37042
I00
sS'group_name'
p37043
S'Advanced'
p37044
sa(dp37045
S'description'
p37046
S'Set the enabled status of the MooseObject.\n'
p37047
sS'cpp_type'
p37048
S'bool'
p37049
sS'default'
p37050
S'1'
p37051
sS'name'
p37052
S'enable'
p37053
sS'required'
p37054
I00
sS'group_name'
p37055
S'Advanced'
p37056
sa(dp37057
S'name'
p37058
S'execute_on'
p37059
sS'cpp_type'
p37060
S'MultiMooseEnum'
p37061
sS'default'
p37062
S'TIMESTEP_END'
p37063
sS'description'
p37064
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37065
sS'required'
p37066
I00
sS'options'
p37067
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37068
sS'group_name'
p37069
Nsa(dp37070
S'description'
p37071
S'The analytic solution to compare against\n'
p37072
sS'cpp_type'
p37073
S'FunctionName'
p37074
sS'default'
p37075
g3
sS'name'
p37076
S'function'
p37077
sS'required'
p37078
I01
sS'group_name'
p37079
Nsa(dp37080
S'description'
p37081
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37082
sS'cpp_type'
p37083
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37084
sS'default'
p37085
g3
sS'name'
p37086
S'outputs'
p37087
sS'required'
p37088
I00
sS'group_name'
p37089
S'Advanced'
p37090
sa(dp37091
S'description'
p37092
S'The exponent used in the norm.\n'
p37093
sS'cpp_type'
p37094
S'double'
p37095
sS'default'
p37096
S'2'
p37097
sS'name'
p37098
S'p'
p37099
sS'required'
p37100
I00
sS'group_name'
p37101
Nsa(dp37102
S'description'
p37103
S'The seed for the master random number generator\n'
p37104
sS'cpp_type'
p37105
S'unsigned int'
p37106
sS'default'
p37107
S'0'
p37108
sS'name'
p37109
S'seed'
p37110
sS'required'
p37111
I00
sS'group_name'
p37112
S'Advanced'
p37113
sa(dp37114
S'description'
p37115
g3
sS'cpp_type'
p37116
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37117
sS'default'
p37118
S'ElementW1pError'
p37119
sS'name'
p37120
S'type'
p37121
sS'required'
p37122
I00
sS'group_name'
p37123
Nsa(dp37124
S'description'
p37125
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37126
sS'cpp_type'
p37127
S'bool'
p37128
sS'default'
p37129
S'0'
p37130
sS'name'
p37131
S'use_displaced_mesh'
p37132
sS'required'
p37133
I00
sS'group_name'
p37134
S'Advanced'
p37135
sa(dp37136
S'description'
p37137
S'The name of the variable that this object operates on\n'
p37138
sS'cpp_type'
p37139
S'std::vector<VariableName>'
p37140
sS'default'
p37141
g3
sS'name'
p37142
S'variable'
p37143
sS'required'
p37144
I01
sS'group_name'
p37145
NsasS'name'
p37146
S'/Postprocessors/ElementW1pError'
p37147
sa(dp37148
S'description'
p37149
g3
sS'subblocks'
p37150
NsS'parameters'
p37151
(lp37152
(dp37153
S'description'
p37154
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37155
sS'cpp_type'
p37156
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37157
sS'default'
p37158
g3
sS'name'
p37159
S'control_tags'
p37160
sS'required'
p37161
I00
sS'group_name'
p37162
S'Advanced'
p37163
sa(dp37164
S'description'
p37165
S'The ID of the element where we monitor\n'
p37166
sS'cpp_type'
p37167
S'unsigned int'
p37168
sS'default'
p37169
g3
sS'name'
p37170
S'elementid'
p37171
sS'required'
p37172
I01
sS'group_name'
p37173
Nsa(dp37174
S'description'
p37175
S'Set the enabled status of the MooseObject.\n'
p37176
sS'cpp_type'
p37177
S'bool'
p37178
sS'default'
p37179
S'1'
p37180
sS'name'
p37181
S'enable'
p37182
sS'required'
p37183
I00
sS'group_name'
p37184
S'Advanced'
p37185
sa(dp37186
S'name'
p37187
S'execute_on'
p37188
sS'cpp_type'
p37189
S'MultiMooseEnum'
p37190
sS'default'
p37191
S'TIMESTEP_END'
p37192
sS'description'
p37193
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37194
sS'required'
p37195
I00
sS'options'
p37196
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37197
sS'group_name'
p37198
Nsa(dp37199
S'description'
p37200
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37201
sS'cpp_type'
p37202
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37203
sS'default'
p37204
g3
sS'name'
p37205
S'outputs'
p37206
sS'required'
p37207
I00
sS'group_name'
p37208
S'Advanced'
p37209
sa(dp37210
S'description'
p37211
g3
sS'cpp_type'
p37212
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37213
sS'default'
p37214
S'ElementalVariableValue'
p37215
sS'name'
p37216
S'type'
p37217
sS'required'
p37218
I00
sS'group_name'
p37219
Nsa(dp37220
S'description'
p37221
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37222
sS'cpp_type'
p37223
S'bool'
p37224
sS'default'
p37225
S'0'
p37226
sS'name'
p37227
S'use_displaced_mesh'
p37228
sS'required'
p37229
I00
sS'group_name'
p37230
S'Advanced'
p37231
sa(dp37232
S'description'
p37233
S'The variable to be monitored\n'
p37234
sS'cpp_type'
p37235
S'VariableName'
p37236
sS'default'
p37237
g3
sS'name'
p37238
S'variable'
p37239
sS'required'
p37240
I01
sS'group_name'
p37241
NsasS'name'
p37242
S'/Postprocessors/ElementalVariableValue'
p37243
sa(dp37244
S'description'
p37245
g3
sS'subblocks'
p37246
NsS'parameters'
p37247
(lp37248
(dp37249
S'description'
p37250
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37251
sS'cpp_type'
p37252
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37253
sS'default'
p37254
g3
sS'name'
p37255
S'control_tags'
p37256
sS'required'
p37257
I00
sS'group_name'
p37258
S'Advanced'
p37259
sa(dp37260
S'description'
p37261
S'Set the enabled status of the MooseObject.\n'
p37262
sS'cpp_type'
p37263
S'bool'
p37264
sS'default'
p37265
S'1'
p37266
sS'name'
p37267
S'enable'
p37268
sS'required'
p37269
I00
sS'group_name'
p37270
S'Advanced'
p37271
sa(dp37272
S'name'
p37273
S'execute_on'
p37274
sS'cpp_type'
p37275
S'MultiMooseEnum'
p37276
sS'default'
p37277
S'TIMESTEP_END'
p37278
sS'description'
p37279
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37280
sS'required'
p37281
I00
sS'options'
p37282
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37283
sS'group_name'
p37284
Nsa(dp37285
S'description'
p37286
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37287
sS'cpp_type'
p37288
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37289
sS'default'
p37290
g3
sS'name'
p37291
S'outputs'
p37292
sS'required'
p37293
I00
sS'group_name'
p37294
S'Advanced'
p37295
sa(dp37296
S'description'
p37297
g3
sS'cpp_type'
p37298
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37299
sS'default'
p37300
S'EmptyPostprocessor'
p37301
sS'name'
p37302
S'type'
p37303
sS'required'
p37304
I00
sS'group_name'
p37305
Nsa(dp37306
S'description'
p37307
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37308
sS'cpp_type'
p37309
S'bool'
p37310
sS'default'
p37311
S'0'
p37312
sS'name'
p37313
S'use_displaced_mesh'
p37314
sS'required'
p37315
I00
sS'group_name'
p37316
S'Advanced'
p37317
sasS'name'
p37318
S'/Postprocessors/EmptyPostprocessor'
p37319
sa(dp37320
S'description'
p37321
g3
sS'subblocks'
p37322
NsS'parameters'
p37323
(lp37324
(dp37325
S'description'
p37326
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37327
sS'cpp_type'
p37328
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37329
sS'default'
p37330
g3
sS'name'
p37331
S'control_tags'
p37332
sS'required'
p37333
I00
sS'group_name'
p37334
S'Advanced'
p37335
sa(dp37336
S'description'
p37337
S'Set the enabled status of the MooseObject.\n'
p37338
sS'cpp_type'
p37339
S'bool'
p37340
sS'default'
p37341
S'1'
p37342
sS'name'
p37343
S'enable'
p37344
sS'required'
p37345
I00
sS'group_name'
p37346
S'Advanced'
p37347
sa(dp37348
S'name'
p37349
S'execute_on'
p37350
sS'cpp_type'
p37351
S'MultiMooseEnum'
p37352
sS'default'
p37353
S'TIMESTEP_END'
p37354
sS'description'
p37355
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37356
sS'required'
p37357
I00
sS'options'
p37358
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37359
sS'group_name'
p37360
Nsa(dp37361
S'description'
p37362
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37363
sS'cpp_type'
p37364
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37365
sS'default'
p37366
g3
sS'name'
p37367
S'outputs'
p37368
sS'required'
p37369
I00
sS'group_name'
p37370
S'Advanced'
p37371
sa(dp37372
S'description'
p37373
g3
sS'cpp_type'
p37374
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37375
sS'default'
p37376
S'ExecutionerAttributeReporter'
p37377
sS'name'
p37378
S'type'
p37379
sS'required'
p37380
I00
sS'group_name'
p37381
Nsa(dp37382
S'description'
p37383
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37384
sS'cpp_type'
p37385
S'bool'
p37386
sS'default'
p37387
S'0'
p37388
sS'name'
p37389
S'use_displaced_mesh'
p37390
sS'required'
p37391
I00
sS'group_name'
p37392
S'Advanced'
p37393
sasS'name'
p37394
S'/Postprocessors/ExecutionerAttributeReporter'
p37395
sa(dp37396
S'description'
p37397
S'Find a specific target value along a sampling line. The variable values along the line should change monotonically. The target value is searched using a bisection algorithm.\n'
p37398
sS'subblocks'
p37399
NsS'parameters'
p37400
(lp37401
(dp37402
S'description'
p37403
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37404
sS'cpp_type'
p37405
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37406
sS'default'
p37407
g3
sS'name'
p37408
S'control_tags'
p37409
sS'required'
p37410
I00
sS'group_name'
p37411
S'Advanced'
p37412
sa(dp37413
S'description'
p37414
S'Maximum number of bisections to perform.\n'
p37415
sS'cpp_type'
p37416
S'unsigned int'
p37417
sS'default'
p37418
S'36'
p37419
sS'name'
p37420
S'depth'
p37421
sS'required'
p37422
I00
sS'group_name'
p37423
Nsa(dp37424
S'description'
p37425
S'Set the enabled status of the MooseObject.\n'
p37426
sS'cpp_type'
p37427
S'bool'
p37428
sS'default'
p37429
S'1'
p37430
sS'name'
p37431
S'enable'
p37432
sS'required'
p37433
I00
sS'group_name'
p37434
S'Advanced'
p37435
sa(dp37436
S'description'
p37437
S'End point of the sampling line.\n'
p37438
sS'cpp_type'
p37439
S'libMesh::Point'
p37440
sS'default'
p37441
g3
sS'name'
p37442
S'end_point'
p37443
sS'required'
p37444
I00
sS'group_name'
p37445
Nsa(dp37446
S'name'
p37447
S'execute_on'
p37448
sS'cpp_type'
p37449
S'MultiMooseEnum'
p37450
sS'default'
p37451
S'TIMESTEP_END'
p37452
sS'description'
p37453
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37454
sS'required'
p37455
I00
sS'options'
p37456
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37457
sS'group_name'
p37458
Nsa(dp37459
S'description'
p37460
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37461
sS'cpp_type'
p37462
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37463
sS'default'
p37464
g3
sS'name'
p37465
S'outputs'
p37466
sS'required'
p37467
I00
sS'group_name'
p37468
S'Advanced'
p37469
sa(dp37470
S'description'
p37471
S'Start point of the sampling line.\n'
p37472
sS'cpp_type'
p37473
S'libMesh::Point'
p37474
sS'default'
p37475
g3
sS'name'
p37476
S'start_point'
p37477
sS'required'
p37478
I00
sS'group_name'
p37479
Nsa(dp37480
S'description'
p37481
S'Target value to locate.\n'
p37482
sS'cpp_type'
p37483
S'double'
p37484
sS'default'
p37485
g3
sS'name'
p37486
S'target'
p37487
sS'required'
p37488
I00
sS'group_name'
p37489
Nsa(dp37490
S'description'
p37491
S'Stop search if a value is found that is equal to the target with this tolerance applied.\n'
p37492
sS'cpp_type'
p37493
S'double'
p37494
sS'default'
p37495
S'1e-10'
p37496
sS'name'
p37497
S'tol'
p37498
sS'required'
p37499
I00
sS'group_name'
p37500
Nsa(dp37501
S'description'
p37502
g3
sS'cpp_type'
p37503
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37504
sS'default'
p37505
S'FindValueOnLine'
p37506
sS'name'
p37507
S'type'
p37508
sS'required'
p37509
I00
sS'group_name'
p37510
Nsa(dp37511
S'description'
p37512
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37513
sS'cpp_type'
p37514
S'bool'
p37515
sS'default'
p37516
S'0'
p37517
sS'name'
p37518
S'use_displaced_mesh'
p37519
sS'required'
p37520
I00
sS'group_name'
p37521
S'Advanced'
p37522
sa(dp37523
S'description'
p37524
S'Variable to inspect\n'
p37525
sS'cpp_type'
p37526
S'std::vector<VariableName>'
p37527
sS'default'
p37528
g3
sS'name'
p37529
S'v'
p37530
sS'required'
p37531
I00
sS'group_name'
p37532
NsasS'name'
p37533
S'/Postprocessors/FindValueOnLine'
p37534
sa(dp37535
S'description'
p37536
g3
sS'subblocks'
p37537
NsS'parameters'
p37538
(lp37539
(dp37540
S'description'
p37541
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p37542
sS'cpp_type'
p37543
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p37544
sS'default'
p37545
g3
sS'name'
p37546
S'boundary'
p37547
sS'required'
p37548
I01
sS'group_name'
p37549
Nsa(dp37550
S'description'
p37551
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37552
sS'cpp_type'
p37553
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37554
sS'default'
p37555
g3
sS'name'
p37556
S'control_tags'
p37557
sS'required'
p37558
I00
sS'group_name'
p37559
S'Advanced'
p37560
sa(dp37561
S'description'
p37562
S'Set the enabled status of the MooseObject.\n'
p37563
sS'cpp_type'
p37564
S'bool'
p37565
sS'default'
p37566
S'1'
p37567
sS'name'
p37568
S'enable'
p37569
sS'required'
p37570
I00
sS'group_name'
p37571
S'Advanced'
p37572
sa(dp37573
S'name'
p37574
S'execute_on'
p37575
sS'cpp_type'
p37576
S'MultiMooseEnum'
p37577
sS'default'
p37578
S'TIMESTEP_END'
p37579
sS'description'
p37580
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37581
sS'required'
p37582
I00
sS'options'
p37583
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37584
sS'group_name'
p37585
Nsa(dp37586
S'description'
p37587
S'This postprocessor will return the integral of this function over the boundary\n'
p37588
sS'cpp_type'
p37589
S'FunctionName'
p37590
sS'default'
p37591
S'1'
p37592
sS'name'
p37593
S'function'
p37594
sS'required'
p37595
I00
sS'group_name'
p37596
Nsa(dp37597
S'description'
p37598
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37599
sS'cpp_type'
p37600
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37601
sS'default'
p37602
g3
sS'name'
p37603
S'outputs'
p37604
sS'required'
p37605
I00
sS'group_name'
p37606
S'Advanced'
p37607
sa(dp37608
S'description'
p37609
g3
sS'cpp_type'
p37610
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37611
sS'default'
p37612
S'FunctionSideIntegral'
p37613
sS'name'
p37614
S'type'
p37615
sS'required'
p37616
I00
sS'group_name'
p37617
Nsa(dp37618
S'description'
p37619
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37620
sS'cpp_type'
p37621
S'bool'
p37622
sS'default'
p37623
S'0'
p37624
sS'name'
p37625
S'use_displaced_mesh'
p37626
sS'required'
p37627
I00
sS'group_name'
p37628
S'Advanced'
p37629
sasS'name'
p37630
S'/Postprocessors/FunctionSideIntegral'
p37631
sa(dp37632
S'description'
p37633
g3
sS'subblocks'
p37634
NsS'parameters'
p37635
(lp37636
(dp37637
S'description'
p37638
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37639
sS'cpp_type'
p37640
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37641
sS'default'
p37642
g3
sS'name'
p37643
S'control_tags'
p37644
sS'required'
p37645
I00
sS'group_name'
p37646
S'Advanced'
p37647
sa(dp37648
S'description'
p37649
S'Set the enabled status of the MooseObject.\n'
p37650
sS'cpp_type'
p37651
S'bool'
p37652
sS'default'
p37653
S'1'
p37654
sS'name'
p37655
S'enable'
p37656
sS'required'
p37657
I00
sS'group_name'
p37658
S'Advanced'
p37659
sa(dp37660
S'name'
p37661
S'execute_on'
p37662
sS'cpp_type'
p37663
S'MultiMooseEnum'
p37664
sS'default'
p37665
S'TIMESTEP_END'
p37666
sS'description'
p37667
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37668
sS'required'
p37669
I00
sS'options'
p37670
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37671
sS'group_name'
p37672
Nsa(dp37673
S'description'
p37674
S'The function which supplies the postprocessor value.\n'
p37675
sS'cpp_type'
p37676
S'FunctionName'
p37677
sS'default'
p37678
g3
sS'name'
p37679
S'function'
p37680
sS'required'
p37681
I01
sS'group_name'
p37682
Nsa(dp37683
S'description'
p37684
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37685
sS'cpp_type'
p37686
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37687
sS'default'
p37688
g3
sS'name'
p37689
S'outputs'
p37690
sS'required'
p37691
I00
sS'group_name'
p37692
S'Advanced'
p37693
sa(dp37694
S'description'
p37695
S'A point in space to be given to the function Default: (0, 0, 0)\n'
p37696
sS'cpp_type'
p37697
S'libMesh::Point'
p37698
sS'default'
p37699
S'0 0 0'
p37700
sS'name'
p37701
S'point'
p37702
sS'required'
p37703
I00
sS'group_name'
p37704
Nsa(dp37705
S'description'
p37706
S'A scale factor to be applied to the function\n'
p37707
sS'cpp_type'
p37708
S'double'
p37709
sS'default'
p37710
S'1'
p37711
sS'name'
p37712
S'scale_factor'
p37713
sS'required'
p37714
I00
sS'group_name'
p37715
Nsa(dp37716
S'description'
p37717
g3
sS'cpp_type'
p37718
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37719
sS'default'
p37720
S'FunctionValuePostprocessor'
p37721
sS'name'
p37722
S'type'
p37723
sS'required'
p37724
I00
sS'group_name'
p37725
Nsa(dp37726
S'description'
p37727
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37728
sS'cpp_type'
p37729
S'bool'
p37730
sS'default'
p37731
S'0'
p37732
sS'name'
p37733
S'use_displaced_mesh'
p37734
sS'required'
p37735
I00
sS'group_name'
p37736
S'Advanced'
p37737
sasS'name'
p37738
S'/Postprocessors/FunctionValuePostprocessor'
p37739
sa(dp37740
S'description'
p37741
g3
sS'subblocks'
p37742
NsS'parameters'
p37743
(lp37744
(dp37745
S'description'
p37746
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37747
sS'cpp_type'
p37748
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p37749
sS'default'
p37750
g3
sS'name'
p37751
S'block'
p37752
sS'required'
p37753
I00
sS'group_name'
p37754
Nsa(dp37755
S'description'
p37756
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p37757
sS'cpp_type'
p37758
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p37759
sS'default'
p37760
g3
sS'name'
p37761
S'boundary'
p37762
sS'required'
p37763
I00
sS'group_name'
p37764
Nsa(dp37765
S'description'
p37766
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37767
sS'cpp_type'
p37768
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37769
sS'default'
p37770
g3
sS'name'
p37771
S'control_tags'
p37772
sS'required'
p37773
I00
sS'group_name'
p37774
S'Advanced'
p37775
sa(dp37776
S'description'
p37777
S'Set the enabled status of the MooseObject.\n'
p37778
sS'cpp_type'
p37779
S'bool'
p37780
sS'default'
p37781
S'1'
p37782
sS'name'
p37783
S'enable'
p37784
sS'required'
p37785
I00
sS'group_name'
p37786
S'Advanced'
p37787
sa(dp37788
S'name'
p37789
S'execute_on'
p37790
sS'cpp_type'
p37791
S'MultiMooseEnum'
p37792
sS'default'
p37793
S'TIMESTEP_END'
p37794
sS'description'
p37795
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37796
sS'required'
p37797
I00
sS'options'
p37798
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37799
sS'group_name'
p37800
Nsa(dp37801
S'description'
p37802
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37803
sS'cpp_type'
p37804
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37805
sS'default'
p37806
g3
sS'name'
p37807
S'outputs'
p37808
sS'required'
p37809
I00
sS'group_name'
p37810
S'Advanced'
p37811
sa(dp37812
S'description'
p37813
S'The seed for the master random number generator\n'
p37814
sS'cpp_type'
p37815
S'unsigned int'
p37816
sS'default'
p37817
S'0'
p37818
sS'name'
p37819
S'seed'
p37820
sS'required'
p37821
I00
sS'group_name'
p37822
S'Advanced'
p37823
sa(dp37824
S'description'
p37825
g3
sS'cpp_type'
p37826
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37827
sS'default'
p37828
S'NodalExtremeValue'
p37829
sS'name'
p37830
S'type'
p37831
sS'required'
p37832
I00
sS'group_name'
p37833
Nsa(dp37834
S'description'
p37835
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p37836
sS'cpp_type'
p37837
S'bool'
p37838
sS'default'
p37839
S'0'
p37840
sS'name'
p37841
S'unique_node_execute'
p37842
sS'required'
p37843
I00
sS'group_name'
p37844
Nsa(dp37845
S'description'
p37846
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37847
sS'cpp_type'
p37848
S'bool'
p37849
sS'default'
p37850
S'0'
p37851
sS'name'
p37852
S'use_displaced_mesh'
p37853
sS'required'
p37854
I00
sS'group_name'
p37855
S'Advanced'
p37856
sa(dp37857
S'name'
p37858
S'value_type'
p37859
sS'cpp_type'
p37860
S'MooseEnum'
p37861
sS'default'
p37862
S'max'
p37863
sS'description'
p37864
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p37865
sS'required'
p37866
I00
sS'options'
p37867
S'max min'
p37868
sS'group_name'
p37869
Nsa(dp37870
S'description'
p37871
S'The name of the variable that this postprocessor operates on\n'
p37872
sS'cpp_type'
p37873
S'std::vector<VariableName>'
p37874
sS'default'
p37875
g3
sS'name'
p37876
S'variable'
p37877
sS'required'
p37878
I01
sS'group_name'
p37879
NsasS'name'
p37880
S'/Postprocessors/NodalExtremeValue'
p37881
sa(dp37882
S'description'
p37883
g3
sS'subblocks'
p37884
NsS'parameters'
p37885
(lp37886
(dp37887
S'description'
p37888
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37889
sS'cpp_type'
p37890
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p37891
sS'default'
p37892
g3
sS'name'
p37893
S'block'
p37894
sS'required'
p37895
I00
sS'group_name'
p37896
Nsa(dp37897
S'description'
p37898
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p37899
sS'cpp_type'
p37900
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p37901
sS'default'
p37902
g3
sS'name'
p37903
S'boundary'
p37904
sS'required'
p37905
I00
sS'group_name'
p37906
Nsa(dp37907
S'description'
p37908
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p37909
sS'cpp_type'
p37910
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p37911
sS'default'
p37912
g3
sS'name'
p37913
S'control_tags'
p37914
sS'required'
p37915
I00
sS'group_name'
p37916
S'Advanced'
p37917
sa(dp37918
S'description'
p37919
S'Set the enabled status of the MooseObject.\n'
p37920
sS'cpp_type'
p37921
S'bool'
p37922
sS'default'
p37923
S'1'
p37924
sS'name'
p37925
S'enable'
p37926
sS'required'
p37927
I00
sS'group_name'
p37928
S'Advanced'
p37929
sa(dp37930
S'name'
p37931
S'execute_on'
p37932
sS'cpp_type'
p37933
S'MultiMooseEnum'
p37934
sS'default'
p37935
S'TIMESTEP_END'
p37936
sS'description'
p37937
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37938
sS'required'
p37939
I00
sS'options'
p37940
S'none initial linear nonlinear timestep_end timestep_begin custom'
p37941
sS'group_name'
p37942
Nsa(dp37943
S'description'
p37944
S'The analytic solution to compare against\n'
p37945
sS'cpp_type'
p37946
S'FunctionName'
p37947
sS'default'
p37948
g3
sS'name'
p37949
S'function'
p37950
sS'required'
p37951
I01
sS'group_name'
p37952
Nsa(dp37953
S'description'
p37954
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37955
sS'cpp_type'
p37956
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37957
sS'default'
p37958
g3
sS'name'
p37959
S'outputs'
p37960
sS'required'
p37961
I00
sS'group_name'
p37962
S'Advanced'
p37963
sa(dp37964
S'description'
p37965
S'The seed for the master random number generator\n'
p37966
sS'cpp_type'
p37967
S'unsigned int'
p37968
sS'default'
p37969
S'0'
p37970
sS'name'
p37971
S'seed'
p37972
sS'required'
p37973
I00
sS'group_name'
p37974
S'Advanced'
p37975
sa(dp37976
S'description'
p37977
g3
sS'cpp_type'
p37978
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37979
sS'default'
p37980
S'NodalL2Error'
p37981
sS'name'
p37982
S'type'
p37983
sS'required'
p37984
I00
sS'group_name'
p37985
Nsa(dp37986
S'description'
p37987
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p37988
sS'cpp_type'
p37989
S'bool'
p37990
sS'default'
p37991
S'0'
p37992
sS'name'
p37993
S'unique_node_execute'
p37994
sS'required'
p37995
I00
sS'group_name'
p37996
Nsa(dp37997
S'description'
p37998
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37999
sS'cpp_type'
p38000
S'bool'
p38001
sS'default'
p38002
S'0'
p38003
sS'name'
p38004
S'use_displaced_mesh'
p38005
sS'required'
p38006
I00
sS'group_name'
p38007
S'Advanced'
p38008
sa(dp38009
S'description'
p38010
S'The name of the variable that this postprocessor operates on\n'
p38011
sS'cpp_type'
p38012
S'std::vector<VariableName>'
p38013
sS'default'
p38014
g3
sS'name'
p38015
S'variable'
p38016
sS'required'
p38017
I01
sS'group_name'
p38018
NsasS'name'
p38019
S'/Postprocessors/NodalL2Error'
p38020
sa(dp38021
S'description'
p38022
g3
sS'subblocks'
p38023
NsS'parameters'
p38024
(lp38025
(dp38026
S'description'
p38027
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38028
sS'cpp_type'
p38029
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p38030
sS'default'
p38031
g3
sS'name'
p38032
S'block'
p38033
sS'required'
p38034
I00
sS'group_name'
p38035
Nsa(dp38036
S'description'
p38037
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38038
sS'cpp_type'
p38039
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p38040
sS'default'
p38041
g3
sS'name'
p38042
S'boundary'
p38043
sS'required'
p38044
I00
sS'group_name'
p38045
Nsa(dp38046
S'description'
p38047
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38048
sS'cpp_type'
p38049
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38050
sS'default'
p38051
g3
sS'name'
p38052
S'control_tags'
p38053
sS'required'
p38054
I00
sS'group_name'
p38055
S'Advanced'
p38056
sa(dp38057
S'description'
p38058
S'Set the enabled status of the MooseObject.\n'
p38059
sS'cpp_type'
p38060
S'bool'
p38061
sS'default'
p38062
S'1'
p38063
sS'name'
p38064
S'enable'
p38065
sS'required'
p38066
I00
sS'group_name'
p38067
S'Advanced'
p38068
sa(dp38069
S'name'
p38070
S'execute_on'
p38071
sS'cpp_type'
p38072
S'MultiMooseEnum'
p38073
sS'default'
p38074
S'TIMESTEP_END'
p38075
sS'description'
p38076
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38077
sS'required'
p38078
I00
sS'options'
p38079
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38080
sS'group_name'
p38081
Nsa(dp38082
S'description'
p38083
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38084
sS'cpp_type'
p38085
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38086
sS'default'
p38087
g3
sS'name'
p38088
S'outputs'
p38089
sS'required'
p38090
I00
sS'group_name'
p38091
S'Advanced'
p38092
sa(dp38093
S'description'
p38094
S'The seed for the master random number generator\n'
p38095
sS'cpp_type'
p38096
S'unsigned int'
p38097
sS'default'
p38098
S'0'
p38099
sS'name'
p38100
S'seed'
p38101
sS'required'
p38102
I00
sS'group_name'
p38103
S'Advanced'
p38104
sa(dp38105
S'description'
p38106
g3
sS'cpp_type'
p38107
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38108
sS'default'
p38109
S'NodalL2Norm'
p38110
sS'name'
p38111
S'type'
p38112
sS'required'
p38113
I00
sS'group_name'
p38114
Nsa(dp38115
S'description'
p38116
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p38117
sS'cpp_type'
p38118
S'bool'
p38119
sS'default'
p38120
S'1'
p38121
sS'name'
p38122
S'unique_node_execute'
p38123
sS'required'
p38124
I00
sS'group_name'
p38125
Nsa(dp38126
S'description'
p38127
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38128
sS'cpp_type'
p38129
S'bool'
p38130
sS'default'
p38131
S'0'
p38132
sS'name'
p38133
S'use_displaced_mesh'
p38134
sS'required'
p38135
I00
sS'group_name'
p38136
S'Advanced'
p38137
sa(dp38138
S'description'
p38139
S'The name of the variable that this postprocessor operates on\n'
p38140
sS'cpp_type'
p38141
S'std::vector<VariableName>'
p38142
sS'default'
p38143
g3
sS'name'
p38144
S'variable'
p38145
sS'required'
p38146
I01
sS'group_name'
p38147
NsasS'name'
p38148
S'/Postprocessors/NodalL2Norm'
p38149
sa(dp38150
S'description'
p38151
g3
sS'subblocks'
p38152
NsS'parameters'
p38153
(lp38154
(dp38155
S'description'
p38156
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38157
sS'cpp_type'
p38158
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p38159
sS'default'
p38160
g3
sS'name'
p38161
S'block'
p38162
sS'required'
p38163
I00
sS'group_name'
p38164
Nsa(dp38165
S'description'
p38166
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38167
sS'cpp_type'
p38168
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p38169
sS'default'
p38170
g3
sS'name'
p38171
S'boundary'
p38172
sS'required'
p38173
I00
sS'group_name'
p38174
Nsa(dp38175
S'description'
p38176
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38177
sS'cpp_type'
p38178
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38179
sS'default'
p38180
g3
sS'name'
p38181
S'control_tags'
p38182
sS'required'
p38183
I00
sS'group_name'
p38184
S'Advanced'
p38185
sa(dp38186
S'description'
p38187
S'Set the enabled status of the MooseObject.\n'
p38188
sS'cpp_type'
p38189
S'bool'
p38190
sS'default'
p38191
S'1'
p38192
sS'name'
p38193
S'enable'
p38194
sS'required'
p38195
I00
sS'group_name'
p38196
S'Advanced'
p38197
sa(dp38198
S'name'
p38199
S'execute_on'
p38200
sS'cpp_type'
p38201
S'MultiMooseEnum'
p38202
sS'default'
p38203
S'TIMESTEP_END'
p38204
sS'description'
p38205
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38206
sS'required'
p38207
I00
sS'options'
p38208
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38209
sS'group_name'
p38210
Nsa(dp38211
S'description'
p38212
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38213
sS'cpp_type'
p38214
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38215
sS'default'
p38216
g3
sS'name'
p38217
S'outputs'
p38218
sS'required'
p38219
I00
sS'group_name'
p38220
S'Advanced'
p38221
sa(dp38222
S'description'
p38223
S'The seed for the master random number generator\n'
p38224
sS'cpp_type'
p38225
S'unsigned int'
p38226
sS'default'
p38227
S'0'
p38228
sS'name'
p38229
S'seed'
p38230
sS'required'
p38231
I00
sS'group_name'
p38232
S'Advanced'
p38233
sa(dp38234
S'description'
p38235
g3
sS'cpp_type'
p38236
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38237
sS'default'
p38238
S'NodalMaxValue'
p38239
sS'name'
p38240
S'type'
p38241
sS'required'
p38242
I00
sS'group_name'
p38243
Nsa(dp38244
S'description'
p38245
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p38246
sS'cpp_type'
p38247
S'bool'
p38248
sS'default'
p38249
S'0'
p38250
sS'name'
p38251
S'unique_node_execute'
p38252
sS'required'
p38253
I00
sS'group_name'
p38254
Nsa(dp38255
S'description'
p38256
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38257
sS'cpp_type'
p38258
S'bool'
p38259
sS'default'
p38260
S'0'
p38261
sS'name'
p38262
S'use_displaced_mesh'
p38263
sS'required'
p38264
I00
sS'group_name'
p38265
S'Advanced'
p38266
sa(dp38267
S'description'
p38268
S'The name of the variable that this postprocessor operates on\n'
p38269
sS'cpp_type'
p38270
S'std::vector<VariableName>'
p38271
sS'default'
p38272
g3
sS'name'
p38273
S'variable'
p38274
sS'required'
p38275
I01
sS'group_name'
p38276
NsasS'name'
p38277
S'/Postprocessors/NodalMaxValue'
p38278
sa(dp38279
S'description'
p38280
g3
sS'subblocks'
p38281
NsS'parameters'
p38282
(lp38283
(dp38284
S'description'
p38285
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38286
sS'cpp_type'
p38287
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p38288
sS'default'
p38289
g3
sS'name'
p38290
S'block'
p38291
sS'required'
p38292
I00
sS'group_name'
p38293
Nsa(dp38294
S'description'
p38295
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38296
sS'cpp_type'
p38297
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p38298
sS'default'
p38299
g3
sS'name'
p38300
S'boundary'
p38301
sS'required'
p38302
I00
sS'group_name'
p38303
Nsa(dp38304
S'description'
p38305
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38306
sS'cpp_type'
p38307
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38308
sS'default'
p38309
g3
sS'name'
p38310
S'control_tags'
p38311
sS'required'
p38312
I00
sS'group_name'
p38313
S'Advanced'
p38314
sa(dp38315
S'description'
p38316
S'Set the enabled status of the MooseObject.\n'
p38317
sS'cpp_type'
p38318
S'bool'
p38319
sS'default'
p38320
S'1'
p38321
sS'name'
p38322
S'enable'
p38323
sS'required'
p38324
I00
sS'group_name'
p38325
S'Advanced'
p38326
sa(dp38327
S'name'
p38328
S'execute_on'
p38329
sS'cpp_type'
p38330
S'MultiMooseEnum'
p38331
sS'default'
p38332
S'TIMESTEP_END'
p38333
sS'description'
p38334
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38335
sS'required'
p38336
I00
sS'options'
p38337
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38338
sS'group_name'
p38339
Nsa(dp38340
S'description'
p38341
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38342
sS'cpp_type'
p38343
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38344
sS'default'
p38345
g3
sS'name'
p38346
S'outputs'
p38347
sS'required'
p38348
I00
sS'group_name'
p38349
S'Advanced'
p38350
sa(dp38351
S'description'
p38352
S'The seed for the master random number generator\n'
p38353
sS'cpp_type'
p38354
S'unsigned int'
p38355
sS'default'
p38356
S'0'
p38357
sS'name'
p38358
S'seed'
p38359
sS'required'
p38360
I00
sS'group_name'
p38361
S'Advanced'
p38362
sa(dp38363
S'description'
p38364
g3
sS'cpp_type'
p38365
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38366
sS'default'
p38367
S'NodalProxyMaxValue'
p38368
sS'name'
p38369
S'type'
p38370
sS'required'
p38371
I00
sS'group_name'
p38372
Nsa(dp38373
S'description'
p38374
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p38375
sS'cpp_type'
p38376
S'bool'
p38377
sS'default'
p38378
S'0'
p38379
sS'name'
p38380
S'unique_node_execute'
p38381
sS'required'
p38382
I00
sS'group_name'
p38383
Nsa(dp38384
S'description'
p38385
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38386
sS'cpp_type'
p38387
S'bool'
p38388
sS'default'
p38389
S'0'
p38390
sS'name'
p38391
S'use_displaced_mesh'
p38392
sS'required'
p38393
I00
sS'group_name'
p38394
S'Advanced'
p38395
sa(dp38396
S'description'
p38397
S'The name of the variable that this postprocessor operates on\n'
p38398
sS'cpp_type'
p38399
S'std::vector<VariableName>'
p38400
sS'default'
p38401
g3
sS'name'
p38402
S'variable'
p38403
sS'required'
p38404
I01
sS'group_name'
p38405
NsasS'name'
p38406
S'/Postprocessors/NodalProxyMaxValue'
p38407
sa(dp38408
S'description'
p38409
g3
sS'subblocks'
p38410
NsS'parameters'
p38411
(lp38412
(dp38413
S'description'
p38414
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38415
sS'cpp_type'
p38416
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p38417
sS'default'
p38418
g3
sS'name'
p38419
S'block'
p38420
sS'required'
p38421
I00
sS'group_name'
p38422
Nsa(dp38423
S'description'
p38424
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38425
sS'cpp_type'
p38426
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p38427
sS'default'
p38428
g3
sS'name'
p38429
S'boundary'
p38430
sS'required'
p38431
I00
sS'group_name'
p38432
Nsa(dp38433
S'description'
p38434
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38435
sS'cpp_type'
p38436
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38437
sS'default'
p38438
g3
sS'name'
p38439
S'control_tags'
p38440
sS'required'
p38441
I00
sS'group_name'
p38442
S'Advanced'
p38443
sa(dp38444
S'description'
p38445
S'Set the enabled status of the MooseObject.\n'
p38446
sS'cpp_type'
p38447
S'bool'
p38448
sS'default'
p38449
S'1'
p38450
sS'name'
p38451
S'enable'
p38452
sS'required'
p38453
I00
sS'group_name'
p38454
S'Advanced'
p38455
sa(dp38456
S'name'
p38457
S'execute_on'
p38458
sS'cpp_type'
p38459
S'MultiMooseEnum'
p38460
sS'default'
p38461
S'TIMESTEP_END'
p38462
sS'description'
p38463
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38464
sS'required'
p38465
I00
sS'options'
p38466
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38467
sS'group_name'
p38468
Nsa(dp38469
S'description'
p38470
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38471
sS'cpp_type'
p38472
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38473
sS'default'
p38474
g3
sS'name'
p38475
S'outputs'
p38476
sS'required'
p38477
I00
sS'group_name'
p38478
S'Advanced'
p38479
sa(dp38480
S'description'
p38481
S'The seed for the master random number generator\n'
p38482
sS'cpp_type'
p38483
S'unsigned int'
p38484
sS'default'
p38485
S'0'
p38486
sS'name'
p38487
S'seed'
p38488
sS'required'
p38489
I00
sS'group_name'
p38490
S'Advanced'
p38491
sa(dp38492
S'description'
p38493
g3
sS'cpp_type'
p38494
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38495
sS'default'
p38496
S'NodalSum'
p38497
sS'name'
p38498
S'type'
p38499
sS'required'
p38500
I00
sS'group_name'
p38501
Nsa(dp38502
S'description'
p38503
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p38504
sS'cpp_type'
p38505
S'bool'
p38506
sS'default'
p38507
S'1'
p38508
sS'name'
p38509
S'unique_node_execute'
p38510
sS'required'
p38511
I00
sS'group_name'
p38512
Nsa(dp38513
S'description'
p38514
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38515
sS'cpp_type'
p38516
S'bool'
p38517
sS'default'
p38518
S'0'
p38519
sS'name'
p38520
S'use_displaced_mesh'
p38521
sS'required'
p38522
I00
sS'group_name'
p38523
S'Advanced'
p38524
sa(dp38525
S'description'
p38526
S'The name of the variable that this postprocessor operates on\n'
p38527
sS'cpp_type'
p38528
S'std::vector<VariableName>'
p38529
sS'default'
p38530
g3
sS'name'
p38531
S'variable'
p38532
sS'required'
p38533
I01
sS'group_name'
p38534
NsasS'name'
p38535
S'/Postprocessors/NodalSum'
p38536
sa(dp38537
S'description'
p38538
g3
sS'subblocks'
p38539
NsS'parameters'
p38540
(lp38541
(dp38542
S'description'
p38543
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38544
sS'cpp_type'
p38545
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38546
sS'default'
p38547
g3
sS'name'
p38548
S'control_tags'
p38549
sS'required'
p38550
I00
sS'group_name'
p38551
S'Advanced'
p38552
sa(dp38553
S'description'
p38554
S'Set the enabled status of the MooseObject.\n'
p38555
sS'cpp_type'
p38556
S'bool'
p38557
sS'default'
p38558
S'1'
p38559
sS'name'
p38560
S'enable'
p38561
sS'required'
p38562
I00
sS'group_name'
p38563
S'Advanced'
p38564
sa(dp38565
S'name'
p38566
S'execute_on'
p38567
sS'cpp_type'
p38568
S'MultiMooseEnum'
p38569
sS'default'
p38570
S'TIMESTEP_END'
p38571
sS'description'
p38572
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38573
sS'required'
p38574
I00
sS'options'
p38575
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38576
sS'group_name'
p38577
Nsa(dp38578
S'description'
p38579
S'The ID of the node where we monitor\n'
p38580
sS'cpp_type'
p38581
S'unsigned int'
p38582
sS'default'
p38583
g3
sS'name'
p38584
S'nodeid'
p38585
sS'required'
p38586
I01
sS'group_name'
p38587
Nsa(dp38588
S'description'
p38589
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38590
sS'cpp_type'
p38591
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38592
sS'default'
p38593
g3
sS'name'
p38594
S'outputs'
p38595
sS'required'
p38596
I00
sS'group_name'
p38597
S'Advanced'
p38598
sa(dp38599
S'description'
p38600
S'A scale factor to be applied to the variable\n'
p38601
sS'cpp_type'
p38602
S'double'
p38603
sS'default'
p38604
S'1'
p38605
sS'name'
p38606
S'scale_factor'
p38607
sS'required'
p38608
I00
sS'group_name'
p38609
Nsa(dp38610
S'description'
p38611
g3
sS'cpp_type'
p38612
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38613
sS'default'
p38614
S'NodalVariableValue'
p38615
sS'name'
p38616
S'type'
p38617
sS'required'
p38618
I00
sS'group_name'
p38619
Nsa(dp38620
S'description'
p38621
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38622
sS'cpp_type'
p38623
S'bool'
p38624
sS'default'
p38625
S'0'
p38626
sS'name'
p38627
S'use_displaced_mesh'
p38628
sS'required'
p38629
I00
sS'group_name'
p38630
S'Advanced'
p38631
sa(dp38632
S'description'
p38633
S'The variable to be monitored\n'
p38634
sS'cpp_type'
p38635
S'VariableName'
p38636
sS'default'
p38637
g3
sS'name'
p38638
S'variable'
p38639
sS'required'
p38640
I01
sS'group_name'
p38641
NsasS'name'
p38642
S'/Postprocessors/NodalVariableValue'
p38643
sa(dp38644
S'description'
p38645
g3
sS'subblocks'
p38646
NsS'parameters'
p38647
(lp38648
(dp38649
S'description'
p38650
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38651
sS'cpp_type'
p38652
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38653
sS'default'
p38654
g3
sS'name'
p38655
S'control_tags'
p38656
sS'required'
p38657
I00
sS'group_name'
p38658
S'Advanced'
p38659
sa(dp38660
S'description'
p38661
S'Set the enabled status of the MooseObject.\n'
p38662
sS'cpp_type'
p38663
S'bool'
p38664
sS'default'
p38665
S'1'
p38666
sS'name'
p38667
S'enable'
p38668
sS'required'
p38669
I00
sS'group_name'
p38670
S'Advanced'
p38671
sa(dp38672
S'name'
p38673
S'execute_on'
p38674
sS'cpp_type'
p38675
S'MultiMooseEnum'
p38676
sS'default'
p38677
S'TIMESTEP_END'
p38678
sS'description'
p38679
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38680
sS'required'
p38681
I00
sS'options'
p38682
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38683
sS'group_name'
p38684
Nsa(dp38685
S'description'
p38686
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38687
sS'cpp_type'
p38688
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38689
sS'default'
p38690
g3
sS'name'
p38691
S'outputs'
p38692
sS'required'
p38693
I00
sS'group_name'
p38694
S'Advanced'
p38695
sa(dp38696
S'name'
p38697
S'system'
p38698
sS'cpp_type'
p38699
S'MooseEnum'
p38700
sS'default'
p38701
S'ALL'
p38702
sS'description'
p38703
S'The system(s) to retrieve the number of DOFs from (NL, AUX, ALL). Default == ALL\n'
p38704
sS'required'
p38705
I00
sS'options'
p38706
S'NL AUX ALL'
p38707
sS'group_name'
p38708
Nsa(dp38709
S'description'
p38710
g3
sS'cpp_type'
p38711
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38712
sS'default'
p38713
S'NumDOFs'
p38714
sS'name'
p38715
S'type'
p38716
sS'required'
p38717
I00
sS'group_name'
p38718
Nsa(dp38719
S'description'
p38720
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38721
sS'cpp_type'
p38722
S'bool'
p38723
sS'default'
p38724
S'0'
p38725
sS'name'
p38726
S'use_displaced_mesh'
p38727
sS'required'
p38728
I00
sS'group_name'
p38729
S'Advanced'
p38730
sasS'name'
p38731
S'/Postprocessors/NumDOFs'
p38732
sa(dp38733
S'description'
p38734
g3
sS'subblocks'
p38735
NsS'parameters'
p38736
(lp38737
(dp38738
S'description'
p38739
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38740
sS'cpp_type'
p38741
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38742
sS'default'
p38743
g3
sS'name'
p38744
S'control_tags'
p38745
sS'required'
p38746
I00
sS'group_name'
p38747
S'Advanced'
p38748
sa(dp38749
S'name'
p38750
S'elem_filter'
p38751
sS'cpp_type'
p38752
S'MooseEnum'
p38753
sS'default'
p38754
S'active'
p38755
sS'description'
p38756
S'The type of elements to include in the count (active, total). Default == active\n'
p38757
sS'required'
p38758
I00
sS'options'
p38759
S'active total'
p38760
sS'group_name'
p38761
Nsa(dp38762
S'description'
p38763
S'Set the enabled status of the MooseObject.\n'
p38764
sS'cpp_type'
p38765
S'bool'
p38766
sS'default'
p38767
S'1'
p38768
sS'name'
p38769
S'enable'
p38770
sS'required'
p38771
I00
sS'group_name'
p38772
S'Advanced'
p38773
sa(dp38774
S'name'
p38775
S'execute_on'
p38776
sS'cpp_type'
p38777
S'MultiMooseEnum'
p38778
sS'default'
p38779
S'TIMESTEP_END'
p38780
sS'description'
p38781
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38782
sS'required'
p38783
I00
sS'options'
p38784
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38785
sS'group_name'
p38786
Nsa(dp38787
S'description'
p38788
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38789
sS'cpp_type'
p38790
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38791
sS'default'
p38792
g3
sS'name'
p38793
S'outputs'
p38794
sS'required'
p38795
I00
sS'group_name'
p38796
S'Advanced'
p38797
sa(dp38798
S'description'
p38799
g3
sS'cpp_type'
p38800
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38801
sS'default'
p38802
S'NumElems'
p38803
sS'name'
p38804
S'type'
p38805
sS'required'
p38806
I00
sS'group_name'
p38807
Nsa(dp38808
S'description'
p38809
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38810
sS'cpp_type'
p38811
S'bool'
p38812
sS'default'
p38813
S'0'
p38814
sS'name'
p38815
S'use_displaced_mesh'
p38816
sS'required'
p38817
I00
sS'group_name'
p38818
S'Advanced'
p38819
sasS'name'
p38820
S'/Postprocessors/NumElems'
p38821
sa(dp38822
S'description'
p38823
g3
sS'subblocks'
p38824
NsS'parameters'
p38825
(lp38826
(dp38827
S'description'
p38828
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38829
sS'cpp_type'
p38830
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38831
sS'default'
p38832
g3
sS'name'
p38833
S'control_tags'
p38834
sS'required'
p38835
I00
sS'group_name'
p38836
S'Advanced'
p38837
sa(dp38838
S'description'
p38839
S'Set the enabled status of the MooseObject.\n'
p38840
sS'cpp_type'
p38841
S'bool'
p38842
sS'default'
p38843
S'1'
p38844
sS'name'
p38845
S'enable'
p38846
sS'required'
p38847
I00
sS'group_name'
p38848
S'Advanced'
p38849
sa(dp38850
S'name'
p38851
S'execute_on'
p38852
sS'cpp_type'
p38853
S'MultiMooseEnum'
p38854
sS'default'
p38855
S'TIMESTEP_END'
p38856
sS'description'
p38857
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38858
sS'required'
p38859
I00
sS'options'
p38860
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38861
sS'group_name'
p38862
Nsa(dp38863
S'description'
p38864
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38865
sS'cpp_type'
p38866
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38867
sS'default'
p38868
g3
sS'name'
p38869
S'outputs'
p38870
sS'required'
p38871
I00
sS'group_name'
p38872
S'Advanced'
p38873
sa(dp38874
S'description'
p38875
g3
sS'cpp_type'
p38876
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38877
sS'default'
p38878
S'NumLinearIterations'
p38879
sS'name'
p38880
S'type'
p38881
sS'required'
p38882
I00
sS'group_name'
p38883
Nsa(dp38884
S'description'
p38885
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38886
sS'cpp_type'
p38887
S'bool'
p38888
sS'default'
p38889
S'0'
p38890
sS'name'
p38891
S'use_displaced_mesh'
p38892
sS'required'
p38893
I00
sS'group_name'
p38894
S'Advanced'
p38895
sasS'name'
p38896
S'/Postprocessors/NumLinearIterations'
p38897
sa(dp38898
S'description'
p38899
g3
sS'subblocks'
p38900
NsS'parameters'
p38901
(lp38902
(dp38903
S'description'
p38904
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38905
sS'cpp_type'
p38906
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38907
sS'default'
p38908
g3
sS'name'
p38909
S'control_tags'
p38910
sS'required'
p38911
I00
sS'group_name'
p38912
S'Advanced'
p38913
sa(dp38914
S'description'
p38915
S'Set the enabled status of the MooseObject.\n'
p38916
sS'cpp_type'
p38917
S'bool'
p38918
sS'default'
p38919
S'1'
p38920
sS'name'
p38921
S'enable'
p38922
sS'required'
p38923
I00
sS'group_name'
p38924
S'Advanced'
p38925
sa(dp38926
S'name'
p38927
S'execute_on'
p38928
sS'cpp_type'
p38929
S'MultiMooseEnum'
p38930
sS'default'
p38931
S'TIMESTEP_END'
p38932
sS'description'
p38933
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38934
sS'required'
p38935
I00
sS'options'
p38936
S'none initial linear nonlinear timestep_end timestep_begin custom'
p38937
sS'group_name'
p38938
Nsa(dp38939
S'description'
p38940
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38941
sS'cpp_type'
p38942
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38943
sS'default'
p38944
g3
sS'name'
p38945
S'outputs'
p38946
sS'required'
p38947
I00
sS'group_name'
p38948
S'Advanced'
p38949
sa(dp38950
S'description'
p38951
g3
sS'cpp_type'
p38952
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38953
sS'default'
p38954
S'NumNodes'
p38955
sS'name'
p38956
S'type'
p38957
sS'required'
p38958
I00
sS'group_name'
p38959
Nsa(dp38960
S'description'
p38961
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38962
sS'cpp_type'
p38963
S'bool'
p38964
sS'default'
p38965
S'0'
p38966
sS'name'
p38967
S'use_displaced_mesh'
p38968
sS'required'
p38969
I00
sS'group_name'
p38970
S'Advanced'
p38971
sasS'name'
p38972
S'/Postprocessors/NumNodes'
p38973
sa(dp38974
S'description'
p38975
g3
sS'subblocks'
p38976
NsS'parameters'
p38977
(lp38978
(dp38979
S'description'
p38980
S'When set to true, accumulates to count the total over all Picard iterations for each step\n'
p38981
sS'cpp_type'
p38982
S'bool'
p38983
sS'default'
p38984
S'0'
p38985
sS'name'
p38986
S'accumulate_over_step'
p38987
sS'required'
p38988
I00
sS'group_name'
p38989
Nsa(dp38990
S'description'
p38991
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p38992
sS'cpp_type'
p38993
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p38994
sS'default'
p38995
g3
sS'name'
p38996
S'control_tags'
p38997
sS'required'
p38998
I00
sS'group_name'
p38999
S'Advanced'
p39000
sa(dp39001
S'description'
p39002
S'Set the enabled status of the MooseObject.\n'
p39003
sS'cpp_type'
p39004
S'bool'
p39005
sS'default'
p39006
S'1'
p39007
sS'name'
p39008
S'enable'
p39009
sS'required'
p39010
I00
sS'group_name'
p39011
S'Advanced'
p39012
sa(dp39013
S'name'
p39014
S'execute_on'
p39015
sS'cpp_type'
p39016
S'MultiMooseEnum'
p39017
sS'default'
p39018
S'TIMESTEP_END'
p39019
sS'description'
p39020
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39021
sS'required'
p39022
I00
sS'options'
p39023
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39024
sS'group_name'
p39025
Nsa(dp39026
S'description'
p39027
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39028
sS'cpp_type'
p39029
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39030
sS'default'
p39031
g3
sS'name'
p39032
S'outputs'
p39033
sS'required'
p39034
I00
sS'group_name'
p39035
S'Advanced'
p39036
sa(dp39037
S'description'
p39038
g3
sS'cpp_type'
p39039
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39040
sS'default'
p39041
S'NumNonlinearIterations'
p39042
sS'name'
p39043
S'type'
p39044
sS'required'
p39045
I00
sS'group_name'
p39046
Nsa(dp39047
S'description'
p39048
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39049
sS'cpp_type'
p39050
S'bool'
p39051
sS'default'
p39052
S'0'
p39053
sS'name'
p39054
S'use_displaced_mesh'
p39055
sS'required'
p39056
I00
sS'group_name'
p39057
S'Advanced'
p39058
sasS'name'
p39059
S'/Postprocessors/NumNonlinearIterations'
p39060
sa(dp39061
S'description'
p39062
g3
sS'subblocks'
p39063
NsS'parameters'
p39064
(lp39065
(dp39066
S'description'
p39067
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39068
sS'cpp_type'
p39069
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39070
sS'default'
p39071
g3
sS'name'
p39072
S'control_tags'
p39073
sS'required'
p39074
I00
sS'group_name'
p39075
S'Advanced'
p39076
sa(dp39077
S'description'
p39078
S'Set the enabled status of the MooseObject.\n'
p39079
sS'cpp_type'
p39080
S'bool'
p39081
sS'default'
p39082
S'1'
p39083
sS'name'
p39084
S'enable'
p39085
sS'required'
p39086
I00
sS'group_name'
p39087
S'Advanced'
p39088
sa(dp39089
S'name'
p39090
S'execute_on'
p39091
sS'cpp_type'
p39092
S'MultiMooseEnum'
p39093
sS'default'
p39094
S'TIMESTEP_END'
p39095
sS'description'
p39096
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39097
sS'required'
p39098
I00
sS'options'
p39099
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39100
sS'group_name'
p39101
Nsa(dp39102
S'description'
p39103
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39104
sS'cpp_type'
p39105
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39106
sS'default'
p39107
g3
sS'name'
p39108
S'outputs'
p39109
sS'required'
p39110
I00
sS'group_name'
p39111
S'Advanced'
p39112
sa(dp39113
S'description'
p39114
g3
sS'cpp_type'
p39115
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39116
sS'default'
p39117
S'NumPicardIterations'
p39118
sS'name'
p39119
S'type'
p39120
sS'required'
p39121
I00
sS'group_name'
p39122
Nsa(dp39123
S'description'
p39124
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39125
sS'cpp_type'
p39126
S'bool'
p39127
sS'default'
p39128
S'0'
p39129
sS'name'
p39130
S'use_displaced_mesh'
p39131
sS'required'
p39132
I00
sS'group_name'
p39133
S'Advanced'
p39134
sasS'name'
p39135
S'/Postprocessors/NumPicardIterations'
p39136
sa(dp39137
S'description'
p39138
g3
sS'subblocks'
p39139
NsS'parameters'
p39140
(lp39141
(dp39142
S'description'
p39143
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39144
sS'cpp_type'
p39145
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39146
sS'default'
p39147
g3
sS'name'
p39148
S'control_tags'
p39149
sS'required'
p39150
I00
sS'group_name'
p39151
S'Advanced'
p39152
sa(dp39153
S'description'
p39154
S'Set the enabled status of the MooseObject.\n'
p39155
sS'cpp_type'
p39156
S'bool'
p39157
sS'default'
p39158
S'1'
p39159
sS'name'
p39160
S'enable'
p39161
sS'required'
p39162
I00
sS'group_name'
p39163
S'Advanced'
p39164
sa(dp39165
S'name'
p39166
S'execute_on'
p39167
sS'cpp_type'
p39168
S'MultiMooseEnum'
p39169
sS'default'
p39170
S'TIMESTEP_END'
p39171
sS'description'
p39172
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39173
sS'required'
p39174
I00
sS'options'
p39175
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39176
sS'group_name'
p39177
Nsa(dp39178
S'description'
p39179
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39180
sS'cpp_type'
p39181
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39182
sS'default'
p39183
g3
sS'name'
p39184
S'outputs'
p39185
sS'required'
p39186
I00
sS'group_name'
p39187
S'Advanced'
p39188
sa(dp39189
S'description'
p39190
g3
sS'cpp_type'
p39191
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39192
sS'default'
p39193
S'NumResidualEvaluations'
p39194
sS'name'
p39195
S'type'
p39196
sS'required'
p39197
I00
sS'group_name'
p39198
Nsa(dp39199
S'description'
p39200
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39201
sS'cpp_type'
p39202
S'bool'
p39203
sS'default'
p39204
S'0'
p39205
sS'name'
p39206
S'use_displaced_mesh'
p39207
sS'required'
p39208
I00
sS'group_name'
p39209
S'Advanced'
p39210
sasS'name'
p39211
S'/Postprocessors/NumResidualEvaluations'
p39212
sa(dp39213
S'description'
p39214
g3
sS'subblocks'
p39215
NsS'parameters'
p39216
(lp39217
(dp39218
S'description'
p39219
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39220
sS'cpp_type'
p39221
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39222
sS'default'
p39223
g3
sS'name'
p39224
S'control_tags'
p39225
sS'required'
p39226
I00
sS'group_name'
p39227
S'Advanced'
p39228
sa(dp39229
S'description'
p39230
S'Set the enabled status of the MooseObject.\n'
p39231
sS'cpp_type'
p39232
S'bool'
p39233
sS'default'
p39234
S'1'
p39235
sS'name'
p39236
S'enable'
p39237
sS'required'
p39238
I00
sS'group_name'
p39239
S'Advanced'
p39240
sa(dp39241
S'name'
p39242
S'execute_on'
p39243
sS'cpp_type'
p39244
S'MultiMooseEnum'
p39245
sS'default'
p39246
S'TIMESTEP_END'
p39247
sS'description'
p39248
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39249
sS'required'
p39250
I00
sS'options'
p39251
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39252
sS'group_name'
p39253
Nsa(dp39254
S'description'
p39255
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39256
sS'cpp_type'
p39257
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39258
sS'default'
p39259
g3
sS'name'
p39260
S'outputs'
p39261
sS'required'
p39262
I00
sS'group_name'
p39263
S'Advanced'
p39264
sa(dp39265
S'name'
p39266
S'system'
p39267
sS'cpp_type'
p39268
S'MooseEnum'
p39269
sS'default'
p39270
S'nonlinear'
p39271
sS'description'
p39272
S'The system for which you want to print the number of variables.\n'
p39273
sS'required'
p39274
I00
sS'options'
p39275
S'nonlinear auxiliary'
p39276
sS'group_name'
p39277
Nsa(dp39278
S'description'
p39279
g3
sS'cpp_type'
p39280
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39281
sS'default'
p39282
S'NumVars'
p39283
sS'name'
p39284
S'type'
p39285
sS'required'
p39286
I00
sS'group_name'
p39287
Nsa(dp39288
S'description'
p39289
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39290
sS'cpp_type'
p39291
S'bool'
p39292
sS'default'
p39293
S'0'
p39294
sS'name'
p39295
S'use_displaced_mesh'
p39296
sS'required'
p39297
I00
sS'group_name'
p39298
S'Advanced'
p39299
sasS'name'
p39300
S'/Postprocessors/NumVars'
p39301
sa(dp39302
S'description'
p39303
g3
sS'subblocks'
p39304
NsS'parameters'
p39305
(lp39306
(dp39307
S'description'
p39308
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39309
sS'cpp_type'
p39310
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39311
sS'default'
p39312
g3
sS'name'
p39313
S'control_tags'
p39314
sS'required'
p39315
I00
sS'group_name'
p39316
S'Advanced'
p39317
sa(dp39318
S'description'
p39319
S'Set the enabled status of the MooseObject.\n'
p39320
sS'cpp_type'
p39321
S'bool'
p39322
sS'default'
p39323
S'1'
p39324
sS'name'
p39325
S'enable'
p39326
sS'required'
p39327
I00
sS'group_name'
p39328
S'Advanced'
p39329
sa(dp39330
S'name'
p39331
S'execute_on'
p39332
sS'cpp_type'
p39333
S'MultiMooseEnum'
p39334
sS'default'
p39335
S'TIMESTEP_END'
p39336
sS'description'
p39337
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39338
sS'required'
p39339
I00
sS'options'
p39340
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39341
sS'group_name'
p39342
Nsa(dp39343
S'description'
p39344
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39345
sS'cpp_type'
p39346
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39347
sS'default'
p39348
g3
sS'name'
p39349
S'outputs'
p39350
sS'required'
p39351
I00
sS'group_name'
p39352
S'Advanced'
p39353
sa(dp39354
S'description'
p39355
S'The name of the postprocessor used for exit criterion\n'
p39356
sS'cpp_type'
p39357
S'PostprocessorName'
p39358
sS'default'
p39359
g3
sS'name'
p39360
S'postprocessor'
p39361
sS'required'
p39362
I01
sS'group_name'
p39363
Nsa(dp39364
S'description'
p39365
g3
sS'cpp_type'
p39366
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39367
sS'default'
p39368
S'PercentChangePostprocessor'
p39369
sS'name'
p39370
S'type'
p39371
sS'required'
p39372
I00
sS'group_name'
p39373
Nsa(dp39374
S'description'
p39375
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39376
sS'cpp_type'
p39377
S'bool'
p39378
sS'default'
p39379
S'0'
p39380
sS'name'
p39381
S'use_displaced_mesh'
p39382
sS'required'
p39383
I00
sS'group_name'
p39384
S'Advanced'
p39385
sasS'name'
p39386
S'/Postprocessors/PercentChangePostprocessor'
p39387
sa(dp39388
S'description'
p39389
g3
sS'subblocks'
p39390
NsS'parameters'
p39391
(lp39392
(dp39393
S'description'
p39394
S'The category or "Header" for the event\n'
p39395
sS'cpp_type'
p39396
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39397
sS'default'
p39398
S'Execution'
p39399
sS'name'
p39400
S'category'
p39401
sS'required'
p39402
I00
sS'group_name'
p39403
Nsa(dp39404
S'name'
p39405
S'column'
p39406
sS'cpp_type'
p39407
S'MooseEnum'
p39408
sS'default'
p39409
S'total_time_with_sub'
p39410
sS'description'
p39411
S'The column you want the value of (Default: total_time_with_sub).\n'
p39412
sS'required'
p39413
I00
sS'options'
p39414
S'n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub'
p39415
sS'group_name'
p39416
Nsa(dp39417
S'description'
p39418
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39419
sS'cpp_type'
p39420
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39421
sS'default'
p39422
g3
sS'name'
p39423
S'control_tags'
p39424
sS'required'
p39425
I00
sS'group_name'
p39426
S'Advanced'
p39427
sa(dp39428
S'description'
p39429
S'Set the enabled status of the MooseObject.\n'
p39430
sS'cpp_type'
p39431
S'bool'
p39432
sS'default'
p39433
S'1'
p39434
sS'name'
p39435
S'enable'
p39436
sS'required'
p39437
I00
sS'group_name'
p39438
S'Advanced'
p39439
sa(dp39440
S'description'
p39441
S'The name or "label" of the event ("ALIVE" and "ACTIVE" are also valid events, category and column are ignored for these cases).\n'
p39442
sS'cpp_type'
p39443
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39444
sS'default'
p39445
g3
sS'name'
p39446
S'event'
p39447
sS'required'
p39448
I01
sS'group_name'
p39449
Nsa(dp39450
S'name'
p39451
S'execute_on'
p39452
sS'cpp_type'
p39453
S'MultiMooseEnum'
p39454
sS'default'
p39455
S'TIMESTEP_END'
p39456
sS'description'
p39457
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39458
sS'required'
p39459
I00
sS'options'
p39460
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39461
sS'group_name'
p39462
Nsa(dp39463
S'description'
p39464
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39465
sS'cpp_type'
p39466
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39467
sS'default'
p39468
g3
sS'name'
p39469
S'outputs'
p39470
sS'required'
p39471
I00
sS'group_name'
p39472
S'Advanced'
p39473
sa(dp39474
S'description'
p39475
g3
sS'cpp_type'
p39476
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39477
sS'default'
p39478
S'PerformanceData'
p39479
sS'name'
p39480
S'type'
p39481
sS'required'
p39482
I00
sS'group_name'
p39483
Nsa(dp39484
S'description'
p39485
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39486
sS'cpp_type'
p39487
S'bool'
p39488
sS'default'
p39489
S'0'
p39490
sS'name'
p39491
S'use_displaced_mesh'
p39492
sS'required'
p39493
I00
sS'group_name'
p39494
S'Advanced'
p39495
sasS'name'
p39496
S'/Postprocessors/PerformanceData'
p39497
sa(dp39498
S'description'
p39499
g3
sS'subblocks'
p39500
NsS'parameters'
p39501
(lp39502
(dp39503
S'description'
p39504
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39505
sS'cpp_type'
p39506
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39507
sS'default'
p39508
g3
sS'name'
p39509
S'control_tags'
p39510
sS'required'
p39511
I00
sS'group_name'
p39512
S'Advanced'
p39513
sa(dp39514
S'description'
p39515
S'Set the enabled status of the MooseObject.\n'
p39516
sS'cpp_type'
p39517
S'bool'
p39518
sS'default'
p39519
S'1'
p39520
sS'name'
p39521
S'enable'
p39522
sS'required'
p39523
I00
sS'group_name'
p39524
S'Advanced'
p39525
sa(dp39526
S'name'
p39527
S'execute_on'
p39528
sS'cpp_type'
p39529
S'MultiMooseEnum'
p39530
sS'default'
p39531
S'TIMESTEP_END'
p39532
sS'description'
p39533
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39534
sS'required'
p39535
I00
sS'options'
p39536
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39537
sS'group_name'
p39538
Nsa(dp39539
S'description'
p39540
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39541
sS'cpp_type'
p39542
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39543
sS'default'
p39544
g3
sS'name'
p39545
S'outputs'
p39546
sS'required'
p39547
I00
sS'group_name'
p39548
S'Advanced'
p39549
sa(dp39550
S'description'
p39551
S'The physical point where the solution will be evaluated.\n'
p39552
sS'cpp_type'
p39553
S'libMesh::Point'
p39554
sS'default'
p39555
g3
sS'name'
p39556
S'point'
p39557
sS'required'
p39558
I01
sS'group_name'
p39559
Nsa(dp39560
S'description'
p39561
g3
sS'cpp_type'
p39562
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39563
sS'default'
p39564
S'PointValue'
p39565
sS'name'
p39566
S'type'
p39567
sS'required'
p39568
I00
sS'group_name'
p39569
Nsa(dp39570
S'description'
p39571
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39572
sS'cpp_type'
p39573
S'bool'
p39574
sS'default'
p39575
S'0'
p39576
sS'name'
p39577
S'use_displaced_mesh'
p39578
sS'required'
p39579
I00
sS'group_name'
p39580
S'Advanced'
p39581
sa(dp39582
S'description'
p39583
S'The name of the variable that this postprocessor operates on.\n'
p39584
sS'cpp_type'
p39585
S'VariableName'
p39586
sS'default'
p39587
g3
sS'name'
p39588
S'variable'
p39589
sS'required'
p39590
I01
sS'group_name'
p39591
NsasS'name'
p39592
S'/Postprocessors/PointValue'
p39593
sa(dp39594
S'description'
p39595
g3
sS'subblocks'
p39596
NsS'parameters'
p39597
(lp39598
(dp39599
S'description'
p39600
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39601
sS'cpp_type'
p39602
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39603
sS'default'
p39604
g3
sS'name'
p39605
S'control_tags'
p39606
sS'required'
p39607
I00
sS'group_name'
p39608
S'Advanced'
p39609
sa(dp39610
S'description'
p39611
S'The default value\n'
p39612
sS'cpp_type'
p39613
S'double'
p39614
sS'default'
p39615
g3
sS'name'
p39616
S'default'
p39617
sS'required'
p39618
I00
sS'group_name'
p39619
Nsa(dp39620
S'description'
p39621
S'Set the enabled status of the MooseObject.\n'
p39622
sS'cpp_type'
p39623
S'bool'
p39624
sS'default'
p39625
S'1'
p39626
sS'name'
p39627
S'enable'
p39628
sS'required'
p39629
I00
sS'group_name'
p39630
S'Advanced'
p39631
sa(dp39632
S'name'
p39633
S'execute_on'
p39634
sS'cpp_type'
p39635
S'MultiMooseEnum'
p39636
sS'default'
p39637
S'TIMESTEP_END'
p39638
sS'description'
p39639
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39640
sS'required'
p39641
I00
sS'options'
p39642
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39643
sS'group_name'
p39644
Nsa(dp39645
S'description'
p39646
S'Initialize the old postprocessor value with the default value\n'
p39647
sS'cpp_type'
p39648
S'bool'
p39649
sS'default'
p39650
S'1'
p39651
sS'name'
p39652
S'initialize_old'
p39653
sS'required'
p39654
I00
sS'group_name'
p39655
Nsa(dp39656
S'description'
p39657
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39658
sS'cpp_type'
p39659
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39660
sS'default'
p39661
g3
sS'name'
p39662
S'outputs'
p39663
sS'required'
p39664
I00
sS'group_name'
p39665
S'Advanced'
p39666
sa(dp39667
S'description'
p39668
g3
sS'cpp_type'
p39669
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39670
sS'default'
p39671
S'Receiver'
p39672
sS'name'
p39673
S'type'
p39674
sS'required'
p39675
I00
sS'group_name'
p39676
Nsa(dp39677
S'description'
p39678
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39679
sS'cpp_type'
p39680
S'bool'
p39681
sS'default'
p39682
S'0'
p39683
sS'name'
p39684
S'use_displaced_mesh'
p39685
sS'required'
p39686
I00
sS'group_name'
p39687
S'Advanced'
p39688
sasS'name'
p39689
S'/Postprocessors/Receiver'
p39690
sa(dp39691
S'description'
p39692
g3
sS'subblocks'
p39693
NsS'parameters'
p39694
(lp39695
(dp39696
S'description'
p39697
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39698
sS'cpp_type'
p39699
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39700
sS'default'
p39701
g3
sS'name'
p39702
S'control_tags'
p39703
sS'required'
p39704
I00
sS'group_name'
p39705
S'Advanced'
p39706
sa(dp39707
S'description'
p39708
S'Set the enabled status of the MooseObject.\n'
p39709
sS'cpp_type'
p39710
S'bool'
p39711
sS'default'
p39712
S'1'
p39713
sS'name'
p39714
S'enable'
p39715
sS'required'
p39716
I00
sS'group_name'
p39717
S'Advanced'
p39718
sa(dp39719
S'name'
p39720
S'execute_on'
p39721
sS'cpp_type'
p39722
S'MultiMooseEnum'
p39723
sS'default'
p39724
S'TIMESTEP_END'
p39725
sS'description'
p39726
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39727
sS'required'
p39728
I00
sS'options'
p39729
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39730
sS'group_name'
p39731
Nsa(dp39732
S'description'
p39733
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39734
sS'cpp_type'
p39735
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39736
sS'default'
p39737
g3
sS'name'
p39738
S'outputs'
p39739
sS'required'
p39740
I00
sS'group_name'
p39741
S'Advanced'
p39742
sa(dp39743
S'description'
p39744
g3
sS'cpp_type'
p39745
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39746
sS'default'
p39747
S'RelativeSolutionDifferenceNorm'
p39748
sS'name'
p39749
S'type'
p39750
sS'required'
p39751
I00
sS'group_name'
p39752
Nsa(dp39753
S'description'
p39754
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39755
sS'cpp_type'
p39756
S'bool'
p39757
sS'default'
p39758
S'0'
p39759
sS'name'
p39760
S'use_displaced_mesh'
p39761
sS'required'
p39762
I00
sS'group_name'
p39763
S'Advanced'
p39764
sasS'name'
p39765
S'/Postprocessors/RelativeSolutionDifferenceNorm'
p39766
sa(dp39767
S'description'
p39768
g3
sS'subblocks'
p39769
NsS'parameters'
p39770
(lp39771
(dp39772
S'description'
p39773
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39774
sS'cpp_type'
p39775
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39776
sS'default'
p39777
g3
sS'name'
p39778
S'control_tags'
p39779
sS'required'
p39780
I00
sS'group_name'
p39781
S'Advanced'
p39782
sa(dp39783
S'description'
p39784
S'Set the enabled status of the MooseObject.\n'
p39785
sS'cpp_type'
p39786
S'bool'
p39787
sS'default'
p39788
S'1'
p39789
sS'name'
p39790
S'enable'
p39791
sS'required'
p39792
I00
sS'group_name'
p39793
S'Advanced'
p39794
sa(dp39795
S'name'
p39796
S'execute_on'
p39797
sS'cpp_type'
p39798
S'MultiMooseEnum'
p39799
sS'default'
p39800
S'TIMESTEP_END'
p39801
sS'description'
p39802
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39803
sS'required'
p39804
I00
sS'options'
p39805
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39806
sS'group_name'
p39807
Nsa(dp39808
S'description'
p39809
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39810
sS'cpp_type'
p39811
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39812
sS'default'
p39813
g3
sS'name'
p39814
S'outputs'
p39815
sS'required'
p39816
I00
sS'group_name'
p39817
S'Advanced'
p39818
sa(dp39819
S'name'
p39820
S'residual_type'
p39821
sS'cpp_type'
p39822
S'MooseEnum'
p39823
sS'default'
p39824
S'FINAL'
p39825
sS'description'
p39826
S'Type of residual to be reported.  Choices are: FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET\n'
p39827
sS'required'
p39828
I00
sS'options'
p39829
S'FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET'
p39830
sS'group_name'
p39831
Nsa(dp39832
S'description'
p39833
g3
sS'cpp_type'
p39834
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39835
sS'default'
p39836
S'Residual'
p39837
sS'name'
p39838
S'type'
p39839
sS'required'
p39840
I00
sS'group_name'
p39841
Nsa(dp39842
S'description'
p39843
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39844
sS'cpp_type'
p39845
S'bool'
p39846
sS'default'
p39847
S'0'
p39848
sS'name'
p39849
S'use_displaced_mesh'
p39850
sS'required'
p39851
I00
sS'group_name'
p39852
S'Advanced'
p39853
sasS'name'
p39854
S'/Postprocessors/Residual'
p39855
sa(dp39856
S'description'
p39857
g3
sS'subblocks'
p39858
NsS'parameters'
p39859
(lp39860
(dp39861
S'description'
p39862
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39863
sS'cpp_type'
p39864
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39865
sS'default'
p39866
g3
sS'name'
p39867
S'control_tags'
p39868
sS'required'
p39869
I00
sS'group_name'
p39870
S'Advanced'
p39871
sa(dp39872
S'description'
p39873
S'Set the enabled status of the MooseObject.\n'
p39874
sS'cpp_type'
p39875
S'bool'
p39876
sS'default'
p39877
S'1'
p39878
sS'name'
p39879
S'enable'
p39880
sS'required'
p39881
I00
sS'group_name'
p39882
S'Advanced'
p39883
sa(dp39884
S'name'
p39885
S'execute_on'
p39886
sS'cpp_type'
p39887
S'MultiMooseEnum'
p39888
sS'default'
p39889
S'TIMESTEP_END'
p39890
sS'description'
p39891
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39892
sS'required'
p39893
I00
sS'options'
p39894
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39895
sS'group_name'
p39896
Nsa(dp39897
S'description'
p39898
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39899
sS'cpp_type'
p39900
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39901
sS'default'
p39902
g3
sS'name'
p39903
S'outputs'
p39904
sS'required'
p39905
I00
sS'group_name'
p39906
S'Advanced'
p39907
sa(dp39908
S'name'
p39909
S'time_type'
p39910
sS'cpp_type'
p39911
S'MooseEnum'
p39912
sS'default'
p39913
g3
sS'description'
p39914
S'Whether to output the total elapsed or just the active time\n'
p39915
sS'required'
p39916
I01
sS'options'
p39917
S'alive active'
p39918
sS'group_name'
p39919
Nsa(dp39920
S'description'
p39921
g3
sS'cpp_type'
p39922
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39923
sS'default'
p39924
S'RunTime'
p39925
sS'name'
p39926
S'type'
p39927
sS'required'
p39928
I00
sS'group_name'
p39929
Nsa(dp39930
S'description'
p39931
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39932
sS'cpp_type'
p39933
S'bool'
p39934
sS'default'
p39935
S'0'
p39936
sS'name'
p39937
S'use_displaced_mesh'
p39938
sS'required'
p39939
I00
sS'group_name'
p39940
S'Advanced'
p39941
sasS'name'
p39942
S'/Postprocessors/RunTime'
p39943
sa(dp39944
S'description'
p39945
g3
sS'subblocks'
p39946
NsS'parameters'
p39947
(lp39948
(dp39949
S'description'
p39950
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p39951
sS'cpp_type'
p39952
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p39953
sS'default'
p39954
g3
sS'name'
p39955
S'control_tags'
p39956
sS'required'
p39957
I00
sS'group_name'
p39958
S'Advanced'
p39959
sa(dp39960
S'description'
p39961
S'Set the enabled status of the MooseObject.\n'
p39962
sS'cpp_type'
p39963
S'bool'
p39964
sS'default'
p39965
S'1'
p39966
sS'name'
p39967
S'enable'
p39968
sS'required'
p39969
I00
sS'group_name'
p39970
S'Advanced'
p39971
sa(dp39972
S'name'
p39973
S'execute_on'
p39974
sS'cpp_type'
p39975
S'MultiMooseEnum'
p39976
sS'default'
p39977
S'TIMESTEP_END'
p39978
sS'description'
p39979
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39980
sS'required'
p39981
I00
sS'options'
p39982
S'none initial linear nonlinear timestep_end timestep_begin custom'
p39983
sS'group_name'
p39984
Nsa(dp39985
S'description'
p39986
S'The analytic solution to compare against\n'
p39987
sS'cpp_type'
p39988
S'FunctionName'
p39989
sS'default'
p39990
g3
sS'name'
p39991
S'function'
p39992
sS'required'
p39993
I01
sS'group_name'
p39994
Nsa(dp39995
S'description'
p39996
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39997
sS'cpp_type'
p39998
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39999
sS'default'
p40000
g3
sS'name'
p40001
S'outputs'
p40002
sS'required'
p40003
I00
sS'group_name'
p40004
S'Advanced'
p40005
sa(dp40006
S'description'
p40007
g3
sS'cpp_type'
p40008
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40009
sS'default'
p40010
S'ScalarL2Error'
p40011
sS'name'
p40012
S'type'
p40013
sS'required'
p40014
I00
sS'group_name'
p40015
Nsa(dp40016
S'description'
p40017
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40018
sS'cpp_type'
p40019
S'bool'
p40020
sS'default'
p40021
S'0'
p40022
sS'name'
p40023
S'use_displaced_mesh'
p40024
sS'required'
p40025
I00
sS'group_name'
p40026
S'Advanced'
p40027
sa(dp40028
S'description'
p40029
S'The name of the scalar variable\n'
p40030
sS'cpp_type'
p40031
S'VariableName'
p40032
sS'default'
p40033
g3
sS'name'
p40034
S'variable'
p40035
sS'required'
p40036
I01
sS'group_name'
p40037
NsasS'name'
p40038
S'/Postprocessors/ScalarL2Error'
p40039
sa(dp40040
S'description'
p40041
g3
sS'subblocks'
p40042
NsS'parameters'
p40043
(lp40044
(dp40045
S'description'
p40046
S'Component to output for this variable\n'
p40047
sS'cpp_type'
p40048
S'unsigned int'
p40049
sS'default'
p40050
S'0'
p40051
sS'name'
p40052
S'component'
p40053
sS'required'
p40054
I00
sS'group_name'
p40055
Nsa(dp40056
S'description'
p40057
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40058
sS'cpp_type'
p40059
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40060
sS'default'
p40061
g3
sS'name'
p40062
S'control_tags'
p40063
sS'required'
p40064
I00
sS'group_name'
p40065
S'Advanced'
p40066
sa(dp40067
S'description'
p40068
S'Set the enabled status of the MooseObject.\n'
p40069
sS'cpp_type'
p40070
S'bool'
p40071
sS'default'
p40072
S'1'
p40073
sS'name'
p40074
S'enable'
p40075
sS'required'
p40076
I00
sS'group_name'
p40077
S'Advanced'
p40078
sa(dp40079
S'name'
p40080
S'execute_on'
p40081
sS'cpp_type'
p40082
S'MultiMooseEnum'
p40083
sS'default'
p40084
S'TIMESTEP_END'
p40085
sS'description'
p40086
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40087
sS'required'
p40088
I00
sS'options'
p40089
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40090
sS'group_name'
p40091
Nsa(dp40092
S'description'
p40093
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40094
sS'cpp_type'
p40095
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40096
sS'default'
p40097
g3
sS'name'
p40098
S'outputs'
p40099
sS'required'
p40100
I00
sS'group_name'
p40101
S'Advanced'
p40102
sa(dp40103
S'description'
p40104
g3
sS'cpp_type'
p40105
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40106
sS'default'
p40107
S'ScalarVariable'
p40108
sS'name'
p40109
S'type'
p40110
sS'required'
p40111
I00
sS'group_name'
p40112
Nsa(dp40113
S'description'
p40114
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40115
sS'cpp_type'
p40116
S'bool'
p40117
sS'default'
p40118
S'0'
p40119
sS'name'
p40120
S'use_displaced_mesh'
p40121
sS'required'
p40122
I00
sS'group_name'
p40123
S'Advanced'
p40124
sa(dp40125
S'description'
p40126
S'Name of the variable\n'
p40127
sS'cpp_type'
p40128
S'VariableName'
p40129
sS'default'
p40130
g3
sS'name'
p40131
S'variable'
p40132
sS'required'
p40133
I01
sS'group_name'
p40134
NsasS'name'
p40135
S'/Postprocessors/ScalarVariable'
p40136
sa(dp40137
S'description'
p40138
g3
sS'subblocks'
p40139
NsS'parameters'
p40140
(lp40141
(dp40142
S'description'
p40143
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40144
sS'cpp_type'
p40145
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40146
sS'default'
p40147
g3
sS'name'
p40148
S'control_tags'
p40149
sS'required'
p40150
I00
sS'group_name'
p40151
S'Advanced'
p40152
sa(dp40153
S'description'
p40154
S'Set the enabled status of the MooseObject.\n'
p40155
sS'cpp_type'
p40156
S'bool'
p40157
sS'default'
p40158
S'1'
p40159
sS'name'
p40160
S'enable'
p40161
sS'required'
p40162
I00
sS'group_name'
p40163
S'Advanced'
p40164
sa(dp40165
S'name'
p40166
S'execute_on'
p40167
sS'cpp_type'
p40168
S'MultiMooseEnum'
p40169
sS'default'
p40170
S'TIMESTEP_END'
p40171
sS'description'
p40172
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40173
sS'required'
p40174
I00
sS'options'
p40175
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40176
sS'group_name'
p40177
Nsa(dp40178
S'description'
p40179
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40180
sS'cpp_type'
p40181
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40182
sS'default'
p40183
g3
sS'name'
p40184
S'outputs'
p40185
sS'required'
p40186
I00
sS'group_name'
p40187
S'Advanced'
p40188
sa(dp40189
S'description'
p40190
S'The scaling factor\n'
p40191
sS'cpp_type'
p40192
S'double'
p40193
sS'default'
p40194
S'1'
p40195
sS'name'
p40196
S'scaling_factor'
p40197
sS'required'
p40198
I00
sS'group_name'
p40199
Nsa(dp40200
S'description'
p40201
g3
sS'cpp_type'
p40202
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40203
sS'default'
p40204
S'ScalePostprocessor'
p40205
sS'name'
p40206
S'type'
p40207
sS'required'
p40208
I00
sS'group_name'
p40209
Nsa(dp40210
S'description'
p40211
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40212
sS'cpp_type'
p40213
S'bool'
p40214
sS'default'
p40215
S'0'
p40216
sS'name'
p40217
S'use_displaced_mesh'
p40218
sS'required'
p40219
I00
sS'group_name'
p40220
S'Advanced'
p40221
sa(dp40222
S'description'
p40223
S'The postprocessor to be scaled\n'
p40224
sS'cpp_type'
p40225
S'PostprocessorName'
p40226
sS'default'
p40227
g3
sS'name'
p40228
S'value'
p40229
sS'required'
p40230
I01
sS'group_name'
p40231
NsasS'name'
p40232
S'/Postprocessors/ScalePostprocessor'
p40233
sa(dp40234
S'description'
p40235
g3
sS'subblocks'
p40236
NsS'parameters'
p40237
(lp40238
(dp40239
S'description'
p40240
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40241
sS'cpp_type'
p40242
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p40243
sS'default'
p40244
g3
sS'name'
p40245
S'boundary'
p40246
sS'required'
p40247
I01
sS'group_name'
p40248
Nsa(dp40249
S'description'
p40250
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40251
sS'cpp_type'
p40252
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40253
sS'default'
p40254
g3
sS'name'
p40255
S'control_tags'
p40256
sS'required'
p40257
I00
sS'group_name'
p40258
S'Advanced'
p40259
sa(dp40260
S'description'
p40261
S'Set the enabled status of the MooseObject.\n'
p40262
sS'cpp_type'
p40263
S'bool'
p40264
sS'default'
p40265
S'1'
p40266
sS'name'
p40267
S'enable'
p40268
sS'required'
p40269
I00
sS'group_name'
p40270
S'Advanced'
p40271
sa(dp40272
S'name'
p40273
S'execute_on'
p40274
sS'cpp_type'
p40275
S'MultiMooseEnum'
p40276
sS'default'
p40277
S'TIMESTEP_END'
p40278
sS'description'
p40279
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40280
sS'required'
p40281
I00
sS'options'
p40282
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40283
sS'group_name'
p40284
Nsa(dp40285
S'description'
p40286
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40287
sS'cpp_type'
p40288
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40289
sS'default'
p40290
g3
sS'name'
p40291
S'outputs'
p40292
sS'required'
p40293
I00
sS'group_name'
p40294
S'Advanced'
p40295
sa(dp40296
S'description'
p40297
g3
sS'cpp_type'
p40298
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40299
sS'default'
p40300
S'SideAverageValue'
p40301
sS'name'
p40302
S'type'
p40303
sS'required'
p40304
I00
sS'group_name'
p40305
Nsa(dp40306
S'description'
p40307
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40308
sS'cpp_type'
p40309
S'bool'
p40310
sS'default'
p40311
S'0'
p40312
sS'name'
p40313
S'use_displaced_mesh'
p40314
sS'required'
p40315
I00
sS'group_name'
p40316
S'Advanced'
p40317
sa(dp40318
S'description'
p40319
S'The name of the variable that this boundary condition applies to\n'
p40320
sS'cpp_type'
p40321
S'std::vector<VariableName>'
p40322
sS'default'
p40323
g3
sS'name'
p40324
S'variable'
p40325
sS'required'
p40326
I01
sS'group_name'
p40327
NsasS'name'
p40328
S'/Postprocessors/SideAverageValue'
p40329
sa(dp40330
S'description'
p40331
g3
sS'subblocks'
p40332
NsS'parameters'
p40333
(lp40334
(dp40335
S'description'
p40336
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40337
sS'cpp_type'
p40338
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p40339
sS'default'
p40340
g3
sS'name'
p40341
S'boundary'
p40342
sS'required'
p40343
I01
sS'group_name'
p40344
Nsa(dp40345
S'description'
p40346
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40347
sS'cpp_type'
p40348
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40349
sS'default'
p40350
g3
sS'name'
p40351
S'control_tags'
p40352
sS'required'
p40353
I00
sS'group_name'
p40354
S'Advanced'
p40355
sa(dp40356
S'description'
p40357
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p40358
sS'cpp_type'
p40359
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40360
sS'default'
p40361
g3
sS'name'
p40362
S'diffusivity'
p40363
sS'required'
p40364
I01
sS'group_name'
p40365
Nsa(dp40366
S'description'
p40367
S'Set the enabled status of the MooseObject.\n'
p40368
sS'cpp_type'
p40369
S'bool'
p40370
sS'default'
p40371
S'1'
p40372
sS'name'
p40373
S'enable'
p40374
sS'required'
p40375
I00
sS'group_name'
p40376
S'Advanced'
p40377
sa(dp40378
S'name'
p40379
S'execute_on'
p40380
sS'cpp_type'
p40381
S'MultiMooseEnum'
p40382
sS'default'
p40383
S'TIMESTEP_END'
p40384
sS'description'
p40385
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40386
sS'required'
p40387
I00
sS'options'
p40388
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40389
sS'group_name'
p40390
Nsa(dp40391
S'description'
p40392
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40393
sS'cpp_type'
p40394
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40395
sS'default'
p40396
g3
sS'name'
p40397
S'outputs'
p40398
sS'required'
p40399
I00
sS'group_name'
p40400
S'Advanced'
p40401
sa(dp40402
S'description'
p40403
g3
sS'cpp_type'
p40404
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40405
sS'default'
p40406
S'SideFluxAverage'
p40407
sS'name'
p40408
S'type'
p40409
sS'required'
p40410
I00
sS'group_name'
p40411
Nsa(dp40412
S'description'
p40413
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40414
sS'cpp_type'
p40415
S'bool'
p40416
sS'default'
p40417
S'0'
p40418
sS'name'
p40419
S'use_displaced_mesh'
p40420
sS'required'
p40421
I00
sS'group_name'
p40422
S'Advanced'
p40423
sa(dp40424
S'description'
p40425
S'The name of the variable that this boundary condition applies to\n'
p40426
sS'cpp_type'
p40427
S'std::vector<VariableName>'
p40428
sS'default'
p40429
g3
sS'name'
p40430
S'variable'
p40431
sS'required'
p40432
I01
sS'group_name'
p40433
NsasS'name'
p40434
S'/Postprocessors/SideFluxAverage'
p40435
sa(dp40436
S'description'
p40437
g3
sS'subblocks'
p40438
NsS'parameters'
p40439
(lp40440
(dp40441
S'description'
p40442
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40443
sS'cpp_type'
p40444
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p40445
sS'default'
p40446
g3
sS'name'
p40447
S'boundary'
p40448
sS'required'
p40449
I01
sS'group_name'
p40450
Nsa(dp40451
S'description'
p40452
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40453
sS'cpp_type'
p40454
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40455
sS'default'
p40456
g3
sS'name'
p40457
S'control_tags'
p40458
sS'required'
p40459
I00
sS'group_name'
p40460
S'Advanced'
p40461
sa(dp40462
S'description'
p40463
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p40464
sS'cpp_type'
p40465
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40466
sS'default'
p40467
g3
sS'name'
p40468
S'diffusivity'
p40469
sS'required'
p40470
I01
sS'group_name'
p40471
Nsa(dp40472
S'description'
p40473
S'Set the enabled status of the MooseObject.\n'
p40474
sS'cpp_type'
p40475
S'bool'
p40476
sS'default'
p40477
S'1'
p40478
sS'name'
p40479
S'enable'
p40480
sS'required'
p40481
I00
sS'group_name'
p40482
S'Advanced'
p40483
sa(dp40484
S'name'
p40485
S'execute_on'
p40486
sS'cpp_type'
p40487
S'MultiMooseEnum'
p40488
sS'default'
p40489
S'TIMESTEP_END'
p40490
sS'description'
p40491
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40492
sS'required'
p40493
I00
sS'options'
p40494
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40495
sS'group_name'
p40496
Nsa(dp40497
S'description'
p40498
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40499
sS'cpp_type'
p40500
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40501
sS'default'
p40502
g3
sS'name'
p40503
S'outputs'
p40504
sS'required'
p40505
I00
sS'group_name'
p40506
S'Advanced'
p40507
sa(dp40508
S'description'
p40509
g3
sS'cpp_type'
p40510
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40511
sS'default'
p40512
S'SideFluxIntegral'
p40513
sS'name'
p40514
S'type'
p40515
sS'required'
p40516
I00
sS'group_name'
p40517
Nsa(dp40518
S'description'
p40519
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40520
sS'cpp_type'
p40521
S'bool'
p40522
sS'default'
p40523
S'0'
p40524
sS'name'
p40525
S'use_displaced_mesh'
p40526
sS'required'
p40527
I00
sS'group_name'
p40528
S'Advanced'
p40529
sa(dp40530
S'description'
p40531
S'The name of the variable that this boundary condition applies to\n'
p40532
sS'cpp_type'
p40533
S'std::vector<VariableName>'
p40534
sS'default'
p40535
g3
sS'name'
p40536
S'variable'
p40537
sS'required'
p40538
I01
sS'group_name'
p40539
NsasS'name'
p40540
S'/Postprocessors/SideFluxIntegral'
p40541
sa(dp40542
S'description'
p40543
g3
sS'subblocks'
p40544
NsS'parameters'
p40545
(lp40546
(dp40547
S'description'
p40548
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40549
sS'cpp_type'
p40550
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p40551
sS'default'
p40552
g3
sS'name'
p40553
S'boundary'
p40554
sS'required'
p40555
I01
sS'group_name'
p40556
Nsa(dp40557
S'description'
p40558
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40559
sS'cpp_type'
p40560
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40561
sS'default'
p40562
g3
sS'name'
p40563
S'control_tags'
p40564
sS'required'
p40565
I00
sS'group_name'
p40566
S'Advanced'
p40567
sa(dp40568
S'description'
p40569
S'Set the enabled status of the MooseObject.\n'
p40570
sS'cpp_type'
p40571
S'bool'
p40572
sS'default'
p40573
S'1'
p40574
sS'name'
p40575
S'enable'
p40576
sS'required'
p40577
I00
sS'group_name'
p40578
S'Advanced'
p40579
sa(dp40580
S'name'
p40581
S'execute_on'
p40582
sS'cpp_type'
p40583
S'MultiMooseEnum'
p40584
sS'default'
p40585
S'TIMESTEP_END'
p40586
sS'description'
p40587
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40588
sS'required'
p40589
I00
sS'options'
p40590
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40591
sS'group_name'
p40592
Nsa(dp40593
S'description'
p40594
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40595
sS'cpp_type'
p40596
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40597
sS'default'
p40598
g3
sS'name'
p40599
S'outputs'
p40600
sS'required'
p40601
I00
sS'group_name'
p40602
S'Advanced'
p40603
sa(dp40604
S'description'
p40605
g3
sS'cpp_type'
p40606
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40607
sS'default'
p40608
S'SideIntegralVariablePostprocessor'
p40609
sS'name'
p40610
S'type'
p40611
sS'required'
p40612
I00
sS'group_name'
p40613
Nsa(dp40614
S'description'
p40615
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40616
sS'cpp_type'
p40617
S'bool'
p40618
sS'default'
p40619
S'0'
p40620
sS'name'
p40621
S'use_displaced_mesh'
p40622
sS'required'
p40623
I00
sS'group_name'
p40624
S'Advanced'
p40625
sa(dp40626
S'description'
p40627
S'The name of the variable that this boundary condition applies to\n'
p40628
sS'cpp_type'
p40629
S'std::vector<VariableName>'
p40630
sS'default'
p40631
g3
sS'name'
p40632
S'variable'
p40633
sS'required'
p40634
I01
sS'group_name'
p40635
NsasS'name'
p40636
S'/Postprocessors/SideIntegralVariablePostprocessor'
p40637
sa(dp40638
S'description'
p40639
S'A postprocessor for reporting the extreme value of another postprocessor over time.\n'
p40640
sS'subblocks'
p40641
NsS'parameters'
p40642
(lp40643
(dp40644
S'description'
p40645
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40646
sS'cpp_type'
p40647
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40648
sS'default'
p40649
g3
sS'name'
p40650
S'control_tags'
p40651
sS'required'
p40652
I00
sS'group_name'
p40653
S'Advanced'
p40654
sa(dp40655
S'description'
p40656
S'Set the enabled status of the MooseObject.\n'
p40657
sS'cpp_type'
p40658
S'bool'
p40659
sS'default'
p40660
S'1'
p40661
sS'name'
p40662
S'enable'
p40663
sS'required'
p40664
I00
sS'group_name'
p40665
S'Advanced'
p40666
sa(dp40667
S'name'
p40668
S'execute_on'
p40669
sS'cpp_type'
p40670
S'MultiMooseEnum'
p40671
sS'default'
p40672
S'TIMESTEP_END'
p40673
sS'description'
p40674
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40675
sS'required'
p40676
I00
sS'options'
p40677
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40678
sS'group_name'
p40679
Nsa(dp40680
S'description'
p40681
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40682
sS'cpp_type'
p40683
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40684
sS'default'
p40685
g3
sS'name'
p40686
S'outputs'
p40687
sS'required'
p40688
I00
sS'group_name'
p40689
S'Advanced'
p40690
sa(dp40691
S'description'
p40692
S'The name of the postprocessor used for reporting time extreme values\n'
p40693
sS'cpp_type'
p40694
S'PostprocessorName'
p40695
sS'default'
p40696
g3
sS'name'
p40697
S'postprocessor'
p40698
sS'required'
p40699
I01
sS'group_name'
p40700
Nsa(dp40701
S'description'
p40702
g3
sS'cpp_type'
p40703
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40704
sS'default'
p40705
S'TimeExtremeValue'
p40706
sS'name'
p40707
S'type'
p40708
sS'required'
p40709
I00
sS'group_name'
p40710
Nsa(dp40711
S'description'
p40712
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40713
sS'cpp_type'
p40714
S'bool'
p40715
sS'default'
p40716
S'0'
p40717
sS'name'
p40718
S'use_displaced_mesh'
p40719
sS'required'
p40720
I00
sS'group_name'
p40721
S'Advanced'
p40722
sa(dp40723
S'name'
p40724
S'value_type'
p40725
sS'cpp_type'
p40726
S'MooseEnum'
p40727
sS'default'
p40728
S'max'
p40729
sS'description'
p40730
S"Type of extreme value to return.'max' returns the maximum value.'min' returns the minimum value.'abs_max' returns the maximum absolute value.'abs_min' returns the minimum absolute value.\n"
p40731
sS'required'
p40732
I00
sS'options'
p40733
S'max min abs_max abs_min'
p40734
sS'group_name'
p40735
NsasS'name'
p40736
S'/Postprocessors/TimeExtremeValue'
p40737
sa(dp40738
S'description'
p40739
g3
sS'subblocks'
p40740
NsS'parameters'
p40741
(lp40742
(dp40743
S'description'
p40744
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40745
sS'cpp_type'
p40746
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40747
sS'default'
p40748
g3
sS'name'
p40749
S'control_tags'
p40750
sS'required'
p40751
I00
sS'group_name'
p40752
S'Advanced'
p40753
sa(dp40754
S'description'
p40755
S'Set the enabled status of the MooseObject.\n'
p40756
sS'cpp_type'
p40757
S'bool'
p40758
sS'default'
p40759
S'1'
p40760
sS'name'
p40761
S'enable'
p40762
sS'required'
p40763
I00
sS'group_name'
p40764
S'Advanced'
p40765
sa(dp40766
S'name'
p40767
S'execute_on'
p40768
sS'cpp_type'
p40769
S'MultiMooseEnum'
p40770
sS'default'
p40771
S'TIMESTEP_END'
p40772
sS'description'
p40773
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40774
sS'required'
p40775
I00
sS'options'
p40776
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40777
sS'group_name'
p40778
Nsa(dp40779
S'description'
p40780
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40781
sS'cpp_type'
p40782
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40783
sS'default'
p40784
g3
sS'name'
p40785
S'outputs'
p40786
sS'required'
p40787
I00
sS'group_name'
p40788
S'Advanced'
p40789
sa(dp40790
S'description'
p40791
g3
sS'cpp_type'
p40792
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40793
sS'default'
p40794
S'TimestepSize'
p40795
sS'name'
p40796
S'type'
p40797
sS'required'
p40798
I00
sS'group_name'
p40799
Nsa(dp40800
S'description'
p40801
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40802
sS'cpp_type'
p40803
S'bool'
p40804
sS'default'
p40805
S'0'
p40806
sS'name'
p40807
S'use_displaced_mesh'
p40808
sS'required'
p40809
I00
sS'group_name'
p40810
S'Advanced'
p40811
sasS'name'
p40812
S'/Postprocessors/TimestepSize'
p40813
sa(dp40814
S'description'
p40815
g3
sS'subblocks'
p40816
NsS'parameters'
p40817
(lp40818
(dp40819
S'description'
p40820
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40821
sS'cpp_type'
p40822
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40823
sS'default'
p40824
g3
sS'name'
p40825
S'control_tags'
p40826
sS'required'
p40827
I00
sS'group_name'
p40828
S'Advanced'
p40829
sa(dp40830
S'description'
p40831
S'Set the enabled status of the MooseObject.\n'
p40832
sS'cpp_type'
p40833
S'bool'
p40834
sS'default'
p40835
S'1'
p40836
sS'name'
p40837
S'enable'
p40838
sS'required'
p40839
I00
sS'group_name'
p40840
S'Advanced'
p40841
sa(dp40842
S'name'
p40843
S'execute_on'
p40844
sS'cpp_type'
p40845
S'MultiMooseEnum'
p40846
sS'default'
p40847
S'TIMESTEP_END'
p40848
sS'description'
p40849
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40850
sS'required'
p40851
I00
sS'options'
p40852
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40853
sS'group_name'
p40854
Nsa(dp40855
S'description'
p40856
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40857
sS'cpp_type'
p40858
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40859
sS'default'
p40860
g3
sS'name'
p40861
S'outputs'
p40862
sS'required'
p40863
I00
sS'group_name'
p40864
S'Advanced'
p40865
sa(dp40866
S'description'
p40867
g3
sS'cpp_type'
p40868
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40869
sS'default'
p40870
S'TotalVariableValue'
p40871
sS'name'
p40872
S'type'
p40873
sS'required'
p40874
I00
sS'group_name'
p40875
Nsa(dp40876
S'description'
p40877
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40878
sS'cpp_type'
p40879
S'bool'
p40880
sS'default'
p40881
S'0'
p40882
sS'name'
p40883
S'use_displaced_mesh'
p40884
sS'required'
p40885
I00
sS'group_name'
p40886
S'Advanced'
p40887
sa(dp40888
S'description'
p40889
S'The name of the postprocessor\n'
p40890
sS'cpp_type'
p40891
S'PostprocessorName'
p40892
sS'default'
p40893
g3
sS'name'
p40894
S'value'
p40895
sS'required'
p40896
I00
sS'group_name'
p40897
NsasS'name'
p40898
S'/Postprocessors/TotalVariableValue'
p40899
sa(dp40900
S'description'
p40901
g3
sS'subblocks'
p40902
NsS'parameters'
p40903
(lp40904
(dp40905
S'description'
p40906
S'The list of block ids (SubdomainID) that this object will be applied\n'
p40907
sS'cpp_type'
p40908
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p40909
sS'default'
p40910
g3
sS'name'
p40911
S'block'
p40912
sS'required'
p40913
I00
sS'group_name'
p40914
Nsa(dp40915
S'description'
p40916
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p40917
sS'cpp_type'
p40918
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p40919
sS'default'
p40920
g3
sS'name'
p40921
S'control_tags'
p40922
sS'required'
p40923
I00
sS'group_name'
p40924
S'Advanced'
p40925
sa(dp40926
S'description'
p40927
S'Set the enabled status of the MooseObject.\n'
p40928
sS'cpp_type'
p40929
S'bool'
p40930
sS'default'
p40931
S'1'
p40932
sS'name'
p40933
S'enable'
p40934
sS'required'
p40935
I00
sS'group_name'
p40936
S'Advanced'
p40937
sa(dp40938
S'name'
p40939
S'execute_on'
p40940
sS'cpp_type'
p40941
S'MultiMooseEnum'
p40942
sS'default'
p40943
S'TIMESTEP_END'
p40944
sS'description'
p40945
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40946
sS'required'
p40947
I00
sS'options'
p40948
S'none initial linear nonlinear timestep_end timestep_begin custom'
p40949
sS'group_name'
p40950
Nsa(dp40951
S'description'
p40952
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40953
sS'cpp_type'
p40954
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40955
sS'default'
p40956
g3
sS'name'
p40957
S'outputs'
p40958
sS'required'
p40959
I00
sS'group_name'
p40960
S'Advanced'
p40961
sa(dp40962
S'description'
p40963
S'The name of the second variable in the inner product (variable, second_variable)\n'
p40964
sS'cpp_type'
p40965
S'std::vector<VariableName>'
p40966
sS'default'
p40967
g3
sS'name'
p40968
S'second_variable'
p40969
sS'required'
p40970
I01
sS'group_name'
p40971
Nsa(dp40972
S'description'
p40973
S'The seed for the master random number generator\n'
p40974
sS'cpp_type'
p40975
S'unsigned int'
p40976
sS'default'
p40977
S'0'
p40978
sS'name'
p40979
S'seed'
p40980
sS'required'
p40981
I00
sS'group_name'
p40982
S'Advanced'
p40983
sa(dp40984
S'description'
p40985
g3
sS'cpp_type'
p40986
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40987
sS'default'
p40988
S'VariableInnerProduct'
p40989
sS'name'
p40990
S'type'
p40991
sS'required'
p40992
I00
sS'group_name'
p40993
Nsa(dp40994
S'description'
p40995
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40996
sS'cpp_type'
p40997
S'bool'
p40998
sS'default'
p40999
S'0'
p41000
sS'name'
p41001
S'use_displaced_mesh'
p41002
sS'required'
p41003
I00
sS'group_name'
p41004
S'Advanced'
p41005
sa(dp41006
S'description'
p41007
S'The name of the variable that this object operates on\n'
p41008
sS'cpp_type'
p41009
S'std::vector<VariableName>'
p41010
sS'default'
p41011
g3
sS'name'
p41012
S'variable'
p41013
sS'required'
p41014
I01
sS'group_name'
p41015
NsasS'name'
p41016
S'/Postprocessors/VariableInnerProduct'
p41017
sa(dp41018
S'description'
p41019
g3
sS'subblocks'
p41020
NsS'parameters'
p41021
(lp41022
(dp41023
S'description'
p41024
S'The list of block ids (SubdomainID) that this object will be applied\n'
p41025
sS'cpp_type'
p41026
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p41027
sS'default'
p41028
g3
sS'name'
p41029
S'block'
p41030
sS'required'
p41031
I00
sS'group_name'
p41032
Nsa(dp41033
S'description'
p41034
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41035
sS'cpp_type'
p41036
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41037
sS'default'
p41038
g3
sS'name'
p41039
S'control_tags'
p41040
sS'required'
p41041
I00
sS'group_name'
p41042
S'Advanced'
p41043
sa(dp41044
S'description'
p41045
S'Set the enabled status of the MooseObject.\n'
p41046
sS'cpp_type'
p41047
S'bool'
p41048
sS'default'
p41049
S'1'
p41050
sS'name'
p41051
S'enable'
p41052
sS'required'
p41053
I00
sS'group_name'
p41054
S'Advanced'
p41055
sa(dp41056
S'name'
p41057
S'execute_on'
p41058
sS'cpp_type'
p41059
S'MultiMooseEnum'
p41060
sS'default'
p41061
S'TIMESTEP_END'
p41062
sS'description'
p41063
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p41064
sS'required'
p41065
I00
sS'options'
p41066
S'none initial linear nonlinear timestep_end timestep_begin custom'
p41067
sS'group_name'
p41068
Nsa(dp41069
S'description'
p41070
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p41071
sS'cpp_type'
p41072
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p41073
sS'default'
p41074
g3
sS'name'
p41075
S'outputs'
p41076
sS'required'
p41077
I00
sS'group_name'
p41078
S'Advanced'
p41079
sa(dp41080
S'description'
p41081
S'The seed for the master random number generator\n'
p41082
sS'cpp_type'
p41083
S'unsigned int'
p41084
sS'default'
p41085
S'0'
p41086
sS'name'
p41087
S'seed'
p41088
sS'required'
p41089
I00
sS'group_name'
p41090
S'Advanced'
p41091
sa(dp41092
S'description'
p41093
g3
sS'cpp_type'
p41094
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41095
sS'default'
p41096
S'VolumePostprocessor'
p41097
sS'name'
p41098
S'type'
p41099
sS'required'
p41100
I00
sS'group_name'
p41101
Nsa(dp41102
S'description'
p41103
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41104
sS'cpp_type'
p41105
S'bool'
p41106
sS'default'
p41107
S'0'
p41108
sS'name'
p41109
S'use_displaced_mesh'
p41110
sS'required'
p41111
I00
sS'group_name'
p41112
S'Advanced'
p41113
sasS'name'
p41114
S'/Postprocessors/VolumePostprocessor'
p41115
sasS'parameters'
p41116
NsS'name'
p41117
S'/Postprocessors'
p41118
sa(dp41119
S'description'
p41120
g3
sS'subblocks'
p41121
(lp41122
(dp41123
S'description'
p41124
g3
sS'subblocks'
p41125
(lp41126
(dp41127
S'description'
p41128
g3
sS'subblocks'
p41129
NsS'parameters'
p41130
(lp41131
(dp41132
S'name'
p41133
S'petsc_options'
p41134
sS'cpp_type'
p41135
S'MultiMooseEnum'
p41136
sS'default'
p41137
g3
sS'description'
p41138
S'Singleton PETSc options\n'
p41139
sS'required'
p41140
I00
sS'options'
p41141
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p41142
sS'group_name'
p41143
Nsa(dp41144
S'name'
p41145
S'petsc_options_iname'
p41146
sS'cpp_type'
p41147
S'MultiMooseEnum'
p41148
sS'default'
p41149
g3
sS'description'
p41150
S'Names of PETSc name/value pairs\n'
p41151
sS'required'
p41152
I00
sS'options'
p41153
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p41154
sS'group_name'
p41155
Nsa(dp41156
S'description'
p41157
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p41158
sS'cpp_type'
p41159
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41160
sS'default'
p41161
g3
sS'name'
p41162
S'petsc_options_value'
p41163
sS'required'
p41164
I00
sS'group_name'
p41165
Nsa(dp41166
S'description'
p41167
S'Classname of the split object\n'
p41168
sS'cpp_type'
p41169
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41170
sS'default'
p41171
S'Split'
p41172
sS'name'
p41173
S'type'
p41174
sS'required'
p41175
I01
sS'group_name'
p41176
Nsa(dp41177
S'description'
p41178
S'variables for this field\n'
p41179
sS'cpp_type'
p41180
S'std::__1::vector<NonlinearVariableName, std::__1::allocator<NonlinearVariableName> >'
p41181
sS'default'
p41182
g3
sS'name'
p41183
S'vars'
p41184
sS'required'
p41185
I00
sS'group_name'
p41186
NsasS'name'
p41187
S'/Preconditioning/*/*'
p41188
sa(dp41189
S'description'
p41190
g3
sS'subblocks'
p41191
NsS'parameters'
p41192
(lp41193
(dp41194
S'description'
p41195
S'Mesh blocks Split operates on (omitting this implies "all blocks"\n'
p41196
sS'cpp_type'
p41197
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p41198
sS'default'
p41199
g3
sS'name'
p41200
S'blocks'
p41201
sS'required'
p41202
I00
sS'group_name'
p41203
Nsa(dp41204
S'description'
p41205
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41206
sS'cpp_type'
p41207
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41208
sS'default'
p41209
g3
sS'name'
p41210
S'control_tags'
p41211
sS'required'
p41212
I00
sS'group_name'
p41213
S'Advanced'
p41214
sa(dp41215
S'description'
p41216
S'Set the enabled status of the MooseObject.\n'
p41217
sS'cpp_type'
p41218
S'bool'
p41219
sS'default'
p41220
S'1'
p41221
sS'name'
p41222
S'enable'
p41223
sS'required'
p41224
I00
sS'group_name'
p41225
S'Advanced'
p41226
sa(dp41227
S'name'
p41228
S'petsc_options'
p41229
sS'cpp_type'
p41230
S'MultiMooseEnum'
p41231
sS'default'
p41232
g3
sS'description'
p41233
S'PETSc flags for the FieldSplit solver\n'
p41234
sS'required'
p41235
I00
sS'options'
p41236
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p41237
sS'group_name'
p41238
Nsa(dp41239
S'description'
p41240
S'PETSc option names for the FieldSplit solver\n'
p41241
sS'cpp_type'
p41242
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41243
sS'default'
p41244
g3
sS'name'
p41245
S'petsc_options_iname'
p41246
sS'required'
p41247
I00
sS'group_name'
p41248
Nsa(dp41249
S'description'
p41250
S'PETSc option values for the FieldSplit solver\n'
p41251
sS'cpp_type'
p41252
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41253
sS'default'
p41254
g3
sS'name'
p41255
S'petsc_options_value'
p41256
sS'required'
p41257
I00
sS'group_name'
p41258
Nsa(dp41259
S'name'
p41260
S'schur_ainv'
p41261
sS'cpp_type'
p41262
S'MooseEnum'
p41263
sS'default'
p41264
S'diag'
p41265
sS'description'
p41266
S'Type of approximation to inv(A) used when forming S = D - C inv(A) B\n'
p41267
sS'required'
p41268
I00
sS'options'
p41269
S'diag lump'
p41270
sS'group_name'
p41271
Nsa(dp41272
S'name'
p41273
S'schur_pre'
p41274
sS'cpp_type'
p41275
S'MooseEnum'
p41276
sS'default'
p41277
S'S'
p41278
sS'description'
p41279
S'Type of Schur complement preconditioner matrix\n'
p41280
sS'required'
p41281
I00
sS'options'
p41282
S'S Sp A11'
p41283
sS'group_name'
p41284
Nsa(dp41285
S'name'
p41286
S'schur_type'
p41287
sS'cpp_type'
p41288
S'MooseEnum'
p41289
sS'default'
p41290
S'full'
p41291
sS'description'
p41292
S'Type of Schur complement\n'
p41293
sS'required'
p41294
I00
sS'options'
p41295
S'full upper lower'
p41296
sS'group_name'
p41297
Nsa(dp41298
S'description'
p41299
S'Sidesets Split operates on (omitting this implies "no sidesets"\n'
p41300
sS'cpp_type'
p41301
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p41302
sS'default'
p41303
g3
sS'name'
p41304
S'sides'
p41305
sS'required'
p41306
I00
sS'group_name'
p41307
Nsa(dp41308
S'description'
p41309
S'The names of the splits (subsystems) in the decomposition of this split\n'
p41310
sS'cpp_type'
p41311
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41312
sS'default'
p41313
g3
sS'name'
p41314
S'splitting'
p41315
sS'required'
p41316
I00
sS'group_name'
p41317
Nsa(dp41318
S'name'
p41319
S'splitting_type'
p41320
sS'cpp_type'
p41321
S'MooseEnum'
p41322
sS'default'
p41323
S'additive'
p41324
sS'description'
p41325
S'Split decomposition type\n'
p41326
sS'required'
p41327
I00
sS'options'
p41328
S'additive multiplicative symmetric_multiplicative schur'
p41329
sS'group_name'
p41330
Nsa(dp41331
S'description'
p41332
g3
sS'cpp_type'
p41333
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41334
sS'default'
p41335
S'Split'
p41336
sS'name'
p41337
S'type'
p41338
sS'required'
p41339
I00
sS'group_name'
p41340
Nsa(dp41341
S'description'
p41342
S'Sidesets Split excludes (omitting this implies "do not exclude any sidesets"\n'
p41343
sS'cpp_type'
p41344
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p41345
sS'default'
p41346
g3
sS'name'
p41347
S'unsides'
p41348
sS'required'
p41349
I00
sS'group_name'
p41350
Nsa(dp41351
S'description'
p41352
S'Variables Split operates on (omitting this implies "all variables"\n'
p41353
sS'cpp_type'
p41354
S'std::__1::vector<NonlinearVariableName, std::__1::allocator<NonlinearVariableName> >'
p41355
sS'default'
p41356
g3
sS'name'
p41357
S'vars'
p41358
sS'required'
p41359
I00
sS'group_name'
p41360
NsasS'name'
p41361
S'/Preconditioning/*/Split'
p41362
sasS'parameters'
p41363
(lp41364
(dp41365
S'description'
p41366
S'A string representing the Moose Object that will be built by this Action\n'
p41367
sS'cpp_type'
p41368
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41369
sS'default'
p41370
g3
sS'name'
p41371
S'type'
p41372
sS'required'
p41373
I01
sS'group_name'
p41374
NsasS'name'
p41375
S'/Preconditioning/*'
p41376
sa(dp41377
S'description'
p41378
g3
sS'subblocks'
p41379
NsS'parameters'
p41380
(lp41381
(dp41382
S'description'
p41383
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41384
sS'cpp_type'
p41385
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41386
sS'default'
p41387
g3
sS'name'
p41388
S'control_tags'
p41389
sS'required'
p41390
I00
sS'group_name'
p41391
S'Advanced'
p41392
sa(dp41393
S'description'
p41394
S'Set the enabled status of the MooseObject.\n'
p41395
sS'cpp_type'
p41396
S'bool'
p41397
sS'default'
p41398
S'1'
p41399
sS'name'
p41400
S'enable'
p41401
sS'required'
p41402
I00
sS'group_name'
p41403
S'Advanced'
p41404
sa(dp41405
S'description'
p41406
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p41407
sS'cpp_type'
p41408
S'bool'
p41409
sS'default'
p41410
S'0'
p41411
sS'name'
p41412
S'full'
p41413
sS'required'
p41414
I00
sS'group_name'
p41415
Nsa(dp41416
S'description'
p41417
S'Set to true if you want to add entries into the matrix for degrees of freedom that might be coupled by inspection of the geometric search objects.\n'
p41418
sS'cpp_type'
p41419
S'bool'
p41420
sS'default'
p41421
S'0'
p41422
sS'name'
p41423
S'implicit_geometric_coupling'
p41424
sS'required'
p41425
I00
sS'group_name'
p41426
Nsa(dp41427
S'name'
p41428
S'line_search'
p41429
sS'cpp_type'
p41430
S'MooseEnum'
p41431
sS'default'
p41432
S'default'
p41433
sS'description'
p41434
S'Specifies the line search type (Note: none = basic)\n'
p41435
sS'required'
p41436
I00
sS'options'
p41437
S'default shell none basic l2 bt cp'
p41438
sS'group_name'
p41439
Nsa(dp41440
S'description'
p41441
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p41442
sS'cpp_type'
p41443
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41444
sS'default'
p41445
g3
sS'name'
p41446
S'off_diag_column'
p41447
sS'required'
p41448
I00
sS'group_name'
p41449
Nsa(dp41450
S'description'
p41451
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p41452
sS'cpp_type'
p41453
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41454
sS'default'
p41455
g3
sS'name'
p41456
S'off_diag_row'
p41457
sS'required'
p41458
I00
sS'group_name'
p41459
Nsa(dp41460
S'name'
p41461
S'pc_side'
p41462
sS'cpp_type'
p41463
S'MooseEnum'
p41464
sS'default'
p41465
S'right'
p41466
sS'description'
p41467
S'Preconditioning side\n'
p41468
sS'required'
p41469
I00
sS'options'
p41470
S'left right symmetric'
p41471
sS'group_name'
p41472
Nsa(dp41473
S'name'
p41474
S'petsc_options'
p41475
sS'cpp_type'
p41476
S'MultiMooseEnum'
p41477
sS'default'
p41478
g3
sS'description'
p41479
S'Singleton PETSc options\n'
p41480
sS'required'
p41481
I00
sS'options'
p41482
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p41483
sS'group_name'
p41484
Nsa(dp41485
S'name'
p41486
S'petsc_options_iname'
p41487
sS'cpp_type'
p41488
S'MultiMooseEnum'
p41489
sS'default'
p41490
g3
sS'description'
p41491
S'Names of PETSc name/value pairs\n'
p41492
sS'required'
p41493
I00
sS'options'
p41494
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p41495
sS'group_name'
p41496
Nsa(dp41497
S'description'
p41498
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p41499
sS'cpp_type'
p41500
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41501
sS'default'
p41502
g3
sS'name'
p41503
S'petsc_options_value'
p41504
sS'required'
p41505
I00
sS'group_name'
p41506
Nsa(dp41507
S'name'
p41508
S'solve_type'
p41509
sS'cpp_type'
p41510
S'MooseEnum'
p41511
sS'default'
p41512
g3
sS'description'
p41513
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p41514
sS'required'
p41515
I00
sS'options'
p41516
S'PJFNK JFNK NEWTON FD LINEAR'
p41517
sS'group_name'
p41518
Nsa(dp41519
S'description'
p41520
g3
sS'cpp_type'
p41521
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41522
sS'default'
p41523
S'FDP'
p41524
sS'name'
p41525
S'type'
p41526
sS'required'
p41527
I00
sS'group_name'
p41528
NsasS'name'
p41529
S'/Preconditioning/FDP'
p41530
sa(dp41531
S'description'
p41532
g3
sS'subblocks'
p41533
NsS'parameters'
p41534
(lp41535
(dp41536
S'description'
p41537
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41538
sS'cpp_type'
p41539
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41540
sS'default'
p41541
g3
sS'name'
p41542
S'control_tags'
p41543
sS'required'
p41544
I00
sS'group_name'
p41545
S'Advanced'
p41546
sa(dp41547
S'description'
p41548
S'Set the enabled status of the MooseObject.\n'
p41549
sS'cpp_type'
p41550
S'bool'
p41551
sS'default'
p41552
S'1'
p41553
sS'name'
p41554
S'enable'
p41555
sS'required'
p41556
I00
sS'group_name'
p41557
S'Advanced'
p41558
sa(dp41559
S'description'
p41560
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p41561
sS'cpp_type'
p41562
S'bool'
p41563
sS'default'
p41564
S'1'
p41565
sS'name'
p41566
S'full'
p41567
sS'required'
p41568
I00
sS'group_name'
p41569
Nsa(dp41570
S'name'
p41571
S'line_search'
p41572
sS'cpp_type'
p41573
S'MooseEnum'
p41574
sS'default'
p41575
S'default'
p41576
sS'description'
p41577
S'Specifies the line search type (Note: none = basic)\n'
p41578
sS'required'
p41579
I00
sS'options'
p41580
S'default shell none basic l2 bt cp'
p41581
sS'group_name'
p41582
Nsa(dp41583
S'description'
p41584
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p41585
sS'cpp_type'
p41586
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41587
sS'default'
p41588
g3
sS'name'
p41589
S'off_diag_column'
p41590
sS'required'
p41591
I00
sS'group_name'
p41592
Nsa(dp41593
S'description'
p41594
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p41595
sS'cpp_type'
p41596
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41597
sS'default'
p41598
g3
sS'name'
p41599
S'off_diag_row'
p41600
sS'required'
p41601
I00
sS'group_name'
p41602
Nsa(dp41603
S'name'
p41604
S'pc_side'
p41605
sS'cpp_type'
p41606
S'MooseEnum'
p41607
sS'default'
p41608
S'right'
p41609
sS'description'
p41610
S'Preconditioning side\n'
p41611
sS'required'
p41612
I00
sS'options'
p41613
S'left right symmetric'
p41614
sS'group_name'
p41615
Nsa(dp41616
S'name'
p41617
S'petsc_options'
p41618
sS'cpp_type'
p41619
S'MultiMooseEnum'
p41620
sS'default'
p41621
g3
sS'description'
p41622
S'Singleton PETSc options\n'
p41623
sS'required'
p41624
I00
sS'options'
p41625
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p41626
sS'group_name'
p41627
Nsa(dp41628
S'name'
p41629
S'petsc_options_iname'
p41630
sS'cpp_type'
p41631
S'MultiMooseEnum'
p41632
sS'default'
p41633
g3
sS'description'
p41634
S'Names of PETSc name/value pairs\n'
p41635
sS'required'
p41636
I00
sS'options'
p41637
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p41638
sS'group_name'
p41639
Nsa(dp41640
S'description'
p41641
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p41642
sS'cpp_type'
p41643
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41644
sS'default'
p41645
g3
sS'name'
p41646
S'petsc_options_value'
p41647
sS'required'
p41648
I00
sS'group_name'
p41649
Nsa(dp41650
S'name'
p41651
S'solve_type'
p41652
sS'cpp_type'
p41653
S'MooseEnum'
p41654
sS'default'
p41655
g3
sS'description'
p41656
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p41657
sS'required'
p41658
I00
sS'options'
p41659
S'PJFNK JFNK NEWTON FD LINEAR'
p41660
sS'group_name'
p41661
Nsa(dp41662
S'description'
p41663
S'entrance to splits, the top split will specify how splits will go.\n'
p41664
sS'cpp_type'
p41665
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41666
sS'default'
p41667
g3
sS'name'
p41668
S'topsplit'
p41669
sS'required'
p41670
I01
sS'group_name'
p41671
Nsa(dp41672
S'description'
p41673
g3
sS'cpp_type'
p41674
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41675
sS'default'
p41676
S'FSP'
p41677
sS'name'
p41678
S'type'
p41679
sS'required'
p41680
I00
sS'group_name'
p41681
NsasS'name'
p41682
S'/Preconditioning/FSP'
p41683
sa(dp41684
S'description'
p41685
g3
sS'subblocks'
p41686
NsS'parameters'
p41687
(lp41688
(dp41689
S'description'
p41690
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41691
sS'cpp_type'
p41692
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41693
sS'default'
p41694
g3
sS'name'
p41695
S'control_tags'
p41696
sS'required'
p41697
I00
sS'group_name'
p41698
S'Advanced'
p41699
sa(dp41700
S'description'
p41701
S'Set the enabled status of the MooseObject.\n'
p41702
sS'cpp_type'
p41703
S'bool'
p41704
sS'default'
p41705
S'1'
p41706
sS'name'
p41707
S'enable'
p41708
sS'required'
p41709
I00
sS'group_name'
p41710
S'Advanced'
p41711
sa(dp41712
S'name'
p41713
S'line_search'
p41714
sS'cpp_type'
p41715
S'MooseEnum'
p41716
sS'default'
p41717
S'default'
p41718
sS'description'
p41719
S'Specifies the line search type (Note: none = basic)\n'
p41720
sS'required'
p41721
I00
sS'options'
p41722
S'default shell none basic l2 bt cp'
p41723
sS'group_name'
p41724
Nsa(dp41725
S'description'
p41726
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p41727
sS'cpp_type'
p41728
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41729
sS'default'
p41730
g3
sS'name'
p41731
S'off_diag_column'
p41732
sS'required'
p41733
I00
sS'group_name'
p41734
Nsa(dp41735
S'description'
p41736
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p41737
sS'cpp_type'
p41738
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41739
sS'default'
p41740
g3
sS'name'
p41741
S'off_diag_row'
p41742
sS'required'
p41743
I00
sS'group_name'
p41744
Nsa(dp41745
S'name'
p41746
S'pc_side'
p41747
sS'cpp_type'
p41748
S'MooseEnum'
p41749
sS'default'
p41750
S'right'
p41751
sS'description'
p41752
S'Preconditioning side\n'
p41753
sS'required'
p41754
I00
sS'options'
p41755
S'left right symmetric'
p41756
sS'group_name'
p41757
Nsa(dp41758
S'name'
p41759
S'petsc_options'
p41760
sS'cpp_type'
p41761
S'MultiMooseEnum'
p41762
sS'default'
p41763
g3
sS'description'
p41764
S'Singleton PETSc options\n'
p41765
sS'required'
p41766
I00
sS'options'
p41767
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p41768
sS'group_name'
p41769
Nsa(dp41770
S'name'
p41771
S'petsc_options_iname'
p41772
sS'cpp_type'
p41773
S'MultiMooseEnum'
p41774
sS'default'
p41775
g3
sS'description'
p41776
S'Names of PETSc name/value pairs\n'
p41777
sS'required'
p41778
I00
sS'options'
p41779
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p41780
sS'group_name'
p41781
Nsa(dp41782
S'description'
p41783
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p41784
sS'cpp_type'
p41785
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41786
sS'default'
p41787
g3
sS'name'
p41788
S'petsc_options_value'
p41789
sS'required'
p41790
I00
sS'group_name'
p41791
Nsa(dp41792
S'description'
p41793
S'TODO: docstring\n'
p41794
sS'cpp_type'
p41795
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41796
sS'default'
p41797
g3
sS'name'
p41798
S'preconditioner'
p41799
sS'required'
p41800
I01
sS'group_name'
p41801
Nsa(dp41802
S'description'
p41803
S"The order the block rows will be solved in.  Put the name of variables here to stand for solving that variable's block row.  A variable may appear more than once (to create cylces if you like).\n"
p41804
sS'cpp_type'
p41805
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41806
sS'default'
p41807
g3
sS'name'
p41808
S'solve_order'
p41809
sS'required'
p41810
I01
sS'group_name'
p41811
Nsa(dp41812
S'name'
p41813
S'solve_type'
p41814
sS'cpp_type'
p41815
S'MooseEnum'
p41816
sS'default'
p41817
g3
sS'description'
p41818
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p41819
sS'required'
p41820
I00
sS'options'
p41821
S'PJFNK JFNK NEWTON FD LINEAR'
p41822
sS'group_name'
p41823
Nsa(dp41824
S'description'
p41825
g3
sS'cpp_type'
p41826
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41827
sS'default'
p41828
S'PBP'
p41829
sS'name'
p41830
S'type'
p41831
sS'required'
p41832
I00
sS'group_name'
p41833
NsasS'name'
p41834
S'/Preconditioning/PBP'
p41835
sa(dp41836
S'description'
p41837
g3
sS'subblocks'
p41838
NsS'parameters'
p41839
(lp41840
(dp41841
S'description'
p41842
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p41843
sS'cpp_type'
p41844
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41845
sS'default'
p41846
g3
sS'name'
p41847
S'control_tags'
p41848
sS'required'
p41849
I00
sS'group_name'
p41850
S'Advanced'
p41851
sa(dp41852
S'description'
p41853
S'List multiple space separated groups of comma separated variables. Off-diagonal jacobians will be generated for all pairs within a group.\n'
p41854
sS'cpp_type'
p41855
S'std::__1::vector<NonlinearVariableName, std::__1::allocator<NonlinearVariableName> >'
p41856
sS'default'
p41857
g3
sS'name'
p41858
S'coupled_groups'
p41859
sS'required'
p41860
I00
sS'group_name'
p41861
Nsa(dp41862
S'description'
p41863
S'Set the enabled status of the MooseObject.\n'
p41864
sS'cpp_type'
p41865
S'bool'
p41866
sS'default'
p41867
S'1'
p41868
sS'name'
p41869
S'enable'
p41870
sS'required'
p41871
I00
sS'group_name'
p41872
S'Advanced'
p41873
sa(dp41874
S'description'
p41875
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p41876
sS'cpp_type'
p41877
S'bool'
p41878
sS'default'
p41879
S'0'
p41880
sS'name'
p41881
S'full'
p41882
sS'required'
p41883
I00
sS'group_name'
p41884
Nsa(dp41885
S'name'
p41886
S'line_search'
p41887
sS'cpp_type'
p41888
S'MooseEnum'
p41889
sS'default'
p41890
S'default'
p41891
sS'description'
p41892
S'Specifies the line search type (Note: none = basic)\n'
p41893
sS'required'
p41894
I00
sS'options'
p41895
S'default shell none basic l2 bt cp'
p41896
sS'group_name'
p41897
Nsa(dp41898
S'description'
p41899
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p41900
sS'cpp_type'
p41901
S'std::__1::vector<NonlinearVariableName, std::__1::allocator<NonlinearVariableName> >'
p41902
sS'default'
p41903
g3
sS'name'
p41904
S'off_diag_column'
p41905
sS'required'
p41906
I00
sS'group_name'
p41907
Nsa(dp41908
S'description'
p41909
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p41910
sS'cpp_type'
p41911
S'std::__1::vector<NonlinearVariableName, std::__1::allocator<NonlinearVariableName> >'
p41912
sS'default'
p41913
g3
sS'name'
p41914
S'off_diag_row'
p41915
sS'required'
p41916
I00
sS'group_name'
p41917
Nsa(dp41918
S'name'
p41919
S'pc_side'
p41920
sS'cpp_type'
p41921
S'MooseEnum'
p41922
sS'default'
p41923
S'right'
p41924
sS'description'
p41925
S'Preconditioning side\n'
p41926
sS'required'
p41927
I00
sS'options'
p41928
S'left right symmetric'
p41929
sS'group_name'
p41930
Nsa(dp41931
S'name'
p41932
S'petsc_options'
p41933
sS'cpp_type'
p41934
S'MultiMooseEnum'
p41935
sS'default'
p41936
g3
sS'description'
p41937
S'Singleton PETSc options\n'
p41938
sS'required'
p41939
I00
sS'options'
p41940
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p41941
sS'group_name'
p41942
Nsa(dp41943
S'name'
p41944
S'petsc_options_iname'
p41945
sS'cpp_type'
p41946
S'MultiMooseEnum'
p41947
sS'default'
p41948
g3
sS'description'
p41949
S'Names of PETSc name/value pairs\n'
p41950
sS'required'
p41951
I00
sS'options'
p41952
S'-ksp_atol -ksp_gmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p41953
sS'group_name'
p41954
Nsa(dp41955
S'description'
p41956
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p41957
sS'cpp_type'
p41958
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p41959
sS'default'
p41960
g3
sS'name'
p41961
S'petsc_options_value'
p41962
sS'required'
p41963
I00
sS'group_name'
p41964
Nsa(dp41965
S'name'
p41966
S'solve_type'
p41967
sS'cpp_type'
p41968
S'MooseEnum'
p41969
sS'default'
p41970
g3
sS'description'
p41971
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p41972
sS'required'
p41973
I00
sS'options'
p41974
S'PJFNK JFNK NEWTON FD LINEAR'
p41975
sS'group_name'
p41976
Nsa(dp41977
S'description'
p41978
g3
sS'cpp_type'
p41979
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41980
sS'default'
p41981
S'SMP'
p41982
sS'name'
p41983
S'type'
p41984
sS'required'
p41985
I00
sS'group_name'
p41986
NsasS'name'
p41987
S'/Preconditioning/SMP'
p41988
sasS'parameters'
p41989
NsS'name'
p41990
S'/Preconditioning'
p41991
sa(dp41992
S'description'
p41993
g3
sS'subblocks'
p41994
(lp41995
(dp41996
S'description'
p41997
g3
sS'subblocks'
p41998
(lp41999
(dp42000
S'description'
p42001
g3
sS'subblocks'
p42002
NsS'parameters'
p42003
(lp42004
(dp42005
S'description'
p42006
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42007
sS'cpp_type'
p42008
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42009
sS'default'
p42010
g3
sS'name'
p42011
S'control_tags'
p42012
sS'required'
p42013
I00
sS'group_name'
p42014
S'Advanced'
p42015
sa(dp42016
S'description'
p42017
S'Set the enabled status of the MooseObject.\n'
p42018
sS'cpp_type'
p42019
S'bool'
p42020
sS'default'
p42021
S'1'
p42022
sS'name'
p42023
S'enable'
p42024
sS'required'
p42025
I00
sS'group_name'
p42026
S'Advanced'
p42027
sa(dp42028
S'description'
p42029
g3
sS'cpp_type'
p42030
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42031
sS'default'
p42032
S'DisplacedProblem'
p42033
sS'name'
p42034
S'type'
p42035
sS'required'
p42036
I00
sS'group_name'
p42037
NsasS'name'
p42038
S'/Problem/<type>/DisplacedProblem'
p42039
sa(dp42040
S'description'
p42041
g3
sS'subblocks'
p42042
NsS'parameters'
p42043
(lp42044
(dp42045
S'description'
p42046
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42047
sS'cpp_type'
p42048
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42049
sS'default'
p42050
g3
sS'name'
p42051
S'control_tags'
p42052
sS'required'
p42053
I00
sS'group_name'
p42054
S'Advanced'
p42055
sa(dp42056
S'description'
p42057
S'Set the enabled status of the MooseObject.\n'
p42058
sS'cpp_type'
p42059
S'bool'
p42060
sS'default'
p42061
S'1'
p42062
sS'name'
p42063
S'enable'
p42064
sS'required'
p42065
I00
sS'group_name'
p42066
S'Advanced'
p42067
sa(dp42068
S'description'
p42069
S'This causes PETSc to error if it had to reallocate memory in the Jacobian matrix due to not having enough nonzeros\n'
p42070
sS'cpp_type'
p42071
S'bool'
p42072
sS'default'
p42073
S'0'
p42074
sS'name'
p42075
S'error_on_jacobian_nonzero_reallocation'
p42076
sS'required'
p42077
I00
sS'group_name'
p42078
Nsa(dp42079
S'description'
p42080
S'EXPERIMENTAL: If true, a sub_app may use a restart file instead of using of using the master backup file\n'
p42081
sS'cpp_type'
p42082
S'bool'
p42083
sS'default'
p42084
S'0'
p42085
sS'name'
p42086
S'force_restart'
p42087
sS'required'
p42088
I00
sS'group_name'
p42089
Nsa(dp42090
S'description'
p42091
S'The dimension of eigen subspaces\n'
p42092
sS'cpp_type'
p42093
S'unsigned int'
p42094
sS'default'
p42095
S'3'
p42096
sS'name'
p42097
S'n_basis_vectors'
p42098
sS'required'
p42099
I00
sS'group_name'
p42100
Nsa(dp42101
S'description'
p42102
S'The number of eigen pairs\n'
p42103
sS'cpp_type'
p42104
S'unsigned int'
p42105
sS'default'
p42106
S'1'
p42107
sS'name'
p42108
S'n_eigen_pairs'
p42109
sS'required'
p42110
I00
sS'group_name'
p42111
Nsa(dp42112
S'description'
p42113
S'The dimension of the near nullspace\n'
p42114
sS'cpp_type'
p42115
S'unsigned int'
p42116
sS'default'
p42117
S'0'
p42118
sS'name'
p42119
S'near_null_space_dimension'
p42120
sS'required'
p42121
I00
sS'group_name'
p42122
Nsa(dp42123
S'description'
p42124
S'The dimension of the nullspace\n'
p42125
sS'cpp_type'
p42126
S'unsigned int'
p42127
sS'default'
p42128
S'0'
p42129
sS'name'
p42130
S'null_space_dimension'
p42131
sS'required'
p42132
I00
sS'group_name'
p42133
Nsa(dp42134
S'description'
p42135
S'Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n'
p42136
sS'cpp_type'
p42137
S'bool'
p42138
sS'default'
p42139
S'1'
p42140
sS'name'
p42141
S'solve'
p42142
sS'required'
p42143
I00
sS'group_name'
p42144
Nsa(dp42145
S'description'
p42146
S'The dimension of the transpose nullspace\n'
p42147
sS'cpp_type'
p42148
S'unsigned int'
p42149
sS'default'
p42150
S'0'
p42151
sS'name'
p42152
S'transpose_null_space_dimension'
p42153
sS'required'
p42154
I00
sS'group_name'
p42155
Nsa(dp42156
S'description'
p42157
g3
sS'cpp_type'
p42158
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42159
sS'default'
p42160
S'EigenProblem'
p42161
sS'name'
p42162
S'type'
p42163
sS'required'
p42164
I00
sS'group_name'
p42165
Nsa(dp42166
S'description'
p42167
S'Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n'
p42168
sS'cpp_type'
p42169
S'bool'
p42170
sS'default'
p42171
S'1'
p42172
sS'name'
p42173
S'use_nonlinear'
p42174
sS'required'
p42175
I00
sS'group_name'
p42176
NsasS'name'
p42177
S'/Problem/<type>/EigenProblem'
p42178
sa(dp42179
S'description'
p42180
g3
sS'subblocks'
p42181
NsS'parameters'
p42182
(lp42183
(dp42184
S'description'
p42185
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42186
sS'cpp_type'
p42187
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42188
sS'default'
p42189
g3
sS'name'
p42190
S'control_tags'
p42191
sS'required'
p42192
I00
sS'group_name'
p42193
S'Advanced'
p42194
sa(dp42195
S'description'
p42196
S'Set the enabled status of the MooseObject.\n'
p42197
sS'cpp_type'
p42198
S'bool'
p42199
sS'default'
p42200
S'1'
p42201
sS'name'
p42202
S'enable'
p42203
sS'required'
p42204
I00
sS'group_name'
p42205
S'Advanced'
p42206
sa(dp42207
S'description'
p42208
S'This causes PETSc to error if it had to reallocate memory in the Jacobian matrix due to not having enough nonzeros\n'
p42209
sS'cpp_type'
p42210
S'bool'
p42211
sS'default'
p42212
S'0'
p42213
sS'name'
p42214
S'error_on_jacobian_nonzero_reallocation'
p42215
sS'required'
p42216
I00
sS'group_name'
p42217
Nsa(dp42218
S'description'
p42219
S'EXPERIMENTAL: If true, a sub_app may use a restart file instead of using of using the master backup file\n'
p42220
sS'cpp_type'
p42221
S'bool'
p42222
sS'default'
p42223
S'0'
p42224
sS'name'
p42225
S'force_restart'
p42226
sS'required'
p42227
I00
sS'group_name'
p42228
Nsa(dp42229
S'description'
p42230
S'The dimension of the near nullspace\n'
p42231
sS'cpp_type'
p42232
S'unsigned int'
p42233
sS'default'
p42234
S'0'
p42235
sS'name'
p42236
S'near_null_space_dimension'
p42237
sS'required'
p42238
I00
sS'group_name'
p42239
Nsa(dp42240
S'description'
p42241
S'The dimension of the nullspace\n'
p42242
sS'cpp_type'
p42243
S'unsigned int'
p42244
sS'default'
p42245
S'0'
p42246
sS'name'
p42247
S'null_space_dimension'
p42248
sS'required'
p42249
I00
sS'group_name'
p42250
Nsa(dp42251
S'description'
p42252
S'Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n'
p42253
sS'cpp_type'
p42254
S'bool'
p42255
sS'default'
p42256
S'1'
p42257
sS'name'
p42258
S'solve'
p42259
sS'required'
p42260
I00
sS'group_name'
p42261
Nsa(dp42262
S'description'
p42263
S'The dimension of the transpose nullspace\n'
p42264
sS'cpp_type'
p42265
S'unsigned int'
p42266
sS'default'
p42267
S'0'
p42268
sS'name'
p42269
S'transpose_null_space_dimension'
p42270
sS'required'
p42271
I00
sS'group_name'
p42272
Nsa(dp42273
S'description'
p42274
g3
sS'cpp_type'
p42275
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42276
sS'default'
p42277
S'FEProblem'
p42278
sS'name'
p42279
S'type'
p42280
sS'required'
p42281
I00
sS'group_name'
p42282
Nsa(dp42283
S'description'
p42284
S'Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n'
p42285
sS'cpp_type'
p42286
S'bool'
p42287
sS'default'
p42288
S'1'
p42289
sS'name'
p42290
S'use_nonlinear'
p42291
sS'required'
p42292
I00
sS'group_name'
p42293
NsasS'name'
p42294
S'/Problem/<type>/FEProblem'
p42295
sasS'parameters'
p42296
NsS'name'
p42297
S'/Problem/<type>'
p42298
sasS'parameters'
p42299
(lp42300
(dp42301
S'description'
p42302
S'Block IDs for the coordinate systems\n'
p42303
sS'cpp_type'
p42304
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p42305
sS'default'
p42306
g3
sS'name'
p42307
S'block'
p42308
sS'required'
p42309
I00
sS'group_name'
p42310
Nsa(dp42311
S'name'
p42312
S'coord_type'
p42313
sS'cpp_type'
p42314
S'MultiMooseEnum'
p42315
sS'default'
p42316
S'XYZ'
p42317
sS'description'
p42318
S'Type of the coordinate system per block param\n'
p42319
sS'required'
p42320
I00
sS'options'
p42321
S'XYZ RZ RSPHERICAL'
p42322
sS'group_name'
p42323
Nsa(dp42324
S'description'
p42325
S'Whether or not to turn on the finite element shape function caching system.  This can increase speed with an associated memory cost.\n'
p42326
sS'cpp_type'
p42327
S'bool'
p42328
sS'default'
p42329
S'0'
p42330
sS'name'
p42331
S'fe_cache'
p42332
sS'required'
p42333
I00
sS'group_name'
p42334
Nsa(dp42335
S'description'
p42336
S'Set to false to disable kernel->subdomain coverage check\n'
p42337
sS'cpp_type'
p42338
S'bool'
p42339
sS'default'
p42340
S'1'
p42341
sS'name'
p42342
S'kernel_coverage_check'
p42343
sS'required'
p42344
I00
sS'group_name'
p42345
Nsa(dp42346
S'description'
p42347
S'Set to false to disable material->subdomain coverage check\n'
p42348
sS'cpp_type'
p42349
S'bool'
p42350
sS'default'
p42351
S'1'
p42352
sS'name'
p42353
S'material_coverage_check'
p42354
sS'required'
p42355
I00
sS'group_name'
p42356
Nsa(dp42357
S'description'
p42358
S'The name the problem\n'
p42359
sS'cpp_type'
p42360
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42361
sS'default'
p42362
S'MOOSE Problem'
p42363
sS'name'
p42364
S'name'
p42365
sS'required'
p42366
I00
sS'group_name'
p42367
Nsa(dp42368
S'description'
p42369
S'File base name used for restart (e.g. <path>/<filebase> or <path>/LATEST to grab the latest file available)\n'
p42370
sS'cpp_type'
p42371
S'FileNameNoExtension'
p42372
sS'default'
p42373
g3
sS'name'
p42374
S'restart_file_base'
p42375
sS'required'
p42376
I00
sS'group_name'
p42377
Nsa(dp42378
S'name'
p42379
S'rz_coord_axis'
p42380
sS'cpp_type'
p42381
S'MooseEnum'
p42382
sS'default'
p42383
S'Y'
p42384
sS'description'
p42385
S'The rotation axis (X | Y) for axisymetric coordinates\n'
p42386
sS'required'
p42387
I00
sS'options'
p42388
S'X Y'
p42389
sS'group_name'
p42390
Nsa(dp42391
S'description'
p42392
S'A string representing the Moose Object that will be built by this Action\n'
p42393
sS'cpp_type'
p42394
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42395
sS'default'
p42396
S'FEProblem'
p42397
sS'name'
p42398
S'type'
p42399
sS'required'
p42400
I01
sS'group_name'
p42401
Nsa(dp42402
S'description'
p42403
S'Set to true to have MOOSE recompute *all* AuxKernel types every time *any* UserObject type is executed. ... This behavior is non-intuitive and will be removed late fall 2014, The default is controlled through MooseApp\n'
p42404
sS'cpp_type'
p42405
S'bool'
p42406
sS'default'
p42407
g3
sS'name'
p42408
S'use_legacy_uo_aux_computation'
p42409
sS'required'
p42410
I00
sS'group_name'
p42411
Nsa(dp42412
S'description'
p42413
S'Set to true to have MOOSE compute all UserObjects and Postprocessors during the initial setup phase of the problem recompute *all* AuxKernel types every time *any* UserObject type is executed. ... This behavior is non-intuitive and will be removed late fall 2014, The default is controlled through MooseApp\n'
p42414
sS'cpp_type'
p42415
S'bool'
p42416
sS'default'
p42417
g3
sS'name'
p42418
S'use_legacy_uo_initialization'
p42419
sS'required'
p42420
I00
sS'group_name'
p42421
Nsa(dp42422
S'description'
p42423
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p42424
sS'cpp_type'
p42425
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42426
sS'default'
p42427
g3
sS'name'
p42428
S'library_path'
p42429
sS'required'
p42430
I00
sS'group_name'
p42431
Nsa(dp42432
S'description'
p42433
S'The names of the objects to register (Default: register all).\n'
p42434
sS'cpp_type'
p42435
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42436
sS'default'
p42437
g3
sS'name'
p42438
S'object_names'
p42439
sS'required'
p42440
I00
sS'group_name'
p42441
Nsa(dp42442
S'description'
p42443
S'The names of other applications from which objects will be registered from (dynamic registration).\n'
p42444
sS'cpp_type'
p42445
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42446
sS'default'
p42447
g3
sS'name'
p42448
S'register_objects_from'
p42449
sS'required'
p42450
I00
sS'group_name'
p42451
NsasS'name'
p42452
S'/Problem'
p42453
sa(dp42454
S'description'
p42455
g3
sS'subblocks'
p42456
(lp42457
(dp42458
S'description'
p42459
g3
sS'subblocks'
p42460
NsS'parameters'
p42461
(lp42462
(dp42463
S'description'
p42464
S'A string representing the Moose Object that will be built by this Action\n'
p42465
sS'cpp_type'
p42466
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42467
sS'default'
p42468
g3
sS'name'
p42469
S'type'
p42470
sS'required'
p42471
I01
sS'group_name'
p42472
NsasS'name'
p42473
S'/ScalarKernels/*'
p42474
sa(dp42475
S'description'
p42476
g3
sS'subblocks'
p42477
NsS'parameters'
p42478
(lp42479
(dp42480
S'description'
p42481
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42482
sS'cpp_type'
p42483
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42484
sS'default'
p42485
g3
sS'name'
p42486
S'control_tags'
p42487
sS'required'
p42488
I00
sS'group_name'
p42489
S'Advanced'
p42490
sa(dp42491
S'description'
p42492
S'Set the enabled status of the MooseObject.\n'
p42493
sS'cpp_type'
p42494
S'bool'
p42495
sS'default'
p42496
S'1'
p42497
sS'name'
p42498
S'enable'
p42499
sS'required'
p42500
I00
sS'group_name'
p42501
S'Advanced'
p42502
sa(dp42503
S'description'
p42504
S'Determines whether this object is calculated using an implicit or explicit form\n'
p42505
sS'cpp_type'
p42506
S'bool'
p42507
sS'default'
p42508
S'1'
p42509
sS'name'
p42510
S'implicit'
p42511
sS'required'
p42512
I00
sS'group_name'
p42513
S'Advanced'
p42514
sa(dp42515
S'description'
p42516
S'Node ids\n'
p42517
sS'cpp_type'
p42518
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p42519
sS'default'
p42520
g3
sS'name'
p42521
S'nodes'
p42522
sS'required'
p42523
I01
sS'group_name'
p42524
Nsa(dp42525
S'description'
p42526
g3
sS'cpp_type'
p42527
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42528
sS'default'
p42529
S'NodalEqualValueConstraint'
p42530
sS'name'
p42531
S'type'
p42532
sS'required'
p42533
I00
sS'group_name'
p42534
Nsa(dp42535
S'description'
p42536
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42537
sS'cpp_type'
p42538
S'bool'
p42539
sS'default'
p42540
S'0'
p42541
sS'name'
p42542
S'use_displaced_mesh'
p42543
sS'required'
p42544
I00
sS'group_name'
p42545
S'Advanced'
p42546
sa(dp42547
S'description'
p42548
S'Variable(s) to put the constraint on\n'
p42549
sS'cpp_type'
p42550
S'std::vector<VariableName>'
p42551
sS'default'
p42552
g3
sS'name'
p42553
S'var'
p42554
sS'required'
p42555
I01
sS'group_name'
p42556
Nsa(dp42557
S'description'
p42558
S'The name of the variable that this kernel operates on\n'
p42559
sS'cpp_type'
p42560
S'NonlinearVariableName'
p42561
sS'default'
p42562
g3
sS'name'
p42563
S'variable'
p42564
sS'required'
p42565
I01
sS'group_name'
p42566
NsasS'name'
p42567
S'/ScalarKernels/NodalEqualValueConstraint'
p42568
sa(dp42569
S'description'
p42570
g3
sS'subblocks'
p42571
NsS'parameters'
p42572
(lp42573
(dp42574
S'description'
p42575
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42576
sS'cpp_type'
p42577
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42578
sS'default'
p42579
g3
sS'name'
p42580
S'control_tags'
p42581
sS'required'
p42582
I00
sS'group_name'
p42583
S'Advanced'
p42584
sa(dp42585
S'description'
p42586
S'Set the enabled status of the MooseObject.\n'
p42587
sS'cpp_type'
p42588
S'bool'
p42589
sS'default'
p42590
S'1'
p42591
sS'name'
p42592
S'enable'
p42593
sS'required'
p42594
I00
sS'group_name'
p42595
S'Advanced'
p42596
sa(dp42597
S'description'
p42598
S'Determines whether this object is calculated using an implicit or explicit form\n'
p42599
sS'cpp_type'
p42600
S'bool'
p42601
sS'default'
p42602
S'1'
p42603
sS'name'
p42604
S'implicit'
p42605
sS'required'
p42606
I00
sS'group_name'
p42607
S'Advanced'
p42608
sa(dp42609
S'description'
p42610
g3
sS'cpp_type'
p42611
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42612
sS'default'
p42613
S'ODETimeDerivative'
p42614
sS'name'
p42615
S'type'
p42616
sS'required'
p42617
I00
sS'group_name'
p42618
Nsa(dp42619
S'description'
p42620
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42621
sS'cpp_type'
p42622
S'bool'
p42623
sS'default'
p42624
S'0'
p42625
sS'name'
p42626
S'use_displaced_mesh'
p42627
sS'required'
p42628
I00
sS'group_name'
p42629
S'Advanced'
p42630
sa(dp42631
S'description'
p42632
S'The name of the variable that this kernel operates on\n'
p42633
sS'cpp_type'
p42634
S'NonlinearVariableName'
p42635
sS'default'
p42636
g3
sS'name'
p42637
S'variable'
p42638
sS'required'
p42639
I01
sS'group_name'
p42640
NsasS'name'
p42641
S'/ScalarKernels/ODETimeDerivative'
p42642
sa(dp42643
S'description'
p42644
S'Parsed ODE function kernel.\n'
p42645
sS'subblocks'
p42646
NsS'parameters'
p42647
(lp42648
(dp42649
S'description'
p42650
S'additional coupled variables\n'
p42651
sS'cpp_type'
p42652
S'std::vector<VariableName>'
p42653
sS'default'
p42654
g3
sS'name'
p42655
S'args'
p42656
sS'required'
p42657
I00
sS'group_name'
p42658
Nsa(dp42659
S'description'
p42660
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p42661
sS'cpp_type'
p42662
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42663
sS'default'
p42664
g3
sS'name'
p42665
S'constant_expressions'
p42666
sS'required'
p42667
I00
sS'group_name'
p42668
Nsa(dp42669
S'description'
p42670
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p42671
sS'cpp_type'
p42672
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42673
sS'default'
p42674
g3
sS'name'
p42675
S'constant_names'
p42676
sS'required'
p42677
I00
sS'group_name'
p42678
Nsa(dp42679
S'description'
p42680
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42681
sS'cpp_type'
p42682
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42683
sS'default'
p42684
g3
sS'name'
p42685
S'control_tags'
p42686
sS'required'
p42687
I00
sS'group_name'
p42688
S'Advanced'
p42689
sa(dp42690
S'description'
p42691
S'Disable the function parser algebraic optimizer\n'
p42692
sS'cpp_type'
p42693
S'bool'
p42694
sS'default'
p42695
S'0'
p42696
sS'name'
p42697
S'disable_fpoptimizer'
p42698
sS'required'
p42699
I00
sS'group_name'
p42700
S'Advanced'
p42701
sa(dp42702
S'description'
p42703
S'Set the enabled status of the MooseObject.\n'
p42704
sS'cpp_type'
p42705
S'bool'
p42706
sS'default'
p42707
S'1'
p42708
sS'name'
p42709
S'enable'
p42710
sS'required'
p42711
I00
sS'group_name'
p42712
S'Advanced'
p42713
sa(dp42714
S'description'
p42715
S'Enable cacheing of function derivatives for faster startup time\n'
p42716
sS'cpp_type'
p42717
S'bool'
p42718
sS'default'
p42719
S'1'
p42720
sS'name'
p42721
S'enable_ad_cache'
p42722
sS'required'
p42723
I00
sS'group_name'
p42724
S'Advanced'
p42725
sa(dp42726
S'description'
p42727
S'Enable automatic immediate optimization of derivatives\n'
p42728
sS'cpp_type'
p42729
S'bool'
p42730
sS'default'
p42731
S'1'
p42732
sS'name'
p42733
S'enable_auto_optimize'
p42734
sS'required'
p42735
I00
sS'group_name'
p42736
S'Advanced'
p42737
sa(dp42738
S'description'
p42739
S'Enable just-in-time compilation of function expressions for faster evaluation\n'
p42740
sS'cpp_type'
p42741
S'bool'
p42742
sS'default'
p42743
S'1'
p42744
sS'name'
p42745
S'enable_jit'
p42746
sS'required'
p42747
I00
sS'group_name'
p42748
S'Advanced'
p42749
sa(dp42750
S'description'
p42751
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p42752
sS'cpp_type'
p42753
S'bool'
p42754
sS'default'
p42755
S'0'
p42756
sS'name'
p42757
S'fail_on_evalerror'
p42758
sS'required'
p42759
I00
sS'group_name'
p42760
S'Advanced'
p42761
sa(dp42762
S'description'
p42763
S'function expression\n'
p42764
sS'cpp_type'
p42765
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42766
sS'default'
p42767
g3
sS'name'
p42768
S'function'
p42769
sS'required'
p42770
I01
sS'group_name'
p42771
Nsa(dp42772
S'description'
p42773
S'Determines whether this object is calculated using an implicit or explicit form\n'
p42774
sS'cpp_type'
p42775
S'bool'
p42776
sS'default'
p42777
S'1'
p42778
sS'name'
p42779
S'implicit'
p42780
sS'required'
p42781
I00
sS'group_name'
p42782
S'Advanced'
p42783
sa(dp42784
S'description'
p42785
g3
sS'cpp_type'
p42786
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42787
sS'default'
p42788
S'ParsedODEKernel'
p42789
sS'name'
p42790
S'type'
p42791
sS'required'
p42792
I00
sS'group_name'
p42793
Nsa(dp42794
S'description'
p42795
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42796
sS'cpp_type'
p42797
S'bool'
p42798
sS'default'
p42799
S'0'
p42800
sS'name'
p42801
S'use_displaced_mesh'
p42802
sS'required'
p42803
I00
sS'group_name'
p42804
S'Advanced'
p42805
sa(dp42806
S'description'
p42807
S'The name of the variable that this kernel operates on\n'
p42808
sS'cpp_type'
p42809
S'NonlinearVariableName'
p42810
sS'default'
p42811
g3
sS'name'
p42812
S'variable'
p42813
sS'required'
p42814
I01
sS'group_name'
p42815
NsasS'name'
p42816
S'/ScalarKernels/ParsedODEKernel'
p42817
sasS'parameters'
p42818
NsS'name'
p42819
S'/ScalarKernels'
p42820
sa(dp42821
S'description'
p42822
g3
sS'subblocks'
p42823
(lp42824
(dp42825
S'description'
p42826
g3
sS'subblocks'
p42827
NsS'parameters'
p42828
(lp42829
(dp42830
S'description'
p42831
S'A string representing the Moose Object that will be built by this Action\n'
p42832
sS'cpp_type'
p42833
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42834
sS'default'
p42835
g3
sS'name'
p42836
S'type'
p42837
sS'required'
p42838
I01
sS'group_name'
p42839
NsasS'name'
p42840
S'/Transfers/*'
p42841
sa(dp42842
S'description'
p42843
S'Copies variables (nonlinear and auxiliary) between multiapps that have identical meshes.\n'
p42844
sS'subblocks'
p42845
NsS'parameters'
p42846
(lp42847
(dp42848
S'description'
p42849
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42850
sS'cpp_type'
p42851
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42852
sS'default'
p42853
g3
sS'name'
p42854
S'control_tags'
p42855
sS'required'
p42856
I00
sS'group_name'
p42857
S'Advanced'
p42858
sa(dp42859
S'name'
p42860
S'direction'
p42861
sS'cpp_type'
p42862
S'MooseEnum'
p42863
sS'default'
p42864
g3
sS'description'
p42865
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p42866
sS'required'
p42867
I01
sS'options'
p42868
S'to_multiapp from_multiapp'
p42869
sS'group_name'
p42870
Nsa(dp42871
S'description'
p42872
S'Whether or not to use the displaced mesh for the source mesh.\n'
p42873
sS'cpp_type'
p42874
S'bool'
p42875
sS'default'
p42876
S'0'
p42877
sS'name'
p42878
S'displaced_source_mesh'
p42879
sS'required'
p42880
I00
sS'group_name'
p42881
Nsa(dp42882
S'description'
p42883
S'Whether or not to use the displaced mesh for the target mesh.\n'
p42884
sS'cpp_type'
p42885
S'bool'
p42886
sS'default'
p42887
S'0'
p42888
sS'name'
p42889
S'displaced_target_mesh'
p42890
sS'required'
p42891
I00
sS'group_name'
p42892
Nsa(dp42893
S'description'
p42894
S'Set the enabled status of the MooseObject.\n'
p42895
sS'cpp_type'
p42896
S'bool'
p42897
sS'default'
p42898
S'1'
p42899
sS'name'
p42900
S'enable'
p42901
sS'required'
p42902
I00
sS'group_name'
p42903
S'Advanced'
p42904
sa(dp42905
S'name'
p42906
S'execute_on'
p42907
sS'cpp_type'
p42908
S'MultiMooseEnum'
p42909
sS'default'
p42910
S'SAME_AS_MULTIAPP'
p42911
sS'description'
p42912
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p42913
sS'required'
p42914
I00
sS'options'
p42915
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p42916
sS'group_name'
p42917
Nsa(dp42918
S'description'
p42919
S'The name of the MultiApp to use.\n'
p42920
sS'cpp_type'
p42921
S'MultiAppName'
p42922
sS'default'
p42923
g3
sS'name'
p42924
S'multi_app'
p42925
sS'required'
p42926
I01
sS'group_name'
p42927
Nsa(dp42928
S'description'
p42929
S'The variable to transfer from.\n'
p42930
sS'cpp_type'
p42931
S'VariableName'
p42932
sS'default'
p42933
g3
sS'name'
p42934
S'source_variable'
p42935
sS'required'
p42936
I01
sS'group_name'
p42937
Nsa(dp42938
S'description'
p42939
g3
sS'cpp_type'
p42940
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42941
sS'default'
p42942
S'MultiAppCopyTransfer'
p42943
sS'name'
p42944
S'type'
p42945
sS'required'
p42946
I00
sS'group_name'
p42947
Nsa(dp42948
S'description'
p42949
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42950
sS'cpp_type'
p42951
S'bool'
p42952
sS'default'
p42953
S'0'
p42954
sS'name'
p42955
S'use_displaced_mesh'
p42956
sS'required'
p42957
I00
sS'group_name'
p42958
S'Advanced'
p42959
sa(dp42960
S'description'
p42961
S'The variable to store the transferred values in.\n'
p42962
sS'cpp_type'
p42963
S'VariableName'
p42964
sS'default'
p42965
g3
sS'name'
p42966
S'variable'
p42967
sS'required'
p42968
I01
sS'group_name'
p42969
NsasS'name'
p42970
S'/Transfers/MultiAppCopyTransfer'
p42971
sa(dp42972
S'description'
p42973
g3
sS'subblocks'
p42974
NsS'parameters'
p42975
(lp42976
(dp42977
S'description'
p42978
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p42979
sS'cpp_type'
p42980
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42981
sS'default'
p42982
g3
sS'name'
p42983
S'control_tags'
p42984
sS'required'
p42985
I00
sS'group_name'
p42986
S'Advanced'
p42987
sa(dp42988
S'name'
p42989
S'direction'
p42990
sS'cpp_type'
p42991
S'MooseEnum'
p42992
sS'default'
p42993
g3
sS'description'
p42994
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p42995
sS'required'
p42996
I01
sS'options'
p42997
S'to_multiapp from_multiapp'
p42998
sS'group_name'
p42999
Nsa(dp43000
S'description'
p43001
S'Whether or not to use the displaced mesh for the source mesh.\n'
p43002
sS'cpp_type'
p43003
S'bool'
p43004
sS'default'
p43005
S'0'
p43006
sS'name'
p43007
S'displaced_source_mesh'
p43008
sS'required'
p43009
I00
sS'group_name'
p43010
Nsa(dp43011
S'description'
p43012
S'Whether or not to use the displaced mesh for the target mesh.\n'
p43013
sS'cpp_type'
p43014
S'bool'
p43015
sS'default'
p43016
S'0'
p43017
sS'name'
p43018
S'displaced_target_mesh'
p43019
sS'required'
p43020
I00
sS'group_name'
p43021
Nsa(dp43022
S'description'
p43023
S'Set the enabled status of the MooseObject.\n'
p43024
sS'cpp_type'
p43025
S'bool'
p43026
sS'default'
p43027
S'1'
p43028
sS'name'
p43029
S'enable'
p43030
sS'required'
p43031
I00
sS'group_name'
p43032
S'Advanced'
p43033
sa(dp43034
S'name'
p43035
S'execute_on'
p43036
sS'cpp_type'
p43037
S'MultiMooseEnum'
p43038
sS'default'
p43039
S'SAME_AS_MULTIAPP'
p43040
sS'description'
p43041
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p43042
sS'required'
p43043
I00
sS'options'
p43044
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p43045
sS'group_name'
p43046
Nsa(dp43047
S'name'
p43048
S'interp_type'
p43049
sS'cpp_type'
p43050
S'MooseEnum'
p43051
sS'default'
p43052
S'inverse_distance'
p43053
sS'description'
p43054
S'The algorithm to use for interpolation.\n'
p43055
sS'required'
p43056
I00
sS'options'
p43057
S'inverse_distance radial_basis'
p43058
sS'group_name'
p43059
Nsa(dp43060
S'description'
p43061
S'The name of the MultiApp to use.\n'
p43062
sS'cpp_type'
p43063
S'MultiAppName'
p43064
sS'default'
p43065
g3
sS'name'
p43066
S'multi_app'
p43067
sS'required'
p43068
I01
sS'group_name'
p43069
Nsa(dp43070
S'description'
p43071
S'The number of nearest points to use for interpolation.\n'
p43072
sS'cpp_type'
p43073
S'unsigned int'
p43074
sS'default'
p43075
S'3'
p43076
sS'name'
p43077
S'num_points'
p43078
sS'required'
p43079
I00
sS'group_name'
p43080
Nsa(dp43081
S'description'
p43082
S'The polynomial power to use for calculation of the decay in the interpolation.\n'
p43083
sS'cpp_type'
p43084
S'double'
p43085
sS'default'
p43086
S'2'
p43087
sS'name'
p43088
S'power'
p43089
sS'required'
p43090
I00
sS'group_name'
p43091
Nsa(dp43092
S'description'
p43093
S'Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n'
p43094
sS'cpp_type'
p43095
S'double'
p43096
sS'default'
p43097
S'-1'
p43098
sS'name'
p43099
S'radius'
p43100
sS'required'
p43101
I00
sS'group_name'
p43102
Nsa(dp43103
S'description'
p43104
S'The variable to transfer from.\n'
p43105
sS'cpp_type'
p43106
S'VariableName'
p43107
sS'default'
p43108
g3
sS'name'
p43109
S'source_variable'
p43110
sS'required'
p43111
I01
sS'group_name'
p43112
Nsa(dp43113
S'description'
p43114
g3
sS'cpp_type'
p43115
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43116
sS'default'
p43117
S'MultiAppInterpolationTransfer'
p43118
sS'name'
p43119
S'type'
p43120
sS'required'
p43121
I00
sS'group_name'
p43122
Nsa(dp43123
S'description'
p43124
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43125
sS'cpp_type'
p43126
S'bool'
p43127
sS'default'
p43128
S'0'
p43129
sS'name'
p43130
S'use_displaced_mesh'
p43131
sS'required'
p43132
I00
sS'group_name'
p43133
S'Advanced'
p43134
sa(dp43135
S'description'
p43136
S'The auxiliary variable to store the transferred values in.\n'
p43137
sS'cpp_type'
p43138
S'AuxVariableName'
p43139
sS'default'
p43140
g3
sS'name'
p43141
S'variable'
p43142
sS'required'
p43143
I01
sS'group_name'
p43144
NsasS'name'
p43145
S'/Transfers/MultiAppInterpolationTransfer'
p43146
sa(dp43147
S'description'
p43148
g3
sS'subblocks'
p43149
NsS'parameters'
p43150
(lp43151
(dp43152
S'description'
p43153
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43154
sS'cpp_type'
p43155
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p43156
sS'default'
p43157
g3
sS'name'
p43158
S'control_tags'
p43159
sS'required'
p43160
I00
sS'group_name'
p43161
S'Advanced'
p43162
sa(dp43163
S'name'
p43164
S'direction'
p43165
sS'cpp_type'
p43166
S'MooseEnum'
p43167
sS'default'
p43168
g3
sS'description'
p43169
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p43170
sS'required'
p43171
I01
sS'options'
p43172
S'to_multiapp from_multiapp'
p43173
sS'group_name'
p43174
Nsa(dp43175
S'description'
p43176
S'Whether or not to use the displaced mesh for the source mesh.\n'
p43177
sS'cpp_type'
p43178
S'bool'
p43179
sS'default'
p43180
S'0'
p43181
sS'name'
p43182
S'displaced_source_mesh'
p43183
sS'required'
p43184
I00
sS'group_name'
p43185
Nsa(dp43186
S'description'
p43187
S'Whether or not to use the displaced mesh for the target mesh.\n'
p43188
sS'cpp_type'
p43189
S'bool'
p43190
sS'default'
p43191
S'0'
p43192
sS'name'
p43193
S'displaced_target_mesh'
p43194
sS'required'
p43195
I00
sS'group_name'
p43196
Nsa(dp43197
S'description'
p43198
S'Set the enabled status of the MooseObject.\n'
p43199
sS'cpp_type'
p43200
S'bool'
p43201
sS'default'
p43202
S'1'
p43203
sS'name'
p43204
S'enable'
p43205
sS'required'
p43206
I00
sS'group_name'
p43207
S'Advanced'
p43208
sa(dp43209
S'description'
p43210
S'Whether or not to error in the case that a target point is not found in the source domain.\n'
p43211
sS'cpp_type'
p43212
S'bool'
p43213
sS'default'
p43214
S'0'
p43215
sS'name'
p43216
S'error_on_miss'
p43217
sS'required'
p43218
I00
sS'group_name'
p43219
Nsa(dp43220
S'name'
p43221
S'execute_on'
p43222
sS'cpp_type'
p43223
S'MultiMooseEnum'
p43224
sS'default'
p43225
S'SAME_AS_MULTIAPP'
p43226
sS'description'
p43227
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p43228
sS'required'
p43229
I00
sS'options'
p43230
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p43231
sS'group_name'
p43232
Nsa(dp43233
S'description'
p43234
S'The name of the MultiApp to use.\n'
p43235
sS'cpp_type'
p43236
S'MultiAppName'
p43237
sS'default'
p43238
g3
sS'name'
p43239
S'multi_app'
p43240
sS'required'
p43241
I01
sS'group_name'
p43242
Nsa(dp43243
S'description'
p43244
S'The variable to transfer from.\n'
p43245
sS'cpp_type'
p43246
S'VariableName'
p43247
sS'default'
p43248
g3
sS'name'
p43249
S'source_variable'
p43250
sS'required'
p43251
I01
sS'group_name'
p43252
Nsa(dp43253
S'description'
p43254
g3
sS'cpp_type'
p43255
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43256
sS'default'
p43257
S'MultiAppMeshFunctionTransfer'
p43258
sS'name'
p43259
S'type'
p43260
sS'required'
p43261
I00
sS'group_name'
p43262
Nsa(dp43263
S'description'
p43264
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43265
sS'cpp_type'
p43266
S'bool'
p43267
sS'default'
p43268
S'0'
p43269
sS'name'
p43270
S'use_displaced_mesh'
p43271
sS'required'
p43272
I00
sS'group_name'
p43273
S'Advanced'
p43274
sa(dp43275
S'description'
p43276
S'The auxiliary variable to store the transferred values in.\n'
p43277
sS'cpp_type'
p43278
S'AuxVariableName'
p43279
sS'default'
p43280
g3
sS'name'
p43281
S'variable'
p43282
sS'required'
p43283
I01
sS'group_name'
p43284
NsasS'name'
p43285
S'/Transfers/MultiAppMeshFunctionTransfer'
p43286
sa(dp43287
S'description'
p43288
g3
sS'subblocks'
p43289
NsS'parameters'
p43290
(lp43291
(dp43292
S'description'
p43293
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43294
sS'cpp_type'
p43295
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p43296
sS'default'
p43297
g3
sS'name'
p43298
S'control_tags'
p43299
sS'required'
p43300
I00
sS'group_name'
p43301
S'Advanced'
p43302
sa(dp43303
S'name'
p43304
S'direction'
p43305
sS'cpp_type'
p43306
S'MooseEnum'
p43307
sS'default'
p43308
g3
sS'description'
p43309
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p43310
sS'required'
p43311
I01
sS'options'
p43312
S'to_multiapp from_multiapp'
p43313
sS'group_name'
p43314
Nsa(dp43315
S'description'
p43316
S'Whether or not to use the displaced mesh for the source mesh.\n'
p43317
sS'cpp_type'
p43318
S'bool'
p43319
sS'default'
p43320
S'0'
p43321
sS'name'
p43322
S'displaced_source_mesh'
p43323
sS'required'
p43324
I00
sS'group_name'
p43325
Nsa(dp43326
S'description'
p43327
S'Whether or not to use the displaced mesh for the target mesh.\n'
p43328
sS'cpp_type'
p43329
S'bool'
p43330
sS'default'
p43331
S'0'
p43332
sS'name'
p43333
S'displaced_target_mesh'
p43334
sS'required'
p43335
I00
sS'group_name'
p43336
Nsa(dp43337
S'description'
p43338
S'Set the enabled status of the MooseObject.\n'
p43339
sS'cpp_type'
p43340
S'bool'
p43341
sS'default'
p43342
S'1'
p43343
sS'name'
p43344
S'enable'
p43345
sS'required'
p43346
I00
sS'group_name'
p43347
S'Advanced'
p43348
sa(dp43349
S'name'
p43350
S'execute_on'
p43351
sS'cpp_type'
p43352
S'MultiMooseEnum'
p43353
sS'default'
p43354
S'SAME_AS_MULTIAPP'
p43355
sS'description'
p43356
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p43357
sS'required'
p43358
I00
sS'options'
p43359
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p43360
sS'group_name'
p43361
Nsa(dp43362
S'description'
p43363
S'Set to true when the meshes are not changing (ie, no movement or adaptivity).  This will cache nearest node neighbors to greatly speed up the transfer.\n'
p43364
sS'cpp_type'
p43365
S'bool'
p43366
sS'default'
p43367
S'0'
p43368
sS'name'
p43369
S'fixed_meshes'
p43370
sS'required'
p43371
I00
sS'group_name'
p43372
Nsa(dp43373
S'description'
p43374
S'The name of the MultiApp to use.\n'
p43375
sS'cpp_type'
p43376
S'MultiAppName'
p43377
sS'default'
p43378
g3
sS'name'
p43379
S'multi_app'
p43380
sS'required'
p43381
I01
sS'group_name'
p43382
Nsa(dp43383
S'description'
p43384
S'The boundary we are transferring from (if not specified, whole domain is used).\n'
p43385
sS'cpp_type'
p43386
S'BoundaryName'
p43387
sS'default'
p43388
g3
sS'name'
p43389
S'source_boundary'
p43390
sS'required'
p43391
I00
sS'group_name'
p43392
Nsa(dp43393
S'description'
p43394
S'The variable to transfer from.\n'
p43395
sS'cpp_type'
p43396
S'VariableName'
p43397
sS'default'
p43398
g3
sS'name'
p43399
S'source_variable'
p43400
sS'required'
p43401
I01
sS'group_name'
p43402
Nsa(dp43403
S'description'
p43404
S'The boundary we are transferring to (if not specified, whole domain is used).\n'
p43405
sS'cpp_type'
p43406
S'BoundaryName'
p43407
sS'default'
p43408
g3
sS'name'
p43409
S'target_boundary'
p43410
sS'required'
p43411
I00
sS'group_name'
p43412
Nsa(dp43413
S'description'
p43414
g3
sS'cpp_type'
p43415
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43416
sS'default'
p43417
S'MultiAppNearestNodeTransfer'
p43418
sS'name'
p43419
S'type'
p43420
sS'required'
p43421
I00
sS'group_name'
p43422
Nsa(dp43423
S'description'
p43424
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43425
sS'cpp_type'
p43426
S'bool'
p43427
sS'default'
p43428
S'0'
p43429
sS'name'
p43430
S'use_displaced_mesh'
p43431
sS'required'
p43432
I00
sS'group_name'
p43433
S'Advanced'
p43434
sa(dp43435
S'description'
p43436
S'The auxiliary variable to store the transferred values in.\n'
p43437
sS'cpp_type'
p43438
S'AuxVariableName'
p43439
sS'default'
p43440
g3
sS'name'
p43441
S'variable'
p43442
sS'required'
p43443
I01
sS'group_name'
p43444
NsasS'name'
p43445
S'/Transfers/MultiAppNearestNodeTransfer'
p43446
sa(dp43447
S'description'
p43448
g3
sS'subblocks'
p43449
NsS'parameters'
p43450
(lp43451
(dp43452
S'description'
p43453
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43454
sS'cpp_type'
p43455
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p43456
sS'default'
p43457
g3
sS'name'
p43458
S'control_tags'
p43459
sS'required'
p43460
I00
sS'group_name'
p43461
S'Advanced'
p43462
sa(dp43463
S'name'
p43464
S'direction'
p43465
sS'cpp_type'
p43466
S'MooseEnum'
p43467
sS'default'
p43468
g3
sS'description'
p43469
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p43470
sS'required'
p43471
I01
sS'options'
p43472
S'to_multiapp from_multiapp'
p43473
sS'group_name'
p43474
Nsa(dp43475
S'description'
p43476
S'Whether or not to use the displaced mesh for the source mesh.\n'
p43477
sS'cpp_type'
p43478
S'bool'
p43479
sS'default'
p43480
S'0'
p43481
sS'name'
p43482
S'displaced_source_mesh'
p43483
sS'required'
p43484
I00
sS'group_name'
p43485
Nsa(dp43486
S'description'
p43487
S'Whether or not to use the displaced mesh for the target mesh.\n'
p43488
sS'cpp_type'
p43489
S'bool'
p43490
sS'default'
p43491
S'0'
p43492
sS'name'
p43493
S'displaced_target_mesh'
p43494
sS'required'
p43495
I00
sS'group_name'
p43496
Nsa(dp43497
S'description'
p43498
S'Set the enabled status of the MooseObject.\n'
p43499
sS'cpp_type'
p43500
S'bool'
p43501
sS'default'
p43502
S'1'
p43503
sS'name'
p43504
S'enable'
p43505
sS'required'
p43506
I00
sS'group_name'
p43507
S'Advanced'
p43508
sa(dp43509
S'name'
p43510
S'execute_on'
p43511
sS'cpp_type'
p43512
S'MultiMooseEnum'
p43513
sS'default'
p43514
S'SAME_AS_MULTIAPP'
p43515
sS'description'
p43516
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p43517
sS'required'
p43518
I00
sS'options'
p43519
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p43520
sS'group_name'
p43521
Nsa(dp43522
S'name'
p43523
S'interp_type'
p43524
sS'cpp_type'
p43525
S'MooseEnum'
p43526
sS'default'
p43527
S'inverse_distance'
p43528
sS'description'
p43529
S'The algorithm to use for interpolation.\n'
p43530
sS'required'
p43531
I00
sS'options'
p43532
S'inverse_distance radial_basis'
p43533
sS'group_name'
p43534
Nsa(dp43535
S'description'
p43536
S'The name of the MultiApp to use.\n'
p43537
sS'cpp_type'
p43538
S'MultiAppName'
p43539
sS'default'
p43540
g3
sS'name'
p43541
S'multi_app'
p43542
sS'required'
p43543
I01
sS'group_name'
p43544
Nsa(dp43545
S'description'
p43546
S'The number of nearest points to use for interpolation.\n'
p43547
sS'cpp_type'
p43548
S'unsigned int'
p43549
sS'default'
p43550
S'3'
p43551
sS'name'
p43552
S'num_points'
p43553
sS'required'
p43554
I00
sS'group_name'
p43555
Nsa(dp43556
S'description'
p43557
S'The Postprocessor to interpolate.\n'
p43558
sS'cpp_type'
p43559
S'PostprocessorName'
p43560
sS'default'
p43561
g3
sS'name'
p43562
S'postprocessor'
p43563
sS'required'
p43564
I01
sS'group_name'
p43565
Nsa(dp43566
S'description'
p43567
S'The polynomial power to use for calculation of the decay in the interpolation.\n'
p43568
sS'cpp_type'
p43569
S'double'
p43570
sS'default'
p43571
S'2'
p43572
sS'name'
p43573
S'power'
p43574
sS'required'
p43575
I00
sS'group_name'
p43576
Nsa(dp43577
S'description'
p43578
S'Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n'
p43579
sS'cpp_type'
p43580
S'double'
p43581
sS'default'
p43582
S'-1'
p43583
sS'name'
p43584
S'radius'
p43585
sS'required'
p43586
I00
sS'group_name'
p43587
Nsa(dp43588
S'description'
p43589
g3
sS'cpp_type'
p43590
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43591
sS'default'
p43592
S'MultiAppPostprocessorInterpolationTransfer'
p43593
sS'name'
p43594
S'type'
p43595
sS'required'
p43596
I00
sS'group_name'
p43597
Nsa(dp43598
S'description'
p43599
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43600
sS'cpp_type'
p43601
S'bool'
p43602
sS'default'
p43603
S'0'
p43604
sS'name'
p43605
S'use_displaced_mesh'
p43606
sS'required'
p43607
I00
sS'group_name'
p43608
S'Advanced'
p43609
sa(dp43610
S'description'
p43611
S'The auxiliary variable to store the transferred values in.\n'
p43612
sS'cpp_type'
p43613
S'AuxVariableName'
p43614
sS'default'
p43615
g3
sS'name'
p43616
S'variable'
p43617
sS'required'
p43618
I01
sS'group_name'
p43619
NsasS'name'
p43620
S'/Transfers/MultiAppPostprocessorInterpolationTransfer'
p43621
sa(dp43622
S'description'
p43623
g3
sS'subblocks'
p43624
NsS'parameters'
p43625
(lp43626
(dp43627
S'description'
p43628
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43629
sS'cpp_type'
p43630
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p43631
sS'default'
p43632
g3
sS'name'
p43633
S'control_tags'
p43634
sS'required'
p43635
I00
sS'group_name'
p43636
S'Advanced'
p43637
sa(dp43638
S'name'
p43639
S'direction'
p43640
sS'cpp_type'
p43641
S'MooseEnum'
p43642
sS'default'
p43643
g3
sS'description'
p43644
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p43645
sS'required'
p43646
I01
sS'options'
p43647
S'to_multiapp from_multiapp'
p43648
sS'group_name'
p43649
Nsa(dp43650
S'description'
p43651
S'Whether or not to use the displaced mesh for the source mesh.\n'
p43652
sS'cpp_type'
p43653
S'bool'
p43654
sS'default'
p43655
S'0'
p43656
sS'name'
p43657
S'displaced_source_mesh'
p43658
sS'required'
p43659
I00
sS'group_name'
p43660
Nsa(dp43661
S'description'
p43662
S'Whether or not to use the displaced mesh for the target mesh.\n'
p43663
sS'cpp_type'
p43664
S'bool'
p43665
sS'default'
p43666
S'0'
p43667
sS'name'
p43668
S'displaced_target_mesh'
p43669
sS'required'
p43670
I00
sS'group_name'
p43671
Nsa(dp43672
S'description'
p43673
S'Set the enabled status of the MooseObject.\n'
p43674
sS'cpp_type'
p43675
S'bool'
p43676
sS'default'
p43677
S'1'
p43678
sS'name'
p43679
S'enable'
p43680
sS'required'
p43681
I00
sS'group_name'
p43682
S'Advanced'
p43683
sa(dp43684
S'name'
p43685
S'execute_on'
p43686
sS'cpp_type'
p43687
S'MultiMooseEnum'
p43688
sS'default'
p43689
S'SAME_AS_MULTIAPP'
p43690
sS'description'
p43691
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p43692
sS'required'
p43693
I00
sS'options'
p43694
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p43695
sS'group_name'
p43696
Nsa(dp43697
S'description'
p43698
S'The name of the Postprocessor in the Master to transfer the value from.\n'
p43699
sS'cpp_type'
p43700
S'PostprocessorName'
p43701
sS'default'
p43702
g3
sS'name'
p43703
S'from_postprocessor'
p43704
sS'required'
p43705
I01
sS'group_name'
p43706
Nsa(dp43707
S'description'
p43708
S'The name of the MultiApp to use.\n'
p43709
sS'cpp_type'
p43710
S'MultiAppName'
p43711
sS'default'
p43712
g3
sS'name'
p43713
S'multi_app'
p43714
sS'required'
p43715
I01
sS'group_name'
p43716
Nsa(dp43717
S'description'
p43718
S'The name of the scalar Aux variable in the MultiApp to transfer the value to.\n'
p43719
sS'cpp_type'
p43720
S'VariableName'
p43721
sS'default'
p43722
g3
sS'name'
p43723
S'to_aux_scalar'
p43724
sS'required'
p43725
I01
sS'group_name'
p43726
Nsa(dp43727
S'description'
p43728
g3
sS'cpp_type'
p43729
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43730
sS'default'
p43731
S'MultiAppPostprocessorToAuxScalarTransfer'
p43732
sS'name'
p43733
S'type'
p43734
sS'required'
p43735
I00
sS'group_name'
p43736
Nsa(dp43737
S'description'
p43738
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43739
sS'cpp_type'
p43740
S'bool'
p43741
sS'default'
p43742
S'0'
p43743
sS'name'
p43744
S'use_displaced_mesh'
p43745
sS'required'
p43746
I00
sS'group_name'
p43747
S'Advanced'
p43748
sasS'name'
p43749
S'/Transfers/MultiAppPostprocessorToAuxScalarTransfer'
p43750
sa(dp43751
S'description'
p43752
g3
sS'subblocks'
p43753
NsS'parameters'
p43754
(lp43755
(dp43756
S'description'
p43757
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43758
sS'cpp_type'
p43759
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p43760
sS'default'
p43761
g3
sS'name'
p43762
S'control_tags'
p43763
sS'required'
p43764
I00
sS'group_name'
p43765
S'Advanced'
p43766
sa(dp43767
S'name'
p43768
S'direction'
p43769
sS'cpp_type'
p43770
S'MooseEnum'
p43771
sS'default'
p43772
g3
sS'description'
p43773
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p43774
sS'required'
p43775
I01
sS'options'
p43776
S'to_multiapp from_multiapp'
p43777
sS'group_name'
p43778
Nsa(dp43779
S'description'
p43780
S'Whether or not to use the displaced mesh for the source mesh.\n'
p43781
sS'cpp_type'
p43782
S'bool'
p43783
sS'default'
p43784
S'0'
p43785
sS'name'
p43786
S'displaced_source_mesh'
p43787
sS'required'
p43788
I00
sS'group_name'
p43789
Nsa(dp43790
S'description'
p43791
S'Whether or not to use the displaced mesh for the target mesh.\n'
p43792
sS'cpp_type'
p43793
S'bool'
p43794
sS'default'
p43795
S'0'
p43796
sS'name'
p43797
S'displaced_target_mesh'
p43798
sS'required'
p43799
I00
sS'group_name'
p43800
Nsa(dp43801
S'description'
p43802
S'Set the enabled status of the MooseObject.\n'
p43803
sS'cpp_type'
p43804
S'bool'
p43805
sS'default'
p43806
S'1'
p43807
sS'name'
p43808
S'enable'
p43809
sS'required'
p43810
I00
sS'group_name'
p43811
S'Advanced'
p43812
sa(dp43813
S'name'
p43814
S'execute_on'
p43815
sS'cpp_type'
p43816
S'MultiMooseEnum'
p43817
sS'default'
p43818
S'SAME_AS_MULTIAPP'
p43819
sS'description'
p43820
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p43821
sS'required'
p43822
I00
sS'options'
p43823
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p43824
sS'group_name'
p43825
Nsa(dp43826
S'description'
p43827
S'The name of the Postprocessor in the Master to transfer the value from.\n'
p43828
sS'cpp_type'
p43829
S'PostprocessorName'
p43830
sS'default'
p43831
g3
sS'name'
p43832
S'from_postprocessor'
p43833
sS'required'
p43834
I01
sS'group_name'
p43835
Nsa(dp43836
S'description'
p43837
S'The name of the MultiApp to use.\n'
p43838
sS'cpp_type'
p43839
S'MultiAppName'
p43840
sS'default'
p43841
g3
sS'name'
p43842
S'multi_app'
p43843
sS'required'
p43844
I01
sS'group_name'
p43845
Nsa(dp43846
S'name'
p43847
S'reduction_type'
p43848
sS'cpp_type'
p43849
S'MooseEnum'
p43850
sS'default'
p43851
g3
sS'description'
p43852
S'The type of reduction to perform to reduce postprocessor values from multiple SubApps to a single value\n'
p43853
sS'required'
p43854
I00
sS'options'
p43855
S'average sum maximum minimum'
p43856
sS'group_name'
p43857
Nsa(dp43858
S'description'
p43859
S'The name of the Postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n'
p43860
sS'cpp_type'
p43861
S'PostprocessorName'
p43862
sS'default'
p43863
g3
sS'name'
p43864
S'to_postprocessor'
p43865
sS'required'
p43866
I01
sS'group_name'
p43867
Nsa(dp43868
S'description'
p43869
g3
sS'cpp_type'
p43870
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43871
sS'default'
p43872
S'MultiAppPostprocessorTransfer'
p43873
sS'name'
p43874
S'type'
p43875
sS'required'
p43876
I00
sS'group_name'
p43877
Nsa(dp43878
S'description'
p43879
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p43880
sS'cpp_type'
p43881
S'bool'
p43882
sS'default'
p43883
S'0'
p43884
sS'name'
p43885
S'use_displaced_mesh'
p43886
sS'required'
p43887
I00
sS'group_name'
p43888
S'Advanced'
p43889
sasS'name'
p43890
S'/Transfers/MultiAppPostprocessorTransfer'
p43891
sa(dp43892
S'description'
p43893
g3
sS'subblocks'
p43894
NsS'parameters'
p43895
(lp43896
(dp43897
S'description'
p43898
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p43899
sS'cpp_type'
p43900
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p43901
sS'default'
p43902
g3
sS'name'
p43903
S'control_tags'
p43904
sS'required'
p43905
I00
sS'group_name'
p43906
S'Advanced'
p43907
sa(dp43908
S'name'
p43909
S'direction'
p43910
sS'cpp_type'
p43911
S'MooseEnum'
p43912
sS'default'
p43913
g3
sS'description'
p43914
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p43915
sS'required'
p43916
I01
sS'options'
p43917
S'to_multiapp from_multiapp'
p43918
sS'group_name'
p43919
Nsa(dp43920
S'description'
p43921
S'Whether or not to use the displaced mesh for the source mesh.\n'
p43922
sS'cpp_type'
p43923
S'bool'
p43924
sS'default'
p43925
S'0'
p43926
sS'name'
p43927
S'displaced_source_mesh'
p43928
sS'required'
p43929
I00
sS'group_name'
p43930
Nsa(dp43931
S'description'
p43932
S'Whether or not to use the displaced mesh for the target mesh.\n'
p43933
sS'cpp_type'
p43934
S'bool'
p43935
sS'default'
p43936
S'0'
p43937
sS'name'
p43938
S'displaced_target_mesh'
p43939
sS'required'
p43940
I00
sS'group_name'
p43941
Nsa(dp43942
S'description'
p43943
S'Set the enabled status of the MooseObject.\n'
p43944
sS'cpp_type'
p43945
S'bool'
p43946
sS'default'
p43947
S'1'
p43948
sS'name'
p43949
S'enable'
p43950
sS'required'
p43951
I00
sS'group_name'
p43952
S'Advanced'
p43953
sa(dp43954
S'name'
p43955
S'execute_on'
p43956
sS'cpp_type'
p43957
S'MultiMooseEnum'
p43958
sS'default'
p43959
S'SAME_AS_MULTIAPP'
p43960
sS'description'
p43961
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p43962
sS'required'
p43963
I00
sS'options'
p43964
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p43965
sS'group_name'
p43966
Nsa(dp43967
S'description'
p43968
S'Set to true when the meshes are not changing (ie, no movement or adaptivity).  This will cache some information to speed up the transfer.\n'
p43969
sS'cpp_type'
p43970
S'bool'
p43971
sS'default'
p43972
S'0'
p43973
sS'name'
p43974
S'fixed_meshes'
p43975
sS'required'
p43976
I00
sS'group_name'
p43977
Nsa(dp43978
S'description'
p43979
S'The name of the MultiApp to use.\n'
p43980
sS'cpp_type'
p43981
S'MultiAppName'
p43982
sS'default'
p43983
g3
sS'name'
p43984
S'multi_app'
p43985
sS'required'
p43986
I01
sS'group_name'
p43987
Nsa(dp43988
S'name'
p43989
S'proj_type'
p43990
sS'cpp_type'
p43991
S'MooseEnum'
p43992
sS'default'
p43993
S'l2'
p43994
sS'description'
p43995
S'The type of the projection.\n'
p43996
sS'required'
p43997
I00
sS'options'
p43998
S'l2'
p43999
sS'group_name'
p44000
Nsa(dp44001
S'description'
p44002
S'The variable to transfer from.\n'
p44003
sS'cpp_type'
p44004
S'VariableName'
p44005
sS'default'
p44006
g3
sS'name'
p44007
S'source_variable'
p44008
sS'required'
p44009
I01
sS'group_name'
p44010
Nsa(dp44011
S'description'
p44012
g3
sS'cpp_type'
p44013
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44014
sS'default'
p44015
S'MultiAppProjectionTransfer'
p44016
sS'name'
p44017
S'type'
p44018
sS'required'
p44019
I00
sS'group_name'
p44020
Nsa(dp44021
S'description'
p44022
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44023
sS'cpp_type'
p44024
S'bool'
p44025
sS'default'
p44026
S'0'
p44027
sS'name'
p44028
S'use_displaced_mesh'
p44029
sS'required'
p44030
I00
sS'group_name'
p44031
S'Advanced'
p44032
sa(dp44033
S'description'
p44034
S'The auxiliary variable to store the transferred values in.\n'
p44035
sS'cpp_type'
p44036
S'AuxVariableName'
p44037
sS'default'
p44038
g3
sS'name'
p44039
S'variable'
p44040
sS'required'
p44041
I01
sS'group_name'
p44042
NsasS'name'
p44043
S'/Transfers/MultiAppProjectionTransfer'
p44044
sa(dp44045
S'description'
p44046
g3
sS'subblocks'
p44047
NsS'parameters'
p44048
(lp44049
(dp44050
S'description'
p44051
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44052
sS'cpp_type'
p44053
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44054
sS'default'
p44055
g3
sS'name'
p44056
S'control_tags'
p44057
sS'required'
p44058
I00
sS'group_name'
p44059
S'Advanced'
p44060
sa(dp44061
S'name'
p44062
S'direction'
p44063
sS'cpp_type'
p44064
S'MooseEnum'
p44065
sS'default'
p44066
g3
sS'description'
p44067
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p44068
sS'required'
p44069
I01
sS'options'
p44070
S'to_multiapp from_multiapp'
p44071
sS'group_name'
p44072
Nsa(dp44073
S'description'
p44074
S'Whether or not to use the displaced mesh for the source mesh.\n'
p44075
sS'cpp_type'
p44076
S'bool'
p44077
sS'default'
p44078
S'0'
p44079
sS'name'
p44080
S'displaced_source_mesh'
p44081
sS'required'
p44082
I00
sS'group_name'
p44083
Nsa(dp44084
S'description'
p44085
S'Whether or not to use the displaced mesh for the target mesh.\n'
p44086
sS'cpp_type'
p44087
S'bool'
p44088
sS'default'
p44089
S'0'
p44090
sS'name'
p44091
S'displaced_target_mesh'
p44092
sS'required'
p44093
I00
sS'group_name'
p44094
Nsa(dp44095
S'description'
p44096
S'Set the enabled status of the MooseObject.\n'
p44097
sS'cpp_type'
p44098
S'bool'
p44099
sS'default'
p44100
S'1'
p44101
sS'name'
p44102
S'enable'
p44103
sS'required'
p44104
I00
sS'group_name'
p44105
S'Advanced'
p44106
sa(dp44107
S'name'
p44108
S'execute_on'
p44109
sS'cpp_type'
p44110
S'MultiMooseEnum'
p44111
sS'default'
p44112
S'SAME_AS_MULTIAPP'
p44113
sS'description'
p44114
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44115
sS'required'
p44116
I00
sS'options'
p44117
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p44118
sS'group_name'
p44119
Nsa(dp44120
S'description'
p44121
S'The name of the MultiApp to use.\n'
p44122
sS'cpp_type'
p44123
S'MultiAppName'
p44124
sS'default'
p44125
g3
sS'name'
p44126
S'multi_app'
p44127
sS'required'
p44128
I01
sS'group_name'
p44129
Nsa(dp44130
S'description'
p44131
g3
sS'cpp_type'
p44132
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44133
sS'default'
p44134
S'MultiAppUserObjectTransfer'
p44135
sS'name'
p44136
S'type'
p44137
sS'required'
p44138
I00
sS'group_name'
p44139
Nsa(dp44140
S'description'
p44141
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44142
sS'cpp_type'
p44143
S'bool'
p44144
sS'default'
p44145
S'0'
p44146
sS'name'
p44147
S'use_displaced_mesh'
p44148
sS'required'
p44149
I00
sS'group_name'
p44150
S'Advanced'
p44151
sa(dp44152
S'description'
p44153
S"The UserObject you want to transfer values from.  Note: This might be a UserObject from your MultiApp's input file!\n"
p44154
sS'cpp_type'
p44155
S'UserObjectName'
p44156
sS'default'
p44157
g3
sS'name'
p44158
S'user_object'
p44159
sS'required'
p44160
I01
sS'group_name'
p44161
Nsa(dp44162
S'description'
p44163
S'The auxiliary variable to store the transferred values in.\n'
p44164
sS'cpp_type'
p44165
S'AuxVariableName'
p44166
sS'default'
p44167
g3
sS'name'
p44168
S'variable'
p44169
sS'required'
p44170
I01
sS'group_name'
p44171
NsasS'name'
p44172
S'/Transfers/MultiAppUserObjectTransfer'
p44173
sa(dp44174
S'description'
p44175
g3
sS'subblocks'
p44176
NsS'parameters'
p44177
(lp44178
(dp44179
S'description'
p44180
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44181
sS'cpp_type'
p44182
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44183
sS'default'
p44184
g3
sS'name'
p44185
S'control_tags'
p44186
sS'required'
p44187
I00
sS'group_name'
p44188
S'Advanced'
p44189
sa(dp44190
S'name'
p44191
S'direction'
p44192
sS'cpp_type'
p44193
S'MooseEnum'
p44194
sS'default'
p44195
g3
sS'description'
p44196
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p44197
sS'required'
p44198
I01
sS'options'
p44199
S'to_multiapp from_multiapp'
p44200
sS'group_name'
p44201
Nsa(dp44202
S'description'
p44203
S'Whether or not to use the displaced mesh for the source mesh.\n'
p44204
sS'cpp_type'
p44205
S'bool'
p44206
sS'default'
p44207
S'0'
p44208
sS'name'
p44209
S'displaced_source_mesh'
p44210
sS'required'
p44211
I00
sS'group_name'
p44212
Nsa(dp44213
S'description'
p44214
S'Whether or not to use the displaced mesh for the target mesh.\n'
p44215
sS'cpp_type'
p44216
S'bool'
p44217
sS'default'
p44218
S'0'
p44219
sS'name'
p44220
S'displaced_target_mesh'
p44221
sS'required'
p44222
I00
sS'group_name'
p44223
Nsa(dp44224
S'description'
p44225
S'Set the enabled status of the MooseObject.\n'
p44226
sS'cpp_type'
p44227
S'bool'
p44228
sS'default'
p44229
S'1'
p44230
sS'name'
p44231
S'enable'
p44232
sS'required'
p44233
I00
sS'group_name'
p44234
S'Advanced'
p44235
sa(dp44236
S'name'
p44237
S'execute_on'
p44238
sS'cpp_type'
p44239
S'MultiMooseEnum'
p44240
sS'default'
p44241
S'SAME_AS_MULTIAPP'
p44242
sS'description'
p44243
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44244
sS'required'
p44245
I00
sS'options'
p44246
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p44247
sS'group_name'
p44248
Nsa(dp44249
S'description'
p44250
S'The name of the MultiApp to use.\n'
p44251
sS'cpp_type'
p44252
S'MultiAppName'
p44253
sS'default'
p44254
g3
sS'name'
p44255
S'multi_app'
p44256
sS'required'
p44257
I01
sS'group_name'
p44258
Nsa(dp44259
S'description'
p44260
S'The name of the postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n'
p44261
sS'cpp_type'
p44262
S'PostprocessorName'
p44263
sS'default'
p44264
g3
sS'name'
p44265
S'postprocessor'
p44266
sS'required'
p44267
I01
sS'group_name'
p44268
Nsa(dp44269
S'description'
p44270
S'The variable to transfer from.\n'
p44271
sS'cpp_type'
p44272
S'VariableName'
p44273
sS'default'
p44274
g3
sS'name'
p44275
S'source_variable'
p44276
sS'required'
p44277
I01
sS'group_name'
p44278
Nsa(dp44279
S'description'
p44280
g3
sS'cpp_type'
p44281
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44282
sS'default'
p44283
S'MultiAppVariableValueSamplePostprocessorTransfer'
p44284
sS'name'
p44285
S'type'
p44286
sS'required'
p44287
I00
sS'group_name'
p44288
Nsa(dp44289
S'description'
p44290
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44291
sS'cpp_type'
p44292
S'bool'
p44293
sS'default'
p44294
S'0'
p44295
sS'name'
p44296
S'use_displaced_mesh'
p44297
sS'required'
p44298
I00
sS'group_name'
p44299
S'Advanced'
p44300
sasS'name'
p44301
S'/Transfers/MultiAppVariableValueSamplePostprocessorTransfer'
p44302
sa(dp44303
S'description'
p44304
g3
sS'subblocks'
p44305
NsS'parameters'
p44306
(lp44307
(dp44308
S'description'
p44309
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44310
sS'cpp_type'
p44311
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44312
sS'default'
p44313
g3
sS'name'
p44314
S'control_tags'
p44315
sS'required'
p44316
I00
sS'group_name'
p44317
S'Advanced'
p44318
sa(dp44319
S'name'
p44320
S'direction'
p44321
sS'cpp_type'
p44322
S'MooseEnum'
p44323
sS'default'
p44324
g3
sS'description'
p44325
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p44326
sS'required'
p44327
I01
sS'options'
p44328
S'to_multiapp from_multiapp'
p44329
sS'group_name'
p44330
Nsa(dp44331
S'description'
p44332
S'Whether or not to use the displaced mesh for the source mesh.\n'
p44333
sS'cpp_type'
p44334
S'bool'
p44335
sS'default'
p44336
S'0'
p44337
sS'name'
p44338
S'displaced_source_mesh'
p44339
sS'required'
p44340
I00
sS'group_name'
p44341
Nsa(dp44342
S'description'
p44343
S'Whether or not to use the displaced mesh for the target mesh.\n'
p44344
sS'cpp_type'
p44345
S'bool'
p44346
sS'default'
p44347
S'0'
p44348
sS'name'
p44349
S'displaced_target_mesh'
p44350
sS'required'
p44351
I00
sS'group_name'
p44352
Nsa(dp44353
S'description'
p44354
S'Set the enabled status of the MooseObject.\n'
p44355
sS'cpp_type'
p44356
S'bool'
p44357
sS'default'
p44358
S'1'
p44359
sS'name'
p44360
S'enable'
p44361
sS'required'
p44362
I00
sS'group_name'
p44363
S'Advanced'
p44364
sa(dp44365
S'name'
p44366
S'execute_on'
p44367
sS'cpp_type'
p44368
S'MultiMooseEnum'
p44369
sS'default'
p44370
S'SAME_AS_MULTIAPP'
p44371
sS'description'
p44372
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44373
sS'required'
p44374
I00
sS'options'
p44375
S'none initial linear nonlinear timestep_end timestep_begin custom same_as_multiapp'
p44376
sS'group_name'
p44377
Nsa(dp44378
S'description'
p44379
S'The name of the MultiApp to use.\n'
p44380
sS'cpp_type'
p44381
S'MultiAppName'
p44382
sS'default'
p44383
g3
sS'name'
p44384
S'multi_app'
p44385
sS'required'
p44386
I01
sS'group_name'
p44387
Nsa(dp44388
S'description'
p44389
S'The variable to transfer from.\n'
p44390
sS'cpp_type'
p44391
S'VariableName'
p44392
sS'default'
p44393
g3
sS'name'
p44394
S'source_variable'
p44395
sS'required'
p44396
I01
sS'group_name'
p44397
Nsa(dp44398
S'description'
p44399
g3
sS'cpp_type'
p44400
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44401
sS'default'
p44402
S'MultiAppVariableValueSampleTransfer'
p44403
sS'name'
p44404
S'type'
p44405
sS'required'
p44406
I00
sS'group_name'
p44407
Nsa(dp44408
S'description'
p44409
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44410
sS'cpp_type'
p44411
S'bool'
p44412
sS'default'
p44413
S'0'
p44414
sS'name'
p44415
S'use_displaced_mesh'
p44416
sS'required'
p44417
I00
sS'group_name'
p44418
S'Advanced'
p44419
sa(dp44420
S'description'
p44421
S'The auxiliary variable to store the transferred values in.\n'
p44422
sS'cpp_type'
p44423
S'AuxVariableName'
p44424
sS'default'
p44425
g3
sS'name'
p44426
S'variable'
p44427
sS'required'
p44428
I01
sS'group_name'
p44429
NsasS'name'
p44430
S'/Transfers/MultiAppVariableValueSampleTransfer'
p44431
sasS'parameters'
p44432
NsS'name'
p44433
S'/Transfers'
p44434
sa(dp44435
S'description'
p44436
g3
sS'subblocks'
p44437
(lp44438
(dp44439
S'description'
p44440
g3
sS'subblocks'
p44441
NsS'parameters'
p44442
(lp44443
(dp44444
S'description'
p44445
S'A string representing the Moose Object that will be built by this Action\n'
p44446
sS'cpp_type'
p44447
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44448
sS'default'
p44449
g3
sS'name'
p44450
S'type'
p44451
sS'required'
p44452
I01
sS'group_name'
p44453
NsasS'name'
p44454
S'/UserObjects/*'
p44455
sa(dp44456
S'description'
p44457
g3
sS'subblocks'
p44458
NsS'parameters'
p44459
(lp44460
(dp44461
S'description'
p44462
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p44463
sS'cpp_type'
p44464
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p44465
sS'default'
p44466
g3
sS'name'
p44467
S'boundary'
p44468
sS'required'
p44469
I01
sS'group_name'
p44470
Nsa(dp44471
S'description'
p44472
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44473
sS'cpp_type'
p44474
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44475
sS'default'
p44476
g3
sS'name'
p44477
S'control_tags'
p44478
sS'required'
p44479
I00
sS'group_name'
p44480
S'Advanced'
p44481
sa(dp44482
S'description'
p44483
S'Set the enabled status of the MooseObject.\n'
p44484
sS'cpp_type'
p44485
S'bool'
p44486
sS'default'
p44487
S'1'
p44488
sS'name'
p44489
S'enable'
p44490
sS'required'
p44491
I00
sS'group_name'
p44492
S'Advanced'
p44493
sa(dp44494
S'name'
p44495
S'execute_on'
p44496
sS'cpp_type'
p44497
S'MultiMooseEnum'
p44498
sS'default'
p44499
S'TIMESTEP_END'
p44500
sS'description'
p44501
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44502
sS'required'
p44503
I00
sS'options'
p44504
S'none initial linear nonlinear timestep_end timestep_begin custom'
p44505
sS'group_name'
p44506
Nsa(dp44507
S'description'
p44508
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p44509
sS'cpp_type'
p44510
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p44511
sS'default'
p44512
g3
sS'name'
p44513
S'outputs'
p44514
sS'required'
p44515
I00
sS'group_name'
p44516
S'Advanced'
p44517
sa(dp44518
S'description'
p44519
g3
sS'cpp_type'
p44520
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44521
sS'default'
p44522
S'AreaPostprocessor'
p44523
sS'name'
p44524
S'type'
p44525
sS'required'
p44526
I00
sS'group_name'
p44527
Nsa(dp44528
S'description'
p44529
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44530
sS'cpp_type'
p44531
S'bool'
p44532
sS'default'
p44533
S'0'
p44534
sS'name'
p44535
S'use_displaced_mesh'
p44536
sS'required'
p44537
I00
sS'group_name'
p44538
S'Advanced'
p44539
sasS'name'
p44540
S'/UserObjects/AreaPostprocessor'
p44541
sa(dp44542
S'description'
p44543
g3
sS'subblocks'
p44544
NsS'parameters'
p44545
(lp44546
(dp44547
S'description'
p44548
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44549
sS'cpp_type'
p44550
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p44551
sS'default'
p44552
g3
sS'name'
p44553
S'block'
p44554
sS'required'
p44555
I00
sS'group_name'
p44556
Nsa(dp44557
S'description'
p44558
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44559
sS'cpp_type'
p44560
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44561
sS'default'
p44562
g3
sS'name'
p44563
S'control_tags'
p44564
sS'required'
p44565
I00
sS'group_name'
p44566
S'Advanced'
p44567
sa(dp44568
S'description'
p44569
S'Set the enabled status of the MooseObject.\n'
p44570
sS'cpp_type'
p44571
S'bool'
p44572
sS'default'
p44573
S'1'
p44574
sS'name'
p44575
S'enable'
p44576
sS'required'
p44577
I00
sS'group_name'
p44578
S'Advanced'
p44579
sa(dp44580
S'name'
p44581
S'execute_on'
p44582
sS'cpp_type'
p44583
S'MultiMooseEnum'
p44584
sS'default'
p44585
S'TIMESTEP_END'
p44586
sS'description'
p44587
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44588
sS'required'
p44589
I00
sS'options'
p44590
S'none initial linear nonlinear timestep_end timestep_begin custom'
p44591
sS'group_name'
p44592
Nsa(dp44593
S'description'
p44594
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p44595
sS'cpp_type'
p44596
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p44597
sS'default'
p44598
g3
sS'name'
p44599
S'outputs'
p44600
sS'required'
p44601
I00
sS'group_name'
p44602
S'Advanced'
p44603
sa(dp44604
S'description'
p44605
S'The seed for the master random number generator\n'
p44606
sS'cpp_type'
p44607
S'unsigned int'
p44608
sS'default'
p44609
S'0'
p44610
sS'name'
p44611
S'seed'
p44612
sS'required'
p44613
I00
sS'group_name'
p44614
S'Advanced'
p44615
sa(dp44616
S'description'
p44617
g3
sS'cpp_type'
p44618
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44619
sS'default'
p44620
S'AverageElementSize'
p44621
sS'name'
p44622
S'type'
p44623
sS'required'
p44624
I00
sS'group_name'
p44625
Nsa(dp44626
S'description'
p44627
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44628
sS'cpp_type'
p44629
S'bool'
p44630
sS'default'
p44631
S'0'
p44632
sS'name'
p44633
S'use_displaced_mesh'
p44634
sS'required'
p44635
I00
sS'group_name'
p44636
S'Advanced'
p44637
sa(dp44638
S'description'
p44639
S'The name of the variable that this object operates on\n'
p44640
sS'cpp_type'
p44641
S'std::vector<VariableName>'
p44642
sS'default'
p44643
g3
sS'name'
p44644
S'variable'
p44645
sS'required'
p44646
I01
sS'group_name'
p44647
NsasS'name'
p44648
S'/UserObjects/AverageElementSize'
p44649
sa(dp44650
S'description'
p44651
g3
sS'subblocks'
p44652
NsS'parameters'
p44653
(lp44654
(dp44655
S'description'
p44656
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44657
sS'cpp_type'
p44658
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p44659
sS'default'
p44660
g3
sS'name'
p44661
S'block'
p44662
sS'required'
p44663
I00
sS'group_name'
p44664
Nsa(dp44665
S'description'
p44666
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p44667
sS'cpp_type'
p44668
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p44669
sS'default'
p44670
g3
sS'name'
p44671
S'boundary'
p44672
sS'required'
p44673
I00
sS'group_name'
p44674
Nsa(dp44675
S'description'
p44676
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44677
sS'cpp_type'
p44678
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44679
sS'default'
p44680
g3
sS'name'
p44681
S'control_tags'
p44682
sS'required'
p44683
I00
sS'group_name'
p44684
S'Advanced'
p44685
sa(dp44686
S'description'
p44687
S'Set the enabled status of the MooseObject.\n'
p44688
sS'cpp_type'
p44689
S'bool'
p44690
sS'default'
p44691
S'1'
p44692
sS'name'
p44693
S'enable'
p44694
sS'required'
p44695
I00
sS'group_name'
p44696
S'Advanced'
p44697
sa(dp44698
S'name'
p44699
S'execute_on'
p44700
sS'cpp_type'
p44701
S'MultiMooseEnum'
p44702
sS'default'
p44703
S'TIMESTEP_END'
p44704
sS'description'
p44705
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44706
sS'required'
p44707
I00
sS'options'
p44708
S'none initial linear nonlinear timestep_end timestep_begin custom'
p44709
sS'group_name'
p44710
Nsa(dp44711
S'description'
p44712
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p44713
sS'cpp_type'
p44714
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p44715
sS'default'
p44716
g3
sS'name'
p44717
S'outputs'
p44718
sS'required'
p44719
I00
sS'group_name'
p44720
S'Advanced'
p44721
sa(dp44722
S'description'
p44723
S'The seed for the master random number generator\n'
p44724
sS'cpp_type'
p44725
S'unsigned int'
p44726
sS'default'
p44727
S'0'
p44728
sS'name'
p44729
S'seed'
p44730
sS'required'
p44731
I00
sS'group_name'
p44732
S'Advanced'
p44733
sa(dp44734
S'description'
p44735
g3
sS'cpp_type'
p44736
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44737
sS'default'
p44738
S'AverageNodalVariableValue'
p44739
sS'name'
p44740
S'type'
p44741
sS'required'
p44742
I00
sS'group_name'
p44743
Nsa(dp44744
S'description'
p44745
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p44746
sS'cpp_type'
p44747
S'bool'
p44748
sS'default'
p44749
S'0'
p44750
sS'name'
p44751
S'unique_node_execute'
p44752
sS'required'
p44753
I00
sS'group_name'
p44754
Nsa(dp44755
S'description'
p44756
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44757
sS'cpp_type'
p44758
S'bool'
p44759
sS'default'
p44760
S'0'
p44761
sS'name'
p44762
S'use_displaced_mesh'
p44763
sS'required'
p44764
I00
sS'group_name'
p44765
S'Advanced'
p44766
sa(dp44767
S'description'
p44768
S'The name of the variable that this postprocessor operates on\n'
p44769
sS'cpp_type'
p44770
S'std::vector<VariableName>'
p44771
sS'default'
p44772
g3
sS'name'
p44773
S'variable'
p44774
sS'required'
p44775
I01
sS'group_name'
p44776
NsasS'name'
p44777
S'/UserObjects/AverageNodalVariableValue'
p44778
sa(dp44779
S'description'
p44780
g3
sS'subblocks'
p44781
NsS'parameters'
p44782
(lp44783
(dp44784
S'description'
p44785
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p44786
sS'cpp_type'
p44787
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p44788
sS'default'
p44789
g3
sS'name'
p44790
S'boundary'
p44791
sS'required'
p44792
I01
sS'group_name'
p44793
Nsa(dp44794
S'description'
p44795
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44796
sS'cpp_type'
p44797
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44798
sS'default'
p44799
g3
sS'name'
p44800
S'control_tags'
p44801
sS'required'
p44802
I00
sS'group_name'
p44803
S'Advanced'
p44804
sa(dp44805
S'description'
p44806
S'Set the enabled status of the MooseObject.\n'
p44807
sS'cpp_type'
p44808
S'bool'
p44809
sS'default'
p44810
S'1'
p44811
sS'name'
p44812
S'enable'
p44813
sS'required'
p44814
I00
sS'group_name'
p44815
S'Advanced'
p44816
sa(dp44817
S'name'
p44818
S'execute_on'
p44819
sS'cpp_type'
p44820
S'MultiMooseEnum'
p44821
sS'default'
p44822
S'TIMESTEP_END'
p44823
sS'description'
p44824
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44825
sS'required'
p44826
I00
sS'options'
p44827
S'none initial linear nonlinear timestep_end timestep_begin custom'
p44828
sS'group_name'
p44829
Nsa(dp44830
S'description'
p44831
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p44832
sS'cpp_type'
p44833
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p44834
sS'default'
p44835
g3
sS'name'
p44836
S'outputs'
p44837
sS'required'
p44838
I00
sS'group_name'
p44839
S'Advanced'
p44840
sa(dp44841
S'description'
p44842
g3
sS'cpp_type'
p44843
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44844
sS'default'
p44845
S'AxisymmetricCenterlineAverageValue'
p44846
sS'name'
p44847
S'type'
p44848
sS'required'
p44849
I00
sS'group_name'
p44850
Nsa(dp44851
S'description'
p44852
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44853
sS'cpp_type'
p44854
S'bool'
p44855
sS'default'
p44856
S'0'
p44857
sS'name'
p44858
S'use_displaced_mesh'
p44859
sS'required'
p44860
I00
sS'group_name'
p44861
S'Advanced'
p44862
sa(dp44863
S'description'
p44864
S'The name of the variable that this boundary condition applies to\n'
p44865
sS'cpp_type'
p44866
S'std::vector<VariableName>'
p44867
sS'default'
p44868
g3
sS'name'
p44869
S'variable'
p44870
sS'required'
p44871
I01
sS'group_name'
p44872
NsasS'name'
p44873
S'/UserObjects/AxisymmetricCenterlineAverageValue'
p44874
sa(dp44875
S'description'
p44876
g3
sS'subblocks'
p44877
NsS'parameters'
p44878
(lp44879
(dp44880
S'description'
p44881
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44882
sS'cpp_type'
p44883
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44884
sS'default'
p44885
g3
sS'name'
p44886
S'control_tags'
p44887
sS'required'
p44888
I00
sS'group_name'
p44889
S'Advanced'
p44890
sa(dp44891
S'description'
p44892
S'Set the enabled status of the MooseObject.\n'
p44893
sS'cpp_type'
p44894
S'bool'
p44895
sS'default'
p44896
S'1'
p44897
sS'name'
p44898
S'enable'
p44899
sS'required'
p44900
I00
sS'group_name'
p44901
S'Advanced'
p44902
sa(dp44903
S'name'
p44904
S'execute_on'
p44905
sS'cpp_type'
p44906
S'MultiMooseEnum'
p44907
sS'default'
p44908
S'TIMESTEP_END'
p44909
sS'description'
p44910
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44911
sS'required'
p44912
I00
sS'options'
p44913
S'none initial linear nonlinear timestep_end timestep_begin custom'
p44914
sS'group_name'
p44915
Nsa(dp44916
S'description'
p44917
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p44918
sS'cpp_type'
p44919
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p44920
sS'default'
p44921
g3
sS'name'
p44922
S'outputs'
p44923
sS'required'
p44924
I00
sS'group_name'
p44925
S'Advanced'
p44926
sa(dp44927
S'description'
p44928
S'The name of the postprocessor\n'
p44929
sS'cpp_type'
p44930
S'PostprocessorName'
p44931
sS'default'
p44932
g3
sS'name'
p44933
S'postprocessor'
p44934
sS'required'
p44935
I01
sS'group_name'
p44936
Nsa(dp44937
S'description'
p44938
g3
sS'cpp_type'
p44939
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44940
sS'default'
p44941
S'CumulativeValuePostprocessor'
p44942
sS'name'
p44943
S'type'
p44944
sS'required'
p44945
I00
sS'group_name'
p44946
Nsa(dp44947
S'description'
p44948
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44949
sS'cpp_type'
p44950
S'bool'
p44951
sS'default'
p44952
S'0'
p44953
sS'name'
p44954
S'use_displaced_mesh'
p44955
sS'required'
p44956
I00
sS'group_name'
p44957
S'Advanced'
p44958
sasS'name'
p44959
S'/UserObjects/CumulativeValuePostprocessor'
p44960
sa(dp44961
S'description'
p44962
g3
sS'subblocks'
p44963
NsS'parameters'
p44964
(lp44965
(dp44966
S'description'
p44967
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p44968
sS'cpp_type'
p44969
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p44970
sS'default'
p44971
g3
sS'name'
p44972
S'control_tags'
p44973
sS'required'
p44974
I00
sS'group_name'
p44975
S'Advanced'
p44976
sa(dp44977
S'description'
p44978
S'Set the enabled status of the MooseObject.\n'
p44979
sS'cpp_type'
p44980
S'bool'
p44981
sS'default'
p44982
S'1'
p44983
sS'name'
p44984
S'enable'
p44985
sS'required'
p44986
I00
sS'group_name'
p44987
S'Advanced'
p44988
sa(dp44989
S'name'
p44990
S'execute_on'
p44991
sS'cpp_type'
p44992
S'MultiMooseEnum'
p44993
sS'default'
p44994
S'TIMESTEP_END'
p44995
sS'description'
p44996
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44997
sS'required'
p44998
I00
sS'options'
p44999
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45000
sS'group_name'
p45001
Nsa(dp45002
S'description'
p45003
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45004
sS'cpp_type'
p45005
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45006
sS'default'
p45007
g3
sS'name'
p45008
S'outputs'
p45009
sS'required'
p45010
I00
sS'group_name'
p45011
S'Advanced'
p45012
sa(dp45013
S'description'
p45014
g3
sS'cpp_type'
p45015
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45016
sS'default'
p45017
S'DifferencePostprocessor'
p45018
sS'name'
p45019
S'type'
p45020
sS'required'
p45021
I00
sS'group_name'
p45022
Nsa(dp45023
S'description'
p45024
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45025
sS'cpp_type'
p45026
S'bool'
p45027
sS'default'
p45028
S'0'
p45029
sS'name'
p45030
S'use_displaced_mesh'
p45031
sS'required'
p45032
I00
sS'group_name'
p45033
S'Advanced'
p45034
sa(dp45035
S'description'
p45036
S'First value\n'
p45037
sS'cpp_type'
p45038
S'PostprocessorName'
p45039
sS'default'
p45040
g3
sS'name'
p45041
S'value1'
p45042
sS'required'
p45043
I01
sS'group_name'
p45044
Nsa(dp45045
S'description'
p45046
S'Second value\n'
p45047
sS'cpp_type'
p45048
S'PostprocessorName'
p45049
sS'default'
p45050
g3
sS'name'
p45051
S'value2'
p45052
sS'required'
p45053
I01
sS'group_name'
p45054
NsasS'name'
p45055
S'/UserObjects/DifferencePostprocessor'
p45056
sa(dp45057
S'description'
p45058
g3
sS'subblocks'
p45059
NsS'parameters'
p45060
(lp45061
(dp45062
S'description'
p45063
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45064
sS'cpp_type'
p45065
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45066
sS'default'
p45067
g3
sS'name'
p45068
S'block'
p45069
sS'required'
p45070
I00
sS'group_name'
p45071
Nsa(dp45072
S'description'
p45073
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45074
sS'cpp_type'
p45075
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45076
sS'default'
p45077
g3
sS'name'
p45078
S'control_tags'
p45079
sS'required'
p45080
I00
sS'group_name'
p45081
S'Advanced'
p45082
sa(dp45083
S'description'
p45084
S'Set the enabled status of the MooseObject.\n'
p45085
sS'cpp_type'
p45086
S'bool'
p45087
sS'default'
p45088
S'1'
p45089
sS'name'
p45090
S'enable'
p45091
sS'required'
p45092
I00
sS'group_name'
p45093
S'Advanced'
p45094
sa(dp45095
S'name'
p45096
S'execute_on'
p45097
sS'cpp_type'
p45098
S'MultiMooseEnum'
p45099
sS'default'
p45100
S'TIMESTEP_END'
p45101
sS'description'
p45102
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45103
sS'required'
p45104
I00
sS'options'
p45105
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45106
sS'group_name'
p45107
Nsa(dp45108
S'description'
p45109
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45110
sS'cpp_type'
p45111
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45112
sS'default'
p45113
g3
sS'name'
p45114
S'outputs'
p45115
sS'required'
p45116
I00
sS'group_name'
p45117
S'Advanced'
p45118
sa(dp45119
S'description'
p45120
S'The seed for the master random number generator\n'
p45121
sS'cpp_type'
p45122
S'unsigned int'
p45123
sS'default'
p45124
S'0'
p45125
sS'name'
p45126
S'seed'
p45127
sS'required'
p45128
I00
sS'group_name'
p45129
S'Advanced'
p45130
sa(dp45131
S'description'
p45132
g3
sS'cpp_type'
p45133
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45134
sS'default'
p45135
S'ElementAverageTimeDerivative'
p45136
sS'name'
p45137
S'type'
p45138
sS'required'
p45139
I00
sS'group_name'
p45140
Nsa(dp45141
S'description'
p45142
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45143
sS'cpp_type'
p45144
S'bool'
p45145
sS'default'
p45146
S'0'
p45147
sS'name'
p45148
S'use_displaced_mesh'
p45149
sS'required'
p45150
I00
sS'group_name'
p45151
S'Advanced'
p45152
sa(dp45153
S'description'
p45154
S'The name of the variable that this object operates on\n'
p45155
sS'cpp_type'
p45156
S'std::vector<VariableName>'
p45157
sS'default'
p45158
g3
sS'name'
p45159
S'variable'
p45160
sS'required'
p45161
I01
sS'group_name'
p45162
NsasS'name'
p45163
S'/UserObjects/ElementAverageTimeDerivative'
p45164
sa(dp45165
S'description'
p45166
g3
sS'subblocks'
p45167
NsS'parameters'
p45168
(lp45169
(dp45170
S'description'
p45171
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45172
sS'cpp_type'
p45173
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45174
sS'default'
p45175
g3
sS'name'
p45176
S'block'
p45177
sS'required'
p45178
I00
sS'group_name'
p45179
Nsa(dp45180
S'description'
p45181
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45182
sS'cpp_type'
p45183
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45184
sS'default'
p45185
g3
sS'name'
p45186
S'control_tags'
p45187
sS'required'
p45188
I00
sS'group_name'
p45189
S'Advanced'
p45190
sa(dp45191
S'description'
p45192
S'Set the enabled status of the MooseObject.\n'
p45193
sS'cpp_type'
p45194
S'bool'
p45195
sS'default'
p45196
S'1'
p45197
sS'name'
p45198
S'enable'
p45199
sS'required'
p45200
I00
sS'group_name'
p45201
S'Advanced'
p45202
sa(dp45203
S'name'
p45204
S'execute_on'
p45205
sS'cpp_type'
p45206
S'MultiMooseEnum'
p45207
sS'default'
p45208
S'TIMESTEP_END'
p45209
sS'description'
p45210
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45211
sS'required'
p45212
I00
sS'options'
p45213
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45214
sS'group_name'
p45215
Nsa(dp45216
S'description'
p45217
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45218
sS'cpp_type'
p45219
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45220
sS'default'
p45221
g3
sS'name'
p45222
S'outputs'
p45223
sS'required'
p45224
I00
sS'group_name'
p45225
S'Advanced'
p45226
sa(dp45227
S'description'
p45228
S'The seed for the master random number generator\n'
p45229
sS'cpp_type'
p45230
S'unsigned int'
p45231
sS'default'
p45232
S'0'
p45233
sS'name'
p45234
S'seed'
p45235
sS'required'
p45236
I00
sS'group_name'
p45237
S'Advanced'
p45238
sa(dp45239
S'description'
p45240
g3
sS'cpp_type'
p45241
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45242
sS'default'
p45243
S'ElementAverageValue'
p45244
sS'name'
p45245
S'type'
p45246
sS'required'
p45247
I00
sS'group_name'
p45248
Nsa(dp45249
S'description'
p45250
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45251
sS'cpp_type'
p45252
S'bool'
p45253
sS'default'
p45254
S'0'
p45255
sS'name'
p45256
S'use_displaced_mesh'
p45257
sS'required'
p45258
I00
sS'group_name'
p45259
S'Advanced'
p45260
sa(dp45261
S'description'
p45262
S'The name of the variable that this object operates on\n'
p45263
sS'cpp_type'
p45264
S'std::vector<VariableName>'
p45265
sS'default'
p45266
g3
sS'name'
p45267
S'variable'
p45268
sS'required'
p45269
I01
sS'group_name'
p45270
NsasS'name'
p45271
S'/UserObjects/ElementAverageValue'
p45272
sa(dp45273
S'description'
p45274
g3
sS'subblocks'
p45275
NsS'parameters'
p45276
(lp45277
(dp45278
S'description'
p45279
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45280
sS'cpp_type'
p45281
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45282
sS'default'
p45283
g3
sS'name'
p45284
S'block'
p45285
sS'required'
p45286
I00
sS'group_name'
p45287
Nsa(dp45288
S'description'
p45289
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45290
sS'cpp_type'
p45291
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45292
sS'default'
p45293
g3
sS'name'
p45294
S'control_tags'
p45295
sS'required'
p45296
I00
sS'group_name'
p45297
S'Advanced'
p45298
sa(dp45299
S'description'
p45300
S'Set the enabled status of the MooseObject.\n'
p45301
sS'cpp_type'
p45302
S'bool'
p45303
sS'default'
p45304
S'1'
p45305
sS'name'
p45306
S'enable'
p45307
sS'required'
p45308
I00
sS'group_name'
p45309
S'Advanced'
p45310
sa(dp45311
S'name'
p45312
S'execute_on'
p45313
sS'cpp_type'
p45314
S'MultiMooseEnum'
p45315
sS'default'
p45316
S'TIMESTEP_END'
p45317
sS'description'
p45318
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45319
sS'required'
p45320
I00
sS'options'
p45321
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45322
sS'group_name'
p45323
Nsa(dp45324
S'description'
p45325
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45326
sS'cpp_type'
p45327
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45328
sS'default'
p45329
g3
sS'name'
p45330
S'outputs'
p45331
sS'required'
p45332
I00
sS'group_name'
p45333
S'Advanced'
p45334
sa(dp45335
S'description'
p45336
S'The seed for the master random number generator\n'
p45337
sS'cpp_type'
p45338
S'unsigned int'
p45339
sS'default'
p45340
S'0'
p45341
sS'name'
p45342
S'seed'
p45343
sS'required'
p45344
I00
sS'group_name'
p45345
S'Advanced'
p45346
sa(dp45347
S'description'
p45348
g3
sS'cpp_type'
p45349
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45350
sS'default'
p45351
S'ElementExtremeValue'
p45352
sS'name'
p45353
S'type'
p45354
sS'required'
p45355
I00
sS'group_name'
p45356
Nsa(dp45357
S'description'
p45358
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45359
sS'cpp_type'
p45360
S'bool'
p45361
sS'default'
p45362
S'0'
p45363
sS'name'
p45364
S'use_displaced_mesh'
p45365
sS'required'
p45366
I00
sS'group_name'
p45367
S'Advanced'
p45368
sa(dp45369
S'name'
p45370
S'value_type'
p45371
sS'cpp_type'
p45372
S'MooseEnum'
p45373
sS'default'
p45374
S'max'
p45375
sS'description'
p45376
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p45377
sS'required'
p45378
I00
sS'options'
p45379
S'max min'
p45380
sS'group_name'
p45381
Nsa(dp45382
S'description'
p45383
S'The name of the variable that this postprocessor operates on\n'
p45384
sS'cpp_type'
p45385
S'std::vector<VariableName>'
p45386
sS'default'
p45387
g3
sS'name'
p45388
S'variable'
p45389
sS'required'
p45390
I01
sS'group_name'
p45391
NsasS'name'
p45392
S'/UserObjects/ElementExtremeValue'
p45393
sa(dp45394
S'description'
p45395
g3
sS'subblocks'
p45396
NsS'parameters'
p45397
(lp45398
(dp45399
S'description'
p45400
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45401
sS'cpp_type'
p45402
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45403
sS'default'
p45404
g3
sS'name'
p45405
S'block'
p45406
sS'required'
p45407
I00
sS'group_name'
p45408
Nsa(dp45409
S'description'
p45410
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45411
sS'cpp_type'
p45412
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45413
sS'default'
p45414
g3
sS'name'
p45415
S'control_tags'
p45416
sS'required'
p45417
I00
sS'group_name'
p45418
S'Advanced'
p45419
sa(dp45420
S'description'
p45421
S'Set the enabled status of the MooseObject.\n'
p45422
sS'cpp_type'
p45423
S'bool'
p45424
sS'default'
p45425
S'1'
p45426
sS'name'
p45427
S'enable'
p45428
sS'required'
p45429
I00
sS'group_name'
p45430
S'Advanced'
p45431
sa(dp45432
S'name'
p45433
S'execute_on'
p45434
sS'cpp_type'
p45435
S'MultiMooseEnum'
p45436
sS'default'
p45437
S'TIMESTEP_END'
p45438
sS'description'
p45439
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45440
sS'required'
p45441
I00
sS'options'
p45442
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45443
sS'group_name'
p45444
Nsa(dp45445
S'description'
p45446
S'The analytic solution to compare against\n'
p45447
sS'cpp_type'
p45448
S'FunctionName'
p45449
sS'default'
p45450
g3
sS'name'
p45451
S'function'
p45452
sS'required'
p45453
I01
sS'group_name'
p45454
Nsa(dp45455
S'description'
p45456
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45457
sS'cpp_type'
p45458
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45459
sS'default'
p45460
g3
sS'name'
p45461
S'outputs'
p45462
sS'required'
p45463
I00
sS'group_name'
p45464
S'Advanced'
p45465
sa(dp45466
S'description'
p45467
S'The exponent used in the norm.\n'
p45468
sS'cpp_type'
p45469
S'double'
p45470
sS'default'
p45471
S'2'
p45472
sS'name'
p45473
S'p'
p45474
sS'required'
p45475
I00
sS'group_name'
p45476
Nsa(dp45477
S'description'
p45478
S'The seed for the master random number generator\n'
p45479
sS'cpp_type'
p45480
S'unsigned int'
p45481
sS'default'
p45482
S'0'
p45483
sS'name'
p45484
S'seed'
p45485
sS'required'
p45486
I00
sS'group_name'
p45487
S'Advanced'
p45488
sa(dp45489
S'description'
p45490
g3
sS'cpp_type'
p45491
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45492
sS'default'
p45493
S'ElementH1Error'
p45494
sS'name'
p45495
S'type'
p45496
sS'required'
p45497
I00
sS'group_name'
p45498
Nsa(dp45499
S'description'
p45500
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45501
sS'cpp_type'
p45502
S'bool'
p45503
sS'default'
p45504
S'0'
p45505
sS'name'
p45506
S'use_displaced_mesh'
p45507
sS'required'
p45508
I00
sS'group_name'
p45509
S'Advanced'
p45510
sa(dp45511
S'description'
p45512
S'The name of the variable that this object operates on\n'
p45513
sS'cpp_type'
p45514
S'std::vector<VariableName>'
p45515
sS'default'
p45516
g3
sS'name'
p45517
S'variable'
p45518
sS'required'
p45519
I01
sS'group_name'
p45520
NsasS'name'
p45521
S'/UserObjects/ElementH1Error'
p45522
sa(dp45523
S'description'
p45524
g3
sS'subblocks'
p45525
NsS'parameters'
p45526
(lp45527
(dp45528
S'description'
p45529
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45530
sS'cpp_type'
p45531
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45532
sS'default'
p45533
g3
sS'name'
p45534
S'block'
p45535
sS'required'
p45536
I00
sS'group_name'
p45537
Nsa(dp45538
S'description'
p45539
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45540
sS'cpp_type'
p45541
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45542
sS'default'
p45543
g3
sS'name'
p45544
S'control_tags'
p45545
sS'required'
p45546
I00
sS'group_name'
p45547
S'Advanced'
p45548
sa(dp45549
S'description'
p45550
S'Set the enabled status of the MooseObject.\n'
p45551
sS'cpp_type'
p45552
S'bool'
p45553
sS'default'
p45554
S'1'
p45555
sS'name'
p45556
S'enable'
p45557
sS'required'
p45558
I00
sS'group_name'
p45559
S'Advanced'
p45560
sa(dp45561
S'name'
p45562
S'execute_on'
p45563
sS'cpp_type'
p45564
S'MultiMooseEnum'
p45565
sS'default'
p45566
S'TIMESTEP_END'
p45567
sS'description'
p45568
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45569
sS'required'
p45570
I00
sS'options'
p45571
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45572
sS'group_name'
p45573
Nsa(dp45574
S'description'
p45575
S'The analytic solution to compare against\n'
p45576
sS'cpp_type'
p45577
S'FunctionName'
p45578
sS'default'
p45579
g3
sS'name'
p45580
S'function'
p45581
sS'required'
p45582
I01
sS'group_name'
p45583
Nsa(dp45584
S'description'
p45585
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45586
sS'cpp_type'
p45587
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45588
sS'default'
p45589
g3
sS'name'
p45590
S'outputs'
p45591
sS'required'
p45592
I00
sS'group_name'
p45593
S'Advanced'
p45594
sa(dp45595
S'description'
p45596
S'The seed for the master random number generator\n'
p45597
sS'cpp_type'
p45598
S'unsigned int'
p45599
sS'default'
p45600
S'0'
p45601
sS'name'
p45602
S'seed'
p45603
sS'required'
p45604
I00
sS'group_name'
p45605
S'Advanced'
p45606
sa(dp45607
S'description'
p45608
g3
sS'cpp_type'
p45609
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45610
sS'default'
p45611
S'ElementH1SemiError'
p45612
sS'name'
p45613
S'type'
p45614
sS'required'
p45615
I00
sS'group_name'
p45616
Nsa(dp45617
S'description'
p45618
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45619
sS'cpp_type'
p45620
S'bool'
p45621
sS'default'
p45622
S'0'
p45623
sS'name'
p45624
S'use_displaced_mesh'
p45625
sS'required'
p45626
I00
sS'group_name'
p45627
S'Advanced'
p45628
sa(dp45629
S'description'
p45630
S'The name of the variable that this object operates on\n'
p45631
sS'cpp_type'
p45632
S'std::vector<VariableName>'
p45633
sS'default'
p45634
g3
sS'name'
p45635
S'variable'
p45636
sS'required'
p45637
I01
sS'group_name'
p45638
NsasS'name'
p45639
S'/UserObjects/ElementH1SemiError'
p45640
sa(dp45641
S'description'
p45642
g3
sS'subblocks'
p45643
NsS'parameters'
p45644
(lp45645
(dp45646
S'description'
p45647
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45648
sS'cpp_type'
p45649
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45650
sS'default'
p45651
g3
sS'name'
p45652
S'block'
p45653
sS'required'
p45654
I00
sS'group_name'
p45655
Nsa(dp45656
S'description'
p45657
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45658
sS'cpp_type'
p45659
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45660
sS'default'
p45661
g3
sS'name'
p45662
S'control_tags'
p45663
sS'required'
p45664
I00
sS'group_name'
p45665
S'Advanced'
p45666
sa(dp45667
S'description'
p45668
S'Set the enabled status of the MooseObject.\n'
p45669
sS'cpp_type'
p45670
S'bool'
p45671
sS'default'
p45672
S'1'
p45673
sS'name'
p45674
S'enable'
p45675
sS'required'
p45676
I00
sS'group_name'
p45677
S'Advanced'
p45678
sa(dp45679
S'name'
p45680
S'execute_on'
p45681
sS'cpp_type'
p45682
S'MultiMooseEnum'
p45683
sS'default'
p45684
S'TIMESTEP_END'
p45685
sS'description'
p45686
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45687
sS'required'
p45688
I00
sS'options'
p45689
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45690
sS'group_name'
p45691
Nsa(dp45692
S'description'
p45693
S'The name of the material property\n'
p45694
sS'cpp_type'
p45695
S'MaterialPropertyName'
p45696
sS'default'
p45697
g3
sS'name'
p45698
S'mat_prop'
p45699
sS'required'
p45700
I01
sS'group_name'
p45701
Nsa(dp45702
S'description'
p45703
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45704
sS'cpp_type'
p45705
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45706
sS'default'
p45707
g3
sS'name'
p45708
S'outputs'
p45709
sS'required'
p45710
I00
sS'group_name'
p45711
S'Advanced'
p45712
sa(dp45713
S'description'
p45714
S'The seed for the master random number generator\n'
p45715
sS'cpp_type'
p45716
S'unsigned int'
p45717
sS'default'
p45718
S'0'
p45719
sS'name'
p45720
S'seed'
p45721
sS'required'
p45722
I00
sS'group_name'
p45723
S'Advanced'
p45724
sa(dp45725
S'description'
p45726
g3
sS'cpp_type'
p45727
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45728
sS'default'
p45729
S'ElementIntegralMaterialProperty'
p45730
sS'name'
p45731
S'type'
p45732
sS'required'
p45733
I00
sS'group_name'
p45734
Nsa(dp45735
S'description'
p45736
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45737
sS'cpp_type'
p45738
S'bool'
p45739
sS'default'
p45740
S'0'
p45741
sS'name'
p45742
S'use_displaced_mesh'
p45743
sS'required'
p45744
I00
sS'group_name'
p45745
S'Advanced'
p45746
sasS'name'
p45747
S'/UserObjects/ElementIntegralMaterialProperty'
p45748
sa(dp45749
S'description'
p45750
g3
sS'subblocks'
p45751
NsS'parameters'
p45752
(lp45753
(dp45754
S'description'
p45755
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45756
sS'cpp_type'
p45757
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45758
sS'default'
p45759
g3
sS'name'
p45760
S'block'
p45761
sS'required'
p45762
I00
sS'group_name'
p45763
Nsa(dp45764
S'description'
p45765
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45766
sS'cpp_type'
p45767
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45768
sS'default'
p45769
g3
sS'name'
p45770
S'control_tags'
p45771
sS'required'
p45772
I00
sS'group_name'
p45773
S'Advanced'
p45774
sa(dp45775
S'description'
p45776
S'Set the enabled status of the MooseObject.\n'
p45777
sS'cpp_type'
p45778
S'bool'
p45779
sS'default'
p45780
S'1'
p45781
sS'name'
p45782
S'enable'
p45783
sS'required'
p45784
I00
sS'group_name'
p45785
S'Advanced'
p45786
sa(dp45787
S'name'
p45788
S'execute_on'
p45789
sS'cpp_type'
p45790
S'MultiMooseEnum'
p45791
sS'default'
p45792
S'TIMESTEP_END'
p45793
sS'description'
p45794
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45795
sS'required'
p45796
I00
sS'options'
p45797
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45798
sS'group_name'
p45799
Nsa(dp45800
S'description'
p45801
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p45802
sS'cpp_type'
p45803
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45804
sS'default'
p45805
g3
sS'name'
p45806
S'outputs'
p45807
sS'required'
p45808
I00
sS'group_name'
p45809
S'Advanced'
p45810
sa(dp45811
S'description'
p45812
S'The seed for the master random number generator\n'
p45813
sS'cpp_type'
p45814
S'unsigned int'
p45815
sS'default'
p45816
S'0'
p45817
sS'name'
p45818
S'seed'
p45819
sS'required'
p45820
I00
sS'group_name'
p45821
S'Advanced'
p45822
sa(dp45823
S'description'
p45824
g3
sS'cpp_type'
p45825
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45826
sS'default'
p45827
S'ElementIntegralVariablePostprocessor'
p45828
sS'name'
p45829
S'type'
p45830
sS'required'
p45831
I00
sS'group_name'
p45832
Nsa(dp45833
S'description'
p45834
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45835
sS'cpp_type'
p45836
S'bool'
p45837
sS'default'
p45838
S'0'
p45839
sS'name'
p45840
S'use_displaced_mesh'
p45841
sS'required'
p45842
I00
sS'group_name'
p45843
S'Advanced'
p45844
sa(dp45845
S'description'
p45846
S'The name of the variable that this object operates on\n'
p45847
sS'cpp_type'
p45848
S'std::vector<VariableName>'
p45849
sS'default'
p45850
g3
sS'name'
p45851
S'variable'
p45852
sS'required'
p45853
I01
sS'group_name'
p45854
NsasS'name'
p45855
S'/UserObjects/ElementIntegralVariablePostprocessor'
p45856
sa(dp45857
S'description'
p45858
g3
sS'subblocks'
p45859
NsS'parameters'
p45860
(lp45861
(dp45862
S'description'
p45863
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45864
sS'cpp_type'
p45865
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45866
sS'default'
p45867
g3
sS'name'
p45868
S'block'
p45869
sS'required'
p45870
I00
sS'group_name'
p45871
Nsa(dp45872
S'description'
p45873
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45874
sS'cpp_type'
p45875
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45876
sS'default'
p45877
g3
sS'name'
p45878
S'control_tags'
p45879
sS'required'
p45880
I00
sS'group_name'
p45881
S'Advanced'
p45882
sa(dp45883
S'description'
p45884
S'Set the enabled status of the MooseObject.\n'
p45885
sS'cpp_type'
p45886
S'bool'
p45887
sS'default'
p45888
S'1'
p45889
sS'name'
p45890
S'enable'
p45891
sS'required'
p45892
I00
sS'group_name'
p45893
S'Advanced'
p45894
sa(dp45895
S'name'
p45896
S'execute_on'
p45897
sS'cpp_type'
p45898
S'MultiMooseEnum'
p45899
sS'default'
p45900
S'TIMESTEP_END'
p45901
sS'description'
p45902
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45903
sS'required'
p45904
I00
sS'options'
p45905
S'none initial linear nonlinear timestep_end timestep_begin custom'
p45906
sS'group_name'
p45907
Nsa(dp45908
S'description'
p45909
S'The seed for the master random number generator\n'
p45910
sS'cpp_type'
p45911
S'unsigned int'
p45912
sS'default'
p45913
S'0'
p45914
sS'name'
p45915
S'seed'
p45916
sS'required'
p45917
I00
sS'group_name'
p45918
S'Advanced'
p45919
sa(dp45920
S'description'
p45921
g3
sS'cpp_type'
p45922
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45923
sS'default'
p45924
S'ElementIntegralVariableUserObject'
p45925
sS'name'
p45926
S'type'
p45927
sS'required'
p45928
I00
sS'group_name'
p45929
Nsa(dp45930
S'description'
p45931
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45932
sS'cpp_type'
p45933
S'bool'
p45934
sS'default'
p45935
S'0'
p45936
sS'name'
p45937
S'use_displaced_mesh'
p45938
sS'required'
p45939
I00
sS'group_name'
p45940
S'Advanced'
p45941
sa(dp45942
S'description'
p45943
S'The name of the variable that this object operates on\n'
p45944
sS'cpp_type'
p45945
S'std::vector<VariableName>'
p45946
sS'default'
p45947
g3
sS'name'
p45948
S'variable'
p45949
sS'required'
p45950
I01
sS'group_name'
p45951
NsasS'name'
p45952
S'/UserObjects/ElementIntegralVariableUserObject'
p45953
sa(dp45954
S'description'
p45955
g3
sS'subblocks'
p45956
NsS'parameters'
p45957
(lp45958
(dp45959
S'description'
p45960
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45961
sS'cpp_type'
p45962
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45963
sS'default'
p45964
g3
sS'name'
p45965
S'block'
p45966
sS'required'
p45967
I00
sS'group_name'
p45968
Nsa(dp45969
S'description'
p45970
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p45971
sS'cpp_type'
p45972
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45973
sS'default'
p45974
g3
sS'name'
p45975
S'control_tags'
p45976
sS'required'
p45977
I00
sS'group_name'
p45978
S'Advanced'
p45979
sa(dp45980
S'description'
p45981
S'Set the enabled status of the MooseObject.\n'
p45982
sS'cpp_type'
p45983
S'bool'
p45984
sS'default'
p45985
S'1'
p45986
sS'name'
p45987
S'enable'
p45988
sS'required'
p45989
I00
sS'group_name'
p45990
S'Advanced'
p45991
sa(dp45992
S'name'
p45993
S'execute_on'
p45994
sS'cpp_type'
p45995
S'MultiMooseEnum'
p45996
sS'default'
p45997
S'TIMESTEP_END'
p45998
sS'description'
p45999
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46000
sS'required'
p46001
I00
sS'options'
p46002
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46003
sS'group_name'
p46004
Nsa(dp46005
S'description'
p46006
S'The variable to compare to\n'
p46007
sS'cpp_type'
p46008
S'std::vector<VariableName>'
p46009
sS'default'
p46010
g3
sS'name'
p46011
S'other_variable'
p46012
sS'required'
p46013
I01
sS'group_name'
p46014
Nsa(dp46015
S'description'
p46016
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46017
sS'cpp_type'
p46018
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46019
sS'default'
p46020
g3
sS'name'
p46021
S'outputs'
p46022
sS'required'
p46023
I00
sS'group_name'
p46024
S'Advanced'
p46025
sa(dp46026
S'description'
p46027
S'The seed for the master random number generator\n'
p46028
sS'cpp_type'
p46029
S'unsigned int'
p46030
sS'default'
p46031
S'0'
p46032
sS'name'
p46033
S'seed'
p46034
sS'required'
p46035
I00
sS'group_name'
p46036
S'Advanced'
p46037
sa(dp46038
S'description'
p46039
g3
sS'cpp_type'
p46040
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46041
sS'default'
p46042
S'ElementL2Difference'
p46043
sS'name'
p46044
S'type'
p46045
sS'required'
p46046
I00
sS'group_name'
p46047
Nsa(dp46048
S'description'
p46049
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46050
sS'cpp_type'
p46051
S'bool'
p46052
sS'default'
p46053
S'0'
p46054
sS'name'
p46055
S'use_displaced_mesh'
p46056
sS'required'
p46057
I00
sS'group_name'
p46058
S'Advanced'
p46059
sa(dp46060
S'description'
p46061
S'The name of the variable that this object operates on\n'
p46062
sS'cpp_type'
p46063
S'std::vector<VariableName>'
p46064
sS'default'
p46065
g3
sS'name'
p46066
S'variable'
p46067
sS'required'
p46068
I01
sS'group_name'
p46069
NsasS'name'
p46070
S'/UserObjects/ElementL2Difference'
p46071
sa(dp46072
S'description'
p46073
g3
sS'subblocks'
p46074
NsS'parameters'
p46075
(lp46076
(dp46077
S'description'
p46078
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46079
sS'cpp_type'
p46080
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p46081
sS'default'
p46082
g3
sS'name'
p46083
S'block'
p46084
sS'required'
p46085
I00
sS'group_name'
p46086
Nsa(dp46087
S'description'
p46088
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46089
sS'cpp_type'
p46090
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46091
sS'default'
p46092
g3
sS'name'
p46093
S'control_tags'
p46094
sS'required'
p46095
I00
sS'group_name'
p46096
S'Advanced'
p46097
sa(dp46098
S'description'
p46099
S'Set the enabled status of the MooseObject.\n'
p46100
sS'cpp_type'
p46101
S'bool'
p46102
sS'default'
p46103
S'1'
p46104
sS'name'
p46105
S'enable'
p46106
sS'required'
p46107
I00
sS'group_name'
p46108
S'Advanced'
p46109
sa(dp46110
S'name'
p46111
S'execute_on'
p46112
sS'cpp_type'
p46113
S'MultiMooseEnum'
p46114
sS'default'
p46115
S'TIMESTEP_END'
p46116
sS'description'
p46117
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46118
sS'required'
p46119
I00
sS'options'
p46120
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46121
sS'group_name'
p46122
Nsa(dp46123
S'description'
p46124
S'The analytic solution to compare against\n'
p46125
sS'cpp_type'
p46126
S'FunctionName'
p46127
sS'default'
p46128
g3
sS'name'
p46129
S'function'
p46130
sS'required'
p46131
I01
sS'group_name'
p46132
Nsa(dp46133
S'description'
p46134
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46135
sS'cpp_type'
p46136
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46137
sS'default'
p46138
g3
sS'name'
p46139
S'outputs'
p46140
sS'required'
p46141
I00
sS'group_name'
p46142
S'Advanced'
p46143
sa(dp46144
S'description'
p46145
S'The seed for the master random number generator\n'
p46146
sS'cpp_type'
p46147
S'unsigned int'
p46148
sS'default'
p46149
S'0'
p46150
sS'name'
p46151
S'seed'
p46152
sS'required'
p46153
I00
sS'group_name'
p46154
S'Advanced'
p46155
sa(dp46156
S'description'
p46157
g3
sS'cpp_type'
p46158
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46159
sS'default'
p46160
S'ElementL2Error'
p46161
sS'name'
p46162
S'type'
p46163
sS'required'
p46164
I00
sS'group_name'
p46165
Nsa(dp46166
S'description'
p46167
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46168
sS'cpp_type'
p46169
S'bool'
p46170
sS'default'
p46171
S'0'
p46172
sS'name'
p46173
S'use_displaced_mesh'
p46174
sS'required'
p46175
I00
sS'group_name'
p46176
S'Advanced'
p46177
sa(dp46178
S'description'
p46179
S'The name of the variable that this object operates on\n'
p46180
sS'cpp_type'
p46181
S'std::vector<VariableName>'
p46182
sS'default'
p46183
g3
sS'name'
p46184
S'variable'
p46185
sS'required'
p46186
I01
sS'group_name'
p46187
NsasS'name'
p46188
S'/UserObjects/ElementL2Error'
p46189
sa(dp46190
S'description'
p46191
g3
sS'subblocks'
p46192
NsS'parameters'
p46193
(lp46194
(dp46195
S'description'
p46196
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46197
sS'cpp_type'
p46198
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p46199
sS'default'
p46200
g3
sS'name'
p46201
S'block'
p46202
sS'required'
p46203
I00
sS'group_name'
p46204
Nsa(dp46205
S'description'
p46206
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46207
sS'cpp_type'
p46208
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46209
sS'default'
p46210
g3
sS'name'
p46211
S'control_tags'
p46212
sS'required'
p46213
I00
sS'group_name'
p46214
S'Advanced'
p46215
sa(dp46216
S'description'
p46217
S'Set the enabled status of the MooseObject.\n'
p46218
sS'cpp_type'
p46219
S'bool'
p46220
sS'default'
p46221
S'1'
p46222
sS'name'
p46223
S'enable'
p46224
sS'required'
p46225
I00
sS'group_name'
p46226
S'Advanced'
p46227
sa(dp46228
S'name'
p46229
S'execute_on'
p46230
sS'cpp_type'
p46231
S'MultiMooseEnum'
p46232
sS'default'
p46233
S'TIMESTEP_END'
p46234
sS'description'
p46235
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46236
sS'required'
p46237
I00
sS'options'
p46238
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46239
sS'group_name'
p46240
Nsa(dp46241
S'description'
p46242
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46243
sS'cpp_type'
p46244
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46245
sS'default'
p46246
g3
sS'name'
p46247
S'outputs'
p46248
sS'required'
p46249
I00
sS'group_name'
p46250
S'Advanced'
p46251
sa(dp46252
S'description'
p46253
S'The seed for the master random number generator\n'
p46254
sS'cpp_type'
p46255
S'unsigned int'
p46256
sS'default'
p46257
S'0'
p46258
sS'name'
p46259
S'seed'
p46260
sS'required'
p46261
I00
sS'group_name'
p46262
S'Advanced'
p46263
sa(dp46264
S'description'
p46265
g3
sS'cpp_type'
p46266
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46267
sS'default'
p46268
S'ElementL2Norm'
p46269
sS'name'
p46270
S'type'
p46271
sS'required'
p46272
I00
sS'group_name'
p46273
Nsa(dp46274
S'description'
p46275
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46276
sS'cpp_type'
p46277
S'bool'
p46278
sS'default'
p46279
S'0'
p46280
sS'name'
p46281
S'use_displaced_mesh'
p46282
sS'required'
p46283
I00
sS'group_name'
p46284
S'Advanced'
p46285
sa(dp46286
S'description'
p46287
S'The name of the variable that this object operates on\n'
p46288
sS'cpp_type'
p46289
S'std::vector<VariableName>'
p46290
sS'default'
p46291
g3
sS'name'
p46292
S'variable'
p46293
sS'required'
p46294
I01
sS'group_name'
p46295
NsasS'name'
p46296
S'/UserObjects/ElementL2Norm'
p46297
sa(dp46298
S'description'
p46299
g3
sS'subblocks'
p46300
NsS'parameters'
p46301
(lp46302
(dp46303
S'description'
p46304
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46305
sS'cpp_type'
p46306
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p46307
sS'default'
p46308
g3
sS'name'
p46309
S'block'
p46310
sS'required'
p46311
I00
sS'group_name'
p46312
Nsa(dp46313
S'description'
p46314
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46315
sS'cpp_type'
p46316
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46317
sS'default'
p46318
g3
sS'name'
p46319
S'control_tags'
p46320
sS'required'
p46321
I00
sS'group_name'
p46322
S'Advanced'
p46323
sa(dp46324
S'description'
p46325
S'Set the enabled status of the MooseObject.\n'
p46326
sS'cpp_type'
p46327
S'bool'
p46328
sS'default'
p46329
S'1'
p46330
sS'name'
p46331
S'enable'
p46332
sS'required'
p46333
I00
sS'group_name'
p46334
S'Advanced'
p46335
sa(dp46336
S'name'
p46337
S'execute_on'
p46338
sS'cpp_type'
p46339
S'MultiMooseEnum'
p46340
sS'default'
p46341
S'TIMESTEP_END'
p46342
sS'description'
p46343
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46344
sS'required'
p46345
I00
sS'options'
p46346
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46347
sS'group_name'
p46348
Nsa(dp46349
S'description'
p46350
S'The analytic solution to compare against\n'
p46351
sS'cpp_type'
p46352
S'FunctionName'
p46353
sS'default'
p46354
g3
sS'name'
p46355
S'function_x'
p46356
sS'required'
p46357
I01
sS'group_name'
p46358
Nsa(dp46359
S'description'
p46360
S'The analytic solution to compare against\n'
p46361
sS'cpp_type'
p46362
S'FunctionName'
p46363
sS'default'
p46364
S'0'
p46365
sS'name'
p46366
S'function_y'
p46367
sS'required'
p46368
I00
sS'group_name'
p46369
Nsa(dp46370
S'description'
p46371
S'The analytic solution to compare against\n'
p46372
sS'cpp_type'
p46373
S'FunctionName'
p46374
sS'default'
p46375
S'0'
p46376
sS'name'
p46377
S'function_z'
p46378
sS'required'
p46379
I00
sS'group_name'
p46380
Nsa(dp46381
S'description'
p46382
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46383
sS'cpp_type'
p46384
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46385
sS'default'
p46386
g3
sS'name'
p46387
S'outputs'
p46388
sS'required'
p46389
I00
sS'group_name'
p46390
S'Advanced'
p46391
sa(dp46392
S'description'
p46393
S'The seed for the master random number generator\n'
p46394
sS'cpp_type'
p46395
S'unsigned int'
p46396
sS'default'
p46397
S'0'
p46398
sS'name'
p46399
S'seed'
p46400
sS'required'
p46401
I00
sS'group_name'
p46402
S'Advanced'
p46403
sa(dp46404
S'description'
p46405
g3
sS'cpp_type'
p46406
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46407
sS'default'
p46408
S'ElementVectorL2Error'
p46409
sS'name'
p46410
S'type'
p46411
sS'required'
p46412
I00
sS'group_name'
p46413
Nsa(dp46414
S'description'
p46415
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46416
sS'cpp_type'
p46417
S'bool'
p46418
sS'default'
p46419
S'0'
p46420
sS'name'
p46421
S'use_displaced_mesh'
p46422
sS'required'
p46423
I00
sS'group_name'
p46424
S'Advanced'
p46425
sa(dp46426
S'description'
p46427
S'The FE solution in x direction\n'
p46428
sS'cpp_type'
p46429
S'std::vector<VariableName>'
p46430
sS'default'
p46431
g3
sS'name'
p46432
S'var_x'
p46433
sS'required'
p46434
I01
sS'group_name'
p46435
Nsa(dp46436
S'description'
p46437
S'The FE solution in y direction\n'
p46438
sS'cpp_type'
p46439
S'std::vector<VariableName>'
p46440
sS'default'
p46441
S'0'
p46442
sS'name'
p46443
S'var_y'
p46444
sS'required'
p46445
I00
sS'group_name'
p46446
Nsa(dp46447
S'description'
p46448
S'The FE solution in z direction\n'
p46449
sS'cpp_type'
p46450
S'std::vector<VariableName>'
p46451
sS'default'
p46452
S'0'
p46453
sS'name'
p46454
S'var_z'
p46455
sS'required'
p46456
I00
sS'group_name'
p46457
NsasS'name'
p46458
S'/UserObjects/ElementVectorL2Error'
p46459
sa(dp46460
S'description'
p46461
g3
sS'subblocks'
p46462
NsS'parameters'
p46463
(lp46464
(dp46465
S'description'
p46466
S'The list of block ids (SubdomainID) that this object will be applied\n'
p46467
sS'cpp_type'
p46468
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p46469
sS'default'
p46470
g3
sS'name'
p46471
S'block'
p46472
sS'required'
p46473
I00
sS'group_name'
p46474
Nsa(dp46475
S'description'
p46476
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46477
sS'cpp_type'
p46478
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46479
sS'default'
p46480
g3
sS'name'
p46481
S'control_tags'
p46482
sS'required'
p46483
I00
sS'group_name'
p46484
S'Advanced'
p46485
sa(dp46486
S'description'
p46487
S'Set the enabled status of the MooseObject.\n'
p46488
sS'cpp_type'
p46489
S'bool'
p46490
sS'default'
p46491
S'1'
p46492
sS'name'
p46493
S'enable'
p46494
sS'required'
p46495
I00
sS'group_name'
p46496
S'Advanced'
p46497
sa(dp46498
S'name'
p46499
S'execute_on'
p46500
sS'cpp_type'
p46501
S'MultiMooseEnum'
p46502
sS'default'
p46503
S'TIMESTEP_END'
p46504
sS'description'
p46505
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46506
sS'required'
p46507
I00
sS'options'
p46508
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46509
sS'group_name'
p46510
Nsa(dp46511
S'description'
p46512
S'The analytic solution to compare against\n'
p46513
sS'cpp_type'
p46514
S'FunctionName'
p46515
sS'default'
p46516
g3
sS'name'
p46517
S'function'
p46518
sS'required'
p46519
I01
sS'group_name'
p46520
Nsa(dp46521
S'description'
p46522
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46523
sS'cpp_type'
p46524
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46525
sS'default'
p46526
g3
sS'name'
p46527
S'outputs'
p46528
sS'required'
p46529
I00
sS'group_name'
p46530
S'Advanced'
p46531
sa(dp46532
S'description'
p46533
S'The exponent used in the norm.\n'
p46534
sS'cpp_type'
p46535
S'double'
p46536
sS'default'
p46537
S'2'
p46538
sS'name'
p46539
S'p'
p46540
sS'required'
p46541
I00
sS'group_name'
p46542
Nsa(dp46543
S'description'
p46544
S'The seed for the master random number generator\n'
p46545
sS'cpp_type'
p46546
S'unsigned int'
p46547
sS'default'
p46548
S'0'
p46549
sS'name'
p46550
S'seed'
p46551
sS'required'
p46552
I00
sS'group_name'
p46553
S'Advanced'
p46554
sa(dp46555
S'description'
p46556
g3
sS'cpp_type'
p46557
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46558
sS'default'
p46559
S'ElementW1pError'
p46560
sS'name'
p46561
S'type'
p46562
sS'required'
p46563
I00
sS'group_name'
p46564
Nsa(dp46565
S'description'
p46566
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46567
sS'cpp_type'
p46568
S'bool'
p46569
sS'default'
p46570
S'0'
p46571
sS'name'
p46572
S'use_displaced_mesh'
p46573
sS'required'
p46574
I00
sS'group_name'
p46575
S'Advanced'
p46576
sa(dp46577
S'description'
p46578
S'The name of the variable that this object operates on\n'
p46579
sS'cpp_type'
p46580
S'std::vector<VariableName>'
p46581
sS'default'
p46582
g3
sS'name'
p46583
S'variable'
p46584
sS'required'
p46585
I01
sS'group_name'
p46586
NsasS'name'
p46587
S'/UserObjects/ElementW1pError'
p46588
sa(dp46589
S'description'
p46590
g3
sS'subblocks'
p46591
NsS'parameters'
p46592
(lp46593
(dp46594
S'description'
p46595
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46596
sS'cpp_type'
p46597
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46598
sS'default'
p46599
g3
sS'name'
p46600
S'control_tags'
p46601
sS'required'
p46602
I00
sS'group_name'
p46603
S'Advanced'
p46604
sa(dp46605
S'description'
p46606
S'The ID of the element where we monitor\n'
p46607
sS'cpp_type'
p46608
S'unsigned int'
p46609
sS'default'
p46610
g3
sS'name'
p46611
S'elementid'
p46612
sS'required'
p46613
I01
sS'group_name'
p46614
Nsa(dp46615
S'description'
p46616
S'Set the enabled status of the MooseObject.\n'
p46617
sS'cpp_type'
p46618
S'bool'
p46619
sS'default'
p46620
S'1'
p46621
sS'name'
p46622
S'enable'
p46623
sS'required'
p46624
I00
sS'group_name'
p46625
S'Advanced'
p46626
sa(dp46627
S'name'
p46628
S'execute_on'
p46629
sS'cpp_type'
p46630
S'MultiMooseEnum'
p46631
sS'default'
p46632
S'TIMESTEP_END'
p46633
sS'description'
p46634
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46635
sS'required'
p46636
I00
sS'options'
p46637
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46638
sS'group_name'
p46639
Nsa(dp46640
S'description'
p46641
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46642
sS'cpp_type'
p46643
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46644
sS'default'
p46645
g3
sS'name'
p46646
S'outputs'
p46647
sS'required'
p46648
I00
sS'group_name'
p46649
S'Advanced'
p46650
sa(dp46651
S'description'
p46652
g3
sS'cpp_type'
p46653
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46654
sS'default'
p46655
S'ElementalVariableValue'
p46656
sS'name'
p46657
S'type'
p46658
sS'required'
p46659
I00
sS'group_name'
p46660
Nsa(dp46661
S'description'
p46662
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46663
sS'cpp_type'
p46664
S'bool'
p46665
sS'default'
p46666
S'0'
p46667
sS'name'
p46668
S'use_displaced_mesh'
p46669
sS'required'
p46670
I00
sS'group_name'
p46671
S'Advanced'
p46672
sa(dp46673
S'description'
p46674
S'The variable to be monitored\n'
p46675
sS'cpp_type'
p46676
S'VariableName'
p46677
sS'default'
p46678
g3
sS'name'
p46679
S'variable'
p46680
sS'required'
p46681
I01
sS'group_name'
p46682
NsasS'name'
p46683
S'/UserObjects/ElementalVariableValue'
p46684
sa(dp46685
S'description'
p46686
g3
sS'subblocks'
p46687
NsS'parameters'
p46688
(lp46689
(dp46690
S'description'
p46691
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46692
sS'cpp_type'
p46693
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46694
sS'default'
p46695
g3
sS'name'
p46696
S'control_tags'
p46697
sS'required'
p46698
I00
sS'group_name'
p46699
S'Advanced'
p46700
sa(dp46701
S'description'
p46702
S'Set the enabled status of the MooseObject.\n'
p46703
sS'cpp_type'
p46704
S'bool'
p46705
sS'default'
p46706
S'1'
p46707
sS'name'
p46708
S'enable'
p46709
sS'required'
p46710
I00
sS'group_name'
p46711
S'Advanced'
p46712
sa(dp46713
S'name'
p46714
S'execute_on'
p46715
sS'cpp_type'
p46716
S'MultiMooseEnum'
p46717
sS'default'
p46718
S'TIMESTEP_END'
p46719
sS'description'
p46720
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46721
sS'required'
p46722
I00
sS'options'
p46723
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46724
sS'group_name'
p46725
Nsa(dp46726
S'description'
p46727
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46728
sS'cpp_type'
p46729
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46730
sS'default'
p46731
g3
sS'name'
p46732
S'outputs'
p46733
sS'required'
p46734
I00
sS'group_name'
p46735
S'Advanced'
p46736
sa(dp46737
S'description'
p46738
g3
sS'cpp_type'
p46739
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46740
sS'default'
p46741
S'EmptyPostprocessor'
p46742
sS'name'
p46743
S'type'
p46744
sS'required'
p46745
I00
sS'group_name'
p46746
Nsa(dp46747
S'description'
p46748
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46749
sS'cpp_type'
p46750
S'bool'
p46751
sS'default'
p46752
S'0'
p46753
sS'name'
p46754
S'use_displaced_mesh'
p46755
sS'required'
p46756
I00
sS'group_name'
p46757
S'Advanced'
p46758
sasS'name'
p46759
S'/UserObjects/EmptyPostprocessor'
p46760
sa(dp46761
S'description'
p46762
g3
sS'subblocks'
p46763
NsS'parameters'
p46764
(lp46765
(dp46766
S'description'
p46767
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46768
sS'cpp_type'
p46769
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46770
sS'default'
p46771
g3
sS'name'
p46772
S'control_tags'
p46773
sS'required'
p46774
I00
sS'group_name'
p46775
S'Advanced'
p46776
sa(dp46777
S'description'
p46778
S'Set the enabled status of the MooseObject.\n'
p46779
sS'cpp_type'
p46780
S'bool'
p46781
sS'default'
p46782
S'1'
p46783
sS'name'
p46784
S'enable'
p46785
sS'required'
p46786
I00
sS'group_name'
p46787
S'Advanced'
p46788
sa(dp46789
S'name'
p46790
S'execute_on'
p46791
sS'cpp_type'
p46792
S'MultiMooseEnum'
p46793
sS'default'
p46794
S'TIMESTEP_END'
p46795
sS'description'
p46796
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46797
sS'required'
p46798
I00
sS'options'
p46799
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46800
sS'group_name'
p46801
Nsa(dp46802
S'description'
p46803
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46804
sS'cpp_type'
p46805
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46806
sS'default'
p46807
g3
sS'name'
p46808
S'outputs'
p46809
sS'required'
p46810
I00
sS'group_name'
p46811
S'Advanced'
p46812
sa(dp46813
S'description'
p46814
g3
sS'cpp_type'
p46815
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46816
sS'default'
p46817
S'ExecutionerAttributeReporter'
p46818
sS'name'
p46819
S'type'
p46820
sS'required'
p46821
I00
sS'group_name'
p46822
Nsa(dp46823
S'description'
p46824
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46825
sS'cpp_type'
p46826
S'bool'
p46827
sS'default'
p46828
S'0'
p46829
sS'name'
p46830
S'use_displaced_mesh'
p46831
sS'required'
p46832
I00
sS'group_name'
p46833
S'Advanced'
p46834
sasS'name'
p46835
S'/UserObjects/ExecutionerAttributeReporter'
p46836
sa(dp46837
S'description'
p46838
S'Find a specific target value along a sampling line. The variable values along the line should change monotonically. The target value is searched using a bisection algorithm.\n'
p46839
sS'subblocks'
p46840
NsS'parameters'
p46841
(lp46842
(dp46843
S'description'
p46844
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46845
sS'cpp_type'
p46846
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46847
sS'default'
p46848
g3
sS'name'
p46849
S'control_tags'
p46850
sS'required'
p46851
I00
sS'group_name'
p46852
S'Advanced'
p46853
sa(dp46854
S'description'
p46855
S'Maximum number of bisections to perform.\n'
p46856
sS'cpp_type'
p46857
S'unsigned int'
p46858
sS'default'
p46859
S'36'
p46860
sS'name'
p46861
S'depth'
p46862
sS'required'
p46863
I00
sS'group_name'
p46864
Nsa(dp46865
S'description'
p46866
S'Set the enabled status of the MooseObject.\n'
p46867
sS'cpp_type'
p46868
S'bool'
p46869
sS'default'
p46870
S'1'
p46871
sS'name'
p46872
S'enable'
p46873
sS'required'
p46874
I00
sS'group_name'
p46875
S'Advanced'
p46876
sa(dp46877
S'description'
p46878
S'End point of the sampling line.\n'
p46879
sS'cpp_type'
p46880
S'libMesh::Point'
p46881
sS'default'
p46882
g3
sS'name'
p46883
S'end_point'
p46884
sS'required'
p46885
I00
sS'group_name'
p46886
Nsa(dp46887
S'name'
p46888
S'execute_on'
p46889
sS'cpp_type'
p46890
S'MultiMooseEnum'
p46891
sS'default'
p46892
S'TIMESTEP_END'
p46893
sS'description'
p46894
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p46895
sS'required'
p46896
I00
sS'options'
p46897
S'none initial linear nonlinear timestep_end timestep_begin custom'
p46898
sS'group_name'
p46899
Nsa(dp46900
S'description'
p46901
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p46902
sS'cpp_type'
p46903
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p46904
sS'default'
p46905
g3
sS'name'
p46906
S'outputs'
p46907
sS'required'
p46908
I00
sS'group_name'
p46909
S'Advanced'
p46910
sa(dp46911
S'description'
p46912
S'Start point of the sampling line.\n'
p46913
sS'cpp_type'
p46914
S'libMesh::Point'
p46915
sS'default'
p46916
g3
sS'name'
p46917
S'start_point'
p46918
sS'required'
p46919
I00
sS'group_name'
p46920
Nsa(dp46921
S'description'
p46922
S'Target value to locate.\n'
p46923
sS'cpp_type'
p46924
S'double'
p46925
sS'default'
p46926
g3
sS'name'
p46927
S'target'
p46928
sS'required'
p46929
I00
sS'group_name'
p46930
Nsa(dp46931
S'description'
p46932
S'Stop search if a value is found that is equal to the target with this tolerance applied.\n'
p46933
sS'cpp_type'
p46934
S'double'
p46935
sS'default'
p46936
S'1e-10'
p46937
sS'name'
p46938
S'tol'
p46939
sS'required'
p46940
I00
sS'group_name'
p46941
Nsa(dp46942
S'description'
p46943
g3
sS'cpp_type'
p46944
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p46945
sS'default'
p46946
S'FindValueOnLine'
p46947
sS'name'
p46948
S'type'
p46949
sS'required'
p46950
I00
sS'group_name'
p46951
Nsa(dp46952
S'description'
p46953
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p46954
sS'cpp_type'
p46955
S'bool'
p46956
sS'default'
p46957
S'0'
p46958
sS'name'
p46959
S'use_displaced_mesh'
p46960
sS'required'
p46961
I00
sS'group_name'
p46962
S'Advanced'
p46963
sa(dp46964
S'description'
p46965
S'Variable to inspect\n'
p46966
sS'cpp_type'
p46967
S'std::vector<VariableName>'
p46968
sS'default'
p46969
g3
sS'name'
p46970
S'v'
p46971
sS'required'
p46972
I00
sS'group_name'
p46973
NsasS'name'
p46974
S'/UserObjects/FindValueOnLine'
p46975
sa(dp46976
S'description'
p46977
g3
sS'subblocks'
p46978
NsS'parameters'
p46979
(lp46980
(dp46981
S'description'
p46982
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p46983
sS'cpp_type'
p46984
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p46985
sS'default'
p46986
g3
sS'name'
p46987
S'boundary'
p46988
sS'required'
p46989
I01
sS'group_name'
p46990
Nsa(dp46991
S'description'
p46992
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p46993
sS'cpp_type'
p46994
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p46995
sS'default'
p46996
g3
sS'name'
p46997
S'control_tags'
p46998
sS'required'
p46999
I00
sS'group_name'
p47000
S'Advanced'
p47001
sa(dp47002
S'description'
p47003
S'Set the enabled status of the MooseObject.\n'
p47004
sS'cpp_type'
p47005
S'bool'
p47006
sS'default'
p47007
S'1'
p47008
sS'name'
p47009
S'enable'
p47010
sS'required'
p47011
I00
sS'group_name'
p47012
S'Advanced'
p47013
sa(dp47014
S'name'
p47015
S'execute_on'
p47016
sS'cpp_type'
p47017
S'MultiMooseEnum'
p47018
sS'default'
p47019
S'TIMESTEP_END'
p47020
sS'description'
p47021
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p47022
sS'required'
p47023
I00
sS'options'
p47024
S'none initial linear nonlinear timestep_end timestep_begin custom'
p47025
sS'group_name'
p47026
Nsa(dp47027
S'description'
p47028
S'This postprocessor will return the integral of this function over the boundary\n'
p47029
sS'cpp_type'
p47030
S'FunctionName'
p47031
sS'default'
p47032
S'1'
p47033
sS'name'
p47034
S'function'
p47035
sS'required'
p47036
I00
sS'group_name'
p47037
Nsa(dp47038
S'description'
p47039
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p47040
sS'cpp_type'
p47041
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p47042
sS'default'
p47043
g3
sS'name'
p47044
S'outputs'
p47045
sS'required'
p47046
I00
sS'group_name'
p47047
S'Advanced'
p47048
sa(dp47049
S'description'
p47050
g3
sS'cpp_type'
p47051
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47052
sS'default'
p47053
S'FunctionSideIntegral'
p47054
sS'name'
p47055
S'type'
p47056
sS'required'
p47057
I00
sS'group_name'
p47058
Nsa(dp47059
S'description'
p47060
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47061
sS'cpp_type'
p47062
S'bool'
p47063
sS'default'
p47064
S'0'
p47065
sS'name'
p47066
S'use_displaced_mesh'
p47067
sS'required'
p47068
I00
sS'group_name'
p47069
S'Advanced'
p47070
sasS'name'
p47071
S'/UserObjects/FunctionSideIntegral'
p47072
sa(dp47073
S'description'
p47074
g3
sS'subblocks'
p47075
NsS'parameters'
p47076
(lp47077
(dp47078
S'description'
p47079
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47080
sS'cpp_type'
p47081
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p47082
sS'default'
p47083
g3
sS'name'
p47084
S'control_tags'
p47085
sS'required'
p47086
I00
sS'group_name'
p47087
S'Advanced'
p47088
sa(dp47089
S'description'
p47090
S'Set the enabled status of the MooseObject.\n'
p47091
sS'cpp_type'
p47092
S'bool'
p47093
sS'default'
p47094
S'1'
p47095
sS'name'
p47096
S'enable'
p47097
sS'required'
p47098
I00
sS'group_name'
p47099
S'Advanced'
p47100
sa(dp47101
S'name'
p47102
S'execute_on'
p47103
sS'cpp_type'
p47104
S'MultiMooseEnum'
p47105
sS'default'
p47106
S'TIMESTEP_END'
p47107
sS'description'
p47108
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p47109
sS'required'
p47110
I00
sS'options'
p47111
S'none initial linear nonlinear timestep_end timestep_begin custom'
p47112
sS'group_name'
p47113
Nsa(dp47114
S'description'
p47115
S'The function which supplies the postprocessor value.\n'
p47116
sS'cpp_type'
p47117
S'FunctionName'
p47118
sS'default'
p47119
g3
sS'name'
p47120
S'function'
p47121
sS'required'
p47122
I01
sS'group_name'
p47123
Nsa(dp47124
S'description'
p47125
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p47126
sS'cpp_type'
p47127
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p47128
sS'default'
p47129
g3
sS'name'
p47130
S'outputs'
p47131
sS'required'
p47132
I00
sS'group_name'
p47133
S'Advanced'
p47134
sa(dp47135
S'description'
p47136
S'A point in space to be given to the function Default: (0, 0, 0)\n'
p47137
sS'cpp_type'
p47138
S'libMesh::Point'
p47139
sS'default'
p47140
S'0 0 0'
p47141
sS'name'
p47142
S'point'
p47143
sS'required'
p47144
I00
sS'group_name'
p47145
Nsa(dp47146
S'description'
p47147
S'A scale factor to be applied to the function\n'
p47148
sS'cpp_type'
p47149
S'double'
p47150
sS'default'
p47151
S'1'
p47152
sS'name'
p47153
S'scale_factor'
p47154
sS'required'
p47155
I00
sS'group_name'
p47156
Nsa(dp47157
S'description'
p47158
g3
sS'cpp_type'
p47159
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47160
sS'default'
p47161
S'FunctionValuePostprocessor'
p47162
sS'name'
p47163
S'type'
p47164
sS'required'
p47165
I00
sS'group_name'
p47166
Nsa(dp47167
S'description'
p47168
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47169
sS'cpp_type'
p47170
S'bool'
p47171
sS'default'
p47172
S'0'
p47173
sS'name'
p47174
S'use_displaced_mesh'
p47175
sS'required'
p47176
I00
sS'group_name'
p47177
S'Advanced'
p47178
sasS'name'
p47179
S'/UserObjects/FunctionValuePostprocessor'
p47180
sa(dp47181
S'description'
p47182
g3
sS'subblocks'
p47183
NsS'parameters'
p47184
(lp47185
(dp47186
S'description'
p47187
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p47188
sS'cpp_type'
p47189
S'unsigned int'
p47190
sS'default'
p47191
S'1'
p47192
sS'name'
p47193
S'average_radius'
p47194
sS'required'
p47195
I00
sS'group_name'
p47196
Nsa(dp47197
S'description'
p47198
S'The list of block ids (SubdomainID) that this object will be applied\n'
p47199
sS'cpp_type'
p47200
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p47201
sS'default'
p47202
g3
sS'name'
p47203
S'block'
p47204
sS'required'
p47205
I00
sS'group_name'
p47206
Nsa(dp47207
S'description'
p47208
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p47209
sS'cpp_type'
p47210
S'std::__1::vector<double, std::__1::allocator<double> >'
p47211
sS'default'
p47212
g3
sS'name'
p47213
S'bounds'
p47214
sS'required'
p47215
I00
sS'group_name'
p47216
Nsa(dp47217
S'description'
p47218
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47219
sS'cpp_type'
p47220
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p47221
sS'default'
p47222
g3
sS'name'
p47223
S'control_tags'
p47224
sS'required'
p47225
I00
sS'group_name'
p47226
S'Advanced'
p47227
sa(dp47228
S'description'
p47229
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p47230
sS'cpp_type'
p47231
S'bool'
p47232
sS'default'
p47233
S'0'
p47234
sS'name'
p47235
S'cumulative'
p47236
sS'required'
p47237
I00
sS'group_name'
p47238
Nsa(dp47239
S'name'
p47240
S'direction'
p47241
sS'cpp_type'
p47242
S'MooseEnum'
p47243
sS'default'
p47244
g3
sS'description'
p47245
S'The direction of the layers.\n'
p47246
sS'required'
p47247
I01
sS'options'
p47248
S'x y z'
p47249
sS'group_name'
p47250
Nsa(dp47251
S'description'
p47252
S'Set the enabled status of the MooseObject.\n'
p47253
sS'cpp_type'
p47254
S'bool'
p47255
sS'default'
p47256
S'1'
p47257
sS'name'
p47258
S'enable'
p47259
sS'required'
p47260
I00
sS'group_name'
p47261
S'Advanced'
p47262
sa(dp47263
S'name'
p47264
S'execute_on'
p47265
sS'cpp_type'
p47266
S'MultiMooseEnum'
p47267
sS'default'
p47268
S'TIMESTEP_END'
p47269
sS'description'
p47270
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p47271
sS'required'
p47272
I00
sS'options'
p47273
S'none initial linear nonlinear timestep_end timestep_begin custom'
p47274
sS'group_name'
p47275
Nsa(dp47276
S'description'
p47277
S'The number of layers.\n'
p47278
sS'cpp_type'
p47279
S'unsigned int'
p47280
sS'default'
p47281
g3
sS'name'
p47282
S'num_layers'
p47283
sS'required'
p47284
I00
sS'group_name'
p47285
Nsa(dp47286
S'name'
p47287
S'sample_type'
p47288
sS'cpp_type'
p47289
S'MooseEnum'
p47290
sS'default'
p47291
S'direct'
p47292
sS'description'
p47293
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p47294
sS'required'
p47295
I00
sS'options'
p47296
S'direct interpolate average'
p47297
sS'group_name'
p47298
Nsa(dp47299
S'description'
p47300
S'The seed for the master random number generator\n'
p47301
sS'cpp_type'
p47302
S'unsigned int'
p47303
sS'default'
p47304
S'0'
p47305
sS'name'
p47306
S'seed'
p47307
sS'required'
p47308
I00
sS'group_name'
p47309
S'Advanced'
p47310
sa(dp47311
S'description'
p47312
g3
sS'cpp_type'
p47313
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47314
sS'default'
p47315
S'LayeredAverage'
p47316
sS'name'
p47317
S'type'
p47318
sS'required'
p47319
I00
sS'group_name'
p47320
Nsa(dp47321
S'description'
p47322
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47323
sS'cpp_type'
p47324
S'bool'
p47325
sS'default'
p47326
S'0'
p47327
sS'name'
p47328
S'use_displaced_mesh'
p47329
sS'required'
p47330
I00
sS'group_name'
p47331
S'Advanced'
p47332
sa(dp47333
S'description'
p47334
S'The name of the variable that this object operates on\n'
p47335
sS'cpp_type'
p47336
S'std::vector<VariableName>'
p47337
sS'default'
p47338
g3
sS'name'
p47339
S'variable'
p47340
sS'required'
p47341
I01
sS'group_name'
p47342
NsasS'name'
p47343
S'/UserObjects/LayeredAverage'
p47344
sa(dp47345
S'description'
p47346
g3
sS'subblocks'
p47347
NsS'parameters'
p47348
(lp47349
(dp47350
S'description'
p47351
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p47352
sS'cpp_type'
p47353
S'unsigned int'
p47354
sS'default'
p47355
S'1'
p47356
sS'name'
p47357
S'average_radius'
p47358
sS'required'
p47359
I00
sS'group_name'
p47360
Nsa(dp47361
S'description'
p47362
S'The list of block ids (SubdomainID) that this object will be applied\n'
p47363
sS'cpp_type'
p47364
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p47365
sS'default'
p47366
g3
sS'name'
p47367
S'block'
p47368
sS'required'
p47369
I00
sS'group_name'
p47370
Nsa(dp47371
S'description'
p47372
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p47373
sS'cpp_type'
p47374
S'std::__1::vector<double, std::__1::allocator<double> >'
p47375
sS'default'
p47376
g3
sS'name'
p47377
S'bounds'
p47378
sS'required'
p47379
I00
sS'group_name'
p47380
Nsa(dp47381
S'description'
p47382
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47383
sS'cpp_type'
p47384
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p47385
sS'default'
p47386
g3
sS'name'
p47387
S'control_tags'
p47388
sS'required'
p47389
I00
sS'group_name'
p47390
S'Advanced'
p47391
sa(dp47392
S'description'
p47393
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p47394
sS'cpp_type'
p47395
S'bool'
p47396
sS'default'
p47397
S'0'
p47398
sS'name'
p47399
S'cumulative'
p47400
sS'required'
p47401
I00
sS'group_name'
p47402
Nsa(dp47403
S'name'
p47404
S'direction'
p47405
sS'cpp_type'
p47406
S'MooseEnum'
p47407
sS'default'
p47408
g3
sS'description'
p47409
S'The direction of the layers.\n'
p47410
sS'required'
p47411
I01
sS'options'
p47412
S'x y z'
p47413
sS'group_name'
p47414
Nsa(dp47415
S'description'
p47416
S'Set the enabled status of the MooseObject.\n'
p47417
sS'cpp_type'
p47418
S'bool'
p47419
sS'default'
p47420
S'1'
p47421
sS'name'
p47422
S'enable'
p47423
sS'required'
p47424
I00
sS'group_name'
p47425
S'Advanced'
p47426
sa(dp47427
S'name'
p47428
S'execute_on'
p47429
sS'cpp_type'
p47430
S'MultiMooseEnum'
p47431
sS'default'
p47432
S'TIMESTEP_END'
p47433
sS'description'
p47434
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p47435
sS'required'
p47436
I00
sS'options'
p47437
S'none initial linear nonlinear timestep_end timestep_begin custom'
p47438
sS'group_name'
p47439
Nsa(dp47440
S'description'
p47441
S'The number of layers.\n'
p47442
sS'cpp_type'
p47443
S'unsigned int'
p47444
sS'default'
p47445
g3
sS'name'
p47446
S'num_layers'
p47447
sS'required'
p47448
I00
sS'group_name'
p47449
Nsa(dp47450
S'name'
p47451
S'sample_type'
p47452
sS'cpp_type'
p47453
S'MooseEnum'
p47454
sS'default'
p47455
S'direct'
p47456
sS'description'
p47457
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p47458
sS'required'
p47459
I00
sS'options'
p47460
S'direct interpolate average'
p47461
sS'group_name'
p47462
Nsa(dp47463
S'description'
p47464
S'The seed for the master random number generator\n'
p47465
sS'cpp_type'
p47466
S'unsigned int'
p47467
sS'default'
p47468
S'0'
p47469
sS'name'
p47470
S'seed'
p47471
sS'required'
p47472
I00
sS'group_name'
p47473
S'Advanced'
p47474
sa(dp47475
S'description'
p47476
g3
sS'cpp_type'
p47477
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47478
sS'default'
p47479
S'LayeredIntegral'
p47480
sS'name'
p47481
S'type'
p47482
sS'required'
p47483
I00
sS'group_name'
p47484
Nsa(dp47485
S'description'
p47486
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47487
sS'cpp_type'
p47488
S'bool'
p47489
sS'default'
p47490
S'0'
p47491
sS'name'
p47492
S'use_displaced_mesh'
p47493
sS'required'
p47494
I00
sS'group_name'
p47495
S'Advanced'
p47496
sa(dp47497
S'description'
p47498
S'The name of the variable that this object operates on\n'
p47499
sS'cpp_type'
p47500
S'std::vector<VariableName>'
p47501
sS'default'
p47502
g3
sS'name'
p47503
S'variable'
p47504
sS'required'
p47505
I01
sS'group_name'
p47506
NsasS'name'
p47507
S'/UserObjects/LayeredIntegral'
p47508
sa(dp47509
S'description'
p47510
g3
sS'subblocks'
p47511
NsS'parameters'
p47512
(lp47513
(dp47514
S'description'
p47515
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p47516
sS'cpp_type'
p47517
S'unsigned int'
p47518
sS'default'
p47519
S'1'
p47520
sS'name'
p47521
S'average_radius'
p47522
sS'required'
p47523
I00
sS'group_name'
p47524
Nsa(dp47525
S'description'
p47526
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p47527
sS'cpp_type'
p47528
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p47529
sS'default'
p47530
g3
sS'name'
p47531
S'boundary'
p47532
sS'required'
p47533
I01
sS'group_name'
p47534
Nsa(dp47535
S'description'
p47536
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p47537
sS'cpp_type'
p47538
S'std::__1::vector<double, std::__1::allocator<double> >'
p47539
sS'default'
p47540
g3
sS'name'
p47541
S'bounds'
p47542
sS'required'
p47543
I00
sS'group_name'
p47544
Nsa(dp47545
S'description'
p47546
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47547
sS'cpp_type'
p47548
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p47549
sS'default'
p47550
g3
sS'name'
p47551
S'control_tags'
p47552
sS'required'
p47553
I00
sS'group_name'
p47554
S'Advanced'
p47555
sa(dp47556
S'description'
p47557
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p47558
sS'cpp_type'
p47559
S'bool'
p47560
sS'default'
p47561
S'0'
p47562
sS'name'
p47563
S'cumulative'
p47564
sS'required'
p47565
I00
sS'group_name'
p47566
Nsa(dp47567
S'name'
p47568
S'direction'
p47569
sS'cpp_type'
p47570
S'MooseEnum'
p47571
sS'default'
p47572
g3
sS'description'
p47573
S'The direction of the layers.\n'
p47574
sS'required'
p47575
I01
sS'options'
p47576
S'x y z'
p47577
sS'group_name'
p47578
Nsa(dp47579
S'description'
p47580
S'Set the enabled status of the MooseObject.\n'
p47581
sS'cpp_type'
p47582
S'bool'
p47583
sS'default'
p47584
S'1'
p47585
sS'name'
p47586
S'enable'
p47587
sS'required'
p47588
I00
sS'group_name'
p47589
S'Advanced'
p47590
sa(dp47591
S'name'
p47592
S'execute_on'
p47593
sS'cpp_type'
p47594
S'MultiMooseEnum'
p47595
sS'default'
p47596
S'TIMESTEP_END'
p47597
sS'description'
p47598
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p47599
sS'required'
p47600
I00
sS'options'
p47601
S'none initial linear nonlinear timestep_end timestep_begin custom'
p47602
sS'group_name'
p47603
Nsa(dp47604
S'description'
p47605
S'The number of layers.\n'
p47606
sS'cpp_type'
p47607
S'unsigned int'
p47608
sS'default'
p47609
g3
sS'name'
p47610
S'num_layers'
p47611
sS'required'
p47612
I00
sS'group_name'
p47613
Nsa(dp47614
S'name'
p47615
S'sample_type'
p47616
sS'cpp_type'
p47617
S'MooseEnum'
p47618
sS'default'
p47619
S'direct'
p47620
sS'description'
p47621
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p47622
sS'required'
p47623
I00
sS'options'
p47624
S'direct interpolate average'
p47625
sS'group_name'
p47626
Nsa(dp47627
S'description'
p47628
g3
sS'cpp_type'
p47629
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47630
sS'default'
p47631
S'LayeredSideAverage'
p47632
sS'name'
p47633
S'type'
p47634
sS'required'
p47635
I00
sS'group_name'
p47636
Nsa(dp47637
S'description'
p47638
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47639
sS'cpp_type'
p47640
S'bool'
p47641
sS'default'
p47642
S'0'
p47643
sS'name'
p47644
S'use_displaced_mesh'
p47645
sS'required'
p47646
I00
sS'group_name'
p47647
S'Advanced'
p47648
sa(dp47649
S'description'
p47650
S'The name of the variable that this boundary condition applies to\n'
p47651
sS'cpp_type'
p47652
S'std::vector<VariableName>'
p47653
sS'default'
p47654
g3
sS'name'
p47655
S'variable'
p47656
sS'required'
p47657
I01
sS'group_name'
p47658
NsasS'name'
p47659
S'/UserObjects/LayeredSideAverage'
p47660
sa(dp47661
S'description'
p47662
g3
sS'subblocks'
p47663
NsS'parameters'
p47664
(lp47665
(dp47666
S'description'
p47667
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p47668
sS'cpp_type'
p47669
S'unsigned int'
p47670
sS'default'
p47671
S'1'
p47672
sS'name'
p47673
S'average_radius'
p47674
sS'required'
p47675
I00
sS'group_name'
p47676
Nsa(dp47677
S'description'
p47678
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p47679
sS'cpp_type'
p47680
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p47681
sS'default'
p47682
g3
sS'name'
p47683
S'boundary'
p47684
sS'required'
p47685
I01
sS'group_name'
p47686
Nsa(dp47687
S'description'
p47688
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p47689
sS'cpp_type'
p47690
S'std::__1::vector<double, std::__1::allocator<double> >'
p47691
sS'default'
p47692
g3
sS'name'
p47693
S'bounds'
p47694
sS'required'
p47695
I00
sS'group_name'
p47696
Nsa(dp47697
S'description'
p47698
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47699
sS'cpp_type'
p47700
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p47701
sS'default'
p47702
g3
sS'name'
p47703
S'control_tags'
p47704
sS'required'
p47705
I00
sS'group_name'
p47706
S'Advanced'
p47707
sa(dp47708
S'description'
p47709
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p47710
sS'cpp_type'
p47711
S'bool'
p47712
sS'default'
p47713
S'0'
p47714
sS'name'
p47715
S'cumulative'
p47716
sS'required'
p47717
I00
sS'group_name'
p47718
Nsa(dp47719
S'description'
p47720
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p47721
sS'cpp_type'
p47722
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47723
sS'default'
p47724
g3
sS'name'
p47725
S'diffusivity'
p47726
sS'required'
p47727
I01
sS'group_name'
p47728
Nsa(dp47729
S'name'
p47730
S'direction'
p47731
sS'cpp_type'
p47732
S'MooseEnum'
p47733
sS'default'
p47734
g3
sS'description'
p47735
S'The direction of the layers.\n'
p47736
sS'required'
p47737
I01
sS'options'
p47738
S'x y z'
p47739
sS'group_name'
p47740
Nsa(dp47741
S'description'
p47742
S'Set the enabled status of the MooseObject.\n'
p47743
sS'cpp_type'
p47744
S'bool'
p47745
sS'default'
p47746
S'1'
p47747
sS'name'
p47748
S'enable'
p47749
sS'required'
p47750
I00
sS'group_name'
p47751
S'Advanced'
p47752
sa(dp47753
S'name'
p47754
S'execute_on'
p47755
sS'cpp_type'
p47756
S'MultiMooseEnum'
p47757
sS'default'
p47758
S'TIMESTEP_END'
p47759
sS'description'
p47760
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p47761
sS'required'
p47762
I00
sS'options'
p47763
S'none initial linear nonlinear timestep_end timestep_begin custom'
p47764
sS'group_name'
p47765
Nsa(dp47766
S'description'
p47767
S'The number of layers.\n'
p47768
sS'cpp_type'
p47769
S'unsigned int'
p47770
sS'default'
p47771
g3
sS'name'
p47772
S'num_layers'
p47773
sS'required'
p47774
I00
sS'group_name'
p47775
Nsa(dp47776
S'name'
p47777
S'sample_type'
p47778
sS'cpp_type'
p47779
S'MooseEnum'
p47780
sS'default'
p47781
S'direct'
p47782
sS'description'
p47783
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p47784
sS'required'
p47785
I00
sS'options'
p47786
S'direct interpolate average'
p47787
sS'group_name'
p47788
Nsa(dp47789
S'description'
p47790
g3
sS'cpp_type'
p47791
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47792
sS'default'
p47793
S'LayeredSideFluxAverage'
p47794
sS'name'
p47795
S'type'
p47796
sS'required'
p47797
I00
sS'group_name'
p47798
Nsa(dp47799
S'description'
p47800
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47801
sS'cpp_type'
p47802
S'bool'
p47803
sS'default'
p47804
S'0'
p47805
sS'name'
p47806
S'use_displaced_mesh'
p47807
sS'required'
p47808
I00
sS'group_name'
p47809
S'Advanced'
p47810
sa(dp47811
S'description'
p47812
S'The name of the variable that this boundary condition applies to\n'
p47813
sS'cpp_type'
p47814
S'std::vector<VariableName>'
p47815
sS'default'
p47816
g3
sS'name'
p47817
S'variable'
p47818
sS'required'
p47819
I01
sS'group_name'
p47820
NsasS'name'
p47821
S'/UserObjects/LayeredSideFluxAverage'
p47822
sa(dp47823
S'description'
p47824
g3
sS'subblocks'
p47825
NsS'parameters'
p47826
(lp47827
(dp47828
S'description'
p47829
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p47830
sS'cpp_type'
p47831
S'unsigned int'
p47832
sS'default'
p47833
S'1'
p47834
sS'name'
p47835
S'average_radius'
p47836
sS'required'
p47837
I00
sS'group_name'
p47838
Nsa(dp47839
S'description'
p47840
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p47841
sS'cpp_type'
p47842
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p47843
sS'default'
p47844
g3
sS'name'
p47845
S'boundary'
p47846
sS'required'
p47847
I01
sS'group_name'
p47848
Nsa(dp47849
S'description'
p47850
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p47851
sS'cpp_type'
p47852
S'std::__1::vector<double, std::__1::allocator<double> >'
p47853
sS'default'
p47854
g3
sS'name'
p47855
S'bounds'
p47856
sS'required'
p47857
I00
sS'group_name'
p47858
Nsa(dp47859
S'description'
p47860
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p47861
sS'cpp_type'
p47862
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p47863
sS'default'
p47864
g3
sS'name'
p47865
S'control_tags'
p47866
sS'required'
p47867
I00
sS'group_name'
p47868
S'Advanced'
p47869
sa(dp47870
S'description'
p47871
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p47872
sS'cpp_type'
p47873
S'bool'
p47874
sS'default'
p47875
S'0'
p47876
sS'name'
p47877
S'cumulative'
p47878
sS'required'
p47879
I00
sS'group_name'
p47880
Nsa(dp47881
S'name'
p47882
S'direction'
p47883
sS'cpp_type'
p47884
S'MooseEnum'
p47885
sS'default'
p47886
g3
sS'description'
p47887
S'The direction of the layers.\n'
p47888
sS'required'
p47889
I01
sS'options'
p47890
S'x y z'
p47891
sS'group_name'
p47892
Nsa(dp47893
S'description'
p47894
S'Set the enabled status of the MooseObject.\n'
p47895
sS'cpp_type'
p47896
S'bool'
p47897
sS'default'
p47898
S'1'
p47899
sS'name'
p47900
S'enable'
p47901
sS'required'
p47902
I00
sS'group_name'
p47903
S'Advanced'
p47904
sa(dp47905
S'name'
p47906
S'execute_on'
p47907
sS'cpp_type'
p47908
S'MultiMooseEnum'
p47909
sS'default'
p47910
S'TIMESTEP_END'
p47911
sS'description'
p47912
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p47913
sS'required'
p47914
I00
sS'options'
p47915
S'none initial linear nonlinear timestep_end timestep_begin custom'
p47916
sS'group_name'
p47917
Nsa(dp47918
S'description'
p47919
S'The number of layers.\n'
p47920
sS'cpp_type'
p47921
S'unsigned int'
p47922
sS'default'
p47923
g3
sS'name'
p47924
S'num_layers'
p47925
sS'required'
p47926
I00
sS'group_name'
p47927
Nsa(dp47928
S'name'
p47929
S'sample_type'
p47930
sS'cpp_type'
p47931
S'MooseEnum'
p47932
sS'default'
p47933
S'direct'
p47934
sS'description'
p47935
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p47936
sS'required'
p47937
I00
sS'options'
p47938
S'direct interpolate average'
p47939
sS'group_name'
p47940
Nsa(dp47941
S'description'
p47942
g3
sS'cpp_type'
p47943
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p47944
sS'default'
p47945
S'LayeredSideIntegral'
p47946
sS'name'
p47947
S'type'
p47948
sS'required'
p47949
I00
sS'group_name'
p47950
Nsa(dp47951
S'description'
p47952
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p47953
sS'cpp_type'
p47954
S'bool'
p47955
sS'default'
p47956
S'0'
p47957
sS'name'
p47958
S'use_displaced_mesh'
p47959
sS'required'
p47960
I00
sS'group_name'
p47961
S'Advanced'
p47962
sa(dp47963
S'description'
p47964
S'The name of the variable that this boundary condition applies to\n'
p47965
sS'cpp_type'
p47966
S'std::vector<VariableName>'
p47967
sS'default'
p47968
g3
sS'name'
p47969
S'variable'
p47970
sS'required'
p47971
I01
sS'group_name'
p47972
NsasS'name'
p47973
S'/UserObjects/LayeredSideIntegral'
p47974
sa(dp47975
S'description'
p47976
g3
sS'subblocks'
p47977
NsS'parameters'
p47978
(lp47979
(dp47980
S'description'
p47981
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p47982
sS'cpp_type'
p47983
S'unsigned int'
p47984
sS'default'
p47985
S'1'
p47986
sS'name'
p47987
S'average_radius'
p47988
sS'required'
p47989
I00
sS'group_name'
p47990
Nsa(dp47991
S'description'
p47992
S'The list of block ids (SubdomainID) that this object will be applied\n'
p47993
sS'cpp_type'
p47994
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p47995
sS'default'
p47996
g3
sS'name'
p47997
S'block'
p47998
sS'required'
p47999
I00
sS'group_name'
p48000
Nsa(dp48001
S'description'
p48002
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p48003
sS'cpp_type'
p48004
S'std::__1::vector<double, std::__1::allocator<double> >'
p48005
sS'default'
p48006
g3
sS'name'
p48007
S'bounds'
p48008
sS'required'
p48009
I00
sS'group_name'
p48010
Nsa(dp48011
S'description'
p48012
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48013
sS'cpp_type'
p48014
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p48015
sS'default'
p48016
g3
sS'name'
p48017
S'control_tags'
p48018
sS'required'
p48019
I00
sS'group_name'
p48020
S'Advanced'
p48021
sa(dp48022
S'description'
p48023
S'When true the value in each layer is the sum of the values up to and including that layer\n'
p48024
sS'cpp_type'
p48025
S'bool'
p48026
sS'default'
p48027
S'0'
p48028
sS'name'
p48029
S'cumulative'
p48030
sS'required'
p48031
I00
sS'group_name'
p48032
Nsa(dp48033
S'name'
p48034
S'direction'
p48035
sS'cpp_type'
p48036
S'MooseEnum'
p48037
sS'default'
p48038
g3
sS'description'
p48039
S'The direction of the layers.\n'
p48040
sS'required'
p48041
I01
sS'options'
p48042
S'x y z'
p48043
sS'group_name'
p48044
Nsa(dp48045
S'description'
p48046
S'Set the enabled status of the MooseObject.\n'
p48047
sS'cpp_type'
p48048
S'bool'
p48049
sS'default'
p48050
S'1'
p48051
sS'name'
p48052
S'enable'
p48053
sS'required'
p48054
I00
sS'group_name'
p48055
S'Advanced'
p48056
sa(dp48057
S'name'
p48058
S'execute_on'
p48059
sS'cpp_type'
p48060
S'MultiMooseEnum'
p48061
sS'default'
p48062
S'TIMESTEP_END'
p48063
sS'description'
p48064
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48065
sS'required'
p48066
I00
sS'options'
p48067
S'none initial linear nonlinear timestep_end timestep_begin custom'
p48068
sS'group_name'
p48069
Nsa(dp48070
S'description'
p48071
S'The number of layers.\n'
p48072
sS'cpp_type'
p48073
S'unsigned int'
p48074
sS'default'
p48075
g3
sS'name'
p48076
S'num_layers'
p48077
sS'required'
p48078
I00
sS'group_name'
p48079
Nsa(dp48080
S'description'
p48081
S'Computations will be lumped into values at these points.\n'
p48082
sS'cpp_type'
p48083
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p48084
sS'default'
p48085
g3
sS'name'
p48086
S'points'
p48087
sS'required'
p48088
I01
sS'group_name'
p48089
Nsa(dp48090
S'name'
p48091
S'sample_type'
p48092
sS'cpp_type'
p48093
S'MooseEnum'
p48094
sS'default'
p48095
S'direct'
p48096
sS'description'
p48097
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p48098
sS'required'
p48099
I00
sS'options'
p48100
S'direct interpolate average'
p48101
sS'group_name'
p48102
Nsa(dp48103
S'description'
p48104
S'The seed for the master random number generator\n'
p48105
sS'cpp_type'
p48106
S'unsigned int'
p48107
sS'default'
p48108
S'0'
p48109
sS'name'
p48110
S'seed'
p48111
sS'required'
p48112
I00
sS'group_name'
p48113
S'Advanced'
p48114
sa(dp48115
S'description'
p48116
g3
sS'cpp_type'
p48117
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p48118
sS'default'
p48119
S'NearestPointLayeredAverage'
p48120
sS'name'
p48121
S'type'
p48122
sS'required'
p48123
I00
sS'group_name'
p48124
Nsa(dp48125
S'description'
p48126
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48127
sS'cpp_type'
p48128
S'bool'
p48129
sS'default'
p48130
S'0'
p48131
sS'name'
p48132
S'use_displaced_mesh'
p48133
sS'required'
p48134
I00
sS'group_name'
p48135
S'Advanced'
p48136
sa(dp48137
S'description'
p48138
S'The name of the variable that this object operates on\n'
p48139
sS'cpp_type'
p48140
S'std::vector<VariableName>'
p48141
sS'default'
p48142
g3
sS'name'
p48143
S'variable'
p48144
sS'required'
p48145
I01
sS'group_name'
p48146
NsasS'name'
p48147
S'/UserObjects/NearestPointLayeredAverage'
p48148
sa(dp48149
S'description'
p48150
g3
sS'subblocks'
p48151
NsS'parameters'
p48152
(lp48153
(dp48154
S'description'
p48155
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48156
sS'cpp_type'
p48157
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p48158
sS'default'
p48159
g3
sS'name'
p48160
S'block'
p48161
sS'required'
p48162
I00
sS'group_name'
p48163
Nsa(dp48164
S'description'
p48165
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p48166
sS'cpp_type'
p48167
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p48168
sS'default'
p48169
g3
sS'name'
p48170
S'boundary'
p48171
sS'required'
p48172
I00
sS'group_name'
p48173
Nsa(dp48174
S'description'
p48175
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48176
sS'cpp_type'
p48177
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p48178
sS'default'
p48179
g3
sS'name'
p48180
S'control_tags'
p48181
sS'required'
p48182
I00
sS'group_name'
p48183
S'Advanced'
p48184
sa(dp48185
S'description'
p48186
S'Set the enabled status of the MooseObject.\n'
p48187
sS'cpp_type'
p48188
S'bool'
p48189
sS'default'
p48190
S'1'
p48191
sS'name'
p48192
S'enable'
p48193
sS'required'
p48194
I00
sS'group_name'
p48195
S'Advanced'
p48196
sa(dp48197
S'name'
p48198
S'execute_on'
p48199
sS'cpp_type'
p48200
S'MultiMooseEnum'
p48201
sS'default'
p48202
S'TIMESTEP_END'
p48203
sS'description'
p48204
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48205
sS'required'
p48206
I00
sS'options'
p48207
S'none initial linear nonlinear timestep_end timestep_begin custom'
p48208
sS'group_name'
p48209
Nsa(dp48210
S'description'
p48211
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p48212
sS'cpp_type'
p48213
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p48214
sS'default'
p48215
g3
sS'name'
p48216
S'outputs'
p48217
sS'required'
p48218
I00
sS'group_name'
p48219
S'Advanced'
p48220
sa(dp48221
S'description'
p48222
S'The seed for the master random number generator\n'
p48223
sS'cpp_type'
p48224
S'unsigned int'
p48225
sS'default'
p48226
S'0'
p48227
sS'name'
p48228
S'seed'
p48229
sS'required'
p48230
I00
sS'group_name'
p48231
S'Advanced'
p48232
sa(dp48233
S'description'
p48234
g3
sS'cpp_type'
p48235
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p48236
sS'default'
p48237
S'NodalExtremeValue'
p48238
sS'name'
p48239
S'type'
p48240
sS'required'
p48241
I00
sS'group_name'
p48242
Nsa(dp48243
S'description'
p48244
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p48245
sS'cpp_type'
p48246
S'bool'
p48247
sS'default'
p48248
S'0'
p48249
sS'name'
p48250
S'unique_node_execute'
p48251
sS'required'
p48252
I00
sS'group_name'
p48253
Nsa(dp48254
S'description'
p48255
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48256
sS'cpp_type'
p48257
S'bool'
p48258
sS'default'
p48259
S'0'
p48260
sS'name'
p48261
S'use_displaced_mesh'
p48262
sS'required'
p48263
I00
sS'group_name'
p48264
S'Advanced'
p48265
sa(dp48266
S'name'
p48267
S'value_type'
p48268
sS'cpp_type'
p48269
S'MooseEnum'
p48270
sS'default'
p48271
S'max'
p48272
sS'description'
p48273
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p48274
sS'required'
p48275
I00
sS'options'
p48276
S'max min'
p48277
sS'group_name'
p48278
Nsa(dp48279
S'description'
p48280
S'The name of the variable that this postprocessor operates on\n'
p48281
sS'cpp_type'
p48282
S'std::vector<VariableName>'
p48283
sS'default'
p48284
g3
sS'name'
p48285
S'variable'
p48286
sS'required'
p48287
I01
sS'group_name'
p48288
NsasS'name'
p48289
S'/UserObjects/NodalExtremeValue'
p48290
sa(dp48291
S'description'
p48292
g3
sS'subblocks'
p48293
NsS'parameters'
p48294
(lp48295
(dp48296
S'description'
p48297
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48298
sS'cpp_type'
p48299
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p48300
sS'default'
p48301
g3
sS'name'
p48302
S'block'
p48303
sS'required'
p48304
I00
sS'group_name'
p48305
Nsa(dp48306
S'description'
p48307
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p48308
sS'cpp_type'
p48309
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p48310
sS'default'
p48311
g3
sS'name'
p48312
S'boundary'
p48313
sS'required'
p48314
I00
sS'group_name'
p48315
Nsa(dp48316
S'description'
p48317
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48318
sS'cpp_type'
p48319
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p48320
sS'default'
p48321
g3
sS'name'
p48322
S'control_tags'
p48323
sS'required'
p48324
I00
sS'group_name'
p48325
S'Advanced'
p48326
sa(dp48327
S'description'
p48328
S'Set the enabled status of the MooseObject.\n'
p48329
sS'cpp_type'
p48330
S'bool'
p48331
sS'default'
p48332
S'1'
p48333
sS'name'
p48334
S'enable'
p48335
sS'required'
p48336
I00
sS'group_name'
p48337
S'Advanced'
p48338
sa(dp48339
S'name'
p48340
S'execute_on'
p48341
sS'cpp_type'
p48342
S'MultiMooseEnum'
p48343
sS'default'
p48344
S'TIMESTEP_END'
p48345
sS'description'
p48346
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48347
sS'required'
p48348
I00
sS'options'
p48349
S'none initial linear nonlinear timestep_end timestep_begin custom'
p48350
sS'group_name'
p48351
Nsa(dp48352
S'description'
p48353
S'The analytic solution to compare against\n'
p48354
sS'cpp_type'
p48355
S'FunctionName'
p48356
sS'default'
p48357
g3
sS'name'
p48358
S'function'
p48359
sS'required'
p48360
I01
sS'group_name'
p48361
Nsa(dp48362
S'description'
p48363
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p48364
sS'cpp_type'
p48365
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p48366
sS'default'
p48367
g3
sS'name'
p48368
S'outputs'
p48369
sS'required'
p48370
I00
sS'group_name'
p48371
S'Advanced'
p48372
sa(dp48373
S'description'
p48374
S'The seed for the master random number generator\n'
p48375
sS'cpp_type'
p48376
S'unsigned int'
p48377
sS'default'
p48378
S'0'
p48379
sS'name'
p48380
S'seed'
p48381
sS'required'
p48382
I00
sS'group_name'
p48383
S'Advanced'
p48384
sa(dp48385
S'description'
p48386
g3
sS'cpp_type'
p48387
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p48388
sS'default'
p48389
S'NodalL2Error'
p48390
sS'name'
p48391
S'type'
p48392
sS'required'
p48393
I00
sS'group_name'
p48394
Nsa(dp48395
S'description'
p48396
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p48397
sS'cpp_type'
p48398
S'bool'
p48399
sS'default'
p48400
S'0'
p48401
sS'name'
p48402
S'unique_node_execute'
p48403
sS'required'
p48404
I00
sS'group_name'
p48405
Nsa(dp48406
S'description'
p48407
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48408
sS'cpp_type'
p48409
S'bool'
p48410
sS'default'
p48411
S'0'
p48412
sS'name'
p48413
S'use_displaced_mesh'
p48414
sS'required'
p48415
I00
sS'group_name'
p48416
S'Advanced'
p48417
sa(dp48418
S'description'
p48419
S'The name of the variable that this postprocessor operates on\n'
p48420
sS'cpp_type'
p48421
S'std::vector<VariableName>'
p48422
sS'default'
p48423
g3
sS'name'
p48424
S'variable'
p48425
sS'required'
p48426
I01
sS'group_name'
p48427
NsasS'name'
p48428
S'/UserObjects/NodalL2Error'
p48429
sa(dp48430
S'description'
p48431
g3
sS'subblocks'
p48432
NsS'parameters'
p48433
(lp48434
(dp48435
S'description'
p48436
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48437
sS'cpp_type'
p48438
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p48439
sS'default'
p48440
g3
sS'name'
p48441
S'block'
p48442
sS'required'
p48443
I00
sS'group_name'
p48444
Nsa(dp48445
S'description'
p48446
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p48447
sS'cpp_type'
p48448
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p48449
sS'default'
p48450
g3
sS'name'
p48451
S'boundary'
p48452
sS'required'
p48453
I00
sS'group_name'
p48454
Nsa(dp48455
S'description'
p48456
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48457
sS'cpp_type'
p48458
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p48459
sS'default'
p48460
g3
sS'name'
p48461
S'control_tags'
p48462
sS'required'
p48463
I00
sS'group_name'
p48464
S'Advanced'
p48465
sa(dp48466
S'description'
p48467
S'Set the enabled status of the MooseObject.\n'
p48468
sS'cpp_type'
p48469
S'bool'
p48470
sS'default'
p48471
S'1'
p48472
sS'name'
p48473
S'enable'
p48474
sS'required'
p48475
I00
sS'group_name'
p48476
S'Advanced'
p48477
sa(dp48478
S'name'
p48479
S'execute_on'
p48480
sS'cpp_type'
p48481
S'MultiMooseEnum'
p48482
sS'default'
p48483
S'TIMESTEP_END'
p48484
sS'description'
p48485
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48486
sS'required'
p48487
I00
sS'options'
p48488
S'none initial linear nonlinear timestep_end timestep_begin custom'
p48489
sS'group_name'
p48490
Nsa(dp48491
S'description'
p48492
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p48493
sS'cpp_type'
p48494
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p48495
sS'default'
p48496
g3
sS'name'
p48497
S'outputs'
p48498
sS'required'
p48499
I00
sS'group_name'
p48500
S'Advanced'
p48501
sa(dp48502
S'description'
p48503
S'The seed for the master random number generator\n'
p48504
sS'cpp_type'
p48505
S'unsigned int'
p48506
sS'default'
p48507
S'0'
p48508
sS'name'
p48509
S'seed'
p48510
sS'required'
p48511
I00
sS'group_name'
p48512
S'Advanced'
p48513
sa(dp48514
S'description'
p48515
g3
sS'cpp_type'
p48516
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p48517
sS'default'
p48518
S'NodalL2Norm'
p48519
sS'name'
p48520
S'type'
p48521
sS'required'
p48522
I00
sS'group_name'
p48523
Nsa(dp48524
S'description'
p48525
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p48526
sS'cpp_type'
p48527
S'bool'
p48528
sS'default'
p48529
S'1'
p48530
sS'name'
p48531
S'unique_node_execute'
p48532
sS'required'
p48533
I00
sS'group_name'
p48534
Nsa(dp48535
S'description'
p48536
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48537
sS'cpp_type'
p48538
S'bool'
p48539
sS'default'
p48540
S'0'
p48541
sS'name'
p48542
S'use_displaced_mesh'
p48543
sS'required'
p48544
I00
sS'group_name'
p48545
S'Advanced'
p48546
sa(dp48547
S'description'
p48548
S'The name of the variable that this postprocessor operates on\n'
p48549
sS'cpp_type'
p48550
S'std::vector<VariableName>'
p48551
sS'default'
p48552
g3
sS'name'
p48553
S'variable'
p48554
sS'required'
p48555
I01
sS'group_name'
p48556
NsasS'name'
p48557
S'/UserObjects/NodalL2Norm'
p48558
sa(dp48559
S'description'
p48560
g3
sS'subblocks'
p48561
NsS'parameters'
p48562
(lp48563
(dp48564
S'description'
p48565
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48566
sS'cpp_type'
p48567
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p48568
sS'default'
p48569
g3
sS'name'
p48570
S'block'
p48571
sS'required'
p48572
I00
sS'group_name'
p48573
Nsa(dp48574
S'description'
p48575
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p48576
sS'cpp_type'
p48577
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p48578
sS'default'
p48579
g3
sS'name'
p48580
S'boundary'
p48581
sS'required'
p48582
I00
sS'group_name'
p48583
Nsa(dp48584
S'description'
p48585
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48586
sS'cpp_type'
p48587
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p48588
sS'default'
p48589
g3
sS'name'
p48590
S'control_tags'
p48591
sS'required'
p48592
I00
sS'group_name'
p48593
S'Advanced'
p48594
sa(dp48595
S'description'
p48596
S'Set the enabled status of the MooseObject.\n'
p48597
sS'cpp_type'
p48598
S'bool'
p48599
sS'default'
p48600
S'1'
p48601
sS'name'
p48602
S'enable'
p48603
sS'required'
p48604
I00
sS'group_name'
p48605
S'Advanced'
p48606
sa(dp48607
S'name'
p48608
S'execute_on'
p48609
sS'cpp_type'
p48610
S'MultiMooseEnum'
p48611
sS'default'
p48612
S'TIMESTEP_END'
p48613
sS'description'
p48614
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48615
sS'required'
p48616
I00
sS'options'
p48617
S'none initial linear nonlinear timestep_end timestep_begin custom'
p48618
sS'group_name'
p48619
Nsa(dp48620
S'description'
p48621
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p48622
sS'cpp_type'
p48623
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p48624
sS'default'
p48625
g3
sS'name'
p48626
S'outputs'
p48627
sS'required'
p48628
I00
sS'group_name'
p48629
S'Advanced'
p48630
sa(dp48631
S'description'
p48632
S'The seed for the master random number generator\n'
p48633
sS'cpp_type'
p48634
S'unsigned int'
p48635
sS'default'
p48636
S'0'
p48637
sS'name'
p48638
S'seed'
p48639
sS'required'
p48640
I00
sS'group_name'
p48641
S'Advanced'
p48642
sa(dp48643
S'description'
p48644
g3
sS'cpp_type'
p48645
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p48646
sS'default'
p48647
S'NodalMaxValue'
p48648
sS'name'
p48649
S'type'
p48650
sS'required'
p48651
I00
sS'group_name'
p48652
Nsa(dp48653
S'description'
p48654
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p48655
sS'cpp_type'
p48656
S'bool'
p48657
sS'default'
p48658
S'0'
p48659
sS'name'
p48660
S'unique_node_execute'
p48661
sS'required'
p48662
I00
sS'group_name'
p48663
Nsa(dp48664
S'description'
p48665
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48666
sS'cpp_type'
p48667
S'bool'
p48668
sS'default'
p48669
S'0'
p48670
sS'name'
p48671
S'use_displaced_mesh'
p48672
sS'required'
p48673
I00
sS'group_name'
p48674
S'Advanced'
p48675
sa(dp48676
S'description'
p48677
S'The name of the variable that this postprocessor operates on\n'
p48678
sS'cpp_type'
p48679
S'std::vector<VariableName>'
p48680
sS'default'
p48681
g3
sS'name'
p48682
S'variable'
p48683
sS'required'
p48684
I01
sS'group_name'
p48685
NsasS'name'
p48686
S'/UserObjects/NodalMaxValue'
p48687
sa(dp48688
S'description'
p48689
g3
sS'subblocks'
p48690
NsS'parameters'
p48691
(lp48692
(dp48693
S'description'
p48694
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p48695
sS'cpp_type'
p48696
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p48697
sS'default'
p48698
g3
sS'name'
p48699
S'boundary'
p48700
sS'required'
p48701
I01
sS'group_name'
p48702
Nsa(dp48703
S'description'
p48704
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48705
sS'cpp_type'
p48706
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p48707
sS'default'
p48708
g3
sS'name'
p48709
S'control_tags'
p48710
sS'required'
p48711
I00
sS'group_name'
p48712
S'Advanced'
p48713
sa(dp48714
S'description'
p48715
S"Node set ID which contains the nodes that are in 'corners'.\n"
p48716
sS'cpp_type'
p48717
S'BoundaryName'
p48718
sS'default'
p48719
g3
sS'name'
p48720
S'corner_boundary'
p48721
sS'required'
p48722
I01
sS'group_name'
p48723
Nsa(dp48724
S'description'
p48725
S'Set the enabled status of the MooseObject.\n'
p48726
sS'cpp_type'
p48727
S'bool'
p48728
sS'default'
p48729
S'1'
p48730
sS'name'
p48731
S'enable'
p48732
sS'required'
p48733
I00
sS'group_name'
p48734
S'Advanced'
p48735
sa(dp48736
S'name'
p48737
S'execute_on'
p48738
sS'cpp_type'
p48739
S'MultiMooseEnum'
p48740
sS'default'
p48741
S'TIMESTEP_END'
p48742
sS'description'
p48743
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48744
sS'required'
p48745
I00
sS'options'
p48746
S'none initial linear nonlinear timestep_end timestep_begin custom'
p48747
sS'group_name'
p48748
Nsa(dp48749
S'description'
p48750
g3
sS'cpp_type'
p48751
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p48752
sS'default'
p48753
S'NodalNormalsCorner'
p48754
sS'name'
p48755
S'type'
p48756
sS'required'
p48757
I00
sS'group_name'
p48758
Nsa(dp48759
S'description'
p48760
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48761
sS'cpp_type'
p48762
S'bool'
p48763
sS'default'
p48764
S'0'
p48765
sS'name'
p48766
S'use_displaced_mesh'
p48767
sS'required'
p48768
I00
sS'group_name'
p48769
S'Advanced'
p48770
sasS'name'
p48771
S'/UserObjects/NodalNormalsCorner'
p48772
sa(dp48773
S'description'
p48774
g3
sS'subblocks'
p48775
NsS'parameters'
p48776
(lp48777
(dp48778
S'description'
p48779
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48780
sS'cpp_type'
p48781
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p48782
sS'default'
p48783
g3
sS'name'
p48784
S'block'
p48785
sS'required'
p48786
I00
sS'group_name'
p48787
Nsa(dp48788
S'description'
p48789
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p48790
sS'cpp_type'
p48791
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p48792
sS'default'
p48793
g3
sS'name'
p48794
S'boundary'
p48795
sS'required'
p48796
I00
sS'group_name'
p48797
Nsa(dp48798
S'description'
p48799
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48800
sS'cpp_type'
p48801
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p48802
sS'default'
p48803
g3
sS'name'
p48804
S'control_tags'
p48805
sS'required'
p48806
I00
sS'group_name'
p48807
S'Advanced'
p48808
sa(dp48809
S'description'
p48810
S'Set the enabled status of the MooseObject.\n'
p48811
sS'cpp_type'
p48812
S'bool'
p48813
sS'default'
p48814
S'1'
p48815
sS'name'
p48816
S'enable'
p48817
sS'required'
p48818
I00
sS'group_name'
p48819
S'Advanced'
p48820
sa(dp48821
S'name'
p48822
S'execute_on'
p48823
sS'cpp_type'
p48824
S'MultiMooseEnum'
p48825
sS'default'
p48826
S'TIMESTEP_END'
p48827
sS'description'
p48828
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48829
sS'required'
p48830
I00
sS'options'
p48831
S'none initial linear nonlinear timestep_end timestep_begin custom'
p48832
sS'group_name'
p48833
Nsa(dp48834
S'description'
p48835
S'The seed for the master random number generator\n'
p48836
sS'cpp_type'
p48837
S'unsigned int'
p48838
sS'default'
p48839
S'0'
p48840
sS'name'
p48841
S'seed'
p48842
sS'required'
p48843
I00
sS'group_name'
p48844
S'Advanced'
p48845
sa(dp48846
S'description'
p48847
g3
sS'cpp_type'
p48848
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p48849
sS'default'
p48850
S'NodalNormalsEvaluator'
p48851
sS'name'
p48852
S'type'
p48853
sS'required'
p48854
I00
sS'group_name'
p48855
Nsa(dp48856
S'description'
p48857
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p48858
sS'cpp_type'
p48859
S'bool'
p48860
sS'default'
p48861
S'0'
p48862
sS'name'
p48863
S'unique_node_execute'
p48864
sS'required'
p48865
I00
sS'group_name'
p48866
Nsa(dp48867
S'description'
p48868
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48869
sS'cpp_type'
p48870
S'bool'
p48871
sS'default'
p48872
S'0'
p48873
sS'name'
p48874
S'use_displaced_mesh'
p48875
sS'required'
p48876
I00
sS'group_name'
p48877
S'Advanced'
p48878
sasS'name'
p48879
S'/UserObjects/NodalNormalsEvaluator'
p48880
sa(dp48881
S'description'
p48882
g3
sS'subblocks'
p48883
NsS'parameters'
p48884
(lp48885
(dp48886
S'description'
p48887
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48888
sS'cpp_type'
p48889
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p48890
sS'default'
p48891
g3
sS'name'
p48892
S'block'
p48893
sS'required'
p48894
I00
sS'group_name'
p48895
Nsa(dp48896
S'description'
p48897
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p48898
sS'cpp_type'
p48899
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p48900
sS'default'
p48901
g3
sS'name'
p48902
S'boundary'
p48903
sS'required'
p48904
I00
sS'group_name'
p48905
Nsa(dp48906
S'description'
p48907
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p48908
sS'cpp_type'
p48909
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p48910
sS'default'
p48911
g3
sS'name'
p48912
S'control_tags'
p48913
sS'required'
p48914
I00
sS'group_name'
p48915
S'Advanced'
p48916
sa(dp48917
S'description'
p48918
S"Node set ID which contains the nodes that are in 'corners'.\n"
p48919
sS'cpp_type'
p48920
S'BoundaryName'
p48921
sS'default'
p48922
g3
sS'name'
p48923
S'corner_boundary'
p48924
sS'required'
p48925
I00
sS'group_name'
p48926
Nsa(dp48927
S'description'
p48928
S'Set the enabled status of the MooseObject.\n'
p48929
sS'cpp_type'
p48930
S'bool'
p48931
sS'default'
p48932
S'1'
p48933
sS'name'
p48934
S'enable'
p48935
sS'required'
p48936
I00
sS'group_name'
p48937
S'Advanced'
p48938
sa(dp48939
S'name'
p48940
S'execute_on'
p48941
sS'cpp_type'
p48942
S'MultiMooseEnum'
p48943
sS'default'
p48944
S'TIMESTEP_END'
p48945
sS'description'
p48946
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p48947
sS'required'
p48948
I00
sS'options'
p48949
S'none initial linear nonlinear timestep_end timestep_begin custom'
p48950
sS'group_name'
p48951
Nsa(dp48952
S'description'
p48953
S'The seed for the master random number generator\n'
p48954
sS'cpp_type'
p48955
S'unsigned int'
p48956
sS'default'
p48957
S'0'
p48958
sS'name'
p48959
S'seed'
p48960
sS'required'
p48961
I00
sS'group_name'
p48962
S'Advanced'
p48963
sa(dp48964
S'description'
p48965
g3
sS'cpp_type'
p48966
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p48967
sS'default'
p48968
S'NodalNormalsPreprocessor'
p48969
sS'name'
p48970
S'type'
p48971
sS'required'
p48972
I00
sS'group_name'
p48973
Nsa(dp48974
S'description'
p48975
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p48976
sS'cpp_type'
p48977
S'bool'
p48978
sS'default'
p48979
S'0'
p48980
sS'name'
p48981
S'use_displaced_mesh'
p48982
sS'required'
p48983
I00
sS'group_name'
p48984
S'Advanced'
p48985
sasS'name'
p48986
S'/UserObjects/NodalNormalsPreprocessor'
p48987
sa(dp48988
S'description'
p48989
g3
sS'subblocks'
p48990
NsS'parameters'
p48991
(lp48992
(dp48993
S'description'
p48994
S'The list of block ids (SubdomainID) that this object will be applied\n'
p48995
sS'cpp_type'
p48996
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p48997
sS'default'
p48998
g3
sS'name'
p48999
S'block'
p49000
sS'required'
p49001
I00
sS'group_name'
p49002
Nsa(dp49003
S'description'
p49004
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p49005
sS'cpp_type'
p49006
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p49007
sS'default'
p49008
g3
sS'name'
p49009
S'boundary'
p49010
sS'required'
p49011
I00
sS'group_name'
p49012
Nsa(dp49013
S'description'
p49014
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49015
sS'cpp_type'
p49016
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49017
sS'default'
p49018
g3
sS'name'
p49019
S'control_tags'
p49020
sS'required'
p49021
I00
sS'group_name'
p49022
S'Advanced'
p49023
sa(dp49024
S'description'
p49025
S'Set the enabled status of the MooseObject.\n'
p49026
sS'cpp_type'
p49027
S'bool'
p49028
sS'default'
p49029
S'1'
p49030
sS'name'
p49031
S'enable'
p49032
sS'required'
p49033
I00
sS'group_name'
p49034
S'Advanced'
p49035
sa(dp49036
S'name'
p49037
S'execute_on'
p49038
sS'cpp_type'
p49039
S'MultiMooseEnum'
p49040
sS'default'
p49041
S'TIMESTEP_END'
p49042
sS'description'
p49043
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49044
sS'required'
p49045
I00
sS'options'
p49046
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49047
sS'group_name'
p49048
Nsa(dp49049
S'description'
p49050
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49051
sS'cpp_type'
p49052
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49053
sS'default'
p49054
g3
sS'name'
p49055
S'outputs'
p49056
sS'required'
p49057
I00
sS'group_name'
p49058
S'Advanced'
p49059
sa(dp49060
S'description'
p49061
S'The seed for the master random number generator\n'
p49062
sS'cpp_type'
p49063
S'unsigned int'
p49064
sS'default'
p49065
S'0'
p49066
sS'name'
p49067
S'seed'
p49068
sS'required'
p49069
I00
sS'group_name'
p49070
S'Advanced'
p49071
sa(dp49072
S'description'
p49073
g3
sS'cpp_type'
p49074
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49075
sS'default'
p49076
S'NodalProxyMaxValue'
p49077
sS'name'
p49078
S'type'
p49079
sS'required'
p49080
I00
sS'group_name'
p49081
Nsa(dp49082
S'description'
p49083
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p49084
sS'cpp_type'
p49085
S'bool'
p49086
sS'default'
p49087
S'0'
p49088
sS'name'
p49089
S'unique_node_execute'
p49090
sS'required'
p49091
I00
sS'group_name'
p49092
Nsa(dp49093
S'description'
p49094
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49095
sS'cpp_type'
p49096
S'bool'
p49097
sS'default'
p49098
S'0'
p49099
sS'name'
p49100
S'use_displaced_mesh'
p49101
sS'required'
p49102
I00
sS'group_name'
p49103
S'Advanced'
p49104
sa(dp49105
S'description'
p49106
S'The name of the variable that this postprocessor operates on\n'
p49107
sS'cpp_type'
p49108
S'std::vector<VariableName>'
p49109
sS'default'
p49110
g3
sS'name'
p49111
S'variable'
p49112
sS'required'
p49113
I01
sS'group_name'
p49114
NsasS'name'
p49115
S'/UserObjects/NodalProxyMaxValue'
p49116
sa(dp49117
S'description'
p49118
g3
sS'subblocks'
p49119
NsS'parameters'
p49120
(lp49121
(dp49122
S'description'
p49123
S'The list of block ids (SubdomainID) that this object will be applied\n'
p49124
sS'cpp_type'
p49125
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p49126
sS'default'
p49127
g3
sS'name'
p49128
S'block'
p49129
sS'required'
p49130
I00
sS'group_name'
p49131
Nsa(dp49132
S'description'
p49133
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p49134
sS'cpp_type'
p49135
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p49136
sS'default'
p49137
g3
sS'name'
p49138
S'boundary'
p49139
sS'required'
p49140
I00
sS'group_name'
p49141
Nsa(dp49142
S'description'
p49143
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49144
sS'cpp_type'
p49145
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49146
sS'default'
p49147
g3
sS'name'
p49148
S'control_tags'
p49149
sS'required'
p49150
I00
sS'group_name'
p49151
S'Advanced'
p49152
sa(dp49153
S'description'
p49154
S'Set the enabled status of the MooseObject.\n'
p49155
sS'cpp_type'
p49156
S'bool'
p49157
sS'default'
p49158
S'1'
p49159
sS'name'
p49160
S'enable'
p49161
sS'required'
p49162
I00
sS'group_name'
p49163
S'Advanced'
p49164
sa(dp49165
S'name'
p49166
S'execute_on'
p49167
sS'cpp_type'
p49168
S'MultiMooseEnum'
p49169
sS'default'
p49170
S'TIMESTEP_END'
p49171
sS'description'
p49172
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49173
sS'required'
p49174
I00
sS'options'
p49175
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49176
sS'group_name'
p49177
Nsa(dp49178
S'description'
p49179
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49180
sS'cpp_type'
p49181
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49182
sS'default'
p49183
g3
sS'name'
p49184
S'outputs'
p49185
sS'required'
p49186
I00
sS'group_name'
p49187
S'Advanced'
p49188
sa(dp49189
S'description'
p49190
S'The seed for the master random number generator\n'
p49191
sS'cpp_type'
p49192
S'unsigned int'
p49193
sS'default'
p49194
S'0'
p49195
sS'name'
p49196
S'seed'
p49197
sS'required'
p49198
I00
sS'group_name'
p49199
S'Advanced'
p49200
sa(dp49201
S'description'
p49202
g3
sS'cpp_type'
p49203
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49204
sS'default'
p49205
S'NodalSum'
p49206
sS'name'
p49207
S'type'
p49208
sS'required'
p49209
I00
sS'group_name'
p49210
Nsa(dp49211
S'description'
p49212
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p49213
sS'cpp_type'
p49214
S'bool'
p49215
sS'default'
p49216
S'1'
p49217
sS'name'
p49218
S'unique_node_execute'
p49219
sS'required'
p49220
I00
sS'group_name'
p49221
Nsa(dp49222
S'description'
p49223
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49224
sS'cpp_type'
p49225
S'bool'
p49226
sS'default'
p49227
S'0'
p49228
sS'name'
p49229
S'use_displaced_mesh'
p49230
sS'required'
p49231
I00
sS'group_name'
p49232
S'Advanced'
p49233
sa(dp49234
S'description'
p49235
S'The name of the variable that this postprocessor operates on\n'
p49236
sS'cpp_type'
p49237
S'std::vector<VariableName>'
p49238
sS'default'
p49239
g3
sS'name'
p49240
S'variable'
p49241
sS'required'
p49242
I01
sS'group_name'
p49243
NsasS'name'
p49244
S'/UserObjects/NodalSum'
p49245
sa(dp49246
S'description'
p49247
g3
sS'subblocks'
p49248
NsS'parameters'
p49249
(lp49250
(dp49251
S'description'
p49252
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49253
sS'cpp_type'
p49254
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49255
sS'default'
p49256
g3
sS'name'
p49257
S'control_tags'
p49258
sS'required'
p49259
I00
sS'group_name'
p49260
S'Advanced'
p49261
sa(dp49262
S'description'
p49263
S'Set the enabled status of the MooseObject.\n'
p49264
sS'cpp_type'
p49265
S'bool'
p49266
sS'default'
p49267
S'1'
p49268
sS'name'
p49269
S'enable'
p49270
sS'required'
p49271
I00
sS'group_name'
p49272
S'Advanced'
p49273
sa(dp49274
S'name'
p49275
S'execute_on'
p49276
sS'cpp_type'
p49277
S'MultiMooseEnum'
p49278
sS'default'
p49279
S'TIMESTEP_END'
p49280
sS'description'
p49281
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49282
sS'required'
p49283
I00
sS'options'
p49284
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49285
sS'group_name'
p49286
Nsa(dp49287
S'description'
p49288
S'The ID of the node where we monitor\n'
p49289
sS'cpp_type'
p49290
S'unsigned int'
p49291
sS'default'
p49292
g3
sS'name'
p49293
S'nodeid'
p49294
sS'required'
p49295
I01
sS'group_name'
p49296
Nsa(dp49297
S'description'
p49298
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49299
sS'cpp_type'
p49300
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49301
sS'default'
p49302
g3
sS'name'
p49303
S'outputs'
p49304
sS'required'
p49305
I00
sS'group_name'
p49306
S'Advanced'
p49307
sa(dp49308
S'description'
p49309
S'A scale factor to be applied to the variable\n'
p49310
sS'cpp_type'
p49311
S'double'
p49312
sS'default'
p49313
S'1'
p49314
sS'name'
p49315
S'scale_factor'
p49316
sS'required'
p49317
I00
sS'group_name'
p49318
Nsa(dp49319
S'description'
p49320
g3
sS'cpp_type'
p49321
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49322
sS'default'
p49323
S'NodalVariableValue'
p49324
sS'name'
p49325
S'type'
p49326
sS'required'
p49327
I00
sS'group_name'
p49328
Nsa(dp49329
S'description'
p49330
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49331
sS'cpp_type'
p49332
S'bool'
p49333
sS'default'
p49334
S'0'
p49335
sS'name'
p49336
S'use_displaced_mesh'
p49337
sS'required'
p49338
I00
sS'group_name'
p49339
S'Advanced'
p49340
sa(dp49341
S'description'
p49342
S'The variable to be monitored\n'
p49343
sS'cpp_type'
p49344
S'VariableName'
p49345
sS'default'
p49346
g3
sS'name'
p49347
S'variable'
p49348
sS'required'
p49349
I01
sS'group_name'
p49350
NsasS'name'
p49351
S'/UserObjects/NodalVariableValue'
p49352
sa(dp49353
S'description'
p49354
g3
sS'subblocks'
p49355
NsS'parameters'
p49356
(lp49357
(dp49358
S'description'
p49359
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49360
sS'cpp_type'
p49361
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49362
sS'default'
p49363
g3
sS'name'
p49364
S'control_tags'
p49365
sS'required'
p49366
I00
sS'group_name'
p49367
S'Advanced'
p49368
sa(dp49369
S'description'
p49370
S'Set the enabled status of the MooseObject.\n'
p49371
sS'cpp_type'
p49372
S'bool'
p49373
sS'default'
p49374
S'1'
p49375
sS'name'
p49376
S'enable'
p49377
sS'required'
p49378
I00
sS'group_name'
p49379
S'Advanced'
p49380
sa(dp49381
S'name'
p49382
S'execute_on'
p49383
sS'cpp_type'
p49384
S'MultiMooseEnum'
p49385
sS'default'
p49386
S'TIMESTEP_END'
p49387
sS'description'
p49388
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49389
sS'required'
p49390
I00
sS'options'
p49391
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49392
sS'group_name'
p49393
Nsa(dp49394
S'description'
p49395
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49396
sS'cpp_type'
p49397
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49398
sS'default'
p49399
g3
sS'name'
p49400
S'outputs'
p49401
sS'required'
p49402
I00
sS'group_name'
p49403
S'Advanced'
p49404
sa(dp49405
S'name'
p49406
S'system'
p49407
sS'cpp_type'
p49408
S'MooseEnum'
p49409
sS'default'
p49410
S'ALL'
p49411
sS'description'
p49412
S'The system(s) to retrieve the number of DOFs from (NL, AUX, ALL). Default == ALL\n'
p49413
sS'required'
p49414
I00
sS'options'
p49415
S'NL AUX ALL'
p49416
sS'group_name'
p49417
Nsa(dp49418
S'description'
p49419
g3
sS'cpp_type'
p49420
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49421
sS'default'
p49422
S'NumDOFs'
p49423
sS'name'
p49424
S'type'
p49425
sS'required'
p49426
I00
sS'group_name'
p49427
Nsa(dp49428
S'description'
p49429
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49430
sS'cpp_type'
p49431
S'bool'
p49432
sS'default'
p49433
S'0'
p49434
sS'name'
p49435
S'use_displaced_mesh'
p49436
sS'required'
p49437
I00
sS'group_name'
p49438
S'Advanced'
p49439
sasS'name'
p49440
S'/UserObjects/NumDOFs'
p49441
sa(dp49442
S'description'
p49443
g3
sS'subblocks'
p49444
NsS'parameters'
p49445
(lp49446
(dp49447
S'description'
p49448
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49449
sS'cpp_type'
p49450
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49451
sS'default'
p49452
g3
sS'name'
p49453
S'control_tags'
p49454
sS'required'
p49455
I00
sS'group_name'
p49456
S'Advanced'
p49457
sa(dp49458
S'name'
p49459
S'elem_filter'
p49460
sS'cpp_type'
p49461
S'MooseEnum'
p49462
sS'default'
p49463
S'active'
p49464
sS'description'
p49465
S'The type of elements to include in the count (active, total). Default == active\n'
p49466
sS'required'
p49467
I00
sS'options'
p49468
S'active total'
p49469
sS'group_name'
p49470
Nsa(dp49471
S'description'
p49472
S'Set the enabled status of the MooseObject.\n'
p49473
sS'cpp_type'
p49474
S'bool'
p49475
sS'default'
p49476
S'1'
p49477
sS'name'
p49478
S'enable'
p49479
sS'required'
p49480
I00
sS'group_name'
p49481
S'Advanced'
p49482
sa(dp49483
S'name'
p49484
S'execute_on'
p49485
sS'cpp_type'
p49486
S'MultiMooseEnum'
p49487
sS'default'
p49488
S'TIMESTEP_END'
p49489
sS'description'
p49490
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49491
sS'required'
p49492
I00
sS'options'
p49493
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49494
sS'group_name'
p49495
Nsa(dp49496
S'description'
p49497
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49498
sS'cpp_type'
p49499
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49500
sS'default'
p49501
g3
sS'name'
p49502
S'outputs'
p49503
sS'required'
p49504
I00
sS'group_name'
p49505
S'Advanced'
p49506
sa(dp49507
S'description'
p49508
g3
sS'cpp_type'
p49509
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49510
sS'default'
p49511
S'NumElems'
p49512
sS'name'
p49513
S'type'
p49514
sS'required'
p49515
I00
sS'group_name'
p49516
Nsa(dp49517
S'description'
p49518
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49519
sS'cpp_type'
p49520
S'bool'
p49521
sS'default'
p49522
S'0'
p49523
sS'name'
p49524
S'use_displaced_mesh'
p49525
sS'required'
p49526
I00
sS'group_name'
p49527
S'Advanced'
p49528
sasS'name'
p49529
S'/UserObjects/NumElems'
p49530
sa(dp49531
S'description'
p49532
g3
sS'subblocks'
p49533
NsS'parameters'
p49534
(lp49535
(dp49536
S'description'
p49537
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49538
sS'cpp_type'
p49539
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49540
sS'default'
p49541
g3
sS'name'
p49542
S'control_tags'
p49543
sS'required'
p49544
I00
sS'group_name'
p49545
S'Advanced'
p49546
sa(dp49547
S'description'
p49548
S'Set the enabled status of the MooseObject.\n'
p49549
sS'cpp_type'
p49550
S'bool'
p49551
sS'default'
p49552
S'1'
p49553
sS'name'
p49554
S'enable'
p49555
sS'required'
p49556
I00
sS'group_name'
p49557
S'Advanced'
p49558
sa(dp49559
S'name'
p49560
S'execute_on'
p49561
sS'cpp_type'
p49562
S'MultiMooseEnum'
p49563
sS'default'
p49564
S'TIMESTEP_END'
p49565
sS'description'
p49566
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49567
sS'required'
p49568
I00
sS'options'
p49569
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49570
sS'group_name'
p49571
Nsa(dp49572
S'description'
p49573
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49574
sS'cpp_type'
p49575
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49576
sS'default'
p49577
g3
sS'name'
p49578
S'outputs'
p49579
sS'required'
p49580
I00
sS'group_name'
p49581
S'Advanced'
p49582
sa(dp49583
S'description'
p49584
g3
sS'cpp_type'
p49585
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49586
sS'default'
p49587
S'NumLinearIterations'
p49588
sS'name'
p49589
S'type'
p49590
sS'required'
p49591
I00
sS'group_name'
p49592
Nsa(dp49593
S'description'
p49594
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49595
sS'cpp_type'
p49596
S'bool'
p49597
sS'default'
p49598
S'0'
p49599
sS'name'
p49600
S'use_displaced_mesh'
p49601
sS'required'
p49602
I00
sS'group_name'
p49603
S'Advanced'
p49604
sasS'name'
p49605
S'/UserObjects/NumLinearIterations'
p49606
sa(dp49607
S'description'
p49608
g3
sS'subblocks'
p49609
NsS'parameters'
p49610
(lp49611
(dp49612
S'description'
p49613
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49614
sS'cpp_type'
p49615
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49616
sS'default'
p49617
g3
sS'name'
p49618
S'control_tags'
p49619
sS'required'
p49620
I00
sS'group_name'
p49621
S'Advanced'
p49622
sa(dp49623
S'description'
p49624
S'Set the enabled status of the MooseObject.\n'
p49625
sS'cpp_type'
p49626
S'bool'
p49627
sS'default'
p49628
S'1'
p49629
sS'name'
p49630
S'enable'
p49631
sS'required'
p49632
I00
sS'group_name'
p49633
S'Advanced'
p49634
sa(dp49635
S'name'
p49636
S'execute_on'
p49637
sS'cpp_type'
p49638
S'MultiMooseEnum'
p49639
sS'default'
p49640
S'TIMESTEP_END'
p49641
sS'description'
p49642
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49643
sS'required'
p49644
I00
sS'options'
p49645
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49646
sS'group_name'
p49647
Nsa(dp49648
S'description'
p49649
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49650
sS'cpp_type'
p49651
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49652
sS'default'
p49653
g3
sS'name'
p49654
S'outputs'
p49655
sS'required'
p49656
I00
sS'group_name'
p49657
S'Advanced'
p49658
sa(dp49659
S'description'
p49660
g3
sS'cpp_type'
p49661
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49662
sS'default'
p49663
S'NumNodes'
p49664
sS'name'
p49665
S'type'
p49666
sS'required'
p49667
I00
sS'group_name'
p49668
Nsa(dp49669
S'description'
p49670
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49671
sS'cpp_type'
p49672
S'bool'
p49673
sS'default'
p49674
S'0'
p49675
sS'name'
p49676
S'use_displaced_mesh'
p49677
sS'required'
p49678
I00
sS'group_name'
p49679
S'Advanced'
p49680
sasS'name'
p49681
S'/UserObjects/NumNodes'
p49682
sa(dp49683
S'description'
p49684
g3
sS'subblocks'
p49685
NsS'parameters'
p49686
(lp49687
(dp49688
S'description'
p49689
S'When set to true, accumulates to count the total over all Picard iterations for each step\n'
p49690
sS'cpp_type'
p49691
S'bool'
p49692
sS'default'
p49693
S'0'
p49694
sS'name'
p49695
S'accumulate_over_step'
p49696
sS'required'
p49697
I00
sS'group_name'
p49698
Nsa(dp49699
S'description'
p49700
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49701
sS'cpp_type'
p49702
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49703
sS'default'
p49704
g3
sS'name'
p49705
S'control_tags'
p49706
sS'required'
p49707
I00
sS'group_name'
p49708
S'Advanced'
p49709
sa(dp49710
S'description'
p49711
S'Set the enabled status of the MooseObject.\n'
p49712
sS'cpp_type'
p49713
S'bool'
p49714
sS'default'
p49715
S'1'
p49716
sS'name'
p49717
S'enable'
p49718
sS'required'
p49719
I00
sS'group_name'
p49720
S'Advanced'
p49721
sa(dp49722
S'name'
p49723
S'execute_on'
p49724
sS'cpp_type'
p49725
S'MultiMooseEnum'
p49726
sS'default'
p49727
S'TIMESTEP_END'
p49728
sS'description'
p49729
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49730
sS'required'
p49731
I00
sS'options'
p49732
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49733
sS'group_name'
p49734
Nsa(dp49735
S'description'
p49736
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49737
sS'cpp_type'
p49738
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49739
sS'default'
p49740
g3
sS'name'
p49741
S'outputs'
p49742
sS'required'
p49743
I00
sS'group_name'
p49744
S'Advanced'
p49745
sa(dp49746
S'description'
p49747
g3
sS'cpp_type'
p49748
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49749
sS'default'
p49750
S'NumNonlinearIterations'
p49751
sS'name'
p49752
S'type'
p49753
sS'required'
p49754
I00
sS'group_name'
p49755
Nsa(dp49756
S'description'
p49757
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49758
sS'cpp_type'
p49759
S'bool'
p49760
sS'default'
p49761
S'0'
p49762
sS'name'
p49763
S'use_displaced_mesh'
p49764
sS'required'
p49765
I00
sS'group_name'
p49766
S'Advanced'
p49767
sasS'name'
p49768
S'/UserObjects/NumNonlinearIterations'
p49769
sa(dp49770
S'description'
p49771
g3
sS'subblocks'
p49772
NsS'parameters'
p49773
(lp49774
(dp49775
S'description'
p49776
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49777
sS'cpp_type'
p49778
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49779
sS'default'
p49780
g3
sS'name'
p49781
S'control_tags'
p49782
sS'required'
p49783
I00
sS'group_name'
p49784
S'Advanced'
p49785
sa(dp49786
S'description'
p49787
S'Set the enabled status of the MooseObject.\n'
p49788
sS'cpp_type'
p49789
S'bool'
p49790
sS'default'
p49791
S'1'
p49792
sS'name'
p49793
S'enable'
p49794
sS'required'
p49795
I00
sS'group_name'
p49796
S'Advanced'
p49797
sa(dp49798
S'name'
p49799
S'execute_on'
p49800
sS'cpp_type'
p49801
S'MultiMooseEnum'
p49802
sS'default'
p49803
S'TIMESTEP_END'
p49804
sS'description'
p49805
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49806
sS'required'
p49807
I00
sS'options'
p49808
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49809
sS'group_name'
p49810
Nsa(dp49811
S'description'
p49812
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49813
sS'cpp_type'
p49814
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49815
sS'default'
p49816
g3
sS'name'
p49817
S'outputs'
p49818
sS'required'
p49819
I00
sS'group_name'
p49820
S'Advanced'
p49821
sa(dp49822
S'description'
p49823
g3
sS'cpp_type'
p49824
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49825
sS'default'
p49826
S'NumPicardIterations'
p49827
sS'name'
p49828
S'type'
p49829
sS'required'
p49830
I00
sS'group_name'
p49831
Nsa(dp49832
S'description'
p49833
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49834
sS'cpp_type'
p49835
S'bool'
p49836
sS'default'
p49837
S'0'
p49838
sS'name'
p49839
S'use_displaced_mesh'
p49840
sS'required'
p49841
I00
sS'group_name'
p49842
S'Advanced'
p49843
sasS'name'
p49844
S'/UserObjects/NumPicardIterations'
p49845
sa(dp49846
S'description'
p49847
g3
sS'subblocks'
p49848
NsS'parameters'
p49849
(lp49850
(dp49851
S'description'
p49852
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49853
sS'cpp_type'
p49854
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49855
sS'default'
p49856
g3
sS'name'
p49857
S'control_tags'
p49858
sS'required'
p49859
I00
sS'group_name'
p49860
S'Advanced'
p49861
sa(dp49862
S'description'
p49863
S'Set the enabled status of the MooseObject.\n'
p49864
sS'cpp_type'
p49865
S'bool'
p49866
sS'default'
p49867
S'1'
p49868
sS'name'
p49869
S'enable'
p49870
sS'required'
p49871
I00
sS'group_name'
p49872
S'Advanced'
p49873
sa(dp49874
S'name'
p49875
S'execute_on'
p49876
sS'cpp_type'
p49877
S'MultiMooseEnum'
p49878
sS'default'
p49879
S'TIMESTEP_END'
p49880
sS'description'
p49881
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49882
sS'required'
p49883
I00
sS'options'
p49884
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49885
sS'group_name'
p49886
Nsa(dp49887
S'description'
p49888
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49889
sS'cpp_type'
p49890
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49891
sS'default'
p49892
g3
sS'name'
p49893
S'outputs'
p49894
sS'required'
p49895
I00
sS'group_name'
p49896
S'Advanced'
p49897
sa(dp49898
S'description'
p49899
g3
sS'cpp_type'
p49900
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49901
sS'default'
p49902
S'NumResidualEvaluations'
p49903
sS'name'
p49904
S'type'
p49905
sS'required'
p49906
I00
sS'group_name'
p49907
Nsa(dp49908
S'description'
p49909
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49910
sS'cpp_type'
p49911
S'bool'
p49912
sS'default'
p49913
S'0'
p49914
sS'name'
p49915
S'use_displaced_mesh'
p49916
sS'required'
p49917
I00
sS'group_name'
p49918
S'Advanced'
p49919
sasS'name'
p49920
S'/UserObjects/NumResidualEvaluations'
p49921
sa(dp49922
S'description'
p49923
g3
sS'subblocks'
p49924
NsS'parameters'
p49925
(lp49926
(dp49927
S'description'
p49928
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p49929
sS'cpp_type'
p49930
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p49931
sS'default'
p49932
g3
sS'name'
p49933
S'control_tags'
p49934
sS'required'
p49935
I00
sS'group_name'
p49936
S'Advanced'
p49937
sa(dp49938
S'description'
p49939
S'Set the enabled status of the MooseObject.\n'
p49940
sS'cpp_type'
p49941
S'bool'
p49942
sS'default'
p49943
S'1'
p49944
sS'name'
p49945
S'enable'
p49946
sS'required'
p49947
I00
sS'group_name'
p49948
S'Advanced'
p49949
sa(dp49950
S'name'
p49951
S'execute_on'
p49952
sS'cpp_type'
p49953
S'MultiMooseEnum'
p49954
sS'default'
p49955
S'TIMESTEP_END'
p49956
sS'description'
p49957
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p49958
sS'required'
p49959
I00
sS'options'
p49960
S'none initial linear nonlinear timestep_end timestep_begin custom'
p49961
sS'group_name'
p49962
Nsa(dp49963
S'description'
p49964
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p49965
sS'cpp_type'
p49966
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p49967
sS'default'
p49968
g3
sS'name'
p49969
S'outputs'
p49970
sS'required'
p49971
I00
sS'group_name'
p49972
S'Advanced'
p49973
sa(dp49974
S'name'
p49975
S'system'
p49976
sS'cpp_type'
p49977
S'MooseEnum'
p49978
sS'default'
p49979
S'nonlinear'
p49980
sS'description'
p49981
S'The system for which you want to print the number of variables.\n'
p49982
sS'required'
p49983
I00
sS'options'
p49984
S'nonlinear auxiliary'
p49985
sS'group_name'
p49986
Nsa(dp49987
S'description'
p49988
g3
sS'cpp_type'
p49989
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p49990
sS'default'
p49991
S'NumVars'
p49992
sS'name'
p49993
S'type'
p49994
sS'required'
p49995
I00
sS'group_name'
p49996
Nsa(dp49997
S'description'
p49998
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p49999
sS'cpp_type'
p50000
S'bool'
p50001
sS'default'
p50002
S'0'
p50003
sS'name'
p50004
S'use_displaced_mesh'
p50005
sS'required'
p50006
I00
sS'group_name'
p50007
S'Advanced'
p50008
sasS'name'
p50009
S'/UserObjects/NumVars'
p50010
sa(dp50011
S'description'
p50012
g3
sS'subblocks'
p50013
NsS'parameters'
p50014
(lp50015
(dp50016
S'description'
p50017
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50018
sS'cpp_type'
p50019
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50020
sS'default'
p50021
g3
sS'name'
p50022
S'control_tags'
p50023
sS'required'
p50024
I00
sS'group_name'
p50025
S'Advanced'
p50026
sa(dp50027
S'description'
p50028
S'Set the enabled status of the MooseObject.\n'
p50029
sS'cpp_type'
p50030
S'bool'
p50031
sS'default'
p50032
S'1'
p50033
sS'name'
p50034
S'enable'
p50035
sS'required'
p50036
I00
sS'group_name'
p50037
S'Advanced'
p50038
sa(dp50039
S'name'
p50040
S'execute_on'
p50041
sS'cpp_type'
p50042
S'MultiMooseEnum'
p50043
sS'default'
p50044
S'TIMESTEP_END'
p50045
sS'description'
p50046
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50047
sS'required'
p50048
I00
sS'options'
p50049
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50050
sS'group_name'
p50051
Nsa(dp50052
S'description'
p50053
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50054
sS'cpp_type'
p50055
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50056
sS'default'
p50057
g3
sS'name'
p50058
S'outputs'
p50059
sS'required'
p50060
I00
sS'group_name'
p50061
S'Advanced'
p50062
sa(dp50063
S'description'
p50064
S'The name of the postprocessor used for exit criterion\n'
p50065
sS'cpp_type'
p50066
S'PostprocessorName'
p50067
sS'default'
p50068
g3
sS'name'
p50069
S'postprocessor'
p50070
sS'required'
p50071
I01
sS'group_name'
p50072
Nsa(dp50073
S'description'
p50074
g3
sS'cpp_type'
p50075
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50076
sS'default'
p50077
S'PercentChangePostprocessor'
p50078
sS'name'
p50079
S'type'
p50080
sS'required'
p50081
I00
sS'group_name'
p50082
Nsa(dp50083
S'description'
p50084
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50085
sS'cpp_type'
p50086
S'bool'
p50087
sS'default'
p50088
S'0'
p50089
sS'name'
p50090
S'use_displaced_mesh'
p50091
sS'required'
p50092
I00
sS'group_name'
p50093
S'Advanced'
p50094
sasS'name'
p50095
S'/UserObjects/PercentChangePostprocessor'
p50096
sa(dp50097
S'description'
p50098
g3
sS'subblocks'
p50099
NsS'parameters'
p50100
(lp50101
(dp50102
S'description'
p50103
S'The category or "Header" for the event\n'
p50104
sS'cpp_type'
p50105
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50106
sS'default'
p50107
S'Execution'
p50108
sS'name'
p50109
S'category'
p50110
sS'required'
p50111
I00
sS'group_name'
p50112
Nsa(dp50113
S'name'
p50114
S'column'
p50115
sS'cpp_type'
p50116
S'MooseEnum'
p50117
sS'default'
p50118
S'total_time_with_sub'
p50119
sS'description'
p50120
S'The column you want the value of (Default: total_time_with_sub).\n'
p50121
sS'required'
p50122
I00
sS'options'
p50123
S'n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub'
p50124
sS'group_name'
p50125
Nsa(dp50126
S'description'
p50127
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50128
sS'cpp_type'
p50129
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50130
sS'default'
p50131
g3
sS'name'
p50132
S'control_tags'
p50133
sS'required'
p50134
I00
sS'group_name'
p50135
S'Advanced'
p50136
sa(dp50137
S'description'
p50138
S'Set the enabled status of the MooseObject.\n'
p50139
sS'cpp_type'
p50140
S'bool'
p50141
sS'default'
p50142
S'1'
p50143
sS'name'
p50144
S'enable'
p50145
sS'required'
p50146
I00
sS'group_name'
p50147
S'Advanced'
p50148
sa(dp50149
S'description'
p50150
S'The name or "label" of the event ("ALIVE" and "ACTIVE" are also valid events, category and column are ignored for these cases).\n'
p50151
sS'cpp_type'
p50152
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50153
sS'default'
p50154
g3
sS'name'
p50155
S'event'
p50156
sS'required'
p50157
I01
sS'group_name'
p50158
Nsa(dp50159
S'name'
p50160
S'execute_on'
p50161
sS'cpp_type'
p50162
S'MultiMooseEnum'
p50163
sS'default'
p50164
S'TIMESTEP_END'
p50165
sS'description'
p50166
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50167
sS'required'
p50168
I00
sS'options'
p50169
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50170
sS'group_name'
p50171
Nsa(dp50172
S'description'
p50173
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50174
sS'cpp_type'
p50175
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50176
sS'default'
p50177
g3
sS'name'
p50178
S'outputs'
p50179
sS'required'
p50180
I00
sS'group_name'
p50181
S'Advanced'
p50182
sa(dp50183
S'description'
p50184
g3
sS'cpp_type'
p50185
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50186
sS'default'
p50187
S'PerformanceData'
p50188
sS'name'
p50189
S'type'
p50190
sS'required'
p50191
I00
sS'group_name'
p50192
Nsa(dp50193
S'description'
p50194
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50195
sS'cpp_type'
p50196
S'bool'
p50197
sS'default'
p50198
S'0'
p50199
sS'name'
p50200
S'use_displaced_mesh'
p50201
sS'required'
p50202
I00
sS'group_name'
p50203
S'Advanced'
p50204
sasS'name'
p50205
S'/UserObjects/PerformanceData'
p50206
sa(dp50207
S'description'
p50208
g3
sS'subblocks'
p50209
NsS'parameters'
p50210
(lp50211
(dp50212
S'description'
p50213
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50214
sS'cpp_type'
p50215
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50216
sS'default'
p50217
g3
sS'name'
p50218
S'control_tags'
p50219
sS'required'
p50220
I00
sS'group_name'
p50221
S'Advanced'
p50222
sa(dp50223
S'description'
p50224
S'Set the enabled status of the MooseObject.\n'
p50225
sS'cpp_type'
p50226
S'bool'
p50227
sS'default'
p50228
S'1'
p50229
sS'name'
p50230
S'enable'
p50231
sS'required'
p50232
I00
sS'group_name'
p50233
S'Advanced'
p50234
sa(dp50235
S'name'
p50236
S'execute_on'
p50237
sS'cpp_type'
p50238
S'MultiMooseEnum'
p50239
sS'default'
p50240
S'TIMESTEP_END'
p50241
sS'description'
p50242
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50243
sS'required'
p50244
I00
sS'options'
p50245
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50246
sS'group_name'
p50247
Nsa(dp50248
S'description'
p50249
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50250
sS'cpp_type'
p50251
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50252
sS'default'
p50253
g3
sS'name'
p50254
S'outputs'
p50255
sS'required'
p50256
I00
sS'group_name'
p50257
S'Advanced'
p50258
sa(dp50259
S'description'
p50260
S'The physical point where the solution will be evaluated.\n'
p50261
sS'cpp_type'
p50262
S'libMesh::Point'
p50263
sS'default'
p50264
g3
sS'name'
p50265
S'point'
p50266
sS'required'
p50267
I01
sS'group_name'
p50268
Nsa(dp50269
S'description'
p50270
g3
sS'cpp_type'
p50271
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50272
sS'default'
p50273
S'PointValue'
p50274
sS'name'
p50275
S'type'
p50276
sS'required'
p50277
I00
sS'group_name'
p50278
Nsa(dp50279
S'description'
p50280
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50281
sS'cpp_type'
p50282
S'bool'
p50283
sS'default'
p50284
S'0'
p50285
sS'name'
p50286
S'use_displaced_mesh'
p50287
sS'required'
p50288
I00
sS'group_name'
p50289
S'Advanced'
p50290
sa(dp50291
S'description'
p50292
S'The name of the variable that this postprocessor operates on.\n'
p50293
sS'cpp_type'
p50294
S'VariableName'
p50295
sS'default'
p50296
g3
sS'name'
p50297
S'variable'
p50298
sS'required'
p50299
I01
sS'group_name'
p50300
NsasS'name'
p50301
S'/UserObjects/PointValue'
p50302
sa(dp50303
S'description'
p50304
g3
sS'subblocks'
p50305
NsS'parameters'
p50306
(lp50307
(dp50308
S'description'
p50309
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50310
sS'cpp_type'
p50311
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50312
sS'default'
p50313
g3
sS'name'
p50314
S'control_tags'
p50315
sS'required'
p50316
I00
sS'group_name'
p50317
S'Advanced'
p50318
sa(dp50319
S'description'
p50320
S'The default value\n'
p50321
sS'cpp_type'
p50322
S'double'
p50323
sS'default'
p50324
g3
sS'name'
p50325
S'default'
p50326
sS'required'
p50327
I00
sS'group_name'
p50328
Nsa(dp50329
S'description'
p50330
S'Set the enabled status of the MooseObject.\n'
p50331
sS'cpp_type'
p50332
S'bool'
p50333
sS'default'
p50334
S'1'
p50335
sS'name'
p50336
S'enable'
p50337
sS'required'
p50338
I00
sS'group_name'
p50339
S'Advanced'
p50340
sa(dp50341
S'name'
p50342
S'execute_on'
p50343
sS'cpp_type'
p50344
S'MultiMooseEnum'
p50345
sS'default'
p50346
S'TIMESTEP_END'
p50347
sS'description'
p50348
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50349
sS'required'
p50350
I00
sS'options'
p50351
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50352
sS'group_name'
p50353
Nsa(dp50354
S'description'
p50355
S'Initialize the old postprocessor value with the default value\n'
p50356
sS'cpp_type'
p50357
S'bool'
p50358
sS'default'
p50359
S'1'
p50360
sS'name'
p50361
S'initialize_old'
p50362
sS'required'
p50363
I00
sS'group_name'
p50364
Nsa(dp50365
S'description'
p50366
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50367
sS'cpp_type'
p50368
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50369
sS'default'
p50370
g3
sS'name'
p50371
S'outputs'
p50372
sS'required'
p50373
I00
sS'group_name'
p50374
S'Advanced'
p50375
sa(dp50376
S'description'
p50377
g3
sS'cpp_type'
p50378
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50379
sS'default'
p50380
S'Receiver'
p50381
sS'name'
p50382
S'type'
p50383
sS'required'
p50384
I00
sS'group_name'
p50385
Nsa(dp50386
S'description'
p50387
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50388
sS'cpp_type'
p50389
S'bool'
p50390
sS'default'
p50391
S'0'
p50392
sS'name'
p50393
S'use_displaced_mesh'
p50394
sS'required'
p50395
I00
sS'group_name'
p50396
S'Advanced'
p50397
sasS'name'
p50398
S'/UserObjects/Receiver'
p50399
sa(dp50400
S'description'
p50401
g3
sS'subblocks'
p50402
NsS'parameters'
p50403
(lp50404
(dp50405
S'description'
p50406
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50407
sS'cpp_type'
p50408
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50409
sS'default'
p50410
g3
sS'name'
p50411
S'control_tags'
p50412
sS'required'
p50413
I00
sS'group_name'
p50414
S'Advanced'
p50415
sa(dp50416
S'description'
p50417
S'Set the enabled status of the MooseObject.\n'
p50418
sS'cpp_type'
p50419
S'bool'
p50420
sS'default'
p50421
S'1'
p50422
sS'name'
p50423
S'enable'
p50424
sS'required'
p50425
I00
sS'group_name'
p50426
S'Advanced'
p50427
sa(dp50428
S'name'
p50429
S'execute_on'
p50430
sS'cpp_type'
p50431
S'MultiMooseEnum'
p50432
sS'default'
p50433
S'TIMESTEP_END'
p50434
sS'description'
p50435
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50436
sS'required'
p50437
I00
sS'options'
p50438
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50439
sS'group_name'
p50440
Nsa(dp50441
S'description'
p50442
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50443
sS'cpp_type'
p50444
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50445
sS'default'
p50446
g3
sS'name'
p50447
S'outputs'
p50448
sS'required'
p50449
I00
sS'group_name'
p50450
S'Advanced'
p50451
sa(dp50452
S'description'
p50453
g3
sS'cpp_type'
p50454
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50455
sS'default'
p50456
S'RelativeSolutionDifferenceNorm'
p50457
sS'name'
p50458
S'type'
p50459
sS'required'
p50460
I00
sS'group_name'
p50461
Nsa(dp50462
S'description'
p50463
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50464
sS'cpp_type'
p50465
S'bool'
p50466
sS'default'
p50467
S'0'
p50468
sS'name'
p50469
S'use_displaced_mesh'
p50470
sS'required'
p50471
I00
sS'group_name'
p50472
S'Advanced'
p50473
sasS'name'
p50474
S'/UserObjects/RelativeSolutionDifferenceNorm'
p50475
sa(dp50476
S'description'
p50477
g3
sS'subblocks'
p50478
NsS'parameters'
p50479
(lp50480
(dp50481
S'description'
p50482
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50483
sS'cpp_type'
p50484
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50485
sS'default'
p50486
g3
sS'name'
p50487
S'control_tags'
p50488
sS'required'
p50489
I00
sS'group_name'
p50490
S'Advanced'
p50491
sa(dp50492
S'description'
p50493
S'Set the enabled status of the MooseObject.\n'
p50494
sS'cpp_type'
p50495
S'bool'
p50496
sS'default'
p50497
S'1'
p50498
sS'name'
p50499
S'enable'
p50500
sS'required'
p50501
I00
sS'group_name'
p50502
S'Advanced'
p50503
sa(dp50504
S'name'
p50505
S'execute_on'
p50506
sS'cpp_type'
p50507
S'MultiMooseEnum'
p50508
sS'default'
p50509
S'TIMESTEP_END'
p50510
sS'description'
p50511
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50512
sS'required'
p50513
I00
sS'options'
p50514
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50515
sS'group_name'
p50516
Nsa(dp50517
S'description'
p50518
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50519
sS'cpp_type'
p50520
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50521
sS'default'
p50522
g3
sS'name'
p50523
S'outputs'
p50524
sS'required'
p50525
I00
sS'group_name'
p50526
S'Advanced'
p50527
sa(dp50528
S'name'
p50529
S'residual_type'
p50530
sS'cpp_type'
p50531
S'MooseEnum'
p50532
sS'default'
p50533
S'FINAL'
p50534
sS'description'
p50535
S'Type of residual to be reported.  Choices are: FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET\n'
p50536
sS'required'
p50537
I00
sS'options'
p50538
S'FINAL INITIAL_BEFORE_PRESET INITIAL_AFTER_PRESET'
p50539
sS'group_name'
p50540
Nsa(dp50541
S'description'
p50542
g3
sS'cpp_type'
p50543
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50544
sS'default'
p50545
S'Residual'
p50546
sS'name'
p50547
S'type'
p50548
sS'required'
p50549
I00
sS'group_name'
p50550
Nsa(dp50551
S'description'
p50552
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50553
sS'cpp_type'
p50554
S'bool'
p50555
sS'default'
p50556
S'0'
p50557
sS'name'
p50558
S'use_displaced_mesh'
p50559
sS'required'
p50560
I00
sS'group_name'
p50561
S'Advanced'
p50562
sasS'name'
p50563
S'/UserObjects/Residual'
p50564
sa(dp50565
S'description'
p50566
g3
sS'subblocks'
p50567
NsS'parameters'
p50568
(lp50569
(dp50570
S'description'
p50571
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50572
sS'cpp_type'
p50573
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50574
sS'default'
p50575
g3
sS'name'
p50576
S'control_tags'
p50577
sS'required'
p50578
I00
sS'group_name'
p50579
S'Advanced'
p50580
sa(dp50581
S'description'
p50582
S'Set the enabled status of the MooseObject.\n'
p50583
sS'cpp_type'
p50584
S'bool'
p50585
sS'default'
p50586
S'1'
p50587
sS'name'
p50588
S'enable'
p50589
sS'required'
p50590
I00
sS'group_name'
p50591
S'Advanced'
p50592
sa(dp50593
S'name'
p50594
S'execute_on'
p50595
sS'cpp_type'
p50596
S'MultiMooseEnum'
p50597
sS'default'
p50598
S'TIMESTEP_END'
p50599
sS'description'
p50600
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50601
sS'required'
p50602
I00
sS'options'
p50603
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50604
sS'group_name'
p50605
Nsa(dp50606
S'description'
p50607
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50608
sS'cpp_type'
p50609
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50610
sS'default'
p50611
g3
sS'name'
p50612
S'outputs'
p50613
sS'required'
p50614
I00
sS'group_name'
p50615
S'Advanced'
p50616
sa(dp50617
S'name'
p50618
S'time_type'
p50619
sS'cpp_type'
p50620
S'MooseEnum'
p50621
sS'default'
p50622
g3
sS'description'
p50623
S'Whether to output the total elapsed or just the active time\n'
p50624
sS'required'
p50625
I01
sS'options'
p50626
S'alive active'
p50627
sS'group_name'
p50628
Nsa(dp50629
S'description'
p50630
g3
sS'cpp_type'
p50631
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50632
sS'default'
p50633
S'RunTime'
p50634
sS'name'
p50635
S'type'
p50636
sS'required'
p50637
I00
sS'group_name'
p50638
Nsa(dp50639
S'description'
p50640
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50641
sS'cpp_type'
p50642
S'bool'
p50643
sS'default'
p50644
S'0'
p50645
sS'name'
p50646
S'use_displaced_mesh'
p50647
sS'required'
p50648
I00
sS'group_name'
p50649
S'Advanced'
p50650
sasS'name'
p50651
S'/UserObjects/RunTime'
p50652
sa(dp50653
S'description'
p50654
g3
sS'subblocks'
p50655
NsS'parameters'
p50656
(lp50657
(dp50658
S'description'
p50659
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50660
sS'cpp_type'
p50661
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50662
sS'default'
p50663
g3
sS'name'
p50664
S'control_tags'
p50665
sS'required'
p50666
I00
sS'group_name'
p50667
S'Advanced'
p50668
sa(dp50669
S'description'
p50670
S'Set the enabled status of the MooseObject.\n'
p50671
sS'cpp_type'
p50672
S'bool'
p50673
sS'default'
p50674
S'1'
p50675
sS'name'
p50676
S'enable'
p50677
sS'required'
p50678
I00
sS'group_name'
p50679
S'Advanced'
p50680
sa(dp50681
S'name'
p50682
S'execute_on'
p50683
sS'cpp_type'
p50684
S'MultiMooseEnum'
p50685
sS'default'
p50686
S'TIMESTEP_END'
p50687
sS'description'
p50688
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50689
sS'required'
p50690
I00
sS'options'
p50691
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50692
sS'group_name'
p50693
Nsa(dp50694
S'description'
p50695
S'The analytic solution to compare against\n'
p50696
sS'cpp_type'
p50697
S'FunctionName'
p50698
sS'default'
p50699
g3
sS'name'
p50700
S'function'
p50701
sS'required'
p50702
I01
sS'group_name'
p50703
Nsa(dp50704
S'description'
p50705
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50706
sS'cpp_type'
p50707
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50708
sS'default'
p50709
g3
sS'name'
p50710
S'outputs'
p50711
sS'required'
p50712
I00
sS'group_name'
p50713
S'Advanced'
p50714
sa(dp50715
S'description'
p50716
g3
sS'cpp_type'
p50717
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50718
sS'default'
p50719
S'ScalarL2Error'
p50720
sS'name'
p50721
S'type'
p50722
sS'required'
p50723
I00
sS'group_name'
p50724
Nsa(dp50725
S'description'
p50726
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50727
sS'cpp_type'
p50728
S'bool'
p50729
sS'default'
p50730
S'0'
p50731
sS'name'
p50732
S'use_displaced_mesh'
p50733
sS'required'
p50734
I00
sS'group_name'
p50735
S'Advanced'
p50736
sa(dp50737
S'description'
p50738
S'The name of the scalar variable\n'
p50739
sS'cpp_type'
p50740
S'VariableName'
p50741
sS'default'
p50742
g3
sS'name'
p50743
S'variable'
p50744
sS'required'
p50745
I01
sS'group_name'
p50746
NsasS'name'
p50747
S'/UserObjects/ScalarL2Error'
p50748
sa(dp50749
S'description'
p50750
g3
sS'subblocks'
p50751
NsS'parameters'
p50752
(lp50753
(dp50754
S'description'
p50755
S'Component to output for this variable\n'
p50756
sS'cpp_type'
p50757
S'unsigned int'
p50758
sS'default'
p50759
S'0'
p50760
sS'name'
p50761
S'component'
p50762
sS'required'
p50763
I00
sS'group_name'
p50764
Nsa(dp50765
S'description'
p50766
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50767
sS'cpp_type'
p50768
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50769
sS'default'
p50770
g3
sS'name'
p50771
S'control_tags'
p50772
sS'required'
p50773
I00
sS'group_name'
p50774
S'Advanced'
p50775
sa(dp50776
S'description'
p50777
S'Set the enabled status of the MooseObject.\n'
p50778
sS'cpp_type'
p50779
S'bool'
p50780
sS'default'
p50781
S'1'
p50782
sS'name'
p50783
S'enable'
p50784
sS'required'
p50785
I00
sS'group_name'
p50786
S'Advanced'
p50787
sa(dp50788
S'name'
p50789
S'execute_on'
p50790
sS'cpp_type'
p50791
S'MultiMooseEnum'
p50792
sS'default'
p50793
S'TIMESTEP_END'
p50794
sS'description'
p50795
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50796
sS'required'
p50797
I00
sS'options'
p50798
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50799
sS'group_name'
p50800
Nsa(dp50801
S'description'
p50802
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50803
sS'cpp_type'
p50804
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50805
sS'default'
p50806
g3
sS'name'
p50807
S'outputs'
p50808
sS'required'
p50809
I00
sS'group_name'
p50810
S'Advanced'
p50811
sa(dp50812
S'description'
p50813
g3
sS'cpp_type'
p50814
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50815
sS'default'
p50816
S'ScalarVariable'
p50817
sS'name'
p50818
S'type'
p50819
sS'required'
p50820
I00
sS'group_name'
p50821
Nsa(dp50822
S'description'
p50823
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50824
sS'cpp_type'
p50825
S'bool'
p50826
sS'default'
p50827
S'0'
p50828
sS'name'
p50829
S'use_displaced_mesh'
p50830
sS'required'
p50831
I00
sS'group_name'
p50832
S'Advanced'
p50833
sa(dp50834
S'description'
p50835
S'Name of the variable\n'
p50836
sS'cpp_type'
p50837
S'VariableName'
p50838
sS'default'
p50839
g3
sS'name'
p50840
S'variable'
p50841
sS'required'
p50842
I01
sS'group_name'
p50843
NsasS'name'
p50844
S'/UserObjects/ScalarVariable'
p50845
sa(dp50846
S'description'
p50847
g3
sS'subblocks'
p50848
NsS'parameters'
p50849
(lp50850
(dp50851
S'description'
p50852
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50853
sS'cpp_type'
p50854
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50855
sS'default'
p50856
g3
sS'name'
p50857
S'control_tags'
p50858
sS'required'
p50859
I00
sS'group_name'
p50860
S'Advanced'
p50861
sa(dp50862
S'description'
p50863
S'Set the enabled status of the MooseObject.\n'
p50864
sS'cpp_type'
p50865
S'bool'
p50866
sS'default'
p50867
S'1'
p50868
sS'name'
p50869
S'enable'
p50870
sS'required'
p50871
I00
sS'group_name'
p50872
S'Advanced'
p50873
sa(dp50874
S'name'
p50875
S'execute_on'
p50876
sS'cpp_type'
p50877
S'MultiMooseEnum'
p50878
sS'default'
p50879
S'TIMESTEP_END'
p50880
sS'description'
p50881
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50882
sS'required'
p50883
I00
sS'options'
p50884
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50885
sS'group_name'
p50886
Nsa(dp50887
S'description'
p50888
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50889
sS'cpp_type'
p50890
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50891
sS'default'
p50892
g3
sS'name'
p50893
S'outputs'
p50894
sS'required'
p50895
I00
sS'group_name'
p50896
S'Advanced'
p50897
sa(dp50898
S'description'
p50899
S'The scaling factor\n'
p50900
sS'cpp_type'
p50901
S'double'
p50902
sS'default'
p50903
S'1'
p50904
sS'name'
p50905
S'scaling_factor'
p50906
sS'required'
p50907
I00
sS'group_name'
p50908
Nsa(dp50909
S'description'
p50910
g3
sS'cpp_type'
p50911
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p50912
sS'default'
p50913
S'ScalePostprocessor'
p50914
sS'name'
p50915
S'type'
p50916
sS'required'
p50917
I00
sS'group_name'
p50918
Nsa(dp50919
S'description'
p50920
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p50921
sS'cpp_type'
p50922
S'bool'
p50923
sS'default'
p50924
S'0'
p50925
sS'name'
p50926
S'use_displaced_mesh'
p50927
sS'required'
p50928
I00
sS'group_name'
p50929
S'Advanced'
p50930
sa(dp50931
S'description'
p50932
S'The postprocessor to be scaled\n'
p50933
sS'cpp_type'
p50934
S'PostprocessorName'
p50935
sS'default'
p50936
g3
sS'name'
p50937
S'value'
p50938
sS'required'
p50939
I01
sS'group_name'
p50940
NsasS'name'
p50941
S'/UserObjects/ScalePostprocessor'
p50942
sa(dp50943
S'description'
p50944
g3
sS'subblocks'
p50945
NsS'parameters'
p50946
(lp50947
(dp50948
S'description'
p50949
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p50950
sS'cpp_type'
p50951
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p50952
sS'default'
p50953
g3
sS'name'
p50954
S'boundary'
p50955
sS'required'
p50956
I01
sS'group_name'
p50957
Nsa(dp50958
S'description'
p50959
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p50960
sS'cpp_type'
p50961
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p50962
sS'default'
p50963
g3
sS'name'
p50964
S'control_tags'
p50965
sS'required'
p50966
I00
sS'group_name'
p50967
S'Advanced'
p50968
sa(dp50969
S'description'
p50970
S'Set the enabled status of the MooseObject.\n'
p50971
sS'cpp_type'
p50972
S'bool'
p50973
sS'default'
p50974
S'1'
p50975
sS'name'
p50976
S'enable'
p50977
sS'required'
p50978
I00
sS'group_name'
p50979
S'Advanced'
p50980
sa(dp50981
S'name'
p50982
S'execute_on'
p50983
sS'cpp_type'
p50984
S'MultiMooseEnum'
p50985
sS'default'
p50986
S'TIMESTEP_END'
p50987
sS'description'
p50988
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p50989
sS'required'
p50990
I00
sS'options'
p50991
S'none initial linear nonlinear timestep_end timestep_begin custom'
p50992
sS'group_name'
p50993
Nsa(dp50994
S'description'
p50995
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p50996
sS'cpp_type'
p50997
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p50998
sS'default'
p50999
g3
sS'name'
p51000
S'outputs'
p51001
sS'required'
p51002
I00
sS'group_name'
p51003
S'Advanced'
p51004
sa(dp51005
S'description'
p51006
g3
sS'cpp_type'
p51007
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51008
sS'default'
p51009
S'SideAverageValue'
p51010
sS'name'
p51011
S'type'
p51012
sS'required'
p51013
I00
sS'group_name'
p51014
Nsa(dp51015
S'description'
p51016
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51017
sS'cpp_type'
p51018
S'bool'
p51019
sS'default'
p51020
S'0'
p51021
sS'name'
p51022
S'use_displaced_mesh'
p51023
sS'required'
p51024
I00
sS'group_name'
p51025
S'Advanced'
p51026
sa(dp51027
S'description'
p51028
S'The name of the variable that this boundary condition applies to\n'
p51029
sS'cpp_type'
p51030
S'std::vector<VariableName>'
p51031
sS'default'
p51032
g3
sS'name'
p51033
S'variable'
p51034
sS'required'
p51035
I01
sS'group_name'
p51036
NsasS'name'
p51037
S'/UserObjects/SideAverageValue'
p51038
sa(dp51039
S'description'
p51040
g3
sS'subblocks'
p51041
NsS'parameters'
p51042
(lp51043
(dp51044
S'description'
p51045
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p51046
sS'cpp_type'
p51047
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p51048
sS'default'
p51049
g3
sS'name'
p51050
S'boundary'
p51051
sS'required'
p51052
I01
sS'group_name'
p51053
Nsa(dp51054
S'description'
p51055
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51056
sS'cpp_type'
p51057
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51058
sS'default'
p51059
g3
sS'name'
p51060
S'control_tags'
p51061
sS'required'
p51062
I00
sS'group_name'
p51063
S'Advanced'
p51064
sa(dp51065
S'description'
p51066
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p51067
sS'cpp_type'
p51068
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51069
sS'default'
p51070
g3
sS'name'
p51071
S'diffusivity'
p51072
sS'required'
p51073
I01
sS'group_name'
p51074
Nsa(dp51075
S'description'
p51076
S'Set the enabled status of the MooseObject.\n'
p51077
sS'cpp_type'
p51078
S'bool'
p51079
sS'default'
p51080
S'1'
p51081
sS'name'
p51082
S'enable'
p51083
sS'required'
p51084
I00
sS'group_name'
p51085
S'Advanced'
p51086
sa(dp51087
S'name'
p51088
S'execute_on'
p51089
sS'cpp_type'
p51090
S'MultiMooseEnum'
p51091
sS'default'
p51092
S'TIMESTEP_END'
p51093
sS'description'
p51094
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51095
sS'required'
p51096
I00
sS'options'
p51097
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51098
sS'group_name'
p51099
Nsa(dp51100
S'description'
p51101
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p51102
sS'cpp_type'
p51103
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p51104
sS'default'
p51105
g3
sS'name'
p51106
S'outputs'
p51107
sS'required'
p51108
I00
sS'group_name'
p51109
S'Advanced'
p51110
sa(dp51111
S'description'
p51112
g3
sS'cpp_type'
p51113
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51114
sS'default'
p51115
S'SideFluxAverage'
p51116
sS'name'
p51117
S'type'
p51118
sS'required'
p51119
I00
sS'group_name'
p51120
Nsa(dp51121
S'description'
p51122
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51123
sS'cpp_type'
p51124
S'bool'
p51125
sS'default'
p51126
S'0'
p51127
sS'name'
p51128
S'use_displaced_mesh'
p51129
sS'required'
p51130
I00
sS'group_name'
p51131
S'Advanced'
p51132
sa(dp51133
S'description'
p51134
S'The name of the variable that this boundary condition applies to\n'
p51135
sS'cpp_type'
p51136
S'std::vector<VariableName>'
p51137
sS'default'
p51138
g3
sS'name'
p51139
S'variable'
p51140
sS'required'
p51141
I01
sS'group_name'
p51142
NsasS'name'
p51143
S'/UserObjects/SideFluxAverage'
p51144
sa(dp51145
S'description'
p51146
g3
sS'subblocks'
p51147
NsS'parameters'
p51148
(lp51149
(dp51150
S'description'
p51151
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p51152
sS'cpp_type'
p51153
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p51154
sS'default'
p51155
g3
sS'name'
p51156
S'boundary'
p51157
sS'required'
p51158
I01
sS'group_name'
p51159
Nsa(dp51160
S'description'
p51161
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51162
sS'cpp_type'
p51163
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51164
sS'default'
p51165
g3
sS'name'
p51166
S'control_tags'
p51167
sS'required'
p51168
I00
sS'group_name'
p51169
S'Advanced'
p51170
sa(dp51171
S'description'
p51172
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p51173
sS'cpp_type'
p51174
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51175
sS'default'
p51176
g3
sS'name'
p51177
S'diffusivity'
p51178
sS'required'
p51179
I01
sS'group_name'
p51180
Nsa(dp51181
S'description'
p51182
S'Set the enabled status of the MooseObject.\n'
p51183
sS'cpp_type'
p51184
S'bool'
p51185
sS'default'
p51186
S'1'
p51187
sS'name'
p51188
S'enable'
p51189
sS'required'
p51190
I00
sS'group_name'
p51191
S'Advanced'
p51192
sa(dp51193
S'name'
p51194
S'execute_on'
p51195
sS'cpp_type'
p51196
S'MultiMooseEnum'
p51197
sS'default'
p51198
S'TIMESTEP_END'
p51199
sS'description'
p51200
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51201
sS'required'
p51202
I00
sS'options'
p51203
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51204
sS'group_name'
p51205
Nsa(dp51206
S'description'
p51207
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p51208
sS'cpp_type'
p51209
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p51210
sS'default'
p51211
g3
sS'name'
p51212
S'outputs'
p51213
sS'required'
p51214
I00
sS'group_name'
p51215
S'Advanced'
p51216
sa(dp51217
S'description'
p51218
g3
sS'cpp_type'
p51219
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51220
sS'default'
p51221
S'SideFluxIntegral'
p51222
sS'name'
p51223
S'type'
p51224
sS'required'
p51225
I00
sS'group_name'
p51226
Nsa(dp51227
S'description'
p51228
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51229
sS'cpp_type'
p51230
S'bool'
p51231
sS'default'
p51232
S'0'
p51233
sS'name'
p51234
S'use_displaced_mesh'
p51235
sS'required'
p51236
I00
sS'group_name'
p51237
S'Advanced'
p51238
sa(dp51239
S'description'
p51240
S'The name of the variable that this boundary condition applies to\n'
p51241
sS'cpp_type'
p51242
S'std::vector<VariableName>'
p51243
sS'default'
p51244
g3
sS'name'
p51245
S'variable'
p51246
sS'required'
p51247
I01
sS'group_name'
p51248
NsasS'name'
p51249
S'/UserObjects/SideFluxIntegral'
p51250
sa(dp51251
S'description'
p51252
g3
sS'subblocks'
p51253
NsS'parameters'
p51254
(lp51255
(dp51256
S'description'
p51257
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p51258
sS'cpp_type'
p51259
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p51260
sS'default'
p51261
g3
sS'name'
p51262
S'boundary'
p51263
sS'required'
p51264
I01
sS'group_name'
p51265
Nsa(dp51266
S'description'
p51267
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51268
sS'cpp_type'
p51269
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51270
sS'default'
p51271
g3
sS'name'
p51272
S'control_tags'
p51273
sS'required'
p51274
I00
sS'group_name'
p51275
S'Advanced'
p51276
sa(dp51277
S'description'
p51278
S'Set the enabled status of the MooseObject.\n'
p51279
sS'cpp_type'
p51280
S'bool'
p51281
sS'default'
p51282
S'1'
p51283
sS'name'
p51284
S'enable'
p51285
sS'required'
p51286
I00
sS'group_name'
p51287
S'Advanced'
p51288
sa(dp51289
S'name'
p51290
S'execute_on'
p51291
sS'cpp_type'
p51292
S'MultiMooseEnum'
p51293
sS'default'
p51294
S'TIMESTEP_END'
p51295
sS'description'
p51296
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51297
sS'required'
p51298
I00
sS'options'
p51299
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51300
sS'group_name'
p51301
Nsa(dp51302
S'description'
p51303
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p51304
sS'cpp_type'
p51305
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p51306
sS'default'
p51307
g3
sS'name'
p51308
S'outputs'
p51309
sS'required'
p51310
I00
sS'group_name'
p51311
S'Advanced'
p51312
sa(dp51313
S'description'
p51314
g3
sS'cpp_type'
p51315
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51316
sS'default'
p51317
S'SideIntegralVariablePostprocessor'
p51318
sS'name'
p51319
S'type'
p51320
sS'required'
p51321
I00
sS'group_name'
p51322
Nsa(dp51323
S'description'
p51324
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51325
sS'cpp_type'
p51326
S'bool'
p51327
sS'default'
p51328
S'0'
p51329
sS'name'
p51330
S'use_displaced_mesh'
p51331
sS'required'
p51332
I00
sS'group_name'
p51333
S'Advanced'
p51334
sa(dp51335
S'description'
p51336
S'The name of the variable that this boundary condition applies to\n'
p51337
sS'cpp_type'
p51338
S'std::vector<VariableName>'
p51339
sS'default'
p51340
g3
sS'name'
p51341
S'variable'
p51342
sS'required'
p51343
I01
sS'group_name'
p51344
NsasS'name'
p51345
S'/UserObjects/SideIntegralVariablePostprocessor'
p51346
sa(dp51347
S'description'
p51348
g3
sS'subblocks'
p51349
NsS'parameters'
p51350
(lp51351
(dp51352
S'description'
p51353
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51354
sS'cpp_type'
p51355
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51356
sS'default'
p51357
g3
sS'name'
p51358
S'control_tags'
p51359
sS'required'
p51360
I00
sS'group_name'
p51361
S'Advanced'
p51362
sa(dp51363
S'description'
p51364
S'Set the enabled status of the MooseObject.\n'
p51365
sS'cpp_type'
p51366
S'bool'
p51367
sS'default'
p51368
S'1'
p51369
sS'name'
p51370
S'enable'
p51371
sS'required'
p51372
I00
sS'group_name'
p51373
S'Advanced'
p51374
sa(dp51375
S'description'
p51376
S'The name of the file holding the equation system info in xda format (xda only).\n'
p51377
sS'cpp_type'
p51378
S'FileName'
p51379
sS'default'
p51380
S'<not supplied>'
p51381
sS'name'
p51382
S'es'
p51383
sS'required'
p51384
I00
sS'group_name'
p51385
Nsa(dp51386
S'name'
p51387
S'execute_on'
p51388
sS'cpp_type'
p51389
S'MultiMooseEnum'
p51390
sS'default'
p51391
S'TIMESTEP_END'
p51392
sS'description'
p51393
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51394
sS'required'
p51395
I00
sS'options'
p51396
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51397
sS'group_name'
p51398
Nsa(dp51399
S'description'
p51400
S'The name of the mesh file (must be xda or exodusII file).\n'
p51401
sS'cpp_type'
p51402
S'MeshFileName'
p51403
sS'default'
p51404
g3
sS'name'
p51405
S'mesh'
p51406
sS'required'
p51407
I01
sS'group_name'
p51408
Nsa(dp51409
S'description'
p51410
S'Anticlockwise rotation angle (in degrees) to use for rotation about rotation0_vector.\n'
p51411
sS'cpp_type'
p51412
S'double'
p51413
sS'default'
p51414
S'0'
p51415
sS'name'
p51416
S'rotation0_angle'
p51417
sS'required'
p51418
I00
sS'group_name'
p51419
Nsa(dp51420
S'description'
p51421
S'Vector about which to rotate points of the simulation.\n'
p51422
sS'cpp_type'
p51423
S'libMesh::VectorValue<double>'
p51424
sS'default'
p51425
S'0 0 1'
p51426
sS'name'
p51427
S'rotation0_vector'
p51428
sS'required'
p51429
I00
sS'group_name'
p51430
Nsa(dp51431
S'description'
p51432
S'Anticlockwise rotation angle (in degrees) to use for rotation about rotation1_vector.\n'
p51433
sS'cpp_type'
p51434
S'double'
p51435
sS'default'
p51436
S'0'
p51437
sS'name'
p51438
S'rotation1_angle'
p51439
sS'required'
p51440
I00
sS'group_name'
p51441
Nsa(dp51442
S'description'
p51443
S'Vector about which to rotate points of the simulation.\n'
p51444
sS'cpp_type'
p51445
S'libMesh::VectorValue<double>'
p51446
sS'default'
p51447
S'0 0 1'
p51448
sS'name'
p51449
S'rotation1_vector'
p51450
sS'required'
p51451
I00
sS'group_name'
p51452
Nsa(dp51453
S'description'
p51454
S'Scale factor for points in the simulation\n'
p51455
sS'cpp_type'
p51456
S'std::__1::vector<double, std::__1::allocator<double> >'
p51457
sS'default'
p51458
S'1 1 1'
p51459
sS'name'
p51460
S'scale'
p51461
sS'required'
p51462
I00
sS'group_name'
p51463
Nsa(dp51464
S'description'
p51465
S'Scale multiplying factor for points in the simulation\n'
p51466
sS'cpp_type'
p51467
S'std::__1::vector<double, std::__1::allocator<double> >'
p51468
sS'default'
p51469
S'1 1 1'
p51470
sS'name'
p51471
S'scale_multiplier'
p51472
sS'required'
p51473
I00
sS'group_name'
p51474
Nsa(dp51475
S'description'
p51476
S'The name of the system to pull values out of (xda only).\n'
p51477
sS'cpp_type'
p51478
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51479
sS'default'
p51480
S'nl0'
p51481
sS'name'
p51482
S'system'
p51483
sS'required'
p51484
I00
sS'group_name'
p51485
Nsa(dp51486
S'description'
p51487
S'The name of the nodal and elemental variables from the file you want to use for values\n'
p51488
sS'cpp_type'
p51489
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51490
sS'default'
p51491
g3
sS'name'
p51492
S'system_variables'
p51493
sS'required'
p51494
I00
sS'group_name'
p51495
Nsa(dp51496
S'description'
p51497
S'Index of the single timestep used or "LATEST" for the last timestep (exodusII only).  If not supplied, time interpolation will occur.\n'
p51498
sS'cpp_type'
p51499
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51500
sS'default'
p51501
g3
sS'name'
p51502
S'timestep'
p51503
sS'required'
p51504
I00
sS'group_name'
p51505
Nsa(dp51506
S'name'
p51507
S'transformation_order'
p51508
sS'cpp_type'
p51509
S'MultiMooseEnum'
p51510
sS'default'
p51511
S'SCALE TRANSLATION'
p51512
sS'description'
p51513
S"The order to perform the operations in.  Define R0 to be the rotation matrix encoded by rotation0_vector and rotation0_angle.  Similarly for R1.  Denote the scale by s, the scale_multiplier by m, and the translation by t.  Then, given a point x in the simulation, if transformation_order = 'rotation0 scale_multiplier translation scale rotation1' then form p = R1*(R0*x*m - t)/s.  Then the values provided by the SolutionUserObject at point x in the simulation are the variable values at point p in the mesh.\n"
p51514
sS'required'
p51515
I00
sS'options'
p51516
S'rotation0 translation scale rotation1 scale_multiplier'
p51517
sS'group_name'
p51518
Nsa(dp51519
S'description'
p51520
S'Translation factors for x,y,z coordinates of the simulation\n'
p51521
sS'cpp_type'
p51522
S'std::__1::vector<double, std::__1::allocator<double> >'
p51523
sS'default'
p51524
S'0 0 0'
p51525
sS'name'
p51526
S'translation'
p51527
sS'required'
p51528
I00
sS'group_name'
p51529
Nsa(dp51530
S'description'
p51531
g3
sS'cpp_type'
p51532
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51533
sS'default'
p51534
S'SolutionUserObject'
p51535
sS'name'
p51536
S'type'
p51537
sS'required'
p51538
I00
sS'group_name'
p51539
Nsa(dp51540
S'description'
p51541
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51542
sS'cpp_type'
p51543
S'bool'
p51544
sS'default'
p51545
S'0'
p51546
sS'name'
p51547
S'use_displaced_mesh'
p51548
sS'required'
p51549
I00
sS'group_name'
p51550
S'Advanced'
p51551
sasS'name'
p51552
S'/UserObjects/SolutionUserObject'
p51553
sa(dp51554
S'description'
p51555
g3
sS'subblocks'
p51556
NsS'parameters'
p51557
(lp51558
(dp51559
S'description'
p51560
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51561
sS'cpp_type'
p51562
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51563
sS'default'
p51564
g3
sS'name'
p51565
S'control_tags'
p51566
sS'required'
p51567
I00
sS'group_name'
p51568
S'Advanced'
p51569
sa(dp51570
S'description'
p51571
S'Set the enabled status of the MooseObject.\n'
p51572
sS'cpp_type'
p51573
S'bool'
p51574
sS'default'
p51575
S'1'
p51576
sS'name'
p51577
S'enable'
p51578
sS'required'
p51579
I00
sS'group_name'
p51580
S'Advanced'
p51581
sa(dp51582
S'name'
p51583
S'execute_on'
p51584
sS'cpp_type'
p51585
S'MultiMooseEnum'
p51586
sS'default'
p51587
S'TIMESTEP_END'
p51588
sS'description'
p51589
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51590
sS'required'
p51591
I00
sS'options'
p51592
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51593
sS'group_name'
p51594
Nsa(dp51595
S'description'
p51596
S'FParser expression to process Postprocessor values into a boolean value. Termination of the simulation occurs when this returns true.\n'
p51597
sS'cpp_type'
p51598
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51599
sS'default'
p51600
g3
sS'name'
p51601
S'expression'
p51602
sS'required'
p51603
I01
sS'group_name'
p51604
Nsa(dp51605
S'description'
p51606
g3
sS'cpp_type'
p51607
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51608
sS'default'
p51609
S'Terminator'
p51610
sS'name'
p51611
S'type'
p51612
sS'required'
p51613
I00
sS'group_name'
p51614
Nsa(dp51615
S'description'
p51616
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51617
sS'cpp_type'
p51618
S'bool'
p51619
sS'default'
p51620
S'0'
p51621
sS'name'
p51622
S'use_displaced_mesh'
p51623
sS'required'
p51624
I00
sS'group_name'
p51625
S'Advanced'
p51626
sasS'name'
p51627
S'/UserObjects/Terminator'
p51628
sa(dp51629
S'description'
p51630
S'A postprocessor for reporting the extreme value of another postprocessor over time.\n'
p51631
sS'subblocks'
p51632
NsS'parameters'
p51633
(lp51634
(dp51635
S'description'
p51636
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51637
sS'cpp_type'
p51638
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51639
sS'default'
p51640
g3
sS'name'
p51641
S'control_tags'
p51642
sS'required'
p51643
I00
sS'group_name'
p51644
S'Advanced'
p51645
sa(dp51646
S'description'
p51647
S'Set the enabled status of the MooseObject.\n'
p51648
sS'cpp_type'
p51649
S'bool'
p51650
sS'default'
p51651
S'1'
p51652
sS'name'
p51653
S'enable'
p51654
sS'required'
p51655
I00
sS'group_name'
p51656
S'Advanced'
p51657
sa(dp51658
S'name'
p51659
S'execute_on'
p51660
sS'cpp_type'
p51661
S'MultiMooseEnum'
p51662
sS'default'
p51663
S'TIMESTEP_END'
p51664
sS'description'
p51665
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51666
sS'required'
p51667
I00
sS'options'
p51668
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51669
sS'group_name'
p51670
Nsa(dp51671
S'description'
p51672
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p51673
sS'cpp_type'
p51674
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p51675
sS'default'
p51676
g3
sS'name'
p51677
S'outputs'
p51678
sS'required'
p51679
I00
sS'group_name'
p51680
S'Advanced'
p51681
sa(dp51682
S'description'
p51683
S'The name of the postprocessor used for reporting time extreme values\n'
p51684
sS'cpp_type'
p51685
S'PostprocessorName'
p51686
sS'default'
p51687
g3
sS'name'
p51688
S'postprocessor'
p51689
sS'required'
p51690
I01
sS'group_name'
p51691
Nsa(dp51692
S'description'
p51693
g3
sS'cpp_type'
p51694
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51695
sS'default'
p51696
S'TimeExtremeValue'
p51697
sS'name'
p51698
S'type'
p51699
sS'required'
p51700
I00
sS'group_name'
p51701
Nsa(dp51702
S'description'
p51703
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51704
sS'cpp_type'
p51705
S'bool'
p51706
sS'default'
p51707
S'0'
p51708
sS'name'
p51709
S'use_displaced_mesh'
p51710
sS'required'
p51711
I00
sS'group_name'
p51712
S'Advanced'
p51713
sa(dp51714
S'name'
p51715
S'value_type'
p51716
sS'cpp_type'
p51717
S'MooseEnum'
p51718
sS'default'
p51719
S'max'
p51720
sS'description'
p51721
S"Type of extreme value to return.'max' returns the maximum value.'min' returns the minimum value.'abs_max' returns the maximum absolute value.'abs_min' returns the minimum absolute value.\n"
p51722
sS'required'
p51723
I00
sS'options'
p51724
S'max min abs_max abs_min'
p51725
sS'group_name'
p51726
NsasS'name'
p51727
S'/UserObjects/TimeExtremeValue'
p51728
sa(dp51729
S'description'
p51730
g3
sS'subblocks'
p51731
NsS'parameters'
p51732
(lp51733
(dp51734
S'description'
p51735
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51736
sS'cpp_type'
p51737
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51738
sS'default'
p51739
g3
sS'name'
p51740
S'control_tags'
p51741
sS'required'
p51742
I00
sS'group_name'
p51743
S'Advanced'
p51744
sa(dp51745
S'description'
p51746
S'Set the enabled status of the MooseObject.\n'
p51747
sS'cpp_type'
p51748
S'bool'
p51749
sS'default'
p51750
S'1'
p51751
sS'name'
p51752
S'enable'
p51753
sS'required'
p51754
I00
sS'group_name'
p51755
S'Advanced'
p51756
sa(dp51757
S'name'
p51758
S'execute_on'
p51759
sS'cpp_type'
p51760
S'MultiMooseEnum'
p51761
sS'default'
p51762
S'TIMESTEP_END'
p51763
sS'description'
p51764
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51765
sS'required'
p51766
I00
sS'options'
p51767
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51768
sS'group_name'
p51769
Nsa(dp51770
S'description'
p51771
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p51772
sS'cpp_type'
p51773
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p51774
sS'default'
p51775
g3
sS'name'
p51776
S'outputs'
p51777
sS'required'
p51778
I00
sS'group_name'
p51779
S'Advanced'
p51780
sa(dp51781
S'description'
p51782
g3
sS'cpp_type'
p51783
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51784
sS'default'
p51785
S'TimestepSize'
p51786
sS'name'
p51787
S'type'
p51788
sS'required'
p51789
I00
sS'group_name'
p51790
Nsa(dp51791
S'description'
p51792
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51793
sS'cpp_type'
p51794
S'bool'
p51795
sS'default'
p51796
S'0'
p51797
sS'name'
p51798
S'use_displaced_mesh'
p51799
sS'required'
p51800
I00
sS'group_name'
p51801
S'Advanced'
p51802
sasS'name'
p51803
S'/UserObjects/TimestepSize'
p51804
sa(dp51805
S'description'
p51806
g3
sS'subblocks'
p51807
NsS'parameters'
p51808
(lp51809
(dp51810
S'description'
p51811
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51812
sS'cpp_type'
p51813
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51814
sS'default'
p51815
g3
sS'name'
p51816
S'control_tags'
p51817
sS'required'
p51818
I00
sS'group_name'
p51819
S'Advanced'
p51820
sa(dp51821
S'description'
p51822
S'Set the enabled status of the MooseObject.\n'
p51823
sS'cpp_type'
p51824
S'bool'
p51825
sS'default'
p51826
S'1'
p51827
sS'name'
p51828
S'enable'
p51829
sS'required'
p51830
I00
sS'group_name'
p51831
S'Advanced'
p51832
sa(dp51833
S'name'
p51834
S'execute_on'
p51835
sS'cpp_type'
p51836
S'MultiMooseEnum'
p51837
sS'default'
p51838
S'TIMESTEP_END'
p51839
sS'description'
p51840
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51841
sS'required'
p51842
I00
sS'options'
p51843
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51844
sS'group_name'
p51845
Nsa(dp51846
S'description'
p51847
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p51848
sS'cpp_type'
p51849
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p51850
sS'default'
p51851
g3
sS'name'
p51852
S'outputs'
p51853
sS'required'
p51854
I00
sS'group_name'
p51855
S'Advanced'
p51856
sa(dp51857
S'description'
p51858
g3
sS'cpp_type'
p51859
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51860
sS'default'
p51861
S'TotalVariableValue'
p51862
sS'name'
p51863
S'type'
p51864
sS'required'
p51865
I00
sS'group_name'
p51866
Nsa(dp51867
S'description'
p51868
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51869
sS'cpp_type'
p51870
S'bool'
p51871
sS'default'
p51872
S'0'
p51873
sS'name'
p51874
S'use_displaced_mesh'
p51875
sS'required'
p51876
I00
sS'group_name'
p51877
S'Advanced'
p51878
sa(dp51879
S'description'
p51880
S'The name of the postprocessor\n'
p51881
sS'cpp_type'
p51882
S'PostprocessorName'
p51883
sS'default'
p51884
g3
sS'name'
p51885
S'value'
p51886
sS'required'
p51887
I00
sS'group_name'
p51888
NsasS'name'
p51889
S'/UserObjects/TotalVariableValue'
p51890
sa(dp51891
S'description'
p51892
g3
sS'subblocks'
p51893
NsS'parameters'
p51894
(lp51895
(dp51896
S'description'
p51897
S'The list of block ids (SubdomainID) that this object will be applied\n'
p51898
sS'cpp_type'
p51899
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p51900
sS'default'
p51901
g3
sS'name'
p51902
S'block'
p51903
sS'required'
p51904
I00
sS'group_name'
p51905
Nsa(dp51906
S'description'
p51907
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p51908
sS'cpp_type'
p51909
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p51910
sS'default'
p51911
g3
sS'name'
p51912
S'control_tags'
p51913
sS'required'
p51914
I00
sS'group_name'
p51915
S'Advanced'
p51916
sa(dp51917
S'description'
p51918
S'Set the enabled status of the MooseObject.\n'
p51919
sS'cpp_type'
p51920
S'bool'
p51921
sS'default'
p51922
S'1'
p51923
sS'name'
p51924
S'enable'
p51925
sS'required'
p51926
I00
sS'group_name'
p51927
S'Advanced'
p51928
sa(dp51929
S'name'
p51930
S'execute_on'
p51931
sS'cpp_type'
p51932
S'MultiMooseEnum'
p51933
sS'default'
p51934
S'TIMESTEP_END'
p51935
sS'description'
p51936
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p51937
sS'required'
p51938
I00
sS'options'
p51939
S'none initial linear nonlinear timestep_end timestep_begin custom'
p51940
sS'group_name'
p51941
Nsa(dp51942
S'description'
p51943
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p51944
sS'cpp_type'
p51945
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p51946
sS'default'
p51947
g3
sS'name'
p51948
S'outputs'
p51949
sS'required'
p51950
I00
sS'group_name'
p51951
S'Advanced'
p51952
sa(dp51953
S'description'
p51954
S'The name of the second variable in the inner product (variable, second_variable)\n'
p51955
sS'cpp_type'
p51956
S'std::vector<VariableName>'
p51957
sS'default'
p51958
g3
sS'name'
p51959
S'second_variable'
p51960
sS'required'
p51961
I01
sS'group_name'
p51962
Nsa(dp51963
S'description'
p51964
S'The seed for the master random number generator\n'
p51965
sS'cpp_type'
p51966
S'unsigned int'
p51967
sS'default'
p51968
S'0'
p51969
sS'name'
p51970
S'seed'
p51971
sS'required'
p51972
I00
sS'group_name'
p51973
S'Advanced'
p51974
sa(dp51975
S'description'
p51976
g3
sS'cpp_type'
p51977
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p51978
sS'default'
p51979
S'VariableInnerProduct'
p51980
sS'name'
p51981
S'type'
p51982
sS'required'
p51983
I00
sS'group_name'
p51984
Nsa(dp51985
S'description'
p51986
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p51987
sS'cpp_type'
p51988
S'bool'
p51989
sS'default'
p51990
S'0'
p51991
sS'name'
p51992
S'use_displaced_mesh'
p51993
sS'required'
p51994
I00
sS'group_name'
p51995
S'Advanced'
p51996
sa(dp51997
S'description'
p51998
S'The name of the variable that this object operates on\n'
p51999
sS'cpp_type'
p52000
S'std::vector<VariableName>'
p52001
sS'default'
p52002
g3
sS'name'
p52003
S'variable'
p52004
sS'required'
p52005
I01
sS'group_name'
p52006
NsasS'name'
p52007
S'/UserObjects/VariableInnerProduct'
p52008
sa(dp52009
S'description'
p52010
g3
sS'subblocks'
p52011
NsS'parameters'
p52012
(lp52013
(dp52014
S'description'
p52015
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52016
sS'cpp_type'
p52017
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p52018
sS'default'
p52019
g3
sS'name'
p52020
S'block'
p52021
sS'required'
p52022
I00
sS'group_name'
p52023
Nsa(dp52024
S'description'
p52025
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52026
sS'cpp_type'
p52027
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52028
sS'default'
p52029
g3
sS'name'
p52030
S'control_tags'
p52031
sS'required'
p52032
I00
sS'group_name'
p52033
S'Advanced'
p52034
sa(dp52035
S'description'
p52036
S'Set the enabled status of the MooseObject.\n'
p52037
sS'cpp_type'
p52038
S'bool'
p52039
sS'default'
p52040
S'1'
p52041
sS'name'
p52042
S'enable'
p52043
sS'required'
p52044
I00
sS'group_name'
p52045
S'Advanced'
p52046
sa(dp52047
S'name'
p52048
S'execute_on'
p52049
sS'cpp_type'
p52050
S'MultiMooseEnum'
p52051
sS'default'
p52052
S'TIMESTEP_END'
p52053
sS'description'
p52054
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p52055
sS'required'
p52056
I00
sS'options'
p52057
S'none initial linear nonlinear timestep_end timestep_begin custom'
p52058
sS'group_name'
p52059
Nsa(dp52060
S'description'
p52061
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p52062
sS'cpp_type'
p52063
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p52064
sS'default'
p52065
g3
sS'name'
p52066
S'outputs'
p52067
sS'required'
p52068
I00
sS'group_name'
p52069
S'Advanced'
p52070
sa(dp52071
S'description'
p52072
S'The seed for the master random number generator\n'
p52073
sS'cpp_type'
p52074
S'unsigned int'
p52075
sS'default'
p52076
S'0'
p52077
sS'name'
p52078
S'seed'
p52079
sS'required'
p52080
I00
sS'group_name'
p52081
S'Advanced'
p52082
sa(dp52083
S'description'
p52084
g3
sS'cpp_type'
p52085
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52086
sS'default'
p52087
S'VolumePostprocessor'
p52088
sS'name'
p52089
S'type'
p52090
sS'required'
p52091
I00
sS'group_name'
p52092
Nsa(dp52093
S'description'
p52094
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52095
sS'cpp_type'
p52096
S'bool'
p52097
sS'default'
p52098
S'0'
p52099
sS'name'
p52100
S'use_displaced_mesh'
p52101
sS'required'
p52102
I00
sS'group_name'
p52103
S'Advanced'
p52104
sasS'name'
p52105
S'/UserObjects/VolumePostprocessor'
p52106
sasS'parameters'
p52107
NsS'name'
p52108
S'/UserObjects'
p52109
sa(dp52110
S'description'
p52111
g3
sS'subblocks'
p52112
(lp52113
(dp52114
S'description'
p52115
g3
sS'subblocks'
p52116
(lp52117
(dp52118
S'description'
p52119
g3
sS'subblocks'
p52120
(lp52121
(dp52122
S'description'
p52123
g3
sS'subblocks'
p52124
(lp52125
(dp52126
S'description'
p52127
g3
sS'subblocks'
p52128
NsS'parameters'
p52129
(lp52130
(dp52131
S'description'
p52132
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52133
sS'cpp_type'
p52134
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p52135
sS'default'
p52136
g3
sS'name'
p52137
S'block'
p52138
sS'required'
p52139
I00
sS'group_name'
p52140
Nsa(dp52141
S'description'
p52142
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p52143
sS'cpp_type'
p52144
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p52145
sS'default'
p52146
g3
sS'name'
p52147
S'boundary'
p52148
sS'required'
p52149
I00
sS'group_name'
p52150
Nsa(dp52151
S'description'
p52152
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52153
sS'cpp_type'
p52154
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52155
sS'default'
p52156
g3
sS'name'
p52157
S'control_tags'
p52158
sS'required'
p52159
I00
sS'group_name'
p52160
S'Advanced'
p52161
sa(dp52162
S'description'
p52163
S'Set the enabled status of the MooseObject.\n'
p52164
sS'cpp_type'
p52165
S'bool'
p52166
sS'default'
p52167
S'1'
p52168
sS'name'
p52169
S'enable'
p52170
sS'required'
p52171
I00
sS'group_name'
p52172
S'Advanced'
p52173
sa(dp52174
S'description'
p52175
S'The value of the variable inside the box\n'
p52176
sS'cpp_type'
p52177
S'double'
p52178
sS'default'
p52179
S'0'
p52180
sS'name'
p52181
S'inside'
p52182
sS'required'
p52183
I00
sS'group_name'
p52184
Nsa(dp52185
S'description'
p52186
S'The value of the variable outside the box\n'
p52187
sS'cpp_type'
p52188
S'double'
p52189
sS'default'
p52190
S'0'
p52191
sS'name'
p52192
S'outside'
p52193
sS'required'
p52194
I00
sS'group_name'
p52195
Nsa(dp52196
S'description'
p52197
g3
sS'cpp_type'
p52198
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52199
sS'default'
p52200
S'BoundingBoxIC'
p52201
sS'name'
p52202
S'type'
p52203
sS'required'
p52204
I00
sS'group_name'
p52205
Nsa(dp52206
S'description'
p52207
S'The variable this initial condition is supposed to provide values for.\n'
p52208
sS'cpp_type'
p52209
S'VariableName'
p52210
sS'default'
p52211
g3
sS'name'
p52212
S'variable'
p52213
sS'required'
p52214
I01
sS'group_name'
p52215
Nsa(dp52216
S'description'
p52217
S'The x coordinate of the lower left-hand corner of the box\n'
p52218
sS'cpp_type'
p52219
S'double'
p52220
sS'default'
p52221
g3
sS'name'
p52222
S'x1'
p52223
sS'required'
p52224
I01
sS'group_name'
p52225
Nsa(dp52226
S'description'
p52227
S'The x coordinate of the upper right-hand corner of the box\n'
p52228
sS'cpp_type'
p52229
S'double'
p52230
sS'default'
p52231
g3
sS'name'
p52232
S'x2'
p52233
sS'required'
p52234
I01
sS'group_name'
p52235
Nsa(dp52236
S'description'
p52237
S'The y coordinate of the lower left-hand corner of the box\n'
p52238
sS'cpp_type'
p52239
S'double'
p52240
sS'default'
p52241
g3
sS'name'
p52242
S'y1'
p52243
sS'required'
p52244
I01
sS'group_name'
p52245
Nsa(dp52246
S'description'
p52247
S'The y coordinate of the upper right-hand corner of the box\n'
p52248
sS'cpp_type'
p52249
S'double'
p52250
sS'default'
p52251
g3
sS'name'
p52252
S'y2'
p52253
sS'required'
p52254
I01
sS'group_name'
p52255
Nsa(dp52256
S'description'
p52257
S'The z coordinate of the lower left-hand corner of the box\n'
p52258
sS'cpp_type'
p52259
S'double'
p52260
sS'default'
p52261
S'0'
p52262
sS'name'
p52263
S'z1'
p52264
sS'required'
p52265
I00
sS'group_name'
p52266
Nsa(dp52267
S'description'
p52268
S'The z coordinate of the upper right-hand corner of the box\n'
p52269
sS'cpp_type'
p52270
S'double'
p52271
sS'default'
p52272
S'0'
p52273
sS'name'
p52274
S'z2'
p52275
sS'required'
p52276
I00
sS'group_name'
p52277
NsasS'name'
p52278
S'/Variables/*/InitialCondition/<type>/BoundingBoxIC'
p52279
sa(dp52280
S'description'
p52281
g3
sS'subblocks'
p52282
NsS'parameters'
p52283
(lp52284
(dp52285
S'description'
p52286
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52287
sS'cpp_type'
p52288
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p52289
sS'default'
p52290
g3
sS'name'
p52291
S'block'
p52292
sS'required'
p52293
I00
sS'group_name'
p52294
Nsa(dp52295
S'description'
p52296
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p52297
sS'cpp_type'
p52298
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p52299
sS'default'
p52300
g3
sS'name'
p52301
S'boundary'
p52302
sS'required'
p52303
I00
sS'group_name'
p52304
Nsa(dp52305
S'description'
p52306
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52307
sS'cpp_type'
p52308
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52309
sS'default'
p52310
g3
sS'name'
p52311
S'control_tags'
p52312
sS'required'
p52313
I00
sS'group_name'
p52314
S'Advanced'
p52315
sa(dp52316
S'description'
p52317
S'Set the enabled status of the MooseObject.\n'
p52318
sS'cpp_type'
p52319
S'bool'
p52320
sS'default'
p52321
S'1'
p52322
sS'name'
p52323
S'enable'
p52324
sS'required'
p52325
I00
sS'group_name'
p52326
S'Advanced'
p52327
sa(dp52328
S'description'
p52329
g3
sS'cpp_type'
p52330
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52331
sS'default'
p52332
S'ConstantIC'
p52333
sS'name'
p52334
S'type'
p52335
sS'required'
p52336
I00
sS'group_name'
p52337
Nsa(dp52338
S'description'
p52339
S'The value to be set in IC\n'
p52340
sS'cpp_type'
p52341
S'double'
p52342
sS'default'
p52343
g3
sS'name'
p52344
S'value'
p52345
sS'required'
p52346
I01
sS'group_name'
p52347
Nsa(dp52348
S'description'
p52349
S'The variable this initial condition is supposed to provide values for.\n'
p52350
sS'cpp_type'
p52351
S'VariableName'
p52352
sS'default'
p52353
g3
sS'name'
p52354
S'variable'
p52355
sS'required'
p52356
I01
sS'group_name'
p52357
NsasS'name'
p52358
S'/Variables/*/InitialCondition/<type>/ConstantIC'
p52359
sa(dp52360
S'description'
p52361
g3
sS'subblocks'
p52362
NsS'parameters'
p52363
(lp52364
(dp52365
S'description'
p52366
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52367
sS'cpp_type'
p52368
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p52369
sS'default'
p52370
g3
sS'name'
p52371
S'block'
p52372
sS'required'
p52373
I00
sS'group_name'
p52374
Nsa(dp52375
S'description'
p52376
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p52377
sS'cpp_type'
p52378
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p52379
sS'default'
p52380
g3
sS'name'
p52381
S'boundary'
p52382
sS'required'
p52383
I00
sS'group_name'
p52384
Nsa(dp52385
S'description'
p52386
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52387
sS'cpp_type'
p52388
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52389
sS'default'
p52390
g3
sS'name'
p52391
S'control_tags'
p52392
sS'required'
p52393
I00
sS'group_name'
p52394
S'Advanced'
p52395
sa(dp52396
S'description'
p52397
S'Set the enabled status of the MooseObject.\n'
p52398
sS'cpp_type'
p52399
S'bool'
p52400
sS'default'
p52401
S'1'
p52402
sS'name'
p52403
S'enable'
p52404
sS'required'
p52405
I00
sS'group_name'
p52406
S'Advanced'
p52407
sa(dp52408
S'description'
p52409
S'The initial condition function.\n'
p52410
sS'cpp_type'
p52411
S'FunctionName'
p52412
sS'default'
p52413
g3
sS'name'
p52414
S'function'
p52415
sS'required'
p52416
I01
sS'group_name'
p52417
Nsa(dp52418
S'description'
p52419
g3
sS'cpp_type'
p52420
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52421
sS'default'
p52422
S'FunctionIC'
p52423
sS'name'
p52424
S'type'
p52425
sS'required'
p52426
I00
sS'group_name'
p52427
Nsa(dp52428
S'description'
p52429
S'The variable this initial condition is supposed to provide values for.\n'
p52430
sS'cpp_type'
p52431
S'VariableName'
p52432
sS'default'
p52433
g3
sS'name'
p52434
S'variable'
p52435
sS'required'
p52436
I01
sS'group_name'
p52437
NsasS'name'
p52438
S'/Variables/*/InitialCondition/<type>/FunctionIC'
p52439
sa(dp52440
S'description'
p52441
g3
sS'subblocks'
p52442
NsS'parameters'
p52443
(lp52444
(dp52445
S'description'
p52446
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52447
sS'cpp_type'
p52448
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52449
sS'default'
p52450
g3
sS'name'
p52451
S'control_tags'
p52452
sS'required'
p52453
I00
sS'group_name'
p52454
S'Advanced'
p52455
sa(dp52456
S'description'
p52457
S'Set the enabled status of the MooseObject.\n'
p52458
sS'cpp_type'
p52459
S'bool'
p52460
sS'default'
p52461
S'1'
p52462
sS'name'
p52463
S'enable'
p52464
sS'required'
p52465
I00
sS'group_name'
p52466
S'Advanced'
p52467
sa(dp52468
S'description'
p52469
S'The initial condition function.\n'
p52470
sS'cpp_type'
p52471
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p52472
sS'default'
p52473
g3
sS'name'
p52474
S'function'
p52475
sS'required'
p52476
I01
sS'group_name'
p52477
Nsa(dp52478
S'description'
p52479
g3
sS'cpp_type'
p52480
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52481
sS'default'
p52482
S'FunctionScalarIC'
p52483
sS'name'
p52484
S'type'
p52485
sS'required'
p52486
I00
sS'group_name'
p52487
Nsa(dp52488
S'description'
p52489
S'The variable this initial condition is supposed to provide values for.\n'
p52490
sS'cpp_type'
p52491
S'VariableName'
p52492
sS'default'
p52493
g3
sS'name'
p52494
S'variable'
p52495
sS'required'
p52496
I00
sS'group_name'
p52497
NsasS'name'
p52498
S'/Variables/*/InitialCondition/<type>/FunctionScalarIC'
p52499
sa(dp52500
S'description'
p52501
g3
sS'subblocks'
p52502
NsS'parameters'
p52503
(lp52504
(dp52505
S'description'
p52506
S'The list of block ids (SubdomainID) that this object will be applied\n'
p52507
sS'cpp_type'
p52508
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p52509
sS'default'
p52510
g3
sS'name'
p52511
S'block'
p52512
sS'required'
p52513
I00
sS'group_name'
p52514
Nsa(dp52515
S'description'
p52516
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p52517
sS'cpp_type'
p52518
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p52519
sS'default'
p52520
g3
sS'name'
p52521
S'boundary'
p52522
sS'required'
p52523
I00
sS'group_name'
p52524
Nsa(dp52525
S'description'
p52526
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52527
sS'cpp_type'
p52528
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52529
sS'default'
p52530
g3
sS'name'
p52531
S'control_tags'
p52532
sS'required'
p52533
I00
sS'group_name'
p52534
S'Advanced'
p52535
sa(dp52536
S'description'
p52537
S'Set the enabled status of the MooseObject.\n'
p52538
sS'cpp_type'
p52539
S'bool'
p52540
sS'default'
p52541
S'1'
p52542
sS'name'
p52543
S'enable'
p52544
sS'required'
p52545
I00
sS'group_name'
p52546
S'Advanced'
p52547
sa(dp52548
S'description'
p52549
S'Upper bound of the randomly generated values\n'
p52550
sS'cpp_type'
p52551
S'double'
p52552
sS'default'
p52553
S'1'
p52554
sS'name'
p52555
S'max'
p52556
sS'required'
p52557
I00
sS'group_name'
p52558
Nsa(dp52559
S'description'
p52560
S'Lower bound of the randomly generated values\n'
p52561
sS'cpp_type'
p52562
S'double'
p52563
sS'default'
p52564
S'0'
p52565
sS'name'
p52566
S'min'
p52567
sS'required'
p52568
I00
sS'group_name'
p52569
Nsa(dp52570
S'description'
p52571
S'Seed value for the random number generator\n'
p52572
sS'cpp_type'
p52573
S'unsigned int'
p52574
sS'default'
p52575
S'0'
p52576
sS'name'
p52577
S'seed'
p52578
sS'required'
p52579
I00
sS'group_name'
p52580
Nsa(dp52581
S'description'
p52582
g3
sS'cpp_type'
p52583
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52584
sS'default'
p52585
S'RandomIC'
p52586
sS'name'
p52587
S'type'
p52588
sS'required'
p52589
I00
sS'group_name'
p52590
Nsa(dp52591
S'description'
p52592
S'The variable this initial condition is supposed to provide values for.\n'
p52593
sS'cpp_type'
p52594
S'VariableName'
p52595
sS'default'
p52596
g3
sS'name'
p52597
S'variable'
p52598
sS'required'
p52599
I01
sS'group_name'
p52600
NsasS'name'
p52601
S'/Variables/*/InitialCondition/<type>/RandomIC'
p52602
sa(dp52603
S'description'
p52604
g3
sS'subblocks'
p52605
NsS'parameters'
p52606
(lp52607
(dp52608
S'description'
p52609
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52610
sS'cpp_type'
p52611
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52612
sS'default'
p52613
g3
sS'name'
p52614
S'control_tags'
p52615
sS'required'
p52616
I00
sS'group_name'
p52617
S'Advanced'
p52618
sa(dp52619
S'description'
p52620
S'Set the enabled status of the MooseObject.\n'
p52621
sS'cpp_type'
p52622
S'bool'
p52623
sS'default'
p52624
S'1'
p52625
sS'name'
p52626
S'enable'
p52627
sS'required'
p52628
I00
sS'group_name'
p52629
S'Advanced'
p52630
sa(dp52631
S'description'
p52632
g3
sS'cpp_type'
p52633
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52634
sS'default'
p52635
S'ScalarComponentIC'
p52636
sS'name'
p52637
S'type'
p52638
sS'required'
p52639
I00
sS'group_name'
p52640
Nsa(dp52641
S'description'
p52642
S'Initial values to initialize the scalar variable.\n'
p52643
sS'cpp_type'
p52644
S'std::__1::vector<double, std::__1::allocator<double> >'
p52645
sS'default'
p52646
g3
sS'name'
p52647
S'values'
p52648
sS'required'
p52649
I01
sS'group_name'
p52650
Nsa(dp52651
S'description'
p52652
S'The variable this initial condition is supposed to provide values for.\n'
p52653
sS'cpp_type'
p52654
S'VariableName'
p52655
sS'default'
p52656
g3
sS'name'
p52657
S'variable'
p52658
sS'required'
p52659
I00
sS'group_name'
p52660
NsasS'name'
p52661
S'/Variables/*/InitialCondition/<type>/ScalarComponentIC'
p52662
sa(dp52663
S'description'
p52664
g3
sS'subblocks'
p52665
NsS'parameters'
p52666
(lp52667
(dp52668
S'description'
p52669
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52670
sS'cpp_type'
p52671
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52672
sS'default'
p52673
g3
sS'name'
p52674
S'control_tags'
p52675
sS'required'
p52676
I00
sS'group_name'
p52677
S'Advanced'
p52678
sa(dp52679
S'description'
p52680
S'Set the enabled status of the MooseObject.\n'
p52681
sS'cpp_type'
p52682
S'bool'
p52683
sS'default'
p52684
S'1'
p52685
sS'name'
p52686
S'enable'
p52687
sS'required'
p52688
I00
sS'group_name'
p52689
S'Advanced'
p52690
sa(dp52691
S'description'
p52692
g3
sS'cpp_type'
p52693
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52694
sS'default'
p52695
S'ScalarConstantIC'
p52696
sS'name'
p52697
S'type'
p52698
sS'required'
p52699
I00
sS'group_name'
p52700
Nsa(dp52701
S'description'
p52702
g3
sS'cpp_type'
p52703
S'double'
p52704
sS'default'
p52705
S'0'
p52706
sS'name'
p52707
S'value'
p52708
sS'required'
p52709
I00
sS'group_name'
p52710
Nsa(dp52711
S'description'
p52712
S'The variable this initial condition is supposed to provide values for.\n'
p52713
sS'cpp_type'
p52714
S'VariableName'
p52715
sS'default'
p52716
g3
sS'name'
p52717
S'variable'
p52718
sS'required'
p52719
I00
sS'group_name'
p52720
NsasS'name'
p52721
S'/Variables/*/InitialCondition/<type>/ScalarConstantIC'
p52722
sasS'parameters'
p52723
NsS'name'
p52724
S'/Variables/*/InitialCondition/<type>'
p52725
sasS'parameters'
p52726
(lp52727
(dp52728
S'description'
p52729
S'A string representing the Moose Object that will be built by this Action\n'
p52730
sS'cpp_type'
p52731
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52732
sS'default'
p52733
g3
sS'name'
p52734
S'type'
p52735
sS'required'
p52736
I01
sS'group_name'
p52737
NsasS'name'
p52738
S'/Variables/*/InitialCondition'
p52739
sasS'parameters'
p52740
(lp52741
(dp52742
S'description'
p52743
S'The block id where this variable lives\n'
p52744
sS'cpp_type'
p52745
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p52746
sS'default'
p52747
g3
sS'name'
p52748
S'block'
p52749
sS'required'
p52750
I00
sS'group_name'
p52751
Nsa(dp52752
S'description'
p52753
S'True to make this variable an eigen variable\n'
p52754
sS'cpp_type'
p52755
S'bool'
p52756
sS'default'
p52757
S'0'
p52758
sS'name'
p52759
S'eigen'
p52760
sS'required'
p52761
I00
sS'group_name'
p52762
S'Advanced'
p52763
sa(dp52764
S'name'
p52765
S'family'
p52766
sS'cpp_type'
p52767
S'MooseEnum'
p52768
sS'default'
p52769
S'LAGRANGE'
p52770
sS'description'
p52771
S'Specifies the family of FE shape functions to use for this variable\n'
p52772
sS'required'
p52773
I00
sS'options'
p52774
S'LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC'
p52775
sS'group_name'
p52776
Nsa(dp52777
S'description'
p52778
S'Specifies the initial condition for this variable\n'
p52779
sS'cpp_type'
p52780
S'double'
p52781
sS'default'
p52782
g3
sS'name'
p52783
S'initial_condition'
p52784
sS'required'
p52785
I00
sS'group_name'
p52786
Nsa(dp52787
S'name'
p52788
S'order'
p52789
sS'cpp_type'
p52790
S'MooseEnum'
p52791
sS'default'
p52792
S'FIRST'
p52793
sS'description'
p52794
S'Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n'
p52795
sS'required'
p52796
I00
sS'options'
p52797
S'CONSTANT FIRST SECOND THIRD FOURTH'
p52798
sS'group_name'
p52799
Nsa(dp52800
S'description'
p52801
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p52802
sS'cpp_type'
p52803
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p52804
sS'default'
p52805
g3
sS'name'
p52806
S'outputs'
p52807
sS'required'
p52808
I00
sS'group_name'
p52809
S'Advanced'
p52810
sa(dp52811
S'description'
p52812
S'Specifies a scaling factor to apply to this variable\n'
p52813
sS'cpp_type'
p52814
S'double'
p52815
sS'default'
p52816
S'1'
p52817
sS'name'
p52818
S'scaling'
p52819
sS'required'
p52820
I00
sS'group_name'
p52821
S'Advanced'
p52822
sa(dp52823
S'description'
p52824
S'Gives the timestep (or "LATEST") for which to read a solution from a file for a given variable. (Default: LATEST)\n'
p52825
sS'cpp_type'
p52826
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52827
sS'default'
p52828
S'LATEST'
p52829
sS'name'
p52830
S'initial_from_file_timestep'
p52831
sS'required'
p52832
I00
sS'group_name'
p52833
S'Initial From File'
p52834
sa(dp52835
S'description'
p52836
S'Gives the name of a variable for which to read an initial condition from a mesh file\n'
p52837
sS'cpp_type'
p52838
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52839
sS'default'
p52840
g3
sS'name'
p52841
S'initial_from_file_var'
p52842
sS'required'
p52843
I00
sS'group_name'
p52844
S'Initial From File'
p52845
sasS'name'
p52846
S'/Variables/*'
p52847
sasS'parameters'
p52848
NsS'name'
p52849
S'/Variables'
p52850
sa(dp52851
S'description'
p52852
g3
sS'subblocks'
p52853
(lp52854
(dp52855
S'description'
p52856
g3
sS'subblocks'
p52857
NsS'parameters'
p52858
(lp52859
(dp52860
S'description'
p52861
S'A string representing the Moose Object that will be built by this Action\n'
p52862
sS'cpp_type'
p52863
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52864
sS'default'
p52865
g3
sS'name'
p52866
S'type'
p52867
sS'required'
p52868
I01
sS'group_name'
p52869
NsasS'name'
p52870
S'/VectorPostprocessors/*'
p52871
sa(dp52872
S'description'
p52873
g3
sS'subblocks'
p52874
NsS'parameters'
p52875
(lp52876
(dp52877
S'description'
p52878
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52879
sS'cpp_type'
p52880
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52881
sS'default'
p52882
g3
sS'name'
p52883
S'control_tags'
p52884
sS'required'
p52885
I00
sS'group_name'
p52886
S'Advanced'
p52887
sa(dp52888
S'description'
p52889
S'Set the enabled status of the MooseObject.\n'
p52890
sS'cpp_type'
p52891
S'bool'
p52892
sS'default'
p52893
S'1'
p52894
sS'name'
p52895
S'enable'
p52896
sS'required'
p52897
I00
sS'group_name'
p52898
S'Advanced'
p52899
sa(dp52900
S'name'
p52901
S'execute_on'
p52902
sS'cpp_type'
p52903
S'MultiMooseEnum'
p52904
sS'default'
p52905
S'TIMESTEP_END'
p52906
sS'description'
p52907
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p52908
sS'required'
p52909
I00
sS'options'
p52910
S'none initial linear nonlinear timestep_end timestep_begin custom'
p52911
sS'group_name'
p52912
Nsa(dp52913
S'description'
p52914
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p52915
sS'cpp_type'
p52916
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p52917
sS'default'
p52918
g3
sS'name'
p52919
S'outputs'
p52920
sS'required'
p52921
I00
sS'group_name'
p52922
S'Advanced'
p52923
sa(dp52924
S'description'
p52925
g3
sS'cpp_type'
p52926
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p52927
sS'default'
p52928
S'ConstantVectorPostprocessor'
p52929
sS'name'
p52930
S'type'
p52931
sS'required'
p52932
I00
sS'group_name'
p52933
Nsa(dp52934
S'description'
p52935
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p52936
sS'cpp_type'
p52937
S'bool'
p52938
sS'default'
p52939
S'0'
p52940
sS'name'
p52941
S'use_displaced_mesh'
p52942
sS'required'
p52943
I00
sS'group_name'
p52944
S'Advanced'
p52945
sa(dp52946
S'description'
p52947
S'The vector value this object will have.\n'
p52948
sS'cpp_type'
p52949
S'std::__1::vector<double, std::__1::allocator<double> >'
p52950
sS'default'
p52951
g3
sS'name'
p52952
S'value'
p52953
sS'required'
p52954
I01
sS'group_name'
p52955
NsasS'name'
p52956
S'/VectorPostprocessors/ConstantVectorPostprocessor'
p52957
sa(dp52958
S'description'
p52959
g3
sS'subblocks'
p52960
NsS'parameters'
p52961
(lp52962
(dp52963
S'description'
p52964
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p52965
sS'cpp_type'
p52966
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p52967
sS'default'
p52968
g3
sS'name'
p52969
S'control_tags'
p52970
sS'required'
p52971
I00
sS'group_name'
p52972
S'Advanced'
p52973
sa(dp52974
S'description'
p52975
S'Set the enabled status of the MooseObject.\n'
p52976
sS'cpp_type'
p52977
S'bool'
p52978
sS'default'
p52979
S'1'
p52980
sS'name'
p52981
S'enable'
p52982
sS'required'
p52983
I00
sS'group_name'
p52984
S'Advanced'
p52985
sa(dp52986
S'name'
p52987
S'execute_on'
p52988
sS'cpp_type'
p52989
S'MultiMooseEnum'
p52990
sS'default'
p52991
S'TIMESTEP_END'
p52992
sS'description'
p52993
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p52994
sS'required'
p52995
I00
sS'options'
p52996
S'none initial linear nonlinear timestep_end timestep_begin custom'
p52997
sS'group_name'
p52998
Nsa(dp52999
S'description'
p53000
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53001
sS'cpp_type'
p53002
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53003
sS'default'
p53004
g3
sS'name'
p53005
S'outputs'
p53006
sS'required'
p53007
I00
sS'group_name'
p53008
S'Advanced'
p53009
sa(dp53010
S'description'
p53011
g3
sS'cpp_type'
p53012
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53013
sS'default'
p53014
S'Eigenvalues'
p53015
sS'name'
p53016
S'type'
p53017
sS'required'
p53018
I00
sS'group_name'
p53019
Nsa(dp53020
S'description'
p53021
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53022
sS'cpp_type'
p53023
S'bool'
p53024
sS'default'
p53025
S'0'
p53026
sS'name'
p53027
S'use_displaced_mesh'
p53028
sS'required'
p53029
I00
sS'group_name'
p53030
S'Advanced'
p53031
sasS'name'
p53032
S'/VectorPostprocessors/Eigenvalues'
p53033
sa(dp53034
S'description'
p53035
g3
sS'subblocks'
p53036
NsS'parameters'
p53037
(lp53038
(dp53039
S'description'
p53040
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53041
sS'cpp_type'
p53042
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53043
sS'default'
p53044
g3
sS'name'
p53045
S'control_tags'
p53046
sS'required'
p53047
I00
sS'group_name'
p53048
S'Advanced'
p53049
sa(dp53050
S'description'
p53051
S'Set the enabled status of the MooseObject.\n'
p53052
sS'cpp_type'
p53053
S'bool'
p53054
sS'default'
p53055
S'1'
p53056
sS'name'
p53057
S'enable'
p53058
sS'required'
p53059
I00
sS'group_name'
p53060
S'Advanced'
p53061
sa(dp53062
S'description'
p53063
S'The end of the line\n'
p53064
sS'cpp_type'
p53065
S'libMesh::Point'
p53066
sS'default'
p53067
g3
sS'name'
p53068
S'end'
p53069
sS'required'
p53070
I01
sS'group_name'
p53071
Nsa(dp53072
S'name'
p53073
S'execute_on'
p53074
sS'cpp_type'
p53075
S'MultiMooseEnum'
p53076
sS'default'
p53077
S'TIMESTEP_END'
p53078
sS'description'
p53079
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53080
sS'required'
p53081
I00
sS'options'
p53082
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53083
sS'group_name'
p53084
Nsa(dp53085
S'description'
p53086
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53087
sS'cpp_type'
p53088
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53089
sS'default'
p53090
g3
sS'name'
p53091
S'outputs'
p53092
sS'required'
p53093
I00
sS'group_name'
p53094
S'Advanced'
p53095
sa(dp53096
S'description'
p53097
S'The beginning of the line\n'
p53098
sS'cpp_type'
p53099
S'libMesh::Point'
p53100
sS'default'
p53101
g3
sS'name'
p53102
S'start'
p53103
sS'required'
p53104
I01
sS'group_name'
p53105
Nsa(dp53106
S'description'
p53107
g3
sS'cpp_type'
p53108
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53109
sS'default'
p53110
S'ElementsAlongLine'
p53111
sS'name'
p53112
S'type'
p53113
sS'required'
p53114
I00
sS'group_name'
p53115
Nsa(dp53116
S'description'
p53117
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53118
sS'cpp_type'
p53119
S'bool'
p53120
sS'default'
p53121
S'0'
p53122
sS'name'
p53123
S'use_displaced_mesh'
p53124
sS'required'
p53125
I00
sS'group_name'
p53126
S'Advanced'
p53127
sasS'name'
p53128
S'/VectorPostprocessors/ElementsAlongLine'
p53129
sa(dp53130
S'description'
p53131
g3
sS'subblocks'
p53132
NsS'parameters'
p53133
(lp53134
(dp53135
S'description'
p53136
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53137
sS'cpp_type'
p53138
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53139
sS'default'
p53140
g3
sS'name'
p53141
S'control_tags'
p53142
sS'required'
p53143
I00
sS'group_name'
p53144
S'Advanced'
p53145
sa(dp53146
S'description'
p53147
S'Set the enabled status of the MooseObject.\n'
p53148
sS'cpp_type'
p53149
S'bool'
p53150
sS'default'
p53151
S'1'
p53152
sS'name'
p53153
S'enable'
p53154
sS'required'
p53155
I00
sS'group_name'
p53156
S'Advanced'
p53157
sa(dp53158
S'name'
p53159
S'execute_on'
p53160
sS'cpp_type'
p53161
S'MultiMooseEnum'
p53162
sS'default'
p53163
S'TIMESTEP_END'
p53164
sS'description'
p53165
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53166
sS'required'
p53167
I00
sS'options'
p53168
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53169
sS'group_name'
p53170
Nsa(dp53171
S'description'
p53172
S'Normal vector to the plane\n'
p53173
sS'cpp_type'
p53174
S'libMesh::Point'
p53175
sS'default'
p53176
g3
sS'name'
p53177
S'normal'
p53178
sS'required'
p53179
I01
sS'group_name'
p53180
Nsa(dp53181
S'description'
p53182
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53183
sS'cpp_type'
p53184
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53185
sS'default'
p53186
g3
sS'name'
p53187
S'outputs'
p53188
sS'required'
p53189
I00
sS'group_name'
p53190
S'Advanced'
p53191
sa(dp53192
S'description'
p53193
S'Point in the plane\n'
p53194
sS'cpp_type'
p53195
S'libMesh::Point'
p53196
sS'default'
p53197
g3
sS'name'
p53198
S'point'
p53199
sS'required'
p53200
I01
sS'group_name'
p53201
Nsa(dp53202
S'description'
p53203
g3
sS'cpp_type'
p53204
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53205
sS'default'
p53206
S'ElementsAlongPlane'
p53207
sS'name'
p53208
S'type'
p53209
sS'required'
p53210
I00
sS'group_name'
p53211
Nsa(dp53212
S'description'
p53213
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53214
sS'cpp_type'
p53215
S'bool'
p53216
sS'default'
p53217
S'0'
p53218
sS'name'
p53219
S'use_displaced_mesh'
p53220
sS'required'
p53221
I00
sS'group_name'
p53222
S'Advanced'
p53223
sasS'name'
p53224
S'/VectorPostprocessors/ElementsAlongPlane'
p53225
sa(dp53226
S'description'
p53227
g3
sS'subblocks'
p53228
NsS'parameters'
p53229
(lp53230
(dp53231
S'description'
p53232
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53233
sS'cpp_type'
p53234
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53235
sS'default'
p53236
g3
sS'name'
p53237
S'control_tags'
p53238
sS'required'
p53239
I00
sS'group_name'
p53240
S'Advanced'
p53241
sa(dp53242
S'description'
p53243
S'Set the enabled status of the MooseObject.\n'
p53244
sS'cpp_type'
p53245
S'bool'
p53246
sS'default'
p53247
S'1'
p53248
sS'name'
p53249
S'enable'
p53250
sS'required'
p53251
I00
sS'group_name'
p53252
S'Advanced'
p53253
sa(dp53254
S'description'
p53255
S'The end of the line\n'
p53256
sS'cpp_type'
p53257
S'libMesh::Point'
p53258
sS'default'
p53259
g3
sS'name'
p53260
S'end'
p53261
sS'required'
p53262
I01
sS'group_name'
p53263
Nsa(dp53264
S'name'
p53265
S'execute_on'
p53266
sS'cpp_type'
p53267
S'MultiMooseEnum'
p53268
sS'default'
p53269
S'TIMESTEP_END'
p53270
sS'description'
p53271
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53272
sS'required'
p53273
I00
sS'options'
p53274
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53275
sS'group_name'
p53276
Nsa(dp53277
S'description'
p53278
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53279
sS'cpp_type'
p53280
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53281
sS'default'
p53282
g3
sS'name'
p53283
S'outputs'
p53284
sS'required'
p53285
I00
sS'group_name'
p53286
S'Advanced'
p53287
sa(dp53288
S'description'
p53289
S'The beginning of the line\n'
p53290
sS'cpp_type'
p53291
S'libMesh::Point'
p53292
sS'default'
p53293
g3
sS'name'
p53294
S'start'
p53295
sS'required'
p53296
I01
sS'group_name'
p53297
Nsa(dp53298
S'description'
p53299
g3
sS'cpp_type'
p53300
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53301
sS'default'
p53302
S'IntersectionPointsAlongLine'
p53303
sS'name'
p53304
S'type'
p53305
sS'required'
p53306
I00
sS'group_name'
p53307
Nsa(dp53308
S'description'
p53309
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53310
sS'cpp_type'
p53311
S'bool'
p53312
sS'default'
p53313
S'0'
p53314
sS'name'
p53315
S'use_displaced_mesh'
p53316
sS'required'
p53317
I00
sS'group_name'
p53318
S'Advanced'
p53319
sasS'name'
p53320
S'/VectorPostprocessors/IntersectionPointsAlongLine'
p53321
sa(dp53322
S'description'
p53323
S'Performs a polynomial least squares fit on the data contained in another VectorPostprocessor\n'
p53324
sS'subblocks'
p53325
NsS'parameters'
p53326
(lp53327
(dp53328
S'description'
p53329
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53330
sS'cpp_type'
p53331
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53332
sS'default'
p53333
g3
sS'name'
p53334
S'control_tags'
p53335
sS'required'
p53336
I00
sS'group_name'
p53337
S'Advanced'
p53338
sa(dp53339
S'description'
p53340
S'Set the enabled status of the MooseObject.\n'
p53341
sS'cpp_type'
p53342
S'bool'
p53343
sS'default'
p53344
S'1'
p53345
sS'name'
p53346
S'enable'
p53347
sS'required'
p53348
I00
sS'group_name'
p53349
S'Advanced'
p53350
sa(dp53351
S'name'
p53352
S'execute_on'
p53353
sS'cpp_type'
p53354
S'MultiMooseEnum'
p53355
sS'default'
p53356
S'TIMESTEP_END'
p53357
sS'description'
p53358
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53359
sS'required'
p53360
I00
sS'options'
p53361
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53362
sS'group_name'
p53363
Nsa(dp53364
S'description'
p53365
S'The number of samples to be output\n'
p53366
sS'cpp_type'
p53367
S'unsigned int'
p53368
sS'default'
p53369
g3
sS'name'
p53370
S'num_samples'
p53371
sS'required'
p53372
I00
sS'group_name'
p53373
Nsa(dp53374
S'description'
p53375
S'The order of the polynomial fit\n'
p53376
sS'cpp_type'
p53377
S'unsigned int'
p53378
sS'default'
p53379
g3
sS'name'
p53380
S'order'
p53381
sS'required'
p53382
I01
sS'group_name'
p53383
Nsa(dp53384
S'name'
p53385
S'output'
p53386
sS'cpp_type'
p53387
S'MooseEnum'
p53388
sS'default'
p53389
S'Coefficients'
p53390
sS'description'
p53391
S'The quantity to output.  Options are: Coefficients Samples\n'
p53392
sS'required'
p53393
I00
sS'options'
p53394
S'Coefficients Samples'
p53395
sS'group_name'
p53396
Nsa(dp53397
S'description'
p53398
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53399
sS'cpp_type'
p53400
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53401
sS'default'
p53402
g3
sS'name'
p53403
S'outputs'
p53404
sS'required'
p53405
I00
sS'group_name'
p53406
S'Advanced'
p53407
sa(dp53408
S'description'
p53409
S'The maximum x value of the of samples to be output\n'
p53410
sS'cpp_type'
p53411
S'double'
p53412
sS'default'
p53413
g3
sS'name'
p53414
S'sample_x_max'
p53415
sS'required'
p53416
I00
sS'group_name'
p53417
Nsa(dp53418
S'description'
p53419
S'The minimum x value of the of samples to be output\n'
p53420
sS'cpp_type'
p53421
S'double'
p53422
sS'default'
p53423
g3
sS'name'
p53424
S'sample_x_min'
p53425
sS'required'
p53426
I00
sS'group_name'
p53427
Nsa(dp53428
S'description'
p53429
g3
sS'cpp_type'
p53430
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53431
sS'default'
p53432
S'LeastSquaresFit'
p53433
sS'name'
p53434
S'type'
p53435
sS'required'
p53436
I00
sS'group_name'
p53437
Nsa(dp53438
S'description'
p53439
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53440
sS'cpp_type'
p53441
S'bool'
p53442
sS'default'
p53443
S'0'
p53444
sS'name'
p53445
S'use_displaced_mesh'
p53446
sS'required'
p53447
I00
sS'group_name'
p53448
S'Advanced'
p53449
sa(dp53450
S'description'
p53451
S'The vectorpostprocessor on whose values we perform a least squares fit\n'
p53452
sS'cpp_type'
p53453
S'VectorPostprocessorName'
p53454
sS'default'
p53455
g3
sS'name'
p53456
S'vectorpostprocessor'
p53457
sS'required'
p53458
I01
sS'group_name'
p53459
Nsa(dp53460
S'description'
p53461
S'The name of the independent variable\n'
p53462
sS'cpp_type'
p53463
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53464
sS'default'
p53465
g3
sS'name'
p53466
S'x_name'
p53467
sS'required'
p53468
I01
sS'group_name'
p53469
Nsa(dp53470
S'description'
p53471
S'Value used to scale x values (scaling is done after shifting)\n'
p53472
sS'cpp_type'
p53473
S'double'
p53474
sS'default'
p53475
S'1'
p53476
sS'name'
p53477
S'x_scale'
p53478
sS'required'
p53479
I00
sS'group_name'
p53480
Nsa(dp53481
S'description'
p53482
S'Value used to shift x values (shifting is done before scaling)\n'
p53483
sS'cpp_type'
p53484
S'double'
p53485
sS'default'
p53486
S'0'
p53487
sS'name'
p53488
S'x_shift'
p53489
sS'required'
p53490
I00
sS'group_name'
p53491
Nsa(dp53492
S'description'
p53493
S'The name of the dependent variable\n'
p53494
sS'cpp_type'
p53495
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53496
sS'default'
p53497
g3
sS'name'
p53498
S'y_name'
p53499
sS'required'
p53500
I01
sS'group_name'
p53501
Nsa(dp53502
S'description'
p53503
S'Value used to scale y values (scaling is done after shifting)\n'
p53504
sS'cpp_type'
p53505
S'double'
p53506
sS'default'
p53507
S'1'
p53508
sS'name'
p53509
S'y_scale'
p53510
sS'required'
p53511
I00
sS'group_name'
p53512
Nsa(dp53513
S'description'
p53514
S'Value used to shift y values (shifting is done before scaling)\n'
p53515
sS'cpp_type'
p53516
S'double'
p53517
sS'default'
p53518
S'0'
p53519
sS'name'
p53520
S'y_shift'
p53521
sS'required'
p53522
I00
sS'group_name'
p53523
NsasS'name'
p53524
S'/VectorPostprocessors/LeastSquaresFit'
p53525
sa(dp53526
S'description'
p53527
g3
sS'subblocks'
p53528
NsS'parameters'
p53529
(lp53530
(dp53531
S'description'
p53532
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53533
sS'cpp_type'
p53534
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53535
sS'default'
p53536
g3
sS'name'
p53537
S'control_tags'
p53538
sS'required'
p53539
I00
sS'group_name'
p53540
S'Advanced'
p53541
sa(dp53542
S'description'
p53543
S'Set the enabled status of the MooseObject.\n'
p53544
sS'cpp_type'
p53545
S'bool'
p53546
sS'default'
p53547
S'1'
p53548
sS'name'
p53549
S'enable'
p53550
sS'required'
p53551
I00
sS'group_name'
p53552
S'Advanced'
p53553
sa(dp53554
S'description'
p53555
S'The ending of the line\n'
p53556
sS'cpp_type'
p53557
S'libMesh::Point'
p53558
sS'default'
p53559
g3
sS'name'
p53560
S'end_point'
p53561
sS'required'
p53562
I01
sS'group_name'
p53563
Nsa(dp53564
S'name'
p53565
S'execute_on'
p53566
sS'cpp_type'
p53567
S'MultiMooseEnum'
p53568
sS'default'
p53569
S'TIMESTEP_END'
p53570
sS'description'
p53571
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53572
sS'required'
p53573
I00
sS'options'
p53574
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53575
sS'group_name'
p53576
Nsa(dp53577
S'description'
p53578
S'The Functions to sample along the line\n'
p53579
sS'cpp_type'
p53580
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p53581
sS'default'
p53582
g3
sS'name'
p53583
S'functions'
p53584
sS'required'
p53585
I01
sS'group_name'
p53586
Nsa(dp53587
S'description'
p53588
S'The number of points to sample along the line\n'
p53589
sS'cpp_type'
p53590
S'unsigned int'
p53591
sS'default'
p53592
g3
sS'name'
p53593
S'num_points'
p53594
sS'required'
p53595
I01
sS'group_name'
p53596
Nsa(dp53597
S'description'
p53598
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53599
sS'cpp_type'
p53600
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53601
sS'default'
p53602
g3
sS'name'
p53603
S'outputs'
p53604
sS'required'
p53605
I00
sS'group_name'
p53606
S'Advanced'
p53607
sa(dp53608
S'name'
p53609
S'sort_by'
p53610
sS'cpp_type'
p53611
S'MooseEnum'
p53612
sS'default'
p53613
g3
sS'description'
p53614
S'What to sort the samples by\n'
p53615
sS'required'
p53616
I01
sS'options'
p53617
S'x y z id'
p53618
sS'group_name'
p53619
Nsa(dp53620
S'description'
p53621
S'The beginning of the line\n'
p53622
sS'cpp_type'
p53623
S'libMesh::Point'
p53624
sS'default'
p53625
g3
sS'name'
p53626
S'start_point'
p53627
sS'required'
p53628
I01
sS'group_name'
p53629
Nsa(dp53630
S'description'
p53631
g3
sS'cpp_type'
p53632
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53633
sS'default'
p53634
S'LineFunctionSampler'
p53635
sS'name'
p53636
S'type'
p53637
sS'required'
p53638
I00
sS'group_name'
p53639
Nsa(dp53640
S'description'
p53641
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53642
sS'cpp_type'
p53643
S'bool'
p53644
sS'default'
p53645
S'0'
p53646
sS'name'
p53647
S'use_displaced_mesh'
p53648
sS'required'
p53649
I00
sS'group_name'
p53650
S'Advanced'
p53651
sasS'name'
p53652
S'/VectorPostprocessors/LineFunctionSampler'
p53653
sa(dp53654
S'description'
p53655
g3
sS'subblocks'
p53656
NsS'parameters'
p53657
(lp53658
(dp53659
S'description'
p53660
S'The list of block ids (SubdomainID) that this object will be applied\n'
p53661
sS'cpp_type'
p53662
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p53663
sS'default'
p53664
g3
sS'name'
p53665
S'block'
p53666
sS'required'
p53667
I00
sS'group_name'
p53668
Nsa(dp53669
S'description'
p53670
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53671
sS'cpp_type'
p53672
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53673
sS'default'
p53674
g3
sS'name'
p53675
S'control_tags'
p53676
sS'required'
p53677
I00
sS'group_name'
p53678
S'Advanced'
p53679
sa(dp53680
S'description'
p53681
S'Set the enabled status of the MooseObject.\n'
p53682
sS'cpp_type'
p53683
S'bool'
p53684
sS'default'
p53685
S'1'
p53686
sS'name'
p53687
S'enable'
p53688
sS'required'
p53689
I00
sS'group_name'
p53690
S'Advanced'
p53691
sa(dp53692
S'description'
p53693
S'The end of the line\n'
p53694
sS'cpp_type'
p53695
S'libMesh::Point'
p53696
sS'default'
p53697
g3
sS'name'
p53698
S'end'
p53699
sS'required'
p53700
I01
sS'group_name'
p53701
Nsa(dp53702
S'name'
p53703
S'execute_on'
p53704
sS'cpp_type'
p53705
S'MultiMooseEnum'
p53706
sS'default'
p53707
S'TIMESTEP_END'
p53708
sS'description'
p53709
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53710
sS'required'
p53711
I00
sS'options'
p53712
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53713
sS'group_name'
p53714
Nsa(dp53715
S'description'
p53716
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53717
sS'cpp_type'
p53718
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53719
sS'default'
p53720
g3
sS'name'
p53721
S'outputs'
p53722
sS'required'
p53723
I00
sS'group_name'
p53724
S'Advanced'
p53725
sa(dp53726
S'description'
p53727
S'Name of the material property to be output along a line\n'
p53728
sS'cpp_type'
p53729
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53730
sS'default'
p53731
g3
sS'name'
p53732
S'property'
p53733
sS'required'
p53734
I01
sS'group_name'
p53735
Nsa(dp53736
S'name'
p53737
S'sort_by'
p53738
sS'cpp_type'
p53739
S'MooseEnum'
p53740
sS'default'
p53741
g3
sS'description'
p53742
S'What to sort the samples by\n'
p53743
sS'required'
p53744
I01
sS'options'
p53745
S'x y z id'
p53746
sS'group_name'
p53747
Nsa(dp53748
S'description'
p53749
S'The beginning of the line\n'
p53750
sS'cpp_type'
p53751
S'libMesh::Point'
p53752
sS'default'
p53753
g3
sS'name'
p53754
S'start'
p53755
sS'required'
p53756
I01
sS'group_name'
p53757
Nsa(dp53758
S'description'
p53759
g3
sS'cpp_type'
p53760
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53761
sS'default'
p53762
S'LineMaterialRealSampler'
p53763
sS'name'
p53764
S'type'
p53765
sS'required'
p53766
I00
sS'group_name'
p53767
Nsa(dp53768
S'description'
p53769
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53770
sS'cpp_type'
p53771
S'bool'
p53772
sS'default'
p53773
S'0'
p53774
sS'name'
p53775
S'use_displaced_mesh'
p53776
sS'required'
p53777
I00
sS'group_name'
p53778
S'Advanced'
p53779
sasS'name'
p53780
S'/VectorPostprocessors/LineMaterialRealSampler'
p53781
sa(dp53782
S'description'
p53783
g3
sS'subblocks'
p53784
NsS'parameters'
p53785
(lp53786
(dp53787
S'description'
p53788
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53789
sS'cpp_type'
p53790
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53791
sS'default'
p53792
g3
sS'name'
p53793
S'control_tags'
p53794
sS'required'
p53795
I00
sS'group_name'
p53796
S'Advanced'
p53797
sa(dp53798
S'description'
p53799
S'Set the enabled status of the MooseObject.\n'
p53800
sS'cpp_type'
p53801
S'bool'
p53802
sS'default'
p53803
S'1'
p53804
sS'name'
p53805
S'enable'
p53806
sS'required'
p53807
I00
sS'group_name'
p53808
S'Advanced'
p53809
sa(dp53810
S'description'
p53811
S'The ending of the line\n'
p53812
sS'cpp_type'
p53813
S'libMesh::Point'
p53814
sS'default'
p53815
g3
sS'name'
p53816
S'end_point'
p53817
sS'required'
p53818
I01
sS'group_name'
p53819
Nsa(dp53820
S'name'
p53821
S'execute_on'
p53822
sS'cpp_type'
p53823
S'MultiMooseEnum'
p53824
sS'default'
p53825
S'TIMESTEP_END'
p53826
sS'description'
p53827
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53828
sS'required'
p53829
I00
sS'options'
p53830
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53831
sS'group_name'
p53832
Nsa(dp53833
S'description'
p53834
S'The number of points to sample along the line\n'
p53835
sS'cpp_type'
p53836
S'unsigned int'
p53837
sS'default'
p53838
g3
sS'name'
p53839
S'num_points'
p53840
sS'required'
p53841
I01
sS'group_name'
p53842
Nsa(dp53843
S'description'
p53844
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53845
sS'cpp_type'
p53846
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53847
sS'default'
p53848
g3
sS'name'
p53849
S'outputs'
p53850
sS'required'
p53851
I00
sS'group_name'
p53852
S'Advanced'
p53853
sa(dp53854
S'name'
p53855
S'sort_by'
p53856
sS'cpp_type'
p53857
S'MooseEnum'
p53858
sS'default'
p53859
g3
sS'description'
p53860
S'What to sort the samples by\n'
p53861
sS'required'
p53862
I01
sS'options'
p53863
S'x y z id'
p53864
sS'group_name'
p53865
Nsa(dp53866
S'description'
p53867
S'The beginning of the line\n'
p53868
sS'cpp_type'
p53869
S'libMesh::Point'
p53870
sS'default'
p53871
g3
sS'name'
p53872
S'start_point'
p53873
sS'required'
p53874
I01
sS'group_name'
p53875
Nsa(dp53876
S'description'
p53877
g3
sS'cpp_type'
p53878
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p53879
sS'default'
p53880
S'LineValueSampler'
p53881
sS'name'
p53882
S'type'
p53883
sS'required'
p53884
I00
sS'group_name'
p53885
Nsa(dp53886
S'description'
p53887
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p53888
sS'cpp_type'
p53889
S'bool'
p53890
sS'default'
p53891
S'0'
p53892
sS'name'
p53893
S'use_displaced_mesh'
p53894
sS'required'
p53895
I00
sS'group_name'
p53896
S'Advanced'
p53897
sa(dp53898
S'description'
p53899
S'The names of the variables that this VectorPostprocessor operates on\n'
p53900
sS'cpp_type'
p53901
S'std::vector<VariableName>'
p53902
sS'default'
p53903
g3
sS'name'
p53904
S'variable'
p53905
sS'required'
p53906
I01
sS'group_name'
p53907
NsasS'name'
p53908
S'/VectorPostprocessors/LineValueSampler'
p53909
sa(dp53910
S'description'
p53911
g3
sS'subblocks'
p53912
NsS'parameters'
p53913
(lp53914
(dp53915
S'description'
p53916
S'The list of block ids (SubdomainID) that this object will be applied\n'
p53917
sS'cpp_type'
p53918
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p53919
sS'default'
p53920
g3
sS'name'
p53921
S'block'
p53922
sS'required'
p53923
I00
sS'group_name'
p53924
Nsa(dp53925
S'description'
p53926
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p53927
sS'cpp_type'
p53928
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p53929
sS'default'
p53930
g3
sS'name'
p53931
S'boundary'
p53932
sS'required'
p53933
I00
sS'group_name'
p53934
Nsa(dp53935
S'description'
p53936
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p53937
sS'cpp_type'
p53938
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p53939
sS'default'
p53940
g3
sS'name'
p53941
S'control_tags'
p53942
sS'required'
p53943
I00
sS'group_name'
p53944
S'Advanced'
p53945
sa(dp53946
S'description'
p53947
S'Set the enabled status of the MooseObject.\n'
p53948
sS'cpp_type'
p53949
S'bool'
p53950
sS'default'
p53951
S'1'
p53952
sS'name'
p53953
S'enable'
p53954
sS'required'
p53955
I00
sS'group_name'
p53956
S'Advanced'
p53957
sa(dp53958
S'name'
p53959
S'execute_on'
p53960
sS'cpp_type'
p53961
S'MultiMooseEnum'
p53962
sS'default'
p53963
S'TIMESTEP_END'
p53964
sS'description'
p53965
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p53966
sS'required'
p53967
I00
sS'options'
p53968
S'none initial linear nonlinear timestep_end timestep_begin custom'
p53969
sS'group_name'
p53970
Nsa(dp53971
S'description'
p53972
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p53973
sS'cpp_type'
p53974
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p53975
sS'default'
p53976
g3
sS'name'
p53977
S'outputs'
p53978
sS'required'
p53979
I00
sS'group_name'
p53980
S'Advanced'
p53981
sa(dp53982
S'description'
p53983
S'The seed for the master random number generator\n'
p53984
sS'cpp_type'
p53985
S'unsigned int'
p53986
sS'default'
p53987
S'0'
p53988
sS'name'
p53989
S'seed'
p53990
sS'required'
p53991
I00
sS'group_name'
p53992
S'Advanced'
p53993
sa(dp53994
S'name'
p53995
S'sort_by'
p53996
sS'cpp_type'
p53997
S'MooseEnum'
p53998
sS'default'
p53999
g3
sS'description'
p54000
S'What to sort the samples by\n'
p54001
sS'required'
p54002
I01
sS'options'
p54003
S'x y z id'
p54004
sS'group_name'
p54005
Nsa(dp54006
S'description'
p54007
g3
sS'cpp_type'
p54008
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p54009
sS'default'
p54010
S'NodalValueSampler'
p54011
sS'name'
p54012
S'type'
p54013
sS'required'
p54014
I00
sS'group_name'
p54015
Nsa(dp54016
S'description'
p54017
S'When false (default), block restricted objects will have the execute method called multiple times on a single node if the node lies on a interface between two subdomains.\n'
p54018
sS'cpp_type'
p54019
S'bool'
p54020
sS'default'
p54021
S'0'
p54022
sS'name'
p54023
S'unique_node_execute'
p54024
sS'required'
p54025
I00
sS'group_name'
p54026
Nsa(dp54027
S'description'
p54028
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54029
sS'cpp_type'
p54030
S'bool'
p54031
sS'default'
p54032
S'0'
p54033
sS'name'
p54034
S'use_displaced_mesh'
p54035
sS'required'
p54036
I00
sS'group_name'
p54037
S'Advanced'
p54038
sa(dp54039
S'description'
p54040
S'The names of the variables that this VectorPostprocessor operates on\n'
p54041
sS'cpp_type'
p54042
S'std::vector<VariableName>'
p54043
sS'default'
p54044
g3
sS'name'
p54045
S'variable'
p54046
sS'required'
p54047
I01
sS'group_name'
p54048
NsasS'name'
p54049
S'/VectorPostprocessors/NodalValueSampler'
p54050
sa(dp54051
S'description'
p54052
g3
sS'subblocks'
p54053
NsS'parameters'
p54054
(lp54055
(dp54056
S'description'
p54057
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54058
sS'cpp_type'
p54059
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p54060
sS'default'
p54061
g3
sS'name'
p54062
S'control_tags'
p54063
sS'required'
p54064
I00
sS'group_name'
p54065
S'Advanced'
p54066
sa(dp54067
S'description'
p54068
S'Set the enabled status of the MooseObject.\n'
p54069
sS'cpp_type'
p54070
S'bool'
p54071
sS'default'
p54072
S'1'
p54073
sS'name'
p54074
S'enable'
p54075
sS'required'
p54076
I00
sS'group_name'
p54077
S'Advanced'
p54078
sa(dp54079
S'name'
p54080
S'execute_on'
p54081
sS'cpp_type'
p54082
S'MultiMooseEnum'
p54083
sS'default'
p54084
S'TIMESTEP_END'
p54085
sS'description'
p54086
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p54087
sS'required'
p54088
I00
sS'options'
p54089
S'none initial linear nonlinear timestep_end timestep_begin custom'
p54090
sS'group_name'
p54091
Nsa(dp54092
S'description'
p54093
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p54094
sS'cpp_type'
p54095
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p54096
sS'default'
p54097
g3
sS'name'
p54098
S'outputs'
p54099
sS'required'
p54100
I00
sS'group_name'
p54101
S'Advanced'
p54102
sa(dp54103
S'description'
p54104
S'The points where you want to evaluate the variables\n'
p54105
sS'cpp_type'
p54106
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p54107
sS'default'
p54108
g3
sS'name'
p54109
S'points'
p54110
sS'required'
p54111
I01
sS'group_name'
p54112
Nsa(dp54113
S'name'
p54114
S'sort_by'
p54115
sS'cpp_type'
p54116
S'MooseEnum'
p54117
sS'default'
p54118
g3
sS'description'
p54119
S'What to sort the samples by\n'
p54120
sS'required'
p54121
I01
sS'options'
p54122
S'x y z id'
p54123
sS'group_name'
p54124
Nsa(dp54125
S'description'
p54126
g3
sS'cpp_type'
p54127
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p54128
sS'default'
p54129
S'PointValueSampler'
p54130
sS'name'
p54131
S'type'
p54132
sS'required'
p54133
I00
sS'group_name'
p54134
Nsa(dp54135
S'description'
p54136
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54137
sS'cpp_type'
p54138
S'bool'
p54139
sS'default'
p54140
S'0'
p54141
sS'name'
p54142
S'use_displaced_mesh'
p54143
sS'required'
p54144
I00
sS'group_name'
p54145
S'Advanced'
p54146
sa(dp54147
S'description'
p54148
S'The names of the variables that this VectorPostprocessor operates on\n'
p54149
sS'cpp_type'
p54150
S'std::vector<VariableName>'
p54151
sS'default'
p54152
g3
sS'name'
p54153
S'variable'
p54154
sS'required'
p54155
I01
sS'group_name'
p54156
NsasS'name'
p54157
S'/VectorPostprocessors/PointValueSampler'
p54158
sa(dp54159
S'description'
p54160
g3
sS'subblocks'
p54161
NsS'parameters'
p54162
(lp54163
(dp54164
S'description'
p54165
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p54166
sS'cpp_type'
p54167
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p54168
sS'default'
p54169
g3
sS'name'
p54170
S'boundary'
p54171
sS'required'
p54172
I01
sS'group_name'
p54173
Nsa(dp54174
S'description'
p54175
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54176
sS'cpp_type'
p54177
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p54178
sS'default'
p54179
g3
sS'name'
p54180
S'control_tags'
p54181
sS'required'
p54182
I00
sS'group_name'
p54183
S'Advanced'
p54184
sa(dp54185
S'description'
p54186
S'Set the enabled status of the MooseObject.\n'
p54187
sS'cpp_type'
p54188
S'bool'
p54189
sS'default'
p54190
S'1'
p54191
sS'name'
p54192
S'enable'
p54193
sS'required'
p54194
I00
sS'group_name'
p54195
S'Advanced'
p54196
sa(dp54197
S'name'
p54198
S'execute_on'
p54199
sS'cpp_type'
p54200
S'MultiMooseEnum'
p54201
sS'default'
p54202
S'TIMESTEP_END'
p54203
sS'description'
p54204
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p54205
sS'required'
p54206
I00
sS'options'
p54207
S'none initial linear nonlinear timestep_end timestep_begin custom'
p54208
sS'group_name'
p54209
Nsa(dp54210
S'description'
p54211
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p54212
sS'cpp_type'
p54213
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p54214
sS'default'
p54215
g3
sS'name'
p54216
S'outputs'
p54217
sS'required'
p54218
I00
sS'group_name'
p54219
S'Advanced'
p54220
sa(dp54221
S'name'
p54222
S'sort_by'
p54223
sS'cpp_type'
p54224
S'MooseEnum'
p54225
sS'default'
p54226
g3
sS'description'
p54227
S'What to sort the samples by\n'
p54228
sS'required'
p54229
I01
sS'options'
p54230
S'x y z id'
p54231
sS'group_name'
p54232
Nsa(dp54233
S'description'
p54234
g3
sS'cpp_type'
p54235
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p54236
sS'default'
p54237
S'SideValueSampler'
p54238
sS'name'
p54239
S'type'
p54240
sS'required'
p54241
I00
sS'group_name'
p54242
Nsa(dp54243
S'description'
p54244
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54245
sS'cpp_type'
p54246
S'bool'
p54247
sS'default'
p54248
S'0'
p54249
sS'name'
p54250
S'use_displaced_mesh'
p54251
sS'required'
p54252
I00
sS'group_name'
p54253
S'Advanced'
p54254
sa(dp54255
S'description'
p54256
S'The names of the variables that this VectorPostprocessor operates on\n'
p54257
sS'cpp_type'
p54258
S'std::vector<VariableName>'
p54259
sS'default'
p54260
g3
sS'name'
p54261
S'variable'
p54262
sS'required'
p54263
I01
sS'group_name'
p54264
NsasS'name'
p54265
S'/VectorPostprocessors/SideValueSampler'
p54266
sa(dp54267
S'description'
p54268
g3
sS'subblocks'
p54269
NsS'parameters'
p54270
(lp54271
(dp54272
S'description'
p54273
S'Number of histogram bins\n'
p54274
sS'cpp_type'
p54275
S'unsigned int'
p54276
sS'default'
p54277
S'50'
p54278
sS'name'
p54279
S'bin_number'
p54280
sS'required'
p54281
I00
sS'group_name'
p54282
Nsa(dp54283
S'description'
p54284
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54285
sS'cpp_type'
p54286
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p54287
sS'default'
p54288
g3
sS'name'
p54289
S'block'
p54290
sS'required'
p54291
I00
sS'group_name'
p54292
Nsa(dp54293
S'description'
p54294
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54295
sS'cpp_type'
p54296
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p54297
sS'default'
p54298
g3
sS'name'
p54299
S'control_tags'
p54300
sS'required'
p54301
I00
sS'group_name'
p54302
S'Advanced'
p54303
sa(dp54304
S'description'
p54305
S'Value to assign to bins into which no datapoints fall\n'
p54306
sS'cpp_type'
p54307
S'double'
p54308
sS'default'
p54309
S'0'
p54310
sS'name'
p54311
S'empty_bin_value'
p54312
sS'required'
p54313
I00
sS'group_name'
p54314
Nsa(dp54315
S'description'
p54316
S'Set the enabled status of the MooseObject.\n'
p54317
sS'cpp_type'
p54318
S'bool'
p54319
sS'default'
p54320
S'1'
p54321
sS'name'
p54322
S'enable'
p54323
sS'required'
p54324
I00
sS'group_name'
p54325
S'Advanced'
p54326
sa(dp54327
S'name'
p54328
S'execute_on'
p54329
sS'cpp_type'
p54330
S'MultiMooseEnum'
p54331
sS'default'
p54332
S'TIMESTEP_END'
p54333
sS'description'
p54334
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p54335
sS'required'
p54336
I00
sS'options'
p54337
S'none initial linear nonlinear timestep_end timestep_begin custom'
p54338
sS'group_name'
p54339
Nsa(dp54340
S'description'
p54341
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p54342
sS'cpp_type'
p54343
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p54344
sS'default'
p54345
g3
sS'name'
p54346
S'outputs'
p54347
sS'required'
p54348
I00
sS'group_name'
p54349
S'Advanced'
p54350
sa(dp54351
S'description'
p54352
S'Radius to average out to\n'
p54353
sS'cpp_type'
p54354
S'double'
p54355
sS'default'
p54356
g3
sS'name'
p54357
S'radius'
p54358
sS'required'
p54359
I01
sS'group_name'
p54360
Nsa(dp54361
S'description'
p54362
S'The seed for the master random number generator\n'
p54363
sS'cpp_type'
p54364
S'unsigned int'
p54365
sS'default'
p54366
S'0'
p54367
sS'name'
p54368
S'seed'
p54369
sS'required'
p54370
I00
sS'group_name'
p54371
S'Advanced'
p54372
sa(dp54373
S'description'
p54374
g3
sS'cpp_type'
p54375
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p54376
sS'default'
p54377
S'SphericalAverage'
p54378
sS'name'
p54379
S'type'
p54380
sS'required'
p54381
I00
sS'group_name'
p54382
Nsa(dp54383
S'description'
p54384
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54385
sS'cpp_type'
p54386
S'bool'
p54387
sS'default'
p54388
S'0'
p54389
sS'name'
p54390
S'use_displaced_mesh'
p54391
sS'required'
p54392
I00
sS'group_name'
p54393
S'Advanced'
p54394
sa(dp54395
S'description'
p54396
S'Variables to average radially\n'
p54397
sS'cpp_type'
p54398
S'std::vector<VariableName>'
p54399
sS'default'
p54400
g3
sS'name'
p54401
S'variable'
p54402
sS'required'
p54403
I00
sS'group_name'
p54404
NsasS'name'
p54405
S'/VectorPostprocessors/SphericalAverage'
p54406
sa(dp54407
S'description'
p54408
S'Outputs the values of an arbitrary user-specified set of postprocessors as a vector in the order specified by the user\n'
p54409
sS'subblocks'
p54410
NsS'parameters'
p54411
(lp54412
(dp54413
S'description'
p54414
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54415
sS'cpp_type'
p54416
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p54417
sS'default'
p54418
g3
sS'name'
p54419
S'control_tags'
p54420
sS'required'
p54421
I00
sS'group_name'
p54422
S'Advanced'
p54423
sa(dp54424
S'description'
p54425
S'Set the enabled status of the MooseObject.\n'
p54426
sS'cpp_type'
p54427
S'bool'
p54428
sS'default'
p54429
S'1'
p54430
sS'name'
p54431
S'enable'
p54432
sS'required'
p54433
I00
sS'group_name'
p54434
S'Advanced'
p54435
sa(dp54436
S'name'
p54437
S'execute_on'
p54438
sS'cpp_type'
p54439
S'MultiMooseEnum'
p54440
sS'default'
p54441
S'TIMESTEP_END'
p54442
sS'description'
p54443
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p54444
sS'required'
p54445
I00
sS'options'
p54446
S'none initial linear nonlinear timestep_end timestep_begin custom'
p54447
sS'group_name'
p54448
Nsa(dp54449
S'description'
p54450
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p54451
sS'cpp_type'
p54452
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p54453
sS'default'
p54454
g3
sS'name'
p54455
S'outputs'
p54456
sS'required'
p54457
I00
sS'group_name'
p54458
S'Advanced'
p54459
sa(dp54460
S'description'
p54461
S'The postprocessors whose values are to be reported\n'
p54462
sS'cpp_type'
p54463
S'std::__1::vector<PostprocessorName, std::__1::allocator<PostprocessorName> >'
p54464
sS'default'
p54465
g3
sS'name'
p54466
S'postprocessors'
p54467
sS'required'
p54468
I01
sS'group_name'
p54469
Nsa(dp54470
S'description'
p54471
g3
sS'cpp_type'
p54472
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p54473
sS'default'
p54474
S'VectorOfPostprocessors'
p54475
sS'name'
p54476
S'type'
p54477
sS'required'
p54478
I00
sS'group_name'
p54479
Nsa(dp54480
S'description'
p54481
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54482
sS'cpp_type'
p54483
S'bool'
p54484
sS'default'
p54485
S'0'
p54486
sS'name'
p54487
S'use_displaced_mesh'
p54488
sS'required'
p54489
I00
sS'group_name'
p54490
S'Advanced'
p54491
sasS'name'
p54492
S'/VectorPostprocessors/VectorOfPostprocessors'
p54493
sa(dp54494
S'description'
p54495
g3
sS'subblocks'
p54496
NsS'parameters'
p54497
(lp54498
(dp54499
S'description'
p54500
S'Number of histogram bins\n'
p54501
sS'cpp_type'
p54502
S'unsigned int'
p54503
sS'default'
p54504
S'50'
p54505
sS'name'
p54506
S'bin_number'
p54507
sS'required'
p54508
I00
sS'group_name'
p54509
Nsa(dp54510
S'description'
p54511
S'The list of block ids (SubdomainID) that this object will be applied\n'
p54512
sS'cpp_type'
p54513
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p54514
sS'default'
p54515
g3
sS'name'
p54516
S'block'
p54517
sS'required'
p54518
I00
sS'group_name'
p54519
Nsa(dp54520
S'description'
p54521
S'Adds user-defined labels for accessing object parameters via control logic.\n'
p54522
sS'cpp_type'
p54523
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p54524
sS'default'
p54525
g3
sS'name'
p54526
S'control_tags'
p54527
sS'required'
p54528
I00
sS'group_name'
p54529
S'Advanced'
p54530
sa(dp54531
S'description'
p54532
S'Set the enabled status of the MooseObject.\n'
p54533
sS'cpp_type'
p54534
S'bool'
p54535
sS'default'
p54536
S'1'
p54537
sS'name'
p54538
S'enable'
p54539
sS'required'
p54540
I00
sS'group_name'
p54541
S'Advanced'
p54542
sa(dp54543
S'name'
p54544
S'execute_on'
p54545
sS'cpp_type'
p54546
S'MultiMooseEnum'
p54547
sS'default'
p54548
S'TIMESTEP_END'
p54549
sS'description'
p54550
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p54551
sS'required'
p54552
I00
sS'options'
p54553
S'none initial linear nonlinear timestep_end timestep_begin custom'
p54554
sS'group_name'
p54555
Nsa(dp54556
S'description'
p54557
S'Maximum variable value\n'
p54558
sS'cpp_type'
p54559
S'double'
p54560
sS'default'
p54561
g3
sS'name'
p54562
S'max_value'
p54563
sS'required'
p54564
I01
sS'group_name'
p54565
Nsa(dp54566
S'description'
p54567
S'Minimum variable value\n'
p54568
sS'cpp_type'
p54569
S'double'
p54570
sS'default'
p54571
g3
sS'name'
p54572
S'min_value'
p54573
sS'required'
p54574
I01
sS'group_name'
p54575
Nsa(dp54576
S'description'
p54577
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p54578
sS'cpp_type'
p54579
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p54580
sS'default'
p54581
g3
sS'name'
p54582
S'outputs'
p54583
sS'required'
p54584
I00
sS'group_name'
p54585
S'Advanced'
p54586
sa(dp54587
S'description'
p54588
S'The seed for the master random number generator\n'
p54589
sS'cpp_type'
p54590
S'unsigned int'
p54591
sS'default'
p54592
S'0'
p54593
sS'name'
p54594
S'seed'
p54595
sS'required'
p54596
I00
sS'group_name'
p54597
S'Advanced'
p54598
sa(dp54599
S'description'
p54600
g3
sS'cpp_type'
p54601
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p54602
sS'default'
p54603
S'VolumeHistogram'
p54604
sS'name'
p54605
S'type'
p54606
sS'required'
p54607
I00
sS'group_name'
p54608
Nsa(dp54609
S'description'
p54610
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p54611
sS'cpp_type'
p54612
S'bool'
p54613
sS'default'
p54614
S'0'
p54615
sS'name'
p54616
S'use_displaced_mesh'
p54617
sS'required'
p54618
I00
sS'group_name'
p54619
S'Advanced'
p54620
sa(dp54621
S'description'
p54622
S'Variable to bin the volume of\n'
p54623
sS'cpp_type'
p54624
S'std::vector<VariableName>'
p54625
sS'default'
p54626
g3
sS'name'
p54627
S'variable'
p54628
sS'required'
p54629
I00
sS'group_name'
p54630
NsasS'name'
p54631
S'/VectorPostprocessors/VolumeHistogram'
p54632
sasS'parameters'
p54633
NsS'name'
p54634
S'/VectorPostprocessors'
p54635
sa.